/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["react-infinite-grid-scroller"] = factory(require("react"), require("react-dom"));
	else
		root["react-infinite-grid-scroller"] = factory(root["react"], root["react-dom"]);
})(self, (__WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOMRectReadOnly\": () => (/* binding */ DOMRectReadOnly)\n/* harmony export */ });\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n\nvar DOMRectReadOnly = (function () {\n    function DOMRectReadOnly(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.top = this.y;\n        this.left = this.x;\n        this.bottom = this.top + this.height;\n        this.right = this.left + this.width;\n        return (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_0__.freeze)(this);\n    }\n    DOMRectReadOnly.prototype.toJSON = function () {\n        var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n        return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };\n    };\n    DOMRectReadOnly.fromRect = function (rectangle) {\n        return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n    };\n    return DOMRectReadOnly;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL0RPTVJlY3RSZWFkT25seS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscURBQU07QUFDckI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQzBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvRE9NUmVjdFJlYWRPbmx5LmpzP2ZkZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJlZXplIH0gZnJvbSAnLi91dGlscy9mcmVlemUnO1xudmFyIERPTVJlY3RSZWFkT25seSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRE9NUmVjdFJlYWRPbmx5KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy50b3AgPSB0aGlzLnk7XG4gICAgICAgIHRoaXMubGVmdCA9IHRoaXMueDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLnRvcCArIHRoaXMuaGVpZ2h0O1xuICAgICAgICB0aGlzLnJpZ2h0ID0gdGhpcy5sZWZ0ICsgdGhpcy53aWR0aDtcbiAgICAgICAgcmV0dXJuIGZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgRE9NUmVjdFJlYWRPbmx5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHggPSBfYS54LCB5ID0gX2EueSwgdG9wID0gX2EudG9wLCByaWdodCA9IF9hLnJpZ2h0LCBib3R0b20gPSBfYS5ib3R0b20sIGxlZnQgPSBfYS5sZWZ0LCB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XG4gICAgICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHRvcDogdG9wLCByaWdodDogcmlnaHQsIGJvdHRvbTogYm90dG9tLCBsZWZ0OiBsZWZ0LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG4gICAgfTtcbiAgICBET01SZWN0UmVhZE9ubHkuZnJvbVJlY3QgPSBmdW5jdGlvbiAocmVjdGFuZ2xlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRE9NUmVjdFJlYWRPbmx5KHJlY3RhbmdsZS54LCByZWN0YW5nbGUueSwgcmVjdGFuZ2xlLndpZHRoLCByZWN0YW5nbGUuaGVpZ2h0KTtcbiAgICB9O1xuICAgIHJldHVybiBET01SZWN0UmVhZE9ubHk7XG59KCkpO1xuZXhwb3J0IHsgRE9NUmVjdFJlYWRPbmx5IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObservation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObservation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObservation\": () => (/* binding */ ResizeObservation)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResizeObserverBoxOptions */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\");\n/* harmony import */ var _algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./algorithms/calculateBoxSize */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\n\n\nvar skipNotifyOnElement = function (target) {\n    return !(0,_utils_element__WEBPACK_IMPORTED_MODULE_2__.isSVG)(target)\n        && !(0,_utils_element__WEBPACK_IMPORTED_MODULE_2__.isReplacedElement)(target)\n        && getComputedStyle(target).display === 'inline';\n};\nvar ResizeObservation = (function () {\n    function ResizeObservation(target, observedBox) {\n        this.target = target;\n        this.observedBox = observedBox || _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.CONTENT_BOX;\n        this.lastReportedSize = {\n            inlineSize: 0,\n            blockSize: 0\n        };\n    }\n    ResizeObservation.prototype.isActive = function () {\n        var size = (0,_algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_1__.calculateBoxSize)(this.target, this.observedBox, true);\n        if (skipNotifyOnElement(this.target)) {\n            this.lastReportedSize = size;\n        }\n        if (this.lastReportedSize.inlineSize !== size.inlineSize\n            || this.lastReportedSize.blockSize !== size.blockSize) {\n            return true;\n        }\n        return false;\n    };\n    return ResizeObservation;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmF0aW9uLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0U7QUFDTDtBQUNOO0FBQzNEO0FBQ0EsWUFBWSxxREFBSztBQUNqQixZQUFZLGlFQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDJGQUFvQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOEVBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUM0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmF0aW9uLmpzPzQ0YzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zIH0gZnJvbSAnLi9SZXNpemVPYnNlcnZlckJveE9wdGlvbnMnO1xuaW1wb3J0IHsgY2FsY3VsYXRlQm94U2l6ZSB9IGZyb20gJy4vYWxnb3JpdGhtcy9jYWxjdWxhdGVCb3hTaXplJztcbmltcG9ydCB7IGlzU1ZHLCBpc1JlcGxhY2VkRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvZWxlbWVudCc7XG52YXIgc2tpcE5vdGlmeU9uRWxlbWVudCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICByZXR1cm4gIWlzU1ZHKHRhcmdldClcbiAgICAgICAgJiYgIWlzUmVwbGFjZWRFbGVtZW50KHRhcmdldClcbiAgICAgICAgJiYgZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmRpc3BsYXkgPT09ICdpbmxpbmUnO1xufTtcbnZhciBSZXNpemVPYnNlcnZhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0LCBvYnNlcnZlZEJveCkge1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5vYnNlcnZlZEJveCA9IG9ic2VydmVkQm94IHx8IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5DT05URU5UX0JPWDtcbiAgICAgICAgdGhpcy5sYXN0UmVwb3J0ZWRTaXplID0ge1xuICAgICAgICAgICAgaW5saW5lU2l6ZTogMCxcbiAgICAgICAgICAgIGJsb2NrU2l6ZTogMFxuICAgICAgICB9O1xuICAgIH1cbiAgICBSZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuaXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzaXplID0gY2FsY3VsYXRlQm94U2l6ZSh0aGlzLnRhcmdldCwgdGhpcy5vYnNlcnZlZEJveCwgdHJ1ZSk7XG4gICAgICAgIGlmIChza2lwTm90aWZ5T25FbGVtZW50KHRoaXMudGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0UmVwb3J0ZWRTaXplID0gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYXN0UmVwb3J0ZWRTaXplLmlubGluZVNpemUgIT09IHNpemUuaW5saW5lU2l6ZVxuICAgICAgICAgICAgfHwgdGhpcy5sYXN0UmVwb3J0ZWRTaXplLmJsb2NrU2l6ZSAhPT0gc2l6ZS5ibG9ja1NpemUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBSZXNpemVPYnNlcnZhdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZhdGlvbiB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObservation.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserver.js":
/*!********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserver.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserver\": () => (/* binding */ ResizeObserver)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResizeObserverController */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\n\nvar ResizeObserver = (function () {\n    function ResizeObserver(callback) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (typeof callback !== 'function') {\n            throw new TypeError(\"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.connect(this, callback);\n    }\n    ResizeObserver.prototype.observe = function (target, options) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (!(0,_utils_element__WEBPACK_IMPORTED_MODULE_1__.isElement)(target)) {\n            throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.observe(this, target, options);\n    };\n    ResizeObserver.prototype.unobserve = function (target) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (!(0,_utils_element__WEBPACK_IMPORTED_MODULE_1__.isElement)(target)) {\n            throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.unobserve(this, target);\n    };\n    ResizeObserver.prototype.disconnect = function () {\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.disconnect(this);\n    };\n    ResizeObserver.toString = function () {\n        return 'function ResizeObserver () { [polyfill code] }';\n    };\n    return ResizeObserver;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRTtBQUMxQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1RkFBZ0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEseURBQVM7QUFDdEI7QUFDQTtBQUNBLFFBQVEsdUZBQWdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlEQUFTO0FBQ3RCO0FBQ0E7QUFDQSxRQUFRLHlGQUFrQztBQUMxQztBQUNBO0FBQ0EsUUFBUSwwRkFBbUM7QUFDM0M7QUFDQTtBQUNBLDZDQUE2QyxpQkFBaUI7QUFDOUQ7QUFDQTtBQUNBLENBQUM7QUFDeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9SZXNpemVPYnNlcnZlci5qcz9kMDIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlciB9IGZyb20gJy4vUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyJztcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvZWxlbWVudCc7XG52YXIgUmVzaXplT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUmVzaXplT2JzZXJ2ZXInOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdSZXNpemVPYnNlcnZlcic6IFRoZSBjYWxsYmFjayBwcm92aWRlZCBhcyBwYXJhbWV0ZXIgMSBpcyBub3QgYSBmdW5jdGlvbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmNvbm5lY3QodGhpcywgY2FsbGJhY2spO1xuICAgIH1cbiAgICBSZXNpemVPYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnb2JzZXJ2ZScgb24gJ1Jlc2l6ZU9ic2VydmVyJzogMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ29ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IHBhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlICdFbGVtZW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5vYnNlcnZlKHRoaXMsIHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBSZXNpemVPYnNlcnZlci5wcm90b3R5cGUudW5vYnNlcnZlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd1bm9ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd1bm9ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IHBhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlICdFbGVtZW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci51bm9ic2VydmUodGhpcywgdGFyZ2V0KTtcbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuZGlzY29ubmVjdCh0aGlzKTtcbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ2Z1bmN0aW9uIFJlc2l6ZU9ic2VydmVyICgpIHsgW3BvbHlmaWxsIGNvZGVdIH0nO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyO1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserver.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverBoxOptions\": () => (/* binding */ ResizeObserverBoxOptions)\n/* harmony export */ });\nvar ResizeObserverBoxOptions;\n(function (ResizeObserverBoxOptions) {\n    ResizeObserverBoxOptions[\"BORDER_BOX\"] = \"border-box\";\n    ResizeObserverBoxOptions[\"CONTENT_BOX\"] = \"content-box\";\n    ResizeObserverBoxOptions[\"DEVICE_PIXEL_CONTENT_BOX\"] = \"device-pixel-content-box\";\n})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNERBQTREO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zLmpzP2U1NTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucztcbihmdW5jdGlvbiAoUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zKSB7XG4gICAgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zW1wiQk9SREVSX0JPWFwiXSA9IFwiYm9yZGVyLWJveFwiO1xuICAgIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9uc1tcIkNPTlRFTlRfQk9YXCJdID0gXCJjb250ZW50LWJveFwiO1xuICAgIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9uc1tcIkRFVklDRV9QSVhFTF9DT05URU5UX0JPWFwiXSA9IFwiZGV2aWNlLXBpeGVsLWNvbnRlbnQtYm94XCI7XG59KShSZXNpemVPYnNlcnZlckJveE9wdGlvbnMgfHwgKFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyA9IHt9KSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverController\": () => (/* binding */ ResizeObserverController)\n/* harmony export */ });\n/* harmony import */ var _utils_scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/scheduler */ \"./node_modules/@juggle/resize-observer/lib/utils/scheduler.js\");\n/* harmony import */ var _ResizeObservation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ResizeObservation */ \"./node_modules/@juggle/resize-observer/lib/ResizeObservation.js\");\n/* harmony import */ var _ResizeObserverDetail__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ResizeObserverDetail */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js\");\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n\n\n\n\nvar observerMap = new WeakMap();\nvar getObservationIndex = function (observationTargets, target) {\n    for (var i = 0; i < observationTargets.length; i += 1) {\n        if (observationTargets[i].target === target) {\n            return i;\n        }\n    }\n    return -1;\n};\nvar ResizeObserverController = (function () {\n    function ResizeObserverController() {\n    }\n    ResizeObserverController.connect = function (resizeObserver, callback) {\n        var detail = new _ResizeObserverDetail__WEBPACK_IMPORTED_MODULE_2__.ResizeObserverDetail(resizeObserver, callback);\n        observerMap.set(resizeObserver, detail);\n    };\n    ResizeObserverController.observe = function (resizeObserver, target, options) {\n        var detail = observerMap.get(resizeObserver);\n        var firstObservation = detail.observationTargets.length === 0;\n        if (getObservationIndex(detail.observationTargets, target) < 0) {\n            firstObservation && _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.push(detail);\n            detail.observationTargets.push(new _ResizeObservation__WEBPACK_IMPORTED_MODULE_1__.ResizeObservation(target, options && options.box));\n            (0,_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.updateCount)(1);\n            _utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.scheduler.schedule();\n        }\n    };\n    ResizeObserverController.unobserve = function (resizeObserver, target) {\n        var detail = observerMap.get(resizeObserver);\n        var index = getObservationIndex(detail.observationTargets, target);\n        var lastObservation = detail.observationTargets.length === 1;\n        if (index >= 0) {\n            lastObservation && _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.splice(_utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.indexOf(detail), 1);\n            detail.observationTargets.splice(index, 1);\n            (0,_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.updateCount)(-1);\n        }\n    };\n    ResizeObserverController.disconnect = function (resizeObserver) {\n        var _this = this;\n        var detail = observerMap.get(resizeObserver);\n        detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });\n        detail.activeTargets.splice(0, detail.activeTargets.length);\n    };\n    return ResizeObserverController;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRDtBQUNIO0FBQ007QUFDSjtBQUMxRDtBQUNBO0FBQ0Esb0JBQW9CLCtCQUErQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1RUFBb0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdFQUFvQjtBQUNwRCwrQ0FBK0MsaUVBQWlCO0FBQ2hFLFlBQVksNkRBQVc7QUFDdkIsWUFBWSxnRUFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMEVBQXNCLENBQUMsMkVBQXVCO0FBQzdFO0FBQ0EsWUFBWSw2REFBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLG9EQUFvRDtBQUN0SDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ21DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmpzP2YzNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NoZWR1bGVyLCB1cGRhdGVDb3VudCB9IGZyb20gJy4vdXRpbHMvc2NoZWR1bGVyJztcbmltcG9ydCB7IFJlc2l6ZU9ic2VydmF0aW9uIH0gZnJvbSAnLi9SZXNpemVPYnNlcnZhdGlvbic7XG5pbXBvcnQgeyBSZXNpemVPYnNlcnZlckRldGFpbCB9IGZyb20gJy4vUmVzaXplT2JzZXJ2ZXJEZXRhaWwnO1xuaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi91dGlscy9yZXNpemVPYnNlcnZlcnMnO1xudmFyIG9ic2VydmVyTWFwID0gbmV3IFdlYWtNYXAoKTtcbnZhciBnZXRPYnNlcnZhdGlvbkluZGV4ID0gZnVuY3Rpb24gKG9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYnNlcnZhdGlvblRhcmdldHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKG9ic2VydmF0aW9uVGFyZ2V0c1tpXS50YXJnZXQgPT09IHRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufTtcbnZhciBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcigpIHtcbiAgICB9XG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmNvbm5lY3QgPSBmdW5jdGlvbiAocmVzaXplT2JzZXJ2ZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkZXRhaWwgPSBuZXcgUmVzaXplT2JzZXJ2ZXJEZXRhaWwocmVzaXplT2JzZXJ2ZXIsIGNhbGxiYWNrKTtcbiAgICAgICAgb2JzZXJ2ZXJNYXAuc2V0KHJlc2l6ZU9ic2VydmVyLCBkZXRhaWwpO1xuICAgIH07XG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLm9ic2VydmUgPSBmdW5jdGlvbiAocmVzaXplT2JzZXJ2ZXIsIHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgZGV0YWlsID0gb2JzZXJ2ZXJNYXAuZ2V0KHJlc2l6ZU9ic2VydmVyKTtcbiAgICAgICAgdmFyIGZpcnN0T2JzZXJ2YXRpb24gPSBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgaWYgKGdldE9ic2VydmF0aW9uSW5kZXgoZGV0YWlsLm9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KSA8IDApIHtcbiAgICAgICAgICAgIGZpcnN0T2JzZXJ2YXRpb24gJiYgcmVzaXplT2JzZXJ2ZXJzLnB1c2goZGV0YWlsKTtcbiAgICAgICAgICAgIGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMucHVzaChuZXcgUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0LCBvcHRpb25zICYmIG9wdGlvbnMuYm94KSk7XG4gICAgICAgICAgICB1cGRhdGVDb3VudCgxKTtcbiAgICAgICAgICAgIHNjaGVkdWxlci5zY2hlZHVsZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIudW5vYnNlcnZlID0gZnVuY3Rpb24gKHJlc2l6ZU9ic2VydmVyLCB0YXJnZXQpIHtcbiAgICAgICAgdmFyIGRldGFpbCA9IG9ic2VydmVyTWFwLmdldChyZXNpemVPYnNlcnZlcik7XG4gICAgICAgIHZhciBpbmRleCA9IGdldE9ic2VydmF0aW9uSW5kZXgoZGV0YWlsLm9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGxhc3RPYnNlcnZhdGlvbiA9IGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMubGVuZ3RoID09PSAxO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgbGFzdE9ic2VydmF0aW9uICYmIHJlc2l6ZU9ic2VydmVycy5zcGxpY2UocmVzaXplT2JzZXJ2ZXJzLmluZGV4T2YoZGV0YWlsKSwgMSk7XG4gICAgICAgICAgICBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB1cGRhdGVDb3VudCgtMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKHJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBkZXRhaWwgPSBvYnNlcnZlck1hcC5nZXQocmVzaXplT2JzZXJ2ZXIpO1xuICAgICAgICBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAob3QpIHsgcmV0dXJuIF90aGlzLnVub2JzZXJ2ZShyZXNpemVPYnNlcnZlciwgb3QudGFyZ2V0KTsgfSk7XG4gICAgICAgIGRldGFpbC5hY3RpdmVUYXJnZXRzLnNwbGljZSgwLCBkZXRhaWwuYWN0aXZlVGFyZ2V0cy5sZW5ndGgpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcjtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverDetail\": () => (/* binding */ ResizeObserverDetail)\n/* harmony export */ });\nvar ResizeObserverDetail = (function () {\n    function ResizeObserverDetail(resizeObserver, callback) {\n        this.activeTargets = [];\n        this.skippedTargets = [];\n        this.observationTargets = [];\n        this.observer = resizeObserver;\n        this.callback = callback;\n    }\n    return ResizeObserverDetail;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRGV0YWlsLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQytCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJEZXRhaWwuanM/NzgxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUmVzaXplT2JzZXJ2ZXJEZXRhaWwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyRGV0YWlsKHJlc2l6ZU9ic2VydmVyLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmFjdGl2ZVRhcmdldHMgPSBbXTtcbiAgICAgICAgdGhpcy5za2lwcGVkVGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLm9ic2VydmF0aW9uVGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLm9ic2VydmVyID0gcmVzaXplT2JzZXJ2ZXI7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyRGV0YWlsO1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyRGV0YWlsIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverEntry\": () => (/* binding */ ResizeObserverEntry)\n/* harmony export */ });\n/* harmony import */ var _algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/calculateBoxSize */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\");\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n\n\nvar ResizeObserverEntry = (function () {\n    function ResizeObserverEntry(target) {\n        var boxes = (0,_algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_0__.calculateBoxSizes)(target);\n        this.target = target;\n        this.contentRect = boxes.contentRect;\n        this.borderBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.borderBoxSize]);\n        this.contentBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.contentBoxSize]);\n        this.devicePixelContentBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.devicePixelContentBoxSize]);\n    }\n    return ResizeObserverEntry;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRW50cnkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtFO0FBQzFCO0FBQ3hDO0FBQ0E7QUFDQSxvQkFBb0IsK0VBQWlCO0FBQ3JDO0FBQ0E7QUFDQSw2QkFBNkIscURBQU07QUFDbkMsOEJBQThCLHFEQUFNO0FBQ3BDLHlDQUF5QyxxREFBTTtBQUMvQztBQUNBO0FBQ0EsQ0FBQztBQUM4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRW50cnkuanM/NDFlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxjdWxhdGVCb3hTaXplcyB9IGZyb20gJy4vYWxnb3JpdGhtcy9jYWxjdWxhdGVCb3hTaXplJztcbmltcG9ydCB7IGZyZWV6ZSB9IGZyb20gJy4vdXRpbHMvZnJlZXplJztcbnZhciBSZXNpemVPYnNlcnZlckVudHJ5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlckVudHJ5KHRhcmdldCkge1xuICAgICAgICB2YXIgYm94ZXMgPSBjYWxjdWxhdGVCb3hTaXplcyh0YXJnZXQpO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5jb250ZW50UmVjdCA9IGJveGVzLmNvbnRlbnRSZWN0O1xuICAgICAgICB0aGlzLmJvcmRlckJveFNpemUgPSBmcmVlemUoW2JveGVzLmJvcmRlckJveFNpemVdKTtcbiAgICAgICAgdGhpcy5jb250ZW50Qm94U2l6ZSA9IGZyZWV6ZShbYm94ZXMuY29udGVudEJveFNpemVdKTtcbiAgICAgICAgdGhpcy5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplID0gZnJlZXplKFtib3hlcy5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplXSk7XG4gICAgfVxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlckVudHJ5O1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyRW50cnkgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js":
/*!************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverSize\": () => (/* binding */ ResizeObserverSize)\n/* harmony export */ });\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n\nvar ResizeObserverSize = (function () {\n    function ResizeObserverSize(inlineSize, blockSize) {\n        this.inlineSize = inlineSize;\n        this.blockSize = blockSize;\n        (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_0__.freeze)(this);\n    }\n    return ResizeObserverSize;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyU2l6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEscURBQU07QUFDZDtBQUNBO0FBQ0EsQ0FBQztBQUM2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyU2l6ZS5qcz9jNjU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyZWV6ZSB9IGZyb20gJy4vdXRpbHMvZnJlZXplJztcbnZhciBSZXNpemVPYnNlcnZlclNpemUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyU2l6ZShpbmxpbmVTaXplLCBibG9ja1NpemUpIHtcbiAgICAgICAgdGhpcy5pbmxpbmVTaXplID0gaW5saW5lU2l6ZTtcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSBibG9ja1NpemU7XG4gICAgICAgIGZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyU2l6ZTtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlclNpemUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"broadcastActiveObservations\": () => (/* binding */ broadcastActiveObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n/* harmony import */ var _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverEntry */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\");\n/* harmony import */ var _calculateDepthForNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculateDepthForNode */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\");\n/* harmony import */ var _calculateBoxSize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./calculateBoxSize */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\");\n\n\n\n\nvar broadcastActiveObservations = function () {\n    var shallowestDepth = Infinity;\n    var callbacks = [];\n    _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.forEach(function processObserver(ro) {\n        if (ro.activeTargets.length === 0) {\n            return;\n        }\n        var entries = [];\n        ro.activeTargets.forEach(function processTarget(ot) {\n            var entry = new _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverEntry(ot.target);\n            var targetDepth = (0,_calculateDepthForNode__WEBPACK_IMPORTED_MODULE_2__.calculateDepthForNode)(ot.target);\n            entries.push(entry);\n            ot.lastReportedSize = (0,_calculateBoxSize__WEBPACK_IMPORTED_MODULE_3__.calculateBoxSize)(ot.target, ot.observedBox);\n            if (targetDepth < shallowestDepth) {\n                shallowestDepth = targetDepth;\n            }\n        });\n        callbacks.push(function resizeObserverCallback() {\n            ro.callback.call(ro.observer, entries, ro.observer);\n        });\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n    });\n    for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n        var callback = callbacks_1[_i];\n        callback();\n    }\n    return shallowestDepth;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJEO0FBQ0U7QUFDRztBQUNWO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLElBQUksMkVBQXVCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIscUVBQW1CO0FBQy9DLDhCQUE4Qiw2RUFBcUI7QUFDbkQ7QUFDQSxrQ0FBa0MsbUVBQWdCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLDhDQUE4Qyx5QkFBeUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zLmpzP2NhYjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbmltcG9ydCB7IFJlc2l6ZU9ic2VydmVyRW50cnkgfSBmcm9tICcuLi9SZXNpemVPYnNlcnZlckVudHJ5JztcbmltcG9ydCB7IGNhbGN1bGF0ZURlcHRoRm9yTm9kZSB9IGZyb20gJy4vY2FsY3VsYXRlRGVwdGhGb3JOb2RlJztcbmltcG9ydCB7IGNhbGN1bGF0ZUJveFNpemUgfSBmcm9tICcuL2NhbGN1bGF0ZUJveFNpemUnO1xudmFyIGJyb2FkY2FzdEFjdGl2ZU9ic2VydmF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2hhbGxvd2VzdERlcHRoID0gSW5maW5pdHk7XG4gICAgdmFyIGNhbGxiYWNrcyA9IFtdO1xuICAgIHJlc2l6ZU9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIHByb2Nlc3NPYnNlcnZlcihybykge1xuICAgICAgICBpZiAocm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgICAgICByby5hY3RpdmVUYXJnZXRzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc1RhcmdldChvdCkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob3QudGFyZ2V0KTtcbiAgICAgICAgICAgIHZhciB0YXJnZXREZXB0aCA9IGNhbGN1bGF0ZURlcHRoRm9yTm9kZShvdC50YXJnZXQpO1xuICAgICAgICAgICAgZW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIG90Lmxhc3RSZXBvcnRlZFNpemUgPSBjYWxjdWxhdGVCb3hTaXplKG90LnRhcmdldCwgb3Qub2JzZXJ2ZWRCb3gpO1xuICAgICAgICAgICAgaWYgKHRhcmdldERlcHRoIDwgc2hhbGxvd2VzdERlcHRoKSB7XG4gICAgICAgICAgICAgICAgc2hhbGxvd2VzdERlcHRoID0gdGFyZ2V0RGVwdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiByZXNpemVPYnNlcnZlckNhbGxiYWNrKCkge1xuICAgICAgICAgICAgcm8uY2FsbGJhY2suY2FsbChyby5vYnNlcnZlciwgZW50cmllcywgcm8ub2JzZXJ2ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcm8uYWN0aXZlVGFyZ2V0cy5zcGxpY2UoMCwgcm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGgpO1xuICAgIH0pO1xuICAgIGZvciAodmFyIF9pID0gMCwgY2FsbGJhY2tzXzEgPSBjYWxsYmFja3M7IF9pIDwgY2FsbGJhY2tzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc18xW19pXTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYWxsb3dlc3REZXB0aDtcbn07XG5leHBvcnQgeyBicm9hZGNhc3RBY3RpdmVPYnNlcnZhdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateBoxSize\": () => (/* binding */ calculateBoxSize),\n/* harmony export */   \"calculateBoxSizes\": () => (/* binding */ calculateBoxSizes)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ResizeObserverBoxOptions */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\");\n/* harmony import */ var _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverSize */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\");\n/* harmony import */ var _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../DOMRectReadOnly */ \"./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n/* harmony import */ var _utils_global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/global */ \"./node_modules/@juggle/resize-observer/lib/utils/global.js\");\n\n\n\n\n\n\nvar cache = new WeakMap();\nvar scrollRegexp = /auto|scroll/;\nvar verticalRegexp = /^tb|vertical/;\nvar IE = (/msie|trident/i).test(_utils_global__WEBPACK_IMPORTED_MODULE_5__.global.navigator && _utils_global__WEBPACK_IMPORTED_MODULE_5__.global.navigator.userAgent);\nvar parseDimension = function (pixel) { return parseFloat(pixel || '0'); };\nvar size = function (inlineSize, blockSize, switchSizes) {\n    if (inlineSize === void 0) { inlineSize = 0; }\n    if (blockSize === void 0) { blockSize = 0; }\n    if (switchSizes === void 0) { switchSizes = false; }\n    return new _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);\n};\nvar zeroBoxes = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_4__.freeze)({\n    devicePixelContentBoxSize: size(),\n    borderBoxSize: size(),\n    contentBoxSize: size(),\n    contentRect: new _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__.DOMRectReadOnly(0, 0, 0, 0)\n});\nvar calculateBoxSizes = function (target, forceRecalculation) {\n    if (forceRecalculation === void 0) { forceRecalculation = false; }\n    if (cache.has(target) && !forceRecalculation) {\n        return cache.get(target);\n    }\n    if ((0,_utils_element__WEBPACK_IMPORTED_MODULE_3__.isHidden)(target)) {\n        cache.set(target, zeroBoxes);\n        return zeroBoxes;\n    }\n    var cs = getComputedStyle(target);\n    var svg = (0,_utils_element__WEBPACK_IMPORTED_MODULE_3__.isSVG)(target) && target.ownerSVGElement && target.getBBox();\n    var removePadding = !IE && cs.boxSizing === 'border-box';\n    var switchSizes = verticalRegexp.test(cs.writingMode || '');\n    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n    var horizontalPadding = paddingLeft + paddingRight;\n    var verticalPadding = paddingTop + paddingBottom;\n    var horizontalBorderArea = borderLeft + borderRight;\n    var verticalBorderArea = borderTop + borderBottom;\n    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n    var boxes = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_4__.freeze)({\n        devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),\n        borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n        contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n        contentRect: new _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__.DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n    });\n    cache.set(target, boxes);\n    return boxes;\n};\nvar calculateBoxSize = function (target, observedBox, forceRecalculation) {\n    var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;\n    switch (observedBox) {\n        case _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:\n            return devicePixelContentBoxSize;\n        case _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.BORDER_BOX:\n            return borderBoxSize;\n        default:\n            return contentBoxSize;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlQm94U2l6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF1RTtBQUNaO0FBQ047QUFDRjtBQUNWO0FBQ0E7QUFDekM7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDJEQUFnQixJQUFJLHFFQUEwQjtBQUM5RSx3Q0FBd0M7QUFDeEM7QUFDQSxpQ0FBaUM7QUFDakMsZ0NBQWdDO0FBQ2hDLGtDQUFrQztBQUNsQyxlQUFlLG1FQUFrQjtBQUNqQztBQUNBLGdCQUFnQixxREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkRBQWU7QUFDcEMsQ0FBQztBQUNEO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0RBQVE7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHFEQUFLO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNkRBQWU7QUFDeEMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsd0dBQWlEO0FBQzlEO0FBQ0EsYUFBYSwwRkFBbUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlQm94U2l6ZS5qcz8xMDZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyB9IGZyb20gJy4uL1Jlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyc7XG5pbXBvcnQgeyBSZXNpemVPYnNlcnZlclNpemUgfSBmcm9tICcuLi9SZXNpemVPYnNlcnZlclNpemUnO1xuaW1wb3J0IHsgRE9NUmVjdFJlYWRPbmx5IH0gZnJvbSAnLi4vRE9NUmVjdFJlYWRPbmx5JztcbmltcG9ydCB7IGlzU1ZHLCBpc0hpZGRlbiB9IGZyb20gJy4uL3V0aWxzL2VsZW1lbnQnO1xuaW1wb3J0IHsgZnJlZXplIH0gZnJvbSAnLi4vdXRpbHMvZnJlZXplJztcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gJy4uL3V0aWxzL2dsb2JhbCc7XG52YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xudmFyIHNjcm9sbFJlZ2V4cCA9IC9hdXRvfHNjcm9sbC87XG52YXIgdmVydGljYWxSZWdleHAgPSAvXnRifHZlcnRpY2FsLztcbnZhciBJRSA9ICgvbXNpZXx0cmlkZW50L2kpLnRlc3QoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG52YXIgcGFyc2VEaW1lbnNpb24gPSBmdW5jdGlvbiAocGl4ZWwpIHsgcmV0dXJuIHBhcnNlRmxvYXQocGl4ZWwgfHwgJzAnKTsgfTtcbnZhciBzaXplID0gZnVuY3Rpb24gKGlubGluZVNpemUsIGJsb2NrU2l6ZSwgc3dpdGNoU2l6ZXMpIHtcbiAgICBpZiAoaW5saW5lU2l6ZSA9PT0gdm9pZCAwKSB7IGlubGluZVNpemUgPSAwOyB9XG4gICAgaWYgKGJsb2NrU2l6ZSA9PT0gdm9pZCAwKSB7IGJsb2NrU2l6ZSA9IDA7IH1cbiAgICBpZiAoc3dpdGNoU2l6ZXMgPT09IHZvaWQgMCkgeyBzd2l0Y2hTaXplcyA9IGZhbHNlOyB9XG4gICAgcmV0dXJuIG5ldyBSZXNpemVPYnNlcnZlclNpemUoKHN3aXRjaFNpemVzID8gYmxvY2tTaXplIDogaW5saW5lU2l6ZSkgfHwgMCwgKHN3aXRjaFNpemVzID8gaW5saW5lU2l6ZSA6IGJsb2NrU2l6ZSkgfHwgMCk7XG59O1xudmFyIHplcm9Cb3hlcyA9IGZyZWV6ZSh7XG4gICAgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTogc2l6ZSgpLFxuICAgIGJvcmRlckJveFNpemU6IHNpemUoKSxcbiAgICBjb250ZW50Qm94U2l6ZTogc2l6ZSgpLFxuICAgIGNvbnRlbnRSZWN0OiBuZXcgRE9NUmVjdFJlYWRPbmx5KDAsIDAsIDAsIDApXG59KTtcbnZhciBjYWxjdWxhdGVCb3hTaXplcyA9IGZ1bmN0aW9uICh0YXJnZXQsIGZvcmNlUmVjYWxjdWxhdGlvbikge1xuICAgIGlmIChmb3JjZVJlY2FsY3VsYXRpb24gPT09IHZvaWQgMCkgeyBmb3JjZVJlY2FsY3VsYXRpb24gPSBmYWxzZTsgfVxuICAgIGlmIChjYWNoZS5oYXModGFyZ2V0KSAmJiAhZm9yY2VSZWNhbGN1bGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5nZXQodGFyZ2V0KTtcbiAgICB9XG4gICAgaWYgKGlzSGlkZGVuKHRhcmdldCkpIHtcbiAgICAgICAgY2FjaGUuc2V0KHRhcmdldCwgemVyb0JveGVzKTtcbiAgICAgICAgcmV0dXJuIHplcm9Cb3hlcztcbiAgICB9XG4gICAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICAgIHZhciBzdmcgPSBpc1NWRyh0YXJnZXQpICYmIHRhcmdldC5vd25lclNWR0VsZW1lbnQgJiYgdGFyZ2V0LmdldEJCb3goKTtcbiAgICB2YXIgcmVtb3ZlUGFkZGluZyA9ICFJRSAmJiBjcy5ib3hTaXppbmcgPT09ICdib3JkZXItYm94JztcbiAgICB2YXIgc3dpdGNoU2l6ZXMgPSB2ZXJ0aWNhbFJlZ2V4cC50ZXN0KGNzLndyaXRpbmdNb2RlIHx8ICcnKTtcbiAgICB2YXIgY2FuU2Nyb2xsVmVydGljYWxseSA9ICFzdmcgJiYgc2Nyb2xsUmVnZXhwLnRlc3QoY3Mub3ZlcmZsb3dZIHx8ICcnKTtcbiAgICB2YXIgY2FuU2Nyb2xsSG9yaXpvbnRhbGx5ID0gIXN2ZyAmJiBzY3JvbGxSZWdleHAudGVzdChjcy5vdmVyZmxvd1ggfHwgJycpO1xuICAgIHZhciBwYWRkaW5nVG9wID0gc3ZnID8gMCA6IHBhcnNlRGltZW5zaW9uKGNzLnBhZGRpbmdUb3ApO1xuICAgIHZhciBwYWRkaW5nUmlnaHQgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ1JpZ2h0KTtcbiAgICB2YXIgcGFkZGluZ0JvdHRvbSA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5wYWRkaW5nQm90dG9tKTtcbiAgICB2YXIgcGFkZGluZ0xlZnQgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ0xlZnQpO1xuICAgIHZhciBib3JkZXJUb3AgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MuYm9yZGVyVG9wV2lkdGgpO1xuICAgIHZhciBib3JkZXJSaWdodCA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5ib3JkZXJSaWdodFdpZHRoKTtcbiAgICB2YXIgYm9yZGVyQm90dG9tID0gc3ZnID8gMCA6IHBhcnNlRGltZW5zaW9uKGNzLmJvcmRlckJvdHRvbVdpZHRoKTtcbiAgICB2YXIgYm9yZGVyTGVmdCA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5ib3JkZXJMZWZ0V2lkdGgpO1xuICAgIHZhciBob3Jpem9udGFsUGFkZGluZyA9IHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0O1xuICAgIHZhciB2ZXJ0aWNhbFBhZGRpbmcgPSBwYWRkaW5nVG9wICsgcGFkZGluZ0JvdHRvbTtcbiAgICB2YXIgaG9yaXpvbnRhbEJvcmRlckFyZWEgPSBib3JkZXJMZWZ0ICsgYm9yZGVyUmlnaHQ7XG4gICAgdmFyIHZlcnRpY2FsQm9yZGVyQXJlYSA9IGJvcmRlclRvcCArIGJvcmRlckJvdHRvbTtcbiAgICB2YXIgaG9yaXpvbnRhbFNjcm9sbGJhclRoaWNrbmVzcyA9ICFjYW5TY3JvbGxIb3Jpem9udGFsbHkgPyAwIDogdGFyZ2V0Lm9mZnNldEhlaWdodCAtIHZlcnRpY2FsQm9yZGVyQXJlYSAtIHRhcmdldC5jbGllbnRIZWlnaHQ7XG4gICAgdmFyIHZlcnRpY2FsU2Nyb2xsYmFyVGhpY2tuZXNzID0gIWNhblNjcm9sbFZlcnRpY2FsbHkgPyAwIDogdGFyZ2V0Lm9mZnNldFdpZHRoIC0gaG9yaXpvbnRhbEJvcmRlckFyZWEgLSB0YXJnZXQuY2xpZW50V2lkdGg7XG4gICAgdmFyIHdpZHRoUmVkdWN0aW9uID0gcmVtb3ZlUGFkZGluZyA/IGhvcml6b250YWxQYWRkaW5nICsgaG9yaXpvbnRhbEJvcmRlckFyZWEgOiAwO1xuICAgIHZhciBoZWlnaHRSZWR1Y3Rpb24gPSByZW1vdmVQYWRkaW5nID8gdmVydGljYWxQYWRkaW5nICsgdmVydGljYWxCb3JkZXJBcmVhIDogMDtcbiAgICB2YXIgY29udGVudFdpZHRoID0gc3ZnID8gc3ZnLndpZHRoIDogcGFyc2VEaW1lbnNpb24oY3Mud2lkdGgpIC0gd2lkdGhSZWR1Y3Rpb24gLSB2ZXJ0aWNhbFNjcm9sbGJhclRoaWNrbmVzcztcbiAgICB2YXIgY29udGVudEhlaWdodCA9IHN2ZyA/IHN2Zy5oZWlnaHQgOiBwYXJzZURpbWVuc2lvbihjcy5oZWlnaHQpIC0gaGVpZ2h0UmVkdWN0aW9uIC0gaG9yaXpvbnRhbFNjcm9sbGJhclRoaWNrbmVzcztcbiAgICB2YXIgYm9yZGVyQm94V2lkdGggPSBjb250ZW50V2lkdGggKyBob3Jpem9udGFsUGFkZGluZyArIHZlcnRpY2FsU2Nyb2xsYmFyVGhpY2tuZXNzICsgaG9yaXpvbnRhbEJvcmRlckFyZWE7XG4gICAgdmFyIGJvcmRlckJveEhlaWdodCA9IGNvbnRlbnRIZWlnaHQgKyB2ZXJ0aWNhbFBhZGRpbmcgKyBob3Jpem9udGFsU2Nyb2xsYmFyVGhpY2tuZXNzICsgdmVydGljYWxCb3JkZXJBcmVhO1xuICAgIHZhciBib3hlcyA9IGZyZWV6ZSh7XG4gICAgICAgIGRldmljZVBpeGVsQ29udGVudEJveFNpemU6IHNpemUoTWF0aC5yb3VuZChjb250ZW50V2lkdGggKiBkZXZpY2VQaXhlbFJhdGlvKSwgTWF0aC5yb3VuZChjb250ZW50SGVpZ2h0ICogZGV2aWNlUGl4ZWxSYXRpbyksIHN3aXRjaFNpemVzKSxcbiAgICAgICAgYm9yZGVyQm94U2l6ZTogc2l6ZShib3JkZXJCb3hXaWR0aCwgYm9yZGVyQm94SGVpZ2h0LCBzd2l0Y2hTaXplcyksXG4gICAgICAgIGNvbnRlbnRCb3hTaXplOiBzaXplKGNvbnRlbnRXaWR0aCwgY29udGVudEhlaWdodCwgc3dpdGNoU2l6ZXMpLFxuICAgICAgICBjb250ZW50UmVjdDogbmV3IERPTVJlY3RSZWFkT25seShwYWRkaW5nTGVmdCwgcGFkZGluZ1RvcCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0KVxuICAgIH0pO1xuICAgIGNhY2hlLnNldCh0YXJnZXQsIGJveGVzKTtcbiAgICByZXR1cm4gYm94ZXM7XG59O1xudmFyIGNhbGN1bGF0ZUJveFNpemUgPSBmdW5jdGlvbiAodGFyZ2V0LCBvYnNlcnZlZEJveCwgZm9yY2VSZWNhbGN1bGF0aW9uKSB7XG4gICAgdmFyIF9hID0gY2FsY3VsYXRlQm94U2l6ZXModGFyZ2V0LCBmb3JjZVJlY2FsY3VsYXRpb24pLCBib3JkZXJCb3hTaXplID0gX2EuYm9yZGVyQm94U2l6ZSwgY29udGVudEJveFNpemUgPSBfYS5jb250ZW50Qm94U2l6ZSwgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZSA9IF9hLmRldmljZVBpeGVsQ29udGVudEJveFNpemU7XG4gICAgc3dpdGNoIChvYnNlcnZlZEJveCkge1xuICAgICAgICBjYXNlIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5ERVZJQ0VfUElYRUxfQ09OVEVOVF9CT1g6XG4gICAgICAgICAgICByZXR1cm4gZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTtcbiAgICAgICAgY2FzZSBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMuQk9SREVSX0JPWDpcbiAgICAgICAgICAgIHJldHVybiBib3JkZXJCb3hTaXplO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRCb3hTaXplO1xuICAgIH1cbn07XG5leHBvcnQgeyBjYWxjdWxhdGVCb3hTaXplLCBjYWxjdWxhdGVCb3hTaXplcyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateDepthForNode\": () => (/* binding */ calculateDepthForNode)\n/* harmony export */ });\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\nvar calculateDepthForNode = function (node) {\n    if ((0,_utils_element__WEBPACK_IMPORTED_MODULE_0__.isHidden)(node)) {\n        return Infinity;\n    }\n    var depth = 0;\n    var parent = node.parentNode;\n    while (parent) {\n        depth += 1;\n        parent = parent.parentNode;\n    }\n    return depth;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlRGVwdGhGb3JOb2RlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDO0FBQ0EsUUFBUSx3REFBUTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlRGVwdGhGb3JOb2RlLmpzP2M5MzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNIaWRkZW4gfSBmcm9tICcuLi91dGlscy9lbGVtZW50JztcbnZhciBjYWxjdWxhdGVEZXB0aEZvck5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChpc0hpZGRlbihub2RlKSkge1xuICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIGRlcHRoICs9IDE7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZGVwdGg7XG59O1xuZXhwb3J0IHsgY2FsY3VsYXRlRGVwdGhGb3JOb2RlIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deliverResizeLoopError\": () => (/* binding */ deliverResizeLoopError)\n/* harmony export */ });\nvar msg = 'ResizeObserver loop completed with undelivered notifications.';\nvar deliverResizeLoopError = function () {\n    var event;\n    if (typeof ErrorEvent === 'function') {\n        event = new ErrorEvent('error', {\n            message: msg\n        });\n    }\n    else {\n        event = document.createEvent('Event');\n        event.initEvent('error', false, false);\n        event.message = msg;\n    }\n    window.dispatchEvent(event);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvZGVsaXZlclJlc2l6ZUxvb3BFcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9hbGdvcml0aG1zL2RlbGl2ZXJSZXNpemVMb29wRXJyb3IuanM/YzJlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbXNnID0gJ1Jlc2l6ZU9ic2VydmVyIGxvb3AgY29tcGxldGVkIHdpdGggdW5kZWxpdmVyZWQgbm90aWZpY2F0aW9ucy4nO1xudmFyIGRlbGl2ZXJSZXNpemVMb29wRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV2ZW50O1xuICAgIGlmICh0eXBlb2YgRXJyb3JFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBldmVudCA9IG5ldyBFcnJvckV2ZW50KCdlcnJvcicsIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1zZ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICAgIGV2ZW50LmluaXRFdmVudCgnZXJyb3InLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBldmVudC5tZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG59O1xuZXhwb3J0IHsgZGVsaXZlclJlc2l6ZUxvb3BFcnJvciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gatherActiveObservationsAtDepth\": () => (/* binding */ gatherActiveObservationsAtDepth)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n/* harmony import */ var _calculateDepthForNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calculateDepthForNode */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\");\n\n\nvar gatherActiveObservationsAtDepth = function (depth) {\n    _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.forEach(function processObserver(ro) {\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n        ro.skippedTargets.splice(0, ro.skippedTargets.length);\n        ro.observationTargets.forEach(function processTarget(ot) {\n            if (ot.isActive()) {\n                if ((0,_calculateDepthForNode__WEBPACK_IMPORTED_MODULE_1__.calculateDepthForNode)(ot.target) > depth) {\n                    ro.activeTargets.push(ot);\n                }\n                else {\n                    ro.skippedTargets.push(ot);\n                }\n            }\n        });\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkQ7QUFDSztBQUNoRTtBQUNBLElBQUksMkVBQXVCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDZFQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQzJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvYWxnb3JpdGhtcy9nYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoLmpzPzQ1YjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbmltcG9ydCB7IGNhbGN1bGF0ZURlcHRoRm9yTm9kZSB9IGZyb20gJy4vY2FsY3VsYXRlRGVwdGhGb3JOb2RlJztcbnZhciBnYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoID0gZnVuY3Rpb24gKGRlcHRoKSB7XG4gICAgcmVzaXplT2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc09ic2VydmVyKHJvKSB7XG4gICAgICAgIHJvLmFjdGl2ZVRhcmdldHMuc3BsaWNlKDAsIHJvLmFjdGl2ZVRhcmdldHMubGVuZ3RoKTtcbiAgICAgICAgcm8uc2tpcHBlZFRhcmdldHMuc3BsaWNlKDAsIHJvLnNraXBwZWRUYXJnZXRzLmxlbmd0aCk7XG4gICAgICAgIHJvLm9ic2VydmF0aW9uVGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uIHByb2Nlc3NUYXJnZXQob3QpIHtcbiAgICAgICAgICAgIGlmIChvdC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGN1bGF0ZURlcHRoRm9yTm9kZShvdC50YXJnZXQpID4gZGVwdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcm8uYWN0aXZlVGFyZ2V0cy5wdXNoKG90KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJvLnNraXBwZWRUYXJnZXRzLnB1c2gob3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0IHsgZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hasActiveObservations\": () => (/* binding */ hasActiveObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n\nvar hasActiveObservations = function () {\n    return _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzQWN0aXZlT2JzZXJ2YXRpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJEO0FBQzNEO0FBQ0EsV0FBVyx3RUFBb0IsaUJBQWlCLHFDQUFxQztBQUNyRjtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzQWN0aXZlT2JzZXJ2YXRpb25zLmpzP2RkYTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbnZhciBoYXNBY3RpdmVPYnNlcnZhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlc2l6ZU9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChybykgeyByZXR1cm4gcm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGggPiAwOyB9KTtcbn07XG5leHBvcnQgeyBoYXNBY3RpdmVPYnNlcnZhdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hasSkippedObservations\": () => (/* binding */ hasSkippedObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n\nvar hasSkippedObservations = function () {\n    return _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzU2tpcHBlZE9ic2VydmF0aW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyRDtBQUMzRDtBQUNBLFdBQVcsd0VBQW9CLGlCQUFpQixzQ0FBc0M7QUFDdEY7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9hbGdvcml0aG1zL2hhc1NraXBwZWRPYnNlcnZhdGlvbnMuanM/YzEwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNpemVPYnNlcnZlcnMgfSBmcm9tICcuLi91dGlscy9yZXNpemVPYnNlcnZlcnMnO1xudmFyIGhhc1NraXBwZWRPYnNlcnZhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlc2l6ZU9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChybykgeyByZXR1cm4gcm8uc2tpcHBlZFRhcmdldHMubGVuZ3RoID4gMDsgfSk7XG59O1xuZXhwb3J0IHsgaGFzU2tpcHBlZE9ic2VydmF0aW9ucyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserver\": () => (/* reexport safe */ _ResizeObserver__WEBPACK_IMPORTED_MODULE_0__.ResizeObserver),\n/* harmony export */   \"ResizeObserverEntry\": () => (/* reexport safe */ _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverEntry),\n/* harmony export */   \"ResizeObserverSize\": () => (/* reexport safe */ _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_2__.ResizeObserverSize)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ResizeObserver */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserver.js\");\n/* harmony import */ var _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverEntry */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\");\n/* harmony import */ var _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ResizeObserverSize */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2V4cG9ydHMvcmVzaXplLW9ic2VydmVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFtRDtBQUNVO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9leHBvcnRzL3Jlc2l6ZS1vYnNlcnZlci5qcz8xZDFmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyIH0gZnJvbSAnLi4vUmVzaXplT2JzZXJ2ZXInO1xuZXhwb3J0IHsgUmVzaXplT2JzZXJ2ZXJFbnRyeSB9IGZyb20gJy4uL1Jlc2l6ZU9ic2VydmVyRW50cnknO1xuZXhwb3J0IHsgUmVzaXplT2JzZXJ2ZXJTaXplIH0gZnJvbSAnLi4vUmVzaXplT2JzZXJ2ZXJTaXplJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/element.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isElement\": () => (/* binding */ isElement),\n/* harmony export */   \"isHidden\": () => (/* binding */ isHidden),\n/* harmony export */   \"isReplacedElement\": () => (/* binding */ isReplacedElement),\n/* harmony export */   \"isSVG\": () => (/* binding */ isSVG)\n/* harmony export */ });\nvar isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };\nvar isHidden = function (target) {\n    if (isSVG(target)) {\n        var _a = target.getBBox(), width = _a.width, height = _a.height;\n        return !width && !height;\n    }\n    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;\n    return !(offsetWidth || offsetHeight || target.getClientRects().length);\n};\nvar isElement = function (obj) {\n    var _a, _b;\n    if (obj instanceof Element) {\n        return true;\n    }\n    var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;\n    return !!(scope && obj instanceof scope.Element);\n};\nvar isReplacedElement = function (target) {\n    switch (target.tagName) {\n        case 'INPUT':\n            if (target.type !== 'image') {\n                break;\n            }\n        case 'VIDEO':\n        case 'AUDIO':\n        case 'EMBED':\n        case 'OBJECT':\n        case 'CANVAS':\n        case 'IFRAME':\n        case 'IMG':\n            return true;\n    }\n    return false;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2VsZW1lbnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDeUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9lbGVtZW50LmpzPzNjZDUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzU1ZHID0gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCAmJiAnZ2V0QkJveCcgaW4gdGFyZ2V0OyB9O1xudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGlmIChpc1NWRyh0YXJnZXQpKSB7XG4gICAgICAgIHZhciBfYSA9IHRhcmdldC5nZXRCQm94KCksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcbiAgICAgICAgcmV0dXJuICF3aWR0aCAmJiAhaGVpZ2h0O1xuICAgIH1cbiAgICB2YXIgX2IgPSB0YXJnZXQsIG9mZnNldFdpZHRoID0gX2Iub2Zmc2V0V2lkdGgsIG9mZnNldEhlaWdodCA9IF9iLm9mZnNldEhlaWdodDtcbiAgICByZXR1cm4gIShvZmZzZXRXaWR0aCB8fCBvZmZzZXRIZWlnaHQgfHwgdGFyZ2V0LmdldENsaWVudFJlY3RzKCkubGVuZ3RoKTtcbn07XG52YXIgaXNFbGVtZW50ID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBzY29wZSA9IChfYiA9IChfYSA9IG9iaikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm93bmVyRG9jdW1lbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5kZWZhdWx0VmlldztcbiAgICByZXR1cm4gISEoc2NvcGUgJiYgb2JqIGluc3RhbmNlb2Ygc2NvcGUuRWxlbWVudCk7XG59O1xudmFyIGlzUmVwbGFjZWRFbGVtZW50ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHN3aXRjaCAodGFyZ2V0LnRhZ05hbWUpIHtcbiAgICAgICAgY2FzZSAnSU5QVVQnOlxuICAgICAgICAgICAgaWYgKHRhcmdldC50eXBlICE9PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1ZJREVPJzpcbiAgICAgICAgY2FzZSAnQVVESU8nOlxuICAgICAgICBjYXNlICdFTUJFRCc6XG4gICAgICAgIGNhc2UgJ09CSkVDVCc6XG4gICAgICAgIGNhc2UgJ0NBTlZBUyc6XG4gICAgICAgIGNhc2UgJ0lGUkFNRSc6XG4gICAgICAgIGNhc2UgJ0lNRyc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydCB7IGlzU1ZHLCBpc0hpZGRlbiwgaXNFbGVtZW50LCBpc1JlcGxhY2VkRWxlbWVudCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/element.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js":
/*!******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/freeze.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"freeze\": () => (/* binding */ freeze)\n/* harmony export */ });\nvar freeze = function (obj) { return Object.freeze(obj); };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2ZyZWV6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvZnJlZXplLmpzP2ZjZjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBmcmVlemUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBPYmplY3QuZnJlZXplKG9iaik7IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/freeze.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/global.js":
/*!******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/global.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"global\": () => (/* binding */ global)\n/* harmony export */ });\nvar global = typeof window !== 'undefined' ? window : {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2dsb2JhbC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9nbG9iYWwuanM/Y2I3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIGdsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/global.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/process.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/process.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"process\": () => (/* binding */ process)\n/* harmony export */ });\n/* harmony import */ var _algorithms_hasActiveObservations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../algorithms/hasActiveObservations */ \"./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js\");\n/* harmony import */ var _algorithms_hasSkippedObservations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../algorithms/hasSkippedObservations */ \"./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js\");\n/* harmony import */ var _algorithms_deliverResizeLoopError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../algorithms/deliverResizeLoopError */ \"./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js\");\n/* harmony import */ var _algorithms_broadcastActiveObservations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../algorithms/broadcastActiveObservations */ \"./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js\");\n/* harmony import */ var _algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../algorithms/gatherActiveObservationsAtDepth */ \"./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js\");\n\n\n\n\n\nvar process = function () {\n    var depth = 0;\n    (0,_algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__.gatherActiveObservationsAtDepth)(depth);\n    while ((0,_algorithms_hasActiveObservations__WEBPACK_IMPORTED_MODULE_0__.hasActiveObservations)()) {\n        depth = (0,_algorithms_broadcastActiveObservations__WEBPACK_IMPORTED_MODULE_3__.broadcastActiveObservations)();\n        (0,_algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__.gatherActiveObservationsAtDepth)(depth);\n    }\n    if ((0,_algorithms_hasSkippedObservations__WEBPACK_IMPORTED_MODULE_1__.hasSkippedObservations)()) {\n        (0,_algorithms_deliverResizeLoopError__WEBPACK_IMPORTED_MODULE_2__.deliverResizeLoopError)();\n    }\n    return depth > 0;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3Byb2Nlc3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTRFO0FBQ0U7QUFDQTtBQUNVO0FBQ1E7QUFDaEc7QUFDQTtBQUNBLElBQUksNEdBQStCO0FBQ25DLFdBQVcsd0ZBQXFCO0FBQ2hDLGdCQUFnQixvR0FBMkI7QUFDM0MsUUFBUSw0R0FBK0I7QUFDdkM7QUFDQSxRQUFRLDBGQUFzQjtBQUM5QixRQUFRLDBGQUFzQjtBQUM5QjtBQUNBO0FBQ0E7QUFDbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9wcm9jZXNzLmpzP2Q0YzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzQWN0aXZlT2JzZXJ2YXRpb25zIH0gZnJvbSAnLi4vYWxnb3JpdGhtcy9oYXNBY3RpdmVPYnNlcnZhdGlvbnMnO1xuaW1wb3J0IHsgaGFzU2tpcHBlZE9ic2VydmF0aW9ucyB9IGZyb20gJy4uL2FsZ29yaXRobXMvaGFzU2tpcHBlZE9ic2VydmF0aW9ucyc7XG5pbXBvcnQgeyBkZWxpdmVyUmVzaXplTG9vcEVycm9yIH0gZnJvbSAnLi4vYWxnb3JpdGhtcy9kZWxpdmVyUmVzaXplTG9vcEVycm9yJztcbmltcG9ydCB7IGJyb2FkY2FzdEFjdGl2ZU9ic2VydmF0aW9ucyB9IGZyb20gJy4uL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zJztcbmltcG9ydCB7IGdhdGhlckFjdGl2ZU9ic2VydmF0aW9uc0F0RGVwdGggfSBmcm9tICcuLi9hbGdvcml0aG1zL2dhdGhlckFjdGl2ZU9ic2VydmF0aW9uc0F0RGVwdGgnO1xudmFyIHByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlcHRoID0gMDtcbiAgICBnYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoKGRlcHRoKTtcbiAgICB3aGlsZSAoaGFzQWN0aXZlT2JzZXJ2YXRpb25zKCkpIHtcbiAgICAgICAgZGVwdGggPSBicm9hZGNhc3RBY3RpdmVPYnNlcnZhdGlvbnMoKTtcbiAgICAgICAgZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aChkZXB0aCk7XG4gICAgfVxuICAgIGlmIChoYXNTa2lwcGVkT2JzZXJ2YXRpb25zKCkpIHtcbiAgICAgICAgZGVsaXZlclJlc2l6ZUxvb3BFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gZGVwdGggPiAwO1xufTtcbmV4cG9ydCB7IHByb2Nlc3MgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/process.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"queueMicroTask\": () => (/* binding */ queueMicroTask)\n/* harmony export */ });\nvar trigger;\nvar callbacks = [];\nvar notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };\nvar queueMicroTask = function (callback) {\n    if (!trigger) {\n        var toggle_1 = 0;\n        var el_1 = document.createTextNode('');\n        var config = { characterData: true };\n        new MutationObserver(function () { return notify(); }).observe(el_1, config);\n        trigger = function () { el_1.textContent = \"\" + (toggle_1 ? toggle_1-- : toggle_1++); };\n    }\n    callbacks.push(callback);\n    trigger();\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3F1ZXVlTWljcm9UYXNrLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsMkJBQTJCLG1EQUFtRCxjQUFjO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLDJDQUEyQyxrQkFBa0I7QUFDN0QsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQzBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvcXVldWVNaWNyb1Rhc2suanM/YTk5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdHJpZ2dlcjtcbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFja3Muc3BsaWNlKDApLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IHJldHVybiBjYigpOyB9KTsgfTtcbnZhciBxdWV1ZU1pY3JvVGFzayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGlmICghdHJpZ2dlcikge1xuICAgICAgICB2YXIgdG9nZ2xlXzEgPSAwO1xuICAgICAgICB2YXIgZWxfMSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgdmFyIGNvbmZpZyA9IHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9O1xuICAgICAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7IHJldHVybiBub3RpZnkoKTsgfSkub2JzZXJ2ZShlbF8xLCBjb25maWcpO1xuICAgICAgICB0cmlnZ2VyID0gZnVuY3Rpb24gKCkgeyBlbF8xLnRleHRDb250ZW50ID0gXCJcIiArICh0b2dnbGVfMSA/IHRvZ2dsZV8xLS0gOiB0b2dnbGVfMSsrKTsgfTtcbiAgICB9XG4gICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHRyaWdnZXIoKTtcbn07XG5leHBvcnQgeyBxdWV1ZU1pY3JvVGFzayB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"queueResizeObserver\": () => (/* binding */ queueResizeObserver)\n/* harmony export */ });\n/* harmony import */ var _queueMicroTask__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queueMicroTask */ \"./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js\");\n\nvar queueResizeObserver = function (cb) {\n    (0,_queueMicroTask__WEBPACK_IMPORTED_MODULE_0__.queueMicroTask)(function ResizeObserver() {\n        requestAnimationFrame(cb);\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3F1ZXVlUmVzaXplT2JzZXJ2ZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0Q7QUFDbEQ7QUFDQSxJQUFJLCtEQUFjO0FBQ2xCO0FBQ0EsS0FBSztBQUNMO0FBQytCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvcXVldWVSZXNpemVPYnNlcnZlci5qcz9hMzY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHF1ZXVlTWljcm9UYXNrIH0gZnJvbSAnLi9xdWV1ZU1pY3JvVGFzayc7XG52YXIgcXVldWVSZXNpemVPYnNlcnZlciA9IGZ1bmN0aW9uIChjYikge1xuICAgIHF1ZXVlTWljcm9UYXNrKGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpO1xuICAgIH0pO1xufTtcbmV4cG9ydCB7IHF1ZXVlUmVzaXplT2JzZXJ2ZXIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resizeObservers\": () => (/* binding */ resizeObservers)\n/* harmony export */ });\nvar resizeObservers = [];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3Jlc2l6ZU9ic2VydmVycy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9yZXNpemVPYnNlcnZlcnMuanM/YThlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVzaXplT2JzZXJ2ZXJzID0gW107XG5leHBvcnQgeyByZXNpemVPYnNlcnZlcnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/scheduler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/scheduler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"scheduler\": () => (/* binding */ scheduler),\n/* harmony export */   \"updateCount\": () => (/* binding */ updateCount)\n/* harmony export */ });\n/* harmony import */ var _process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process */ \"./node_modules/@juggle/resize-observer/lib/utils/process.js\");\n/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ \"./node_modules/@juggle/resize-observer/lib/utils/global.js\");\n/* harmony import */ var _queueResizeObserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queueResizeObserver */ \"./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js\");\n\n\n\nvar watching = 0;\nvar isWatching = function () { return !!watching; };\nvar CATCH_PERIOD = 250;\nvar observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\nvar events = [\n    'resize',\n    'load',\n    'transitionend',\n    'animationend',\n    'animationstart',\n    'animationiteration',\n    'keyup',\n    'keydown',\n    'mouseup',\n    'mousedown',\n    'mouseover',\n    'mouseout',\n    'blur',\n    'focus'\n];\nvar time = function (timeout) {\n    if (timeout === void 0) { timeout = 0; }\n    return Date.now() + timeout;\n};\nvar scheduled = false;\nvar Scheduler = (function () {\n    function Scheduler() {\n        var _this = this;\n        this.stopped = true;\n        this.listener = function () { return _this.schedule(); };\n    }\n    Scheduler.prototype.run = function (timeout) {\n        var _this = this;\n        if (timeout === void 0) { timeout = CATCH_PERIOD; }\n        if (scheduled) {\n            return;\n        }\n        scheduled = true;\n        var until = time(timeout);\n        (0,_queueResizeObserver__WEBPACK_IMPORTED_MODULE_2__.queueResizeObserver)(function () {\n            var elementsHaveResized = false;\n            try {\n                elementsHaveResized = (0,_process__WEBPACK_IMPORTED_MODULE_0__.process)();\n            }\n            finally {\n                scheduled = false;\n                timeout = until - time();\n                if (!isWatching()) {\n                    return;\n                }\n                if (elementsHaveResized) {\n                    _this.run(1000);\n                }\n                else if (timeout > 0) {\n                    _this.run(timeout);\n                }\n                else {\n                    _this.start();\n                }\n            }\n        });\n    };\n    Scheduler.prototype.schedule = function () {\n        this.stop();\n        this.run();\n    };\n    Scheduler.prototype.observe = function () {\n        var _this = this;\n        var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };\n        document.body ? cb() : _global__WEBPACK_IMPORTED_MODULE_1__.global.addEventListener('DOMContentLoaded', cb);\n    };\n    Scheduler.prototype.start = function () {\n        var _this = this;\n        if (this.stopped) {\n            this.stopped = false;\n            this.observer = new MutationObserver(this.listener);\n            this.observe();\n            events.forEach(function (name) { return _global__WEBPACK_IMPORTED_MODULE_1__.global.addEventListener(name, _this.listener, true); });\n        }\n    };\n    Scheduler.prototype.stop = function () {\n        var _this = this;\n        if (!this.stopped) {\n            this.observer && this.observer.disconnect();\n            events.forEach(function (name) { return _global__WEBPACK_IMPORTED_MODULE_1__.global.removeEventListener(name, _this.listener, true); });\n            this.stopped = true;\n        }\n    };\n    return Scheduler;\n}());\nvar scheduler = new Scheduler();\nvar updateCount = function (n) {\n    !watching && n > 0 && scheduler.start();\n    watching += n;\n    !watching && scheduler.stop();\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3NjaGVkdWxlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvQztBQUNGO0FBQzBCO0FBQzVEO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlFQUFtQjtBQUMzQjtBQUNBO0FBQ0Esc0NBQXNDLGlEQUFPO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsK0JBQStCLDREQUF1QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxPQUFPLDREQUF1QiwrQkFBK0I7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLE9BQU8sK0RBQTBCLCtCQUErQjtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9zY2hlZHVsZXIuanM/YjAwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9jZXNzIH0gZnJvbSAnLi9wcm9jZXNzJztcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gJy4vZ2xvYmFsJztcbmltcG9ydCB7IHF1ZXVlUmVzaXplT2JzZXJ2ZXIgfSBmcm9tICcuL3F1ZXVlUmVzaXplT2JzZXJ2ZXInO1xudmFyIHdhdGNoaW5nID0gMDtcbnZhciBpc1dhdGNoaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gISF3YXRjaGluZzsgfTtcbnZhciBDQVRDSF9QRVJJT0QgPSAyNTA7XG52YXIgb2JzZXJ2ZXJDb25maWcgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoYXJhY3RlckRhdGE6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9O1xudmFyIGV2ZW50cyA9IFtcbiAgICAncmVzaXplJyxcbiAgICAnbG9hZCcsXG4gICAgJ3RyYW5zaXRpb25lbmQnLFxuICAgICdhbmltYXRpb25lbmQnLFxuICAgICdhbmltYXRpb25zdGFydCcsXG4gICAgJ2FuaW1hdGlvbml0ZXJhdGlvbicsXG4gICAgJ2tleXVwJyxcbiAgICAna2V5ZG93bicsXG4gICAgJ21vdXNldXAnLFxuICAgICdtb3VzZWRvd24nLFxuICAgICdtb3VzZW92ZXInLFxuICAgICdtb3VzZW91dCcsXG4gICAgJ2JsdXInLFxuICAgICdmb2N1cydcbl07XG52YXIgdGltZSA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgaWYgKHRpbWVvdXQgPT09IHZvaWQgMCkgeyB0aW1lb3V0ID0gMDsgfVxuICAgIHJldHVybiBEYXRlLm5vdygpICsgdGltZW91dDtcbn07XG52YXIgc2NoZWR1bGVkID0gZmFsc2U7XG52YXIgU2NoZWR1bGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zY2hlZHVsZSgpOyB9O1xuICAgIH1cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aW1lb3V0ID09PSB2b2lkIDApIHsgdGltZW91dCA9IENBVENIX1BFUklPRDsgfVxuICAgICAgICBpZiAoc2NoZWR1bGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHVudGlsID0gdGltZSh0aW1lb3V0KTtcbiAgICAgICAgcXVldWVSZXNpemVPYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHNIYXZlUmVzaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0hhdmVSZXNpemVkID0gcHJvY2VzcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IHVudGlsIC0gdGltZSgpO1xuICAgICAgICAgICAgICAgIGlmICghaXNXYXRjaGluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzSGF2ZVJlc2l6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucnVuKDEwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW4odGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdGFydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgdGhpcy5ydW4oKTtcbiAgICB9O1xuICAgIFNjaGVkdWxlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNiID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMub2JzZXJ2ZXIgJiYgX3RoaXMub2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCBvYnNlcnZlckNvbmZpZyk7IH07XG4gICAgICAgIGRvY3VtZW50LmJvZHkgPyBjYigpIDogZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYik7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5zdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZSgpO1xuICAgICAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIF90aGlzLmxpc3RlbmVyLCB0cnVlKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLnN0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgJiYgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgX3RoaXMubGlzdGVuZXIsIHRydWUpOyB9KTtcbiAgICAgICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTY2hlZHVsZXI7XG59KCkpO1xudmFyIHNjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIoKTtcbnZhciB1cGRhdGVDb3VudCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgIXdhdGNoaW5nICYmIG4gPiAwICYmIHNjaGVkdWxlci5zdGFydCgpO1xuICAgIHdhdGNoaW5nICs9IG47XG4gICAgIXdhdGNoaW5nICYmIHNjaGVkdWxlci5zdG9wKCk7XG59O1xuZXhwb3J0IHsgc2NoZWR1bGVyLCB1cGRhdGVDb3VudCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/scheduler.js\n");

/***/ }),

/***/ "./src/cellshell.tsx":
/*!***************************!*\
  !*** ./src/cellshell.tsx ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // cellshell.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar requestidlecallback_1 = __webpack_require__(/*! requestidlecallback */ \"./node_modules/requestidlecallback/index.js\");\n\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ \"./node_modules/react-reverse-portal/dist/web/index.js\");\n\nvar placeholder_1 = __importDefault(__webpack_require__(/*! ./placeholder */ \"./src/placeholder.tsx\"));\n\nvar cradle_1 = __webpack_require__(/*! ./cradle */ \"./src/cradle.tsx\");\n\nvar IDLECALLBACK_TIMEOUT = 8000; // TODO experimentally high!!\n\nvar CellShell = function CellShell(_a) {\n  var orientation = _a.orientation,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      index = _a.index,\n      // observer, // intersection observer\n  callbacks = _a.callbacks,\n      getItem = _a.getItem,\n      listsize = _a.listsize,\n      placeholder = _a.placeholder,\n      instanceID = _a.instanceID,\n      scrollerName = _a.scrollerName,\n      scrollerID = _a.scrollerID;\n  var portalHandler = (0, react_1.useContext)(cradle_1.CradlePortalsContext);\n\n  var _b = (0, react_1.useState)({\n    overflow: 'hidden'\n  }),\n      styles = _b[0],\n      saveStyles = _b[1];\n\n  var _c = (0, react_1.useState)('setup'),\n      cellStatus = _c[0],\n      setCellStatus = _c[1]; // console.log('RUNNING cellshell cellStatus, index, scrollerID, instanceID',cellStatus, index, scrollerID, instanceID)\n\n\n  var shellRef = (0, react_1.useRef)(null); // const instanceIDRef = useRef(instanceID)\n\n  var isMountedRef = (0, react_1.useRef)(true);\n  var portaldataRef = (0, react_1.useRef)(null); // console.log('RUNNING cellshell scrollerID, index, cellStatus', scrollerID, index, cellStatus)\n  // for unmount\n\n  (0, react_1.useEffect)(function () {\n    return function () {\n      isMountedRef.current = false; // console.log('UNsetting observer for index',index)\n      // observer.unobserve(observerElementRef.current)\n    };\n  }, []); // ----------------- [ placeholder definition ] -------------------------\n\n  var customplaceholder = (0, react_1.useMemo)(function () {\n    return placeholder ? react_1[\"default\"].createElement(placeholder, {\n      index: index,\n      listsize: listsize\n    }) : null;\n  }, [placeholder, listsize]);\n  var placeholderRef = (0, react_1.useRef)(null);\n  placeholderRef.current = (0, react_1.useMemo)(function () {\n    var placeholder = customplaceholder ? customplaceholder : react_1[\"default\"].createElement(placeholder_1[\"default\"], {\n      index: index,\n      listsize: listsize,\n      error: false\n    });\n    return placeholder;\n  }, [index, customplaceholder, listsize]); // ---------------- [ end of placeholder definition ] ------------------------\n\n  var requestidlecallback = window['requestIdleCallback'] ? window['requestIdleCallback'] : requestidlecallback_1.requestIdleCallback;\n  var cancelidlecallback = window['cancelIdleCallback'] ? window['cancelIdleCallback'] : requestidlecallback_1.cancelIdleCallback;\n  var requestIdleCallbackIdRef = (0, react_1.useRef)(null); // initialize cell content\n\n  (0, react_1.useEffect)(function () {\n    // console.log('CELLSHELL mounting index',index)\n    portaldataRef.current = portalHandler.fetchOrCreatePortal(index, placeholderRef.current);\n    var hasUserContent = !!portaldataRef.current.hasusercontent; // previous InPortal creation for index\n\n    var reverseportal = portaldataRef.current.reverseportal;\n    contentcomponentRef.current = react_1[\"default\"].createElement(react_reverse_portal_1.OutPortal, {\n      node: reverseportal\n    });\n\n    if (!hasUserContent) {\n      setCellStatus('getusercontent');\n    } else {\n      portaldataRef.current.isReparenting = true;\n      if (isMountedRef.current) setCellStatus('ready');\n    } // unmount\n\n\n    return function () {\n      // console.log('CELLSHELL UNmounting index',index)\n      cancelidlecallback(requestIdleCallbackIdRef.current);\n    };\n  }, []); // cradle invariant ondemand callback parameter value\n\n  var getElementData = (0, react_1.useCallback)(function () {\n    return [index, shellRef];\n  }, []); // initialize callbacks\n\n  (0, react_1.useEffect)(function () {\n    var localcalls = callbacks;\n    localcalls.setElementData && localcalls.setElementData(getElementData(), 'register');\n    return function () {\n      localcalls.setElementData && localcalls.setElementData(getElementData(), 'unregister');\n    };\n  }, [callbacks]); // ---------------------[ configure observer ]--------------------------\n  // const observerElementRef = useRef(null) // persistent observer element ref for unmount\n  // const observersetRef = useRef(false)\n  // useEffect(()=>{\n  // console.log('index, cellStatus', index, shellRef.current)\n  // if ((!shellRef.current) || observersetRef.current) {\n  //     return\n  // }\n  // console.log('setting observer for index',index)\n  // observer.observe(shellRef.current)\n  // observerElementRef.current = shellRef.current\n  // observersetRef.current = true\n  // },[])//[observer, shellRef.current, cellStatus])\n  // ---------------------[ end of configure observer ]-------------------------\n  // set styles\n\n  (0, react_1.useEffect)(function () {\n    var newStyles = getShellStyles(orientation, cellHeight, cellWidth, styles);\n\n    if (isMountedRef.current) {\n      saveStyles(newStyles);\n    }\n  }, [orientation, cellHeight, cellWidth]);\n  var contentcomponentRef = (0, react_1.useRef)(null);\n  (0, react_1.useEffect)(function () {\n    switch (cellStatus) {\n      case 'setup':\n        // no-op\n        break;\n\n      case 'getusercontent':\n        {\n          requestIdleCallbackIdRef.current = requestidlecallback(function () {\n            return __awaiter(void 0, void 0, void 0, function () {\n              var usercontent, reverseportal;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , getItem(index)];\n\n                  case 1:\n                    usercontent = _a.sent();\n\n                    if (isMountedRef.current) {\n                      if (usercontent) {\n                        portaldataRef.current.hasusercontent = true;\n                        portaldataRef.current = portalHandler.updatePortal(index, usercontent);\n                        reverseportal = portaldataRef.current.reverseportal;\n                        portaldataRef.current.isReparenting = true;\n                        contentcomponentRef.current = react_1[\"default\"].createElement(react_reverse_portal_1.OutPortal, {\n                          node: reverseportal\n                        });\n                      } else {\n                        console.log('ERROR', 'no content item');\n                      }\n\n                      setCellStatus('ready');\n                    }\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }, {\n            timeout: IDLECALLBACK_TIMEOUT\n          });\n          break;\n        }\n\n      case 'ready':\n        {\n          break;\n        }\n    }\n  }, [cellStatus]);\n  return react_1[\"default\"].createElement(\"div\", {\n    ref: shellRef,\n    \"data-type\": 'cellshell',\n    \"data-scrollerid\": scrollerID,\n    \"data-index\": index,\n    \"data-instanceid\": instanceID,\n    style: styles\n  }, cellStatus != 'setup' && contentcomponentRef.current);\n}; // CellShell\n\n\nvar getShellStyles = function getShellStyles(orientation, cellHeight, cellWidth, styles) {\n  var styleset = Object.assign({\n    position: 'relative'\n  }, styles);\n\n  if (orientation == 'horizontal') {\n    styleset.width = cellWidth ? cellWidth + 'px' : 'auto';\n    styleset.height = 'auto';\n  } else if (orientation === 'vertical') {\n    styleset.width = 'auto';\n    styleset.height = cellHeight ? cellHeight + 'px' : 'auto';\n  }\n\n  return styleset;\n};\n\nexports[\"default\"] = CellShell;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cellshell.tsx\n");

/***/ }),

/***/ "./src/cradle.tsx":
/*!************************!*\
  !*** ./src/cradle.tsx ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("// cradle.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\n/*\n\n    BUGS:\n    - sometimes on android chrome axis gets stuck outside of visible area and\n        loses intersect norifications\n    - android firefox loses position on fast scroll\n    - safari mac loses place in sublists on rapid backscroll at start of list\n    - Scrolltop is sometimes set to 0 while head overflows above border\n    - context problems develop when rotating phone while scrolling intertia continues\n    - rapid back and forth in middle eventually causes fail of intercepts\n    - cell height not being respected in nested scrollers.\n    - resize sometimes loses correct allocation of head items; leaves blank items\n\n    BUGS:\n    - check styles in scrollTracker args\n    - doreposition gets stuck at a particular number after getting behind on heavy scroll\n        check pauseScrollingEffects\n    - variable cells showing signs of getItem() with portal\n    - Chrome sometimes misses nested cell portals horizontally\n    - reduce computing intensity to avoid battery drainage\n\n    TODO:\n\n    - PLACE SENTINELS (assertions) AT CRITICAL LOCATIONS TO WATCH FOR ANOMALIES\n    - try position fixed during reparenting to preserve scroll position\n\n    - consider eliminating cellintersectobserver in favour of head and tail intersect oberver\n\n    - scroll reset problem recurs with repeated above and below rapid resets\n        the problem comes with update content from endofscroll, after double normalize signals\n        the extra reparenting is inserted during the timeout for normalize signals\n    - try cleartimeout\n\n\n    - fix scroll reset on reparent\n    - review need for setscrollposition\n    - BUG: in FF nested scroller switch from placeholder to content resets scroll position\n    - unmounted warning to do with InPortal\n\n    ObserversHandler\n    WingsAgent\n    MessageAgent ? // message with host environment, such as referenceIndexCallback\n\n    ScrollHandler\n    SignalsHandler\n    StateHandler\n    ContentHandler\n    ScaffoldHandler\n    ServiceHandler // user services\n    StylesHandler\n\n*/\n\n/*\n    Description\n    -----------\n    The GridStroller provides the illusion of infinite scrolling through the use of a data 'cradle' inside a viewport.\n    The illusion is maintained by synchronizing changes in cradle content with cradle location inside a scrollblock, such\n    that as the scrollblock is moved, the cradle moves oppositely in the scrollblock (to stay visible within the viewport).\n    The scrollblock is sized to approximate the list being viewed, so as to have a scroll thumb size and position which\n    realistically reflects the size of the list being shown.\n\n    The position of the cradle is controlled by a 'axis' which is a 0px height/width (along the medial - ScrollBlock can be\n    verticsl or horizontal). The purpose of the axis is to act as a 'fold', above which cell content expands 'upwards', and\n    below which the cell content expands  'downwards'. GridScroller can be viewed vertically or horizontally. When horizontal,\n    the axis has a 0px width, so that the 'fold' is vertical, and cells expand to the left and right.\n\n    The axis is controlled to always be in the at the leading edge of the leading cellrow of the viewport. Thus\n    in vertical orientation, the axis 'top' css attribute is always equal to the 'scrollTop' position of the scrollblock,\n    plus an adjustment. The adjustment is the result of the alignment of the axis in relation to the top-(or left-)most cell\n    in the viewport (the 'reference' row). The axis can only be placed at the leading edge of the first visible\n    cell in the viewport. Therefore the axis offset from the leading edge of the viewport can be anywhere from minus to\n    plus the length of the leading row. The exact amount depends on where the 'breakpoint' of transition notification is set for\n    cells crossing the viewport threshold (and can be configured). The default of the breakpoint is .5 (half the length of the cell).\n\n    Technically, there are several reference points tracked by the GridScroller. These are:\n        - axisReferenceIndex (the virtual index of the item controlling the location of the axis)\n            The axisReferenceIndex is also used to allocate items above (lower index value) and below (same or higher index value)\n            the fold\n        - cradleReferenceIndex (the virtual index of the item defining the leading bound of the cradle content)\n        - axisPixelOffset (pixels - plus or minus - that the axis is placed in relation to the viewport's leading edge)\n    \n    These reference points are applied to the following structures:\n        - the viewport\n        - the scrollblock\n        - the cradle, consisting of\n            - the axis (contains cradle head and tail)\n            - the head (contains leading items)\n            - the tail (contains trailing items)\n\n    Structure details:\n        the cradle content consists of\n        - the number of rows that are visible in the viewport (according to the default parameters)\n            - this typically includes one partially visible row\n        - the number of runway rows specified in the parameters, times 2 (one et for the head; one for the tail)\n        - the number of items is the number of rows times the 'crosscount' the lateral number of cells.\n        - the last row might consist of fewer items than crosscount, to match the maximum listsize\n        - the cradleRowcount (visible default rows + runwayRowcountSpec * 2) and viewpointRowcount (visble rows;typicall one partial)\n\n    Item containers:\n        Client cell content is contained in CellShell's, which are configured according to GridScroller's input parameters.\n        The ItemCell's are in turn contained in CSS grid structures. There are two grid structures - one in the cradle head,\n        and one in the cradle tail. Each grid structure is allowed uniform padding and gaps - identical between the two.\n\n    Overscroll handling:\n        Owing to the weight of the code, and potential rapidity of scrolling, there is an overscroll protocol.\n        if the overscroll is such that part of the cradle is still within the viewport boundaries, then the overscroll\n        is calculated as the number of cell rows that would fit (completely or partially) in the space between the edge of\n        the cradle that is receding from a viewport edge.\n\n        If the overshoot is such that the cradle has entirely passed out of the viewport, the GridScroller goes into 'Repositoining'\n        mode, meaning that it tracks relative location of the axis edge of the viewport, and repaints the cradle accroding to\n        this position when the scrolling stops.\n*/\n\n/*\n    Cradle is activated by interrupts:\n    - resizing of the viewport (1)\n    - observer callbacks:\n        - cradle viewport intersection for repositioning when the cradle races out of scope - by scroll (2)\n        - cellShell viewport intersection which triggers rolling of content - by scroll (3)\n            - rolling content triggers re-allocation of content between cradle wings\n        - cradle wing resize (responding to variable length cell changes) which triggers reconfiguration (4)\n    - pivot - change of orientation (5)\n    - host change of other configuration specs (6)\n*/\n\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CradlePortalsContext = void 0;\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\"); // popup position tracker for repositioning\n\n\nvar scrolltracker_1 = __importDefault(__webpack_require__(/*! ./scrolltracker */ \"./src/scrolltracker.tsx\")); // support code\n\n\nvar portalhandler_1 = __webpack_require__(/*! ./cradle/portalhandler */ \"./src/cradle/portalhandler.tsx\");\n\nvar scrollhandler_1 = __importDefault(__webpack_require__(/*! ./cradle/scrollhandler */ \"./src/cradle/scrollhandler.tsx\"));\n\nvar statehandler_1 = __importDefault(__webpack_require__(/*! ./cradle/statehandler */ \"./src/cradle/statehandler.tsx\"));\n\nvar contenthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/contenthandler */ \"./src/cradle/contenthandler.tsx\"));\n\nvar scaffoldhandler_1 = __importDefault(__webpack_require__(/*! ./cradle/scaffoldhandler */ \"./src/cradle/scaffoldhandler.tsx\"));\n\nvar interrupthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/interrupthandler */ \"./src/cradle/interrupthandler.tsx\"));\n\nvar servicehandler_1 = __importDefault(__webpack_require__(/*! ./cradle/servicehandler */ \"./src/cradle/servicehandler.tsx\"));\n\nvar styleshandler_1 = __importDefault(__webpack_require__(/*! ./cradle/styleshandler */ \"./src/cradle/styleshandler.tsx\")); // for children\n\n\nexports.CradlePortalsContext = react_1[\"default\"].createContext(null); // for children\n\nvar portalrootstyle = {\n  display: 'none'\n}; // static \n\nvar NORMALIZE_SIGNALS_TIMEOUT = 250; // component\n\nvar Cradle = function Cradle(_a) {\n  var _b;\n\n  var gridSpecs = _a.gridSpecs,\n      runwayRowcountSpec = _a.runwayRowcountSpec,\n      listsize = _a.listsize,\n      defaultVisibleIndex = _a.defaultVisibleIndex,\n      getItem = _a.getItem,\n      placeholder = _a.placeholder,\n      inheritedfunctions = _a.functions,\n      inheritedstyles = _a.styles,\n      scrollerName = _a.scrollerName,\n      scrollerID = _a.scrollerID,\n      triggerlineOffset = _a.triggerlineOffset;\n  if (listsize == 0) return; // nothing to do\n  // ========================[ DATA SETUP ]========================\n  // unpack gridSpecs\n\n  var orientation = gridSpecs.orientation,\n      gap = gridSpecs.gap,\n      padding = gridSpecs.padding,\n      cellHeight = gridSpecs.cellHeight,\n      cellWidth = gridSpecs.cellWidth,\n      layout = gridSpecs.layout,\n      dense = gridSpecs.dense; // freeze object props\n\n  var functions = Object.freeze(Object.assign({}, inheritedfunctions));\n  var styles = Object.freeze(Object.assign({}, inheritedstyles)); // bundle cradle props to pass to handlers\n\n  var cradleInheritedPropertiesRef = (0, react_1.useRef)(null); // access by closures and support functions\n\n  cradleInheritedPropertiesRef.current = Object.freeze({\n    // gridSpecs\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    layout: layout,\n    dense: dense,\n    // ...rest\n    // runwayRowcountSpec, \n    listsize: listsize,\n    defaultVisibleIndex: defaultVisibleIndex,\n    getItem: getItem,\n    placeholder: placeholder,\n    scrollerName: scrollerName,\n    scrollerID: scrollerID,\n    // objects\n    functions: functions,\n    styles: styles,\n    triggerlineOffset: triggerlineOffset\n  }); // create context\n\n  var viewportInterruptProperties = (0, react_1.useContext)(viewport_1.ViewportInterrupt);\n  var viewportInterruptPropertiesRef = (0, react_1.useRef)(null);\n  viewportInterruptPropertiesRef.current = viewportInterruptProperties; // for closures\n\n  var viewportDimensions = viewportInterruptProperties.viewportDimensions;\n  var viewportheight = viewportDimensions.height,\n      viewportwidth = viewportDimensions.width;\n\n  var _c = (0, react_1.useState)('setup'),\n      cradleState = _c[0],\n      setCradleState = _c[1]; // console.log('entering Cradle with state',cradleState)\n\n\n  var cradleStateRef = (0, react_1.useRef)(null); // access by closures\n\n  cradleStateRef.current = cradleState; // controls\n\n  var isMountedRef = (0, react_1.useRef)(true);\n  var normalizeTimerRef = (0, react_1.useRef)(null); // cradle scaffold elements\n\n  var headCradleElementRef = (0, react_1.useRef)(null);\n  var tailCradleElementRef = (0, react_1.useRef)(null);\n  var axisCradleElementRef = (0, react_1.useRef)(null);\n  var headTriggerlineCradleElementRef = (0, react_1.useRef)(null);\n  var tailTriggerlineCradleElementRef = (0, react_1.useRef)(null);\n  var cradleElementsRef = (0, react_1.useRef)({\n    headRef: headCradleElementRef,\n    tailRef: tailCradleElementRef,\n    axisRef: axisCradleElementRef,\n    headTriggerlineRef: headTriggerlineCradleElementRef,\n    tailTriggerlineRef: tailTriggerlineCradleElementRef\n  }); // configuration calculations\n\n  var crosscount = (0, react_1.useMemo)(function () {\n    var viewportsize = orientation == 'horizontal' ? viewportheight : viewportwidth;\n    var crossLength = orientation == 'horizontal' ? cellHeight : cellWidth;\n    var viewportlengthforcalc = viewportsize - padding * 2 + gap; // length of viewport\n\n    var tilelengthforcalc = crossLength + gap;\n    tilelengthforcalc = Math.min(tilelengthforcalc, viewportlengthforcalc); // result cannot be less than 1\n\n    return Math.floor(viewportlengthforcalc / tilelengthforcalc);\n  }, [orientation, gap, padding, cellWidth, cellHeight, viewportheight, viewportwidth]);\n\n  var _d = (0, react_1.useMemo)(function () {\n    var viewportLength, cellLength;\n\n    if (orientation == 'vertical') {\n      viewportLength = viewportheight;\n      cellLength = cellHeight;\n    } else {\n      viewportLength = viewportwidth;\n      cellLength = cellWidth;\n    }\n\n    cellLength += gap;\n    var viewportRowcount = Math.ceil(viewportLength / cellLength);\n    var listRowcount = Math.ceil(listsize / crosscount);\n    var calculatedCradleRowcount = viewportRowcount + runwayRowcountSpec * 2;\n    var cradleRowcount = Math.min(listRowcount, calculatedCradleRowcount);\n    var runwayRowcount;\n\n    if (calculatedCradleRowcount >= cradleRowcount) {\n      runwayRowcount = runwayRowcountSpec;\n    } else {\n      var diff = cradleRowcount - calculatedCradleRowcount;\n      runwayRowcount -= Math.floor(diff / 2);\n      runwayRowcount = Math.max(0, runwayRowcount);\n    }\n\n    var itemcount = cradleRowcount * crosscount;\n\n    if (itemcount > listsize) {\n      itemcount = listsize;\n      cradleRowcount = Math.ceil(itemcount / crosscount);\n    }\n\n    return [cradleRowcount, viewportRowcount, listRowcount, runwayRowcount];\n  }, [orientation, gap, // padding,\n  cellWidth, cellHeight, viewportheight, viewportwidth, listsize, runwayRowcountSpec, crosscount]),\n      cradleRowcount = _d[0],\n      viewportRowcount = _d[1],\n      listRowcount = _d[2],\n      runwayRowcount = _d[3]; // bundle configuration properties\n\n\n  var cradleInternalPropertiesRef = (0, react_1.useRef)(null);\n  cradleInternalPropertiesRef.current = {\n    crosscount: crosscount,\n    cradleRowcount: cradleRowcount,\n    viewportRowcount: viewportRowcount,\n    listRowcount: listRowcount,\n    cradleStateRef: cradleStateRef,\n    setCradleState: setCradleState,\n    isMountedRef: isMountedRef,\n    cradleElementsRef: cradleElementsRef,\n    runwayRowcount: runwayRowcount\n  }; // utility to register or unregister cradle item elements\n\n  var setItemElementData = (0, react_1.useCallback)(function (itemElementData, reportType) {\n    var index = itemElementData[0],\n        shellref = itemElementData[1];\n\n    if (reportType == 'register') {\n      contentHandler.itemElements.set(index, shellref);\n    } else if (reportType == 'unregister') {\n      contentHandler.itemElements[\"delete\"](index);\n    }\n  }, []);\n  var internalCallbacksRef = (0, react_1.useRef)({\n    setElementData: setItemElementData\n  }); // host callbacks\n\n  var referenceIndexCallbackRef = (0, react_1.useRef)(functions === null || functions === void 0 ? void 0 : functions.referenceIndexCallback);\n  var externalCallbacksRef = (0, react_1.useRef)({\n    referenceIndexCallbackRef: referenceIndexCallbackRef\n  }); // cradle parameters master bundle\n\n  var handlersRef = (0, react_1.useRef)(null); // placeholder in cradleParamters; make available individual handlers\n\n  var cradleParameters = Object.freeze({\n    handlersRef: handlersRef,\n    viewportInterruptPropertiesRef: viewportInterruptPropertiesRef,\n    cradleInheritedPropertiesRef: cradleInheritedPropertiesRef,\n    cradleInternalPropertiesRef: cradleInternalPropertiesRef,\n    internalCallbacksRef: internalCallbacksRef,\n    externalCallbacksRef: externalCallbacksRef\n  });\n  var setOfHandlersRef = (0, react_1.useRef)(null);\n\n  if (!setOfHandlersRef.current) {\n    setOfHandlersRef.current = getCradleHandlers(cradleParameters);\n  } // make handlers directly available to cradle code\n\n\n  var _e = setOfHandlersRef.current,\n      portalHandler = _e.portalHandler,\n      interruptHandler = _e.interruptHandler,\n      scrollHandler = _e.scrollHandler,\n      stateHandler = _e.stateHandler,\n      contentHandler = _e.contentHandler,\n      scaffoldHandler = _e.scaffoldHandler,\n      serviceHandler = _e.serviceHandler,\n      stylesHandler = _e.stylesHandler; // to instantiate handlersRef for cradleParameters\n\n  var handlerObjectRef = (0, react_1.useRef)({\n    portals: portalHandler,\n    interrupts: interruptHandler,\n    scroll: scrollHandler,\n    state: stateHandler,\n    content: contentHandler,\n    scaffold: scaffoldHandler,\n    service: serviceHandler,\n    styles: stylesHandler\n  });\n  handlersRef.current = handlerObjectRef.current; // back-fill cradleParameters property\n  // ===================[ INITIALIZATION effects ]=========================\n  // this is an immediate response to reparenting. Reparenting resets scroll positions\n  // for nested infinitegridscrollers.\n  // the code restores scroll as soon as cradle is invoked after reparenting\n\n  if ((_b = viewportInterruptProperties.portal) === null || _b === void 0 ? void 0 : _b.isReparenting) {\n    viewportInterruptProperties.portal.isReparenting = false;\n    var cradleReferenceData = scaffoldHandler.cradleReferenceData;\n    viewportInterruptProperties.elementref.current[cradleReferenceData.blockScrollProperty] = Math.max(0, cradleReferenceData.blockScrollPos);\n  } // clear mounted flag on unmount\n\n\n  (0, react_1.useLayoutEffect)(function () {\n    // unmount\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []); //initialize host functions properties\n\n  (0, react_1.useEffect)(function () {\n    referenceIndexCallbackRef.current = functions === null || functions === void 0 ? void 0 : functions.referenceIndexCallback;\n    if (!functions.getCallbacks) return;\n    var scrollToItem = serviceHandler.scrollToItem,\n        getVisibleList = serviceHandler.getVisibleList,\n        getContentList = serviceHandler.getContentList,\n        reload = serviceHandler.reload;\n    var callbacks = {\n      scrollToItem: scrollToItem,\n      getVisibleList: getVisibleList,\n      getContentList: getContentList,\n      reload: reload\n    };\n    Object.freeze(callbacks);\n    functions.getCallbacks(callbacks);\n  }, []); // initialize window scroll listener\n\n  (0, react_1.useEffect)(function () {\n    var viewportdata = viewportInterruptPropertiesRef.current;\n    viewportdata.elementref.current.addEventListener('scroll', scrollHandler.onScroll);\n    return function () {\n      viewportdata.elementref.current && viewportdata.elementref.current.removeEventListener('scroll', scrollHandler.onScroll);\n    };\n  }, []); // observer support\n\n  /*\n      There are two interection observers, one for the cradle, and another for triggerlines;\n          both against the viewport.\n      There is also a resize observer for the cradle wings, to respond to size changes of\n          variable cells.\n  */\n  // set up cradle resizeobserver\n\n  (0, react_1.useEffect)(function () {\n    var observer = interruptHandler.cradleResize.createObserver();\n    var cradleElements = scaffoldHandler.elements;\n    observer.observe(cradleElements.headRef.current);\n    observer.observe(cradleElements.tailRef.current);\n    return function () {\n      observer.disconnect();\n    };\n  }, []); // intersection observer for cradle body\n  // this sets up an IntersectionObserver of the cradle against the viewport. When the\n  // cradle goes out of the observer scope, the \"repositioningRender\" cradle state is triggerd.\n\n  (0, react_1.useEffect)(function () {\n    var observer = interruptHandler.cradleIntersect.createObserver();\n    var cradleElements = scaffoldHandler.elements;\n    observer.observe(cradleElements.headRef.current);\n    observer.observe(cradleElements.tailRef.current);\n    return function () {\n      observer.disconnect();\n    };\n  }, []); // intersection observer for cradle axis triggerlines\n\n  (0, react_1.useEffect)(function () {\n    // the triggerlines are observed with 'resettriggerlines' state -- see state management below\n    var observer = interruptHandler.axisTriggerlinesIntersect.createObserver();\n    return function () {\n      observer.disconnect();\n    };\n  }, []); // =====================[ RECONFIGURATION effects ]======================\n  // trigger resizing based on viewport state\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n\n    if (viewportInterruptProperties.isResizing) {\n      var signals = interruptHandler.signals; // signals.pauseCellObserver = true\n\n      signals.pauseCradleIntersectionObserver = true;\n      signals.pauseCradleResizeObserver = true;\n      signals.pauseScrollingEffects = true;\n      setCradleState('resizing');\n    } // complete resizing mode\n\n\n    if (!viewportInterruptProperties.isResizing && cradleStateRef.current == 'resizing') {\n      setCradleState('resized');\n    }\n  }, [viewportInterruptProperties.isResizing]); // reload for changed parameters\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    var signals = interruptHandler.signals; // signals.pauseCellObserver = true\n\n    signals.pauseTriggerlinesObserver = true;\n    signals.pauseScrollingEffects = true;\n    setCradleState('reload');\n  }, [listsize, cellHeight, cellWidth, gap, padding]); // trigger pivot *only* on change in orientation\n  // TODO: review this code\n\n  (0, react_1.useEffect)(function () {\n    scaffoldHandler.cradleReferenceData.blockScrollProperty = orientation == \"vertical\" ? \"scrollTop\" : \"scrollLeft\";\n    if (cradleStateRef.current == 'setup') return;\n    var _a = cradleInheritedPropertiesRef.current,\n        cellWidth = _a.cellWidth,\n        cellHeight = _a.cellHeight,\n        gap = _a.gap; // get previous ratio\n\n    var previousCellPixelLength = (orientation == 'vertical' ? cellWidth : cellHeight) + gap;\n    var previousAxisOffset = scaffoldHandler.cradleReferenceData.targetAxisPixelOffset;\n    var previousratio = previousAxisOffset / previousCellPixelLength;\n    var pivotCellPixelLength = (orientation == 'vertical' ? cellHeight : cellWidth) + gap;\n    var pivotAxisOffset = previousratio * pivotCellPixelLength;\n    scaffoldHandler.cradleReferenceData.targetAxisPixelOffset = Math.round(pivotAxisOffset);\n    console.log('pivot scaffoldHandler.cradleReferenceData', Object.assign({}, scaffoldHandler.cradleReferenceData));\n    var signals = interruptHandler.signals;\n    signals.pauseTriggerlinesObserver = true;\n    signals.pauseScrollingEffects = true;\n    var cradleContent = contentHandler.content;\n    cradleContent.headModelComponents = [];\n    cradleContent.tailModelComponents = [];\n    cradleContent.headViewComponents = [];\n    cradleContent.tailViewComponents = [];\n    setCradleState('pivot');\n  }, [orientation]); // =====================[ STYLES ]===========================\n  // styles for scaffold\n\n  var _f = (0, react_1.useMemo)(function () {\n    return stylesHandler.setCradleStyles({\n      orientation: orientation,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding,\n      viewportheight: viewportheight,\n      viewportwidth: viewportwidth,\n      crosscount: crosscount,\n      userstyles: styles,\n      triggerlineOffset: triggerlineOffset\n    });\n  }, [orientation, cellHeight, cellWidth, gap, padding, viewportheight, viewportwidth, crosscount, styles, triggerlineOffset]),\n      cradleHeadStyle = _f[0],\n      cradleTailStyle = _f[1],\n      cradleAxisStyle = _f[2],\n      triggerlineHeadStyle = _f[3],\n      triggerlineTailStyle = _f[4],\n      cradleDividerStyle = _f[5]; // =====================[ STATE management ]==========================\n  // data for state processing\n\n\n  var callingCradleState = (0, react_1.useRef)(cradleStateRef.current);\n  var headlayoutDataRef = (0, react_1.useRef)(null); // this is the core state engine\n  // useLayout for suppressing flashes\n\n  (0, react_1.useLayoutEffect)(function () {\n    var viewportInterruptProperties = viewportInterruptPropertiesRef.current;\n    var cradleContent = contentHandler.content;\n\n    switch (cradleState) {\n      // renderupdatedcontent is called from triggerlineintersectionobservercallback (interruptHandler), \n      // and called from onAfterScroll (scrollHandler)\n      // it is required set configurations before 'ready' TODO: specify!\n      case 'renderupdatedcontent': // resettriggerlines is called after setCradleContent cycle is complete\n      // it is called specifically from the normalizesignals default response\n\n      case 'resettriggerlines':\n        {\n          var triggerlineobserver = interruptHandler.axisTriggerlinesIntersect.observer;\n          var cradleElements = scaffoldHandler.elements;\n          triggerlineobserver.observe(cradleElements.headTriggerlineRef.current);\n          triggerlineobserver.observe(cradleElements.tailTriggerlineRef.current);\n          setCradleState('ready');\n          break; // ----------------------------------------------------------------------\n          // ------------[ reposition when repositioningRequired is true ]---------------\n        }\n\n      case 'startreposition':\n        {\n          // const cradleobserver = interruptHandler.cradleIntersect.observer\n          // cradleobserver.disconnect()\n          var triggerlineobserver = interruptHandler.axisTriggerlinesIntersect.observer;\n          triggerlineobserver.disconnect(); // avoid recursive cradle intersection interrupts\n\n          interruptHandler.signals.pauseCradleIntersectionObserver = true;\n          interruptHandler.signals.repositioningRequired = false; // because now underway\n\n          setCradleState('repositioningRender');\n          break;\n        }\n\n      case 'finishreposition':\n        {\n          // const cradleobserver = interruptHandler.cradleIntersect.observer\n          // const triggerlineobserver = interruptHandler.axisTriggerlinesIntersect.observer\n          // const cradleElements = scaffoldHandler.elements\n          // const {\n          //     headRef, \n          //     tailRef, \n          // headTriggerlineRef, \n          // tailTriggerlineRef\n          // } = cradleElements\n          // cradleobserver.observe(headRef.current)\n          // cradleobserver.observe(tailRef.current)\n          // triggerlineobserver.observe(headTriggerlineRef.current)\n          // triggerlineobserver.observe(tailTriggerlineRef.current)\n          // interruptHandler.signals.pauseCradleIntersectionObserver = false\n          // scrollHandler.updateReferenceData()\n          scrollHandler.updateBlockScrollPos();\n          console.log('==> in finishposition:pauseCradleIntersectionObserver, scaffoldHandler.cradleReferenceData', interruptHandler.signals.pauseCradleIntersectionObserver, Object.assign({}, scaffoldHandler.cradleReferenceData));\n          setCradleState('doreposition');\n          break;\n        }\n\n      /*\n          the following 5 cradle states all resolve with\n          a chain starting with 'preparerender', which\n          calls setCradleContent\n      */\n\n      case 'setup':\n      case 'doreposition':\n      case 'resized':\n      case 'pivot':\n      case 'reload':\n        callingCradleState.current = cradleState; // message for setCradleContent\n\n        setCradleState('preparecontent'); // cycle to allow for config; eg. for setup\n\n        break;\n\n      case 'preparecontent':\n        {\n          cradleContent.headModelComponents = [];\n          cradleContent.tailModelComponents = [];\n          cradleContent.headViewComponents = [];\n          cradleContent.tailViewComponents = [];\n          handlersRef.current.portals.resetScrollerPortalRepository();\n          contentHandler.setCradleContent(callingCradleState.current);\n          setCradleState('preparerender');\n          break;\n        }\n\n      case 'preparerender':\n        {\n          var cradleElements = scaffoldHandler.elements;\n          var headTriggerlineRef = cradleElements.headTriggerlineRef,\n              tailTriggerlineRef = cradleElements.tailTriggerlineRef;\n          var triggerlineobserver = interruptHandler.axisTriggerlinesIntersect.observer;\n          triggerlineobserver.observe(headTriggerlineRef.current);\n          triggerlineobserver.observe(tailTriggerlineRef.current);\n          var cradleContent_1 = contentHandler.content;\n          cradleContent_1.headViewComponents = cradleContent_1.headModelComponents;\n          cradleContent_1.tailViewComponents = cradleContent_1.tailModelComponents;\n          var cradleReferenceData = scaffoldHandler.cradleReferenceData;\n          viewportInterruptProperties.elementref.current[cradleReferenceData.blockScrollProperty] = Math.max(0, cradleReferenceData.blockScrollPos);\n          setCradleState('normalizesignals'); // call a timeout for ready (or interrupt continuation)\n\n          break;\n        }\n\n      case 'normalizesignals':\n        {\n          console.log('- in normalizesignals call');\n          normalizeTimerRef.current = setTimeout(function () {\n            console.log('-- executing normalizesignals call:interruptHandler.signals.repositioningRequired', interruptHandler.signals.repositioningRequired);\n            if (!isMountedRef.current) return; // allow short-circuit fallbacks to continue interrupt responses\n\n            /*1*/\n\n            if (!viewportInterruptProperties.isResizing) {\n              // resize short-circuit\n\n              /*2*/\n              if (!interruptHandler.signals.repositioningRequired) {\n                // repositioning short-circuit\n                console.log('normalizing signals');\n                var signals = interruptHandler.signals;\n\n                if (viewportInterruptProperties.elementref.current) {\n                  // already unmounted if fails (?)\n                  signals.pauseTriggerlinesObserver && (signals.pauseTriggerlinesObserver = false);\n                  signals.pauseScrollingEffects && (signals.pauseScrollingEffects = false);\n                  signals.pauseCradleIntersectionObserver && (signals.pauseCradleIntersectionObserver = false);\n                  signals.pauseCradleResizeObserver && (signals.pauseCradleResizeObserver = false);\n                } else {\n                  console.log('ERROR: viewport element not set in normalizesignals', scrollerID, viewportInterruptProperties);\n                }\n                /*default*/\n\n\n                if (isMountedRef.current) setCradleState('resettriggerlines'); // then 'ready'\n              } else {\n                /*2*/\n                if (isMountedRef.current) setCradleState('startreposition');\n              }\n            } else {\n              /*1*/\n              if (isMountedRef.current) setCradleState('resizing');\n            }\n          }, NORMALIZE_SIGNALS_TIMEOUT);\n          break;\n        }\n    }\n  }, [cradleState]); // standard processing stages\n\n  (0, react_1.useEffect)(function () {\n    // const viewportInterruptProperties = viewportInterruptPropertiesRef.current\n    // repositioningRender and repositioningContinuation are toggled to generate continuous \n    //    reposiioning renders\n    switch (cradleState) {\n      case 'repositioningRender':\n        // to trigger render between scrolls\n        break;\n\n      case 'repositioningContinuation':\n        // set from onScroll\n        setCradleState('repositioningRender');\n        break;\n\n      case 'ready':\n        // to specify no action on ready\n        break;\n    }\n  }, [cradleState]); // ==========================[ RENDER ]===========================\n\n  var referenceIndexOffset = scaffoldHandler.cradleReferenceData.scrollImpliedAxisReferenceIndex;\n  var scrollTrackerArgs = (0, react_1.useMemo)(function () {\n    if (!(cradleState == 'repositioningContinuation' || cradleState == 'repositioningRender')) {\n      return null;\n    }\n\n    var trackerargs = {\n      top: viewportDimensions.top + 3,\n      left: viewportDimensions.left + 3,\n      referenceIndexOffset: scaffoldHandler.cradleReferenceData.scrollImpliedAxisReferenceIndex,\n      listsize: listsize,\n      styles: styles\n    };\n    return trackerargs;\n  }, [cradleState, viewportDimensions, referenceIndexOffset, listsize, styles]);\n  var cradleContent = contentHandler.content; // console.log('rendering with state',cradleStateRef.current)\n  // portalroot is the hidden portal component cache\n\n  return react_1[\"default\"].createElement(exports.CradlePortalsContext.Provider, {\n    value: handlersRef.current.portals\n  }, cradleStateRef.current != 'setup' && react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'portalroot',\n    style: portalrootstyle\n  }, react_1[\"default\"].createElement(portalhandler_1.PortalList, {\n    scrollerProps: handlersRef.current.portals.scrollerProps\n  })), cradleStateRef.current == 'repositioningRender' || cradleStateRef.current == 'repositioningContinuation' ? react_1[\"default\"].createElement(scrolltracker_1[\"default\"], {\n    top: scrollTrackerArgs.top,\n    left: scrollTrackerArgs.left,\n    offset: scrollTrackerArgs.referenceIndexOffset,\n    listsize: scrollTrackerArgs.listsize,\n    styles: scrollTrackerArgs.styles\n  }) : react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-axis',\n    style: cradleAxisStyle,\n    ref: axisCradleElementRef\n  }, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'triggerline-head',\n    style: triggerlineHeadStyle,\n    ref: headTriggerlineCradleElementRef\n  }), react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'triggerline-tail',\n    style: triggerlineTailStyle,\n    ref: tailTriggerlineCradleElementRef\n  }),  true ? react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-divider',\n    style: cradleDividerStyle\n  }) : 0, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'head',\n    ref: headCradleElementRef,\n    style: cradleHeadStyle\n  }, cradleStateRef.current != 'setup' ? cradleContent.headViewComponents : null), react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'tail',\n    ref: tailCradleElementRef,\n    style: cradleTailStyle\n  }, cradleStateRef.current != 'setup' ? cradleContent.tailViewComponents : null)));\n}; // Cradle\n// utilities\n\n\nvar getCradleHandlers = function getCradleHandlers(cradleParameters) {\n  var createHandler = function createHandler(handler) {\n    return new handler(cradleParameters);\n  };\n\n  return {\n    portalHandler: new portalhandler_1.PortalHandler(),\n    interruptHandler: createHandler(interrupthandler_1[\"default\"]),\n    scrollHandler: createHandler(scrollhandler_1[\"default\"]),\n    stateHandler: createHandler(statehandler_1[\"default\"]),\n    contentHandler: createHandler(contenthandler_1[\"default\"]),\n    scaffoldHandler: createHandler(scaffoldhandler_1[\"default\"]),\n    serviceHandler: createHandler(servicehandler_1[\"default\"]),\n    stylesHandler: createHandler(styleshandler_1[\"default\"])\n  };\n};\n\nexports[\"default\"] = Cradle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUl1Riw2QkFBSixFQURYO0lBRUh0RixnQkFBZ0IsRUFBQzJGLGFBQWEsQ0FBQ0UsNkJBQUQsQ0FGM0I7SUFHSDVGLGFBQWEsRUFBQzBGLGFBQWEsQ0FBQ0csMEJBQUQsQ0FIeEI7SUFJSDVGLFlBQVksRUFBQ3lGLGFBQWEsQ0FBQ0kseUJBQUQsQ0FKdkI7SUFLSDdHLGNBQWMsRUFBQ3lHLGFBQWEsQ0FBQ0ssMkJBQUQsQ0FMekI7SUFNSDdGLGVBQWUsRUFBQ3dGLGFBQWEsQ0FBQ00sNEJBQUQsQ0FOMUI7SUFPSDdGLGNBQWMsRUFBQ3VGLGFBQWEsQ0FBQ08sMkJBQUQsQ0FQekI7SUFRSDdGLGFBQWEsRUFBQ3NGLGFBQWEsQ0FBQ1EsMEJBQUQ7RUFSeEIsQ0FBUDtBQVVILENBZEQ7O0FBZ0JBaE0sa0JBQUFBLEdBQWVNLE1BQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vc3JjL2NyYWRsZS50c3g/MTgzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmFkbGUudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMTktMjAyMiBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG4vKlxuXG4gICAgQlVHUzpcbiAgICAtIHNvbWV0aW1lcyBvbiBhbmRyb2lkIGNocm9tZSBheGlzIGdldHMgc3R1Y2sgb3V0c2lkZSBvZiB2aXNpYmxlIGFyZWEgYW5kIFxuICAgICAgICBsb3NlcyBpbnRlcnNlY3Qgbm9yaWZpY2F0aW9uc1xuICAgIC0gYW5kcm9pZCBmaXJlZm94IGxvc2VzIHBvc2l0aW9uIG9uIGZhc3Qgc2Nyb2xsXG4gICAgLSBzYWZhcmkgbWFjIGxvc2VzIHBsYWNlIGluIHN1Ymxpc3RzIG9uIHJhcGlkIGJhY2tzY3JvbGwgYXQgc3RhcnQgb2YgbGlzdFxuICAgIC0gU2Nyb2xsdG9wIGlzIHNvbWV0aW1lcyBzZXQgdG8gMCB3aGlsZSBoZWFkIG92ZXJmbG93cyBhYm92ZSBib3JkZXJcbiAgICAtIGNvbnRleHQgcHJvYmxlbXMgZGV2ZWxvcCB3aGVuIHJvdGF0aW5nIHBob25lIHdoaWxlIHNjcm9sbGluZyBpbnRlcnRpYSBjb250aW51ZXNcbiAgICAtIHJhcGlkIGJhY2sgYW5kIGZvcnRoIGluIG1pZGRsZSBldmVudHVhbGx5IGNhdXNlcyBmYWlsIG9mIGludGVyY2VwdHNcbiAgICAtIGNlbGwgaGVpZ2h0IG5vdCBiZWluZyByZXNwZWN0ZWQgaW4gbmVzdGVkIHNjcm9sbGVycy5cbiAgICAtIHJlc2l6ZSBzb21ldGltZXMgbG9zZXMgY29ycmVjdCBhbGxvY2F0aW9uIG9mIGhlYWQgaXRlbXM7IGxlYXZlcyBibGFuayBpdGVtc1xuXG4gICAgQlVHUzpcbiAgICAtIGNoZWNrIHN0eWxlcyBpbiBzY3JvbGxUcmFja2VyIGFyZ3NcbiAgICAtIGRvcmVwb3NpdGlvbiBnZXRzIHN0dWNrIGF0IGEgcGFydGljdWxhciBudW1iZXIgYWZ0ZXIgZ2V0dGluZyBiZWhpbmQgb24gaGVhdnkgc2Nyb2xsXG4gICAgICAgIGNoZWNrIHBhdXNlU2Nyb2xsaW5nRWZmZWN0c1xuICAgIC0gdmFyaWFibGUgY2VsbHMgc2hvd2luZyBzaWducyBvZiBnZXRJdGVtKCkgd2l0aCBwb3J0YWxcbiAgICAtIENocm9tZSBzb21ldGltZXMgbWlzc2VzIG5lc3RlZCBjZWxsIHBvcnRhbHMgaG9yaXpvbnRhbGx5XG4gICAgLSByZWR1Y2UgY29tcHV0aW5nIGludGVuc2l0eSB0byBhdm9pZCBiYXR0ZXJ5IGRyYWluYWdlXG5cbiAgICBUT0RPOlxuXG4gICAgLSBQTEFDRSBTRU5USU5FTFMgKGFzc2VydGlvbnMpIEFUIENSSVRJQ0FMIExPQ0FUSU9OUyBUTyBXQVRDSCBGT1IgQU5PTUFMSUVTXG4gICAgLSB0cnkgcG9zaXRpb24gZml4ZWQgZHVyaW5nIHJlcGFyZW50aW5nIHRvIHByZXNlcnZlIHNjcm9sbCBwb3NpdGlvblxuXG4gICAgLSBjb25zaWRlciBlbGltaW5hdGluZyBjZWxsaW50ZXJzZWN0b2JzZXJ2ZXIgaW4gZmF2b3VyIG9mIGhlYWQgYW5kIHRhaWwgaW50ZXJzZWN0IG9iZXJ2ZXJcblxuICAgIC0gc2Nyb2xsIHJlc2V0IHByb2JsZW0gcmVjdXJzIHdpdGggcmVwZWF0ZWQgYWJvdmUgYW5kIGJlbG93IHJhcGlkIHJlc2V0c1xuICAgICAgICB0aGUgcHJvYmxlbSBjb21lcyB3aXRoIHVwZGF0ZSBjb250ZW50IGZyb20gZW5kb2ZzY3JvbGwsIGFmdGVyIGRvdWJsZSBub3JtYWxpemUgc2lnbmFsc1xuICAgICAgICB0aGUgZXh0cmEgcmVwYXJlbnRpbmcgaXMgaW5zZXJ0ZWQgZHVyaW5nIHRoZSB0aW1lb3V0IGZvciBub3JtYWxpemUgc2lnbmFsc1xuICAgIC0gdHJ5IGNsZWFydGltZW91dFxuXG5cbiAgICAtIGZpeCBzY3JvbGwgcmVzZXQgb24gcmVwYXJlbnRcbiAgICAtIHJldmlldyBuZWVkIGZvciBzZXRzY3JvbGxwb3NpdGlvblxuICAgIC0gQlVHOiBpbiBGRiBuZXN0ZWQgc2Nyb2xsZXIgc3dpdGNoIGZyb20gcGxhY2Vob2xkZXIgdG8gY29udGVudCByZXNldHMgc2Nyb2xsIHBvc2l0aW9uXG4gICAgLSB1bm1vdW50ZWQgd2FybmluZyB0byBkbyB3aXRoIEluUG9ydGFsXG5cbiAgICBPYnNlcnZlcnNIYW5kbGVyXG4gICAgV2luZ3NBZ2VudFxuICAgIE1lc3NhZ2VBZ2VudCA/IC8vIG1lc3NhZ2Ugd2l0aCBob3N0IGVudmlyb25tZW50LCBzdWNoIGFzIHJlZmVyZW5jZUluZGV4Q2FsbGJhY2tcblxuICAgIFNjcm9sbEhhbmRsZXJcbiAgICBTaWduYWxzSGFuZGxlclxuICAgIFN0YXRlSGFuZGxlclxuICAgIENvbnRlbnRIYW5kbGVyXG4gICAgU2NhZmZvbGRIYW5kbGVyXG4gICAgU2VydmljZUhhbmRsZXIgLy8gdXNlciBzZXJ2aWNlc1xuICAgIFN0eWxlc0hhbmRsZXJcblxuKi9cblxuLypcbiAgICBEZXNjcmlwdGlvblxuICAgIC0tLS0tLS0tLS0tXG4gICAgVGhlIEdyaWRTdHJvbGxlciBwcm92aWRlcyB0aGUgaWxsdXNpb24gb2YgaW5maW5pdGUgc2Nyb2xsaW5nIHRocm91Z2ggdGhlIHVzZSBvZiBhIGRhdGEgJ2NyYWRsZScgaW5zaWRlIGEgdmlld3BvcnQuXG4gICAgVGhlIGlsbHVzaW9uIGlzIG1haW50YWluZWQgYnkgc3luY2hyb25pemluZyBjaGFuZ2VzIGluIGNyYWRsZSBjb250ZW50IHdpdGggY3JhZGxlIGxvY2F0aW9uIGluc2lkZSBhIHNjcm9sbGJsb2NrLCBzdWNoXG4gICAgdGhhdCBhcyB0aGUgc2Nyb2xsYmxvY2sgaXMgbW92ZWQsIHRoZSBjcmFkbGUgbW92ZXMgb3Bwb3NpdGVseSBpbiB0aGUgc2Nyb2xsYmxvY2sgKHRvIHN0YXkgdmlzaWJsZSB3aXRoaW4gdGhlIHZpZXdwb3J0KS4gXG4gICAgVGhlIHNjcm9sbGJsb2NrIGlzIHNpemVkIHRvIGFwcHJveGltYXRlIHRoZSBsaXN0IGJlaW5nIHZpZXdlZCwgc28gYXMgdG8gaGF2ZSBhIHNjcm9sbCB0aHVtYiBzaXplIGFuZCBwb3NpdGlvbiB3aGljaCBcbiAgICByZWFsaXN0aWNhbGx5IHJlZmxlY3RzIHRoZSBzaXplIG9mIHRoZSBsaXN0IGJlaW5nIHNob3duLlxuXG4gICAgVGhlIHBvc2l0aW9uIG9mIHRoZSBjcmFkbGUgaXMgY29udHJvbGxlZCBieSBhICdheGlzJyB3aGljaCBpcyBhIDBweCBoZWlnaHQvd2lkdGggKGFsb25nIHRoZSBtZWRpYWwgLSBTY3JvbGxCbG9jayBjYW4gYmUgXG4gICAgdmVydGljc2wgb3IgaG9yaXpvbnRhbCkuIFRoZSBwdXJwb3NlIG9mIHRoZSBheGlzIGlzIHRvIGFjdCBhcyBhICdmb2xkJywgYWJvdmUgd2hpY2ggY2VsbCBjb250ZW50IGV4cGFuZHMgJ3Vwd2FyZHMnLCBhbmQgXG4gICAgYmVsb3cgd2hpY2ggdGhlIGNlbGwgY29udGVudCBleHBhbmRzICAnZG93bndhcmRzJy4gR3JpZFNjcm9sbGVyIGNhbiBiZSB2aWV3ZWQgdmVydGljYWxseSBvciBob3Jpem9udGFsbHkuIFdoZW4gaG9yaXpvbnRhbCwgXG4gICAgdGhlIGF4aXMgaGFzIGEgMHB4IHdpZHRoLCBzbyB0aGF0IHRoZSAnZm9sZCcgaXMgdmVydGljYWwsIGFuZCBjZWxscyBleHBhbmQgdG8gdGhlIGxlZnQgYW5kIHJpZ2h0LlxuXG4gICAgVGhlIGF4aXMgaXMgY29udHJvbGxlZCB0byBhbHdheXMgYmUgaW4gdGhlIGF0IHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIGxlYWRpbmcgY2VsbHJvdyBvZiB0aGUgdmlld3BvcnQuIFRodXNcbiAgICBpbiB2ZXJ0aWNhbCBvcmllbnRhdGlvbiwgdGhlIGF4aXMgJ3RvcCcgY3NzIGF0dHJpYnV0ZSBpcyBhbHdheXMgZXF1YWwgdG8gdGhlICdzY3JvbGxUb3AnIHBvc2l0aW9uIG9mIHRoZSBzY3JvbGxibG9jayxcbiAgICBwbHVzIGFuIGFkanVzdG1lbnQuIFRoZSBhZGp1c3RtZW50IGlzIHRoZSByZXN1bHQgb2YgdGhlIGFsaWdubWVudCBvZiB0aGUgYXhpcyBpbiByZWxhdGlvbiB0byB0aGUgdG9wLShvciBsZWZ0LSltb3N0IGNlbGxcbiAgICBpbiB0aGUgdmlld3BvcnQgKHRoZSAncmVmZXJlbmNlJyByb3cpLiBUaGUgYXhpcyBjYW4gb25seSBiZSBwbGFjZWQgYXQgdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgZmlyc3QgdmlzaWJsZVxuICAgIGNlbGwgaW4gdGhlIHZpZXdwb3J0LiBUaGVyZWZvcmUgdGhlIGF4aXMgb2Zmc2V0IGZyb20gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdmlld3BvcnQgY2FuIGJlIGFueXdoZXJlIGZyb20gbWludXMgdG9cbiAgICBwbHVzIHRoZSBsZW5ndGggb2YgdGhlIGxlYWRpbmcgcm93LiBUaGUgZXhhY3QgYW1vdW50IGRlcGVuZHMgb24gd2hlcmUgdGhlICdicmVha3BvaW50JyBvZiB0cmFuc2l0aW9uIG5vdGlmaWNhdGlvbiBpcyBzZXQgZm9yXG4gICAgY2VsbHMgY3Jvc3NpbmcgdGhlIHZpZXdwb3J0IHRocmVzaG9sZCAoYW5kIGNhbiBiZSBjb25maWd1cmVkKS4gVGhlIGRlZmF1bHQgb2YgdGhlIGJyZWFrcG9pbnQgaXMgLjUgKGhhbGYgdGhlIGxlbmd0aCBvZiB0aGUgY2VsbCkuXG5cbiAgICBUZWNobmljYWxseSwgdGhlcmUgYXJlIHNldmVyYWwgcmVmZXJlbmNlIHBvaW50cyB0cmFja2VkIGJ5IHRoZSBHcmlkU2Nyb2xsZXIuIFRoZXNlIGFyZTpcbiAgICAgICAgLSBheGlzUmVmZXJlbmNlSW5kZXggKHRoZSB2aXJ0dWFsIGluZGV4IG9mIHRoZSBpdGVtIGNvbnRyb2xsaW5nIHRoZSBsb2NhdGlvbiBvZiB0aGUgYXhpcylcbiAgICAgICAgICAgIFRoZSBheGlzUmVmZXJlbmNlSW5kZXggaXMgYWxzbyB1c2VkIHRvIGFsbG9jYXRlIGl0ZW1zIGFib3ZlIChsb3dlciBpbmRleCB2YWx1ZSkgYW5kIGJlbG93IChzYW1lIG9yIGhpZ2hlciBpbmRleCB2YWx1ZSlcbiAgICAgICAgICAgIHRoZSBmb2xkXG4gICAgICAgIC0gY3JhZGxlUmVmZXJlbmNlSW5kZXggKHRoZSB2aXJ0dWFsIGluZGV4IG9mIHRoZSBpdGVtIGRlZmluaW5nIHRoZSBsZWFkaW5nIGJvdW5kIG9mIHRoZSBjcmFkbGUgY29udGVudClcbiAgICAgICAgLSBheGlzUGl4ZWxPZmZzZXQgKHBpeGVscyAtIHBsdXMgb3IgbWludXMgLSB0aGF0IHRoZSBheGlzIGlzIHBsYWNlZCBpbiByZWxhdGlvbiB0byB0aGUgdmlld3BvcnQncyBsZWFkaW5nIGVkZ2UpIFxuICAgIFxuICAgIFRoZXNlIHJlZmVyZW5jZSBwb2ludHMgYXJlIGFwcGxpZWQgdG8gdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmVzOlxuICAgICAgICAtIHRoZSB2aWV3cG9ydFxuICAgICAgICAtIHRoZSBzY3JvbGxibG9ja1xuICAgICAgICAtIHRoZSBjcmFkbGUsIGNvbnNpc3Rpbmcgb2ZcbiAgICAgICAgICAgIC0gdGhlIGF4aXMgKGNvbnRhaW5zIGNyYWRsZSBoZWFkIGFuZCB0YWlsKVxuICAgICAgICAgICAgLSB0aGUgaGVhZCAoY29udGFpbnMgbGVhZGluZyBpdGVtcylcbiAgICAgICAgICAgIC0gdGhlIHRhaWwgKGNvbnRhaW5zIHRyYWlsaW5nIGl0ZW1zKVxuXG4gICAgU3RydWN0dXJlIGRldGFpbHM6XG4gICAgICAgIHRoZSBjcmFkbGUgY29udGVudCBjb25zaXN0cyBvZlxuICAgICAgICAtIHRoZSBudW1iZXIgb2Ygcm93cyB0aGF0IGFyZSB2aXNpYmxlIGluIHRoZSB2aWV3cG9ydCAoYWNjb3JkaW5nIHRvIHRoZSBkZWZhdWx0IHBhcmFtZXRlcnMpXG4gICAgICAgICAgICAtIHRoaXMgdHlwaWNhbGx5IGluY2x1ZGVzIG9uZSBwYXJ0aWFsbHkgdmlzaWJsZSByb3dcbiAgICAgICAgLSB0aGUgbnVtYmVyIG9mIHJ1bndheSByb3dzIHNwZWNpZmllZCBpbiB0aGUgcGFyYW1ldGVycywgdGltZXMgMiAob25lIGV0IGZvciB0aGUgaGVhZDsgb25lIGZvciB0aGUgdGFpbClcbiAgICAgICAgLSB0aGUgbnVtYmVyIG9mIGl0ZW1zIGlzIHRoZSBudW1iZXIgb2Ygcm93cyB0aW1lcyB0aGUgJ2Nyb3NzY291bnQnIHRoZSBsYXRlcmFsIG51bWJlciBvZiBjZWxscy4gXG4gICAgICAgIC0gdGhlIGxhc3Qgcm93IG1pZ2h0IGNvbnNpc3Qgb2YgZmV3ZXIgaXRlbXMgdGhhbiBjcm9zc2NvdW50LCB0byBtYXRjaCB0aGUgbWF4aW11bSBsaXN0c2l6ZVxuICAgICAgICAtIHRoZSBjcmFkbGVSb3djb3VudCAodmlzaWJsZSBkZWZhdWx0IHJvd3MgKyBydW53YXlSb3djb3VudFNwZWMgKiAyKSBhbmQgdmlld3BvaW50Um93Y291bnQgKHZpc2JsZSByb3dzO3R5cGljYWxsIG9uZSBwYXJ0aWFsKVxuXG4gICAgSXRlbSBjb250YWluZXJzOlxuICAgICAgICBDbGllbnQgY2VsbCBjb250ZW50IGlzIGNvbnRhaW5lZCBpbiBDZWxsU2hlbGwncywgd2hpY2ggYXJlIGNvbmZpZ3VyZWQgYWNjb3JkaW5nIHRvIEdyaWRTY3JvbGxlcidzIGlucHV0IHBhcmFtZXRlcnMuXG4gICAgICAgIFRoZSBJdGVtQ2VsbCdzIGFyZSBpbiB0dXJuIGNvbnRhaW5lZCBpbiBDU1MgZ3JpZCBzdHJ1Y3R1cmVzLiBUaGVyZSBhcmUgdHdvIGdyaWQgc3RydWN0dXJlcyAtIG9uZSBpbiB0aGUgY3JhZGxlIGhlYWQsXG4gICAgICAgIGFuZCBvbmUgaW4gdGhlIGNyYWRsZSB0YWlsLiBFYWNoIGdyaWQgc3RydWN0dXJlIGlzIGFsbG93ZWQgdW5pZm9ybSBwYWRkaW5nIGFuZCBnYXBzIC0gaWRlbnRpY2FsIGJldHdlZW4gdGhlIHR3by5cblxuICAgIE92ZXJzY3JvbGwgaGFuZGxpbmc6XG4gICAgICAgIE93aW5nIHRvIHRoZSB3ZWlnaHQgb2YgdGhlIGNvZGUsIGFuZCBwb3RlbnRpYWwgcmFwaWRpdHkgb2Ygc2Nyb2xsaW5nLCB0aGVyZSBpcyBhbiBvdmVyc2Nyb2xsIHByb3RvY29sLiBcbiAgICAgICAgaWYgdGhlIG92ZXJzY3JvbGwgaXMgc3VjaCB0aGF0IHBhcnQgb2YgdGhlIGNyYWRsZSBpcyBzdGlsbCB3aXRoaW4gdGhlIHZpZXdwb3J0IGJvdW5kYXJpZXMsIHRoZW4gdGhlIG92ZXJzY3JvbGxcbiAgICAgICAgaXMgY2FsY3VsYXRlZCBhcyB0aGUgbnVtYmVyIG9mIGNlbGwgcm93cyB0aGF0IHdvdWxkIGZpdCAoY29tcGxldGVseSBvciBwYXJ0aWFsbHkpIGluIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSBlZGdlIG9mIFxuICAgICAgICB0aGUgY3JhZGxlIHRoYXQgaXMgcmVjZWRpbmcgZnJvbSBhIHZpZXdwb3J0IGVkZ2UuIFxuXG4gICAgICAgIElmIHRoZSBvdmVyc2hvb3QgaXMgc3VjaCB0aGF0IHRoZSBjcmFkbGUgaGFzIGVudGlyZWx5IHBhc3NlZCBvdXQgb2YgdGhlIHZpZXdwb3J0LCB0aGUgR3JpZFNjcm9sbGVyIGdvZXMgaW50byAnUmVwb3NpdG9pbmluZydcbiAgICAgICAgbW9kZSwgbWVhbmluZyB0aGF0IGl0IHRyYWNrcyByZWxhdGl2ZSBsb2NhdGlvbiBvZiB0aGUgYXhpcyBlZGdlIG9mIHRoZSB2aWV3cG9ydCwgYW5kIHJlcGFpbnRzIHRoZSBjcmFkbGUgYWNjcm9kaW5nIHRvXG4gICAgICAgIHRoaXMgcG9zaXRpb24gd2hlbiB0aGUgc2Nyb2xsaW5nIHN0b3BzLlxuKi9cblxuLypcbiAgICBDcmFkbGUgaXMgYWN0aXZhdGVkIGJ5IGludGVycnVwdHM6XG4gICAgLSByZXNpemluZyBvZiB0aGUgdmlld3BvcnQgKDEpXG4gICAgLSBvYnNlcnZlciBjYWxsYmFja3M6XG4gICAgICAgIC0gY3JhZGxlIHZpZXdwb3J0IGludGVyc2VjdGlvbiBmb3IgcmVwb3NpdGlvbmluZyB3aGVuIHRoZSBjcmFkbGUgcmFjZXMgb3V0IG9mIHNjb3BlIC0gYnkgc2Nyb2xsICgyKVxuICAgICAgICAtIGNlbGxTaGVsbCB2aWV3cG9ydCBpbnRlcnNlY3Rpb24gd2hpY2ggdHJpZ2dlcnMgcm9sbGluZyBvZiBjb250ZW50IC0gYnkgc2Nyb2xsICgzKVxuICAgICAgICAgICAgLSByb2xsaW5nIGNvbnRlbnQgdHJpZ2dlcnMgcmUtYWxsb2NhdGlvbiBvZiBjb250ZW50IGJldHdlZW4gY3JhZGxlIHdpbmdzXG4gICAgICAgIC0gY3JhZGxlIHdpbmcgcmVzaXplIChyZXNwb25kaW5nIHRvIHZhcmlhYmxlIGxlbmd0aCBjZWxsIGNoYW5nZXMpIHdoaWNoIHRyaWdnZXJzIHJlY29uZmlndXJhdGlvbiAoNClcbiAgICAtIHBpdm90IC0gY2hhbmdlIG9mIG9yaWVudGF0aW9uICg1KVxuICAgIC0gaG9zdCBjaGFuZ2Ugb2Ygb3RoZXIgY29uZmlndXJhdGlvbiBzcGVjcyAoNilcbiovXG5cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiwgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IFZpZXdwb3J0SW50ZXJydXB0IH0gZnJvbSAnLi92aWV3cG9ydCdcblxuLy8gcG9wdXAgcG9zaXRpb24gdHJhY2tlciBmb3IgcmVwb3NpdGlvbmluZ1xuaW1wb3J0IFNjcm9sbFRyYWNrZXIgZnJvbSAnLi9zY3JvbGx0cmFja2VyJ1xuXG4vLyBzdXBwb3J0IGNvZGVcbmltcG9ydCB7IFBvcnRhbEhhbmRsZXIsIFBvcnRhbExpc3QgfSBmcm9tICcuL2NyYWRsZS9wb3J0YWxoYW5kbGVyJ1xuaW1wb3J0IFNjcm9sbEhhbmRsZXIgZnJvbSAnLi9jcmFkbGUvc2Nyb2xsaGFuZGxlcidcbmltcG9ydCBTdGF0ZUhhbmRsZXIgZnJvbSAnLi9jcmFkbGUvc3RhdGVoYW5kbGVyJ1xuaW1wb3J0IENvbnRlbnRIYW5kbGVyIGZyb20gJy4vY3JhZGxlL2NvbnRlbnRoYW5kbGVyJ1xuaW1wb3J0IFNjYWZmb2xkSGFuZGxlciBmcm9tICcuL2NyYWRsZS9zY2FmZm9sZGhhbmRsZXInXG5pbXBvcnQgSW50ZXJydXB0SGFuZGxlciBmcm9tICcuL2NyYWRsZS9pbnRlcnJ1cHRoYW5kbGVyJ1xuaW1wb3J0IFNlcnZpY2VIYW5kbGVyIGZyb20gJy4vY3JhZGxlL3NlcnZpY2VoYW5kbGVyJ1xuaW1wb3J0IFN0eWxlc0hhbmRsZXIgZnJvbSAnLi9jcmFkbGUvc3R5bGVzaGFuZGxlcidcblxuLy8gZm9yIGNoaWxkcmVuXG5leHBvcnQgY29uc3QgQ3JhZGxlUG9ydGFsc0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpIC8vIGZvciBjaGlsZHJlblxuXG5jb25zdCBwb3J0YWxyb290c3R5bGUgPSB7ZGlzcGxheTonbm9uZSd9IC8vIHN0YXRpYyBcblxuY29uc3QgTk9STUFMSVpFX1NJR05BTFNfVElNRU9VVCA9IDI1MFxuXG4vLyBjb21wb25lbnRcbmNvbnN0IENyYWRsZSA9ICh7IFxuICAgICAgICBncmlkU3BlY3MsXG5cbiAgICAgICAgcnVud2F5Um93Y291bnRTcGVjLCBcbiAgICAgICAgbGlzdHNpemUsIFxuICAgICAgICBkZWZhdWx0VmlzaWJsZUluZGV4LCBcbiAgICAgICAgZ2V0SXRlbSwgXG4gICAgICAgIHBsYWNlaG9sZGVyLCBcbiAgICAgICAgZnVuY3Rpb25zOmluaGVyaXRlZGZ1bmN0aW9ucyxcbiAgICAgICAgc3R5bGVzOmluaGVyaXRlZHN0eWxlcyxcblxuICAgICAgICBzY3JvbGxlck5hbWUsXG4gICAgICAgIHNjcm9sbGVySUQsXG4gICAgICAgIHRyaWdnZXJsaW5lT2Zmc2V0LFxuICAgIH0pID0+IHtcblxuICAgIGlmIChsaXN0c2l6ZSA9PSAwKSByZXR1cm4gLy8gbm90aGluZyB0byBkb1xuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09WyBEQVRBIFNFVFVQIF09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIC8vIHVucGFjayBncmlkU3BlY3NcbiAgICBjb25zdCB7XG4gICAgICAgIG9yaWVudGF0aW9uLFxuICAgICAgICBnYXAsXG4gICAgICAgIHBhZGRpbmcsXG4gICAgICAgIGNlbGxIZWlnaHQsXG4gICAgICAgIGNlbGxXaWR0aCxcbiAgICAgICAgbGF5b3V0LFxuICAgICAgICBkZW5zZSxcbiAgICB9ID0gZ3JpZFNwZWNzXG5cbiAgICAvLyBmcmVlemUgb2JqZWN0IHByb3BzXG4gICAgY29uc3QgZnVuY3Rpb25zID0gT2JqZWN0LmZyZWV6ZShPYmplY3QuYXNzaWduKHt9LGluaGVyaXRlZGZ1bmN0aW9ucykpXG4gICAgY29uc3Qgc3R5bGVzID0gT2JqZWN0LmZyZWV6ZShPYmplY3QuYXNzaWduKHt9LGluaGVyaXRlZHN0eWxlcykpXG5cbiAgICAvLyBidW5kbGUgY3JhZGxlIHByb3BzIHRvIHBhc3MgdG8gaGFuZGxlcnNcbiAgICBjb25zdCBjcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmID0gdXNlUmVmKG51bGwpIC8vIGFjY2VzcyBieSBjbG9zdXJlcyBhbmQgc3VwcG9ydCBmdW5jdGlvbnNcbiAgICBjcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQgPSAgT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIC8vIGdyaWRTcGVjc1xuICAgICAgICBvcmllbnRhdGlvbiwgXG4gICAgICAgIGdhcCwgXG4gICAgICAgIHBhZGRpbmcsIFxuICAgICAgICBjZWxsSGVpZ2h0LCBcbiAgICAgICAgY2VsbFdpZHRoLCBcbiAgICAgICAgbGF5b3V0LFxuICAgICAgICBkZW5zZSxcbiAgICAgICAgLy8gLi4ucmVzdFxuICAgICAgICAvLyBydW53YXlSb3djb3VudFNwZWMsIFxuICAgICAgICBsaXN0c2l6ZSwgXG4gICAgICAgIGRlZmF1bHRWaXNpYmxlSW5kZXgsIFxuICAgICAgICBnZXRJdGVtLCBcbiAgICAgICAgcGxhY2Vob2xkZXIsIFxuICAgICAgICBzY3JvbGxlck5hbWUsXG4gICAgICAgIHNjcm9sbGVySUQsXG4gICAgICAgIC8vIG9iamVjdHNcbiAgICAgICAgZnVuY3Rpb25zLFxuICAgICAgICBzdHlsZXMsXG4gICAgICAgIHRyaWdnZXJsaW5lT2Zmc2V0LFxuXG4gICAgfSlcblxuICAgIC8vIGNyZWF0ZSBjb250ZXh0XG4gICAgY29uc3Qgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzID0gdXNlQ29udGV4dChWaWV3cG9ydEludGVycnVwdClcbiAgICBjb25zdCB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYgPSB1c2VSZWYobnVsbClcbiAgICB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYuY3VycmVudCA9IHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcyAvLyBmb3IgY2xvc3VyZXNcblxuICAgIGNvbnN0IHsgdmlld3BvcnREaW1lbnNpb25zIH0gPSB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNcbiAgICBjb25zdCB7IGhlaWdodDp2aWV3cG9ydGhlaWdodCx3aWR0aDp2aWV3cG9ydHdpZHRoIH0gPSB2aWV3cG9ydERpbWVuc2lvbnNcblxuICAgIGNvbnN0IFtjcmFkbGVTdGF0ZSwgc2V0Q3JhZGxlU3RhdGVdID0gdXNlU3RhdGUoJ3NldHVwJylcblxuICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZyBDcmFkbGUgd2l0aCBzdGF0ZScsY3JhZGxlU3RhdGUpXG5cbiAgICBjb25zdCBjcmFkbGVTdGF0ZVJlZiA9IHVzZVJlZihudWxsKSAvLyBhY2Nlc3MgYnkgY2xvc3VyZXNcbiAgICBjcmFkbGVTdGF0ZVJlZi5jdXJyZW50ID0gY3JhZGxlU3RhdGU7XG5cbiAgICAvLyBjb250cm9sc1xuICAgIGNvbnN0IGlzTW91bnRlZFJlZiA9IHVzZVJlZih0cnVlKVxuICAgIGNvbnN0IG5vcm1hbGl6ZVRpbWVyUmVmID0gdXNlUmVmKG51bGwpXG5cbiAgICAvLyBjcmFkbGUgc2NhZmZvbGQgZWxlbWVudHNcbiAgICBjb25zdCBoZWFkQ3JhZGxlRWxlbWVudFJlZiA9IHVzZVJlZihudWxsKVxuICAgIGNvbnN0IHRhaWxDcmFkbGVFbGVtZW50UmVmID0gdXNlUmVmKG51bGwpXG4gICAgY29uc3QgYXhpc0NyYWRsZUVsZW1lbnRSZWYgPSB1c2VSZWYobnVsbClcbiAgICBjb25zdCBoZWFkVHJpZ2dlcmxpbmVDcmFkbGVFbGVtZW50UmVmID0gdXNlUmVmKG51bGwpXG4gICAgY29uc3QgdGFpbFRyaWdnZXJsaW5lQ3JhZGxlRWxlbWVudFJlZiA9IHVzZVJlZihudWxsKVxuICAgIGNvbnN0IGNyYWRsZUVsZW1lbnRzUmVmID0gdXNlUmVmKFxuICAgICAgICB7XG4gICAgICAgICAgICBoZWFkUmVmOmhlYWRDcmFkbGVFbGVtZW50UmVmLCBcbiAgICAgICAgICAgIHRhaWxSZWY6dGFpbENyYWRsZUVsZW1lbnRSZWYsIFxuICAgICAgICAgICAgYXhpc1JlZjpheGlzQ3JhZGxlRWxlbWVudFJlZixcbiAgICAgICAgICAgIGhlYWRUcmlnZ2VybGluZVJlZjpoZWFkVHJpZ2dlcmxpbmVDcmFkbGVFbGVtZW50UmVmLFxuICAgICAgICAgICAgdGFpbFRyaWdnZXJsaW5lUmVmOnRhaWxUcmlnZ2VybGluZUNyYWRsZUVsZW1lbnRSZWZcbiAgICAgICAgfVxuICAgIClcblxuICAgIC8vIGNvbmZpZ3VyYXRpb24gY2FsY3VsYXRpb25zXG4gICAgY29uc3QgY3Jvc3Njb3VudCA9IHVzZU1lbW8oKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHZpZXdwb3J0c2l6ZSA9IChvcmllbnRhdGlvbiA9PSAnaG9yaXpvbnRhbCcpP3ZpZXdwb3J0aGVpZ2h0OnZpZXdwb3J0d2lkdGhcbiAgICAgICAgY29uc3QgY3Jvc3NMZW5ndGggPSAob3JpZW50YXRpb24gPT0gJ2hvcml6b250YWwnKT9jZWxsSGVpZ2h0OmNlbGxXaWR0aFxuXG4gICAgICAgIGNvbnN0IHZpZXdwb3J0bGVuZ3RoZm9yY2FsYyA9IHZpZXdwb3J0c2l6ZSAtIChwYWRkaW5nICogMikgKyBnYXAgLy8gbGVuZ3RoIG9mIHZpZXdwb3J0XG4gICAgICAgIGxldCB0aWxlbGVuZ3RoZm9yY2FsYyA9IGNyb3NzTGVuZ3RoICsgZ2FwXG4gICAgICAgIHRpbGVsZW5ndGhmb3JjYWxjID0gTWF0aC5taW4odGlsZWxlbmd0aGZvcmNhbGMsdmlld3BvcnRsZW5ndGhmb3JjYWxjKSAvLyByZXN1bHQgY2Fubm90IGJlIGxlc3MgdGhhbiAxXG5cbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3Iodmlld3BvcnRsZW5ndGhmb3JjYWxjL3RpbGVsZW5ndGhmb3JjYWxjKVxuXG4gICAgfSxbXG4gICAgICAgIG9yaWVudGF0aW9uLCBcbiAgICAgICAgZ2FwLCBcbiAgICAgICAgcGFkZGluZywgXG4gICAgICAgIGNlbGxXaWR0aCwgXG4gICAgICAgIGNlbGxIZWlnaHQsIFxuICAgICAgICB2aWV3cG9ydGhlaWdodCwgXG4gICAgICAgIHZpZXdwb3J0d2lkdGgsXG4gICAgXSlcblxuICAgIGNvbnN0IFtcbiAgICAgICAgY3JhZGxlUm93Y291bnQsIFxuICAgICAgICB2aWV3cG9ydFJvd2NvdW50LCBcbiAgICAgICAgbGlzdFJvd2NvdW50LFxuICAgICAgICBydW53YXlSb3djb3VudCxcbiAgICBdID0gdXNlTWVtbygoKT0+IHtcblxuICAgICAgICBsZXQgdmlld3BvcnRMZW5ndGgsIGNlbGxMZW5ndGhcbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIHZpZXdwb3J0TGVuZ3RoID0gdmlld3BvcnRoZWlnaHRcbiAgICAgICAgICAgIGNlbGxMZW5ndGggPSBjZWxsSGVpZ2h0XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2aWV3cG9ydExlbmd0aCA9IHZpZXdwb3J0d2lkdGhcbiAgICAgICAgICAgIGNlbGxMZW5ndGggPSBjZWxsV2lkdGhcbiAgICAgICAgfVxuXG4gICAgICAgIGNlbGxMZW5ndGggKz0gZ2FwXG5cbiAgICAgICAgY29uc3Qgdmlld3BvcnRSb3djb3VudCA9IE1hdGguY2VpbCh2aWV3cG9ydExlbmd0aC9jZWxsTGVuZ3RoKVxuXG4gICAgICAgIGNvbnN0IGxpc3RSb3djb3VudCA9IE1hdGguY2VpbChsaXN0c2l6ZS9jcm9zc2NvdW50KVxuXG4gICAgICAgIGNvbnN0IGNhbGN1bGF0ZWRDcmFkbGVSb3djb3VudCA9IHZpZXdwb3J0Um93Y291bnQgKyAocnVud2F5Um93Y291bnRTcGVjICogMilcblxuICAgICAgICBsZXQgY3JhZGxlUm93Y291bnQgPSBNYXRoLm1pbihsaXN0Um93Y291bnQsIGNhbGN1bGF0ZWRDcmFkbGVSb3djb3VudClcblxuICAgICAgICBsZXQgcnVud2F5Um93Y291bnRcbiAgICAgICAgaWYgKGNhbGN1bGF0ZWRDcmFkbGVSb3djb3VudCA+PSBjcmFkbGVSb3djb3VudCkge1xuICAgICAgICAgICAgcnVud2F5Um93Y291bnQgPSBydW53YXlSb3djb3VudFNwZWNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSAoY3JhZGxlUm93Y291bnQgLSBjYWxjdWxhdGVkQ3JhZGxlUm93Y291bnQpXG4gICAgICAgICAgICBydW53YXlSb3djb3VudCAtPSBNYXRoLmZsb29yKGRpZmYvMilcbiAgICAgICAgICAgIHJ1bndheVJvd2NvdW50ID0gTWF0aC5tYXgoMCxydW53YXlSb3djb3VudClcbiAgICAgICAgfVxuICAgICAgICBsZXQgaXRlbWNvdW50ID0gY3JhZGxlUm93Y291bnQgKiBjcm9zc2NvdW50XG4gICAgICAgIGlmIChpdGVtY291bnQgPiBsaXN0c2l6ZSkge1xuICAgICAgICAgICAgaXRlbWNvdW50ID0gbGlzdHNpemVcbiAgICAgICAgICAgIGNyYWRsZVJvd2NvdW50ID0gTWF0aC5jZWlsKGl0ZW1jb3VudC9jcm9zc2NvdW50KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGNyYWRsZVJvd2NvdW50LCBcbiAgICAgICAgICAgIHZpZXdwb3J0Um93Y291bnQsIFxuICAgICAgICAgICAgbGlzdFJvd2NvdW50LFxuICAgICAgICAgICAgcnVud2F5Um93Y291bnQsXG4gICAgICAgIF1cblxuICAgIH0sW1xuICAgICAgICBvcmllbnRhdGlvbiwgXG4gICAgICAgIGdhcCwgXG4gICAgICAgIC8vIHBhZGRpbmcsXG4gICAgICAgIGNlbGxXaWR0aCwgXG4gICAgICAgIGNlbGxIZWlnaHQsIFxuICAgICAgICB2aWV3cG9ydGhlaWdodCwgXG4gICAgICAgIHZpZXdwb3J0d2lkdGgsXG5cbiAgICAgICAgbGlzdHNpemUsXG4gICAgICAgIHJ1bndheVJvd2NvdW50U3BlYyxcbiAgICAgICAgY3Jvc3Njb3VudCxcbiAgICBdKVxuXG4gICAgLy8gYnVuZGxlIGNvbmZpZ3VyYXRpb24gcHJvcGVydGllc1xuICAgIGNvbnN0IGNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZiA9IHVzZVJlZihudWxsKVxuICAgIGNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZi5jdXJyZW50ID0ge1xuICAgICAgICBjcm9zc2NvdW50LFxuICAgICAgICBjcmFkbGVSb3djb3VudCxcbiAgICAgICAgdmlld3BvcnRSb3djb3VudCxcbiAgICAgICAgbGlzdFJvd2NvdW50LFxuICAgICAgICBjcmFkbGVTdGF0ZVJlZixcbiAgICAgICAgc2V0Q3JhZGxlU3RhdGUsXG4gICAgICAgIGlzTW91bnRlZFJlZixcbiAgICAgICAgY3JhZGxlRWxlbWVudHNSZWYsXG4gICAgICAgIHJ1bndheVJvd2NvdW50LFxuICAgIH1cblxuICAgIC8vIHV0aWxpdHkgdG8gcmVnaXN0ZXIgb3IgdW5yZWdpc3RlciBjcmFkbGUgaXRlbSBlbGVtZW50c1xuICAgIGNvbnN0IHNldEl0ZW1FbGVtZW50RGF0YSA9IHVzZUNhbGxiYWNrKChpdGVtRWxlbWVudERhdGEsIHJlcG9ydFR5cGUpID0+IHtcblxuICAgICAgICBjb25zdCBbaW5kZXgsIHNoZWxscmVmXSA9IGl0ZW1FbGVtZW50RGF0YVxuXG4gICAgICAgIGlmIChyZXBvcnRUeXBlID09ICdyZWdpc3RlcicpIHtcblxuICAgICAgICAgICAgY29udGVudEhhbmRsZXIuaXRlbUVsZW1lbnRzLnNldChpbmRleCxzaGVsbHJlZilcblxuICAgICAgICB9IGVsc2UgaWYgKHJlcG9ydFR5cGUgPT0gJ3VucmVnaXN0ZXInKSB7XG5cbiAgICAgICAgICAgIGNvbnRlbnRIYW5kbGVyLml0ZW1FbGVtZW50cy5kZWxldGUoaW5kZXgpXG5cbiAgICAgICAgfVxuXG4gICAgfSxbXSlcblxuICAgIGNvbnN0IGludGVybmFsQ2FsbGJhY2tzUmVmID0gdXNlUmVmKHtcblxuICAgICAgICBzZXRFbGVtZW50RGF0YTpzZXRJdGVtRWxlbWVudERhdGFcblxuICAgIH0pXG5cbiAgICAvLyBob3N0IGNhbGxiYWNrc1xuICAgIGNvbnN0IHJlZmVyZW5jZUluZGV4Q2FsbGJhY2tSZWYgPSB1c2VSZWYoZnVuY3Rpb25zPy5yZWZlcmVuY2VJbmRleENhbGxiYWNrKVxuXG4gICAgY29uc3QgZXh0ZXJuYWxDYWxsYmFja3NSZWYgPSB1c2VSZWYoe3JlZmVyZW5jZUluZGV4Q2FsbGJhY2tSZWZ9KVxuXG4gICAgLy8gY3JhZGxlIHBhcmFtZXRlcnMgbWFzdGVyIGJ1bmRsZVxuICAgIGNvbnN0IGhhbmRsZXJzUmVmID0gdXNlUmVmKG51bGwpIC8vIHBsYWNlaG9sZGVyIGluIGNyYWRsZVBhcmFtdGVyczsgbWFrZSBhdmFpbGFibGUgaW5kaXZpZHVhbCBoYW5kbGVyc1xuICAgIGNvbnN0IGNyYWRsZVBhcmFtZXRlcnMgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgaGFuZGxlcnNSZWYsXG4gICAgICAgIHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZixcbiAgICAgICAgY3JhZGxlSW5oZXJpdGVkUHJvcGVydGllc1JlZiwgXG4gICAgICAgIGNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZiwgXG4gICAgICAgIGludGVybmFsQ2FsbGJhY2tzUmVmLFxuICAgICAgICBleHRlcm5hbENhbGxiYWNrc1JlZixcbiAgICB9KVxuXG4gICAgY29uc3Qgc2V0T2ZIYW5kbGVyc1JlZiA9IHVzZVJlZihudWxsKVxuXG4gICAgaWYgKCFzZXRPZkhhbmRsZXJzUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgc2V0T2ZIYW5kbGVyc1JlZi5jdXJyZW50ID0gZ2V0Q3JhZGxlSGFuZGxlcnMoY3JhZGxlUGFyYW1ldGVycylcbiAgICB9XG4gICAgLy8gbWFrZSBoYW5kbGVycyBkaXJlY3RseSBhdmFpbGFibGUgdG8gY3JhZGxlIGNvZGVcbiAgICBjb25zdCB7XG4gICAgICAgIHBvcnRhbEhhbmRsZXIsXG4gICAgICAgIGludGVycnVwdEhhbmRsZXIsXG4gICAgICAgIHNjcm9sbEhhbmRsZXIsXG4gICAgICAgIHN0YXRlSGFuZGxlcixcbiAgICAgICAgY29udGVudEhhbmRsZXIsXG4gICAgICAgIHNjYWZmb2xkSGFuZGxlcixcbiAgICAgICAgc2VydmljZUhhbmRsZXIsXG4gICAgICAgIHN0eWxlc0hhbmRsZXIsXG4gICAgfSA9IHNldE9mSGFuZGxlcnNSZWYuY3VycmVudFxuXG4gICAgLy8gdG8gaW5zdGFudGlhdGUgaGFuZGxlcnNSZWYgZm9yIGNyYWRsZVBhcmFtZXRlcnNcbiAgICBjb25zdCBoYW5kbGVyT2JqZWN0UmVmID0gdXNlUmVmKHtcbiAgICAgICAgcG9ydGFsczpwb3J0YWxIYW5kbGVyLFxuICAgICAgICBpbnRlcnJ1cHRzOmludGVycnVwdEhhbmRsZXIsXG4gICAgICAgIHNjcm9sbDpzY3JvbGxIYW5kbGVyLFxuICAgICAgICBzdGF0ZTpzdGF0ZUhhbmRsZXIsXG4gICAgICAgIGNvbnRlbnQ6Y29udGVudEhhbmRsZXIsIFxuICAgICAgICBzY2FmZm9sZDpzY2FmZm9sZEhhbmRsZXIsIFxuICAgICAgICBzZXJ2aWNlOnNlcnZpY2VIYW5kbGVyLFxuICAgICAgICBzdHlsZXM6c3R5bGVzSGFuZGxlcixcbiAgICB9KTtcblxuICAgIGhhbmRsZXJzUmVmLmN1cnJlbnQgPSBoYW5kbGVyT2JqZWN0UmVmLmN1cnJlbnQgLy8gYmFjay1maWxsIGNyYWRsZVBhcmFtZXRlcnMgcHJvcGVydHlcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT1bIElOSVRJQUxJWkFUSU9OIGVmZmVjdHMgXT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIC8vIHRoaXMgaXMgYW4gaW1tZWRpYXRlIHJlc3BvbnNlIHRvIHJlcGFyZW50aW5nLiBSZXBhcmVudGluZyByZXNldHMgc2Nyb2xsIHBvc2l0aW9uc1xuICAgIC8vIGZvciBuZXN0ZWQgaW5maW5pdGVncmlkc2Nyb2xsZXJzLlxuICAgIC8vIHRoZSBjb2RlIHJlc3RvcmVzIHNjcm9sbCBhcyBzb29uIGFzIGNyYWRsZSBpcyBpbnZva2VkIGFmdGVyIHJlcGFyZW50aW5nXG4gICAgaWYgKHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcy5wb3J0YWw/LmlzUmVwYXJlbnRpbmcpIHsgXG5cbiAgICAgICAgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzLnBvcnRhbC5pc1JlcGFyZW50aW5nID0gZmFsc2VcblxuICAgICAgICBjb25zdCBjcmFkbGVSZWZlcmVuY2VEYXRhID0gc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGFcbiAgICAgICAgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzLmVsZW1lbnRyZWYuY3VycmVudFtcbiAgICAgICAgICAgIGNyYWRsZVJlZmVyZW5jZURhdGEuYmxvY2tTY3JvbGxQcm9wZXJ0eV0gPVxuICAgICAgICAgICAgTWF0aC5tYXgoMCxjcmFkbGVSZWZlcmVuY2VEYXRhLmJsb2NrU2Nyb2xsUG9zKVxuXG4gICAgfVxuXG4gICAgLy8gY2xlYXIgbW91bnRlZCBmbGFnIG9uIHVubW91bnRcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCk9PntcblxuICAgICAgICAvLyB1bm1vdW50XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlXG4gICAgICAgIH1cblxuICAgIH0sW10pXG5cbiAgICAvL2luaXRpYWxpemUgaG9zdCBmdW5jdGlvbnMgcHJvcGVydGllc1xuICAgIHVzZUVmZmVjdCgoKT0+e1xuXG4gICAgICAgIHJlZmVyZW5jZUluZGV4Q2FsbGJhY2tSZWYuY3VycmVudCA9IGZ1bmN0aW9ucz8ucmVmZXJlbmNlSW5kZXhDYWxsYmFja1xuXG4gICAgICAgIGlmICghZnVuY3Rpb25zLmdldENhbGxiYWNrcykgcmV0dXJuXG5cbiAgICAgICAgY29uc3Qge3Njcm9sbFRvSXRlbSwgZ2V0VmlzaWJsZUxpc3QsIGdldENvbnRlbnRMaXN0LCByZWxvYWR9ID0gc2VydmljZUhhbmRsZXJcblxuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSB7XG4gICAgICAgICAgICBzY3JvbGxUb0l0ZW0sXG4gICAgICAgICAgICBnZXRWaXNpYmxlTGlzdCxcbiAgICAgICAgICAgIGdldENvbnRlbnRMaXN0LFxuICAgICAgICAgICAgcmVsb2FkLFxuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmZyZWV6ZShjYWxsYmFja3MpXG5cbiAgICAgICAgZnVuY3Rpb25zLmdldENhbGxiYWNrcyhjYWxsYmFja3MpXG5cbiAgICB9LFtdKVxuXG4gICAgLy8gaW5pdGlhbGl6ZSB3aW5kb3cgc2Nyb2xsIGxpc3RlbmVyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3Qgdmlld3BvcnRkYXRhID0gdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnRcbiAgICAgICAgdmlld3BvcnRkYXRhLmVsZW1lbnRyZWYuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLHNjcm9sbEhhbmRsZXIub25TY3JvbGwpXG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcblxuICAgICAgICAgICAgdmlld3BvcnRkYXRhLmVsZW1lbnRyZWYuY3VycmVudCAmJiB2aWV3cG9ydGRhdGEuZWxlbWVudHJlZi5jdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsc2Nyb2xsSGFuZGxlci5vblNjcm9sbClcblxuICAgICAgICB9XG5cbiAgICB9LFtdKVxuXG4gICAgLy8gb2JzZXJ2ZXIgc3VwcG9ydFxuXG4gICAgLypcbiAgICAgICAgVGhlcmUgYXJlIHR3byBpbnRlcmVjdGlvbiBvYnNlcnZlcnMsIG9uZSBmb3IgdGhlIGNyYWRsZSwgYW5kIGFub3RoZXIgZm9yIHRyaWdnZXJsaW5lczsgXG4gICAgICAgICAgICBib3RoIGFnYWluc3QgdGhlIHZpZXdwb3J0LlxuICAgICAgICBUaGVyZSBpcyBhbHNvIGEgcmVzaXplIG9ic2VydmVyIGZvciB0aGUgY3JhZGxlIHdpbmdzLCB0byByZXNwb25kIHRvIHNpemUgY2hhbmdlcyBvZiBcbiAgICAgICAgICAgIHZhcmlhYmxlIGNlbGxzLlxuICAgICovICAgIFxuXG4gICAgLy8gc2V0IHVwIGNyYWRsZSByZXNpemVvYnNlcnZlclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG5cbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBpbnRlcnJ1cHRIYW5kbGVyLmNyYWRsZVJlc2l6ZS5jcmVhdGVPYnNlcnZlcigpXG4gICAgICAgIGNvbnN0IGNyYWRsZUVsZW1lbnRzID0gc2NhZmZvbGRIYW5kbGVyLmVsZW1lbnRzXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoY3JhZGxlRWxlbWVudHMuaGVhZFJlZi5jdXJyZW50KVxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGNyYWRsZUVsZW1lbnRzLnRhaWxSZWYuY3VycmVudClcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuXG4gICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KClcblxuICAgICAgICB9XG5cbiAgICB9LFtdKVxuXG4gICAgLy8gaW50ZXJzZWN0aW9uIG9ic2VydmVyIGZvciBjcmFkbGUgYm9keVxuXG4gICAgLy8gdGhpcyBzZXRzIHVwIGFuIEludGVyc2VjdGlvbk9ic2VydmVyIG9mIHRoZSBjcmFkbGUgYWdhaW5zdCB0aGUgdmlld3BvcnQuIFdoZW4gdGhlXG4gICAgLy8gY3JhZGxlIGdvZXMgb3V0IG9mIHRoZSBvYnNlcnZlciBzY29wZSwgdGhlIFwicmVwb3NpdGlvbmluZ1JlbmRlclwiIGNyYWRsZSBzdGF0ZSBpcyB0cmlnZ2VyZC5cbiAgICB1c2VFZmZlY3QoKCk9PntcblxuICAgICAgICBjb25zdCBvYnNlcnZlciA9IGludGVycnVwdEhhbmRsZXIuY3JhZGxlSW50ZXJzZWN0LmNyZWF0ZU9ic2VydmVyKClcbiAgICAgICAgY29uc3QgY3JhZGxlRWxlbWVudHMgPSBzY2FmZm9sZEhhbmRsZXIuZWxlbWVudHNcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShjcmFkbGVFbGVtZW50cy5oZWFkUmVmLmN1cnJlbnQpXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoY3JhZGxlRWxlbWVudHMudGFpbFJlZi5jdXJyZW50KVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG5cbiAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKVxuXG4gICAgICAgIH1cblxuICAgIH0sW10pXG5cbiAgICAvLyBpbnRlcnNlY3Rpb24gb2JzZXJ2ZXIgZm9yIGNyYWRsZSBheGlzIHRyaWdnZXJsaW5lc1xuICAgIHVzZUVmZmVjdCgoKT0+e1xuXG4gICAgICAgIC8vIHRoZSB0cmlnZ2VybGluZXMgYXJlIG9ic2VydmVkIHdpdGggJ3Jlc2V0dHJpZ2dlcmxpbmVzJyBzdGF0ZSAtLSBzZWUgc3RhdGUgbWFuYWdlbWVudCBiZWxvd1xuICAgICAgICBjb25zdCBvYnNlcnZlciA9IGludGVycnVwdEhhbmRsZXIuYXhpc1RyaWdnZXJsaW5lc0ludGVyc2VjdC5jcmVhdGVPYnNlcnZlcigpXG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcblxuICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpXG5cbiAgICAgICAgfVxuXG4gICAgfSxbXSlcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PVsgUkVDT05GSUdVUkFUSU9OIGVmZmVjdHMgXT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIC8vIHRyaWdnZXIgcmVzaXppbmcgYmFzZWQgb24gdmlld3BvcnQgc3RhdGVcbiAgICB1c2VFZmZlY3QoKCk9PntcblxuICAgICAgICBpZiAoY3JhZGxlU3RhdGVSZWYuY3VycmVudCA9PSAnc2V0dXAnKSByZXR1cm5cblxuICAgICAgICBpZiAodmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzLmlzUmVzaXppbmcpIHtcblxuICAgICAgICAgICAgY29uc3QgeyBzaWduYWxzIH0gPSBpbnRlcnJ1cHRIYW5kbGVyXG4gICAgICAgICAgICAvLyBzaWduYWxzLnBhdXNlQ2VsbE9ic2VydmVyID0gdHJ1ZVxuICAgICAgICAgICAgc2lnbmFscy5wYXVzZUNyYWRsZUludGVyc2VjdGlvbk9ic2VydmVyID0gdHJ1ZVxuICAgICAgICAgICAgc2lnbmFscy5wYXVzZUNyYWRsZVJlc2l6ZU9ic2VydmVyID0gdHJ1ZVxuICAgICAgICAgICAgc2lnbmFscy5wYXVzZVNjcm9sbGluZ0VmZmVjdHMgPSB0cnVlXG4gICAgICAgICAgICBzZXRDcmFkbGVTdGF0ZSgncmVzaXppbmcnKVxuXG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21wbGV0ZSByZXNpemluZyBtb2RlXG4gICAgICAgIGlmICghdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzLmlzUmVzaXppbmcgJiYgKGNyYWRsZVN0YXRlUmVmLmN1cnJlbnQgPT0gJ3Jlc2l6aW5nJykpIHtcblxuICAgICAgICAgICAgc2V0Q3JhZGxlU3RhdGUoJ3Jlc2l6ZWQnKVxuXG4gICAgICAgIH1cblxuICAgIH0sW3ZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcy5pc1Jlc2l6aW5nXSlcblxuICAgIC8vIHJlbG9hZCBmb3IgY2hhbmdlZCBwYXJhbWV0ZXJzXG4gICAgdXNlRWZmZWN0KCgpPT57XG5cbiAgICAgICAgaWYgKGNyYWRsZVN0YXRlUmVmLmN1cnJlbnQgPT0gJ3NldHVwJykgcmV0dXJuXG5cbiAgICAgICAgY29uc3Qgc2lnbmFscyA9IGludGVycnVwdEhhbmRsZXIuc2lnbmFsc1xuXG4gICAgICAgIC8vIHNpZ25hbHMucGF1c2VDZWxsT2JzZXJ2ZXIgPSB0cnVlXG4gICAgICAgIHNpZ25hbHMucGF1c2VUcmlnZ2VybGluZXNPYnNlcnZlciA9IHRydWVcbiAgICAgICAgc2lnbmFscy5wYXVzZVNjcm9sbGluZ0VmZmVjdHMgPSB0cnVlXG5cbiAgICAgICAgc2V0Q3JhZGxlU3RhdGUoJ3JlbG9hZCcpXG5cbiAgICB9LFtcbiAgICAgICAgbGlzdHNpemUsXG4gICAgICAgIGNlbGxIZWlnaHQsXG4gICAgICAgIGNlbGxXaWR0aCxcbiAgICAgICAgZ2FwLFxuICAgICAgICBwYWRkaW5nLFxuICAgIF0pXG5cbiAgICAvLyB0cmlnZ2VyIHBpdm90ICpvbmx5KiBvbiBjaGFuZ2UgaW4gb3JpZW50YXRpb25cbiAgICAvLyBUT0RPOiByZXZpZXcgdGhpcyBjb2RlXG4gICAgdXNlRWZmZWN0KCgpPT4ge1xuXG4gICAgICAgIHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLmJsb2NrU2Nyb2xsUHJvcGVydHkgPSBcbiAgICAgICAgICAgIChvcmllbnRhdGlvbiA9PSBcInZlcnRpY2FsXCIpP1wic2Nyb2xsVG9wXCI6XCJzY3JvbGxMZWZ0XCJcblxuICAgICAgICBpZiAoY3JhZGxlU3RhdGVSZWYuY3VycmVudCA9PSAnc2V0dXAnKSByZXR1cm5cblxuICAgICAgICBjb25zdCB7IFxuICAgICAgICAgICAgY2VsbFdpZHRoLFxuICAgICAgICAgICAgY2VsbEhlaWdodCxcbiAgICAgICAgICAgIGdhcCxcbiAgICAgICAgfSA9IGNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXNSZWYuY3VycmVudFxuXG4gICAgICAgIC8vIGdldCBwcmV2aW91cyByYXRpb1xuICAgICAgICBjb25zdCBwcmV2aW91c0NlbGxQaXhlbExlbmd0aCA9IFxuICAgICAgICAgICAgKChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKT9cbiAgICAgICAgICAgICAgICBjZWxsV2lkdGg6XG4gICAgICAgICAgICAgICAgY2VsbEhlaWdodClcbiAgICAgICAgICAgICsgZ2FwXG5cbiAgICAgICAgY29uc3QgcHJldmlvdXNBeGlzT2Zmc2V0ID0gc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEudGFyZ2V0QXhpc1BpeGVsT2Zmc2V0XG5cbiAgICAgICAgY29uc3QgcHJldmlvdXNyYXRpbyA9IHByZXZpb3VzQXhpc09mZnNldC9wcmV2aW91c0NlbGxQaXhlbExlbmd0aFxuXG4gICAgICAgIGNvbnN0IHBpdm90Q2VsbFBpeGVsTGVuZ3RoID0gXG4gICAgICAgICAgICAoKG9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpP1xuICAgICAgICAgICAgICAgIGNlbGxIZWlnaHQ6XG4gICAgICAgICAgICAgICAgY2VsbFdpZHRoKVxuICAgICAgICAgICAgKyBnYXBcblxuICAgICAgICBjb25zdCBwaXZvdEF4aXNPZmZzZXQgPSBwcmV2aW91c3JhdGlvICogcGl2b3RDZWxsUGl4ZWxMZW5ndGhcbiAgICAgICAgXG4gICAgICAgIHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLnRhcmdldEF4aXNQaXhlbE9mZnNldCA9IE1hdGgucm91bmQocGl2b3RBeGlzT2Zmc2V0KVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCdwaXZvdCBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YScsXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHt9LHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhKSlcblxuICAgICAgICBjb25zdCB7IHNpZ25hbHMgfSA9IGludGVycnVwdEhhbmRsZXJcblxuICAgICAgICBzaWduYWxzLnBhdXNlVHJpZ2dlcmxpbmVzT2JzZXJ2ZXIgPSB0cnVlXG4gICAgICAgIHNpZ25hbHMucGF1c2VTY3JvbGxpbmdFZmZlY3RzID0gdHJ1ZVxuXG4gICAgICAgIGNvbnN0IGNyYWRsZUNvbnRlbnQgPSBjb250ZW50SGFuZGxlci5jb250ZW50XG4gICAgICAgIGNyYWRsZUNvbnRlbnQuaGVhZE1vZGVsQ29tcG9uZW50cyA9IFtdXG4gICAgICAgIGNyYWRsZUNvbnRlbnQudGFpbE1vZGVsQ29tcG9uZW50cyA9IFtdXG4gICAgICAgIGNyYWRsZUNvbnRlbnQuaGVhZFZpZXdDb21wb25lbnRzID0gW11cbiAgICAgICAgY3JhZGxlQ29udGVudC50YWlsVmlld0NvbXBvbmVudHMgPSBbXVxuXG4gICAgICAgIHNldENyYWRsZVN0YXRlKCdwaXZvdCcpXG5cbiAgICB9LFtvcmllbnRhdGlvbl0pXG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT1bIFNUWUxFUyBdPT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAvLyBzdHlsZXMgZm9yIHNjYWZmb2xkXG4gICAgY29uc3QgW1xuICAgICAgICBjcmFkbGVIZWFkU3R5bGUsIFxuICAgICAgICBjcmFkbGVUYWlsU3R5bGUsIFxuICAgICAgICBjcmFkbGVBeGlzU3R5bGUsIFxuICAgICAgICB0cmlnZ2VybGluZUhlYWRTdHlsZSwgXG4gICAgICAgIHRyaWdnZXJsaW5lVGFpbFN0eWxlLFxuICAgICAgICBjcmFkbGVEaXZpZGVyU3R5bGVcbiAgICBdID0gdXNlTWVtbygoKT0+IHtcblxuICAgICAgICByZXR1cm4gc3R5bGVzSGFuZGxlci5zZXRDcmFkbGVTdHlsZXMoe1xuXG4gICAgICAgICAgICBvcmllbnRhdGlvbiwgXG4gICAgICAgICAgICBjZWxsSGVpZ2h0LCBcbiAgICAgICAgICAgIGNlbGxXaWR0aCwgXG4gICAgICAgICAgICBnYXAsXG4gICAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgICAgdmlld3BvcnRoZWlnaHQsIFxuICAgICAgICAgICAgdmlld3BvcnR3aWR0aCxcbiAgICAgICAgICAgIGNyb3NzY291bnQsIFxuICAgICAgICAgICAgdXNlcnN0eWxlczpzdHlsZXMsXG4gICAgICAgICAgICB0cmlnZ2VybGluZU9mZnNldCxcblxuICAgICAgICB9KVxuXG4gICAgfSxbXG5cbiAgICAgICAgb3JpZW50YXRpb24sXG4gICAgICAgIGNlbGxIZWlnaHQsXG4gICAgICAgIGNlbGxXaWR0aCxcbiAgICAgICAgZ2FwLFxuICAgICAgICBwYWRkaW5nLFxuICAgICAgICB2aWV3cG9ydGhlaWdodCxcbiAgICAgICAgdmlld3BvcnR3aWR0aCxcbiAgICAgICAgY3Jvc3Njb3VudCxcbiAgICAgICAgc3R5bGVzLFxuICAgICAgICB0cmlnZ2VybGluZU9mZnNldCxcblxuICAgICAgXSlcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PVsgU1RBVEUgbWFuYWdlbWVudCBdPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIC8vIGRhdGEgZm9yIHN0YXRlIHByb2Nlc3NpbmdcbiAgICBjb25zdCBjYWxsaW5nQ3JhZGxlU3RhdGUgPSB1c2VSZWYoY3JhZGxlU3RhdGVSZWYuY3VycmVudClcbiAgICBjb25zdCBoZWFkbGF5b3V0RGF0YVJlZiA9IHVzZVJlZihudWxsKVxuXG4gICAgLy8gdGhpcyBpcyB0aGUgY29yZSBzdGF0ZSBlbmdpbmVcbiAgICAvLyB1c2VMYXlvdXQgZm9yIHN1cHByZXNzaW5nIGZsYXNoZXNcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCk9PntcblxuICAgICAgICBjb25zdCB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXMgPSB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYuY3VycmVudFxuICAgICAgICBjb25zdCBjcmFkbGVDb250ZW50ID0gY29udGVudEhhbmRsZXIuY29udGVudFxuXG4gICAgICAgIHN3aXRjaCAoY3JhZGxlU3RhdGUpIHtcblxuICAgICAgICAgICAgLy8gcmVuZGVydXBkYXRlZGNvbnRlbnQgaXMgY2FsbGVkIGZyb20gdHJpZ2dlcmxpbmVpbnRlcnNlY3Rpb25vYnNlcnZlcmNhbGxiYWNrIChpbnRlcnJ1cHRIYW5kbGVyKSwgXG4gICAgICAgICAgICAvLyBhbmQgY2FsbGVkIGZyb20gb25BZnRlclNjcm9sbCAoc2Nyb2xsSGFuZGxlcilcbiAgICAgICAgICAgIC8vIGl0IGlzIHJlcXVpcmVkIHNldCBjb25maWd1cmF0aW9ucyBiZWZvcmUgJ3JlYWR5JyBUT0RPOiBzcGVjaWZ5IVxuICAgICAgICAgICAgY2FzZSAncmVuZGVydXBkYXRlZGNvbnRlbnQnOlxuXG4gICAgICAgICAgICAvLyByZXNldHRyaWdnZXJsaW5lcyBpcyBjYWxsZWQgYWZ0ZXIgc2V0Q3JhZGxlQ29udGVudCBjeWNsZSBpcyBjb21wbGV0ZVxuICAgICAgICAgICAgLy8gaXQgaXMgY2FsbGVkIHNwZWNpZmljYWxseSBmcm9tIHRoZSBub3JtYWxpemVzaWduYWxzIGRlZmF1bHQgcmVzcG9uc2VcbiAgICAgICAgICAgIGNhc2UgJ3Jlc2V0dHJpZ2dlcmxpbmVzJzoge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdHJpZ2dlcmxpbmVvYnNlcnZlciA9IGludGVycnVwdEhhbmRsZXIuYXhpc1RyaWdnZXJsaW5lc0ludGVyc2VjdC5vYnNlcnZlclxuICAgICAgICAgICAgICAgIGNvbnN0IGNyYWRsZUVsZW1lbnRzID0gc2NhZmZvbGRIYW5kbGVyLmVsZW1lbnRzXG5cbiAgICAgICAgICAgICAgICB0cmlnZ2VybGluZW9ic2VydmVyLm9ic2VydmUoY3JhZGxlRWxlbWVudHMuaGVhZFRyaWdnZXJsaW5lUmVmLmN1cnJlbnQpXG4gICAgICAgICAgICAgICAgdHJpZ2dlcmxpbmVvYnNlcnZlci5vYnNlcnZlKGNyYWRsZUVsZW1lbnRzLnRhaWxUcmlnZ2VybGluZVJlZi5jdXJyZW50KVxuXG4gICAgICAgICAgICAgICAgc2V0Q3JhZGxlU3RhdGUoJ3JlYWR5JylcbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS1bIHJlcG9zaXRpb24gd2hlbiByZXBvc2l0aW9uaW5nUmVxdWlyZWQgaXMgdHJ1ZSBdLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdzdGFydHJlcG9zaXRpb24nOiB7XG5cbiAgICAgICAgICAgICAgICAvLyBjb25zdCBjcmFkbGVvYnNlcnZlciA9IGludGVycnVwdEhhbmRsZXIuY3JhZGxlSW50ZXJzZWN0Lm9ic2VydmVyXG4gICAgICAgICAgICAgICAgLy8gY3JhZGxlb2JzZXJ2ZXIuZGlzY29ubmVjdCgpXG5cbiAgICAgICAgICAgICAgICBjb25zdCB0cmlnZ2VybGluZW9ic2VydmVyID0gaW50ZXJydXB0SGFuZGxlci5heGlzVHJpZ2dlcmxpbmVzSW50ZXJzZWN0Lm9ic2VydmVyXG4gICAgICAgICAgICAgICAgdHJpZ2dlcmxpbmVvYnNlcnZlci5kaXNjb25uZWN0KClcblxuICAgICAgICAgICAgICAgIC8vIGF2b2lkIHJlY3Vyc2l2ZSBjcmFkbGUgaW50ZXJzZWN0aW9uIGludGVycnVwdHNcbiAgICAgICAgICAgICAgICBpbnRlcnJ1cHRIYW5kbGVyLnNpZ25hbHMucGF1c2VDcmFkbGVJbnRlcnNlY3Rpb25PYnNlcnZlciA9IHRydWVcbiAgICAgICAgICAgICAgICBpbnRlcnJ1cHRIYW5kbGVyLnNpZ25hbHMucmVwb3NpdGlvbmluZ1JlcXVpcmVkID0gZmFsc2UgLy8gYmVjYXVzZSBub3cgdW5kZXJ3YXlcblxuICAgICAgICAgICAgICAgIHNldENyYWRsZVN0YXRlKCdyZXBvc2l0aW9uaW5nUmVuZGVyJylcbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgJ2ZpbmlzaHJlcG9zaXRpb24nOiB7XG5cbiAgICAgICAgICAgICAgICAvLyBjb25zdCBjcmFkbGVvYnNlcnZlciA9IGludGVycnVwdEhhbmRsZXIuY3JhZGxlSW50ZXJzZWN0Lm9ic2VydmVyXG4gICAgICAgICAgICAgICAgLy8gY29uc3QgdHJpZ2dlcmxpbmVvYnNlcnZlciA9IGludGVycnVwdEhhbmRsZXIuYXhpc1RyaWdnZXJsaW5lc0ludGVyc2VjdC5vYnNlcnZlclxuICAgICAgICAgICAgICAgIC8vIGNvbnN0IGNyYWRsZUVsZW1lbnRzID0gc2NhZmZvbGRIYW5kbGVyLmVsZW1lbnRzXG4gICAgICAgICAgICAgICAgLy8gY29uc3Qge1xuICAgICAgICAgICAgICAgIC8vICAgICBoZWFkUmVmLCBcbiAgICAgICAgICAgICAgICAvLyAgICAgdGFpbFJlZiwgXG4gICAgICAgICAgICAgICAgICAgIC8vIGhlYWRUcmlnZ2VybGluZVJlZiwgXG4gICAgICAgICAgICAgICAgICAgIC8vIHRhaWxUcmlnZ2VybGluZVJlZlxuICAgICAgICAgICAgICAgIC8vIH0gPSBjcmFkbGVFbGVtZW50c1xuICAgICAgICAgICAgICAgIC8vIGNyYWRsZW9ic2VydmVyLm9ic2VydmUoaGVhZFJlZi5jdXJyZW50KVxuICAgICAgICAgICAgICAgIC8vIGNyYWRsZW9ic2VydmVyLm9ic2VydmUodGFpbFJlZi5jdXJyZW50KVxuICAgICAgICAgICAgICAgIC8vIHRyaWdnZXJsaW5lb2JzZXJ2ZXIub2JzZXJ2ZShoZWFkVHJpZ2dlcmxpbmVSZWYuY3VycmVudClcbiAgICAgICAgICAgICAgICAvLyB0cmlnZ2VybGluZW9ic2VydmVyLm9ic2VydmUodGFpbFRyaWdnZXJsaW5lUmVmLmN1cnJlbnQpXG5cbiAgICAgICAgICAgICAgICAvLyBpbnRlcnJ1cHRIYW5kbGVyLnNpZ25hbHMucGF1c2VDcmFkbGVJbnRlcnNlY3Rpb25PYnNlcnZlciA9IGZhbHNlXG4gICAgICAgICAgICAgICAgLy8gc2Nyb2xsSGFuZGxlci51cGRhdGVSZWZlcmVuY2VEYXRhKClcbiAgICAgICAgICAgICAgICBzY3JvbGxIYW5kbGVyLnVwZGF0ZUJsb2NrU2Nyb2xsUG9zKClcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnPT0+IGluIGZpbmlzaHBvc2l0aW9uOnBhdXNlQ3JhZGxlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIsIHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhJyxcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJydXB0SGFuZGxlci5zaWduYWxzLnBhdXNlQ3JhZGxlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIsIE9iamVjdC5hc3NpZ24oe30sc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEpKVxuICAgICAgICAgICAgICAgIHNldENyYWRsZVN0YXRlKCdkb3JlcG9zaXRpb24nKVxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICB0aGUgZm9sbG93aW5nIDUgY3JhZGxlIHN0YXRlcyBhbGwgcmVzb2x2ZSB3aXRoXG4gICAgICAgICAgICAgICAgYSBjaGFpbiBzdGFydGluZyB3aXRoICdwcmVwYXJlcmVuZGVyJywgd2hpY2hcbiAgICAgICAgICAgICAgICBjYWxscyBzZXRDcmFkbGVDb250ZW50XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2FzZSAnc2V0dXAnOiBcbiAgICAgICAgICAgIGNhc2UgJ2RvcmVwb3NpdGlvbic6XG4gICAgICAgICAgICBjYXNlICdyZXNpemVkJzpcbiAgICAgICAgICAgIGNhc2UgJ3Bpdm90JzpcbiAgICAgICAgICAgIGNhc2UgJ3JlbG9hZCc6XG5cbiAgICAgICAgICAgICAgICBjYWxsaW5nQ3JhZGxlU3RhdGUuY3VycmVudCA9IGNyYWRsZVN0YXRlIC8vIG1lc3NhZ2UgZm9yIHNldENyYWRsZUNvbnRlbnRcbiAgICAgICAgICAgICAgICBzZXRDcmFkbGVTdGF0ZSgncHJlcGFyZWNvbnRlbnQnKSAvLyBjeWNsZSB0byBhbGxvdyBmb3IgY29uZmlnOyBlZy4gZm9yIHNldHVwXG5cbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICBjYXNlICdwcmVwYXJlY29udGVudCc6IFxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgY3JhZGxlQ29udGVudC5oZWFkTW9kZWxDb21wb25lbnRzID0gW11cbiAgICAgICAgICAgICAgICBjcmFkbGVDb250ZW50LnRhaWxNb2RlbENvbXBvbmVudHMgPSBbXVxuICAgICAgICAgICAgICAgIGNyYWRsZUNvbnRlbnQuaGVhZFZpZXdDb21wb25lbnRzID0gW11cbiAgICAgICAgICAgICAgICBjcmFkbGVDb250ZW50LnRhaWxWaWV3Q29tcG9uZW50cyA9IFtdXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyc1JlZi5jdXJyZW50LnBvcnRhbHMucmVzZXRTY3JvbGxlclBvcnRhbFJlcG9zaXRvcnkoKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnRlbnRIYW5kbGVyLnNldENyYWRsZUNvbnRlbnQoIGNhbGxpbmdDcmFkbGVTdGF0ZS5jdXJyZW50IClcblxuICAgICAgICAgICAgICAgIHNldENyYWRsZVN0YXRlKCdwcmVwYXJlcmVuZGVyJylcblxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgJ3ByZXBhcmVyZW5kZXInOiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjcmFkbGVFbGVtZW50cyA9IHNjYWZmb2xkSGFuZGxlci5lbGVtZW50c1xuICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZFRyaWdnZXJsaW5lUmVmLCBcbiAgICAgICAgICAgICAgICAgICAgdGFpbFRyaWdnZXJsaW5lUmVmXG4gICAgICAgICAgICAgICAgfSA9IGNyYWRsZUVsZW1lbnRzXG5cbiAgICAgICAgICAgICAgICBjb25zdCB0cmlnZ2VybGluZW9ic2VydmVyID0gaW50ZXJydXB0SGFuZGxlci5heGlzVHJpZ2dlcmxpbmVzSW50ZXJzZWN0Lm9ic2VydmVyXG4gICAgICAgICAgICAgICAgdHJpZ2dlcmxpbmVvYnNlcnZlci5vYnNlcnZlKGhlYWRUcmlnZ2VybGluZVJlZi5jdXJyZW50KVxuICAgICAgICAgICAgICAgIHRyaWdnZXJsaW5lb2JzZXJ2ZXIub2JzZXJ2ZSh0YWlsVHJpZ2dlcmxpbmVSZWYuY3VycmVudClcblxuICAgICAgICAgICAgICAgIGNvbnN0IGNyYWRsZUNvbnRlbnQgPSBjb250ZW50SGFuZGxlci5jb250ZW50XG4gICAgICAgICAgICAgICAgY3JhZGxlQ29udGVudC5oZWFkVmlld0NvbXBvbmVudHMgPSBjcmFkbGVDb250ZW50LmhlYWRNb2RlbENvbXBvbmVudHNcbiAgICAgICAgICAgICAgICBjcmFkbGVDb250ZW50LnRhaWxWaWV3Q29tcG9uZW50cyA9IGNyYWRsZUNvbnRlbnQudGFpbE1vZGVsQ29tcG9uZW50c1xuXG4gICAgICAgICAgICAgICAgY29uc3QgY3JhZGxlUmVmZXJlbmNlRGF0YSA9IHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhXG4gICAgICAgICAgICAgICAgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzLmVsZW1lbnRyZWYuY3VycmVudFtjcmFkbGVSZWZlcmVuY2VEYXRhLmJsb2NrU2Nyb2xsUHJvcGVydHldID1cbiAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgoMCxjcmFkbGVSZWZlcmVuY2VEYXRhLmJsb2NrU2Nyb2xsUG9zKVxuXG4gICAgICAgICAgICAgICAgc2V0Q3JhZGxlU3RhdGUoJ25vcm1hbGl6ZXNpZ25hbHMnKSAvLyBjYWxsIGEgdGltZW91dCBmb3IgcmVhZHkgKG9yIGludGVycnVwdCBjb250aW51YXRpb24pXG5cbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlICdub3JtYWxpemVzaWduYWxzJzoge1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJy0gaW4gbm9ybWFsaXplc2lnbmFscyBjYWxsJylcbiAgICAgICAgICAgICAgICBub3JtYWxpemVUaW1lclJlZi5jdXJyZW50ID0gc2V0VGltZW91dCgoKT0+IHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnLS0gZXhlY3V0aW5nIG5vcm1hbGl6ZXNpZ25hbHMgY2FsbDppbnRlcnJ1cHRIYW5kbGVyLnNpZ25hbHMucmVwb3NpdGlvbmluZ1JlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVycnVwdEhhbmRsZXIuc2lnbmFscy5yZXBvc2l0aW9uaW5nUmVxdWlyZWQpXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNNb3VudGVkUmVmLmN1cnJlbnQpIHJldHVyblxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFsbG93IHNob3J0LWNpcmN1aXQgZmFsbGJhY2tzIHRvIGNvbnRpbnVlIGludGVycnVwdCByZXNwb25zZXNcbiAgICAgICAgICAgIC8qMSovICAgaWYgKCF2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXMuaXNSZXNpemluZykgeyAvLyByZXNpemUgc2hvcnQtY2lyY3VpdFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAvKjIqLyAgICAgICBpZiAoIWludGVycnVwdEhhbmRsZXIuc2lnbmFscy5yZXBvc2l0aW9uaW5nUmVxdWlyZWQpIHsgLy8gcmVwb3NpdGlvbmluZyBzaG9ydC1jaXJjdWl0XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdub3JtYWxpemluZyBzaWduYWxzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaWduYWxzID0gaW50ZXJydXB0SGFuZGxlci5zaWduYWxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcy5lbGVtZW50cmVmLmN1cnJlbnQpIHsgLy8gYWxyZWFkeSB1bm1vdW50ZWQgaWYgZmFpbHMgKD8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbHMucGF1c2VUcmlnZ2VybGluZXNPYnNlcnZlciAmJiAoc2lnbmFscy5wYXVzZVRyaWdnZXJsaW5lc09ic2VydmVyID0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbHMucGF1c2VTY3JvbGxpbmdFZmZlY3RzICYmIChzaWduYWxzLnBhdXNlU2Nyb2xsaW5nRWZmZWN0cyA9IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxzLnBhdXNlQ3JhZGxlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgJiYgKHNpZ25hbHMucGF1c2VDcmFkbGVJbnRlcnNlY3Rpb25PYnNlcnZlciA9IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxzLnBhdXNlQ3JhZGxlUmVzaXplT2JzZXJ2ZXIgJiYgKHNpZ25hbHMucGF1c2VDcmFkbGVSZXNpemVPYnNlcnZlciA9IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUjogdmlld3BvcnQgZWxlbWVudCBub3Qgc2V0IGluIG5vcm1hbGl6ZXNpZ25hbHMnLCBzY3JvbGxlcklELCB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLypkZWZhdWx0Ki8gaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50KSBzZXRDcmFkbGVTdGF0ZSgncmVzZXR0cmlnZ2VybGluZXMnKSAvLyB0aGVuICdyZWFkeSdcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgLyoyKi8gICAgICAgICAgIGlmIChpc01vdW50ZWRSZWYuY3VycmVudCkgc2V0Q3JhZGxlU3RhdGUoJ3N0YXJ0cmVwb3NpdGlvbicpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvKjEqLyAgICAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHNldENyYWRsZVN0YXRlKCdyZXNpemluZycpXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSxOT1JNQUxJWkVfU0lHTkFMU19USU1FT1VUKVxuXG4gICAgICAgICAgICAgICAgYnJlYWsgXG5cbiAgICAgICAgICAgIH0gICAgICAgICAgXG5cbiAgICAgICAgfVxuXG4gICAgfSxbY3JhZGxlU3RhdGVdKVxuXG4gICAgLy8gc3RhbmRhcmQgcHJvY2Vzc2luZyBzdGFnZXNcbiAgICB1c2VFZmZlY3QoKCk9PiB7IC8vIFRPRE86IHZlcmlmeSBiZW5lZml0IG9mIHVzZUxheW91dEVmZmVjdFxuXG4gICAgICAgIC8vIGNvbnN0IHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcyA9IHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZi5jdXJyZW50XG4gICAgICAgIC8vIHJlcG9zaXRpb25pbmdSZW5kZXIgYW5kIHJlcG9zaXRpb25pbmdDb250aW51YXRpb24gYXJlIHRvZ2dsZWQgdG8gZ2VuZXJhdGUgY29udGludW91cyBcbiAgICAgICAgLy8gICAgcmVwb3NpaW9uaW5nIHJlbmRlcnNcbiAgICAgICAgc3dpdGNoIChjcmFkbGVTdGF0ZSkge1xuXG4gICAgICAgICAgICBjYXNlICdyZXBvc2l0aW9uaW5nUmVuZGVyJzogLy8gdG8gdHJpZ2dlciByZW5kZXIgYmV0d2VlbiBzY3JvbGxzXG4gICAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgY2FzZSAncmVwb3NpdGlvbmluZ0NvbnRpbnVhdGlvbic6IC8vIHNldCBmcm9tIG9uU2Nyb2xsXG4gICAgICAgICAgICAgICAgc2V0Q3JhZGxlU3RhdGUoJ3JlcG9zaXRpb25pbmdSZW5kZXInKVxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgIGNhc2UgJ3JlYWR5JzogLy8gdG8gc3BlY2lmeSBubyBhY3Rpb24gb24gcmVhZHlcbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgIH1cblxuICAgIH0sW2NyYWRsZVN0YXRlXSlcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09WyBSRU5ERVIgXT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgY29uc3QgcmVmZXJlbmNlSW5kZXhPZmZzZXQgPSBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5zY3JvbGxJbXBsaWVkQXhpc1JlZmVyZW5jZUluZGV4XG4gICAgY29uc3Qgc2Nyb2xsVHJhY2tlckFyZ3MgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKCEoY3JhZGxlU3RhdGUgPT0gJ3JlcG9zaXRpb25pbmdDb250aW51YXRpb24nIHx8IGNyYWRsZVN0YXRlID09ICdyZXBvc2l0aW9uaW5nUmVuZGVyJykpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHJhY2tlcmFyZ3MgPSB7XG4gICAgICAgICAgICB0b3A6dmlld3BvcnREaW1lbnNpb25zLnRvcCArIDMsXG4gICAgICAgICAgICBsZWZ0OnZpZXdwb3J0RGltZW5zaW9ucy5sZWZ0ICsgMyxcbiAgICAgICAgICAgIHJlZmVyZW5jZUluZGV4T2Zmc2V0OnNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLnNjcm9sbEltcGxpZWRBeGlzUmVmZXJlbmNlSW5kZXgsXG4gICAgICAgICAgICBsaXN0c2l6ZSxcbiAgICAgICAgICAgIHN0eWxlcyxcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhY2tlcmFyZ3NcbiAgICB9LFtcbiAgICAgICAgY3JhZGxlU3RhdGUsIFxuICAgICAgICB2aWV3cG9ydERpbWVuc2lvbnMsIFxuICAgICAgICByZWZlcmVuY2VJbmRleE9mZnNldCwgXG4gICAgICAgIGxpc3RzaXplLFxuICAgICAgICBzdHlsZXMsXG4gICAgICAgIF1cbiAgICApXG5cbiAgICBjb25zdCBjcmFkbGVDb250ZW50ID0gY29udGVudEhhbmRsZXIuY29udGVudFxuXG4gICAgLy8gY29uc29sZS5sb2coJ3JlbmRlcmluZyB3aXRoIHN0YXRlJyxjcmFkbGVTdGF0ZVJlZi5jdXJyZW50KVxuXG4gICAgLy8gcG9ydGFscm9vdCBpcyB0aGUgaGlkZGVuIHBvcnRhbCBjb21wb25lbnQgY2FjaGVcbiAgICByZXR1cm4gPENyYWRsZVBvcnRhbHNDb250ZXh0LlByb3ZpZGVyIHZhbHVlID0ge2hhbmRsZXJzUmVmLmN1cnJlbnQucG9ydGFsc30+XG4gICAgICAgIHsoY3JhZGxlU3RhdGVSZWYuY3VycmVudCAhPSAnc2V0dXAnKSAmJiA8ZGl2IGRhdGEtdHlwZSA9ICdwb3J0YWxyb290JyBzdHlsZSA9IHsgcG9ydGFscm9vdHN0eWxlIH0+XG4gICAgICAgICAgICA8UG9ydGFsTGlzdCBzY3JvbGxlclByb3BzID0ge2hhbmRsZXJzUmVmLmN1cnJlbnQucG9ydGFscy5zY3JvbGxlclByb3BzfS8+XG4gICAgICAgIDwvZGl2Pn1cblxuICAgICAgICB7KChjcmFkbGVTdGF0ZVJlZi5jdXJyZW50ID09ICdyZXBvc2l0aW9uaW5nUmVuZGVyJykgfHwgKGNyYWRsZVN0YXRlUmVmLmN1cnJlbnQgPT0gJ3JlcG9zaXRpb25pbmdDb250aW51YXRpb24nKSlcbiAgICAgICAgICAgID88U2Nyb2xsVHJhY2tlciBcbiAgICAgICAgICAgICAgICB0b3AgPSB7c2Nyb2xsVHJhY2tlckFyZ3MudG9wfSBcbiAgICAgICAgICAgICAgICBsZWZ0ID0ge3Njcm9sbFRyYWNrZXJBcmdzLmxlZnR9IFxuICAgICAgICAgICAgICAgIG9mZnNldCA9IHtzY3JvbGxUcmFja2VyQXJncy5yZWZlcmVuY2VJbmRleE9mZnNldH0gXG4gICAgICAgICAgICAgICAgbGlzdHNpemUgPSB7c2Nyb2xsVHJhY2tlckFyZ3MubGlzdHNpemV9XG4gICAgICAgICAgICAgICAgc3R5bGVzID0ge3Njcm9sbFRyYWNrZXJBcmdzLnN0eWxlc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA6PGRpdiBcbiAgICAgICAgICAgICAgICBkYXRhLXR5cGUgPSAnY3JhZGxlLWF4aXMnXG4gICAgICAgICAgICAgICAgc3R5bGUgPSB7Y3JhZGxlQXhpc1N0eWxlfSBcbiAgICAgICAgICAgICAgICByZWYgPSB7YXhpc0NyYWRsZUVsZW1lbnRSZWZ9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBkYXRhLXR5cGUgPSAndHJpZ2dlcmxpbmUtaGVhZCdcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSB7dHJpZ2dlcmxpbmVIZWFkU3R5bGV9XG4gICAgICAgICAgICAgICAgICAgIHJlZiA9IHtoZWFkVHJpZ2dlcmxpbmVDcmFkbGVFbGVtZW50UmVmfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIGRhdGEtdHlwZSA9ICd0cmlnZ2VybGluZS10YWlsJ1xuICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IHt0cmlnZ2VybGluZVRhaWxTdHlsZX1cbiAgICAgICAgICAgICAgICAgICAgcmVmID0ge3RhaWxUcmlnZ2VybGluZUNyYWRsZUVsZW1lbnRSZWZ9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAge3RydWVcbiAgICAgICAgICAgICAgICAgICAgPzxkaXYgXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXR5cGUgPSAnY3JhZGxlLWRpdmlkZXInIFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSB7Y3JhZGxlRGl2aWRlclN0eWxlfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA6bnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBkYXRhLXR5cGUgPSAnaGVhZCdcbiAgICAgICAgICAgICAgICAgICAgcmVmID0ge2hlYWRDcmFkbGVFbGVtZW50UmVmfSBcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSB7Y3JhZGxlSGVhZFN0eWxlfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgeyhjcmFkbGVTdGF0ZVJlZi5jdXJyZW50ICE9ICdzZXR1cCcpP1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JhZGxlQ29udGVudC5oZWFkVmlld0NvbXBvbmVudHM6XG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBkYXRhLXR5cGUgPSAndGFpbCdcbiAgICAgICAgICAgICAgICAgICAgcmVmID0ge3RhaWxDcmFkbGVFbGVtZW50UmVmfSBcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSB7Y3JhZGxlVGFpbFN0eWxlfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgeyhjcmFkbGVTdGF0ZVJlZi5jdXJyZW50ICE9ICdzZXR1cCcpP1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JhZGxlQ29udGVudC50YWlsVmlld0NvbXBvbmVudHM6XG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB9XG4gICAgICAgIFxuICAgIDwvQ3JhZGxlUG9ydGFsc0NvbnRleHQuUHJvdmlkZXI+XG5cbn0gLy8gQ3JhZGxlXG5cbi8vIHV0aWxpdGllc1xuXG5jb25zdCBnZXRDcmFkbGVIYW5kbGVycyA9IChjcmFkbGVQYXJhbWV0ZXJzKSA9PiB7XG5cbiAgICBjb25zdCBjcmVhdGVIYW5kbGVyID0gaGFuZGxlciA9PiBuZXcgaGFuZGxlcihjcmFkbGVQYXJhbWV0ZXJzKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9ydGFsSGFuZGxlcjpuZXcgUG9ydGFsSGFuZGxlcigpLFxuICAgICAgICBpbnRlcnJ1cHRIYW5kbGVyOmNyZWF0ZUhhbmRsZXIoSW50ZXJydXB0SGFuZGxlciksXG4gICAgICAgIHNjcm9sbEhhbmRsZXI6Y3JlYXRlSGFuZGxlcihTY3JvbGxIYW5kbGVyKSxcbiAgICAgICAgc3RhdGVIYW5kbGVyOmNyZWF0ZUhhbmRsZXIoU3RhdGVIYW5kbGVyKSxcbiAgICAgICAgY29udGVudEhhbmRsZXI6Y3JlYXRlSGFuZGxlcihDb250ZW50SGFuZGxlciksXG4gICAgICAgIHNjYWZmb2xkSGFuZGxlcjpjcmVhdGVIYW5kbGVyKFNjYWZmb2xkSGFuZGxlciksXG4gICAgICAgIHNlcnZpY2VIYW5kbGVyOmNyZWF0ZUhhbmRsZXIoU2VydmljZUhhbmRsZXIpLFxuICAgICAgICBzdHlsZXNIYW5kbGVyOmNyZWF0ZUhhbmRsZXIoU3R5bGVzSGFuZGxlciksXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDcmFkbGUiXSwibmFtZXMiOlsiZXhwb3J0cyIsInJlYWN0XzEiLCJjcmVhdGVDb250ZXh0IiwicG9ydGFscm9vdHN0eWxlIiwiZGlzcGxheSIsIk5PUk1BTElaRV9TSUdOQUxTX1RJTUVPVVQiLCJDcmFkbGUiLCJfYSIsImdyaWRTcGVjcyIsInJ1bndheVJvd2NvdW50U3BlYyIsImxpc3RzaXplIiwiZGVmYXVsdFZpc2libGVJbmRleCIsImdldEl0ZW0iLCJwbGFjZWhvbGRlciIsImluaGVyaXRlZGZ1bmN0aW9ucyIsImluaGVyaXRlZHN0eWxlcyIsInNjcm9sbGVyTmFtZSIsInNjcm9sbGVySUQiLCJ0cmlnZ2VybGluZU9mZnNldCIsImdhcCIsInBhZGRpbmciLCJjZWxsSGVpZ2h0IiwiY2VsbFdpZHRoIiwibGF5b3V0IiwiZGVuc2UiLCJmdW5jdGlvbnMiLCJPYmplY3QiLCJmcmVlemUiLCJhc3NpZ24iLCJzdHlsZXMiLCJjcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmIiwiY3VycmVudCIsIm9yaWVudGF0aW9uIiwidmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzIiwidmlld3BvcnRfMSIsInZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZiIsInZpZXdwb3J0aGVpZ2h0Iiwidmlld3BvcnREaW1lbnNpb25zIiwidmlld3BvcnR3aWR0aCIsImNyYWRsZVN0YXRlIiwic2V0Q3JhZGxlU3RhdGUiLCJjcmFkbGVTdGF0ZVJlZiIsImlzTW91bnRlZFJlZiIsIm5vcm1hbGl6ZVRpbWVyUmVmIiwiaGVhZENyYWRsZUVsZW1lbnRSZWYiLCJ0YWlsQ3JhZGxlRWxlbWVudFJlZiIsImF4aXNDcmFkbGVFbGVtZW50UmVmIiwiaGVhZFRyaWdnZXJsaW5lQ3JhZGxlRWxlbWVudFJlZiIsInRhaWxUcmlnZ2VybGluZUNyYWRsZUVsZW1lbnRSZWYiLCJjcmFkbGVFbGVtZW50c1JlZiIsImhlYWRSZWYiLCJ0YWlsUmVmIiwiYXhpc1JlZiIsImhlYWRUcmlnZ2VybGluZVJlZiIsInRhaWxUcmlnZ2VybGluZVJlZiIsImNyb3NzY291bnQiLCJ2aWV3cG9ydHNpemUiLCJjcm9zc0xlbmd0aCIsInZpZXdwb3J0bGVuZ3RoZm9yY2FsYyIsInRpbGVsZW5ndGhmb3JjYWxjIiwiTWF0aCIsIm1pbiIsImZsb29yIiwidmlld3BvcnRMZW5ndGgiLCJjZWxsTGVuZ3RoIiwidmlld3BvcnRSb3djb3VudCIsImNlaWwiLCJsaXN0Um93Y291bnQiLCJjYWxjdWxhdGVkQ3JhZGxlUm93Y291bnQiLCJjcmFkbGVSb3djb3VudCIsInJ1bndheVJvd2NvdW50IiwiZGlmZiIsIm1heCIsIml0ZW1jb3VudCIsImNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZiIsInNldEl0ZW1FbGVtZW50RGF0YSIsIml0ZW1FbGVtZW50RGF0YSIsInJlcG9ydFR5cGUiLCJzaGVsbHJlZiIsImNvbnRlbnRIYW5kbGVyIiwiaXRlbUVsZW1lbnRzIiwic2V0IiwiaW5kZXgiLCJpbnRlcm5hbENhbGxiYWNrc1JlZiIsInNldEVsZW1lbnREYXRhIiwicmVmZXJlbmNlSW5kZXhDYWxsYmFja1JlZiIsInJlZmVyZW5jZUluZGV4Q2FsbGJhY2siLCJleHRlcm5hbENhbGxiYWNrc1JlZiIsImhhbmRsZXJzUmVmIiwiY3JhZGxlUGFyYW1ldGVycyIsInNldE9mSGFuZGxlcnNSZWYiLCJnZXRDcmFkbGVIYW5kbGVycyIsInBvcnRhbEhhbmRsZXIiLCJpbnRlcnJ1cHRIYW5kbGVyIiwic2Nyb2xsSGFuZGxlciIsInN0YXRlSGFuZGxlciIsInNjYWZmb2xkSGFuZGxlciIsInNlcnZpY2VIYW5kbGVyIiwic3R5bGVzSGFuZGxlciIsImhhbmRsZXJPYmplY3RSZWYiLCJwb3J0YWxzIiwiaW50ZXJydXB0cyIsInNjcm9sbCIsInN0YXRlIiwiY29udGVudCIsInNjYWZmb2xkIiwic2VydmljZSIsInBvcnRhbCIsIl9iIiwiaXNSZXBhcmVudGluZyIsImNyYWRsZVJlZmVyZW5jZURhdGEiLCJlbGVtZW50cmVmIiwiYmxvY2tTY3JvbGxQcm9wZXJ0eSIsImJsb2NrU2Nyb2xsUG9zIiwiZ2V0Q2FsbGJhY2tzIiwiZ2V0VmlzaWJsZUxpc3QiLCJnZXRDb250ZW50TGlzdCIsInJlbG9hZCIsImNhbGxiYWNrcyIsInNjcm9sbFRvSXRlbSIsInZpZXdwb3J0ZGF0YSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblNjcm9sbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvYnNlcnZlciIsImNyYWRsZVJlc2l6ZSIsImNyZWF0ZU9ic2VydmVyIiwiY3JhZGxlRWxlbWVudHMiLCJlbGVtZW50cyIsIm9ic2VydmUiLCJkaXNjb25uZWN0IiwiY3JhZGxlSW50ZXJzZWN0IiwiYXhpc1RyaWdnZXJsaW5lc0ludGVyc2VjdCIsImlzUmVzaXppbmciLCJzaWduYWxzIiwicGF1c2VDcmFkbGVJbnRlcnNlY3Rpb25PYnNlcnZlciIsInBhdXNlQ3JhZGxlUmVzaXplT2JzZXJ2ZXIiLCJwYXVzZVNjcm9sbGluZ0VmZmVjdHMiLCJwYXVzZVRyaWdnZXJsaW5lc09ic2VydmVyIiwicHJldmlvdXNDZWxsUGl4ZWxMZW5ndGgiLCJwcmV2aW91c0F4aXNPZmZzZXQiLCJ0YXJnZXRBeGlzUGl4ZWxPZmZzZXQiLCJwcmV2aW91c3JhdGlvIiwicGl2b3RDZWxsUGl4ZWxMZW5ndGgiLCJwaXZvdEF4aXNPZmZzZXQiLCJyb3VuZCIsImNvbnNvbGUiLCJsb2ciLCJjcmFkbGVDb250ZW50IiwiaGVhZE1vZGVsQ29tcG9uZW50cyIsInRhaWxNb2RlbENvbXBvbmVudHMiLCJoZWFkVmlld0NvbXBvbmVudHMiLCJ0YWlsVmlld0NvbXBvbmVudHMiLCJzZXRDcmFkbGVTdHlsZXMiLCJ1c2Vyc3R5bGVzIiwiY3JhZGxlSGVhZFN0eWxlIiwiY3JhZGxlVGFpbFN0eWxlIiwiY3JhZGxlQXhpc1N0eWxlIiwidHJpZ2dlcmxpbmVIZWFkU3R5bGUiLCJ0cmlnZ2VybGluZVRhaWxTdHlsZSIsImNyYWRsZURpdmlkZXJTdHlsZSIsImNhbGxpbmdDcmFkbGVTdGF0ZSIsImhlYWRsYXlvdXREYXRhUmVmIiwidHJpZ2dlcmxpbmVvYnNlcnZlciIsInJlcG9zaXRpb25pbmdSZXF1aXJlZCIsInVwZGF0ZUJsb2NrU2Nyb2xsUG9zIiwicmVzZXRTY3JvbGxlclBvcnRhbFJlcG9zaXRvcnkiLCJzZXRDcmFkbGVDb250ZW50IiwiY3JhZGxlQ29udGVudF8xIiwic2V0VGltZW91dCIsInJlZmVyZW5jZUluZGV4T2Zmc2V0Iiwic2Nyb2xsSW1wbGllZEF4aXNSZWZlcmVuY2VJbmRleCIsInNjcm9sbFRyYWNrZXJBcmdzIiwidHJhY2tlcmFyZ3MiLCJ0b3AiLCJsZWZ0IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInN0eWxlIiwicG9ydGFsaGFuZGxlcl8xIiwic2Nyb2xsZXJQcm9wcyIsInNjcm9sbHRyYWNrZXJfMSIsIm9mZnNldCIsInJlZiIsImNyZWF0ZUhhbmRsZXIiLCJoYW5kbGVyIiwiaW50ZXJydXB0aGFuZGxlcl8xIiwic2Nyb2xsaGFuZGxlcl8xIiwic3RhdGVoYW5kbGVyXzEiLCJjb250ZW50aGFuZGxlcl8xIiwic2NhZmZvbGRoYW5kbGVyXzEiLCJzZXJ2aWNlaGFuZGxlcl8xIiwic3R5bGVzaGFuZGxlcl8xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cradle.tsx\n");

/***/ }),

/***/ "./src/cradle/contentfunctions.tsx":
/*!*****************************************!*\
  !*** ./src/cradle/contentfunctions.tsx ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // contentfunctions.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.deletePortals = exports.allocateContentList = exports.getUICellShellList = exports.calcContentShift = exports.getShiftInstruction = exports.getContentListRequirements = void 0;\n/******************************************************************************************\n ------------------------------------[ SUPPORTING FUNCTIONS ]------------------------------\n*******************************************************************************************/\n\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar cellshell_1 = __importDefault(__webpack_require__(/*! ../cellshell */ \"./src/cellshell.tsx\")); // ======================[ for setCradleContent ]===========================\n\n\nvar getContentListRequirements = function getContentListRequirements(_a) {\n  var // called from setCradleContent only\n  cradleInheritedProperties = _a.cradleInheritedProperties,\n      cradleInternalProperties = _a.cradleInternalProperties,\n      targetAxisReferenceIndex = _a.targetAxisReferenceIndex,\n      // from user, or from pivot\n  targetAxisPixelOffset = _a.targetAxisPixelOffset,\n      viewportElement = _a.viewportElement;\n  var orientation = cradleInheritedProperties.orientation,\n      cellHeight = cradleInheritedProperties.cellHeight,\n      cellWidth = cradleInheritedProperties.cellWidth,\n      gap = cradleInheritedProperties.gap,\n      listsize = cradleInheritedProperties.listsize;\n  var crosscount = cradleInternalProperties.crosscount,\n      cradleRowcount = cradleInternalProperties.cradleRowcount,\n      runwayRowcount = cradleInternalProperties.runwayRowcount,\n      listRowcount = cradleInternalProperties.listRowcount; // align axis reference to first row item\n\n  targetAxisReferenceIndex -= targetAxisReferenceIndex % crosscount; // derive target row\n\n  var targetAxisRowOffset = targetAxisReferenceIndex / crosscount;\n  var listEndRowOffset = listRowcount - 1; // check for end list out-of-bounds\n\n  if (targetAxisRowOffset > listEndRowOffset) {\n    targetAxisRowOffset = listEndRowOffset;\n    targetAxisReferenceIndex = targetAxisRowOffset * crosscount;\n  } // -----------------------[ calc cradleReferenceRow & Index ]------------------------\n  // leading edge\n  // let targetCradleReferenceIndex = Math.max(0,targetAxisReferenceIndex - leadingrunwayitemcount)\n\n\n  var targetCradleRowOffset = Math.max(0, targetAxisRowOffset - runwayRowcount); // trailing edge\n\n  var targetCradleEndRowOffset = targetCradleRowOffset + (cradleRowcount - 1);\n\n  if (targetCradleEndRowOffset > listRowcount - 1) {\n    var diff = listRowcount - 1 - targetCradleEndRowOffset;\n    targetCradleRowOffset -= diff;\n    targetCradleEndRowOffset -= diff;\n  }\n\n  var targetCradleReferenceIndex = targetCradleRowOffset * crosscount; // ---------------------[ calc cradle content count ]---------------------\n\n  var newCradleContentCount = cradleRowcount * crosscount;\n\n  if (targetCradleEndRowOffset == listEndRowOffset) {\n    var endrowremaindercount = listsize % crosscount;\n\n    if (endrowremaindercount) {\n      newCradleContentCount -= crosscount - endrowremaindercount;\n    }\n  } // --------------------[ calc css positioning ]-----------------------\n\n\n  var isVertical = orientation == 'vertical';\n  var cellLength = isVertical ? cellHeight + gap : cellWidth + gap;\n  var targetScrollblockPixelOffset = targetAxisRowOffset * cellLength - targetAxisPixelOffset; // console.log(' getContentListRequirements: targetScrollblockPixelOffset, targetAxisPixelOffset, targetAxisRowOffset, cellLength',\n  //     targetScrollblockPixelOffset, targetAxisPixelOffset, targetAxisRowOffset, cellLength)\n  // ----------------------[ return required values ]---------------------\n\n  return {\n    targetCradleReferenceIndex: targetCradleReferenceIndex,\n    targetAxisReferenceIndex: targetAxisReferenceIndex,\n    targetAxisPixelOffset: targetAxisPixelOffset,\n    targetScrollblockPixelOffset: targetScrollblockPixelOffset,\n    newCradleContentCount: newCradleContentCount\n  };\n};\n\nexports.getContentListRequirements = getContentListRequirements; // -1 = shift row to head. 1 = shift row to tail. 0 = do not shift a row.\n\nvar getShiftInstruction = function getShiftInstruction(_a) {\n  // console.log('triggerlineEntries', triggerlineEntries)\n  var isScrollingviewportforward = _a.isScrollingviewportforward,\n      triggerlineEntries = _a.triggerlineEntries;\n  var entries = triggerlineEntries.filter(function (entry) {\n    var isIntersecting = entry.isIntersecting;\n    var triggerlinename = entry.target.dataset.type;\n    return !isIntersecting && isScrollingviewportforward && triggerlinename == 'triggerline-tail' || isIntersecting && !isScrollingviewportforward && triggerlinename == 'triggerline-head';\n  });\n  if (entries.length == 0) return 0;\n\n  if (entries.length > 1) {\n    console.log('SYSTEM ISSUE: MORE THAN ONE BREAKLINE OBSERVER ENTRY', triggerlineEntries.length, triggerlineEntries);\n    debugger;\n  }\n\n  var entry = entries[0];\n  var isIntersecting = entry.isIntersecting;\n  var triggerlinename = entry.target.dataset.type;\n\n  if (!isIntersecting && isScrollingviewportforward && triggerlinename == 'triggerline-tail') {\n    return -1; // shift row to head\n  } else if (isIntersecting && !isScrollingviewportforward && triggerlinename == 'triggerline-head') {\n    return 1; // shift row to tail\n  } else {\n    return 0; // do not shift a row\n  }\n};\n\nexports.getShiftInstruction = getShiftInstruction; // A negative shift instruction is into the head, a positive shift is into the tail.\n// called only from updateCradleContent\n\nvar calcContentShift = function calcContentShift(_a) {\n  // ------------------------[ 1. initialize ]-----------------------\n  var _b, _c;\n\n  var shiftinstruction = _a.shiftinstruction,\n      cradleInheritedProperties = _a.cradleInheritedProperties,\n      cradleInternalProperties = _a.cradleInternalProperties,\n      cradleContent = _a.cradleContent,\n      cradleElements = _a.cradleElements,\n      scrollPos = _a.scrollPos;\n  var isScrollingviewportforward = shiftinstruction < 0;\n  var gap = cradleInheritedProperties.gap,\n      orientation = cradleInheritedProperties.orientation,\n      cellHeight = cradleInheritedProperties.cellHeight,\n      cellWidth = cradleInheritedProperties.cellWidth,\n      listsize = cradleInheritedProperties.listsize;\n  var axisElement = cradleElements.axisRef.current;\n  var cradlecontentlist = cradleContent.cradleModel,\n      tailcontentlist = cradleContent.tailModelComponents;\n  var crosscount = cradleInternalProperties.crosscount,\n      cradleRowcount = cradleInternalProperties.cradleRowcount,\n      listRowcount = cradleInternalProperties.listRowcount,\n      viewportRowcount = cradleInternalProperties.viewportRowcount,\n      runwayRowcount = cradleInternalProperties.runwayRowcount;\n  var cellLength = (orientation == 'vertical' ? cellHeight : cellWidth) + gap; // -----------[ 2. calculate the forward or backward gaps for input ]-------------------\n  // gaps can be caused by rapid scrolling\n\n  var viewportaxisoffset = // the pixel distance between the viewport frame and the axis, toward the head\n  (orientation == 'vertical' ? axisElement.offsetTop : axisElement.offsetLeft) - scrollPos; // the gap between the cell about to be moved, and the viewport edge\n  // reference cell forward end for scrolling forward or back end for scrolling backward\n\n  var viewportaxisbackwardgaplength = !isScrollingviewportforward ? viewportaxisoffset - cellLength : 0;\n  var viewportaxisforwardgaplength = isScrollingviewportforward ? -viewportaxisoffset : 0; // -------[ 3. calculate the axis overshoot (more than one row) row counts, if any ]-------\n  // these overshoot numbers guaranteed to be 0 or positive\n\n  var forwardovershootrowcount = Math.max(0, Math.floor(viewportaxisforwardgaplength / cellLength));\n  var backwardovershootrowcount = Math.max(0, Math.floor(viewportaxisbackwardgaplength / cellLength)); // -----------------[ 4. combine row shift counts of base shift and overshoot ]-------------\n  // shift row count is the number of rows the virtual cradle shifts, according to observer\n  // - shift negative closer to head, shift positive closer to tail\n  // allocate a base shift to head or tail\n\n  var headblockaddshiftrowcount = isScrollingviewportforward ? 1 : 0;\n  var tailblockaddshiftrowcount = !isScrollingviewportforward ? 1 : 0; // consolidate head and tail information into single axis and cradle reference shifts\n  // - negative value shifted toward tail; positive value shifted toward head\n  // - one of the two expressions in the following line will be 0\n\n  var axisreferencerowshift = -(tailblockaddshiftrowcount + backwardovershootrowcount) + (headblockaddshiftrowcount + forwardovershootrowcount); // base value for cradle reference shift; may change if beyond list count\n\n  var cradlereferencerowshift = axisreferencerowshift; // ------------[ 5. calc new cradle reference row offset and axis reference row offset ]-------------\n\n  var previouscradlereferenceindex = ((_b = cradlecontentlist[0]) === null || _b === void 0 ? void 0 : _b.props.index) || 0;\n  var previouscradlerowoffset = Math.ceil(previouscradlereferenceindex / crosscount);\n  var previousaxisreferenceindex = ((_c = tailcontentlist[0]) === null || _c === void 0 ? void 0 : _c.props.index) || 0;\n  var previousaxisrowoffset = Math.ceil(previousaxisreferenceindex / crosscount);\n  var newcradlereferencerowoffset = previouscradlerowoffset + cradlereferencerowshift;\n  var newaxisreferencerowoffset = previousaxisrowoffset + axisreferencerowshift; // --------[ 6. adjust cradle contents when at start and end of list ]-------\n  // ...to maintain constant number of cradle rows\n\n  if (isScrollingviewportforward) {\n    // a. if scrolling forward near the start of the list, new cradle row offset and\n    // cradle row shift count has to be adjusted to accommodate the leading runway\n    // b. if scrolling forward (toward tail of list), as the cradle last row offset approaches \n    // listrow new cradle offset and cradle row shift have to be adjusted to prevent shortening \n    // of cradle content.\n    var targetcradlereferencerowoffset = Math.max(0, newaxisreferencerowoffset - (runwayRowcount ? runwayRowcount - 1 : 0));\n    var headrowdiff = newcradlereferencerowoffset - targetcradlereferencerowoffset;\n\n    if (headrowdiff > 0) {\n      newcradlereferencerowoffset -= headrowdiff;\n      cradlereferencerowshift -= headrowdiff;\n    } // case of being in bounds of trailing runway (end of list)\n\n\n    var targetcradleEndrowoffset = newcradlereferencerowoffset + (cradleRowcount - 1);\n    var tailrowdiff = Math.max(0, targetcradleEndrowoffset - (listRowcount - 1));\n\n    if (tailrowdiff > 0) {\n      newcradlereferencerowoffset -= tailrowdiff;\n      cradlereferencerowshift -= tailrowdiff;\n    }\n  }\n\n  if (!isScrollingviewportforward) {\n    // c. if scrolling backward (toward head of list), as the cradlerowoffset hits 0, cradle changes have\n    // to be adjusted to prevent shortening of cradle content\n    // d. if scrolling backward near the end of the list, cradle changes has to be adjusted to accomodate\n    // the trailing runway\n    if (newcradlereferencerowoffset < 0) {\n      var previousrowshift = cradlereferencerowshift;\n      cradlereferencerowshift += newcradlereferencerowoffset;\n      cradlereferencerowshift = Math.max(0, cradlereferencerowshift);\n      newcradlereferencerowoffset = 0;\n    } // case of in bounds of trailing runway (end of list)\n\n\n    var computedNextCradleEndrowOffset = previouscradlerowoffset + (cradleRowcount - 1) + cradlereferencerowshift;\n    var targetcradleEndrowoffset = Math.min(listRowcount - 1, newaxisreferencerowoffset + (viewportRowcount - 1) + (runwayRowcount ? runwayRowcount - 1 : 0));\n    var tailrowdiff = Math.max(0, targetcradleEndrowoffset - computedNextCradleEndrowOffset);\n\n    if (tailrowdiff > 0) {\n      cradlereferencerowshift += tailrowdiff;\n      newcradlereferencerowoffset += tailrowdiff;\n    }\n  } // ----------------------[ 7. map rows to item references ]----------------------\n\n\n  var newcradlereferenceindex = newcradlereferencerowoffset * crosscount;\n  var cradlereferenceitemshift = cradlereferencerowshift * crosscount;\n  var newaxisreferenceindex = newaxisreferencerowoffset * crosscount;\n  var axisreferenceitemshift = axisreferencerowshift * crosscount;\n  var newcradlecontentcount = cradleRowcount * crosscount; // base count\n\n  var includesLastRow = newcradlereferencerowoffset + cradleRowcount >= listRowcount;\n\n  if (includesLastRow) {\n    var partialspaces = listsize % crosscount;\n    var itemsShortfall = partialspaces == 0 ? 0 : crosscount - partialspaces;\n    newcradlecontentcount -= itemsShortfall;\n  } // create head and tail change counts\n\n\n  var changeOfCradleContentCount = cradlecontentlist.length - newcradlecontentcount;\n  var headchangecount = -(cradlereferencerowshift * crosscount);\n  var tailchangecount = -headchangecount - changeOfCradleContentCount; // -------------[ 8. calculate new axis pixel position; adjust for overshoot ]------------------\n\n  var axisposshift = axisreferencerowshift * cellLength;\n  var newaxispixeloffset = viewportaxisoffset + axisposshift; // ---------------------[ 9. return required values ]-------------------\n\n  return [// newcradlereferenceindex, \n  cradlereferenceitemshift, newaxisreferenceindex, axisreferenceitemshift, newaxispixeloffset, newcradlecontentcount, headchangecount, tailchangecount];\n};\n\nexports.calcContentShift = calcContentShift; // =====================[ shared by both setCradleContent and updateCradleContent ]====================\n// update content\n// adds itemshells at end of contentlist according to headindexcount and tailindescount,\n// or if indexcount values are <0 removes them.\n\nvar getUICellShellList = function getUICellShellList(_a) {\n  var cradleInheritedProperties = _a.cradleInheritedProperties,\n      cradleInternalProperties = _a.cradleInternalProperties,\n      cradleContentCount = _a.cradleContentCount,\n      cradleReferenceIndex = _a.cradleReferenceIndex,\n      headChangeCount = _a.headChangeCount,\n      tailChangeCount = _a.tailChangeCount,\n      contentlist = _a.localContentList,\n      callbacks = _a.callbacks,\n      // observer,\n  instanceIdCounterRef = _a.instanceIdCounterRef;\n  var crosscount = cradleInternalProperties.crosscount,\n      cradleRowcount = cradleInternalProperties.cradleRowcount;\n\n  var localContentlist = __spreadArray([], contentlist, true);\n\n  var tailindexoffset = cradleReferenceIndex + contentlist.length; // let headindexoffset = cradleReferenceIndex\n  // let returnContentlist\n\n  var headContentlist = [];\n  var topconstraint = cradleReferenceIndex - headChangeCount,\n      bottomconstraint = cradleReferenceIndex - headChangeCount + (cradleContentCount + 1); // TODO: validate \"+1\"\n\n  var deletedtailitems = [],\n      deletedheaditems = [];\n\n  if (headChangeCount >= 0) {\n    for (var index = cradleReferenceIndex - headChangeCount; index < cradleReferenceIndex; index++) {\n      if (!(index >= topconstraint && index <= bottomconstraint)) {\n        continue;\n      }\n\n      headContentlist.push(acquireItem({\n        index: index,\n        cradleInheritedProperties: cradleInheritedProperties,\n        // observer, \n        callbacks: callbacks,\n        instanceIdCounterRef: instanceIdCounterRef\n      }));\n    }\n  } else {\n    deletedheaditems = localContentlist.splice(0, -headChangeCount);\n  }\n\n  var tailContentlist = [];\n\n  if (tailChangeCount >= 0) {\n    for (var index = tailindexoffset; index < tailindexoffset + tailChangeCount; index++) {\n      if (!(index >= topconstraint && index <= bottomconstraint)) {\n        continue;\n      }\n\n      tailContentlist.push(acquireItem({\n        index: index,\n        cradleInheritedProperties: cradleInheritedProperties,\n        // observer, \n        callbacks: callbacks,\n        instanceIdCounterRef: instanceIdCounterRef\n      }));\n    }\n  } else {\n    deletedtailitems = localContentlist.splice(tailChangeCount, -tailChangeCount);\n  }\n\n  var deleteditems = deletedheaditems.concat(deletedtailitems);\n  var componentList = headContentlist.concat(localContentlist, tailContentlist);\n  return [componentList, deleteditems];\n};\n\nexports.getUICellShellList = getUICellShellList; // butterfly model. Leading (head) all or partially hidden; tail, visible plus following hidden\n\nvar allocateContentList = function allocateContentList(_a) {\n  var _b;\n\n  var contentlist = _a.contentlist,\n      // of cradle, in items (React components)\n  axisReferenceIndex = _a.axisReferenceIndex;\n  var offsetindex = (_b = contentlist[0]) === null || _b === void 0 ? void 0 : _b.props.index; // TODO: Cannot read property 'props' of undefined\n\n  var headitemcount;\n  headitemcount = axisReferenceIndex - offsetindex;\n  var headlist = contentlist.slice(0, headitemcount);\n  var taillist = contentlist.slice(headitemcount);\n  return [headlist, taillist];\n};\n\nexports.allocateContentList = allocateContentList;\n\nvar deletePortals = function deletePortals(portalHandler, deleteList) {\n  for (var _i = 0, deleteList_1 = deleteList; _i < deleteList_1.length; _i++) {\n    var item = deleteList_1[_i];\n    portalHandler.deletePortal(item.props.index);\n  }\n\n  if (deleteList.length) portalHandler.renderPortalList();\n};\n\nexports.deletePortals = deletePortals; // =====================[ acquire item support ]======================\n\nvar acquireItem = function acquireItem(_a) {\n  var index = _a.index,\n      cradleInheritedProperties = _a.cradleInheritedProperties,\n      // observer, \n  callbacks = _a.callbacks,\n      instanceIdCounterRef = _a.instanceIdCounterRef;\n  var instanceID = instanceIdCounterRef.current++;\n  return emitItem({\n    index: index,\n    cradleInheritedProperties: cradleInheritedProperties,\n    // observer, \n    callbacks: callbacks,\n    instanceID: instanceID\n  });\n};\n\nvar emitItem = function emitItem(_a) {\n  var index = _a.index,\n      cradleInheritedProperties = _a.cradleInheritedProperties,\n      // observer, \n  callbacks = _a.callbacks,\n      instanceID = _a.instanceID;\n  var orientation = cradleInheritedProperties.orientation,\n      cellHeight = cradleInheritedProperties.cellHeight,\n      cellWidth = cradleInheritedProperties.cellWidth,\n      getItem = cradleInheritedProperties.getItem,\n      placeholder = cradleInheritedProperties.placeholder,\n      listsize = cradleInheritedProperties.listsize,\n      scrollerName = cradleInheritedProperties.scrollerName,\n      scrollerID = cradleInheritedProperties.scrollerID;\n  return react_1[\"default\"].createElement(cellshell_1[\"default\"], {\n    key: index,\n    orientation: orientation,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    index: index,\n    callbacks: callbacks,\n    getItem: getItem,\n    listsize: listsize,\n    placeholder: placeholder,\n    instanceID: instanceID,\n    scrollerName: scrollerName,\n    scrollerID: scrollerID\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contentfunctions.tsx\n");

/***/ }),

/***/ "./src/cradle/contenthandler.tsx":
/*!***************************************!*\
  !*** ./src/cradle/contenthandler.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(" // contenthandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar contentfunctions_1 = __webpack_require__(/*! ./contentfunctions */ \"./src/cradle/contentfunctions.tsx\");\n\nvar ContentHandler =\n/** @class */\nfunction () {\n  function ContentHandler(cradleParameters) {\n    var _this = this;\n\n    this.content = {\n      cradleModel: null,\n      headModelComponents: null,\n      tailModelComponents: null,\n      headViewComponents: [],\n      tailViewComponents: []\n    };\n    this.itemElements = new Map();\n    this.instanceIdCounterRef = {\n      current: 0\n    };\n    this.instanceIdMap = new Map();\n    this._previousScrollForward = undefined; // Two public methods - setCradleContent and updateCradleContent\n    // reset cradle, including allocation between head and tail parts of the cradle\n    // called only from cradle preparerender event\n    // ==========================[ SET CONTENT initially, or after reposition ]===========================\n    // TODO: last row is sometimes left off with reposition\n\n    this.setCradleContent = function (cradleState) {\n      // ------------------------------[ 1. initialize ]---------------------------\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var cradleInternalProperties = _this.cradleParameters.cradleInternalPropertiesRef.current;\n      var cradleHandlers = _this.cradleParameters.handlersRef.current;\n      var portalHandler = cradleHandlers.portals,\n          scaffoldHandler = cradleHandlers.scaffold,\n          serviceHandler = cradleHandlers.service,\n          interruptHandler = cradleHandlers.interrupts; // the triggerlines will be moved, so disconnect them from their observer.\n      // they are reconnected with 'renderupdatedcontent' state in cradle.tsx\n\n      interruptHandler.axisTriggerlinesIntersect.observer.disconnect();\n      var viewportElement = viewportInterruptProperties.elementref.current;\n      var requestedAxisReferenceIndex = scaffoldHandler.cradleReferenceData.targetAxisReferenceIndex;\n      var targetAxisPixelOffset = scaffoldHandler.cradleReferenceData.targetAxisPixelOffset;\n      console.log('setCradleContent requestedAxisReferenceIndex, targetAxisPixelOffset', requestedAxisReferenceIndex, targetAxisPixelOffset);\n      var orientation = cradleInheritedProperties.orientation,\n          gap = cradleInheritedProperties.gap,\n          padding = cradleInheritedProperties.padding;\n\n      if (cradleState == 'doreposition') {\n        targetAxisPixelOffset = 0;\n      }\n\n      var localContentList = [];\n      var cradleContent = _this.content; // ----------------------[ 2. get content requirements ]----------------------\n\n      var _a = (0, contentfunctions_1.getContentListRequirements)({\n        targetAxisReferenceIndex: requestedAxisReferenceIndex,\n        targetAxisPixelOffset: targetAxisPixelOffset,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        viewportElement: viewportInterruptProperties.elementref.current\n      }),\n          targetCradleReferenceIndex = _a.targetCradleReferenceIndex,\n          targetAxisReferenceIndex = _a.targetAxisReferenceIndex,\n          cradleContentCount = _a.newCradleContentCount,\n          scrollblockPixelOffset = _a.targetScrollblockPixelOffset,\n          axisPixelOffset = _a.targetAxisPixelOffset;\n\n      var targetAxisPixelAdjustment = 0;\n      var targetScrollblockPixelAdjustment = 0;\n\n      if (cradleState == 'doreposition' || targetAxisReferenceIndex == 0) {\n        targetAxisPixelAdjustment = padding;\n        targetScrollblockPixelAdjustment = targetAxisReferenceIndex == 0 ? 0 : gap;\n      } // console.log('orientation, targetAxisPixelAdjustment, targetScrollblockPixelAdjustment',\n      //     orientation, targetAxisPixelAdjustment, targetScrollblockPixelAdjustment)\n      // returns content constrained by cradleRowcount\n\n\n      var _b = (0, contentfunctions_1.getUICellShellList)({\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        cradleContentCount: cradleContentCount,\n        cradleReferenceIndex: targetCradleReferenceIndex,\n        headChangeCount: 0,\n        tailChangeCount: cradleContentCount,\n        localContentList: localContentList,\n        callbacks: _this.internalCallbacksRef.current,\n        instanceIdCounterRef: _this.instanceIdCounterRef\n      }),\n          childlist = _b[0],\n          deleteditems = _b[1];\n\n      if (deleteditems.length) (0, contentfunctions_1.deletePortals)(portalHandler, deleteditems);\n\n      var _c = (0, contentfunctions_1.allocateContentList)({\n        contentlist: childlist,\n        axisReferenceIndex: targetAxisReferenceIndex\n      }),\n          headcontentlist = _c[0],\n          tailcontentlist = _c[1];\n\n      cradleContent.cradleModel = childlist;\n      cradleContent.headModelComponents = headcontentlist;\n      cradleContent.tailModelComponents = tailcontentlist;\n      scaffoldHandler.cradleReferenceData.scrollImpliedAxisReferenceIndex = targetAxisReferenceIndex;\n      scaffoldHandler.cradleReferenceData.scrollImpliedAxisPixelOffset = axisPixelOffset;\n      scaffoldHandler.cradleReferenceData.targetAxisReferenceIndex = targetAxisReferenceIndex;\n      scaffoldHandler.cradleReferenceData.targetAxisPixelOffset = axisPixelOffset;\n\n      if (serviceHandler.serviceCalls.referenceIndexCallbackRef.current) {\n        var cstate = cradleState;\n        serviceHandler.serviceCalls.referenceIndexCallbackRef.current(scaffoldHandler.cradleReferenceData.targetAxisReferenceIndex, 'setCradleContent', cstate);\n      }\n\n      var cradleElements = scaffoldHandler.elements; //cradleElementsRef.current\n\n      scaffoldHandler.cradleReferenceData.blockScrollPos = scrollblockPixelOffset + targetScrollblockPixelAdjustment; // console.log('finishing setCradleContent: scrollblockPixelOffset, targetScrollblockPixelAdjustment',\n      //     scrollblockPixelOffset, targetScrollblockPixelAdjustment)\n\n      if (orientation == 'vertical') {\n        // scaffoldHandler.cradleReferenceData.blockScrollProperty = 'scrollTop'\n        cradleElements.axisRef.current.style.top = axisPixelOffset + targetAxisPixelAdjustment + 'px';\n        cradleElements.axisRef.current.style.left = 'auto';\n        cradleElements.headRef.current.style.paddingBottom = headcontentlist.length ? gap + 'px' : 0;\n      } else {\n        // orientation = 'horizontal'\n        // scaffoldHandler.cradleReferenceData.blockScrollProperty = 'scrollLeft'\n        cradleElements.axisRef.current.style.top = 'auto';\n        cradleElements.axisRef.current.style.left = axisPixelOffset + targetAxisPixelAdjustment + 'px';\n        cradleElements.headRef.current.style.paddingRight = headcontentlist.length ? gap + 'px' : 0;\n      }\n    }; // =============================[ UPDATE through scroll ]===============================\n\n\n    this.updateCradleContent = function (triggerlineEntries, source) {\n      // ----------------------[ 1. initialize ]-------------------------\n      var _a;\n\n      var _b;\n\n      if (source === void 0) {\n        source = 'notifications';\n      } // handler support\n\n\n      var _c = _this.cradleParameters.handlersRef.current,\n          portalHandler = _c.portals,\n          scrollHandler = _c.scroll,\n          scaffoldHandler = _c.scaffold,\n          stateHandler = _c.state,\n          interruptHandler = _c.interrupts; // scroll data\n\n      var scrollPositions = scrollHandler.scrollPositions;\n      var scrollPos = scrollPositions.currentupdate; // first abandon option/3; nothing to do\n\n      if (scrollPos < 0) {\n        // for Safari elastic bounce at top of scroll\n        return;\n      }\n\n      var isScrollingviewportforward;\n\n      if (scrollPositions.currentupdate == scrollPositions.previousupdate) {\n        // edge case \n        isScrollingviewportforward = _this._previousScrollForward;\n      } else {\n        isScrollingviewportforward = scrollPositions.currentupdate > scrollPositions.previousupdate;\n        _this._previousScrollForward = isScrollingviewportforward;\n      } // console.log('1. updateCradleContent cradleState, isScrollingviewportforward, source, triggerlineEntries',\n      //     stateHandler.cradleStateRef.current, isScrollingviewportforward, source, triggerlineEntries)\n      // cradle scaffold and user cells\n\n\n      var cradleElements = scaffoldHandler.elements;\n      var cradleContent = _this.content;\n      var itemElements = _this.itemElements;\n      var modelcontentlist = cradleContent.cradleModel;\n      var cradleReferenceIndex = ((_b = modelcontentlist[0]) === null || _b === void 0 ? void 0 : _b.props.index) || 0; // --------------------[ 2. get shift instruction ]-----------------------\n      // -1 is move a row up to the head, +1 is move a row down to the tail, 0 is no shift\n\n      var shiftinstruction = (0, contentfunctions_1.getShiftInstruction)({\n        isScrollingviewportforward: isScrollingviewportforward,\n        triggerlineEntries: triggerlineEntries\n      }); // second abandon option/3; nothing to do\n\n      if (shiftinstruction == 0) return; // --------------------------------[ 3. Calculate shifts ]-------------------------------\n      // cradle properties\n\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var cradleInternalProperties = _this.cradleParameters.cradleInternalPropertiesRef.current;\n\n      var _d = (0, contentfunctions_1.calcContentShift)({\n        shiftinstruction: shiftinstruction,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        cradleContent: cradleContent,\n        cradleElements: cradleElements,\n        scrollPos: scrollPos\n      }),\n          // cradlereferenceindex, // new index\n      cradleItemShift = _d[0],\n          axisReferenceIndex = _d[1],\n          // new index\n      axisItemShift = _d[2],\n          axisPixelOffset = _d[3],\n          // new offset (from leading edge of viewport)\n      cradleContentCount = _d[4],\n          // updated\n      headChangeCount = _d[5],\n          tailChangeCount = _d[6]; // third abandon option/3; nothing to do\n\n\n      if (axisItemShift == 0 && cradleItemShift == 0) {\n        console.log('returning for no axis or cradle shift'); // notice for suspicious requirement\n\n        return;\n      } // the triggerlines will be moved, so disconnect them from their observer.\n      // they are reconnected with 'renderupdatedcontent' state in cradle.tsx\n\n\n      interruptHandler.axisTriggerlinesIntersect.observer.disconnect(); // ----------------------------------[ 5. reconfigure cradle content ]--------------------------\n      // collect modified content\n\n      var localContentList,\n          deletedContentItems = [];\n\n      if (headChangeCount || tailChangeCount) {\n        // if either is non-0 then modify content\n        _a = (0, contentfunctions_1.getUICellShellList)({\n          cradleInheritedProperties: cradleInheritedProperties,\n          cradleInternalProperties: cradleInternalProperties,\n          cradleContentCount: cradleContentCount,\n          localContentList: modelcontentlist,\n          headChangeCount: headChangeCount,\n          tailChangeCount: tailChangeCount,\n          cradleReferenceIndex: cradleReferenceIndex,\n          callbacks: _this.internalCallbacksRef.current,\n          instanceIdCounterRef: _this.instanceIdCounterRef\n        }), localContentList = _a[0], deletedContentItems = _a[1];\n      } else {\n        localContentList = modelcontentlist;\n      }\n\n      if (deletedContentItems.length) (0, contentfunctions_1.deletePortals)(portalHandler, deletedContentItems); // ----------------------------------[ 7. allocate cradle content ]--------------------------\n\n      var _e = (0, contentfunctions_1.allocateContentList)({\n        contentlist: localContentList,\n        axisReferenceIndex: axisReferenceIndex\n      }),\n          headcontent = _e[0],\n          tailcontent = _e[1];\n\n      cradleContent.cradleModel = localContentList;\n      cradleContent.headViewComponents = cradleContent.headModelComponents = headcontent;\n      cradleContent.tailViewComponents = cradleContent.tailModelComponents = tailcontent; // -------------------------------[ 8. set css changes ]-------------------------\n\n      scrollHandler.updateBlockScrollPos(); // if (axisPixelOffset !== undefined) {\n\n      if (cradleInheritedProperties.orientation == 'vertical') {\n        // const scrolltop = scrollPos // viewportElement.scrollTop\n        var top_1 = scrollPos + axisPixelOffset;\n        scaffoldHandler.cradleReferenceData.blockScrollPos = scrollPos; // scaffoldHandler.cradleReferenceData.blockScrollProperty = 'scrollTop'\n\n        cradleElements.axisRef.current.style.top = top_1 + 'px';\n        cradleElements.axisRef.current.style.left = 'auto';\n        cradleElements.headRef.current.style.paddingBottom = headcontent.length ? cradleInheritedProperties.gap + 'px' : 0;\n      } else {\n        scaffoldHandler.cradleReferenceData.blockScrollPos = scrollPos; // viewportElement.scrollLeft\n        // scaffoldHandler.cradleReferenceData.blockScrollProperty = 'scrollLeft'\n\n        cradleElements.axisRef.current.style.top = 'auto';\n        cradleElements.axisRef.current.style.left = scrollPos + axisPixelOffset + 'px';\n        cradleElements.headRef.current.style.paddingRight = headcontent.length ? cradleInheritedProperties.gap + 'px' : 0;\n      } // }\n      // console.log('++updateCradleContent axisReferenceIndex, axisPixelOffset, axisItemShift, cradleItemShift, scrollPos', \n      //     axisReferenceIndex, axisPixelOffset, axisItemShift, cradleItemShift, scrollPos)\n\n\n      scaffoldHandler.cradleReferenceData.scrollImpliedAxisReferenceIndex = axisReferenceIndex;\n      scaffoldHandler.cradleReferenceData.scrollImpliedAxisPixelOffset = axisPixelOffset;\n      scaffoldHandler.cradleReferenceData.targetAxisReferenceIndex = axisReferenceIndex;\n      scaffoldHandler.cradleReferenceData.targetAxisPixelOffset = axisPixelOffset;\n      stateHandler.setCradleState('renderupdatedcontent');\n    };\n\n    this.cradleParameters = cradleParameters;\n    this.internalCallbacksRef = cradleParameters.internalCallbacksRef;\n  }\n\n  return ContentHandler;\n}();\n\nexports[\"default\"] = ContentHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contenthandler.tsx\n");

/***/ }),

/***/ "./src/cradle/interrupthandler.tsx":
/*!*****************************************!*\
  !*** ./src/cradle/interrupthandler.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// interruptshandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    TODO: trigger reposition if triggerline entries come back with isIntersecting the same for both\n*/\n\nvar resize_observer_1 = __webpack_require__(/*! @juggle/resize-observer */ \"./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n\nvar ResizeObserver = window['ResizeObserver'] || resize_observer_1.ResizeObserver;\n\nvar InterruptHandler =\n/** @class */\nfunction () {\n  function InterruptHandler(cradleParameters) {\n    var _this = this;\n\n    this.isTailCradleInView = false;\n    this.isHeadCradleInView = false; // TODO: stub\n\n    this.cradleresizeobservercallback = function (entries) {\n      if (_this.signals.pauseCradleResizeObserver) return;\n    };\n\n    this.axisTriggerlinesObserverCallback = function (entries) {\n      var testrootbounds = entries[0].rootBounds;\n\n      if (testrootbounds.width == 0 && testrootbounds.height == 0) {\n        // reparenting\n        return;\n      } // console.log('=> axisTriggerlinesObserverCallback', entries)\n\n\n      if (entries.length == 2) {\n        var first = entries[0],\n            second = entries[1]; // console.log('first.time, second.time, first.time == second.time,first, second',\n        //     first.time, second.time,first.time == second.time,first,second)\n        // TODO: consider using scrollHandler.isScrolling instead\n\n        if (first.time == second.time) {\n          // initializing, not scrolling\n          return;\n        } else {\n          console.log('WARNING: double triggerlines intersection. Contace author.');\n        }\n      }\n\n      if (_this.signals.pauseTriggerlinesObserver) {\n        return;\n      }\n\n      var _a = _this.cradleParameters.handlersRef.current,\n          contentHandler = _a.content,\n          stateHandler = _a.state,\n          scrollHandler = _a.scroll;\n\n      if (stateHandler.isMountedRef.current) {\n        var scrollPositions = scrollHandler.scrollPositions;\n\n        if (scrollPositions.start != scrollPositions.current || scrollPositions.current != scrollPositions.previous) {\n          scrollPositions.previousupdate = scrollPositions.currentupdate;\n          scrollPositions.currentupdate = scrollPositions.current;\n          contentHandler.updateCradleContent(entries, 'triggerlinesObserver');\n        }\n      }\n    };\n\n    this.cradleIntersectionObserverCallback = function (entries) {\n      var _a;\n\n      console.log('cradleIntersectionObserverCallback');\n      var signals = _this.signals;\n      var stateHandler = _this.cradleParameters.handlersRef.current.state;\n      var contentHandler = _this.cradleParameters.handlersRef.current.content;\n\n      if (signals.pauseCradleIntersectionObserver) {\n        // console.log('returning from intersectionobserver for PAUSE')\n        return;\n      }\n\n      for (var i = 0; i < entries.length; i++) {\n        var entry = entries[i];\n\n        if (entry.target.dataset.type == 'head') {\n          _this.isHeadCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n          ;\n        } else {\n          _this.isTailCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n          ;\n        }\n      }\n\n      _this.signals.repositioningRequired = !_this.isHeadCradleInView && !_this.isTailCradleInView;\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n\n      if (_this.signals.repositioningRequired) // start reposition if no other interrupts are underway\n        {\n          var cradleState = stateHandler.cradleStateRef.current; // startreposition, reload, preparecontent, preparerender, normalizesignals, ready\n\n          if (!viewportInterruptProperties.isResizing && !((_a = viewportInterruptProperties.portal) === null || _a === void 0 ? void 0 : _a.isReparenting) && !(cradleState == 'resized') && !(cradleState == 'repositioningRender') && !(cradleState == 'repositioningContinuation') && !(cradleState == 'renderupdatedcontent') && // *TEST*\n          !(cradleState == 'finishreposition') && !(cradleState == 'doreposition') && !(cradleState == 'pivot')) {\n            var element = viewportInterruptProperties.elementref.current;\n\n            if (!element) {\n              console.log('viewport element not set in cradleIntersectionObserverCallback', _this.cradleParameters.cradleInheritedPropertiesRef.current.scrollerID, viewportInterruptProperties);\n              return;\n            } // TODO this is a duplicate setting procedure with viewport.tsx\n\n\n            var rect = element.getBoundingClientRect();\n            var top_1 = rect.top,\n                right = rect.right,\n                bottom = rect.bottom,\n                left = rect.left;\n            var width = right - left,\n                height = bottom - top_1;\n            viewportInterruptProperties.viewportDimensions = {\n              top: top_1,\n              right: right,\n              bottom: bottom,\n              left: left,\n              width: width,\n              height: height\n            }; // update for scrolltracker\n\n            signals.pauseTriggerlinesObserver = true;\n            var cradleContent = contentHandler.content;\n            cradleContent.headModelComponents = [];\n            cradleContent.tailModelComponents = [];\n            cradleContent.headViewComponents = [];\n            cradleContent.tailViewComponents = []; // console.log('cradleIntersectionObserverCallback: calling state startreposition')\n\n            stateHandler.setCradleState('startreposition');\n          }\n        }\n    }; // for adjusting to content re-sizing\n\n\n    this.cradleResize = {\n      observer: null,\n      callback: this.cradleresizeobservercallback,\n      createObserver: function createObserver() {\n        _this.cradleResize.observer = new ResizeObserver(_this.cradleResize.callback);\n        return _this.cradleResize.observer;\n      }\n    };\n    this.cradleIntersect = {\n      observer: null,\n      callback: this.cradleIntersectionObserverCallback,\n      createObserver: function createObserver() {\n        var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n        _this.cradleIntersect.observer = new IntersectionObserver(_this.cradleIntersect.callback, {\n          root: viewportInterruptProperties.elementref.current,\n          threshold: 0\n        });\n        return _this.cradleIntersect.observer;\n      }\n    };\n    this.axisTriggerlinesIntersect = {\n      observer: null,\n      callback: this.axisTriggerlinesObserverCallback,\n      createObserver: function createObserver() {\n        var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n        _this.axisTriggerlinesIntersect.observer = new IntersectionObserver(_this.axisTriggerlinesIntersect.callback, {\n          root: viewportInterruptProperties.elementref.current,\n          threshold: 0\n        });\n        return _this.axisTriggerlinesIntersect.observer;\n      }\n    };\n    this.signals = {\n      repositioningRequired: false,\n      // pauseCellObserver: false,\n      pauseTriggerlinesObserver: false,\n      pauseCradleIntersectionObserver: false,\n      pauseCradleResizeObserver: false,\n      pauseScrollingEffects: false\n    };\n    this.cradleParameters = cradleParameters;\n  }\n\n  return InterruptHandler;\n}();\n\nexports[\"default\"] = InterruptHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/interrupthandler.tsx\n");

/***/ }),

/***/ "./src/cradle/portalhandler.tsx":
/*!**************************************!*\
  !*** ./src/cradle/portalhandler.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // portalhandler.tsx\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PortalList = exports.PortalWrapper = exports.PortalHandler = void 0;\n/*\n    The infinite list scroller stores user cell data in a central hidden portal cache for each\n    infinitegridscroller root, from whence the data is pulled into the relevant CellShell for display\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ \"./node_modules/react-reverse-portal/dist/web/index.js\"); // global scroller data, organized by session scrollerID\n\n\nvar PortalHandler =\n/** @class */\nfunction () {\n  function PortalHandler() {\n    //===========================[ REPOSITORY AND LIST MANAGEMENT ]==================================\n    var _this = this;\n\n    this.scrollerProps = {\n      setListState: null,\n      modified: false,\n      portalMetadataMap: new Map(),\n      portalMap: new Map(),\n      portalList: null\n    }; // set state of the PortalList component of the scroller to trigger render\n\n    this.renderPortalList = function () {\n      if (_this.scrollerProps.modified) {\n        _this.scrollerProps.portalList = Array.from(_this.scrollerProps.portalMap.values());\n        _this.scrollerProps.modified = false;\n      }\n\n      _this.scrollerProps.setListState(); // trigger display update\n\n    };\n  } // initialize scroller repository\n\n\n  PortalHandler.prototype.resetScrollerPortalRepository = function () {\n    // keep the setListState callback\n    this.scrollerProps.portalMap.clear();\n    this.scrollerProps.portalMetadataMap.clear();\n    this.scrollerProps.portalList = null;\n    this.scrollerProps.modified = false;\n  }; // ==========================[ INDIVIDUAL PORTAL MANAGEMENT ]============================\n  // add a portal list item. The index is the scroller's portal dataset index\n\n\n  PortalHandler.prototype.fetchOrCreatePortal = function (index, content) {\n    if (this.hasPortal(index)) {\n      return this.getPortal(index);\n    } // if not found, create new portal\n\n\n    var _a = createInPortal(content, index),\n        inportal = _a[0],\n        reverseportal = _a[1];\n\n    this.scrollerProps.portalMap.set(index, react_1[\"default\"].createElement(exports.PortalWrapper, {\n      inportal: inportal,\n      key: index,\n      index: index\n    }));\n    this.scrollerProps.modified = true;\n    var portalMetadata = {\n      reverseportal: reverseportal,\n      isReparenting: false,\n      hasusercontent: false\n    };\n    this.scrollerProps.portalMetadataMap.set(index, portalMetadata);\n    this.renderPortalList();\n    return portalMetadata;\n  }; // update the content of a portal list item\n\n\n  PortalHandler.prototype.updatePortal = function (index, content) {\n    var portalMetadata = this.getPortal(index);\n    var portalComponent = updateInPortal(content, portalMetadata.reverseportal);\n    this.scrollerProps.portalMap.set(index, react_1[\"default\"].createElement(exports.PortalWrapper, {\n      inportal: portalComponent,\n      key: index,\n      index: index\n    }));\n    this.scrollerProps.modified = true;\n    this.renderPortalList();\n    return portalMetadata;\n  }; // delete a portal list item\n\n\n  PortalHandler.prototype.deletePortal = function (index) {\n    this.scrollerProps.portalMetadataMap[\"delete\"](index);\n    this.scrollerProps.portalMap[\"delete\"](index);\n    this.scrollerProps.modified = true;\n  }; // query existence of a portal list item\n\n\n  PortalHandler.prototype.hasPortal = function (index) {\n    return this.scrollerProps.portalMetadataMap.has(index);\n  }; // get a portal list item's meta data\n\n\n  PortalHandler.prototype.getPortal = function (index) {\n    return this.scrollerProps.portalMetadataMap.get(index);\n  };\n\n  return PortalHandler;\n}();\n\nexports.PortalHandler = PortalHandler; // ==========================[ Utility functions ]============================\n// get a react-reverse-portal InPortal component, with its metadata\n// with user content and container\n\nvar createInPortal = function createInPortal(content, index) {\n  // console.log('creating inportal index, scrollerID',index,scrollerID)\n  var reversePortal = (0, react_reverse_portal_1.createHtmlPortalNode)(); // reversePortal.element = container\n\n  var container = reversePortal.element;\n  container.style.inset = '0px';\n  container.style.position = 'absolute';\n  container.dataset.type = 'portalcontainer';\n  container.dataset.index = index; // container.dataset.scrollerid = scrollerID\n\n  container.setAttribute('key', index);\n  return [react_1[\"default\"].createElement(react_reverse_portal_1.InPortal, {\n    node: reversePortal\n  }, content), reversePortal];\n}; // update an InPortal component's user content\n\n\nvar updateInPortal = function updateInPortal(content, reversePortal) {\n  return react_1[\"default\"].createElement(react_reverse_portal_1.InPortal, {\n    node: reversePortal\n  }, content);\n}; // ========================[ Utility components ]==============================\n\n\nvar wrapperstyle = {\n  display: 'none'\n}; // static; should take same dimensions as container CellShell\n// hidden portal wrapper for clarity and usage of conventional react relisting services\n\nvar PortalWrapper = function PortalWrapper(_a) {\n  var inportal = _a.inportal,\n      index = _a.index;\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'portalwrapper',\n    \"data-index\": index,\n    style: wrapperstyle,\n    key: index\n  }, inportal);\n};\n\nexports.PortalWrapper = PortalWrapper; // portal list component for rapid relisting of updates, using external callback for set state\n\nvar PortalList = function PortalList(_a) {\n  var scrollerProps = _a.scrollerProps;\n\n  var _b = (0, react_1.useState)(null),\n      portalList = _b[0],\n      setPortalList = _b[1];\n\n  var isMountedRef = (0, react_1.useRef)(true);\n  (0, react_1.useEffect)(function () {\n    scrollerProps.setListState = function () {\n      isMountedRef.current && setPortalList(scrollerProps.portalList);\n    };\n\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  return portalList;\n};\n\nexports.PortalList = PortalList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/portalhandler.tsx\n");

/***/ }),

/***/ "./src/cradle/scaffoldhandler.tsx":
/*!****************************************!*\
  !*** ./src/cradle/scaffoldhandler.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // cradlehandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar ScaffoldHandler =\n/** @class */\nfunction () {\n  function ScaffoldHandler(cradleParameters) {\n    /*\n       ItemIndexReference is the sequential index of first item of the cradle tail\n       CradlePixelOffset is the pixel offset of the cradle axis from the edge of the viewport\n       blockScrollPos is the scrollPos of the scrollblock in relation to the viewport\n       progression is scroll -> next\n    */\n    this.cradleReferenceData = {\n      scrollImpliedAxisReferenceIndex: null,\n      scrollImpliedAxisPixelOffset: null,\n      targetAxisReferenceIndex: null,\n      targetAxisPixelOffset: null,\n      // to set scrollPos after doreposition, or\n      // to restore scrollTop or scrollLeft after clobbered by DOM\n      blockScrollPos: null,\n      blockScrollProperty: null\n    };\n    this.cradleParameters = cradleParameters;\n    var _a = cradleParameters.cradleInternalPropertiesRef.current.cradleElementsRef.current,\n        axisRef = _a.axisRef,\n        headRef = _a.headRef,\n        tailRef = _a.tailRef,\n        headTriggerlineRef = _a.headTriggerlineRef,\n        tailTriggerlineRef = _a.tailTriggerlineRef;\n    this.elements = {\n      axisRef: axisRef,\n      headRef: headRef,\n      tailRef: tailRef,\n      headTriggerlineRef: headTriggerlineRef,\n      tailTriggerlineRef: tailTriggerlineRef\n    };\n    var _b = this.cradleParameters.cradleInheritedPropertiesRef.current,\n        defaultVisibleIndex = _b.defaultVisibleIndex,\n        listsize = _b.listsize,\n        padding = _b.padding; // progression of references: scroll->next\n\n    this.cradleReferenceData.scrollImpliedAxisReferenceIndex = Math.min(defaultVisibleIndex, listsize - 1) || 0;\n    this.cradleReferenceData.scrollImpliedAxisPixelOffset = 0; // padding\n\n    this.cradleReferenceData.targetAxisReferenceIndex = this.cradleReferenceData.scrollImpliedAxisReferenceIndex;\n    this.cradleReferenceData.targetAxisPixelOffset = this.cradleReferenceData.scrollImpliedAxisPixelOffset;\n  }\n\n  return ScaffoldHandler;\n}();\n\nexports[\"default\"] = ScaffoldHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3NjYWZmb2xkaGFuZGxlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7QUFDQTs7Ozs7O0FBRUE7QUFBQTtBQUFBO0VBRUkseUJBQVlBLGdCQUFaLEVBQTRCO0lBc0M3Qjs7Ozs7O0lBTUEsMkJBQXNCO01BRW5CQywrQkFBK0IsRUFBQyxJQUZiO01BR25CQyw0QkFBNEIsRUFBQyxJQUhWO01BS25CQyx3QkFBd0IsRUFBQyxJQUxOO01BTW5CQyxxQkFBcUIsRUFBQyxJQU5IO01BUW5CO01BQ0E7TUFDQUMsY0FBYyxFQUFDLElBVkk7TUFXbkJDLG1CQUFtQixFQUFDO0lBWEQsQ0FBdEI7SUExQ0ksS0FBS04sZ0JBQUwsR0FBd0JBLGdCQUF4QjtJQUVNLFNBTUZBLGdCQUFnQixDQUFDTywyQkFBakIsQ0FBNkNDLE9BQTdDLENBQXFEQyxpQkFBckQsQ0FBdUVELE9BTnJFO0lBQUEsSUFDSEUsT0FBTyxhQURKO0lBQUEsSUFFSEMsT0FBTyxhQUZKO0lBQUEsSUFHSEMsT0FBTyxhQUhKO0lBQUEsSUFJSEMsa0JBQWtCLHdCQUpmO0lBQUEsSUFLSEMsa0JBQWtCLHdCQUxmO0lBT04sS0FBS0MsUUFBTCxHQUFnQjtNQUNiTCxPQUFPLFNBRE07TUFFYkMsT0FBTyxTQUZNO01BR2JDLE9BQU8sU0FITTtNQUliQyxrQkFBa0Isb0JBSkw7TUFLYkMsa0JBQWtCO0lBTEwsQ0FBaEI7SUFRTSxTQUlGLEtBQUtkLGdCQUFMLENBQXNCZ0IsNEJBQXRCLENBQW1EUixPQUpqRDtJQUFBLElBQ0hTLG1CQUFtQix5QkFEaEI7SUFBQSxJQUVIQyxRQUFRLGNBRkw7SUFBQSxJQUdIQyxPQUFPLGFBSEosQ0FuQm1CLENBeUJ6Qjs7SUFDQSxLQUFLQyxtQkFBTCxDQUF5Qm5CLCtCQUF6QixHQUNJb0IsSUFBSSxDQUFDQyxHQUFMLENBQVNMLG1CQUFULEVBQThCQyxRQUFRLEdBQUcsQ0FBekMsS0FBZ0QsQ0FEcEQ7SUFFQSxLQUFLRSxtQkFBTCxDQUF5QmxCLDRCQUF6QixHQUF3RCxDQUF4RCxDQTVCeUIsQ0E0QmlDOztJQUMxRCxLQUFLa0IsbUJBQUwsQ0FBeUJqQix3QkFBekIsR0FDRyxLQUFLaUIsbUJBQUwsQ0FBeUJuQiwrQkFENUI7SUFFQSxLQUFLbUIsbUJBQUwsQ0FBeUJoQixxQkFBekIsR0FDRyxLQUFLZ0IsbUJBQUwsQ0FBeUJsQiw0QkFENUI7RUFHRjs7RUEyQkw7QUFBQyxDQS9ERCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvY3JhZGxlL3NjYWZmb2xkaGFuZGxlci50c3g/ZmMyZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmFkbGVoYW5kbGVyLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDIxIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjYWZmb2xkSGFuZGxlciB7IFxuXG4gICAgY29uc3RydWN0b3IoY3JhZGxlUGFyYW1ldGVycykge1xuXG4gICAgICAgdGhpcy5jcmFkbGVQYXJhbWV0ZXJzID0gY3JhZGxlUGFyYW1ldGVyc1xuXG4gICAgICAgY29uc3Qge1xuICAgICAgICAgIGF4aXNSZWYsIFxuICAgICAgICAgIGhlYWRSZWYsIFxuICAgICAgICAgIHRhaWxSZWYsXG4gICAgICAgICAgaGVhZFRyaWdnZXJsaW5lUmVmLFxuICAgICAgICAgIHRhaWxUcmlnZ2VybGluZVJlZlxuICAgICAgIH0gPSBjcmFkbGVQYXJhbWV0ZXJzLmNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZi5jdXJyZW50LmNyYWRsZUVsZW1lbnRzUmVmLmN1cnJlbnRcbiAgICAgICB0aGlzLmVsZW1lbnRzID0ge1xuICAgICAgICAgIGF4aXNSZWYsXG4gICAgICAgICAgaGVhZFJlZixcbiAgICAgICAgICB0YWlsUmVmLFxuICAgICAgICAgIGhlYWRUcmlnZ2VybGluZVJlZixcbiAgICAgICAgICB0YWlsVHJpZ2dlcmxpbmVSZWZcbiAgICAgICB9XG5cbiAgICAgICBjb25zdCB7XG4gICAgICAgICAgZGVmYXVsdFZpc2libGVJbmRleCwgXG4gICAgICAgICAgbGlzdHNpemUsIFxuICAgICAgICAgIHBhZGRpbmdcbiAgICAgICB9ID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLmNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXNSZWYuY3VycmVudFxuXG4gICAgICAgLy8gcHJvZ3Jlc3Npb24gb2YgcmVmZXJlbmNlczogc2Nyb2xsLT5uZXh0XG4gICAgICAgdGhpcy5jcmFkbGVSZWZlcmVuY2VEYXRhLnNjcm9sbEltcGxpZWRBeGlzUmVmZXJlbmNlSW5kZXggPSBcbiAgICAgICAgICAoTWF0aC5taW4oZGVmYXVsdFZpc2libGVJbmRleCwobGlzdHNpemUgLSAxKSkgfHwgMClcbiAgICAgICB0aGlzLmNyYWRsZVJlZmVyZW5jZURhdGEuc2Nyb2xsSW1wbGllZEF4aXNQaXhlbE9mZnNldCA9IDAgLy8gcGFkZGluZ1xuICAgICAgIHRoaXMuY3JhZGxlUmVmZXJlbmNlRGF0YS50YXJnZXRBeGlzUmVmZXJlbmNlSW5kZXggPSBcbiAgICAgICAgICB0aGlzLmNyYWRsZVJlZmVyZW5jZURhdGEuc2Nyb2xsSW1wbGllZEF4aXNSZWZlcmVuY2VJbmRleFxuICAgICAgIHRoaXMuY3JhZGxlUmVmZXJlbmNlRGF0YS50YXJnZXRBeGlzUGl4ZWxPZmZzZXQgPSBcbiAgICAgICAgICB0aGlzLmNyYWRsZVJlZmVyZW5jZURhdGEuc2Nyb2xsSW1wbGllZEF4aXNQaXhlbE9mZnNldFxuXG4gICAgfVxuXG4gICAgY3JhZGxlUGFyYW1ldGVycyAvLyBzdGFuZGFyZCBmb3IgaGFuZGxlcnMsIGJ1dCBub3QgdXNlZCBoZXJlIHlldFxuXG4gICAvKiBcbiAgICAgIEl0ZW1JbmRleFJlZmVyZW5jZSBpcyB0aGUgc2VxdWVudGlhbCBpbmRleCBvZiBmaXJzdCBpdGVtIG9mIHRoZSBjcmFkbGUgdGFpbFxuICAgICAgQ3JhZGxlUGl4ZWxPZmZzZXQgaXMgdGhlIHBpeGVsIG9mZnNldCBvZiB0aGUgY3JhZGxlIGF4aXMgZnJvbSB0aGUgZWRnZSBvZiB0aGUgdmlld3BvcnRcbiAgICAgIGJsb2NrU2Nyb2xsUG9zIGlzIHRoZSBzY3JvbGxQb3Mgb2YgdGhlIHNjcm9sbGJsb2NrIGluIHJlbGF0aW9uIHRvIHRoZSB2aWV3cG9ydFxuICAgICAgcHJvZ3Jlc3Npb24gaXMgc2Nyb2xsIC0+IG5leHRcbiAgICovXG4gICBjcmFkbGVSZWZlcmVuY2VEYXRhID0ge1xuXG4gICAgICBzY3JvbGxJbXBsaWVkQXhpc1JlZmVyZW5jZUluZGV4Om51bGwsXG4gICAgICBzY3JvbGxJbXBsaWVkQXhpc1BpeGVsT2Zmc2V0Om51bGwsXG5cbiAgICAgIHRhcmdldEF4aXNSZWZlcmVuY2VJbmRleDpudWxsLFxuICAgICAgdGFyZ2V0QXhpc1BpeGVsT2Zmc2V0Om51bGwsXG5cbiAgICAgIC8vIHRvIHNldCBzY3JvbGxQb3MgYWZ0ZXIgZG9yZXBvc2l0aW9uLCBvclxuICAgICAgLy8gdG8gcmVzdG9yZSBzY3JvbGxUb3Agb3Igc2Nyb2xsTGVmdCBhZnRlciBjbG9iYmVyZWQgYnkgRE9NXG4gICAgICBibG9ja1Njcm9sbFBvczpudWxsLCBcbiAgICAgIGJsb2NrU2Nyb2xsUHJvcGVydHk6bnVsbCxcblxuICAgfVxuXG4gICBlbGVtZW50c1xuXG59Il0sIm5hbWVzIjpbImNyYWRsZVBhcmFtZXRlcnMiLCJzY3JvbGxJbXBsaWVkQXhpc1JlZmVyZW5jZUluZGV4Iiwic2Nyb2xsSW1wbGllZEF4aXNQaXhlbE9mZnNldCIsInRhcmdldEF4aXNSZWZlcmVuY2VJbmRleCIsInRhcmdldEF4aXNQaXhlbE9mZnNldCIsImJsb2NrU2Nyb2xsUG9zIiwiYmxvY2tTY3JvbGxQcm9wZXJ0eSIsImNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZiIsImN1cnJlbnQiLCJjcmFkbGVFbGVtZW50c1JlZiIsImF4aXNSZWYiLCJoZWFkUmVmIiwidGFpbFJlZiIsImhlYWRUcmlnZ2VybGluZVJlZiIsInRhaWxUcmlnZ2VybGluZVJlZiIsImVsZW1lbnRzIiwiY3JhZGxlSW5oZXJpdGVkUHJvcGVydGllc1JlZiIsImRlZmF1bHRWaXNpYmxlSW5kZXgiLCJsaXN0c2l6ZSIsInBhZGRpbmciLCJjcmFkbGVSZWZlcmVuY2VEYXRhIiwiTWF0aCIsIm1pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/cradle/scaffoldhandler.tsx\n");

/***/ }),

/***/ "./src/cradle/scrollhandler.tsx":
/*!**************************************!*\
  !*** ./src/cradle/scrollhandler.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // scrollhandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar SCROLL_TIMEOUT_FOR_ONAFTERSCROLL = 500;\n\nvar ScrollHandler =\n/** @class */\nfunction () {\n  function ScrollHandler(cradleParameters) {\n    var _this = this;\n\n    this.scrollPositions = {\n      start: 0,\n      current: 0,\n      previous: 0,\n      previousupdate: 0,\n      currentupdate: 0\n    };\n    this._scrolltimerid = null;\n    this.isScrolling = false;\n\n    this.onScroll = function (e) {\n      var signals = _this.cradleParameters.handlersRef.current.interrupts.signals; // if (signals.pauseScrollingEffects) {\n      //     return\n      // }\n\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var viewportElement = viewportInterruptProperties.elementref.current;\n      var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffold;\n      var scrollPositionCurrent = _this.cradleParameters.cradleInheritedPropertiesRef.current.orientation == 'vertical' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n\n      if (!_this.isScrolling) {\n        _this.isScrolling = true;\n        _this.scrollPositions.start = scrollPositionCurrent;\n        _this.scrollPositions.currentupdate = scrollPositionCurrent;\n      } // console.log('onScroll scrollPositionCurrent',scrollPositionCurrent)\n\n\n      if (scrollPositionCurrent < 0) {\n        // for Safari\n        return;\n      } // scaffoldHandler.cradleReferenceData.blockScrollPos = scrollPositionCurrent // TODO: redundant?\n\n\n      _this.scrollPositions.previous = _this.scrollPositions.current;\n      _this.scrollPositions.current = scrollPositionCurrent; // if (viewportInterruptProperties.index == 6) {\n      //     console.log('running onScroll for index, scrollPositions',\n      //         viewportInterruptProperties.index,this.scrollPositions)\n      // }\n\n      clearTimeout(_this._scrolltimerid);\n\n      if (signals.pauseScrollingEffects) {\n        return;\n      }\n\n      var stateHandler = _this.cradleParameters.handlersRef.current.state;\n      var cradleState = stateHandler.cradleStateRef.current;\n      var contentHandler = _this.cradleParameters.handlersRef.current.content;\n      var serviceHandler = _this.cradleParameters.handlersRef.current.service;\n\n      if (!viewportInterruptProperties.isResizing) {\n        if (cradleState == 'ready' || cradleState == 'repositioningRender' || cradleState == 'repositioningContinuation') {\n          if (cradleState == 'ready') {\n            var itemindex = scaffoldHandler.cradleReferenceData.targetAxisReferenceIndex;\n            var axisVisiblePixelOffset = void 0;\n            var cradleElements = scaffoldHandler.elements;\n\n            if (_this.cradleParameters.cradleInheritedPropertiesRef.current.orientation == 'vertical') {\n              axisVisiblePixelOffset = cradleElements.axisRef.current.offsetTop - _this.cradleParameters.viewportInterruptPropertiesRef.current.elementref.current.scrollTop;\n            } else {\n              axisVisiblePixelOffset = cradleElements.axisRef.current.offsetLeft - _this.cradleParameters.viewportInterruptPropertiesRef.current.elementref.current.scrollLeft;\n            }\n\n            scaffoldHandler.cradleReferenceData.scrollImpliedAxisReferenceIndex = itemindex;\n            scaffoldHandler.cradleReferenceData.scrollImpliedAxisPixelOffset = axisVisiblePixelOffset;\n          }\n\n          if (cradleState == 'repositioningRender' || cradleState == 'repositioningContinuation') {\n            _this._setScrollRepositionReferenceIndexData();\n\n            if (cradleState == 'repositioningRender') stateHandler.setCradleState('repositioningContinuation');\n          } // TODO: re-instate the following\n\n\n          serviceHandler.serviceCalls.referenceIndexCallbackRef.current && serviceHandler.serviceCalls.referenceIndexCallbackRef.current(scaffoldHandler.cradleReferenceData.scrollImpliedAxisReferenceIndex, 'scrolling', cradleState);\n        }\n      }\n\n      _this._scrolltimerid = setTimeout(function () {\n        _this._onAfterScroll();\n      }, SCROLL_TIMEOUT_FOR_ONAFTERSCROLL);\n      return false;\n    };\n\n    this._onAfterScroll = function () {\n      _this.isScrolling = false;\n      var stateHandler = _this.cradleParameters.handlersRef.current.state;\n      var contentHandler = _this.cradleParameters.handlersRef.current.content;\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var cradleState = stateHandler.cradleStateRef.current; // console.log('onAfterScroll cradleState',cradleState)\n      // if (viewportInterruptProperties.index == 6) {\n      //     console.log('running onAfterScroll for index, cradleState',\n      //         viewportInterruptProperties.index,this.scrollPositions, cradleState)\n      // }\n\n      switch (cradleState) {\n        case 'repositioningRender':\n        case 'repositioningContinuation':\n          {\n            console.log('scrollHandler calling finishreposition from ', cradleState);\n            stateHandler.setCradleState('finishreposition');\n            break;\n          }\n\n        default:\n          {\n            if (_this.scrollPositions.start != _this.scrollPositions.current || _this.scrollPositions.current != _this.scrollPositions.previous) {\n              if (stateHandler.isMountedRef.current) {\n                _this.updateReferenceData(); // contentHandler.updateCradleContent([], 'endofscroll') // for Safari to compensate for overscroll\n\n              }\n            }\n          }\n      }\n    };\n\n    this.updateReferenceData = function () {\n      var _a = _this.cradleParameters.handlersRef.current,\n          stateHandler = _a.state,\n          scaffoldHandler = _a.scaffold;\n      var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current; // const contentHandler = this.cradleParameters.handlersRef.current.content\n\n      if (!stateHandler.isMountedRef.current) return;\n      var axisVisiblePixelOffset;\n      var cradleElements = scaffoldHandler.elements;\n      var viewportElement = viewportInterruptProperties.elementref.current;\n\n      if (cradleProps.orientation == 'vertical') {\n        axisVisiblePixelOffset = cradleElements.axisRef.current.offsetTop - viewportElement.scrollTop;\n      } else {\n        axisVisiblePixelOffset = cradleElements.axisRef.current.offsetLeft - viewportElement.scrollLeft;\n      }\n\n      scaffoldHandler.cradleReferenceData.scrollImpliedAxisPixelOffset = axisVisiblePixelOffset;\n\n      if (!viewportInterruptProperties.isResizing) {\n        scaffoldHandler.cradleReferenceData.targetAxisReferenceIndex = scaffoldHandler.cradleReferenceData.scrollImpliedAxisReferenceIndex;\n        scaffoldHandler.cradleReferenceData.targetAxisPixelOffset = scaffoldHandler.cradleReferenceData.scrollImpliedAxisPixelOffset;\n\n        _this.updateBlockScrollPos();\n      }\n    };\n\n    this.updateBlockScrollPos = function () {\n      var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffold;\n      var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var viewportElement = viewportInterruptProperties.elementref.current;\n\n      if (cradleProps.orientation == 'vertical') {\n        // scaffoldHandler.cradleReferenceData.blockScrollProperty = 'scrollTop'\n        scaffoldHandler.cradleReferenceData.blockScrollPos = viewportElement.scrollTop;\n      } else {\n        // scaffoldHandler.cradleReferenceData.blockScrollProperty = 'scrollLeft'\n        scaffoldHandler.cradleReferenceData.blockScrollPos = viewportElement.scrollLeft;\n      }\n    };\n\n    this._setScrollRepositionReferenceIndexData = function () {\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var cradleConfig = _this.cradleParameters.cradleInternalPropertiesRef.current;\n      var crosscount = cradleConfig.crosscount;\n      var viewportElement = viewportInterruptProperties.elementref.current;\n      var orientation = cradleProps.orientation,\n          listsize = cradleProps.listsize;\n      var scrollPos, cellLength;\n\n      if (orientation == 'vertical') {\n        scrollPos = viewportElement.scrollTop;\n        cellLength = cradleProps.cellHeight + cradleProps.gap;\n      } else {\n        scrollPos = viewportElement.scrollLeft;\n        cellLength = cradleProps.cellWidth + cradleProps.gap;\n      }\n\n      var axisPixelOffset = cellLength - scrollPos % cellLength;\n\n      if (axisPixelOffset == cellLength + cradleProps.padding) {\n        axisPixelOffset = 0;\n      }\n\n      var axisRowIndex = Math.ceil((scrollPos - cradleProps.padding) / cellLength);\n      var axisReferenceIndex = axisRowIndex * crosscount;\n      axisReferenceIndex = Math.min(axisReferenceIndex, listsize - 1);\n      var diff = axisReferenceIndex % crosscount;\n      axisReferenceIndex -= diff; // let referenceIndexData = {\n      //     index:axisReferenceIndex,\n      //     axisVisiblePixelOffset:referencescrolloffset\n      // }\n\n      if (axisReferenceIndex == 0) axisPixelOffset = 0; // defensive\n\n      var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffold;\n      scaffoldHandler.cradleReferenceData.scrollImpliedAxisReferenceIndex = axisReferenceIndex;\n      scaffoldHandler.cradleReferenceData.scrollImpliedAxisPixelOffset = axisPixelOffset; // console.log('scrollHandler setting implied repositioning axisReferenceIndex, axisPixelOffset, cradleReferenceData',\n      //     axisReferenceIndex, axisPixelOffset, Object.assign({},scaffoldHandler.cradleReferenceData))\n    };\n\n    this.cradleParameters = cradleParameters;\n  }\n\n  return ScrollHandler;\n}();\n\nexports[\"default\"] = ScrollHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3Njcm9sbGhhbmRsZXIudHN4LmpzIiwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7Ozs7O0FBRUEsSUFBTUEsZ0NBQWdDLEdBQUcsR0FBekM7O0FBRUE7QUFBQTtBQUFBO0VBRUksdUJBQVlDLGdCQUFaLEVBQTRCO0lBQTVCOztJQVFBLHVCQUFrQjtNQUFDQyxLQUFLLEVBQUMsQ0FBUDtNQUFVQyxPQUFPLEVBQUMsQ0FBbEI7TUFBcUJDLFFBQVEsRUFBQyxDQUE5QjtNQUFpQ0MsY0FBYyxFQUFDLENBQWhEO01BQW1EQyxhQUFhLEVBQUM7SUFBakUsQ0FBbEI7SUFFUSxzQkFBaUIsSUFBakI7SUFFQSxtQkFBYyxLQUFkOztJQUVSLGdCQUFXLFVBQUNDLENBQUQsRUFBRTtNQUVULElBQU1DLE9BQU8sR0FBR0MsS0FBSSxDQUFDUixnQkFBTCxDQUFzQlMsV0FBdEIsQ0FBa0NQLE9BQWxDLENBQTBDUSxVQUExQyxDQUFxREgsT0FBckUsQ0FGUyxDQUlUO01BRUE7TUFFQTs7TUFFQSxJQUFNSSwyQkFBMkIsR0FBR0gsS0FBSSxDQUFDUixnQkFBTCxDQUFzQlksOEJBQXRCLENBQXFEVixPQUF6RjtNQUNBLElBQU1XLGVBQWUsR0FBR0YsMkJBQTJCLENBQUNHLFVBQTVCLENBQXVDWixPQUEvRDtNQUVBLElBQU1hLGVBQWUsR0FBR1AsS0FBSSxDQUFDUixnQkFBTCxDQUFzQlMsV0FBdEIsQ0FBa0NQLE9BQWxDLENBQTBDYyxRQUFsRTtNQUVBLElBQU1DLHFCQUFxQixHQUN0QlQsS0FBSSxDQUFDUixnQkFBTCxDQUFzQmtCLDRCQUF0QixDQUFtRGhCLE9BQW5ELENBQTJEaUIsV0FBM0QsSUFBMEUsVUFBM0UsR0FDSU4sZUFBZSxDQUFDTyxTQURwQixHQUVJUCxlQUFlLENBQUNRLFVBSHhCOztNQUtBLElBQUksQ0FBQ2IsS0FBSSxDQUFDYyxXQUFWLEVBQXVCO1FBQ25CZCxLQUFJLENBQUNjLFdBQUwsR0FBbUIsSUFBbkI7UUFDQWQsS0FBSSxDQUFDZSxlQUFMLENBQXFCdEIsS0FBckIsR0FBNkJnQixxQkFBN0I7UUFDQVQsS0FBSSxDQUFDZSxlQUFMLENBQXFCbEIsYUFBckIsR0FBcUNZLHFCQUFyQztNQUNILENBeEJRLENBMEJUOzs7TUFFQSxJQUFJQSxxQkFBcUIsR0FBRyxDQUE1QixFQUErQjtRQUFFO1FBRTdCO01BRUgsQ0FoQ1EsQ0FrQ1Q7OztNQUVBVCxLQUFJLENBQUNlLGVBQUwsQ0FBcUJwQixRQUFyQixHQUFnQ0ssS0FBSSxDQUFDZSxlQUFMLENBQXFCckIsT0FBckQ7TUFDQU0sS0FBSSxDQUFDZSxlQUFMLENBQXFCckIsT0FBckIsR0FBK0JlLHFCQUEvQixDQXJDUyxDQXVDVDtNQUNBO01BQ0E7TUFDQTs7TUFFQU8sWUFBWSxDQUFDaEIsS0FBSSxDQUFDaUIsY0FBTixDQUFaOztNQUVBLElBQUlsQixPQUFPLENBQUNtQixxQkFBWixFQUFtQztRQUUvQjtNQUVIOztNQUVELElBQU1DLFlBQVksR0FBR25CLEtBQUksQ0FBQ1IsZ0JBQUwsQ0FBc0JTLFdBQXRCLENBQWtDUCxPQUFsQyxDQUEwQzBCLEtBQS9EO01BQ0EsSUFBTUMsV0FBVyxHQUFHRixZQUFZLENBQUNHLGNBQWIsQ0FBNEI1QixPQUFoRDtNQUVBLElBQU02QixjQUFjLEdBQUd2QixLQUFJLENBQUNSLGdCQUFMLENBQXNCUyxXQUF0QixDQUFrQ1AsT0FBbEMsQ0FBMEM4QixPQUFqRTtNQUNBLElBQU1DLGNBQWMsR0FBR3pCLEtBQUksQ0FBQ1IsZ0JBQUwsQ0FBc0JTLFdBQXRCLENBQWtDUCxPQUFsQyxDQUEwQ2dDLE9BQWpFOztNQUVBLElBQUksQ0FBQ3ZCLDJCQUEyQixDQUFDd0IsVUFBakMsRUFBNkM7UUFFekMsSUFBS04sV0FBVyxJQUFJLE9BQWhCLElBQTZCQSxXQUFXLElBQUkscUJBQTVDLElBQXVFQSxXQUFXLElBQUksMkJBQTFGLEVBQXdIO1VBRXBILElBQUlBLFdBQVcsSUFBSSxPQUFuQixFQUE0QjtZQUV4QixJQUFNTyxTQUFTLEdBQUdyQixlQUFlLENBQUNzQixtQkFBaEIsQ0FBb0NDLHdCQUF0RDtZQUNBLElBQUlDLHNCQUFzQixTQUExQjtZQUNBLElBQU1DLGNBQWMsR0FBR3pCLGVBQWUsQ0FBQzBCLFFBQXZDOztZQUVBLElBQUlqQyxLQUFJLENBQUNSLGdCQUFMLENBQXNCa0IsNEJBQXRCLENBQW1EaEIsT0FBbkQsQ0FBMkRpQixXQUEzRCxJQUEwRSxVQUE5RSxFQUEwRjtjQUV0Rm9CLHNCQUFzQixHQUFHQyxjQUFjLENBQUNFLE9BQWYsQ0FBdUJ4QyxPQUF2QixDQUErQnlDLFNBQS9CLEdBQ3JCbkMsS0FBSSxDQUFDUixnQkFBTCxDQUFzQlksOEJBQXRCLENBQXFEVixPQUFyRCxDQUE2RFksVUFBN0QsQ0FBd0VaLE9BQXhFLENBQWdGa0IsU0FEcEY7WUFHSCxDQUxELE1BS087Y0FFSG1CLHNCQUFzQixHQUFHQyxjQUFjLENBQUNFLE9BQWYsQ0FBdUJ4QyxPQUF2QixDQUErQjBDLFVBQS9CLEdBQ3JCcEMsS0FBSSxDQUFDUixnQkFBTCxDQUFzQlksOEJBQXRCLENBQXFEVixPQUFyRCxDQUE2RFksVUFBN0QsQ0FBd0VaLE9BQXhFLENBQWdGbUIsVUFEcEY7WUFHSDs7WUFDRE4sZUFBZSxDQUFDc0IsbUJBQWhCLENBQW9DUSwrQkFBcEMsR0FBc0VULFNBQXRFO1lBQ0FyQixlQUFlLENBQUNzQixtQkFBaEIsQ0FBb0NTLDRCQUFwQyxHQUFtRVAsc0JBQW5FO1VBRUg7O1VBRUQsSUFBS1YsV0FBVyxJQUFJLHFCQUFoQixJQUEyQ0EsV0FBVyxJQUFJLDJCQUE5RCxFQUE0RjtZQUV4RnJCLEtBQUksQ0FBQ3VDLHNDQUFMOztZQUNBLElBQUlsQixXQUFXLElBQUkscUJBQW5CLEVBQTBDRixZQUFZLENBQUNxQixjQUFiLENBQTRCLDJCQUE1QjtVQUU3QyxDQTdCbUgsQ0ErQnBIOzs7VUFDQWYsY0FBYyxDQUFDZ0IsWUFBZixDQUE0QkMseUJBQTVCLENBQXNEaEQsT0FBdEQsSUFDSStCLGNBQWMsQ0FBQ2dCLFlBQWYsQ0FBNEJDLHlCQUE1QixDQUFzRGhELE9BQXRELENBQThEYSxlQUFlLENBQUNzQixtQkFBaEIsQ0FBb0NRLCtCQUFsRyxFQUFrSSxXQUFsSSxFQUErSWhCLFdBQS9JLENBREo7UUFHSDtNQUVKOztNQUVEckIsS0FBSSxDQUFDaUIsY0FBTCxHQUFzQjBCLFVBQVUsQ0FBQztRQUU3QjNDLEtBQUksQ0FBQzRDLGNBQUw7TUFFSCxDQUorQixFQUk5QnJELGdDQUo4QixDQUFoQztNQU1BLE9BQU8sS0FBUDtJQUVILENBM0dEOztJQThHUSxzQkFBaUI7TUFFckJTLEtBQUksQ0FBQ2MsV0FBTCxHQUFtQixLQUFuQjtNQUVBLElBQU1LLFlBQVksR0FBR25CLEtBQUksQ0FBQ1IsZ0JBQUwsQ0FBc0JTLFdBQXRCLENBQWtDUCxPQUFsQyxDQUEwQzBCLEtBQS9EO01BQ0EsSUFBTUcsY0FBYyxHQUFHdkIsS0FBSSxDQUFDUixnQkFBTCxDQUFzQlMsV0FBdEIsQ0FBa0NQLE9BQWxDLENBQTBDOEIsT0FBakU7TUFDQSxJQUFNckIsMkJBQTJCLEdBQUdILEtBQUksQ0FBQ1IsZ0JBQUwsQ0FBc0JZLDhCQUF0QixDQUFxRFYsT0FBekY7TUFFQSxJQUFNMkIsV0FBVyxHQUFHRixZQUFZLENBQUNHLGNBQWIsQ0FBNEI1QixPQUFoRCxDQVJxQixDQVVyQjtNQUVBO01BQ0E7TUFDQTtNQUNBOztNQUVBLFFBQVEyQixXQUFSO1FBRUksS0FBSyxxQkFBTDtRQUNBLEtBQUssMkJBQUw7VUFDQTtZQUVJd0IsT0FBTyxDQUFDQyxHQUFSLENBQVksOENBQVosRUFBNER6QixXQUE1RDtZQUNBRixZQUFZLENBQUNxQixjQUFiLENBQTRCLGtCQUE1QjtZQUVBO1VBQ0g7O1FBRUQ7VUFBUztZQUVMLElBQUt4QyxLQUFJLENBQUNlLGVBQUwsQ0FBcUJ0QixLQUFyQixJQUE4Qk8sS0FBSSxDQUFDZSxlQUFMLENBQXFCckIsT0FBcEQsSUFDQ00sS0FBSSxDQUFDZSxlQUFMLENBQXFCckIsT0FBckIsSUFBZ0NNLEtBQUksQ0FBQ2UsZUFBTCxDQUFxQnBCLFFBRDFELEVBQ3FFO2NBRWpFLElBQUl3QixZQUFZLENBQUM0QixZQUFiLENBQTBCckQsT0FBOUIsRUFBdUM7Z0JBRW5DTSxLQUFJLENBQUNnRCxtQkFBTCxHQUZtQyxDQUluQzs7Y0FFSDtZQUVKO1VBQ0o7TUExQkw7SUE4QkgsQ0EvQ087O0lBaURSLDJCQUFzQjtNQUVaLFNBQ0FoRCxLQUFJLENBQUNSLGdCQUFMLENBQXNCUyxXQUF0QixDQUFrQ1AsT0FEbEM7TUFBQSxJQUFReUIsWUFBWSxXQUFwQjtNQUFBLElBQStCWixlQUFlLGNBQTlDO01BR04sSUFBTTBDLFdBQVcsR0FBR2pELEtBQUksQ0FBQ1IsZ0JBQUwsQ0FBc0JrQiw0QkFBdEIsQ0FBbURoQixPQUF2RTtNQUNBLElBQU1TLDJCQUEyQixHQUFHSCxLQUFJLENBQUNSLGdCQUFMLENBQXNCWSw4QkFBdEIsQ0FBcURWLE9BQXpGLENBTmtCLENBT2xCOztNQUVBLElBQUksQ0FBQ3lCLFlBQVksQ0FBQzRCLFlBQWIsQ0FBMEJyRCxPQUEvQixFQUF3QztNQUV4QyxJQUFJcUMsc0JBQUo7TUFDQSxJQUFNQyxjQUFjLEdBQUd6QixlQUFlLENBQUMwQixRQUF2QztNQUVBLElBQU01QixlQUFlLEdBQUdGLDJCQUEyQixDQUFDRyxVQUE1QixDQUF1Q1osT0FBL0Q7O01BQ0EsSUFBSXVELFdBQVcsQ0FBQ3RDLFdBQVosSUFBMkIsVUFBL0IsRUFBMkM7UUFFdkNvQixzQkFBc0IsR0FBR0MsY0FBYyxDQUFDRSxPQUFmLENBQXVCeEMsT0FBdkIsQ0FBK0J5QyxTQUEvQixHQUNyQjlCLGVBQWUsQ0FBQ08sU0FEcEI7TUFHSCxDQUxELE1BS087UUFFSG1CLHNCQUFzQixHQUFHQyxjQUFjLENBQUNFLE9BQWYsQ0FBdUJ4QyxPQUF2QixDQUErQjBDLFVBQS9CLEdBQ3JCL0IsZUFBZSxDQUFDUSxVQURwQjtNQUdIOztNQUVETixlQUFlLENBQUNzQixtQkFBaEIsQ0FBb0NTLDRCQUFwQyxHQUFtRVAsc0JBQW5FOztNQUVBLElBQUksQ0FBQzVCLDJCQUEyQixDQUFDd0IsVUFBakMsRUFBNkM7UUFFekNwQixlQUFlLENBQUNzQixtQkFBaEIsQ0FBb0NDLHdCQUFwQyxHQUNJdkIsZUFBZSxDQUFDc0IsbUJBQWhCLENBQW9DUSwrQkFEeEM7UUFFQTlCLGVBQWUsQ0FBQ3NCLG1CQUFoQixDQUFvQ3FCLHFCQUFwQyxHQUNJM0MsZUFBZSxDQUFDc0IsbUJBQWhCLENBQW9DUyw0QkFEeEM7O1FBR0F0QyxLQUFJLENBQUNtRCxvQkFBTDtNQUVIO0lBRUosQ0F4Q0Q7O0lBMENBLDRCQUF1QjtNQUVuQixJQUFNNUMsZUFBZSxHQUFHUCxLQUFJLENBQUNSLGdCQUFMLENBQXNCUyxXQUF0QixDQUFrQ1AsT0FBbEMsQ0FBMENjLFFBQWxFO01BQ0EsSUFBTXlDLFdBQVcsR0FBR2pELEtBQUksQ0FBQ1IsZ0JBQUwsQ0FBc0JrQiw0QkFBdEIsQ0FBbURoQixPQUF2RTtNQUNBLElBQU1TLDJCQUEyQixHQUFHSCxLQUFJLENBQUNSLGdCQUFMLENBQXNCWSw4QkFBdEIsQ0FBcURWLE9BQXpGO01BRUEsSUFBTVcsZUFBZSxHQUFHRiwyQkFBMkIsQ0FBQ0csVUFBNUIsQ0FBdUNaLE9BQS9EOztNQUVBLElBQUl1RCxXQUFXLENBQUN0QyxXQUFaLElBQTJCLFVBQS9CLEVBQTJDO1FBRXZDO1FBQ0FKLGVBQWUsQ0FBQ3NCLG1CQUFoQixDQUFvQ3VCLGNBQXBDLEdBQXFEL0MsZUFBZSxDQUFDTyxTQUFyRTtNQUVILENBTEQsTUFLTztRQUNIO1FBQ0FMLGVBQWUsQ0FBQ3NCLG1CQUFoQixDQUFvQ3VCLGNBQXBDLEdBQXFEL0MsZUFBZSxDQUFDUSxVQUFyRTtNQUNIO0lBRUosQ0FsQkQ7O0lBb0JRLDhDQUF5QztNQUU3QyxJQUFNViwyQkFBMkIsR0FBR0gsS0FBSSxDQUFDUixnQkFBTCxDQUFzQlksOEJBQXRCLENBQXFEVixPQUF6RjtNQUNBLElBQUl1RCxXQUFXLEdBQUdqRCxLQUFJLENBQUNSLGdCQUFMLENBQXNCa0IsNEJBQXRCLENBQW1EaEIsT0FBckU7TUFDQSxJQUFJMkQsWUFBWSxHQUFHckQsS0FBSSxDQUFDUixnQkFBTCxDQUFzQjhELDJCQUF0QixDQUFrRDVELE9BQXJFO01BRUssY0FBVSxHQUFJMkQsWUFBWSxXQUExQjtNQUNMLElBQUloRCxlQUFlLEdBQUdGLDJCQUEyQixDQUFDRyxVQUE1QixDQUF1Q1osT0FBN0Q7TUFDSyxlQUFXLEdBQWN1RCxXQUFXLFlBQXBDO01BQUEsSUFBYU0sUUFBUSxHQUFJTixXQUFXLFNBQXBDO01BQ0wsSUFBSU8sU0FBSixFQUFlQyxVQUFmOztNQUNBLElBQUk5QyxXQUFXLElBQUksVUFBbkIsRUFBK0I7UUFFM0I2QyxTQUFTLEdBQUduRCxlQUFlLENBQUNPLFNBQTVCO1FBQ0E2QyxVQUFVLEdBQUdSLFdBQVcsQ0FBQ1MsVUFBWixHQUF5QlQsV0FBVyxDQUFDVSxHQUFsRDtNQUVILENBTEQsTUFLTztRQUVISCxTQUFTLEdBQUduRCxlQUFlLENBQUNRLFVBQTVCO1FBQ0E0QyxVQUFVLEdBQUdSLFdBQVcsQ0FBQ1csU0FBWixHQUF3QlgsV0FBVyxDQUFDVSxHQUFqRDtNQUVIOztNQUVELElBQUlFLGVBQWUsR0FBR0osVUFBVSxHQUFJRCxTQUFTLEdBQUdDLFVBQWhEOztNQUNBLElBQUlJLGVBQWUsSUFBS0osVUFBVSxHQUFHUixXQUFXLENBQUNhLE9BQWpELEVBQTJEO1FBQ3ZERCxlQUFlLEdBQUcsQ0FBbEI7TUFDSDs7TUFFRCxJQUFNRSxZQUFZLEdBQUdDLElBQUksQ0FBQ0MsSUFBTCxDQUFVLENBQUNULFNBQVMsR0FBR1AsV0FBVyxDQUFDYSxPQUF6QixJQUFrQ0wsVUFBNUMsQ0FBckI7TUFDQSxJQUFJUyxrQkFBa0IsR0FBR0gsWUFBWSxHQUFHSSxVQUF4QztNQUNBRCxrQkFBa0IsR0FBR0YsSUFBSSxDQUFDSSxHQUFMLENBQVNGLGtCQUFULEVBQTRCWCxRQUFRLEdBQUcsQ0FBdkMsQ0FBckI7TUFDQSxJQUFJYyxJQUFJLEdBQUdILGtCQUFrQixHQUFHQyxVQUFoQztNQUNBRCxrQkFBa0IsSUFBSUcsSUFBdEIsQ0EvQjZDLENBaUM3QztNQUNBO01BQ0E7TUFDQTs7TUFFQSxJQUFJSCxrQkFBa0IsSUFBSSxDQUExQixFQUE2QkwsZUFBZSxHQUFHLENBQWxCLENBdENnQixDQXNDSTs7TUFFakQsSUFBSXRELGVBQWUsR0FBR1AsS0FBSSxDQUFDUixnQkFBTCxDQUFzQlMsV0FBdEIsQ0FBa0NQLE9BQWxDLENBQTBDYyxRQUFoRTtNQUNBRCxlQUFlLENBQUNzQixtQkFBaEIsQ0FBb0NRLCtCQUFwQyxHQUFzRTZCLGtCQUF0RTtNQUNBM0QsZUFBZSxDQUFDc0IsbUJBQWhCLENBQW9DUyw0QkFBcEMsR0FBbUV1QixlQUFuRSxDQTFDNkMsQ0E0QzdDO01BQ0E7SUFFSCxDQS9DTzs7SUF6T0osS0FBS3JFLGdCQUFMLEdBQXdCQSxnQkFBeEI7RUFFSDs7RUF3Ukw7QUFBQyxDQTlSRCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvY3JhZGxlL3Njcm9sbGhhbmRsZXIudHN4P2NlZjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc2Nyb2xsaGFuZGxlci50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAyMSBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG5jb25zdCBTQ1JPTExfVElNRU9VVF9GT1JfT05BRlRFUlNDUk9MTCA9IDUwMFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JvbGxIYW5kbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGNyYWRsZVBhcmFtZXRlcnMpIHtcblxuICAgICAgICB0aGlzLmNyYWRsZVBhcmFtZXRlcnMgPSBjcmFkbGVQYXJhbWV0ZXJzXG5cbiAgICB9XG5cbiAgICBjcmFkbGVQYXJhbWV0ZXJzXG5cbiAgICBzY3JvbGxQb3NpdGlvbnMgPSB7c3RhcnQ6MCwgY3VycmVudDowLCBwcmV2aW91czowLCBwcmV2aW91c3VwZGF0ZTowLCBjdXJyZW50dXBkYXRlOjB9XG5cbiAgICBwcml2YXRlIF9zY3JvbGx0aW1lcmlkID0gbnVsbFxuXG4gICAgcHJpdmF0ZSBpc1Njcm9sbGluZyA9IGZhbHNlXG5cbiAgICBvblNjcm9sbCA9IChlKSA9PiB7XG5cbiAgICAgICAgY29uc3Qgc2lnbmFscyA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy5oYW5kbGVyc1JlZi5jdXJyZW50LmludGVycnVwdHMuc2lnbmFsc1xuXG4gICAgICAgIC8vIGlmIChzaWduYWxzLnBhdXNlU2Nyb2xsaW5nRWZmZWN0cykge1xuXG4gICAgICAgIC8vICAgICByZXR1cm5cblxuICAgICAgICAvLyB9XG5cbiAgICAgICAgY29uc3Qgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLnZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZi5jdXJyZW50XG4gICAgICAgIGNvbnN0IHZpZXdwb3J0RWxlbWVudCA9IHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcy5lbGVtZW50cmVmLmN1cnJlbnRcblxuICAgICAgICBjb25zdCBzY2FmZm9sZEhhbmRsZXIgPSB0aGlzLmNyYWRsZVBhcmFtZXRlcnMuaGFuZGxlcnNSZWYuY3VycmVudC5zY2FmZm9sZFxuXG4gICAgICAgIGNvbnN0IHNjcm9sbFBvc2l0aW9uQ3VycmVudCA9IFxuICAgICAgICAgICAgKHRoaXMuY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQub3JpZW50YXRpb24gPT0gJ3ZlcnRpY2FsJyk/XG4gICAgICAgICAgICAgICAgdmlld3BvcnRFbGVtZW50LnNjcm9sbFRvcDpcbiAgICAgICAgICAgICAgICB2aWV3cG9ydEVsZW1lbnQuc2Nyb2xsTGVmdFxuXG4gICAgICAgIGlmICghdGhpcy5pc1Njcm9sbGluZykge1xuICAgICAgICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IHRydWVcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsUG9zaXRpb25zLnN0YXJ0ID0gc2Nyb2xsUG9zaXRpb25DdXJyZW50XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFBvc2l0aW9ucy5jdXJyZW50dXBkYXRlID0gc2Nyb2xsUG9zaXRpb25DdXJyZW50XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb25zb2xlLmxvZygnb25TY3JvbGwgc2Nyb2xsUG9zaXRpb25DdXJyZW50JyxzY3JvbGxQb3NpdGlvbkN1cnJlbnQpXG5cbiAgICAgICAgaWYgKHNjcm9sbFBvc2l0aW9uQ3VycmVudCA8IDApIHsgLy8gZm9yIFNhZmFyaVxuXG4gICAgICAgICAgICByZXR1cm4gXG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLmJsb2NrU2Nyb2xsUG9zID0gc2Nyb2xsUG9zaXRpb25DdXJyZW50IC8vIFRPRE86IHJlZHVuZGFudD9cblxuICAgICAgICB0aGlzLnNjcm9sbFBvc2l0aW9ucy5wcmV2aW91cyA9IHRoaXMuc2Nyb2xsUG9zaXRpb25zLmN1cnJlbnRcbiAgICAgICAgdGhpcy5zY3JvbGxQb3NpdGlvbnMuY3VycmVudCA9IHNjcm9sbFBvc2l0aW9uQ3VycmVudFxuXG4gICAgICAgIC8vIGlmICh2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXMuaW5kZXggPT0gNikge1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJ3J1bm5pbmcgb25TY3JvbGwgZm9yIGluZGV4LCBzY3JvbGxQb3NpdGlvbnMnLFxuICAgICAgICAvLyAgICAgICAgIHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcy5pbmRleCx0aGlzLnNjcm9sbFBvc2l0aW9ucylcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9zY3JvbGx0aW1lcmlkKVxuXG4gICAgICAgIGlmIChzaWduYWxzLnBhdXNlU2Nyb2xsaW5nRWZmZWN0cykge1xuXG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGVIYW5kbGVyID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLmhhbmRsZXJzUmVmLmN1cnJlbnQuc3RhdGVcbiAgICAgICAgY29uc3QgY3JhZGxlU3RhdGUgPSBzdGF0ZUhhbmRsZXIuY3JhZGxlU3RhdGVSZWYuY3VycmVudFxuXG4gICAgICAgIGNvbnN0IGNvbnRlbnRIYW5kbGVyID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLmhhbmRsZXJzUmVmLmN1cnJlbnQuY29udGVudFxuICAgICAgICBjb25zdCBzZXJ2aWNlSGFuZGxlciA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy5oYW5kbGVyc1JlZi5jdXJyZW50LnNlcnZpY2VcblxuICAgICAgICBpZiAoIXZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcy5pc1Jlc2l6aW5nKSB7XG5cbiAgICAgICAgICAgIGlmICgoY3JhZGxlU3RhdGUgPT0gJ3JlYWR5JykgfHwgKGNyYWRsZVN0YXRlID09ICdyZXBvc2l0aW9uaW5nUmVuZGVyJykgfHwgKGNyYWRsZVN0YXRlID09ICdyZXBvc2l0aW9uaW5nQ29udGludWF0aW9uJykpIHtcblxuICAgICAgICAgICAgICAgIGlmIChjcmFkbGVTdGF0ZSA9PSAncmVhZHknKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbWluZGV4ID0gc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEudGFyZ2V0QXhpc1JlZmVyZW5jZUluZGV4XG4gICAgICAgICAgICAgICAgICAgIGxldCBheGlzVmlzaWJsZVBpeGVsT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNyYWRsZUVsZW1lbnRzID0gc2NhZmZvbGRIYW5kbGVyLmVsZW1lbnRzXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQub3JpZW50YXRpb24gPT0gJ3ZlcnRpY2FsJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBheGlzVmlzaWJsZVBpeGVsT2Zmc2V0ID0gY3JhZGxlRWxlbWVudHMuYXhpc1JlZi5jdXJyZW50Lm9mZnNldFRvcCAtIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JhZGxlUGFyYW1ldGVycy52aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYuY3VycmVudC5lbGVtZW50cmVmLmN1cnJlbnQuc2Nyb2xsVG9wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGF4aXNWaXNpYmxlUGl4ZWxPZmZzZXQgPSBjcmFkbGVFbGVtZW50cy5heGlzUmVmLmN1cnJlbnQub2Zmc2V0TGVmdCAtIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JhZGxlUGFyYW1ldGVycy52aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYuY3VycmVudC5lbGVtZW50cmVmLmN1cnJlbnQuc2Nyb2xsTGVmdFxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEuc2Nyb2xsSW1wbGllZEF4aXNSZWZlcmVuY2VJbmRleCA9IGl0ZW1pbmRleFxuICAgICAgICAgICAgICAgICAgICBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5zY3JvbGxJbXBsaWVkQXhpc1BpeGVsT2Zmc2V0ID0gYXhpc1Zpc2libGVQaXhlbE9mZnNldFxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKChjcmFkbGVTdGF0ZSA9PSAncmVwb3NpdGlvbmluZ1JlbmRlcicpIHx8IChjcmFkbGVTdGF0ZSA9PSAncmVwb3NpdGlvbmluZ0NvbnRpbnVhdGlvbicpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0U2Nyb2xsUmVwb3NpdGlvblJlZmVyZW5jZUluZGV4RGF0YSgpXG4gICAgICAgICAgICAgICAgICAgIGlmIChjcmFkbGVTdGF0ZSA9PSAncmVwb3NpdGlvbmluZ1JlbmRlcicpIHN0YXRlSGFuZGxlci5zZXRDcmFkbGVTdGF0ZSgncmVwb3NpdGlvbmluZ0NvbnRpbnVhdGlvbicpXG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPOiByZS1pbnN0YXRlIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICAgICAgICBzZXJ2aWNlSGFuZGxlci5zZXJ2aWNlQ2FsbHMucmVmZXJlbmNlSW5kZXhDYWxsYmFja1JlZi5jdXJyZW50ICYmIFxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSGFuZGxlci5zZXJ2aWNlQ2FsbHMucmVmZXJlbmNlSW5kZXhDYWxsYmFja1JlZi5jdXJyZW50KHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLnNjcm9sbEltcGxpZWRBeGlzUmVmZXJlbmNlSW5kZXgsJ3Njcm9sbGluZycsIGNyYWRsZVN0YXRlKVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Njcm9sbHRpbWVyaWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblxuICAgICAgICAgICAgdGhpcy5fb25BZnRlclNjcm9sbCgpXG5cbiAgICAgICAgfSxTQ1JPTExfVElNRU9VVF9GT1JfT05BRlRFUlNDUk9MTClcblxuICAgICAgICByZXR1cm4gZmFsc2VcblxuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBfb25BZnRlclNjcm9sbCA9ICgpID0+IHtcblxuICAgICAgICB0aGlzLmlzU2Nyb2xsaW5nID0gZmFsc2VcblxuICAgICAgICBjb25zdCBzdGF0ZUhhbmRsZXIgPSB0aGlzLmNyYWRsZVBhcmFtZXRlcnMuaGFuZGxlcnNSZWYuY3VycmVudC5zdGF0ZVxuICAgICAgICBjb25zdCBjb250ZW50SGFuZGxlciA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy5oYW5kbGVyc1JlZi5jdXJyZW50LmNvbnRlbnRcbiAgICAgICAgY29uc3Qgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLnZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZi5jdXJyZW50XG5cbiAgICAgICAgY29uc3QgY3JhZGxlU3RhdGUgPSBzdGF0ZUhhbmRsZXIuY3JhZGxlU3RhdGVSZWYuY3VycmVudFxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdvbkFmdGVyU2Nyb2xsIGNyYWRsZVN0YXRlJyxjcmFkbGVTdGF0ZSlcblxuICAgICAgICAvLyBpZiAodmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzLmluZGV4ID09IDYpIHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCdydW5uaW5nIG9uQWZ0ZXJTY3JvbGwgZm9yIGluZGV4LCBjcmFkbGVTdGF0ZScsXG4gICAgICAgIC8vICAgICAgICAgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzLmluZGV4LHRoaXMuc2Nyb2xsUG9zaXRpb25zLCBjcmFkbGVTdGF0ZSlcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIHN3aXRjaCAoY3JhZGxlU3RhdGUpIHtcblxuICAgICAgICAgICAgY2FzZSAncmVwb3NpdGlvbmluZ1JlbmRlcic6IFxuICAgICAgICAgICAgY2FzZSAncmVwb3NpdGlvbmluZ0NvbnRpbnVhdGlvbic6XG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2Nyb2xsSGFuZGxlciBjYWxsaW5nIGZpbmlzaHJlcG9zaXRpb24gZnJvbSAnLCBjcmFkbGVTdGF0ZSlcbiAgICAgICAgICAgICAgICBzdGF0ZUhhbmRsZXIuc2V0Q3JhZGxlU3RhdGUoJ2ZpbmlzaHJlcG9zaXRpb24nKVxuXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVmYXVsdDoge1xuXG4gICAgICAgICAgICAgICAgaWYgKCh0aGlzLnNjcm9sbFBvc2l0aW9ucy5zdGFydCAhPSB0aGlzLnNjcm9sbFBvc2l0aW9ucy5jdXJyZW50KSB8fCBcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuc2Nyb2xsUG9zaXRpb25zLmN1cnJlbnQgIT0gdGhpcy5zY3JvbGxQb3NpdGlvbnMucHJldmlvdXMpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlSGFuZGxlci5pc01vdW50ZWRSZWYuY3VycmVudCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVJlZmVyZW5jZURhdGEoKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250ZW50SGFuZGxlci51cGRhdGVDcmFkbGVDb250ZW50KFtdLCAnZW5kb2ZzY3JvbGwnKSAvLyBmb3IgU2FmYXJpIHRvIGNvbXBlbnNhdGUgZm9yIG92ZXJzY3JvbGxcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICB1cGRhdGVSZWZlcmVuY2VEYXRhID0gKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHsgc3RhdGU6c3RhdGVIYW5kbGVyLCBzY2FmZm9sZDpzY2FmZm9sZEhhbmRsZXIgfSBcbiAgICAgICAgICAgID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLmhhbmRsZXJzUmVmLmN1cnJlbnRcblxuICAgICAgICBjb25zdCBjcmFkbGVQcm9wcyA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmLmN1cnJlbnRcbiAgICAgICAgY29uc3Qgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLnZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZi5jdXJyZW50XG4gICAgICAgIC8vIGNvbnN0IGNvbnRlbnRIYW5kbGVyID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLmhhbmRsZXJzUmVmLmN1cnJlbnQuY29udGVudFxuXG4gICAgICAgIGlmICghc3RhdGVIYW5kbGVyLmlzTW91bnRlZFJlZi5jdXJyZW50KSByZXR1cm5cblxuICAgICAgICBsZXQgYXhpc1Zpc2libGVQaXhlbE9mZnNldFxuICAgICAgICBjb25zdCBjcmFkbGVFbGVtZW50cyA9IHNjYWZmb2xkSGFuZGxlci5lbGVtZW50c1xuXG4gICAgICAgIGNvbnN0IHZpZXdwb3J0RWxlbWVudCA9IHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcy5lbGVtZW50cmVmLmN1cnJlbnRcbiAgICAgICAgaWYgKGNyYWRsZVByb3BzLm9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpIHtcblxuICAgICAgICAgICAgYXhpc1Zpc2libGVQaXhlbE9mZnNldCA9IGNyYWRsZUVsZW1lbnRzLmF4aXNSZWYuY3VycmVudC5vZmZzZXRUb3AgLSBcbiAgICAgICAgICAgICAgICB2aWV3cG9ydEVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGF4aXNWaXNpYmxlUGl4ZWxPZmZzZXQgPSBjcmFkbGVFbGVtZW50cy5heGlzUmVmLmN1cnJlbnQub2Zmc2V0TGVmdCAtIFxuICAgICAgICAgICAgICAgIHZpZXdwb3J0RWxlbWVudC5zY3JvbGxMZWZ0XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLnNjcm9sbEltcGxpZWRBeGlzUGl4ZWxPZmZzZXQgPSBheGlzVmlzaWJsZVBpeGVsT2Zmc2V0XG5cbiAgICAgICAgaWYgKCF2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXMuaXNSZXNpemluZykge1xuXG4gICAgICAgICAgICBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS50YXJnZXRBeGlzUmVmZXJlbmNlSW5kZXggPSBcbiAgICAgICAgICAgICAgICBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5zY3JvbGxJbXBsaWVkQXhpc1JlZmVyZW5jZUluZGV4XG4gICAgICAgICAgICBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS50YXJnZXRBeGlzUGl4ZWxPZmZzZXQgPSBcbiAgICAgICAgICAgICAgICBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5zY3JvbGxJbXBsaWVkQXhpc1BpeGVsT2Zmc2V0XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlQmxvY2tTY3JvbGxQb3MoKVxuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHVwZGF0ZUJsb2NrU2Nyb2xsUG9zID0gKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHNjYWZmb2xkSGFuZGxlciA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy5oYW5kbGVyc1JlZi5jdXJyZW50LnNjYWZmb2xkXG4gICAgICAgIGNvbnN0IGNyYWRsZVByb3BzID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLmNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXNSZWYuY3VycmVudFxuICAgICAgICBjb25zdCB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXMgPSB0aGlzLmNyYWRsZVBhcmFtZXRlcnMudmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnRcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHZpZXdwb3J0RWxlbWVudCA9IHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcy5lbGVtZW50cmVmLmN1cnJlbnRcblxuICAgICAgICBpZiAoY3JhZGxlUHJvcHMub3JpZW50YXRpb24gPT0gJ3ZlcnRpY2FsJykge1xuXG4gICAgICAgICAgICAvLyBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5ibG9ja1Njcm9sbFByb3BlcnR5ID0gJ3Njcm9sbFRvcCdcbiAgICAgICAgICAgIHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLmJsb2NrU2Nyb2xsUG9zID0gdmlld3BvcnRFbGVtZW50LnNjcm9sbFRvcFxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5ibG9ja1Njcm9sbFByb3BlcnR5ID0gJ3Njcm9sbExlZnQnXG4gICAgICAgICAgICBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5ibG9ja1Njcm9sbFBvcyA9IHZpZXdwb3J0RWxlbWVudC5zY3JvbGxMZWZ0XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHByaXZhdGUgX3NldFNjcm9sbFJlcG9zaXRpb25SZWZlcmVuY2VJbmRleERhdGEgPSAoKSA9PiB7XG5cbiAgICAgICAgY29uc3Qgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLnZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZi5jdXJyZW50XG4gICAgICAgIGxldCBjcmFkbGVQcm9wcyA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmLmN1cnJlbnRcbiAgICAgICAgbGV0IGNyYWRsZUNvbmZpZyA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbnRlcm5hbFByb3BlcnRpZXNSZWYuY3VycmVudFxuXG4gICAgICAgIGxldCB7Y3Jvc3Njb3VudH0gPSBjcmFkbGVDb25maWdcbiAgICAgICAgbGV0IHZpZXdwb3J0RWxlbWVudCA9IHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcy5lbGVtZW50cmVmLmN1cnJlbnRcbiAgICAgICAgbGV0IHtvcmllbnRhdGlvbiwgbGlzdHNpemV9ID0gY3JhZGxlUHJvcHNcbiAgICAgICAgbGV0IHNjcm9sbFBvcywgY2VsbExlbmd0aFxuICAgICAgICBpZiAob3JpZW50YXRpb24gPT0gJ3ZlcnRpY2FsJykge1xuXG4gICAgICAgICAgICBzY3JvbGxQb3MgPSB2aWV3cG9ydEVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgICAgICAgICBjZWxsTGVuZ3RoID0gY3JhZGxlUHJvcHMuY2VsbEhlaWdodCArIGNyYWRsZVByb3BzLmdhcFxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHNjcm9sbFBvcyA9IHZpZXdwb3J0RWxlbWVudC5zY3JvbGxMZWZ0XG4gICAgICAgICAgICBjZWxsTGVuZ3RoID0gY3JhZGxlUHJvcHMuY2VsbFdpZHRoICsgY3JhZGxlUHJvcHMuZ2FwXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBheGlzUGl4ZWxPZmZzZXQgPSBjZWxsTGVuZ3RoIC0gKHNjcm9sbFBvcyAlIGNlbGxMZW5ndGgpXG4gICAgICAgIGlmIChheGlzUGl4ZWxPZmZzZXQgPT0gKGNlbGxMZW5ndGggKyBjcmFkbGVQcm9wcy5wYWRkaW5nKSkge1xuICAgICAgICAgICAgYXhpc1BpeGVsT2Zmc2V0ID0gMFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYXhpc1Jvd0luZGV4ID0gTWF0aC5jZWlsKChzY3JvbGxQb3MgLSBjcmFkbGVQcm9wcy5wYWRkaW5nKS9jZWxsTGVuZ3RoKVxuICAgICAgICBsZXQgYXhpc1JlZmVyZW5jZUluZGV4ID0gYXhpc1Jvd0luZGV4ICogY3Jvc3Njb3VudFxuICAgICAgICBheGlzUmVmZXJlbmNlSW5kZXggPSBNYXRoLm1pbihheGlzUmVmZXJlbmNlSW5kZXgsbGlzdHNpemUgLSAxKVxuICAgICAgICBsZXQgZGlmZiA9IGF4aXNSZWZlcmVuY2VJbmRleCAlIGNyb3NzY291bnRcbiAgICAgICAgYXhpc1JlZmVyZW5jZUluZGV4IC09IGRpZmZcblxuICAgICAgICAvLyBsZXQgcmVmZXJlbmNlSW5kZXhEYXRhID0ge1xuICAgICAgICAvLyAgICAgaW5kZXg6YXhpc1JlZmVyZW5jZUluZGV4LFxuICAgICAgICAvLyAgICAgYXhpc1Zpc2libGVQaXhlbE9mZnNldDpyZWZlcmVuY2VzY3JvbGxvZmZzZXRcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIGlmIChheGlzUmVmZXJlbmNlSW5kZXggPT0gMCkgYXhpc1BpeGVsT2Zmc2V0ID0gMCAvLyBkZWZlbnNpdmVcblxuICAgICAgICBsZXQgc2NhZmZvbGRIYW5kbGVyID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLmhhbmRsZXJzUmVmLmN1cnJlbnQuc2NhZmZvbGRcbiAgICAgICAgc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEuc2Nyb2xsSW1wbGllZEF4aXNSZWZlcmVuY2VJbmRleCA9IGF4aXNSZWZlcmVuY2VJbmRleFxuICAgICAgICBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5zY3JvbGxJbXBsaWVkQXhpc1BpeGVsT2Zmc2V0ID0gYXhpc1BpeGVsT2Zmc2V0XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3Njcm9sbEhhbmRsZXIgc2V0dGluZyBpbXBsaWVkIHJlcG9zaXRpb25pbmcgYXhpc1JlZmVyZW5jZUluZGV4LCBheGlzUGl4ZWxPZmZzZXQsIGNyYWRsZVJlZmVyZW5jZURhdGEnLFxuICAgICAgICAvLyAgICAgYXhpc1JlZmVyZW5jZUluZGV4LCBheGlzUGl4ZWxPZmZzZXQsIE9iamVjdC5hc3NpZ24oe30sc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEpKVxuXG4gICAgfVxuXG59XG4iXSwibmFtZXMiOlsiU0NST0xMX1RJTUVPVVRfRk9SX09OQUZURVJTQ1JPTEwiLCJjcmFkbGVQYXJhbWV0ZXJzIiwic3RhcnQiLCJjdXJyZW50IiwicHJldmlvdXMiLCJwcmV2aW91c3VwZGF0ZSIsImN1cnJlbnR1cGRhdGUiLCJlIiwic2lnbmFscyIsIl90aGlzIiwiaGFuZGxlcnNSZWYiLCJpbnRlcnJ1cHRzIiwidmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzIiwidmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmIiwidmlld3BvcnRFbGVtZW50IiwiZWxlbWVudHJlZiIsInNjYWZmb2xkSGFuZGxlciIsInNjYWZmb2xkIiwic2Nyb2xsUG9zaXRpb25DdXJyZW50IiwiY3JhZGxlSW5oZXJpdGVkUHJvcGVydGllc1JlZiIsIm9yaWVudGF0aW9uIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImlzU2Nyb2xsaW5nIiwic2Nyb2xsUG9zaXRpb25zIiwiY2xlYXJUaW1lb3V0IiwiX3Njcm9sbHRpbWVyaWQiLCJwYXVzZVNjcm9sbGluZ0VmZmVjdHMiLCJzdGF0ZUhhbmRsZXIiLCJzdGF0ZSIsImNyYWRsZVN0YXRlIiwiY3JhZGxlU3RhdGVSZWYiLCJjb250ZW50SGFuZGxlciIsImNvbnRlbnQiLCJzZXJ2aWNlSGFuZGxlciIsInNlcnZpY2UiLCJpc1Jlc2l6aW5nIiwiaXRlbWluZGV4IiwiY3JhZGxlUmVmZXJlbmNlRGF0YSIsInRhcmdldEF4aXNSZWZlcmVuY2VJbmRleCIsImF4aXNWaXNpYmxlUGl4ZWxPZmZzZXQiLCJjcmFkbGVFbGVtZW50cyIsImVsZW1lbnRzIiwiYXhpc1JlZiIsIm9mZnNldFRvcCIsIm9mZnNldExlZnQiLCJzY3JvbGxJbXBsaWVkQXhpc1JlZmVyZW5jZUluZGV4Iiwic2Nyb2xsSW1wbGllZEF4aXNQaXhlbE9mZnNldCIsIl9zZXRTY3JvbGxSZXBvc2l0aW9uUmVmZXJlbmNlSW5kZXhEYXRhIiwic2V0Q3JhZGxlU3RhdGUiLCJzZXJ2aWNlQ2FsbHMiLCJyZWZlcmVuY2VJbmRleENhbGxiYWNrUmVmIiwic2V0VGltZW91dCIsIl9vbkFmdGVyU2Nyb2xsIiwiY29uc29sZSIsImxvZyIsImlzTW91bnRlZFJlZiIsInVwZGF0ZVJlZmVyZW5jZURhdGEiLCJjcmFkbGVQcm9wcyIsInRhcmdldEF4aXNQaXhlbE9mZnNldCIsInVwZGF0ZUJsb2NrU2Nyb2xsUG9zIiwiYmxvY2tTY3JvbGxQb3MiLCJjcmFkbGVDb25maWciLCJjcmFkbGVJbnRlcm5hbFByb3BlcnRpZXNSZWYiLCJsaXN0c2l6ZSIsInNjcm9sbFBvcyIsImNlbGxMZW5ndGgiLCJjZWxsSGVpZ2h0IiwiZ2FwIiwiY2VsbFdpZHRoIiwiYXhpc1BpeGVsT2Zmc2V0IiwicGFkZGluZyIsImF4aXNSb3dJbmRleCIsIk1hdGgiLCJjZWlsIiwiYXhpc1JlZmVyZW5jZUluZGV4IiwiY3Jvc3Njb3VudCIsIm1pbiIsImRpZmYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/cradle/scrollhandler.tsx\n");

/***/ }),

/***/ "./src/cradle/servicehandler.tsx":
/*!***************************************!*\
  !*** ./src/cradle/servicehandler.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // servicehandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar ServiceHandler =\n/** @class */\nfunction () {\n  function ServiceHandler(cradleParameters) {\n    var _this = this;\n\n    this.getVisibleList = function () {\n      var contentHandler = _this.cradleParameters.handlersRef.current.content;\n      var cradleContent = contentHandler.content;\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffold;\n      var cradleElements = scaffoldHandler.elements;\n      return getVisibleItemsList({\n        itemElementMap: contentHandler.itemElements,\n        viewportElement: viewportInterruptProperties.elementref.current,\n        cradleElements: cradleElements,\n        cradleProps: _this.cradleParameters.cradleInheritedPropertiesRef.current,\n        cradleContent: cradleContent\n      });\n    };\n\n    this.getContentList = function () {\n      var contentHandler = _this.cradleParameters.handlersRef.current.content;\n      var contentlist = Array.from(contentHandler.itemElements);\n      contentlist.sort(function (a, b) {\n        return a[0] < b[0] ? -1 : 1;\n      });\n      return contentlist;\n    };\n\n    this.reload = function () {\n      var signals = _this.cradleParameters.handlersRef.current.interrupts.signals;\n      var stateHandler = _this.cradleParameters.handlersRef.current.state; // signals.pauseCellObserver = true\n\n      signals.pauseTriggerlinesObserver = true;\n      signals.pauseScrollingEffects = true;\n      stateHandler.setCradleState('reload');\n    };\n\n    this.scrollToItem = function (index) {\n      var signals = _this.cradleParameters.handlersRef.current.interrupts.signals;\n      var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffold;\n      var stateHandler = _this.cradleParameters.handlersRef.current.state; // signals.pauseCellObserver = true\n\n      signals.pauseTriggerlinesObserver = true;\n      signals.pauseScrollingEffects = true;\n      scaffoldHandler.cradleReferenceData.targetAxisReferenceIndex = index;\n      stateHandler.setCradleState('doreposition');\n    };\n\n    this.cradleParameters = cradleParameters;\n    this.serviceCalls = cradleParameters.externalCallbacksRef.current;\n  }\n\n  return ServiceHandler;\n}();\n\nexports[\"default\"] = ServiceHandler;\n\nvar getVisibleItemsList = function getVisibleItemsList(_a) {\n  var itemElementMap = _a.itemElementMap,\n      viewportElement = _a.viewportElement,\n      cradleElements = _a.cradleElements,\n      cradleProps = _a.cradleProps,\n      cradleContent = _a.cradleContent;\n  var headElement = cradleElements.headRef.current;\n  var axisElement = cradleElements.axisRef.current;\n  var orientation = cradleProps.orientation;\n  var headlist = cradleContent.headViewComponents;\n  var itemlistindexes = Array.from(itemElementMap.keys());\n  itemlistindexes.sort(function (a, b) {\n    return a < b ? -1 : 1;\n  });\n  var headlistindexes = [];\n\n  for (var _i = 0, headlist_1 = headlist; _i < headlist_1.length; _i++) {\n    var item = headlist_1[_i];\n    headlistindexes.push(parseInt(item.props.index));\n  }\n\n  var list = [];\n  var cradleTop = headElement.offsetTop + axisElement.offsetTop,\n      cradleLeft = headElement.offsetLeft + axisElement.offsetLeft;\n  var scrollblockTopOffset = -viewportElement.scrollTop,\n      scrollblockLeftOffset = -viewportElement.scrollLeft,\n      viewportHeight = viewportElement.offsetHeight,\n      viewportWidth = viewportElement.offsetWidth,\n      viewportTopOffset = -scrollblockTopOffset,\n      viewportBottomOffset = -scrollblockTopOffset + viewportHeight;\n\n  for (var _b = 0, itemlistindexes_1 = itemlistindexes; _b < itemlistindexes_1.length; _b++) {\n    var index = itemlistindexes_1[_b];\n    var element = itemElementMap.get(index).current;\n    var inheadlist = headlistindexes.includes(index);\n    var top_1 = inheadlist ? element.offsetTop : (orientation == 'vertical' ? headElement.offsetHeight : 0) + element.offsetTop,\n        left = inheadlist ? element.offsetLeft : (orientation == 'horizontal' ? headElement.offsetWidth : 0) + element.offsetLeft,\n        width = element.offsetWidth,\n        height = element.offsetHeight,\n        right = left + width,\n        bottom = top_1 + height;\n    var itemTopOffset = scrollblockTopOffset + cradleTop + top_1,\n        // offset from top of viewport\n    itemBottomOffset = scrollblockTopOffset + cradleTop + bottom,\n        // offset from top of viewport\n    itemLeftOffset = scrollblockLeftOffset + cradleLeft + left,\n        itemRightOffset = scrollblockLeftOffset + cradleLeft + right;\n    var isVisible = false; // default\n\n    var topPortion = void 0,\n        bottomPortion = void 0,\n        leftPortion = void 0,\n        rightPortion = void 0;\n\n    if (itemTopOffset < 0 && itemBottomOffset > 0) {\n      orientation == 'vertical' && (isVisible = true);\n      bottomPortion = itemBottomOffset;\n      topPortion = bottomPortion - height;\n    } else if (itemTopOffset >= 0 && itemBottomOffset < viewportHeight) {\n      orientation == 'vertical' && (isVisible = true);\n      topPortion = height;\n      bottomPortion = 0;\n    } else if (itemTopOffset > 0 && itemTopOffset - viewportHeight < 0) {\n      orientation == 'vertical' && (isVisible = true);\n      topPortion = viewportHeight - itemTopOffset;\n      bottomPortion = topPortion - height;\n    } else {\n      if (orientation == 'vertical') continue;\n    }\n\n    if (itemLeftOffset < 0 && itemRightOffset > 0) {\n      orientation == 'horizontal' && (isVisible = true);\n      rightPortion = itemRightOffset;\n      leftPortion = rightPortion - width;\n    } else if (itemLeftOffset >= 0 && itemRightOffset < viewportWidth) {\n      orientation == 'horizontal' && (isVisible = true);\n      leftPortion = width;\n      rightPortion = 0;\n    } else if (itemLeftOffset > 0 && itemLeftOffset - viewportWidth < 0) {\n      orientation == 'horizontal' && (isVisible = true);\n      leftPortion = viewportWidth - itemLeftOffset;\n      rightPortion = leftPortion - width;\n    } else {\n      if (orientation == 'horizontal') continue;\n    }\n\n    var verticalRatio = topPortion > 0 ? topPortion / height : bottomPortion / height,\n        horizontalRatio = leftPortion > 0 ? leftPortion / width : rightPortion / height;\n    var itemData = {\n      index: index,\n      isVisible: isVisible,\n      top: top_1,\n      right: right,\n      bottom: bottom,\n      left: left,\n      width: width,\n      height: height,\n      itemTopOffset: itemTopOffset,\n      itemBottomOffset: itemBottomOffset,\n      topPortion: topPortion,\n      bottomPortion: bottomPortion,\n      itemLeftOffset: itemLeftOffset,\n      itemRightOffset: itemRightOffset,\n      leftPortion: leftPortion,\n      rightPortion: rightPortion,\n      verticalRatio: verticalRatio,\n      horizontalRatio: horizontalRatio\n    };\n    list.push(itemData);\n  }\n\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/servicehandler.tsx\n");

/***/ }),

/***/ "./src/cradle/statehandler.tsx":
/*!*************************************!*\
  !*** ./src/cradle/statehandler.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // statehandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar StateHandler =\n/** @class */\nfunction () {\n  function StateHandler(cradleParameters) {\n    this.cradleParameters = cradleParameters;\n    var internalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n    this.setCradleState = internalProperties.setCradleState;\n    this.cradleStateRef = internalProperties.cradleStateRef;\n    this.isMountedRef = internalProperties.isMountedRef;\n  }\n\n  return StateHandler;\n}();\n\nexports[\"default\"] = StateHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3N0YXRlaGFuZGxlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7QUFDQTs7Ozs7O0FBRUE7QUFBQTtBQUFBO0VBRUksc0JBQVlBLGdCQUFaLEVBQTRCO0lBRXpCLEtBQUtBLGdCQUFMLEdBQXdCQSxnQkFBeEI7SUFFQSxJQUFNQyxrQkFBa0IsR0FBR0QsZ0JBQWdCLENBQUNFLDJCQUFqQixDQUE2Q0MsT0FBeEU7SUFFQSxLQUFLQyxjQUFMLEdBQXNCSCxrQkFBa0IsQ0FBQ0csY0FBekM7SUFDQSxLQUFLQyxjQUFMLEdBQXNCSixrQkFBa0IsQ0FBQ0ksY0FBekM7SUFDQSxLQUFLQyxZQUFMLEdBQW9CTCxrQkFBa0IsQ0FBQ0ssWUFBdkM7RUFFRjs7RUFRTDtBQUFDLENBcEJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9jcmFkbGUvc3RhdGVoYW5kbGVyLnRzeD82Mzk1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0YXRlaGFuZGxlci50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAyMSBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZUhhbmRsZXIge1xuXG4gICAgY29uc3RydWN0b3IoY3JhZGxlUGFyYW1ldGVycykge1xuXG4gICAgICAgdGhpcy5jcmFkbGVQYXJhbWV0ZXJzID0gY3JhZGxlUGFyYW1ldGVyc1xuXG4gICAgICAgY29uc3QgaW50ZXJuYWxQcm9wZXJ0aWVzID0gY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbnRlcm5hbFByb3BlcnRpZXNSZWYuY3VycmVudFxuXG4gICAgICAgdGhpcy5zZXRDcmFkbGVTdGF0ZSA9IGludGVybmFsUHJvcGVydGllcy5zZXRDcmFkbGVTdGF0ZVxuICAgICAgIHRoaXMuY3JhZGxlU3RhdGVSZWYgPSBpbnRlcm5hbFByb3BlcnRpZXMuY3JhZGxlU3RhdGVSZWZcbiAgICAgICB0aGlzLmlzTW91bnRlZFJlZiA9IGludGVybmFsUHJvcGVydGllcy5pc01vdW50ZWRSZWZcbiAgICAgICBcbiAgICB9XG5cbiAgICBjcmFkbGVQYXJhbWV0ZXJzXG5cbiAgICBjcmFkbGVTdGF0ZVJlZlxuICAgIHNldENyYWRsZVN0YXRlXG4gICAgaXNNb3VudGVkUmVmXG5cbn1cbiJdLCJuYW1lcyI6WyJjcmFkbGVQYXJhbWV0ZXJzIiwiaW50ZXJuYWxQcm9wZXJ0aWVzIiwiY3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzUmVmIiwiY3VycmVudCIsInNldENyYWRsZVN0YXRlIiwiY3JhZGxlU3RhdGVSZWYiLCJpc01vdW50ZWRSZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/cradle/statehandler.tsx\n");

/***/ }),

/***/ "./src/cradle/styleshandler.tsx":
/*!**************************************!*\
  !*** ./src/cradle/styleshandler.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval(" // styleshandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar StylesHandler =\n/** @class */\nfunction () {\n  function StylesHandler(cradleParameters) {\n    var _this = this;\n\n    this.setCradleStyles = function (_a) {\n      var orientation = _a.orientation,\n          cellHeight = _a.cellHeight,\n          cellWidth = _a.cellWidth,\n          gap = _a.gap,\n          padding = _a.padding,\n          crosscount = _a.crosscount,\n          viewportheight = _a.viewportheight,\n          viewportwidth = _a.viewportwidth,\n          userstyles = _a.userstyles,\n          triggerlineOffset = _a.triggerlineOffset; // TODO: change 'cradle' to 'head' and 'tail' for more granularity\n      // TODO: triggerline offset for head styles experimentally set to negative\n      //    to assure a brealline is always available for notification\n\n      var headstyles = _this.getHeadStyles(gap, padding, orientation, userstyles.cradle);\n\n      var tailstyles = _this.getTailStyles(gap, padding, orientation, userstyles.cradle);\n\n      var axisstyles = _this.getAxisStyles(gap, padding, orientation, userstyles.axis);\n\n      var triggerlineheadstyles = _this.getTriggerlineHeadStyles(orientation, cellHeight, cellWidth, triggerlineOffset, gap);\n\n      var triggerlinetailstyles = _this.getTriggerlineTailStyles(orientation, cellHeight, cellWidth, triggerlineOffset, gap);\n\n      var cradledividerstyles = {\n        zIndex: 1,\n        position: 'absolute',\n        width: '100%',\n        height: '100%',\n        boxShadow: '0 0 5px 3px red'\n      };\n      headstyles.gridGap = gap + 'px';\n      tailstyles.gridGap = gap + 'px';\n\n      if (orientation == 'horizontal') {\n        headstyles.padding = \"\".concat(padding, \"px 0 \").concat(padding, \"px \").concat(padding, \"px\");\n        headstyles.width = 'auto';\n        headstyles.height = '100%';\n        headstyles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n        //     sets length of horiz cradle items in one line (row), not multi-row config\n\n        headstyles.gridTemplateRows = cellHeight ? \"repeat(\".concat(crosscount, \", minmax(\").concat(cellHeight, \"px, 1fr))\") : 'auto';\n        headstyles.gridTemplateColumns = 'none';\n        tailstyles.padding = \"\".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px 0\");\n        tailstyles.width = 'auto';\n        tailstyles.height = '100%';\n        tailstyles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n        //     sets length of horiz cradle items in one line (row), not multi-row config\n\n        tailstyles.gridTemplateRows = cellHeight ? \"repeat(\".concat(crosscount, \", minmax(\").concat(cellHeight, \"px, 1fr))\") : 'auto';\n        tailstyles.gridTemplateColumns = 'none';\n      } else if (orientation == 'vertical') {\n        headstyles.padding = \"\".concat(padding, \"px \").concat(padding, \"px 0 \").concat(padding, \"px\");\n        headstyles.width = '100%';\n        headstyles.height = 'auto';\n        headstyles.gridAutoFlow = 'row';\n        headstyles.gridTemplateRows = 'none';\n        headstyles.gridTemplateColumns = cellWidth ? \"repeat(auto-fit, minmax(\".concat(cellWidth, \"px, 1fr))\") : 'auto';\n        tailstyles.padding = \"0 \".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px\");\n        tailstyles.width = '100%';\n        tailstyles.height = 'auto';\n        tailstyles.gridAutoFlow = 'row';\n        tailstyles.gridTemplateRows = 'none';\n        tailstyles.gridTemplateColumns = cellWidth ? \"repeat(auto-fit, minmax(\".concat(cellWidth, \"px, 1fr))\") : 'auto';\n      }\n\n      return [headstyles, tailstyles, axisstyles, triggerlineheadstyles, triggerlinetailstyles, cradledividerstyles];\n    };\n\n    this.getHeadStyles = function (gap, padding, orientation, userheadstyles) {\n      var bottom, left, top, right;\n\n      if (orientation == 'vertical') {\n        bottom = 0;\n        left = 0;\n        right = 0;\n        top = 'auto';\n      } else {\n        bottom = 0;\n        left = 'auto';\n        right = 0;\n        top = 0;\n      }\n\n      return __assign(__assign({}, {\n        position: 'absolute',\n        backgroundColor: 'blue',\n        display: 'grid',\n        gridGap: gap + 'px',\n        padding: padding + 'px',\n        justifyContent: 'start',\n        alignContent: 'start',\n        boxSizing: 'border-box',\n        bottom: bottom,\n        left: left,\n        right: right,\n        top: top\n      }), userheadstyles);\n    };\n\n    this.getTailStyles = function (gap, padding, orientation, usertailstyles) {\n      var bottom, left, top, right;\n\n      if (orientation == 'vertical') {\n        bottom = 'auto';\n        left = 0;\n        right = 0;\n        top = 0;\n      } else {\n        bottom = 0;\n        left = 0;\n        right = 'auto';\n        top = 0;\n      }\n\n      return __assign(__assign({}, {\n        position: 'absolute',\n        backgroundColor: 'blue',\n        display: 'grid',\n        gridGap: gap + 'px',\n        padding: padding + 'px',\n        justifyContent: 'start',\n        alignContent: 'start',\n        boxSizing: 'border-box',\n        top: top,\n        left: left,\n        right: right,\n        bottom: bottom\n      }), usertailstyles);\n    };\n\n    this.getAxisStyles = function (gap, padding, orientation, useraxisstyles) {\n      var top, left, width, height; // for axis\n\n      if (orientation == 'vertical') {\n        top = padding + 'px';\n        left = 'auto';\n        width = '100%';\n        height = 'auto';\n      } else {\n        top = 'auto';\n        left = padding + 'px';\n        width = 0;\n        height = '100%';\n      }\n\n      return __assign(__assign({}, {\n        position: 'relative',\n        top: top,\n        left: left,\n        width: width,\n        height: height\n      }), useraxisstyles);\n    };\n\n    this.getTriggerlineTailStyles = function (orientation, cellHeight, cellWidth, triggerlineOffset, gap) {\n      var transform; // for position relative to axis\n\n      var position = 'absolute',\n          // backgroundColor = 'blue',\n      width = '100%',\n          height = '100%';\n\n      if (orientation == 'horizontal') {\n        // width = '5px'\n        // height = '100%'\n        transform = \"translateX(\".concat(triggerlineOffset + 'px', \")\");\n      } else {\n        // width = '100%'\n        // height = '5px'\n        transform = \"translateY(\".concat(triggerlineOffset + 'px', \")\");\n      }\n\n      return __assign({}, {\n        position: position,\n        width: width,\n        height: height,\n        transform: transform // backgroundColor\n\n      });\n    };\n\n    this.getTriggerlineHeadStyles = function (orientation, cellHeight, cellWidth, triggerlineOffset, gap) {\n      var transform; // for position relative to axis\n      // console.log('orientation', orientation)\n\n      var position = 'absolute',\n          // backgroundColor = 'blue',\n      width = '100%',\n          height = '100%';\n\n      if (orientation == 'horizontal') {\n        // width = '5px'\n        // height = '100%'\n        transform = \"translateX(\".concat(-(cellWidth + gap - triggerlineOffset) + 'px', \")\");\n      } else {\n        // width = '100%'\n        // height = '5px'\n        transform = \"translateY(\".concat(-(cellHeight + gap - triggerlineOffset) + 'px', \")\");\n      }\n\n      return __assign({}, {\n        position: position,\n        width: width,\n        height: height,\n        transform: transform // backgroundColor,\n\n      });\n    };\n\n    this.cradleParameters = cradleParameters;\n  }\n\n  return StylesHandler;\n}();\n\nexports[\"default\"] = StylesHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/styleshandler.tsx\n");

/***/ }),

/***/ "./src/infinitegridscroller.tsx":
/*!**************************************!*\
  !*** ./src/infinitegridscroller.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("// infinitegridscroller.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\n/*\n    BUG: reposition chip appears outside viewport when list partly hidden\n    BUG: repositioningRender is broken.\n    BUG: triggerlineOffset can fail when >= cellLength -- optimize this; impose correction\n    BUG: in one instance embedded list triggerline failed to trigger start of scroll response\n    BUG: sometimes inaccurate shifting of content type re cradle bounds\n    BUG: occasional position recalculation bugs, particularly in full screen mode\n    BUG: there is a delay in setting triggerline interceptors (or the axis) under heavy load\n    TODO:\n    - trigger reposition when head or tail are paritially intersecting,not when totally hidden\n        - or when both triggerlines are hidden\n    - reload from/to for insertions and substitutions\n    - provide user with isReparenting flag to be able to reset scroll\n    - check use of useCallback\n    - resize triggered by root only, unless variable\n    - intersection applied to cradle only\n    - test for two root portals\n    - nested list overflows port boundaries on android FF\n    - promote system constants to 'advanced' parameter, eg RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE\n    - calc minwidth by form factor\n    - review scroller-frame for appropriate dimensions - s/b inset:0;position:absolute\n    - add grid-template-rows: max-content to parent for safari issue grid-auto-flow: column not filling column\n*/\n\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __importDefault(__webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\"));\n\nvar scrollblock_1 = __importDefault(__webpack_require__(/*! ./scrollblock */ \"./src/scrollblock.tsx\"));\n\nvar cradle_1 = __importDefault(__webpack_require__(/*! ./cradle */ \"./src/cradle.tsx\")); // -------------------[ global session ID generator ]----------------\n\n\nvar globalScrollerID = 0;\n\nvar getSessionID = function getSessionID() {\n  return globalScrollerID++;\n}; // ===================================[ INITIALIZE ]===========================\n\n/*\n    The job of InfiniteGridScroller is to pass parameters to dependents.\n    Viewport contains the scrollblock, fullsize for adjusted cell height/width, which in turn contains the cradle\n        - a component that contains CellShells (which contain displayed items or transitional placeholders).\n    The CellShells are skeletons which contain the host content components.\n\n    Host content is created in a portal cache (via PortalAgent) and then portal'd to its host CellShell\n\n    Scrollblock virtually represents the entirety of the list, and is the scroller\n\n    Cradle contains the list items, and is 'virtualized' -- it appears as\n      though it is the full scrollblock, but in fact it is only slightly larger than\n      the viewport.\n    - individual items are framed by CellShell, managed by Cradle\n\n    Overall the infinitegridscroller manages the (often asynchronous) interactions of the\n    components of the mechanism\n*/\n\n\nvar InfiniteGridScroller = function InfiniteGridScroller(props) {\n  // ------------------[ normalize properties ]--------------------\n  // const props = Object.assign({},args) // args should be immutable\n  var orientation = props.orientation,\n      // vertical or horizontal\n  gap = props.gap,\n      // space between grid cells, not including the leading and trailing edges\n  padding = props.padding,\n      // the space between the items and the viewport, applied to the cradle\n  cellHeight = props.cellHeight,\n      // the outer pixel height - literal for vertical; approximate for horizontal\n  cellWidth = props.cellWidth,\n      // the outer pixel width - literal for horizontal; approximate for vertical\n  layout = props.layout,\n      // uniform, variable (don't use axis), dynamic (uses axis)\n  dense = props.dense,\n      // boolean (only with preload)\n  runwaySize = props.runwaySize,\n      // the number of items outside the view of each side of the viewport \n  // -- gives time to assemble before display\n  listSize = props.listSize,\n      // the exact number of the size of the virtual list; will eventually be changable.\n  defaultVisibleIndex = props.indexOffset,\n      // the 0-based starting index of the list, when first loaded\n  getItem = props.getItem,\n      // function provided by host - parameter is index number, set by system; return value is \n  // host-selected component or promise of a component\n  functions = props.functions,\n      // properties to get direct access to some component utilites, optional\n  placeholder = props.placeholder,\n      // a sparse component to stand in for content until the content arrives; \n  // optional, replaces default placeholder\n  styles = props.styles,\n      // passive style over-rides (eg. color, opacity); has \n  // properties viewport, scrollblock, cradle, or scrolltracker\n  // to come...\n  // cache = \"preload\" or \"keepload\" or \"none\"\n  // advanced, technical settings like useRequestIdleCallback, and RequestIdleCallbackTimeout\n  scrollerName = props.scrollerName,\n      // for debugging\n  triggerlineOffset = props.triggerlineOffset,\n      indexOffset = props.indexOffset;\n  var gridSpecs = {\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    layout: layout,\n    dense: dense\n  }; // set defaults\n\n  functions !== null && functions !== void 0 ? functions : functions = {};\n  styles !== null && styles !== void 0 ? styles : styles = {};\n  gap !== null && gap !== void 0 ? gap : gap = 0;\n  padding !== null && padding !== void 0 ? padding : padding = 0;\n  runwaySize !== null && runwaySize !== void 0 ? runwaySize : runwaySize = 3;\n  runwaySize = Math.max(0, runwaySize);\n  indexOffset !== null && indexOffset !== void 0 ? indexOffset : indexOffset = 0;\n  listSize !== null && listSize !== void 0 ? listSize : listSize = 0;\n  listSize = Math.max(0, listSize);\n  layout !== null && layout !== void 0 ? layout : layout = 'uniform'; // constraints\n\n  indexOffset = Math.max(0, indexOffset); // non-negative\n\n  indexOffset = Math.min(listSize - 1, indexOffset); // not larger than list\n\n  if (!['horizontal', 'vertical'].includes(orientation)) {\n    orientation = 'vertical';\n  } // TODO: rationalize with cellHeight & cellWidth; must be less than half\n\n\n  triggerlineOffset !== null && triggerlineOffset !== void 0 ? triggerlineOffset : triggerlineOffset = 10;\n  var gridSpecsRef = (0, react_1.useRef)(gridSpecs);\n  var stylesRef = (0, react_1.useRef)(styles);\n  var functionsRef = (0, react_1.useRef)(functions); // satisfy React Object.is for attributes\n\n  if (!compareProps(gridSpecs, gridSpecsRef.current)) {\n    gridSpecsRef.current = gridSpecs;\n  }\n\n  if (!compareProps(styles, stylesRef.current)) {\n    stylesRef.current = styles;\n  }\n\n  if (!compareProps(functions, functionsRef.current)) {\n    functionsRef.current = functions;\n  }\n\n  freeze(functionsRef.current, stylesRef.current, gridSpecsRef.current); // for mount\n\n  var scrollerSessionIDRef = (0, react_1.useRef)(null);\n\n  if (scrollerSessionIDRef.current === null) {\n    scrollerSessionIDRef.current = getSessionID();\n  }\n\n  var scrollerID = scrollerSessionIDRef.current; // --------------------[ render ]---------------------\n\n  return react_1[\"default\"].createElement(react_1[\"default\"].StrictMode, null, react_1[\"default\"].createElement(viewport_1[\"default\"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    scrollerID: scrollerID\n  }, react_1[\"default\"].createElement(scrollblock_1[\"default\"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    scrollerID: scrollerID,\n    listsize: listSize\n  }, react_1[\"default\"].createElement(cradle_1[\"default\"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    scrollerID: scrollerID,\n    scrollerName: scrollerName,\n    listsize: listSize,\n    functions: functionsRef.current,\n    defaultVisibleIndex: defaultVisibleIndex,\n    getItem: getItem,\n    placeholder: placeholder,\n    runwayRowcountSpec: runwaySize,\n    triggerlineOffset: triggerlineOffset\n  }))));\n};\n\nexports[\"default\"] = InfiniteGridScroller; // utilities\n\nfunction freeze() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var _a = Array.from(arguments),\n      arg = _a[0],\n      rest = _a.slice(1);\n\n  Object.freeze(arg);\n\n  if (rest.length == 0) {\n    return;\n  }\n\n  freeze.apply(void 0, rest);\n}\n\nfunction compareProps(obj1, obj2) {\n  var keys = Object.keys(obj1);\n  var same;\n\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n\n    if (!Object.is(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/infinitegridscroller.tsx\n");

/***/ }),

/***/ "./src/placeholder.tsx":
/*!*****************************!*\
  !*** ./src/placeholder.tsx ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // placeholder.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar Placeholder = function Placeholder(_a) {\n  var index = _a.index,\n      listsize = _a.listsize,\n      error = _a.error;\n  var stylesRef = (0, react_1.useRef)({\n    position: 'relative',\n    boxSizing: 'border-box',\n    backgroundColor: 'cyan',\n    border: '2px solid black',\n    height: '100%',\n    width: '100%'\n  });\n  var itemStylesRef = (0, react_1.useRef)({\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: '3px',\n    opacity: .5,\n    borderRadius: '8px',\n    backgroundColor: 'white',\n    margin: '3px',\n    fontSize: 'smaller'\n  });\n  return react_1[\"default\"].createElement(\"div\", {\n    style: stylesRef.current\n  }, !error ? react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, index + 1, \"/\", listsize) : react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, \"item is not available at this time\"));\n};\n\nexports[\"default\"] = Placeholder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGxhY2Vob2xkZXIudHN4LmpzIiwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQSxJQUFNQSxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFDQyxFQUFELEVBQXlCO01BQXZCQyxLQUFLO01BQUVDLFFBQVE7TUFBRUMsS0FBSztFQUV4QyxJQUFNQyxTQUFTLEdBQUcsb0JBQU87SUFDckJDLFFBQVEsRUFBQyxVQURZO0lBRXJCQyxTQUFTLEVBQUMsWUFGVztJQUdyQkMsZUFBZSxFQUFDLE1BSEs7SUFJckJDLE1BQU0sRUFBQyxpQkFKYztJQUtyQkMsTUFBTSxFQUFDLE1BTGM7SUFNckJDLEtBQUssRUFBQztFQU5lLENBQVAsQ0FBbEI7RUFRQSxJQUFNQyxhQUFhLEdBQUcsb0JBQ2xCO0lBQ0lOLFFBQVEsRUFBQyxVQURiO0lBRUlPLEdBQUcsRUFBQyxDQUZSO0lBR0lDLElBQUksRUFBQyxDQUhUO0lBSUlDLE9BQU8sRUFBQyxLQUpaO0lBS0lDLE9BQU8sRUFBQyxFQUxaO0lBTUlDLFlBQVksRUFBQyxLQU5qQjtJQU9JVCxlQUFlLEVBQUMsT0FQcEI7SUFRSVUsTUFBTSxFQUFDLEtBUlg7SUFTSUMsUUFBUSxFQUFDO0VBVGIsQ0FEa0IsQ0FBdEI7RUFjQSxPQUFPQztJQUFLQyxLQUFLLEVBQUloQixTQUFTLENBQUNpQjtFQUF4QixHQUNELENBQUNsQixLQUFELEdBQ0VnQjtJQUFLQyxLQUFLLEVBQUlULGFBQWEsQ0FBQ1U7RUFBNUIsR0FBc0NwQixLQUFLLEdBQUcsQ0FBOUMsT0FBa0RDLFFBQWxELENBREYsR0FFRWlCO0lBQUtDLEtBQUssRUFBSVQsYUFBYSxDQUFDVTtFQUE1QixHQUFtQyxvQ0FBbkMsQ0FIRCxDQUFQO0FBT0gsQ0EvQkQ7O0FBaUNBQyxrQkFBQUEsR0FBZXZCLFdBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vc3JjL3BsYWNlaG9sZGVyLnRzeD8xMTMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBsYWNlaG9sZGVyLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDIwIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbmltcG9ydCBSZWFjdCwge3VzZVJlZiwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcblxuY29uc3QgUGxhY2Vob2xkZXIgPSAoe2luZGV4LCBsaXN0c2l6ZSwgZXJyb3J9KSA9PiB7XG5cbiAgICBjb25zdCBzdHlsZXNSZWYgPSB1c2VSZWYoe1xuICAgICAgICBwb3NpdGlvbjoncmVsYXRpdmUnLFxuICAgICAgICBib3hTaXppbmc6J2JvcmRlci1ib3gnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6J2N5YW4nLFxuICAgICAgICBib3JkZXI6JzJweCBzb2xpZCBibGFjaycsXG4gICAgICAgIGhlaWdodDonMTAwJScsXG4gICAgICAgIHdpZHRoOicxMDAlJ1xuICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcylcbiAgICBjb25zdCBpdGVtU3R5bGVzUmVmID0gdXNlUmVmKFxuICAgICAgICB7XG4gICAgICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOjAsXG4gICAgICAgICAgICBsZWZ0OjAsXG4gICAgICAgICAgICBwYWRkaW5nOiczcHgnLFxuICAgICAgICAgICAgb3BhY2l0eTouNSxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czonOHB4JyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjond2hpdGUnLCBcbiAgICAgICAgICAgIG1hcmdpbjonM3B4JyxcbiAgICAgICAgICAgIGZvbnRTaXplOidzbWFsbGVyJyxcbiAgICAgICAgfSBhcyBSZWFjdC5DU1NQcm9wZXJ0aWVzXG4gICAgKVxuXG4gICAgcmV0dXJuIDxkaXYgc3R5bGUgPSB7c3R5bGVzUmVmLmN1cnJlbnR9PlxuICAgICAgICB7ICFlcnJvcj9cbiAgICAgICAgICAgIDxkaXYgc3R5bGUgPSB7aXRlbVN0eWxlc1JlZi5jdXJyZW50fT57aW5kZXggKyAxfS97bGlzdHNpemV9PC9kaXY+OlxuICAgICAgICAgICAgPGRpdiBzdHlsZSA9IHtpdGVtU3R5bGVzUmVmLmN1cnJlbnR9Pml0ZW0gaXMgbm90IGF2YWlsYWJsZSBhdCB0aGlzIHRpbWU8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICA8L2Rpdj5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGxhY2Vob2xkZXIiXSwibmFtZXMiOlsiUGxhY2Vob2xkZXIiLCJfYSIsImluZGV4IiwibGlzdHNpemUiLCJlcnJvciIsInN0eWxlc1JlZiIsInBvc2l0aW9uIiwiYm94U2l6aW5nIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiaGVpZ2h0Iiwid2lkdGgiLCJpdGVtU3R5bGVzUmVmIiwidG9wIiwibGVmdCIsInBhZGRpbmciLCJvcGFjaXR5IiwiYm9yZGVyUmFkaXVzIiwibWFyZ2luIiwiZm9udFNpemUiLCJyZWFjdF8xIiwic3R5bGUiLCJjdXJyZW50IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/placeholder.tsx\n");

/***/ }),

/***/ "./src/scrollblock.tsx":
/*!*****************************!*\
  !*** ./src/scrollblock.tsx ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("// scrollblock.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\n/*\n    TODO\n    update length for cradle adjustments based on variable length changes in cell shells.\n\n*/\n\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\");\n\nvar Scrollblock = function Scrollblock(_a) {\n  var children = _a.children,\n      listsize = _a.listsize,\n      gridSpecs = _a.gridSpecs,\n      styles = _a.styles,\n      scrollerID = _a.scrollerID;\n  var orientation = gridSpecs.orientation,\n      gap = gridSpecs.gap,\n      padding = gridSpecs.padding,\n      cellHeight = gridSpecs.cellHeight,\n      cellWidth = gridSpecs.cellWidth,\n      layout = gridSpecs.layout,\n      dense = gridSpecs.dense; // -------------------------[ context and state ]-------------------------\n\n  var viewportInterruptProperties = (0, react_1.useContext)(viewport_1.ViewportInterrupt); // console.log('running scrollblock')\n  // -----------------------------------[ data heap ]-------------------------\n\n  var baseScrollBlockLengthRef = (0, react_1.useRef)(null); // const scrollblockRef = useRef(null)\n\n  var divlinerstyleRef = (0, react_1.useRef)(Object.assign({\n    backgroundColor: 'white',\n    position: 'relative'\n  }, styles.cradle));\n\n  var _b = (0, react_1.useState)(divlinerstyleRef.current),\n      divlinerstyle = _b[0],\n      saveDivlinerstyle = _b[1]; // to trigger render\n\n\n  var _c = viewportInterruptProperties.viewportDimensions,\n      width = _c.width,\n      height = _c.height;\n  (0, react_1.useLayoutEffect)(function () {\n    // console.log('updating scrollblock divlinerstyleRef')\n    updateBaseBlockLength();\n    divlinerstyleRef.current = updateScrollblockStyles(orientation, divlinerstyleRef, baseScrollBlockLengthRef);\n    saveDivlinerstyle(divlinerstyleRef.current);\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]);\n  var updateBaseBlockLength = (0, react_1.useCallback)(function () {\n    var basescrollblocklength = calcBaseScrollblockLength({\n      orientation: orientation,\n      viewportheight: height,\n      viewportwidth: width,\n      listsize: listsize,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding\n    });\n    baseScrollBlockLengthRef.current = basescrollblocklength;\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]);\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'scrollblock',\n    style: divlinerstyleRef.current\n  }, children);\n}; // Scrollblock\n// all the parameters can affect the length\n\n\nvar calcBaseScrollblockLength = function calcBaseScrollblockLength(_a) {\n  var orientation = _a.orientation,\n      viewportheight = _a.viewportheight,\n      viewportwidth = _a.viewportwidth,\n      listsize = _a.listsize,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      padding = _a.padding; // dependents of orientation\n\n  var crosslength;\n  var cellLength;\n  var viewportcrosslength;\n\n  if (orientation == 'vertical') {\n    crosslength = cellWidth + gap;\n    cellLength = cellHeight + gap;\n    viewportcrosslength = viewportwidth;\n  } else {\n    // 'horizontal'\n    crosslength = cellHeight + gap;\n    cellLength = cellWidth + gap;\n    viewportcrosslength = viewportheight;\n  } // adjustments to viewportcrosslength\n\n\n  viewportcrosslength -= padding * 2;\n  viewportcrosslength += gap;\n  if (viewportcrosslength < crosslength) viewportcrosslength = crosslength; // must be at least one\n\n  var crosscount = Math.floor(viewportcrosslength / crosslength);\n  var listlength = Math.ceil(listsize / crosscount);\n  var straightlength = listlength * cellLength - (listlength > 0 ? gap : 0) + padding * 2;\n  return straightlength;\n};\n\nvar updateScrollblockStyles = function updateScrollblockStyles(orientation, stylesRef, baseScrollblocklengthRef) {\n  var localstyles = Object.assign({}, stylesRef.current);\n  var height;\n  var width;\n\n  if (orientation == 'horizontal') {\n    height = '100%';\n    width = baseScrollblocklengthRef.current + 'px';\n  } else if (orientation == 'vertical') {\n    height = baseScrollblocklengthRef.current + 'px';\n    width = '100%';\n  }\n\n  localstyles.height = height;\n  localstyles.width = width;\n  return localstyles;\n};\n\nexports[\"default\"] = Scrollblock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE9BQTNCLENBQWxCO0VBQ0EsSUFBSUssTUFBSjtFQUNBLElBQUlELEtBQUo7O0VBQ0EsSUFBSUksV0FBVyxJQUFJLFlBQW5CLEVBQWlDO0lBQzdCSCxNQUFNLEdBQUcsTUFBVDtJQUNBRCxLQUFLLEdBQUdxQix3QkFBd0IsQ0FBQ3pCLE9BQXpCLEdBQW1DLElBQTNDO0VBQ0gsQ0FIRCxNQUdPLElBQUlRLFdBQVcsSUFBSSxVQUFuQixFQUErQjtJQUNsQ0gsTUFBTSxHQUFHb0Isd0JBQXdCLENBQUN6QixPQUF6QixHQUFtQyxJQUE1QztJQUNBSSxLQUFLLEdBQUcsTUFBUjtFQUNIOztFQUNEc0IsV0FBVyxDQUFDckIsTUFBWixHQUFxQkEsTUFBckI7RUFDQXFCLFdBQVcsQ0FBQ3RCLEtBQVosR0FBb0JBLEtBQXBCO0VBRUEsT0FBT3NCLFdBQVA7QUFDSCxDQWhCRDs7QUFrQkFDLGtCQUFBQSxHQUFlakQsV0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvc2Nyb2xsYmxvY2sudHN4PzJmYTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc2Nyb2xsYmxvY2sudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMTktMjAyMiBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG4vKlxuICAgIFRPRE9cbiAgICB1cGRhdGUgbGVuZ3RoIGZvciBjcmFkbGUgYWRqdXN0bWVudHMgYmFzZWQgb24gdmFyaWFibGUgbGVuZ3RoIGNoYW5nZXMgaW4gY2VsbCBzaGVsbHMuXG5cbiovXG5cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHt1c2VDb250ZXh0LCB1c2VSZWYsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCwgdXNlU3RhdGV9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBWaWV3cG9ydEludGVycnVwdCB9IGZyb20gJy4vdmlld3BvcnQnXG5cbmNvbnN0IFNjcm9sbGJsb2NrID0gKHtcbiAgICBjaGlsZHJlbixcbiAgICBsaXN0c2l6ZSxcbiAgICBncmlkU3BlY3MsIFxuICAgIHN0eWxlcyxcbiAgICBzY3JvbGxlcklELFxufSkgPT4ge1xuXG4gICAgY29uc3Qge1xuICAgICAgICBvcmllbnRhdGlvbixcbiAgICAgICAgZ2FwLFxuICAgICAgICBwYWRkaW5nLFxuICAgICAgICBjZWxsSGVpZ2h0LFxuICAgICAgICBjZWxsV2lkdGgsXG4gICAgICAgIGxheW91dCxcbiAgICAgICAgZGVuc2UsXG4gICAgfSA9IGdyaWRTcGVjc1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgY29udGV4dCBhbmQgc3RhdGUgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBjb25zdCB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXMgPSB1c2VDb250ZXh0KFZpZXdwb3J0SW50ZXJydXB0KVxuICAgIC8vIGNvbnNvbGUubG9nKCdydW5uaW5nIHNjcm9sbGJsb2NrJylcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBkYXRhIGhlYXAgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBjb25zdCBiYXNlU2Nyb2xsQmxvY2tMZW5ndGhSZWYgPSB1c2VSZWYobnVsbClcbiAgICAvLyBjb25zdCBzY3JvbGxibG9ja1JlZiA9IHVzZVJlZihudWxsKVxuICAgIGNvbnN0IGRpdmxpbmVyc3R5bGVSZWYgPSB1c2VSZWYoXG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIHtcblxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOid3aGl0ZScsXG4gICAgICAgICAgICBwb3NpdGlvbjoncmVsYXRpdmUnLFxuICAgICAgICAgICAgXG4gICAgICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcywgc3R5bGVzLmNyYWRsZSlcblxuICAgIClcbiAgICBjb25zdCBbZGl2bGluZXJzdHlsZSxzYXZlRGl2bGluZXJzdHlsZV0gPSB1c2VTdGF0ZShkaXZsaW5lcnN0eWxlUmVmLmN1cnJlbnQpIC8vIHRvIHRyaWdnZXIgcmVuZGVyXG5cbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcy52aWV3cG9ydERpbWVuc2lvbnNcbiAgICBcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd1cGRhdGluZyBzY3JvbGxibG9jayBkaXZsaW5lcnN0eWxlUmVmJylcbiAgICAgICAgdXBkYXRlQmFzZUJsb2NrTGVuZ3RoKClcbiAgICAgICAgZGl2bGluZXJzdHlsZVJlZi5jdXJyZW50ID0gXG4gICAgICAgICAgICB1cGRhdGVTY3JvbGxibG9ja1N0eWxlcyhcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbixcbiAgICAgICAgICAgICAgICBkaXZsaW5lcnN0eWxlUmVmLFxuICAgICAgICAgICAgICAgIGJhc2VTY3JvbGxCbG9ja0xlbmd0aFJlZlxuICAgICAgICAgICAgKVxuICAgICAgICBzYXZlRGl2bGluZXJzdHlsZShkaXZsaW5lcnN0eWxlUmVmLmN1cnJlbnQpXG5cbiAgICB9LFtcbiAgICAgICAgb3JpZW50YXRpb24sXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGxpc3RzaXplLFxuICAgICAgICBjZWxsSGVpZ2h0LFxuICAgICAgICBjZWxsV2lkdGgsXG4gICAgICAgIGdhcCxcbiAgICAgICAgcGFkZGluZyxcbiAgICBdKVxuXG4gICAgY29uc3QgdXBkYXRlQmFzZUJsb2NrTGVuZ3RoID0gdXNlQ2FsbGJhY2soXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJhc2VzY3JvbGxibG9ja2xlbmd0aCA9IFxuICAgICAgICAgICAgICAgIGNhbGNCYXNlU2Nyb2xsYmxvY2tMZW5ndGgoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRoZWlnaHQ6aGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnR3aWR0aDp3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RzaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG5cbiAgICAgICAgICAgIGJhc2VTY3JvbGxCbG9ja0xlbmd0aFJlZi5jdXJyZW50ID0gYmFzZXNjcm9sbGJsb2NrbGVuZ3RoXG5cbiAgICAgICAgfSxbXG4gICAgICAgICAgICBvcmllbnRhdGlvbixcbiAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgbGlzdHNpemUsXG4gICAgICAgICAgICBjZWxsSGVpZ2h0LFxuICAgICAgICAgICAgY2VsbFdpZHRoLFxuICAgICAgICAgICAgZ2FwLFxuICAgICAgICAgICAgcGFkZGluZyxcbiAgICAgICBdXG4gICAgKVxuXG4gICAgcmV0dXJuIDxkaXYgZGF0YS10eXBlID0gJ3Njcm9sbGJsb2NrJyBzdHlsZT17ZGl2bGluZXJzdHlsZVJlZi5jdXJyZW50fT57Y2hpbGRyZW59PC9kaXY+XG5cbn0gLy8gU2Nyb2xsYmxvY2tcblxuLy8gYWxsIHRoZSBwYXJhbWV0ZXJzIGNhbiBhZmZlY3QgdGhlIGxlbmd0aFxuY29uc3QgY2FsY0Jhc2VTY3JvbGxibG9ja0xlbmd0aCA9ICh7XG4gICAgICAgIG9yaWVudGF0aW9uLFxuICAgICAgICB2aWV3cG9ydGhlaWdodCxcbiAgICAgICAgdmlld3BvcnR3aWR0aCxcbiAgICAgICAgbGlzdHNpemUsXG4gICAgICAgIGNlbGxIZWlnaHQsXG4gICAgICAgIGNlbGxXaWR0aCxcbiAgICAgICAgZ2FwLFxuICAgICAgICBwYWRkaW5nLFxuICAgIH0pID0+IHtcblxuICAgIC8vIGRlcGVuZGVudHMgb2Ygb3JpZW50YXRpb25cbiAgICBsZXQgY3Jvc3NsZW5ndGhcbiAgICBsZXQgY2VsbExlbmd0aFxuICAgIGxldCB2aWV3cG9ydGNyb3NzbGVuZ3RoXG4gICAgaWYgKG9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpIHtcblxuICAgICAgICBjcm9zc2xlbmd0aCA9IGNlbGxXaWR0aCArIGdhcFxuICAgICAgICBjZWxsTGVuZ3RoID0gY2VsbEhlaWdodCArIGdhcFxuICAgICAgICB2aWV3cG9ydGNyb3NzbGVuZ3RoID0gdmlld3BvcnR3aWR0aCBcblxuICAgIH0gZWxzZSB7IC8vICdob3Jpem9udGFsJ1xuXG4gICAgICAgIGNyb3NzbGVuZ3RoID0gY2VsbEhlaWdodCArIGdhcFxuICAgICAgICBjZWxsTGVuZ3RoID0gY2VsbFdpZHRoICsgZ2FwXG4gICAgICAgIHZpZXdwb3J0Y3Jvc3NsZW5ndGggPSB2aWV3cG9ydGhlaWdodFxuXG4gICAgfVxuICAgIC8vIGFkanVzdG1lbnRzIHRvIHZpZXdwb3J0Y3Jvc3NsZW5ndGhcbiAgICB2aWV3cG9ydGNyb3NzbGVuZ3RoIC09IChwYWRkaW5nICogMilcbiAgICB2aWV3cG9ydGNyb3NzbGVuZ3RoICs9IGdhcFxuXG4gICAgaWYgKHZpZXdwb3J0Y3Jvc3NsZW5ndGggPCBjcm9zc2xlbmd0aCkgdmlld3BvcnRjcm9zc2xlbmd0aCA9IGNyb3NzbGVuZ3RoIC8vIG11c3QgYmUgYXQgbGVhc3Qgb25lXG4gICAgbGV0IGNyb3NzY291bnQgPSBNYXRoLmZsb29yKHZpZXdwb3J0Y3Jvc3NsZW5ndGgvY3Jvc3NsZW5ndGgpXG5cbiAgICBsZXQgbGlzdGxlbmd0aCA9IE1hdGguY2VpbChsaXN0c2l6ZS9jcm9zc2NvdW50KVxuXG4gICAgbGV0IHN0cmFpZ2h0bGVuZ3RoID0gKGxpc3RsZW5ndGggKiBjZWxsTGVuZ3RoKSAtIFxuICAgICAgICAoKGxpc3RsZW5ndGggPiAwKT9cbiAgICAgICAgICAgIGdhcDpcbiAgICAgICAgICAgIDApIFxuICAgICAgICArIChwYWRkaW5nICogMilcblxuICAgIHJldHVybiBzdHJhaWdodGxlbmd0aFxuXG59XG5cbmNvbnN0IHVwZGF0ZVNjcm9sbGJsb2NrU3R5bGVzID0gKG9yaWVudGF0aW9uLHN0eWxlc1JlZixiYXNlU2Nyb2xsYmxvY2tsZW5ndGhSZWYpID0+IHtcblxuICAgIGxldCBsb2NhbHN0eWxlcyA9IE9iamVjdC5hc3NpZ24oe30sc3R5bGVzUmVmLmN1cnJlbnQpIGFzIFJlYWN0LkNTU1Byb3BlcnRpZXNcbiAgICBsZXQgaGVpZ2h0IFxuICAgIGxldCB3aWR0aFxuICAgIGlmIChvcmllbnRhdGlvbiA9PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgaGVpZ2h0ID0gJzEwMCUnXG4gICAgICAgIHdpZHRoID0gYmFzZVNjcm9sbGJsb2NrbGVuZ3RoUmVmLmN1cnJlbnQgKyAncHgnXG4gICAgfSBlbHNlIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG4gICAgICAgIGhlaWdodCA9IGJhc2VTY3JvbGxibG9ja2xlbmd0aFJlZi5jdXJyZW50ICsgJ3B4J1xuICAgICAgICB3aWR0aCA9ICcxMDAlJ1xuICAgIH1cbiAgICBsb2NhbHN0eWxlcy5oZWlnaHQgPSBoZWlnaHRcbiAgICBsb2NhbHN0eWxlcy53aWR0aCA9IHdpZHRoXG5cbiAgICByZXR1cm4gbG9jYWxzdHlsZXNcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsYmxvY2tcbiJdLCJuYW1lcyI6WyJTY3JvbGxibG9jayIsIl9hIiwiY2hpbGRyZW4iLCJsaXN0c2l6ZSIsImdyaWRTcGVjcyIsInN0eWxlcyIsInNjcm9sbGVySUQiLCJnYXAiLCJwYWRkaW5nIiwiY2VsbEhlaWdodCIsImNlbGxXaWR0aCIsImxheW91dCIsImRlbnNlIiwidmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzIiwidmlld3BvcnRfMSIsImJhc2VTY3JvbGxCbG9ja0xlbmd0aFJlZiIsImRpdmxpbmVyc3R5bGVSZWYiLCJPYmplY3QiLCJhc3NpZ24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJwb3NpdGlvbiIsImNyYWRsZSIsImN1cnJlbnQiLCJkaXZsaW5lcnN0eWxlIiwic2F2ZURpdmxpbmVyc3R5bGUiLCJ2aWV3cG9ydERpbWVuc2lvbnMiLCJ3aWR0aCIsImhlaWdodCIsInVwZGF0ZUJhc2VCbG9ja0xlbmd0aCIsInVwZGF0ZVNjcm9sbGJsb2NrU3R5bGVzIiwib3JpZW50YXRpb24iLCJiYXNlc2Nyb2xsYmxvY2tsZW5ndGgiLCJjYWxjQmFzZVNjcm9sbGJsb2NrTGVuZ3RoIiwidmlld3BvcnRoZWlnaHQiLCJ2aWV3cG9ydHdpZHRoIiwicmVhY3RfMSIsInN0eWxlIiwiY3Jvc3NsZW5ndGgiLCJjZWxsTGVuZ3RoIiwidmlld3BvcnRjcm9zc2xlbmd0aCIsImNyb3NzY291bnQiLCJNYXRoIiwiZmxvb3IiLCJsaXN0bGVuZ3RoIiwiY2VpbCIsInN0cmFpZ2h0bGVuZ3RoIiwic3R5bGVzUmVmIiwiYmFzZVNjcm9sbGJsb2NrbGVuZ3RoUmVmIiwibG9jYWxzdHlsZXMiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scrollblock.tsx\n");

/***/ }),

/***/ "./src/scrolltracker.tsx":
/*!*******************************!*\
  !*** ./src/scrolltracker.tsx ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // scrolltracker.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar ScrollTracker = function ScrollTracker(_a) {\n  var top = _a.top,\n      left = _a.left,\n      offset = _a.offset,\n      listsize = _a.listsize,\n      styles = _a.styles;\n  var trackdata = \"\".concat(offset + 1, \"/\").concat(listsize);\n  var styleRef = (0, react_1.useRef)(Object.assign({\n    top: top + 'px',\n    left: left + 'px',\n    position: 'fixed',\n    zIndex: 3,\n    backgroundColor: 'white',\n    border: '1px solid gray',\n    borderRadius: '10px',\n    fontSize: 'smaller',\n    padding: '3px'\n  }, styles.scrolltracker));\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-name\": 'scrolltracker',\n    style: styleRef.current\n  }, trackdata);\n};\n\nexports[\"default\"] = ScrollTracker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nyb2xsdHJhY2tlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBLElBQU1BLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ0MsRUFBRCxFQUF3QztNQUFyQ0MsR0FBRztNQUFFQyxJQUFJO01BQUVDLE1BQU07TUFBRUMsUUFBUTtNQUFFQyxNQUFNO0VBRXhELElBQUlDLFNBQVMsR0FBRyxVQUFHSCxNQUFNLEdBQUcsQ0FBWixFQUFhLEdBQWIsRUFBYUksTUFBYixDQUFpQkgsUUFBakIsQ0FBaEI7RUFFQSxJQUFJSSxRQUFRLEdBQUcsb0JBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0lBQ2hDVCxHQUFHLEVBQUVBLEdBQUcsR0FBRyxJQURxQjtJQUVoQ0MsSUFBSSxFQUFFQSxJQUFJLEdBQUcsSUFGbUI7SUFHaENTLFFBQVEsRUFBQyxPQUh1QjtJQUloQ0MsTUFBTSxFQUFDLENBSnlCO0lBS2hDQyxlQUFlLEVBQUMsT0FMZ0I7SUFNaENDLE1BQU0sRUFBRSxnQkFOd0I7SUFPaENDLFlBQVksRUFBQyxNQVBtQjtJQVFoQ0MsUUFBUSxFQUFDLFNBUnVCO0lBU2hDQyxPQUFPLEVBQUM7RUFUd0IsQ0FBZCxFQVVHWixNQUFNLENBQUNhLGFBVlYsQ0FBUCxDQUFmO0VBWUEsT0FBT0M7SUFBQSxhQUFpQixlQUFqQjtJQUFpQ0MsS0FBSyxFQUFJWixRQUFRLENBQUNhO0VBQW5ELEdBQThEZixTQUE5RCxDQUFQO0FBQ0gsQ0FqQkQ7O0FBbUJBZ0Isa0JBQUFBLEdBQWV2QixhQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9zY3JvbGx0cmFja2VyLnRzeD9mZjgxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNjcm9sbHRyYWNrZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMjAgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuaW1wb3J0IFJlYWN0LCB7dXNlUmVmfSBmcm9tICdyZWFjdCdcblxuY29uc3QgU2Nyb2xsVHJhY2tlciA9ICh7IHRvcCwgbGVmdCwgb2Zmc2V0LCBsaXN0c2l6ZSwgc3R5bGVzIH0pID0+IHtcblxuICAgIGxldCB0cmFja2RhdGEgPSBgJHtvZmZzZXQgKyAxfS8ke2xpc3RzaXplfWBcblxuICAgIGxldCBzdHlsZVJlZiA9IHVzZVJlZihPYmplY3QuYXNzaWduKHtcbiAgICAgICAgdG9wOiB0b3AgKyAncHgnLFxuICAgICAgICBsZWZ0OiBsZWZ0ICsgJ3B4JyxcbiAgICAgICAgcG9zaXRpb246J2ZpeGVkJyxcbiAgICAgICAgekluZGV4OjMsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjond2hpdGUnLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgZ3JheScsXG4gICAgICAgIGJvcmRlclJhZGl1czonMTBweCcsXG4gICAgICAgIGZvbnRTaXplOidzbWFsbGVyJyxcbiAgICAgICAgcGFkZGluZzonM3B4J1xuICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcyxzdHlsZXMuc2Nyb2xsdHJhY2tlcikpXG5cbiAgICByZXR1cm4gPGRpdiBkYXRhLW5hbWUgPSAnc2Nyb2xsdHJhY2tlcicgc3R5bGUgPSB7c3R5bGVSZWYuY3VycmVudH0gPnt0cmFja2RhdGF9PC9kaXY+XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbFRyYWNrZXIiXSwibmFtZXMiOlsiU2Nyb2xsVHJhY2tlciIsIl9hIiwidG9wIiwibGVmdCIsIm9mZnNldCIsImxpc3RzaXplIiwic3R5bGVzIiwidHJhY2tkYXRhIiwiY29uY2F0Iiwic3R5bGVSZWYiLCJPYmplY3QiLCJhc3NpZ24iLCJwb3NpdGlvbiIsInpJbmRleCIsImJhY2tncm91bmRDb2xvciIsImJvcmRlciIsImJvcmRlclJhZGl1cyIsImZvbnRTaXplIiwicGFkZGluZyIsInNjcm9sbHRyYWNrZXIiLCJyZWFjdF8xIiwic3R5bGUiLCJjdXJyZW50IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scrolltracker.tsx\n");

/***/ }),

/***/ "./src/viewport.tsx":
/*!**************************!*\
  !*** ./src/viewport.tsx ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("// viewport.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\n/*\n    The role of viewport is to provide data to its children (scrollblock and cradle),\n    and act as the visible screen portal of the list being shown\n*/\n\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ViewportInterrupt = void 0;\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nexports.ViewportInterrupt = react_1[\"default\"].createContext(null); // for children\n\nvar resize_observer_1 = __webpack_require__(/*! @juggle/resize-observer */ \"./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n\nvar cradle_1 = __webpack_require__(/*! ./cradle */ \"./src/cradle.tsx\");\n\nvar ResizeObserver = window['ResizeObserver'] || resize_observer_1.ResizeObserver; // control constant\n\nvar RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE = 250;\n\nvar Viewport = function Viewport(_a) {\n  // -----------------------[ initialize ]------------------\n  var children = _a.children,\n      gridSpecs = _a.gridSpecs,\n      styles = _a.styles,\n      scrollerID = _a.scrollerID;\n  var orientation = gridSpecs.orientation,\n      gap = gridSpecs.gap,\n      padding = gridSpecs.padding,\n      cellHeight = gridSpecs.cellHeight,\n      cellWidth = gridSpecs.cellWidth,\n      layout = gridSpecs.layout,\n      dense = gridSpecs.dense;\n\n  var _b = (0, react_1.useState)('setup'),\n      viewportState = _b[0],\n      setViewportState = _b[1]; // setup, resizing, resized, render\n\n\n  var viewportStateRef = (0, react_1.useRef)(null); // for useCallback -> resizeCallback scope\n\n  viewportStateRef.current = viewportState; // this is only set if viewport is a child of an infiniteScroller\n\n  var parentPortalHandler = (0, react_1.useContext)(cradle_1.CradlePortalsContext);\n  var isMountedRef = (0, react_1.useRef)(true); // monitor for unmounted\n\n  (0, react_1.useEffect)(function () {\n    // unmount\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  var viewportdivRef = (0, react_1.useRef)(null); // viewportInterruptPropertiesRef is passed as a resizing interrupt (through context) to children\n  // initialize\n\n  var viewportInterruptPropertiesRef = (0, react_1.useRef)({\n    portal: null,\n    isResizing: false,\n    index: null,\n    viewportDimensions: null,\n    elementref: null\n  }); // --------------------[ resizer setup ]-----------------------\n\n  var resizeTimeridRef = (0, react_1.useRef)(null);\n  var isResizingRef = (0, react_1.useRef)(false);\n  var resizeObserverRef = (0, react_1.useRef)(null); // set up resizeObserver\n\n  (0, react_1.useEffect)(function () {\n    // initialize\n    resizeObserverRef.current = new ResizeObserver(resizeCallback);\n    resizeObserverRef.current.observe(viewportdivRef.current); // unmount\n\n    return function () {\n      resizeObserverRef.current.disconnect();\n    };\n  }, []); // used by resizeObserver; generates interrupt\n\n  var resizeCallback = (0, react_1.useCallback)(function (entries) {\n    if (viewportStateRef.current == 'setup') {\n      return;\n    }\n\n    var target = entries[0].target; // first register shouldn't generate interrupt\n\n    if (!target.dataset.initialized) {\n      target.dataset.initialized = true;\n      return;\n    } // generate interrupt response, if initiating resize\n\n\n    if (!isResizingRef.current) {\n      viewportInterruptPropertiesRef.current.isResizing = isResizingRef.current = true; // new object creation triggers a realtime interrupt message to cradle through context\n\n      viewportInterruptPropertiesRef.current = Object.assign({}, viewportInterruptPropertiesRef.current);\n      if (isMountedRef.current) setViewportState('resizing');\n    }\n\n    clearTimeout(resizeTimeridRef.current);\n    resizeTimeridRef.current = setTimeout(function () {\n      isResizingRef.current = false;\n\n      if (isMountedRef.current) {\n        setViewportState('resized');\n      }\n    }, RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE);\n  }, []); // -------------------[ set portal for non-root viewports ]-------------\n  // sets portal in viewportInterruptPropertiesRef\n\n  (0, react_1.useEffect)(function () {\n    if (!parentPortalHandler) return; // root viewport; has no portal\n\n    var portalindex;\n    var element = viewportdivRef.current;\n\n    while (element) {\n      if (element.dataset && element.dataset.type == 'portalcontainer') {\n        // set portal & exit\n        portalindex = parseInt(element.dataset.index);\n        viewportInterruptPropertiesRef.current.portal = parentPortalHandler.getPortal(portalindex);\n        viewportInterruptPropertiesRef.current.index = portalindex;\n        break;\n      } else {\n        element = element.parentElement;\n      }\n    }\n\n    if (!element) {\n      console.log('ERROR: parent portalcontainer not found');\n      return;\n    }\n  }, []); // ----------------------------------[ calculate config values ]--------------------------------\n\n  var divlinerstyleRef = (0, react_1.useRef)(null); // initialize with inherited styles\n\n  divlinerstyleRef.current = (0, react_1.useMemo)(function () {\n    return Object.assign({\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      overflow: 'auto',\n      backgroundColor: 'red'\n    }, styles.viewport);\n  }, [styles.viewport]); // update with config values\n\n  divlinerstyleRef.current = (0, react_1.useMemo)(function () {\n    // TODO: gap\n    var mincrosslength = calcMinViewportCrossLength(orientation, cellWidth, cellHeight, gap, padding);\n    var styles = Object.assign({}, divlinerstyleRef.current); // avoid readonly\n\n    if (orientation == 'vertical') {\n      styles.minWidth = mincrosslength + 'px';\n      styles.minHeight = 'auto';\n    } else {\n      styles.minWidth = 'auto';\n      styles.minHeight = mincrosslength + 'px';\n    }\n\n    return styles;\n  }, [orientation, cellWidth, cellHeight, gap, padding]); // update viewportInterruptPropertiesRef; add viewport dimensions\n\n  viewportInterruptPropertiesRef.current = (0, react_1.useMemo)(function () {\n    if (viewportState == 'setup') return viewportInterruptPropertiesRef.current;\n\n    var _a = viewportdivRef.current.getBoundingClientRect(),\n        top = _a.top,\n        right = _a.right,\n        bottom = _a.bottom,\n        left = _a.left;\n\n    var width = right - left;\n    var height = bottom - top; // TODO this is a duplicate setting procedure with interrupthandler.tsx cradleIntersectionObserverCallback\n\n    var localViewportData = {\n      viewportDimensions: {\n        top: top,\n        right: right,\n        bottom: bottom,\n        left: left,\n        width: width,\n        height: height\n      },\n      elementref: viewportdivRef,\n      isResizing: isResizingRef.current\n    }; // trigger context change with new object\n\n    var viewportdataobject = Object.assign({}, viewportInterruptPropertiesRef.current, localViewportData); // console.log('updating viewportInterruptPropertiesRef from useMemo')\n\n    return viewportdataobject;\n  }, [orientation, isResizingRef.current, viewportState]); // --------------------[ state processing ]---------------------------\n\n  (0, react_1.useLayoutEffect)(function () {\n    switch (viewportState) {\n      case 'resized':\n      case 'setup':\n        {\n          setViewportState('render');\n          break;\n        }\n    }\n  }, [viewportState]); // ----------------------[ render ]--------------------------------\n\n  return react_1[\"default\"].createElement(exports.ViewportInterrupt.Provider, {\n    value: viewportInterruptPropertiesRef.current\n  }, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'viewport',\n    \"data-scrollerid\": scrollerID,\n    style: divlinerstyleRef.current,\n    ref: viewportdivRef\n  }, viewportState != 'setup' && children));\n}; // Viewport\n// establish minimum width/height for the viewport -- approximately one item\n// gap only applies with multi-width items, therefore not used in calculations\n\n\nvar calcMinViewportCrossLength = function calcMinViewportCrossLength(orientation, cellWidth, cellHeight, gap, padding) {\n  var crosslength, cellLength;\n\n  if (orientation == 'vertical') {\n    cellLength = cellWidth;\n  } else {\n    cellLength = cellHeight;\n  }\n\n  crosslength = cellLength + padding * 2;\n  return crosslength;\n};\n\nexports[\"default\"] = Viewport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RCxVQUFVLEdBQUdoRSxVQUFiO0VBQ0g7O0VBQ0QrRCxXQUFXLEdBQUdDLFVBQVUsR0FBSWpFLE9BQU8sR0FBRyxDQUF0QztFQUVBLE9BQU9nRSxXQUFQO0FBRUgsQ0FiRDs7QUFlQTlFLGtCQUFBQSxHQUFlTyxRQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy92aWV3cG9ydC50c3g/MGRlMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB2aWV3cG9ydC50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAxOS0yMDIyIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbi8qXG4gICAgVGhlIHJvbGUgb2Ygdmlld3BvcnQgaXMgdG8gcHJvdmlkZSBkYXRhIHRvIGl0cyBjaGlsZHJlbiAoc2Nyb2xsYmxvY2sgYW5kIGNyYWRsZSksXG4gICAgYW5kIGFjdCBhcyB0aGUgdmlzaWJsZSBzY3JlZW4gcG9ydGFsIG9mIHRoZSBsaXN0IGJlaW5nIHNob3duXG4qL1xuXG4ndXNlIHN0cmljdCdcblxuaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QsIHVzZU1lbW8sIHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0fSBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGNvbnN0IFZpZXdwb3J0SW50ZXJydXB0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKSAvLyBmb3IgY2hpbGRyZW5cblxuaW1wb3J0IHsgUmVzaXplT2JzZXJ2ZXIgYXMgUmVzaXplT2JzZXJ2ZXJQb2xseWZpbGwgfSBmcm9tICdAanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlcidcblxuaW1wb3J0IHsgQ3JhZGxlUG9ydGFsc0NvbnRleHQgYXMgUGFyZW50Q3JhZGxlUG9ydGFsc0NvbnRleHQgfSBmcm9tICcuL2NyYWRsZSdcblxuY29uc3QgUmVzaXplT2JzZXJ2ZXIgPSB3aW5kb3dbJ1Jlc2l6ZU9ic2VydmVyJ10gfHwgUmVzaXplT2JzZXJ2ZXJQb2xseWZpbGxcblxuLy8gY29udHJvbCBjb25zdGFudFxuY29uc3QgUkVTSVpFX1RJTUVPVVRfRk9SX09OQUZURVJTUkVTSVpFID0gMjUwXG5cbmNvbnN0IFZpZXdwb3J0ID0gKHtcbiAgICBjaGlsZHJlbiwgXG4gICAgZ3JpZFNwZWNzLFxuICAgIHN0eWxlcyxcbiAgICBzY3JvbGxlcklELFxufSkgPT4ge1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIGluaXRpYWxpemUgXS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgY29uc3Qge1xuICAgICAgICBvcmllbnRhdGlvbixcbiAgICAgICAgZ2FwLFxuICAgICAgICBwYWRkaW5nLFxuICAgICAgICBjZWxsSGVpZ2h0LFxuICAgICAgICBjZWxsV2lkdGgsXG4gICAgICAgIGxheW91dCxcbiAgICAgICAgZGVuc2UsXG4gICAgfSA9IGdyaWRTcGVjc1xuXG4gICAgY29uc3QgW3ZpZXdwb3J0U3RhdGUsc2V0Vmlld3BvcnRTdGF0ZV0gPSB1c2VTdGF0ZSgnc2V0dXAnKSAvLyBzZXR1cCwgcmVzaXppbmcsIHJlc2l6ZWQsIHJlbmRlclxuXG4gICAgY29uc3Qgdmlld3BvcnRTdGF0ZVJlZiA9IHVzZVJlZihudWxsKSAvLyBmb3IgdXNlQ2FsbGJhY2sgLT4gcmVzaXplQ2FsbGJhY2sgc2NvcGVcbiAgICB2aWV3cG9ydFN0YXRlUmVmLmN1cnJlbnQgPSB2aWV3cG9ydFN0YXRlXG5cbiAgICAvLyB0aGlzIGlzIG9ubHkgc2V0IGlmIHZpZXdwb3J0IGlzIGEgY2hpbGQgb2YgYW4gaW5maW5pdGVTY3JvbGxlclxuICAgIGNvbnN0IHBhcmVudFBvcnRhbEhhbmRsZXIgPSB1c2VDb250ZXh0KFBhcmVudENyYWRsZVBvcnRhbHNDb250ZXh0KTtcblxuICAgIGNvbnN0IGlzTW91bnRlZFJlZiA9IHVzZVJlZih0cnVlKSAvLyBtb25pdG9yIGZvciB1bm1vdW50ZWRcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG5cbiAgICAgICAgLy8gdW5tb3VudFxuICAgICAgICByZXR1cm4gKCkgPT4ge2lzTW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2V9XG5cbiAgICB9LFtdKVxuXG4gICAgY29uc3Qgdmlld3BvcnRkaXZSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIC8vIHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZiBpcyBwYXNzZWQgYXMgYSByZXNpemluZyBpbnRlcnJ1cHQgKHRocm91Z2ggY29udGV4dCkgdG8gY2hpbGRyZW5cbiAgICAvLyBpbml0aWFsaXplXG4gICAgY29uc3Qgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmID0gdXNlUmVmKFxuICAgICAgICB7XG4gICAgICAgICAgICBwb3J0YWw6bnVsbCwgXG4gICAgICAgICAgICBpc1Jlc2l6aW5nOmZhbHNlLCBcbiAgICAgICAgICAgIGluZGV4Om51bGwsXG4gICAgICAgICAgICB2aWV3cG9ydERpbWVuc2lvbnM6bnVsbCxcbiAgICAgICAgICAgIGVsZW1lbnRyZWY6bnVsbFxuICAgICAgICB9XG4gICAgKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1bIHJlc2l6ZXIgc2V0dXAgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBjb25zdCByZXNpemVUaW1lcmlkUmVmID0gdXNlUmVmKG51bGwpXG4gICAgY29uc3QgaXNSZXNpemluZ1JlZiA9IHVzZVJlZihmYWxzZSlcbiAgICBjb25zdCByZXNpemVPYnNlcnZlclJlZiA9IHVzZVJlZihudWxsKTtcblxuICAgIC8vIHNldCB1cCByZXNpemVPYnNlcnZlclxuICAgIHVzZUVmZmVjdCgoKT0+e1xuXG4gICAgICAgIC8vIGluaXRpYWxpemVcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXJSZWYuY3VycmVudCA9IG5ldyBSZXNpemVPYnNlcnZlcihyZXNpemVDYWxsYmFjaylcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXJSZWYuY3VycmVudC5vYnNlcnZlKHZpZXdwb3J0ZGl2UmVmLmN1cnJlbnQpXG5cbiAgICAgICAgLy8gdW5tb3VudFxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuXG4gICAgICAgICAgICByZXNpemVPYnNlcnZlclJlZi5jdXJyZW50LmRpc2Nvbm5lY3QoKVxuXG4gICAgICAgIH1cblxuICAgIH0sW10pXG5cbiAgICAvLyB1c2VkIGJ5IHJlc2l6ZU9ic2VydmVyOyBnZW5lcmF0ZXMgaW50ZXJydXB0XG4gICAgY29uc3QgcmVzaXplQ2FsbGJhY2sgPSB1c2VDYWxsYmFjaygoZW50cmllcyk9PntcblxuICAgICAgICBpZiAodmlld3BvcnRTdGF0ZVJlZi5jdXJyZW50ID09ICdzZXR1cCcpIHtcblxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGVudHJpZXNbMF0udGFyZ2V0XG5cbiAgICAgICAgLy8gZmlyc3QgcmVnaXN0ZXIgc2hvdWxkbid0IGdlbmVyYXRlIGludGVycnVwdFxuICAgICAgICBpZiAoIXRhcmdldC5kYXRhc2V0LmluaXRpYWxpemVkKSB7XG5cbiAgICAgICAgICAgIHRhcmdldC5kYXRhc2V0LmluaXRpYWxpemVkID0gdHJ1ZVxuXG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgaW50ZXJydXB0IHJlc3BvbnNlLCBpZiBpbml0aWF0aW5nIHJlc2l6ZVxuICAgICAgICBpZiAoIWlzUmVzaXppbmdSZWYuY3VycmVudCkge1xuXG4gICAgICAgICAgICB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYuY3VycmVudC5pc1Jlc2l6aW5nID0gaXNSZXNpemluZ1JlZi5jdXJyZW50ID0gdHJ1ZSBcbiAgICAgICAgICAgIC8vIG5ldyBvYmplY3QgY3JlYXRpb24gdHJpZ2dlcnMgYSByZWFsdGltZSBpbnRlcnJ1cHQgbWVzc2FnZSB0byBjcmFkbGUgdGhyb3VnaCBjb250ZXh0XG4gICAgICAgICAgICB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYuY3VycmVudCA9IE9iamVjdC5hc3NpZ24oe30sdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQpIFxuXG4gICAgICAgICAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHNldFZpZXdwb3J0U3RhdGUoJ3Jlc2l6aW5nJylcblxuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHJlc2l6ZVRpbWVyaWRSZWYuY3VycmVudClcbiAgICAgICAgcmVzaXplVGltZXJpZFJlZi5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgICAgIGlzUmVzaXppbmdSZWYuY3VycmVudCA9IGZhbHNlXG4gICAgICAgICAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBzZXRWaWV3cG9ydFN0YXRlKCdyZXNpemVkJylcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFJFU0laRV9USU1FT1VUX0ZPUl9PTkFGVEVSU1JFU0laRSlcblxuICAgIH0sW10pXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tWyBzZXQgcG9ydGFsIGZvciBub24tcm9vdCB2aWV3cG9ydHMgXS0tLS0tLS0tLS0tLS1cblxuICAgIC8vIHNldHMgcG9ydGFsIGluIHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZlxuICAgIHVzZUVmZmVjdCgoKT0+e1xuXG4gICAgICAgIGlmICghcGFyZW50UG9ydGFsSGFuZGxlcikgcmV0dXJuIC8vIHJvb3Qgdmlld3BvcnQ7IGhhcyBubyBwb3J0YWxcblxuICAgICAgICBsZXQgcG9ydGFsaW5kZXhcbiAgICAgICAgbGV0IGVsZW1lbnQgPSB2aWV3cG9ydGRpdlJlZi5jdXJyZW50XG5cbiAgICAgICAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmRhdGFzZXQgJiYgKGVsZW1lbnQuZGF0YXNldC50eXBlID09ICdwb3J0YWxjb250YWluZXInKSkgeyAvLyBzZXQgcG9ydGFsICYgZXhpdFxuICAgICAgICAgICAgICAgIHBvcnRhbGluZGV4ID0gcGFyc2VJbnQoZWxlbWVudC5kYXRhc2V0LmluZGV4KVxuICAgICAgICAgICAgICAgIHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZi5jdXJyZW50LnBvcnRhbCA9IHBhcmVudFBvcnRhbEhhbmRsZXIuZ2V0UG9ydGFsKHBvcnRhbGluZGV4KVxuICAgICAgICAgICAgICAgIHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZi5jdXJyZW50LmluZGV4ID0gcG9ydGFsaW5kZXhcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gXG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRVJST1I6IHBhcmVudCBwb3J0YWxjb250YWluZXIgbm90IGZvdW5kJylcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICB9LFtdKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgY2FsY3VsYXRlIGNvbmZpZyB2YWx1ZXMgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBjb25zdCBkaXZsaW5lcnN0eWxlUmVmID0gdXNlUmVmKG51bGwpXG5cbiAgICAvLyBpbml0aWFsaXplIHdpdGggaW5oZXJpdGVkIHN0eWxlc1xuICAgIGRpdmxpbmVyc3R5bGVSZWYuY3VycmVudCA9IHVzZU1lbW8oKCkgPT4ge1xuXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgICAgICB7XG4gICAgICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOjAsXG4gICAgICAgICAgICByaWdodDowLFxuICAgICAgICAgICAgYm90dG9tOjAsXG4gICAgICAgICAgICBsZWZ0OjAsXG4gICAgICAgICAgICBvdmVyZmxvdzonYXV0bycsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6J3JlZCcsXG4gICAgICAgIH0sIHN0eWxlcy52aWV3cG9ydClcblxuICAgIH0sW3N0eWxlcy52aWV3cG9ydF0pXG5cbiAgICAvLyB1cGRhdGUgd2l0aCBjb25maWcgdmFsdWVzXG4gICAgZGl2bGluZXJzdHlsZVJlZi5jdXJyZW50ID0gdXNlTWVtbygoKSA9PiB7XG5cbiAgICAgICAgLy8gVE9ETzogZ2FwXG4gICAgICAgIGxldCBtaW5jcm9zc2xlbmd0aCA9IGNhbGNNaW5WaWV3cG9ydENyb3NzTGVuZ3RoKG9yaWVudGF0aW9uLCBjZWxsV2lkdGgsIGNlbGxIZWlnaHQsIGdhcCwgcGFkZGluZylcbiAgICAgICAgbGV0IHN0eWxlcyA9IE9iamVjdC5hc3NpZ24oe30sZGl2bGluZXJzdHlsZVJlZi5jdXJyZW50KSAvLyBhdm9pZCByZWFkb25seVxuXG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICBzdHlsZXMubWluV2lkdGggPSBtaW5jcm9zc2xlbmd0aCArICdweCdcbiAgICAgICAgICAgIHN0eWxlcy5taW5IZWlnaHQgPSAnYXV0bydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0eWxlcy5taW5XaWR0aCA9ICdhdXRvJ1xuICAgICAgICAgICAgc3R5bGVzLm1pbkhlaWdodCA9IG1pbmNyb3NzbGVuZ3RoICsgJ3B4J1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0eWxlc1xuXG4gICAgfSxbb3JpZW50YXRpb24sIGNlbGxXaWR0aCwgY2VsbEhlaWdodCwgZ2FwLCBwYWRkaW5nXSlcblxuICAgIC8vIHVwZGF0ZSB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWY7IGFkZCB2aWV3cG9ydCBkaW1lbnNpb25zXG4gICAgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQgPSB1c2VNZW1vKCgpID0+IHtcblxuICAgICAgICBpZiAodmlld3BvcnRTdGF0ZSA9PSAnc2V0dXAnKSByZXR1cm4gdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnRcblxuICAgICAgICBjb25zdCB7dG9wLCByaWdodCwgYm90dG9tLCBsZWZ0fSA9IHZpZXdwb3J0ZGl2UmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgY29uc3Qgd2lkdGggPSAocmlnaHQgLSBsZWZ0KVxuICAgICAgICBjb25zdCBoZWlnaHQgPSAoYm90dG9tIC0gdG9wKVxuXG4gICAgICAgIC8vIFRPRE8gdGhpcyBpcyBhIGR1cGxpY2F0ZSBzZXR0aW5nIHByb2NlZHVyZSB3aXRoIGludGVycnVwdGhhbmRsZXIudHN4IGNyYWRsZUludGVyc2VjdGlvbk9ic2VydmVyQ2FsbGJhY2tcbiAgICAgICAgY29uc3QgbG9jYWxWaWV3cG9ydERhdGEgPSB7XG4gICAgICAgICAgICB2aWV3cG9ydERpbWVuc2lvbnM6e3RvcCxyaWdodCwgYm90dG9tLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0fSxcbiAgICAgICAgICAgIGVsZW1lbnRyZWY6dmlld3BvcnRkaXZSZWYsXG4gICAgICAgICAgICBpc1Jlc2l6aW5nOmlzUmVzaXppbmdSZWYuY3VycmVudCxcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRyaWdnZXIgY29udGV4dCBjaGFuZ2Ugd2l0aCBuZXcgb2JqZWN0XG4gICAgICAgIGNvbnN0IHZpZXdwb3J0ZGF0YW9iamVjdCA9IE9iamVjdC5hc3NpZ24oe30sdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQsIGxvY2FsVmlld3BvcnREYXRhKSBcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3VwZGF0aW5nIHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZiBmcm9tIHVzZU1lbW8nKVxuICAgICAgICByZXR1cm4gIHZpZXdwb3J0ZGF0YW9iamVjdFxuXG4gICAgfSxbb3JpZW50YXRpb24sIGlzUmVzaXppbmdSZWYuY3VycmVudCwgdmlld3BvcnRTdGF0ZV0pXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVsgc3RhdGUgcHJvY2Vzc2luZyBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpPT57XG4gICAgICAgIHN3aXRjaCAodmlld3BvcnRTdGF0ZSkge1xuXG4gICAgICAgICAgICBjYXNlICdyZXNpemVkJzpcbiAgICAgICAgICAgIGNhc2UgJ3NldHVwJzoge1xuICAgICAgICAgICAgICAgIHNldFZpZXdwb3J0U3RhdGUoJ3JlbmRlcicpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfSxbdmlld3BvcnRTdGF0ZV0pXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyByZW5kZXIgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICByZXR1cm4gPFZpZXdwb3J0SW50ZXJydXB0LlByb3ZpZGVyIHZhbHVlID0geyB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYuY3VycmVudCB9PlxuICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgZGF0YS10eXBlID0gJ3ZpZXdwb3J0J1xuICAgICAgICAgICAgZGF0YS1zY3JvbGxlcmlkID0ge3Njcm9sbGVySUR9XG4gICAgICAgICAgICBzdHlsZSA9IHtkaXZsaW5lcnN0eWxlUmVmLmN1cnJlbnR9XG4gICAgICAgICAgICByZWYgPSB7dmlld3BvcnRkaXZSZWZ9XG4gICAgICAgID5cbiAgICAgICAgICAgIHsgKHZpZXdwb3J0U3RhdGUgIT0gJ3NldHVwJykgJiYgY2hpbGRyZW4gfVxuICAgICAgICA8L2Rpdj5cbiAgICA8L1ZpZXdwb3J0SW50ZXJydXB0LlByb3ZpZGVyPlxuICAgIFxufSAvLyBWaWV3cG9ydFxuXG4vLyBlc3RhYmxpc2ggbWluaW11bSB3aWR0aC9oZWlnaHQgZm9yIHRoZSB2aWV3cG9ydCAtLSBhcHByb3hpbWF0ZWx5IG9uZSBpdGVtXG4vLyBnYXAgb25seSBhcHBsaWVzIHdpdGggbXVsdGktd2lkdGggaXRlbXMsIHRoZXJlZm9yZSBub3QgdXNlZCBpbiBjYWxjdWxhdGlvbnNcbmNvbnN0IGNhbGNNaW5WaWV3cG9ydENyb3NzTGVuZ3RoID0gKG9yaWVudGF0aW9uLCBjZWxsV2lkdGgsIGNlbGxIZWlnaHQsIGdhcCwgcGFkZGluZykgPT4ge1xuXG4gICAgbGV0IGNyb3NzbGVuZ3RoLCBjZWxsTGVuZ3RoXG4gICAgXG4gICAgaWYgKG9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgY2VsbExlbmd0aCA9IGNlbGxXaWR0aCBcbiAgICB9IGVsc2Uge1xuICAgICAgICBjZWxsTGVuZ3RoID0gY2VsbEhlaWdodFxuICAgIH1cbiAgICBjcm9zc2xlbmd0aCA9IGNlbGxMZW5ndGggKyAocGFkZGluZyAqIDIpXG5cbiAgICByZXR1cm4gY3Jvc3NsZW5ndGhcblxufVxuXG5leHBvcnQgZGVmYXVsdCBWaWV3cG9ydFxuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJyZWFjdF8xIiwiY3JlYXRlQ29udGV4dCIsIlJlc2l6ZU9ic2VydmVyIiwid2luZG93IiwicmVzaXplX29ic2VydmVyXzEiLCJSRVNJWkVfVElNRU9VVF9GT1JfT05BRlRFUlNSRVNJWkUiLCJWaWV3cG9ydCIsIl9hIiwiY2hpbGRyZW4iLCJncmlkU3BlY3MiLCJzdHlsZXMiLCJzY3JvbGxlcklEIiwiZ2FwIiwicGFkZGluZyIsImNlbGxIZWlnaHQiLCJjZWxsV2lkdGgiLCJsYXlvdXQiLCJkZW5zZSIsInZpZXdwb3J0U3RhdGUiLCJzZXRWaWV3cG9ydFN0YXRlIiwidmlld3BvcnRTdGF0ZVJlZiIsImN1cnJlbnQiLCJwYXJlbnRQb3J0YWxIYW5kbGVyIiwiY3JhZGxlXzEiLCJpc01vdW50ZWRSZWYiLCJ2aWV3cG9ydGRpdlJlZiIsInZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZiIsInBvcnRhbCIsImlzUmVzaXppbmciLCJpbmRleCIsInZpZXdwb3J0RGltZW5zaW9ucyIsImVsZW1lbnRyZWYiLCJyZXNpemVUaW1lcmlkUmVmIiwiaXNSZXNpemluZ1JlZiIsInJlc2l6ZU9ic2VydmVyUmVmIiwicmVzaXplQ2FsbGJhY2siLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsImVudHJpZXMiLCJ0YXJnZXQiLCJkYXRhc2V0IiwiaW5pdGlhbGl6ZWQiLCJPYmplY3QiLCJhc3NpZ24iLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwicG9ydGFsaW5kZXgiLCJlbGVtZW50IiwidHlwZSIsInBhcnNlSW50IiwiZ2V0UG9ydGFsIiwicGFyZW50RWxlbWVudCIsImNvbnNvbGUiLCJsb2ciLCJkaXZsaW5lcnN0eWxlUmVmIiwicG9zaXRpb24iLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJvdmVyZmxvdyIsImJhY2tncm91bmRDb2xvciIsInZpZXdwb3J0IiwibWluY3Jvc3NsZW5ndGgiLCJjYWxjTWluVmlld3BvcnRDcm9zc0xlbmd0aCIsIm9yaWVudGF0aW9uIiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsImhlaWdodCIsImxvY2FsVmlld3BvcnREYXRhIiwidmlld3BvcnRkYXRhb2JqZWN0IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInN0eWxlIiwicmVmIiwiY3Jvc3NsZW5ndGgiLCJjZWxsTGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/viewport.tsx\n");

/***/ }),

/***/ "./node_modules/react-reverse-portal/dist/web/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-reverse-portal/dist/web/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InPortal\": () => (/* binding */ InPortal),\n/* harmony export */   \"OutPortal\": () => (/* binding */ OutPortal),\n/* harmony export */   \"createHtmlPortalNode\": () => (/* binding */ createHtmlPortalNode),\n/* harmony export */   \"createSvgPortalNode\": () => (/* binding */ createSvgPortalNode)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"react-dom\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n// Internally, the portalNode must be for either HTML or SVG elements\nvar ELEMENT_TYPE_HTML = 'html';\nvar ELEMENT_TYPE_SVG = 'svg';\n// ReactDOM can handle several different namespaces, but they're not exported publicly\n// https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/DOMNamespaces.js#L8-L10\nvar SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\nvar validateElementType = function (domElement, elementType) {\n    if (elementType === ELEMENT_TYPE_HTML) {\n        return domElement instanceof HTMLElement;\n    }\n    if (elementType === ELEMENT_TYPE_SVG) {\n        return domElement instanceof SVGElement;\n    }\n    throw new Error(\"Unrecognized element type \\\"\" + elementType + \"\\\" for validateElementType.\");\n};\n// This is the internal implementation: the public entry points set elementType to an appropriate value\nvar createPortalNode = function (elementType, options) {\n    var initialProps = {};\n    var parent;\n    var lastPlaceholder;\n    var element;\n    if (elementType === ELEMENT_TYPE_HTML) {\n        element = document.createElement('div');\n    }\n    else if (elementType === ELEMENT_TYPE_SVG) {\n        element = document.createElementNS(SVG_NAMESPACE, 'g');\n    }\n    else {\n        throw new Error(\"Invalid element type \\\"\" + elementType + \"\\\" for createPortalNode: must be \\\"html\\\" or \\\"svg\\\".\");\n    }\n    if (options && typeof options === \"object\") {\n        for (var _i = 0, _a = Object.entries(options.attributes); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            element.setAttribute(key, value);\n        }\n    }\n    var portalNode = {\n        element: element,\n        elementType: elementType,\n        setPortalProps: function (props) {\n            initialProps = props;\n        },\n        getInitialPortalProps: function () {\n            return initialProps;\n        },\n        mount: function (newParent, newPlaceholder) {\n            if (newPlaceholder === lastPlaceholder) {\n                // Already mounted - noop.\n                return;\n            }\n            portalNode.unmount();\n            // To support SVG and other non-html elements, the portalNode's elementType needs to match\n            // the elementType it's being rendered into\n            if (newParent !== parent) {\n                if (!validateElementType(newParent, elementType)) {\n                    throw new Error(\"Invalid element type for portal: \\\"\" + elementType + \"\\\" portalNodes must be used with \" + elementType + \" elements, but OutPortal is within <\" + newParent.tagName + \">.\");\n                }\n            }\n            newParent.replaceChild(portalNode.element, newPlaceholder);\n            parent = newParent;\n            lastPlaceholder = newPlaceholder;\n        },\n        unmount: function (expectedPlaceholder) {\n            if (expectedPlaceholder && expectedPlaceholder !== lastPlaceholder) {\n                // Skip unmounts for placeholders that aren't currently mounted\n                // They will have been automatically unmounted already by a subsequent mount()\n                return;\n            }\n            if (parent && lastPlaceholder) {\n                parent.replaceChild(lastPlaceholder, portalNode.element);\n                parent = undefined;\n                lastPlaceholder = undefined;\n            }\n        }\n    };\n    return portalNode;\n};\nvar InPortal = /** @class */ (function (_super) {\n    __extends(InPortal, _super);\n    function InPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.addPropsChannel = function () {\n            Object.assign(_this.props.node, {\n                setPortalProps: function (props) {\n                    // Rerender the child node here if/when the out portal props change\n                    _this.setState({ nodeProps: props });\n                }\n            });\n        };\n        _this.state = {\n            nodeProps: _this.props.node.getInitialPortalProps(),\n        };\n        return _this;\n    }\n    InPortal.prototype.componentDidMount = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.componentDidUpdate = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, children = _a.children, node = _a.node;\n        return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, function (child) {\n            if (!react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child))\n                return child;\n            return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, _this.state.nodeProps);\n        }), node.element);\n    };\n    return InPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar OutPortal = /** @class */ (function (_super) {\n    __extends(OutPortal, _super);\n    function OutPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.placeholderNode = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        _this.passPropsThroughPortal();\n        return _this;\n    }\n    OutPortal.prototype.passPropsThroughPortal = function () {\n        var propsForTarget = Object.assign({}, this.props, { node: undefined });\n        this.props.node.setPortalProps(propsForTarget);\n    };\n    OutPortal.prototype.componentDidMount = function () {\n        var node = this.props.node;\n        this.currentPortalNode = node;\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentDidUpdate = function () {\n        // We re-mount on update, just in case we were unmounted (e.g. by\n        // a second OutPortal, which has now been removed)\n        var node = this.props.node;\n        // If we're switching portal nodes, we need to clean up the current one first.\n        if (this.currentPortalNode && node !== this.currentPortalNode) {\n            this.currentPortalNode.unmount(this.placeholderNode.current);\n            this.currentPortalNode = node;\n        }\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentWillUnmount = function () {\n        var node = this.props.node;\n        node.unmount(this.placeholderNode.current);\n    };\n    OutPortal.prototype.render = function () {\n        // Render a placeholder to the DOM, so we can get a reference into\n        // our location in the DOM, and swap it out for the portaled node.\n        // A <div> placeholder works fine even for SVG.\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: this.placeholderNode });\n    };\n    return OutPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar createHtmlPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_HTML);\nvar createSvgPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_SVG);\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-reverse-portal/dist/web/index.js\n");

/***/ }),

/***/ "./node_modules/requestidlecallback/index.js":
/*!***************************************************!*\
  !*** ./node_modules/requestidlecallback/index.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}(function(){\n\t'use strict';\n\tvar scheduleStart, throttleDelay, lazytimer, lazyraf;\n\tvar root = typeof window != 'undefined' ?\n\t\twindow :\n\t\ttypeof __webpack_require__.g != undefined ?\n\t\t\t__webpack_require__.g :\n\t\t\tthis || {};\n\tvar requestAnimationFrame = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;\n\tvar cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;\n\tvar tasks = [];\n\tvar runAttempts = 0;\n\tvar isRunning = false;\n\tvar remainingTime = 7;\n\tvar minThrottle = 35;\n\tvar throttle = 125;\n\tvar index = 0;\n\tvar taskStart = 0;\n\tvar tasklength = 0;\n\tvar IdleDeadline = {\n\t\tget didTimeout(){\n\t\t\treturn false;\n\t\t},\n\t\ttimeRemaining: function(){\n\t\t\tvar timeRemaining = remainingTime - (Date.now() - taskStart);\n\t\t\treturn timeRemaining < 0 ? 0 : timeRemaining;\n\t\t},\n\t};\n\tvar setInactive = debounce(function(){\n\t\tremainingTime = 22;\n\t\tthrottle = 66;\n\t\tminThrottle = 0;\n\t});\n\n\tfunction debounce(fn){\n\t\tvar id, timestamp;\n\t\tvar wait = 99;\n\t\tvar check = function(){\n\t\t\tvar last = (Date.now()) - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tid = setTimeout(check, wait - last);\n\t\t\t} else {\n\t\t\t\tid = null;\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\t\treturn function(){\n\t\t\ttimestamp = Date.now();\n\t\t\tif(!id){\n\t\t\t\tid = setTimeout(check, wait);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction abortRunning(){\n\t\tif(isRunning){\n\t\t\tif(lazyraf){\n\t\t\t\tcancelRequestAnimationFrame(lazyraf);\n\t\t\t}\n\t\t\tif(lazytimer){\n\t\t\t\tclearTimeout(lazytimer);\n\t\t\t}\n\t\t\tisRunning = false;\n\t\t}\n\t}\n\n\tfunction onInputorMutation(){\n\t\tif(throttle != 125){\n\t\t\tremainingTime = 7;\n\t\t\tthrottle = 125;\n\t\t\tminThrottle = 35;\n\n\t\t\tif(isRunning) {\n\t\t\t\tabortRunning();\n\t\t\t\tscheduleLazy();\n\t\t\t}\n\t\t}\n\t\tsetInactive();\n\t}\n\n\tfunction scheduleAfterRaf() {\n\t\tlazyraf = null;\n\t\tlazytimer = setTimeout(runTasks, 0);\n\t}\n\n\tfunction scheduleRaf(){\n\t\tlazytimer = null;\n\t\trequestAnimationFrame(scheduleAfterRaf);\n\t}\n\n\tfunction scheduleLazy(){\n\n\t\tif(isRunning){return;}\n\t\tthrottleDelay = throttle - (Date.now() - taskStart);\n\n\t\tscheduleStart = Date.now();\n\n\t\tisRunning = true;\n\n\t\tif(minThrottle && throttleDelay < minThrottle){\n\t\t\tthrottleDelay = minThrottle;\n\t\t}\n\n\t\tif(throttleDelay > 9){\n\t\t\tlazytimer = setTimeout(scheduleRaf, throttleDelay);\n\t\t} else {\n\t\t\tthrottleDelay = 0;\n\t\t\tscheduleRaf();\n\t\t}\n\t}\n\n\tfunction runTasks(){\n\t\tvar task, i, len;\n\t\tvar timeThreshold = remainingTime > 9 ?\n\t\t\t9 :\n\t\t\t1\n\t\t;\n\n\t\ttaskStart = Date.now();\n\t\tisRunning = false;\n\n\t\tlazytimer = null;\n\n\t\tif(runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart){\n\t\t\tfor(i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++){\n\t\t\t\ttask = tasks.shift();\n\t\t\t\ttasklength++;\n\t\t\t\tif(task){\n\t\t\t\t\ttask(IdleDeadline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(tasks.length){\n\t\t\tscheduleLazy();\n\t\t} else {\n\t\t\trunAttempts = 0;\n\t\t}\n\t}\n\n\tfunction requestIdleCallbackShim(task){\n\t\tindex++;\n\t\ttasks.push(task);\n\t\tscheduleLazy();\n\t\treturn index;\n\t}\n\n\tfunction cancelIdleCallbackShim(id){\n\t\tvar index = id - 1 - tasklength;\n\t\tif(tasks[index]){\n\t\t\ttasks[index] = null;\n\t\t}\n\t}\n\n\tif(!root.requestIdleCallback || !root.cancelIdleCallback){\n\t\troot.requestIdleCallback = requestIdleCallbackShim;\n\t\troot.cancelIdleCallback = cancelIdleCallbackShim;\n\n\t\tif(root.document && document.addEventListener){\n\t\t\troot.addEventListener('scroll', onInputorMutation, true);\n\t\t\troot.addEventListener('resize', onInputorMutation);\n\n\t\t\tdocument.addEventListener('focus', onInputorMutation, true);\n\t\t\tdocument.addEventListener('mouseover', onInputorMutation, true);\n\t\t\t['click', 'keypress', 'touchstart', 'mousedown'].forEach(function(name){\n\t\t\t\tdocument.addEventListener(name, onInputorMutation, {capture: true, passive: true});\n\t\t\t});\n\n\t\t\tif(root.MutationObserver){\n\t\t\t\tnew MutationObserver( onInputorMutation ).observe( document.documentElement, {childList: true, subtree: true, attributes: true} );\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\troot.requestIdleCallback(function(){}, {timeout: 0});\n\t\t} catch(e){\n\t\t\t(function(rIC){\n\t\t\t\tvar timeRemainingProto, timeRemaining;\n\t\t\t\troot.requestIdleCallback = function(fn, timeout){\n\t\t\t\t\tif(timeout && typeof timeout.timeout == 'number'){\n\t\t\t\t\t\treturn rIC(fn, timeout.timeout);\n\t\t\t\t\t}\n\t\t\t\t\treturn rIC(fn);\n\t\t\t\t};\n\t\t\t\tif(root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)){\n\t\t\t\t\ttimeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, 'timeRemaining');\n\t\t\t\t\tif(!timeRemaining || !timeRemaining.configurable || !timeRemaining.get){return;}\n\t\t\t\t\tObject.defineProperty(timeRemainingProto, 'timeRemaining', {\n\t\t\t\t\t\tvalue:  function(){\n\t\t\t\t\t\t\treturn timeRemaining.get.call(this);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(root.requestIdleCallback)\n\t\t}\n\t}\n\n\treturn {\n\t\trequest: requestIdleCallbackShim,\n\t\tcancel: cancelIdleCallbackShim,\n\t};\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/requestidlecallback/index.js\n");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_react__;

/***/ }),

/***/ "react-dom":
/*!****************************!*\
  !*** external "react-dom" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/infinitegridscroller.tsx");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});