/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["react-infinite-grid-scroller"] = factory(require("react"), require("react-dom"));
	else
		root["react-infinite-grid-scroller"] = factory(root["react"], root["react-dom"]);
})(self, (__WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOMRectReadOnly\": () => (/* binding */ DOMRectReadOnly)\n/* harmony export */ });\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n\nvar DOMRectReadOnly = (function () {\n    function DOMRectReadOnly(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.top = this.y;\n        this.left = this.x;\n        this.bottom = this.top + this.height;\n        this.right = this.left + this.width;\n        return (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_0__.freeze)(this);\n    }\n    DOMRectReadOnly.prototype.toJSON = function () {\n        var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n        return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };\n    };\n    DOMRectReadOnly.fromRect = function (rectangle) {\n        return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n    };\n    return DOMRectReadOnly;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL0RPTVJlY3RSZWFkT25seS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscURBQU07QUFDckI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQzBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvRE9NUmVjdFJlYWRPbmx5LmpzP2ZkZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJlZXplIH0gZnJvbSAnLi91dGlscy9mcmVlemUnO1xudmFyIERPTVJlY3RSZWFkT25seSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRE9NUmVjdFJlYWRPbmx5KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy50b3AgPSB0aGlzLnk7XG4gICAgICAgIHRoaXMubGVmdCA9IHRoaXMueDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLnRvcCArIHRoaXMuaGVpZ2h0O1xuICAgICAgICB0aGlzLnJpZ2h0ID0gdGhpcy5sZWZ0ICsgdGhpcy53aWR0aDtcbiAgICAgICAgcmV0dXJuIGZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgRE9NUmVjdFJlYWRPbmx5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHggPSBfYS54LCB5ID0gX2EueSwgdG9wID0gX2EudG9wLCByaWdodCA9IF9hLnJpZ2h0LCBib3R0b20gPSBfYS5ib3R0b20sIGxlZnQgPSBfYS5sZWZ0LCB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XG4gICAgICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHRvcDogdG9wLCByaWdodDogcmlnaHQsIGJvdHRvbTogYm90dG9tLCBsZWZ0OiBsZWZ0LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG4gICAgfTtcbiAgICBET01SZWN0UmVhZE9ubHkuZnJvbVJlY3QgPSBmdW5jdGlvbiAocmVjdGFuZ2xlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRE9NUmVjdFJlYWRPbmx5KHJlY3RhbmdsZS54LCByZWN0YW5nbGUueSwgcmVjdGFuZ2xlLndpZHRoLCByZWN0YW5nbGUuaGVpZ2h0KTtcbiAgICB9O1xuICAgIHJldHVybiBET01SZWN0UmVhZE9ubHk7XG59KCkpO1xuZXhwb3J0IHsgRE9NUmVjdFJlYWRPbmx5IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObservation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObservation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObservation\": () => (/* binding */ ResizeObservation)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResizeObserverBoxOptions */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\");\n/* harmony import */ var _algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./algorithms/calculateBoxSize */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\n\n\nvar skipNotifyOnElement = function (target) {\n    return !(0,_utils_element__WEBPACK_IMPORTED_MODULE_2__.isSVG)(target)\n        && !(0,_utils_element__WEBPACK_IMPORTED_MODULE_2__.isReplacedElement)(target)\n        && getComputedStyle(target).display === 'inline';\n};\nvar ResizeObservation = (function () {\n    function ResizeObservation(target, observedBox) {\n        this.target = target;\n        this.observedBox = observedBox || _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.CONTENT_BOX;\n        this.lastReportedSize = {\n            inlineSize: 0,\n            blockSize: 0\n        };\n    }\n    ResizeObservation.prototype.isActive = function () {\n        var size = (0,_algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_1__.calculateBoxSize)(this.target, this.observedBox, true);\n        if (skipNotifyOnElement(this.target)) {\n            this.lastReportedSize = size;\n        }\n        if (this.lastReportedSize.inlineSize !== size.inlineSize\n            || this.lastReportedSize.blockSize !== size.blockSize) {\n            return true;\n        }\n        return false;\n    };\n    return ResizeObservation;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmF0aW9uLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0U7QUFDTDtBQUNOO0FBQzNEO0FBQ0EsWUFBWSxxREFBSztBQUNqQixZQUFZLGlFQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDJGQUFvQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOEVBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUM0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmF0aW9uLmpzPzQ0YzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zIH0gZnJvbSAnLi9SZXNpemVPYnNlcnZlckJveE9wdGlvbnMnO1xuaW1wb3J0IHsgY2FsY3VsYXRlQm94U2l6ZSB9IGZyb20gJy4vYWxnb3JpdGhtcy9jYWxjdWxhdGVCb3hTaXplJztcbmltcG9ydCB7IGlzU1ZHLCBpc1JlcGxhY2VkRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvZWxlbWVudCc7XG52YXIgc2tpcE5vdGlmeU9uRWxlbWVudCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICByZXR1cm4gIWlzU1ZHKHRhcmdldClcbiAgICAgICAgJiYgIWlzUmVwbGFjZWRFbGVtZW50KHRhcmdldClcbiAgICAgICAgJiYgZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmRpc3BsYXkgPT09ICdpbmxpbmUnO1xufTtcbnZhciBSZXNpemVPYnNlcnZhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0LCBvYnNlcnZlZEJveCkge1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5vYnNlcnZlZEJveCA9IG9ic2VydmVkQm94IHx8IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5DT05URU5UX0JPWDtcbiAgICAgICAgdGhpcy5sYXN0UmVwb3J0ZWRTaXplID0ge1xuICAgICAgICAgICAgaW5saW5lU2l6ZTogMCxcbiAgICAgICAgICAgIGJsb2NrU2l6ZTogMFxuICAgICAgICB9O1xuICAgIH1cbiAgICBSZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuaXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzaXplID0gY2FsY3VsYXRlQm94U2l6ZSh0aGlzLnRhcmdldCwgdGhpcy5vYnNlcnZlZEJveCwgdHJ1ZSk7XG4gICAgICAgIGlmIChza2lwTm90aWZ5T25FbGVtZW50KHRoaXMudGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0UmVwb3J0ZWRTaXplID0gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYXN0UmVwb3J0ZWRTaXplLmlubGluZVNpemUgIT09IHNpemUuaW5saW5lU2l6ZVxuICAgICAgICAgICAgfHwgdGhpcy5sYXN0UmVwb3J0ZWRTaXplLmJsb2NrU2l6ZSAhPT0gc2l6ZS5ibG9ja1NpemUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBSZXNpemVPYnNlcnZhdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZhdGlvbiB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObservation.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserver.js":
/*!********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserver.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserver\": () => (/* binding */ ResizeObserver)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResizeObserverController */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\n\nvar ResizeObserver = (function () {\n    function ResizeObserver(callback) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (typeof callback !== 'function') {\n            throw new TypeError(\"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.connect(this, callback);\n    }\n    ResizeObserver.prototype.observe = function (target, options) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (!(0,_utils_element__WEBPACK_IMPORTED_MODULE_1__.isElement)(target)) {\n            throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.observe(this, target, options);\n    };\n    ResizeObserver.prototype.unobserve = function (target) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (!(0,_utils_element__WEBPACK_IMPORTED_MODULE_1__.isElement)(target)) {\n            throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.unobserve(this, target);\n    };\n    ResizeObserver.prototype.disconnect = function () {\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.disconnect(this);\n    };\n    ResizeObserver.toString = function () {\n        return 'function ResizeObserver () { [polyfill code] }';\n    };\n    return ResizeObserver;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRTtBQUMxQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1RkFBZ0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEseURBQVM7QUFDdEI7QUFDQTtBQUNBLFFBQVEsdUZBQWdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlEQUFTO0FBQ3RCO0FBQ0E7QUFDQSxRQUFRLHlGQUFrQztBQUMxQztBQUNBO0FBQ0EsUUFBUSwwRkFBbUM7QUFDM0M7QUFDQTtBQUNBLDZDQUE2QyxpQkFBaUI7QUFDOUQ7QUFDQTtBQUNBLENBQUM7QUFDeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9SZXNpemVPYnNlcnZlci5qcz9kMDIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlciB9IGZyb20gJy4vUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyJztcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvZWxlbWVudCc7XG52YXIgUmVzaXplT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUmVzaXplT2JzZXJ2ZXInOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdSZXNpemVPYnNlcnZlcic6IFRoZSBjYWxsYmFjayBwcm92aWRlZCBhcyBwYXJhbWV0ZXIgMSBpcyBub3QgYSBmdW5jdGlvbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmNvbm5lY3QodGhpcywgY2FsbGJhY2spO1xuICAgIH1cbiAgICBSZXNpemVPYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnb2JzZXJ2ZScgb24gJ1Jlc2l6ZU9ic2VydmVyJzogMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ29ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IHBhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlICdFbGVtZW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5vYnNlcnZlKHRoaXMsIHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBSZXNpemVPYnNlcnZlci5wcm90b3R5cGUudW5vYnNlcnZlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd1bm9ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd1bm9ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IHBhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlICdFbGVtZW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci51bm9ic2VydmUodGhpcywgdGFyZ2V0KTtcbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuZGlzY29ubmVjdCh0aGlzKTtcbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ2Z1bmN0aW9uIFJlc2l6ZU9ic2VydmVyICgpIHsgW3BvbHlmaWxsIGNvZGVdIH0nO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyO1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserver.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverBoxOptions\": () => (/* binding */ ResizeObserverBoxOptions)\n/* harmony export */ });\nvar ResizeObserverBoxOptions;\n(function (ResizeObserverBoxOptions) {\n    ResizeObserverBoxOptions[\"BORDER_BOX\"] = \"border-box\";\n    ResizeObserverBoxOptions[\"CONTENT_BOX\"] = \"content-box\";\n    ResizeObserverBoxOptions[\"DEVICE_PIXEL_CONTENT_BOX\"] = \"device-pixel-content-box\";\n})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNERBQTREO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zLmpzP2U1NTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucztcbihmdW5jdGlvbiAoUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zKSB7XG4gICAgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zW1wiQk9SREVSX0JPWFwiXSA9IFwiYm9yZGVyLWJveFwiO1xuICAgIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9uc1tcIkNPTlRFTlRfQk9YXCJdID0gXCJjb250ZW50LWJveFwiO1xuICAgIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9uc1tcIkRFVklDRV9QSVhFTF9DT05URU5UX0JPWFwiXSA9IFwiZGV2aWNlLXBpeGVsLWNvbnRlbnQtYm94XCI7XG59KShSZXNpemVPYnNlcnZlckJveE9wdGlvbnMgfHwgKFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyA9IHt9KSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverController\": () => (/* binding */ ResizeObserverController)\n/* harmony export */ });\n/* harmony import */ var _utils_scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/scheduler */ \"./node_modules/@juggle/resize-observer/lib/utils/scheduler.js\");\n/* harmony import */ var _ResizeObservation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ResizeObservation */ \"./node_modules/@juggle/resize-observer/lib/ResizeObservation.js\");\n/* harmony import */ var _ResizeObserverDetail__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ResizeObserverDetail */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js\");\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n\n\n\n\nvar observerMap = new WeakMap();\nvar getObservationIndex = function (observationTargets, target) {\n    for (var i = 0; i < observationTargets.length; i += 1) {\n        if (observationTargets[i].target === target) {\n            return i;\n        }\n    }\n    return -1;\n};\nvar ResizeObserverController = (function () {\n    function ResizeObserverController() {\n    }\n    ResizeObserverController.connect = function (resizeObserver, callback) {\n        var detail = new _ResizeObserverDetail__WEBPACK_IMPORTED_MODULE_2__.ResizeObserverDetail(resizeObserver, callback);\n        observerMap.set(resizeObserver, detail);\n    };\n    ResizeObserverController.observe = function (resizeObserver, target, options) {\n        var detail = observerMap.get(resizeObserver);\n        var firstObservation = detail.observationTargets.length === 0;\n        if (getObservationIndex(detail.observationTargets, target) < 0) {\n            firstObservation && _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.push(detail);\n            detail.observationTargets.push(new _ResizeObservation__WEBPACK_IMPORTED_MODULE_1__.ResizeObservation(target, options && options.box));\n            (0,_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.updateCount)(1);\n            _utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.scheduler.schedule();\n        }\n    };\n    ResizeObserverController.unobserve = function (resizeObserver, target) {\n        var detail = observerMap.get(resizeObserver);\n        var index = getObservationIndex(detail.observationTargets, target);\n        var lastObservation = detail.observationTargets.length === 1;\n        if (index >= 0) {\n            lastObservation && _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.splice(_utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.indexOf(detail), 1);\n            detail.observationTargets.splice(index, 1);\n            (0,_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.updateCount)(-1);\n        }\n    };\n    ResizeObserverController.disconnect = function (resizeObserver) {\n        var _this = this;\n        var detail = observerMap.get(resizeObserver);\n        detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });\n        detail.activeTargets.splice(0, detail.activeTargets.length);\n    };\n    return ResizeObserverController;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRDtBQUNIO0FBQ007QUFDSjtBQUMxRDtBQUNBO0FBQ0Esb0JBQW9CLCtCQUErQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1RUFBb0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdFQUFvQjtBQUNwRCwrQ0FBK0MsaUVBQWlCO0FBQ2hFLFlBQVksNkRBQVc7QUFDdkIsWUFBWSxnRUFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMEVBQXNCLENBQUMsMkVBQXVCO0FBQzdFO0FBQ0EsWUFBWSw2REFBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLG9EQUFvRDtBQUN0SDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ21DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmpzP2YzNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NoZWR1bGVyLCB1cGRhdGVDb3VudCB9IGZyb20gJy4vdXRpbHMvc2NoZWR1bGVyJztcbmltcG9ydCB7IFJlc2l6ZU9ic2VydmF0aW9uIH0gZnJvbSAnLi9SZXNpemVPYnNlcnZhdGlvbic7XG5pbXBvcnQgeyBSZXNpemVPYnNlcnZlckRldGFpbCB9IGZyb20gJy4vUmVzaXplT2JzZXJ2ZXJEZXRhaWwnO1xuaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi91dGlscy9yZXNpemVPYnNlcnZlcnMnO1xudmFyIG9ic2VydmVyTWFwID0gbmV3IFdlYWtNYXAoKTtcbnZhciBnZXRPYnNlcnZhdGlvbkluZGV4ID0gZnVuY3Rpb24gKG9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYnNlcnZhdGlvblRhcmdldHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKG9ic2VydmF0aW9uVGFyZ2V0c1tpXS50YXJnZXQgPT09IHRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufTtcbnZhciBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcigpIHtcbiAgICB9XG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmNvbm5lY3QgPSBmdW5jdGlvbiAocmVzaXplT2JzZXJ2ZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkZXRhaWwgPSBuZXcgUmVzaXplT2JzZXJ2ZXJEZXRhaWwocmVzaXplT2JzZXJ2ZXIsIGNhbGxiYWNrKTtcbiAgICAgICAgb2JzZXJ2ZXJNYXAuc2V0KHJlc2l6ZU9ic2VydmVyLCBkZXRhaWwpO1xuICAgIH07XG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLm9ic2VydmUgPSBmdW5jdGlvbiAocmVzaXplT2JzZXJ2ZXIsIHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgZGV0YWlsID0gb2JzZXJ2ZXJNYXAuZ2V0KHJlc2l6ZU9ic2VydmVyKTtcbiAgICAgICAgdmFyIGZpcnN0T2JzZXJ2YXRpb24gPSBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgaWYgKGdldE9ic2VydmF0aW9uSW5kZXgoZGV0YWlsLm9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KSA8IDApIHtcbiAgICAgICAgICAgIGZpcnN0T2JzZXJ2YXRpb24gJiYgcmVzaXplT2JzZXJ2ZXJzLnB1c2goZGV0YWlsKTtcbiAgICAgICAgICAgIGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMucHVzaChuZXcgUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0LCBvcHRpb25zICYmIG9wdGlvbnMuYm94KSk7XG4gICAgICAgICAgICB1cGRhdGVDb3VudCgxKTtcbiAgICAgICAgICAgIHNjaGVkdWxlci5zY2hlZHVsZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIudW5vYnNlcnZlID0gZnVuY3Rpb24gKHJlc2l6ZU9ic2VydmVyLCB0YXJnZXQpIHtcbiAgICAgICAgdmFyIGRldGFpbCA9IG9ic2VydmVyTWFwLmdldChyZXNpemVPYnNlcnZlcik7XG4gICAgICAgIHZhciBpbmRleCA9IGdldE9ic2VydmF0aW9uSW5kZXgoZGV0YWlsLm9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGxhc3RPYnNlcnZhdGlvbiA9IGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMubGVuZ3RoID09PSAxO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgbGFzdE9ic2VydmF0aW9uICYmIHJlc2l6ZU9ic2VydmVycy5zcGxpY2UocmVzaXplT2JzZXJ2ZXJzLmluZGV4T2YoZGV0YWlsKSwgMSk7XG4gICAgICAgICAgICBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB1cGRhdGVDb3VudCgtMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKHJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBkZXRhaWwgPSBvYnNlcnZlck1hcC5nZXQocmVzaXplT2JzZXJ2ZXIpO1xuICAgICAgICBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAob3QpIHsgcmV0dXJuIF90aGlzLnVub2JzZXJ2ZShyZXNpemVPYnNlcnZlciwgb3QudGFyZ2V0KTsgfSk7XG4gICAgICAgIGRldGFpbC5hY3RpdmVUYXJnZXRzLnNwbGljZSgwLCBkZXRhaWwuYWN0aXZlVGFyZ2V0cy5sZW5ndGgpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcjtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverDetail\": () => (/* binding */ ResizeObserverDetail)\n/* harmony export */ });\nvar ResizeObserverDetail = (function () {\n    function ResizeObserverDetail(resizeObserver, callback) {\n        this.activeTargets = [];\n        this.skippedTargets = [];\n        this.observationTargets = [];\n        this.observer = resizeObserver;\n        this.callback = callback;\n    }\n    return ResizeObserverDetail;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRGV0YWlsLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQytCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJEZXRhaWwuanM/NzgxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUmVzaXplT2JzZXJ2ZXJEZXRhaWwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyRGV0YWlsKHJlc2l6ZU9ic2VydmVyLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmFjdGl2ZVRhcmdldHMgPSBbXTtcbiAgICAgICAgdGhpcy5za2lwcGVkVGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLm9ic2VydmF0aW9uVGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLm9ic2VydmVyID0gcmVzaXplT2JzZXJ2ZXI7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyRGV0YWlsO1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyRGV0YWlsIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverEntry\": () => (/* binding */ ResizeObserverEntry)\n/* harmony export */ });\n/* harmony import */ var _algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/calculateBoxSize */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\");\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n\n\nvar ResizeObserverEntry = (function () {\n    function ResizeObserverEntry(target) {\n        var boxes = (0,_algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_0__.calculateBoxSizes)(target);\n        this.target = target;\n        this.contentRect = boxes.contentRect;\n        this.borderBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.borderBoxSize]);\n        this.contentBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.contentBoxSize]);\n        this.devicePixelContentBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.devicePixelContentBoxSize]);\n    }\n    return ResizeObserverEntry;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRW50cnkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtFO0FBQzFCO0FBQ3hDO0FBQ0E7QUFDQSxvQkFBb0IsK0VBQWlCO0FBQ3JDO0FBQ0E7QUFDQSw2QkFBNkIscURBQU07QUFDbkMsOEJBQThCLHFEQUFNO0FBQ3BDLHlDQUF5QyxxREFBTTtBQUMvQztBQUNBO0FBQ0EsQ0FBQztBQUM4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRW50cnkuanM/NDFlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxjdWxhdGVCb3hTaXplcyB9IGZyb20gJy4vYWxnb3JpdGhtcy9jYWxjdWxhdGVCb3hTaXplJztcbmltcG9ydCB7IGZyZWV6ZSB9IGZyb20gJy4vdXRpbHMvZnJlZXplJztcbnZhciBSZXNpemVPYnNlcnZlckVudHJ5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlckVudHJ5KHRhcmdldCkge1xuICAgICAgICB2YXIgYm94ZXMgPSBjYWxjdWxhdGVCb3hTaXplcyh0YXJnZXQpO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5jb250ZW50UmVjdCA9IGJveGVzLmNvbnRlbnRSZWN0O1xuICAgICAgICB0aGlzLmJvcmRlckJveFNpemUgPSBmcmVlemUoW2JveGVzLmJvcmRlckJveFNpemVdKTtcbiAgICAgICAgdGhpcy5jb250ZW50Qm94U2l6ZSA9IGZyZWV6ZShbYm94ZXMuY29udGVudEJveFNpemVdKTtcbiAgICAgICAgdGhpcy5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplID0gZnJlZXplKFtib3hlcy5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplXSk7XG4gICAgfVxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlckVudHJ5O1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyRW50cnkgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js":
/*!************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverSize\": () => (/* binding */ ResizeObserverSize)\n/* harmony export */ });\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n\nvar ResizeObserverSize = (function () {\n    function ResizeObserverSize(inlineSize, blockSize) {\n        this.inlineSize = inlineSize;\n        this.blockSize = blockSize;\n        (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_0__.freeze)(this);\n    }\n    return ResizeObserverSize;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyU2l6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEscURBQU07QUFDZDtBQUNBO0FBQ0EsQ0FBQztBQUM2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyU2l6ZS5qcz9jNjU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyZWV6ZSB9IGZyb20gJy4vdXRpbHMvZnJlZXplJztcbnZhciBSZXNpemVPYnNlcnZlclNpemUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyU2l6ZShpbmxpbmVTaXplLCBibG9ja1NpemUpIHtcbiAgICAgICAgdGhpcy5pbmxpbmVTaXplID0gaW5saW5lU2l6ZTtcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSBibG9ja1NpemU7XG4gICAgICAgIGZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyU2l6ZTtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlclNpemUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"broadcastActiveObservations\": () => (/* binding */ broadcastActiveObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n/* harmony import */ var _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverEntry */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\");\n/* harmony import */ var _calculateDepthForNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculateDepthForNode */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\");\n/* harmony import */ var _calculateBoxSize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./calculateBoxSize */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\");\n\n\n\n\nvar broadcastActiveObservations = function () {\n    var shallowestDepth = Infinity;\n    var callbacks = [];\n    _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.forEach(function processObserver(ro) {\n        if (ro.activeTargets.length === 0) {\n            return;\n        }\n        var entries = [];\n        ro.activeTargets.forEach(function processTarget(ot) {\n            var entry = new _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverEntry(ot.target);\n            var targetDepth = (0,_calculateDepthForNode__WEBPACK_IMPORTED_MODULE_2__.calculateDepthForNode)(ot.target);\n            entries.push(entry);\n            ot.lastReportedSize = (0,_calculateBoxSize__WEBPACK_IMPORTED_MODULE_3__.calculateBoxSize)(ot.target, ot.observedBox);\n            if (targetDepth < shallowestDepth) {\n                shallowestDepth = targetDepth;\n            }\n        });\n        callbacks.push(function resizeObserverCallback() {\n            ro.callback.call(ro.observer, entries, ro.observer);\n        });\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n    });\n    for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n        var callback = callbacks_1[_i];\n        callback();\n    }\n    return shallowestDepth;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJEO0FBQ0U7QUFDRztBQUNWO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLElBQUksMkVBQXVCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIscUVBQW1CO0FBQy9DLDhCQUE4Qiw2RUFBcUI7QUFDbkQ7QUFDQSxrQ0FBa0MsbUVBQWdCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLDhDQUE4Qyx5QkFBeUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zLmpzP2NhYjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbmltcG9ydCB7IFJlc2l6ZU9ic2VydmVyRW50cnkgfSBmcm9tICcuLi9SZXNpemVPYnNlcnZlckVudHJ5JztcbmltcG9ydCB7IGNhbGN1bGF0ZURlcHRoRm9yTm9kZSB9IGZyb20gJy4vY2FsY3VsYXRlRGVwdGhGb3JOb2RlJztcbmltcG9ydCB7IGNhbGN1bGF0ZUJveFNpemUgfSBmcm9tICcuL2NhbGN1bGF0ZUJveFNpemUnO1xudmFyIGJyb2FkY2FzdEFjdGl2ZU9ic2VydmF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2hhbGxvd2VzdERlcHRoID0gSW5maW5pdHk7XG4gICAgdmFyIGNhbGxiYWNrcyA9IFtdO1xuICAgIHJlc2l6ZU9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIHByb2Nlc3NPYnNlcnZlcihybykge1xuICAgICAgICBpZiAocm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgICAgICByby5hY3RpdmVUYXJnZXRzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc1RhcmdldChvdCkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob3QudGFyZ2V0KTtcbiAgICAgICAgICAgIHZhciB0YXJnZXREZXB0aCA9IGNhbGN1bGF0ZURlcHRoRm9yTm9kZShvdC50YXJnZXQpO1xuICAgICAgICAgICAgZW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIG90Lmxhc3RSZXBvcnRlZFNpemUgPSBjYWxjdWxhdGVCb3hTaXplKG90LnRhcmdldCwgb3Qub2JzZXJ2ZWRCb3gpO1xuICAgICAgICAgICAgaWYgKHRhcmdldERlcHRoIDwgc2hhbGxvd2VzdERlcHRoKSB7XG4gICAgICAgICAgICAgICAgc2hhbGxvd2VzdERlcHRoID0gdGFyZ2V0RGVwdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiByZXNpemVPYnNlcnZlckNhbGxiYWNrKCkge1xuICAgICAgICAgICAgcm8uY2FsbGJhY2suY2FsbChyby5vYnNlcnZlciwgZW50cmllcywgcm8ub2JzZXJ2ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcm8uYWN0aXZlVGFyZ2V0cy5zcGxpY2UoMCwgcm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGgpO1xuICAgIH0pO1xuICAgIGZvciAodmFyIF9pID0gMCwgY2FsbGJhY2tzXzEgPSBjYWxsYmFja3M7IF9pIDwgY2FsbGJhY2tzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc18xW19pXTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYWxsb3dlc3REZXB0aDtcbn07XG5leHBvcnQgeyBicm9hZGNhc3RBY3RpdmVPYnNlcnZhdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateBoxSize\": () => (/* binding */ calculateBoxSize),\n/* harmony export */   \"calculateBoxSizes\": () => (/* binding */ calculateBoxSizes)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ResizeObserverBoxOptions */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\");\n/* harmony import */ var _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverSize */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\");\n/* harmony import */ var _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../DOMRectReadOnly */ \"./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n/* harmony import */ var _utils_global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/global */ \"./node_modules/@juggle/resize-observer/lib/utils/global.js\");\n\n\n\n\n\n\nvar cache = new WeakMap();\nvar scrollRegexp = /auto|scroll/;\nvar verticalRegexp = /^tb|vertical/;\nvar IE = (/msie|trident/i).test(_utils_global__WEBPACK_IMPORTED_MODULE_5__.global.navigator && _utils_global__WEBPACK_IMPORTED_MODULE_5__.global.navigator.userAgent);\nvar parseDimension = function (pixel) { return parseFloat(pixel || '0'); };\nvar size = function (inlineSize, blockSize, switchSizes) {\n    if (inlineSize === void 0) { inlineSize = 0; }\n    if (blockSize === void 0) { blockSize = 0; }\n    if (switchSizes === void 0) { switchSizes = false; }\n    return new _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);\n};\nvar zeroBoxes = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_4__.freeze)({\n    devicePixelContentBoxSize: size(),\n    borderBoxSize: size(),\n    contentBoxSize: size(),\n    contentRect: new _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__.DOMRectReadOnly(0, 0, 0, 0)\n});\nvar calculateBoxSizes = function (target, forceRecalculation) {\n    if (forceRecalculation === void 0) { forceRecalculation = false; }\n    if (cache.has(target) && !forceRecalculation) {\n        return cache.get(target);\n    }\n    if ((0,_utils_element__WEBPACK_IMPORTED_MODULE_3__.isHidden)(target)) {\n        cache.set(target, zeroBoxes);\n        return zeroBoxes;\n    }\n    var cs = getComputedStyle(target);\n    var svg = (0,_utils_element__WEBPACK_IMPORTED_MODULE_3__.isSVG)(target) && target.ownerSVGElement && target.getBBox();\n    var removePadding = !IE && cs.boxSizing === 'border-box';\n    var switchSizes = verticalRegexp.test(cs.writingMode || '');\n    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n    var horizontalPadding = paddingLeft + paddingRight;\n    var verticalPadding = paddingTop + paddingBottom;\n    var horizontalBorderArea = borderLeft + borderRight;\n    var verticalBorderArea = borderTop + borderBottom;\n    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n    var boxes = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_4__.freeze)({\n        devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),\n        borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n        contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n        contentRect: new _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__.DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n    });\n    cache.set(target, boxes);\n    return boxes;\n};\nvar calculateBoxSize = function (target, observedBox, forceRecalculation) {\n    var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;\n    switch (observedBox) {\n        case _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:\n            return devicePixelContentBoxSize;\n        case _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.BORDER_BOX:\n            return borderBoxSize;\n        default:\n            return contentBoxSize;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlQm94U2l6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF1RTtBQUNaO0FBQ047QUFDRjtBQUNWO0FBQ0E7QUFDekM7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDJEQUFnQixJQUFJLHFFQUEwQjtBQUM5RSx3Q0FBd0M7QUFDeEM7QUFDQSxpQ0FBaUM7QUFDakMsZ0NBQWdDO0FBQ2hDLGtDQUFrQztBQUNsQyxlQUFlLG1FQUFrQjtBQUNqQztBQUNBLGdCQUFnQixxREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkRBQWU7QUFDcEMsQ0FBQztBQUNEO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0RBQVE7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHFEQUFLO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNkRBQWU7QUFDeEMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsd0dBQWlEO0FBQzlEO0FBQ0EsYUFBYSwwRkFBbUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlQm94U2l6ZS5qcz8xMDZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyB9IGZyb20gJy4uL1Jlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyc7XG5pbXBvcnQgeyBSZXNpemVPYnNlcnZlclNpemUgfSBmcm9tICcuLi9SZXNpemVPYnNlcnZlclNpemUnO1xuaW1wb3J0IHsgRE9NUmVjdFJlYWRPbmx5IH0gZnJvbSAnLi4vRE9NUmVjdFJlYWRPbmx5JztcbmltcG9ydCB7IGlzU1ZHLCBpc0hpZGRlbiB9IGZyb20gJy4uL3V0aWxzL2VsZW1lbnQnO1xuaW1wb3J0IHsgZnJlZXplIH0gZnJvbSAnLi4vdXRpbHMvZnJlZXplJztcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gJy4uL3V0aWxzL2dsb2JhbCc7XG52YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xudmFyIHNjcm9sbFJlZ2V4cCA9IC9hdXRvfHNjcm9sbC87XG52YXIgdmVydGljYWxSZWdleHAgPSAvXnRifHZlcnRpY2FsLztcbnZhciBJRSA9ICgvbXNpZXx0cmlkZW50L2kpLnRlc3QoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG52YXIgcGFyc2VEaW1lbnNpb24gPSBmdW5jdGlvbiAocGl4ZWwpIHsgcmV0dXJuIHBhcnNlRmxvYXQocGl4ZWwgfHwgJzAnKTsgfTtcbnZhciBzaXplID0gZnVuY3Rpb24gKGlubGluZVNpemUsIGJsb2NrU2l6ZSwgc3dpdGNoU2l6ZXMpIHtcbiAgICBpZiAoaW5saW5lU2l6ZSA9PT0gdm9pZCAwKSB7IGlubGluZVNpemUgPSAwOyB9XG4gICAgaWYgKGJsb2NrU2l6ZSA9PT0gdm9pZCAwKSB7IGJsb2NrU2l6ZSA9IDA7IH1cbiAgICBpZiAoc3dpdGNoU2l6ZXMgPT09IHZvaWQgMCkgeyBzd2l0Y2hTaXplcyA9IGZhbHNlOyB9XG4gICAgcmV0dXJuIG5ldyBSZXNpemVPYnNlcnZlclNpemUoKHN3aXRjaFNpemVzID8gYmxvY2tTaXplIDogaW5saW5lU2l6ZSkgfHwgMCwgKHN3aXRjaFNpemVzID8gaW5saW5lU2l6ZSA6IGJsb2NrU2l6ZSkgfHwgMCk7XG59O1xudmFyIHplcm9Cb3hlcyA9IGZyZWV6ZSh7XG4gICAgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTogc2l6ZSgpLFxuICAgIGJvcmRlckJveFNpemU6IHNpemUoKSxcbiAgICBjb250ZW50Qm94U2l6ZTogc2l6ZSgpLFxuICAgIGNvbnRlbnRSZWN0OiBuZXcgRE9NUmVjdFJlYWRPbmx5KDAsIDAsIDAsIDApXG59KTtcbnZhciBjYWxjdWxhdGVCb3hTaXplcyA9IGZ1bmN0aW9uICh0YXJnZXQsIGZvcmNlUmVjYWxjdWxhdGlvbikge1xuICAgIGlmIChmb3JjZVJlY2FsY3VsYXRpb24gPT09IHZvaWQgMCkgeyBmb3JjZVJlY2FsY3VsYXRpb24gPSBmYWxzZTsgfVxuICAgIGlmIChjYWNoZS5oYXModGFyZ2V0KSAmJiAhZm9yY2VSZWNhbGN1bGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5nZXQodGFyZ2V0KTtcbiAgICB9XG4gICAgaWYgKGlzSGlkZGVuKHRhcmdldCkpIHtcbiAgICAgICAgY2FjaGUuc2V0KHRhcmdldCwgemVyb0JveGVzKTtcbiAgICAgICAgcmV0dXJuIHplcm9Cb3hlcztcbiAgICB9XG4gICAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICAgIHZhciBzdmcgPSBpc1NWRyh0YXJnZXQpICYmIHRhcmdldC5vd25lclNWR0VsZW1lbnQgJiYgdGFyZ2V0LmdldEJCb3goKTtcbiAgICB2YXIgcmVtb3ZlUGFkZGluZyA9ICFJRSAmJiBjcy5ib3hTaXppbmcgPT09ICdib3JkZXItYm94JztcbiAgICB2YXIgc3dpdGNoU2l6ZXMgPSB2ZXJ0aWNhbFJlZ2V4cC50ZXN0KGNzLndyaXRpbmdNb2RlIHx8ICcnKTtcbiAgICB2YXIgY2FuU2Nyb2xsVmVydGljYWxseSA9ICFzdmcgJiYgc2Nyb2xsUmVnZXhwLnRlc3QoY3Mub3ZlcmZsb3dZIHx8ICcnKTtcbiAgICB2YXIgY2FuU2Nyb2xsSG9yaXpvbnRhbGx5ID0gIXN2ZyAmJiBzY3JvbGxSZWdleHAudGVzdChjcy5vdmVyZmxvd1ggfHwgJycpO1xuICAgIHZhciBwYWRkaW5nVG9wID0gc3ZnID8gMCA6IHBhcnNlRGltZW5zaW9uKGNzLnBhZGRpbmdUb3ApO1xuICAgIHZhciBwYWRkaW5nUmlnaHQgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ1JpZ2h0KTtcbiAgICB2YXIgcGFkZGluZ0JvdHRvbSA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5wYWRkaW5nQm90dG9tKTtcbiAgICB2YXIgcGFkZGluZ0xlZnQgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ0xlZnQpO1xuICAgIHZhciBib3JkZXJUb3AgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MuYm9yZGVyVG9wV2lkdGgpO1xuICAgIHZhciBib3JkZXJSaWdodCA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5ib3JkZXJSaWdodFdpZHRoKTtcbiAgICB2YXIgYm9yZGVyQm90dG9tID0gc3ZnID8gMCA6IHBhcnNlRGltZW5zaW9uKGNzLmJvcmRlckJvdHRvbVdpZHRoKTtcbiAgICB2YXIgYm9yZGVyTGVmdCA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5ib3JkZXJMZWZ0V2lkdGgpO1xuICAgIHZhciBob3Jpem9udGFsUGFkZGluZyA9IHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0O1xuICAgIHZhciB2ZXJ0aWNhbFBhZGRpbmcgPSBwYWRkaW5nVG9wICsgcGFkZGluZ0JvdHRvbTtcbiAgICB2YXIgaG9yaXpvbnRhbEJvcmRlckFyZWEgPSBib3JkZXJMZWZ0ICsgYm9yZGVyUmlnaHQ7XG4gICAgdmFyIHZlcnRpY2FsQm9yZGVyQXJlYSA9IGJvcmRlclRvcCArIGJvcmRlckJvdHRvbTtcbiAgICB2YXIgaG9yaXpvbnRhbFNjcm9sbGJhclRoaWNrbmVzcyA9ICFjYW5TY3JvbGxIb3Jpem9udGFsbHkgPyAwIDogdGFyZ2V0Lm9mZnNldEhlaWdodCAtIHZlcnRpY2FsQm9yZGVyQXJlYSAtIHRhcmdldC5jbGllbnRIZWlnaHQ7XG4gICAgdmFyIHZlcnRpY2FsU2Nyb2xsYmFyVGhpY2tuZXNzID0gIWNhblNjcm9sbFZlcnRpY2FsbHkgPyAwIDogdGFyZ2V0Lm9mZnNldFdpZHRoIC0gaG9yaXpvbnRhbEJvcmRlckFyZWEgLSB0YXJnZXQuY2xpZW50V2lkdGg7XG4gICAgdmFyIHdpZHRoUmVkdWN0aW9uID0gcmVtb3ZlUGFkZGluZyA/IGhvcml6b250YWxQYWRkaW5nICsgaG9yaXpvbnRhbEJvcmRlckFyZWEgOiAwO1xuICAgIHZhciBoZWlnaHRSZWR1Y3Rpb24gPSByZW1vdmVQYWRkaW5nID8gdmVydGljYWxQYWRkaW5nICsgdmVydGljYWxCb3JkZXJBcmVhIDogMDtcbiAgICB2YXIgY29udGVudFdpZHRoID0gc3ZnID8gc3ZnLndpZHRoIDogcGFyc2VEaW1lbnNpb24oY3Mud2lkdGgpIC0gd2lkdGhSZWR1Y3Rpb24gLSB2ZXJ0aWNhbFNjcm9sbGJhclRoaWNrbmVzcztcbiAgICB2YXIgY29udGVudEhlaWdodCA9IHN2ZyA/IHN2Zy5oZWlnaHQgOiBwYXJzZURpbWVuc2lvbihjcy5oZWlnaHQpIC0gaGVpZ2h0UmVkdWN0aW9uIC0gaG9yaXpvbnRhbFNjcm9sbGJhclRoaWNrbmVzcztcbiAgICB2YXIgYm9yZGVyQm94V2lkdGggPSBjb250ZW50V2lkdGggKyBob3Jpem9udGFsUGFkZGluZyArIHZlcnRpY2FsU2Nyb2xsYmFyVGhpY2tuZXNzICsgaG9yaXpvbnRhbEJvcmRlckFyZWE7XG4gICAgdmFyIGJvcmRlckJveEhlaWdodCA9IGNvbnRlbnRIZWlnaHQgKyB2ZXJ0aWNhbFBhZGRpbmcgKyBob3Jpem9udGFsU2Nyb2xsYmFyVGhpY2tuZXNzICsgdmVydGljYWxCb3JkZXJBcmVhO1xuICAgIHZhciBib3hlcyA9IGZyZWV6ZSh7XG4gICAgICAgIGRldmljZVBpeGVsQ29udGVudEJveFNpemU6IHNpemUoTWF0aC5yb3VuZChjb250ZW50V2lkdGggKiBkZXZpY2VQaXhlbFJhdGlvKSwgTWF0aC5yb3VuZChjb250ZW50SGVpZ2h0ICogZGV2aWNlUGl4ZWxSYXRpbyksIHN3aXRjaFNpemVzKSxcbiAgICAgICAgYm9yZGVyQm94U2l6ZTogc2l6ZShib3JkZXJCb3hXaWR0aCwgYm9yZGVyQm94SGVpZ2h0LCBzd2l0Y2hTaXplcyksXG4gICAgICAgIGNvbnRlbnRCb3hTaXplOiBzaXplKGNvbnRlbnRXaWR0aCwgY29udGVudEhlaWdodCwgc3dpdGNoU2l6ZXMpLFxuICAgICAgICBjb250ZW50UmVjdDogbmV3IERPTVJlY3RSZWFkT25seShwYWRkaW5nTGVmdCwgcGFkZGluZ1RvcCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0KVxuICAgIH0pO1xuICAgIGNhY2hlLnNldCh0YXJnZXQsIGJveGVzKTtcbiAgICByZXR1cm4gYm94ZXM7XG59O1xudmFyIGNhbGN1bGF0ZUJveFNpemUgPSBmdW5jdGlvbiAodGFyZ2V0LCBvYnNlcnZlZEJveCwgZm9yY2VSZWNhbGN1bGF0aW9uKSB7XG4gICAgdmFyIF9hID0gY2FsY3VsYXRlQm94U2l6ZXModGFyZ2V0LCBmb3JjZVJlY2FsY3VsYXRpb24pLCBib3JkZXJCb3hTaXplID0gX2EuYm9yZGVyQm94U2l6ZSwgY29udGVudEJveFNpemUgPSBfYS5jb250ZW50Qm94U2l6ZSwgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZSA9IF9hLmRldmljZVBpeGVsQ29udGVudEJveFNpemU7XG4gICAgc3dpdGNoIChvYnNlcnZlZEJveCkge1xuICAgICAgICBjYXNlIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5ERVZJQ0VfUElYRUxfQ09OVEVOVF9CT1g6XG4gICAgICAgICAgICByZXR1cm4gZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTtcbiAgICAgICAgY2FzZSBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMuQk9SREVSX0JPWDpcbiAgICAgICAgICAgIHJldHVybiBib3JkZXJCb3hTaXplO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRCb3hTaXplO1xuICAgIH1cbn07XG5leHBvcnQgeyBjYWxjdWxhdGVCb3hTaXplLCBjYWxjdWxhdGVCb3hTaXplcyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateDepthForNode\": () => (/* binding */ calculateDepthForNode)\n/* harmony export */ });\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\nvar calculateDepthForNode = function (node) {\n    if ((0,_utils_element__WEBPACK_IMPORTED_MODULE_0__.isHidden)(node)) {\n        return Infinity;\n    }\n    var depth = 0;\n    var parent = node.parentNode;\n    while (parent) {\n        depth += 1;\n        parent = parent.parentNode;\n    }\n    return depth;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlRGVwdGhGb3JOb2RlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDO0FBQ0EsUUFBUSx3REFBUTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlRGVwdGhGb3JOb2RlLmpzP2M5MzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNIaWRkZW4gfSBmcm9tICcuLi91dGlscy9lbGVtZW50JztcbnZhciBjYWxjdWxhdGVEZXB0aEZvck5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChpc0hpZGRlbihub2RlKSkge1xuICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIGRlcHRoICs9IDE7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZGVwdGg7XG59O1xuZXhwb3J0IHsgY2FsY3VsYXRlRGVwdGhGb3JOb2RlIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deliverResizeLoopError\": () => (/* binding */ deliverResizeLoopError)\n/* harmony export */ });\nvar msg = 'ResizeObserver loop completed with undelivered notifications.';\nvar deliverResizeLoopError = function () {\n    var event;\n    if (typeof ErrorEvent === 'function') {\n        event = new ErrorEvent('error', {\n            message: msg\n        });\n    }\n    else {\n        event = document.createEvent('Event');\n        event.initEvent('error', false, false);\n        event.message = msg;\n    }\n    window.dispatchEvent(event);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvZGVsaXZlclJlc2l6ZUxvb3BFcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9hbGdvcml0aG1zL2RlbGl2ZXJSZXNpemVMb29wRXJyb3IuanM/YzJlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbXNnID0gJ1Jlc2l6ZU9ic2VydmVyIGxvb3AgY29tcGxldGVkIHdpdGggdW5kZWxpdmVyZWQgbm90aWZpY2F0aW9ucy4nO1xudmFyIGRlbGl2ZXJSZXNpemVMb29wRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV2ZW50O1xuICAgIGlmICh0eXBlb2YgRXJyb3JFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBldmVudCA9IG5ldyBFcnJvckV2ZW50KCdlcnJvcicsIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1zZ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICAgIGV2ZW50LmluaXRFdmVudCgnZXJyb3InLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBldmVudC5tZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG59O1xuZXhwb3J0IHsgZGVsaXZlclJlc2l6ZUxvb3BFcnJvciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gatherActiveObservationsAtDepth\": () => (/* binding */ gatherActiveObservationsAtDepth)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n/* harmony import */ var _calculateDepthForNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calculateDepthForNode */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\");\n\n\nvar gatherActiveObservationsAtDepth = function (depth) {\n    _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.forEach(function processObserver(ro) {\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n        ro.skippedTargets.splice(0, ro.skippedTargets.length);\n        ro.observationTargets.forEach(function processTarget(ot) {\n            if (ot.isActive()) {\n                if ((0,_calculateDepthForNode__WEBPACK_IMPORTED_MODULE_1__.calculateDepthForNode)(ot.target) > depth) {\n                    ro.activeTargets.push(ot);\n                }\n                else {\n                    ro.skippedTargets.push(ot);\n                }\n            }\n        });\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkQ7QUFDSztBQUNoRTtBQUNBLElBQUksMkVBQXVCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDZFQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQzJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvYWxnb3JpdGhtcy9nYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoLmpzPzQ1YjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbmltcG9ydCB7IGNhbGN1bGF0ZURlcHRoRm9yTm9kZSB9IGZyb20gJy4vY2FsY3VsYXRlRGVwdGhGb3JOb2RlJztcbnZhciBnYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoID0gZnVuY3Rpb24gKGRlcHRoKSB7XG4gICAgcmVzaXplT2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc09ic2VydmVyKHJvKSB7XG4gICAgICAgIHJvLmFjdGl2ZVRhcmdldHMuc3BsaWNlKDAsIHJvLmFjdGl2ZVRhcmdldHMubGVuZ3RoKTtcbiAgICAgICAgcm8uc2tpcHBlZFRhcmdldHMuc3BsaWNlKDAsIHJvLnNraXBwZWRUYXJnZXRzLmxlbmd0aCk7XG4gICAgICAgIHJvLm9ic2VydmF0aW9uVGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uIHByb2Nlc3NUYXJnZXQob3QpIHtcbiAgICAgICAgICAgIGlmIChvdC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGN1bGF0ZURlcHRoRm9yTm9kZShvdC50YXJnZXQpID4gZGVwdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcm8uYWN0aXZlVGFyZ2V0cy5wdXNoKG90KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJvLnNraXBwZWRUYXJnZXRzLnB1c2gob3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0IHsgZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hasActiveObservations\": () => (/* binding */ hasActiveObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n\nvar hasActiveObservations = function () {\n    return _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzQWN0aXZlT2JzZXJ2YXRpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJEO0FBQzNEO0FBQ0EsV0FBVyx3RUFBb0IsaUJBQWlCLHFDQUFxQztBQUNyRjtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzQWN0aXZlT2JzZXJ2YXRpb25zLmpzP2RkYTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbnZhciBoYXNBY3RpdmVPYnNlcnZhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlc2l6ZU9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChybykgeyByZXR1cm4gcm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGggPiAwOyB9KTtcbn07XG5leHBvcnQgeyBoYXNBY3RpdmVPYnNlcnZhdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hasSkippedObservations\": () => (/* binding */ hasSkippedObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n\nvar hasSkippedObservations = function () {\n    return _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzU2tpcHBlZE9ic2VydmF0aW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyRDtBQUMzRDtBQUNBLFdBQVcsd0VBQW9CLGlCQUFpQixzQ0FBc0M7QUFDdEY7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9hbGdvcml0aG1zL2hhc1NraXBwZWRPYnNlcnZhdGlvbnMuanM/YzEwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNpemVPYnNlcnZlcnMgfSBmcm9tICcuLi91dGlscy9yZXNpemVPYnNlcnZlcnMnO1xudmFyIGhhc1NraXBwZWRPYnNlcnZhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlc2l6ZU9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChybykgeyByZXR1cm4gcm8uc2tpcHBlZFRhcmdldHMubGVuZ3RoID4gMDsgfSk7XG59O1xuZXhwb3J0IHsgaGFzU2tpcHBlZE9ic2VydmF0aW9ucyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserver\": () => (/* reexport safe */ _ResizeObserver__WEBPACK_IMPORTED_MODULE_0__.ResizeObserver),\n/* harmony export */   \"ResizeObserverEntry\": () => (/* reexport safe */ _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverEntry),\n/* harmony export */   \"ResizeObserverSize\": () => (/* reexport safe */ _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_2__.ResizeObserverSize)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ResizeObserver */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserver.js\");\n/* harmony import */ var _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverEntry */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\");\n/* harmony import */ var _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ResizeObserverSize */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2V4cG9ydHMvcmVzaXplLW9ic2VydmVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFtRDtBQUNVO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9leHBvcnRzL3Jlc2l6ZS1vYnNlcnZlci5qcz8xZDFmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyIH0gZnJvbSAnLi4vUmVzaXplT2JzZXJ2ZXInO1xuZXhwb3J0IHsgUmVzaXplT2JzZXJ2ZXJFbnRyeSB9IGZyb20gJy4uL1Jlc2l6ZU9ic2VydmVyRW50cnknO1xuZXhwb3J0IHsgUmVzaXplT2JzZXJ2ZXJTaXplIH0gZnJvbSAnLi4vUmVzaXplT2JzZXJ2ZXJTaXplJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/element.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isElement\": () => (/* binding */ isElement),\n/* harmony export */   \"isHidden\": () => (/* binding */ isHidden),\n/* harmony export */   \"isReplacedElement\": () => (/* binding */ isReplacedElement),\n/* harmony export */   \"isSVG\": () => (/* binding */ isSVG)\n/* harmony export */ });\nvar isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };\nvar isHidden = function (target) {\n    if (isSVG(target)) {\n        var _a = target.getBBox(), width = _a.width, height = _a.height;\n        return !width && !height;\n    }\n    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;\n    return !(offsetWidth || offsetHeight || target.getClientRects().length);\n};\nvar isElement = function (obj) {\n    var _a, _b;\n    if (obj instanceof Element) {\n        return true;\n    }\n    var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;\n    return !!(scope && obj instanceof scope.Element);\n};\nvar isReplacedElement = function (target) {\n    switch (target.tagName) {\n        case 'INPUT':\n            if (target.type !== 'image') {\n                break;\n            }\n        case 'VIDEO':\n        case 'AUDIO':\n        case 'EMBED':\n        case 'OBJECT':\n        case 'CANVAS':\n        case 'IFRAME':\n        case 'IMG':\n            return true;\n    }\n    return false;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2VsZW1lbnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDeUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9lbGVtZW50LmpzPzNjZDUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzU1ZHID0gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCAmJiAnZ2V0QkJveCcgaW4gdGFyZ2V0OyB9O1xudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGlmIChpc1NWRyh0YXJnZXQpKSB7XG4gICAgICAgIHZhciBfYSA9IHRhcmdldC5nZXRCQm94KCksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcbiAgICAgICAgcmV0dXJuICF3aWR0aCAmJiAhaGVpZ2h0O1xuICAgIH1cbiAgICB2YXIgX2IgPSB0YXJnZXQsIG9mZnNldFdpZHRoID0gX2Iub2Zmc2V0V2lkdGgsIG9mZnNldEhlaWdodCA9IF9iLm9mZnNldEhlaWdodDtcbiAgICByZXR1cm4gIShvZmZzZXRXaWR0aCB8fCBvZmZzZXRIZWlnaHQgfHwgdGFyZ2V0LmdldENsaWVudFJlY3RzKCkubGVuZ3RoKTtcbn07XG52YXIgaXNFbGVtZW50ID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBzY29wZSA9IChfYiA9IChfYSA9IG9iaikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm93bmVyRG9jdW1lbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5kZWZhdWx0VmlldztcbiAgICByZXR1cm4gISEoc2NvcGUgJiYgb2JqIGluc3RhbmNlb2Ygc2NvcGUuRWxlbWVudCk7XG59O1xudmFyIGlzUmVwbGFjZWRFbGVtZW50ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHN3aXRjaCAodGFyZ2V0LnRhZ05hbWUpIHtcbiAgICAgICAgY2FzZSAnSU5QVVQnOlxuICAgICAgICAgICAgaWYgKHRhcmdldC50eXBlICE9PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1ZJREVPJzpcbiAgICAgICAgY2FzZSAnQVVESU8nOlxuICAgICAgICBjYXNlICdFTUJFRCc6XG4gICAgICAgIGNhc2UgJ09CSkVDVCc6XG4gICAgICAgIGNhc2UgJ0NBTlZBUyc6XG4gICAgICAgIGNhc2UgJ0lGUkFNRSc6XG4gICAgICAgIGNhc2UgJ0lNRyc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydCB7IGlzU1ZHLCBpc0hpZGRlbiwgaXNFbGVtZW50LCBpc1JlcGxhY2VkRWxlbWVudCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/element.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js":
/*!******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/freeze.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"freeze\": () => (/* binding */ freeze)\n/* harmony export */ });\nvar freeze = function (obj) { return Object.freeze(obj); };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2ZyZWV6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvZnJlZXplLmpzP2ZjZjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBmcmVlemUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBPYmplY3QuZnJlZXplKG9iaik7IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/freeze.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/global.js":
/*!******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/global.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"global\": () => (/* binding */ global)\n/* harmony export */ });\nvar global = typeof window !== 'undefined' ? window : {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2dsb2JhbC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9nbG9iYWwuanM/Y2I3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIGdsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/global.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/process.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/process.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"process\": () => (/* binding */ process)\n/* harmony export */ });\n/* harmony import */ var _algorithms_hasActiveObservations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../algorithms/hasActiveObservations */ \"./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js\");\n/* harmony import */ var _algorithms_hasSkippedObservations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../algorithms/hasSkippedObservations */ \"./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js\");\n/* harmony import */ var _algorithms_deliverResizeLoopError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../algorithms/deliverResizeLoopError */ \"./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js\");\n/* harmony import */ var _algorithms_broadcastActiveObservations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../algorithms/broadcastActiveObservations */ \"./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js\");\n/* harmony import */ var _algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../algorithms/gatherActiveObservationsAtDepth */ \"./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js\");\n\n\n\n\n\nvar process = function () {\n    var depth = 0;\n    (0,_algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__.gatherActiveObservationsAtDepth)(depth);\n    while ((0,_algorithms_hasActiveObservations__WEBPACK_IMPORTED_MODULE_0__.hasActiveObservations)()) {\n        depth = (0,_algorithms_broadcastActiveObservations__WEBPACK_IMPORTED_MODULE_3__.broadcastActiveObservations)();\n        (0,_algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__.gatherActiveObservationsAtDepth)(depth);\n    }\n    if ((0,_algorithms_hasSkippedObservations__WEBPACK_IMPORTED_MODULE_1__.hasSkippedObservations)()) {\n        (0,_algorithms_deliverResizeLoopError__WEBPACK_IMPORTED_MODULE_2__.deliverResizeLoopError)();\n    }\n    return depth > 0;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3Byb2Nlc3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTRFO0FBQ0U7QUFDQTtBQUNVO0FBQ1E7QUFDaEc7QUFDQTtBQUNBLElBQUksNEdBQStCO0FBQ25DLFdBQVcsd0ZBQXFCO0FBQ2hDLGdCQUFnQixvR0FBMkI7QUFDM0MsUUFBUSw0R0FBK0I7QUFDdkM7QUFDQSxRQUFRLDBGQUFzQjtBQUM5QixRQUFRLDBGQUFzQjtBQUM5QjtBQUNBO0FBQ0E7QUFDbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9wcm9jZXNzLmpzP2Q0YzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzQWN0aXZlT2JzZXJ2YXRpb25zIH0gZnJvbSAnLi4vYWxnb3JpdGhtcy9oYXNBY3RpdmVPYnNlcnZhdGlvbnMnO1xuaW1wb3J0IHsgaGFzU2tpcHBlZE9ic2VydmF0aW9ucyB9IGZyb20gJy4uL2FsZ29yaXRobXMvaGFzU2tpcHBlZE9ic2VydmF0aW9ucyc7XG5pbXBvcnQgeyBkZWxpdmVyUmVzaXplTG9vcEVycm9yIH0gZnJvbSAnLi4vYWxnb3JpdGhtcy9kZWxpdmVyUmVzaXplTG9vcEVycm9yJztcbmltcG9ydCB7IGJyb2FkY2FzdEFjdGl2ZU9ic2VydmF0aW9ucyB9IGZyb20gJy4uL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zJztcbmltcG9ydCB7IGdhdGhlckFjdGl2ZU9ic2VydmF0aW9uc0F0RGVwdGggfSBmcm9tICcuLi9hbGdvcml0aG1zL2dhdGhlckFjdGl2ZU9ic2VydmF0aW9uc0F0RGVwdGgnO1xudmFyIHByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlcHRoID0gMDtcbiAgICBnYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoKGRlcHRoKTtcbiAgICB3aGlsZSAoaGFzQWN0aXZlT2JzZXJ2YXRpb25zKCkpIHtcbiAgICAgICAgZGVwdGggPSBicm9hZGNhc3RBY3RpdmVPYnNlcnZhdGlvbnMoKTtcbiAgICAgICAgZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aChkZXB0aCk7XG4gICAgfVxuICAgIGlmIChoYXNTa2lwcGVkT2JzZXJ2YXRpb25zKCkpIHtcbiAgICAgICAgZGVsaXZlclJlc2l6ZUxvb3BFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gZGVwdGggPiAwO1xufTtcbmV4cG9ydCB7IHByb2Nlc3MgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/process.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"queueMicroTask\": () => (/* binding */ queueMicroTask)\n/* harmony export */ });\nvar trigger;\nvar callbacks = [];\nvar notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };\nvar queueMicroTask = function (callback) {\n    if (!trigger) {\n        var toggle_1 = 0;\n        var el_1 = document.createTextNode('');\n        var config = { characterData: true };\n        new MutationObserver(function () { return notify(); }).observe(el_1, config);\n        trigger = function () { el_1.textContent = \"\" + (toggle_1 ? toggle_1-- : toggle_1++); };\n    }\n    callbacks.push(callback);\n    trigger();\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3F1ZXVlTWljcm9UYXNrLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsMkJBQTJCLG1EQUFtRCxjQUFjO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLDJDQUEyQyxrQkFBa0I7QUFDN0QsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQzBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvcXVldWVNaWNyb1Rhc2suanM/YTk5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdHJpZ2dlcjtcbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFja3Muc3BsaWNlKDApLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IHJldHVybiBjYigpOyB9KTsgfTtcbnZhciBxdWV1ZU1pY3JvVGFzayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGlmICghdHJpZ2dlcikge1xuICAgICAgICB2YXIgdG9nZ2xlXzEgPSAwO1xuICAgICAgICB2YXIgZWxfMSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgdmFyIGNvbmZpZyA9IHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9O1xuICAgICAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7IHJldHVybiBub3RpZnkoKTsgfSkub2JzZXJ2ZShlbF8xLCBjb25maWcpO1xuICAgICAgICB0cmlnZ2VyID0gZnVuY3Rpb24gKCkgeyBlbF8xLnRleHRDb250ZW50ID0gXCJcIiArICh0b2dnbGVfMSA/IHRvZ2dsZV8xLS0gOiB0b2dnbGVfMSsrKTsgfTtcbiAgICB9XG4gICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHRyaWdnZXIoKTtcbn07XG5leHBvcnQgeyBxdWV1ZU1pY3JvVGFzayB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"queueResizeObserver\": () => (/* binding */ queueResizeObserver)\n/* harmony export */ });\n/* harmony import */ var _queueMicroTask__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queueMicroTask */ \"./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js\");\n\nvar queueResizeObserver = function (cb) {\n    (0,_queueMicroTask__WEBPACK_IMPORTED_MODULE_0__.queueMicroTask)(function ResizeObserver() {\n        requestAnimationFrame(cb);\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3F1ZXVlUmVzaXplT2JzZXJ2ZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0Q7QUFDbEQ7QUFDQSxJQUFJLCtEQUFjO0FBQ2xCO0FBQ0EsS0FBSztBQUNMO0FBQytCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvcXVldWVSZXNpemVPYnNlcnZlci5qcz9hMzY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHF1ZXVlTWljcm9UYXNrIH0gZnJvbSAnLi9xdWV1ZU1pY3JvVGFzayc7XG52YXIgcXVldWVSZXNpemVPYnNlcnZlciA9IGZ1bmN0aW9uIChjYikge1xuICAgIHF1ZXVlTWljcm9UYXNrKGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpO1xuICAgIH0pO1xufTtcbmV4cG9ydCB7IHF1ZXVlUmVzaXplT2JzZXJ2ZXIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resizeObservers\": () => (/* binding */ resizeObservers)\n/* harmony export */ });\nvar resizeObservers = [];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3Jlc2l6ZU9ic2VydmVycy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9yZXNpemVPYnNlcnZlcnMuanM/YThlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVzaXplT2JzZXJ2ZXJzID0gW107XG5leHBvcnQgeyByZXNpemVPYnNlcnZlcnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/scheduler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/scheduler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"scheduler\": () => (/* binding */ scheduler),\n/* harmony export */   \"updateCount\": () => (/* binding */ updateCount)\n/* harmony export */ });\n/* harmony import */ var _process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process */ \"./node_modules/@juggle/resize-observer/lib/utils/process.js\");\n/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ \"./node_modules/@juggle/resize-observer/lib/utils/global.js\");\n/* harmony import */ var _queueResizeObserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queueResizeObserver */ \"./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js\");\n\n\n\nvar watching = 0;\nvar isWatching = function () { return !!watching; };\nvar CATCH_PERIOD = 250;\nvar observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\nvar events = [\n    'resize',\n    'load',\n    'transitionend',\n    'animationend',\n    'animationstart',\n    'animationiteration',\n    'keyup',\n    'keydown',\n    'mouseup',\n    'mousedown',\n    'mouseover',\n    'mouseout',\n    'blur',\n    'focus'\n];\nvar time = function (timeout) {\n    if (timeout === void 0) { timeout = 0; }\n    return Date.now() + timeout;\n};\nvar scheduled = false;\nvar Scheduler = (function () {\n    function Scheduler() {\n        var _this = this;\n        this.stopped = true;\n        this.listener = function () { return _this.schedule(); };\n    }\n    Scheduler.prototype.run = function (timeout) {\n        var _this = this;\n        if (timeout === void 0) { timeout = CATCH_PERIOD; }\n        if (scheduled) {\n            return;\n        }\n        scheduled = true;\n        var until = time(timeout);\n        (0,_queueResizeObserver__WEBPACK_IMPORTED_MODULE_2__.queueResizeObserver)(function () {\n            var elementsHaveResized = false;\n            try {\n                elementsHaveResized = (0,_process__WEBPACK_IMPORTED_MODULE_0__.process)();\n            }\n            finally {\n                scheduled = false;\n                timeout = until - time();\n                if (!isWatching()) {\n                    return;\n                }\n                if (elementsHaveResized) {\n                    _this.run(1000);\n                }\n                else if (timeout > 0) {\n                    _this.run(timeout);\n                }\n                else {\n                    _this.start();\n                }\n            }\n        });\n    };\n    Scheduler.prototype.schedule = function () {\n        this.stop();\n        this.run();\n    };\n    Scheduler.prototype.observe = function () {\n        var _this = this;\n        var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };\n        document.body ? cb() : _global__WEBPACK_IMPORTED_MODULE_1__.global.addEventListener('DOMContentLoaded', cb);\n    };\n    Scheduler.prototype.start = function () {\n        var _this = this;\n        if (this.stopped) {\n            this.stopped = false;\n            this.observer = new MutationObserver(this.listener);\n            this.observe();\n            events.forEach(function (name) { return _global__WEBPACK_IMPORTED_MODULE_1__.global.addEventListener(name, _this.listener, true); });\n        }\n    };\n    Scheduler.prototype.stop = function () {\n        var _this = this;\n        if (!this.stopped) {\n            this.observer && this.observer.disconnect();\n            events.forEach(function (name) { return _global__WEBPACK_IMPORTED_MODULE_1__.global.removeEventListener(name, _this.listener, true); });\n            this.stopped = true;\n        }\n    };\n    return Scheduler;\n}());\nvar scheduler = new Scheduler();\nvar updateCount = function (n) {\n    !watching && n > 0 && scheduler.start();\n    watching += n;\n    !watching && scheduler.stop();\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3NjaGVkdWxlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvQztBQUNGO0FBQzBCO0FBQzVEO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlFQUFtQjtBQUMzQjtBQUNBO0FBQ0Esc0NBQXNDLGlEQUFPO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsK0JBQStCLDREQUF1QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxPQUFPLDREQUF1QiwrQkFBK0I7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLE9BQU8sK0RBQTBCLCtCQUErQjtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9zY2hlZHVsZXIuanM/YjAwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9jZXNzIH0gZnJvbSAnLi9wcm9jZXNzJztcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gJy4vZ2xvYmFsJztcbmltcG9ydCB7IHF1ZXVlUmVzaXplT2JzZXJ2ZXIgfSBmcm9tICcuL3F1ZXVlUmVzaXplT2JzZXJ2ZXInO1xudmFyIHdhdGNoaW5nID0gMDtcbnZhciBpc1dhdGNoaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gISF3YXRjaGluZzsgfTtcbnZhciBDQVRDSF9QRVJJT0QgPSAyNTA7XG52YXIgb2JzZXJ2ZXJDb25maWcgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoYXJhY3RlckRhdGE6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9O1xudmFyIGV2ZW50cyA9IFtcbiAgICAncmVzaXplJyxcbiAgICAnbG9hZCcsXG4gICAgJ3RyYW5zaXRpb25lbmQnLFxuICAgICdhbmltYXRpb25lbmQnLFxuICAgICdhbmltYXRpb25zdGFydCcsXG4gICAgJ2FuaW1hdGlvbml0ZXJhdGlvbicsXG4gICAgJ2tleXVwJyxcbiAgICAna2V5ZG93bicsXG4gICAgJ21vdXNldXAnLFxuICAgICdtb3VzZWRvd24nLFxuICAgICdtb3VzZW92ZXInLFxuICAgICdtb3VzZW91dCcsXG4gICAgJ2JsdXInLFxuICAgICdmb2N1cydcbl07XG52YXIgdGltZSA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgaWYgKHRpbWVvdXQgPT09IHZvaWQgMCkgeyB0aW1lb3V0ID0gMDsgfVxuICAgIHJldHVybiBEYXRlLm5vdygpICsgdGltZW91dDtcbn07XG52YXIgc2NoZWR1bGVkID0gZmFsc2U7XG52YXIgU2NoZWR1bGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zY2hlZHVsZSgpOyB9O1xuICAgIH1cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aW1lb3V0ID09PSB2b2lkIDApIHsgdGltZW91dCA9IENBVENIX1BFUklPRDsgfVxuICAgICAgICBpZiAoc2NoZWR1bGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHVudGlsID0gdGltZSh0aW1lb3V0KTtcbiAgICAgICAgcXVldWVSZXNpemVPYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHNIYXZlUmVzaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0hhdmVSZXNpemVkID0gcHJvY2VzcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IHVudGlsIC0gdGltZSgpO1xuICAgICAgICAgICAgICAgIGlmICghaXNXYXRjaGluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzSGF2ZVJlc2l6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucnVuKDEwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW4odGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdGFydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgdGhpcy5ydW4oKTtcbiAgICB9O1xuICAgIFNjaGVkdWxlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNiID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMub2JzZXJ2ZXIgJiYgX3RoaXMub2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCBvYnNlcnZlckNvbmZpZyk7IH07XG4gICAgICAgIGRvY3VtZW50LmJvZHkgPyBjYigpIDogZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYik7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5zdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZSgpO1xuICAgICAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIF90aGlzLmxpc3RlbmVyLCB0cnVlKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLnN0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgJiYgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgX3RoaXMubGlzdGVuZXIsIHRydWUpOyB9KTtcbiAgICAgICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTY2hlZHVsZXI7XG59KCkpO1xudmFyIHNjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIoKTtcbnZhciB1cGRhdGVDb3VudCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgIXdhdGNoaW5nICYmIG4gPiAwICYmIHNjaGVkdWxlci5zdGFydCgpO1xuICAgIHdhdGNoaW5nICs9IG47XG4gICAgIXdhdGNoaW5nICYmIHNjaGVkdWxlci5zdG9wKCk7XG59O1xuZXhwb3J0IHsgc2NoZWR1bGVyLCB1cGRhdGVDb3VudCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/scheduler.js\n");

/***/ }),

/***/ "./src/CellFrame.tsx":
/*!***************************!*\
  !*** ./src/CellFrame.tsx ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // cellframe.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar requestidlecallback_1 = __webpack_require__(/*! requestidlecallback */ \"./node_modules/requestidlecallback/index.js\");\n\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ \"./node_modules/react-reverse-portal/dist/web/index.js\");\n\nvar Placeholder_1 = __importDefault(__webpack_require__(/*! ./cellframe/Placeholder */ \"./src/cellframe/Placeholder.tsx\"));\n\nvar Cradle_1 = __webpack_require__(/*! ./Cradle */ \"./src/Cradle.tsx\");\n\nvar IDLECALLBACK_FETCHTIMEOUT = 4000; // TODO make cofigurable\n\nvar CellFrame = function CellFrame(_ref) {\n  var orientation = _ref.orientation,\n      cellHeight = _ref.cellHeight,\n      cellWidth = _ref.cellWidth,\n      getItem = _ref.getItem,\n      listsize = _ref.listsize,\n      placeholder = _ref.placeholder,\n      cacheItemID = _ref.cacheItemID,\n      index = _ref.index,\n      instanceID = _ref.instanceID,\n      scrollerID = _ref.scrollerID;\n  var cradleContext = (0, react_1.useContext)(Cradle_1.CradleContext);\n  var cacheHandler = cradleContext.cacheHandler,\n      cradlePassthroughPropertiesRef = cradleContext.cradlePassthroughPropertiesRef;\n\n  var _ref2 = (0, react_1.useState)({\n    overflow: 'hidden'\n  }),\n      _ref3 = _slicedToArray(_ref2, 2),\n      styles = _ref3[0],\n      saveStyles = _ref3[1];\n\n  var _ref4 = (0, react_1.useState)('setup'),\n      _ref5 = _slicedToArray(_ref4, 2),\n      frameStatus = _ref5[0],\n      setFrameStatus = _ref5[1];\n\n  var frameStatusRef = (0, react_1.useRef)(null);\n  frameStatusRef.current = frameStatus;\n  var frameRef = (0, react_1.useRef)(null);\n  var isMountedRef = (0, react_1.useRef)(true);\n  var portalDataRef = (0, react_1.useRef)(null);\n  var placeholderRef = (0, react_1.useRef)(null);\n  var cacheItemIDRef = (0, react_1.useRef)(null);\n  cacheItemIDRef.current = cacheItemID; // for unmount\n\n  (0, react_1.useEffect)(function () {\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  (0, react_1.useEffect)(function () {\n    setFrameStatus('getusercontent');\n  }, [cacheItemID]); // ----------------- [ placeholder definition ] -------------------------\n\n  var customplaceholder = (0, react_1.useMemo)(function () {\n    return placeholder ? react_1[\"default\"].createElement(placeholder, {\n      index: index,\n      listsize: listsize\n    }) : null;\n  }, [index, placeholder, listsize]);\n  placeholderRef.current = (0, react_1.useMemo)(function () {\n    var placeholder = customplaceholder ? customplaceholder : react_1[\"default\"].createElement(Placeholder_1[\"default\"], {\n      index: index,\n      listsize: listsize,\n      error: false\n    });\n    return placeholder;\n  }, [index, customplaceholder, listsize]); // ---------------- [ requestidlecallback config ] ------------------------\n\n  var requestidlecallback = window['requestIdleCallback'] ? window['requestIdleCallback'] : requestidlecallback_1.requestIdleCallback;\n  var cancelidlecallback = window['cancelIdleCallback'] ? window['cancelIdleCallback'] : requestidlecallback_1.cancelIdleCallback;\n  var requestIdleCallbackIdRef = (0, react_1.useRef)(null); // initialize cell content\n\n  (0, react_1.useEffect)(function () {\n    // unmount\n    return function () {\n      cacheHandler.removeRequestedPortal(index);\n      cancelidlecallback(requestIdleCallbackIdRef.current);\n    };\n  }, []); // cradle invariant ondemand callback parameter value\n\n  var getElementData = (0, react_1.useCallback)(function () {\n    return [index, frameRef];\n  }, []); // set styles\n\n  (0, react_1.useEffect)(function () {\n    var newStyles = getFrameStyles(orientation, cellHeight, cellWidth, styles);\n\n    if (isMountedRef.current) {\n      saveStyles(newStyles);\n    }\n  }, [orientation, cellHeight, cellWidth]);\n  var portalNodeRef = (0, react_1.useRef)(null);\n  var isReparentingRef = (0, react_1.useRef)(false);\n  (0, react_1.useLayoutEffect)(function () {\n    switch (frameStatus) {\n      case 'setup':\n        // no-op\n        break;\n\n      case 'inserting':\n        {\n          setFrameStatus('ready');\n          break;\n        }\n\n      case 'getusercontent':\n        {\n          var _cacheItemID = cacheItemIDRef.current; // cacheHandler.getCacheItemID(index)\n\n          var cached = cacheHandler.hasPortal(_cacheItemID);\n\n          if (cached) {\n            portalDataRef.current = cacheHandler.getPortal(_cacheItemID);\n            portalNodeRef.current = portalDataRef.current.portalNode;\n            portalDataRef.current.isReparentingRef.current = true;\n            setFrameStatus('inserting');\n          } else {\n            setFrameStatus('waiting');\n            cacheHandler.registerRequestedPortal(index); // TODO review implementation of async here\n\n            requestIdleCallbackIdRef.current = requestidlecallback(function () {\n              return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                var usercontent, content, scrollerData;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return getItem(index, _cacheItemID);\n\n                      case 2:\n                        usercontent = _context.sent;\n\n                        if (isMountedRef.current) {\n                          if (usercontent) {\n                            scrollerData = {\n                              isReparentingRef: null,\n                              cradlePassthroughPropertiesRef: cradlePassthroughPropertiesRef\n                            };\n\n                            if (usercontent.props.hasOwnProperty('scrollerData')) {\n                              content = react_1[\"default\"].cloneElement(usercontent, {\n                                scrollerData: scrollerData\n                              });\n                            } else {\n                              content = usercontent;\n                            }\n\n                            portalDataRef.current = cacheHandler.createPortal(content, index, _cacheItemID);\n                            portalNodeRef.current = portalDataRef.current.portalNode; // make available to user content\n\n                            scrollerData.isReparentingRef = portalDataRef.current.isReparentingRef;\n                          } else {\n                            console.log('ERROR', 'no content item');\n                          }\n                        } // console.log('loading portal item')\n\n\n                        setFrameStatus('inserting');\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n            }, {\n              timeout: IDLECALLBACK_FETCHTIMEOUT\n            });\n          }\n\n          break;\n        }\n\n      case 'waiting':\n        {\n          break;\n        }\n    }\n  }, [frameStatus]);\n  (0, react_1.useEffect)(function () {\n    switch (frameStatus) {\n      case 'ready':\n        {\n          // no-op\n          break;\n        }\n    }\n  }, [frameStatus]);\n  return react_1[\"default\"].createElement(\"div\", {\n    ref: frameRef,\n    \"data-type\": 'cellframe',\n    \"data-scrollerid\": scrollerID,\n    \"data-index\": index,\n    \"data-instanceid\": instanceID,\n    style: styles\n  }, frameStatus != 'ready' ? placeholderRef.current : react_1[\"default\"].createElement(react_reverse_portal_1.OutPortal, {\n    node: portalNodeRef.current\n  }));\n}; // CellFrame\n\n\nvar getFrameStyles = function getFrameStyles(orientation, cellHeight, cellWidth, styles) {\n  var styleset = Object.assign({\n    position: 'relative'\n  }, styles);\n\n  if (orientation == 'horizontal') {\n    styleset.width = cellWidth ? cellWidth + 'px' : 'auto';\n    styleset.height = 'auto';\n  } else if (orientation === 'vertical') {\n    styleset.width = 'auto';\n    styleset.height = cellHeight ? cellHeight + 'px' : 'auto';\n  }\n\n  return styleset;\n};\n\nexports[\"default\"] = CellFrame;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/CellFrame.tsx\n");

/***/ }),

/***/ "./src/Cradle.tsx":
/*!************************!*\
  !*** ./src/Cradle.tsx ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // cradle.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CradleContext = void 0;\n/*\n    consider formalizing state conditions (certain useRefs), together with state actions (useState)\n\n    - rationalize pauseScrolling, and other signals\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar Viewport_1 = __webpack_require__(/*! ./Viewport */ \"./src/Viewport.tsx\"); // popup position tracker for repositioning\n\n\nvar Scrolltracker_1 = __importDefault(__webpack_require__(/*! ./cradle/Scrolltracker */ \"./src/cradle/Scrolltracker.tsx\")); // support code\n\n\nvar scrollhandler_1 = __importDefault(__webpack_require__(/*! ./cradle/scrollhandler */ \"./src/cradle/scrollhandler.tsx\"));\n\nvar statehandler_1 = __importDefault(__webpack_require__(/*! ./cradle/statehandler */ \"./src/cradle/statehandler.tsx\"));\n\nvar contenthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/contenthandler */ \"./src/cradle/contenthandler.tsx\"));\n\nvar scaffoldhandler_1 = __importDefault(__webpack_require__(/*! ./cradle/scaffoldhandler */ \"./src/cradle/scaffoldhandler.tsx\"));\n\nvar interrupthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/interrupthandler */ \"./src/cradle/interrupthandler.tsx\"));\n\nvar servicehandler_1 = __importDefault(__webpack_require__(/*! ./cradle/servicehandler */ \"./src/cradle/servicehandler.tsx\"));\n\nvar styleshandler_1 = __importDefault(__webpack_require__(/*! ./cradle/styleshandler */ \"./src/cradle/styleshandler.tsx\")); // for children\n\n\nexports.CradleContext = react_1[\"default\"].createContext(null); // component\n\nvar Cradle = function Cradle(_ref) {\n  var gridSpecs = _ref.gridSpecs,\n      runwaySize = _ref.runwaySize,\n      listsize = _ref.listsize,\n      startingIndex = _ref.startingIndex,\n      getItem = _ref.getItem,\n      placeholder = _ref.placeholder,\n      userFunctions = _ref.userFunctions,\n      styles = _ref.styles,\n      triggerlineOffset = _ref.triggerlineOffset,\n      cache = _ref.cache,\n      cacheMax = _ref.cacheMax,\n      scrollerID = _ref.scrollerID,\n      cacheHandler = _ref.cacheHandler;\n\n  var _a, _b;\n\n  if (listsize == 0) return null; // nothing to do\n  // ========================[ DATA SETUP ]========================\n  // unpack gridSpecs\n\n  var orientation = gridSpecs.orientation,\n      gap = gridSpecs.gap,\n      padding = gridSpecs.padding,\n      cellHeight = gridSpecs.cellHeight,\n      cellWidth = gridSpecs.cellWidth,\n      layout = gridSpecs.layout; // get viewport context\n\n  var viewportInterruptProperties = (0, react_1.useContext)(Viewport_1.ViewportInterrupt);\n  var viewportInterruptPropertiesRef = (0, react_1.useRef)(null);\n  viewportInterruptPropertiesRef.current = viewportInterruptProperties; // for closures\n\n  var viewportDimensions = viewportInterruptProperties.viewportDimensions;\n  var viewportheight = viewportDimensions.height,\n      viewportwidth = viewportDimensions.width; // state\n\n  var _ref2 = (0, react_1.useState)('setup'),\n      _ref3 = _slicedToArray(_ref2, 2),\n      cradleState = _ref3[0],\n      setCradleState = _ref3[1];\n\n  var cradleStateRef = (0, react_1.useRef)(null); // access by closures\n\n  cradleStateRef.current = cradleState; // console.log('RUNNING cradleState','-'+scrollerID+'-', cradleState)\n  // controls\n\n  var isMountedRef = (0, react_1.useRef)(true);\n  var isCachedRef = (0, react_1.useRef)(false);\n  var wasCachedRef = (0, react_1.useRef)(false);\n  var parentingTransitionRequiredRef = (0, react_1.useRef)(false);\n  var triggerlineRecordsRef = (0, react_1.useRef)({\n    wasViewportScrollingForward: null,\n    driver: null,\n    offset: null\n  }); // cradle scaffold element refs\n\n  var headCradleElementRef = (0, react_1.useRef)(null);\n  var tailCradleElementRef = (0, react_1.useRef)(null);\n  var axisCradleElementRef = (0, react_1.useRef)(null);\n  var headTriggerlineCradleElementRef = (0, react_1.useRef)(null);\n  var tailTriggerlineCradleElementRef = (0, react_1.useRef)(null); // scaffold bundle\n\n  var cradleElementsRef = (0, react_1.useRef)({\n    headRef: headCradleElementRef,\n    tailRef: tailCradleElementRef,\n    axisRef: axisCradleElementRef,\n    headTriggerlineRef: headTriggerlineCradleElementRef,\n    tailTriggerlineRef: tailTriggerlineCradleElementRef\n  }); // ------------------------[ calculated properties ]------------------------\n  // configuration calculations\n\n  var crosscount = (0, react_1.useMemo)(function () {\n    var viewportsize = orientation == 'horizontal' ? viewportheight : viewportwidth;\n\n    if (viewportsize == 0) {\n      return 0;\n    }\n\n    var crossLength = orientation == 'horizontal' ? cellHeight : cellWidth;\n    var viewportlengthforcalc = viewportsize - padding * 2 + gap; // length of viewport\n\n    var tilelengthforcalc = crossLength + gap;\n    tilelengthforcalc = Math.min(tilelengthforcalc, viewportlengthforcalc); // result cannot be less than 1\n\n    var crosscount = Math.floor(viewportlengthforcalc / tilelengthforcalc);\n    return crosscount;\n  }, [orientation, gap, padding, cellWidth, cellHeight, viewportheight, viewportwidth]);\n\n  var _ref4 = (0, react_1.useMemo)(function () {\n    var viewportLength, rowLength;\n\n    if (orientation == 'vertical') {\n      viewportLength = viewportheight;\n      rowLength = cellHeight;\n    } else {\n      viewportLength = viewportwidth;\n      rowLength = cellWidth;\n    }\n\n    rowLength += gap;\n    var viewportRowcount = Math.ceil(viewportLength / rowLength);\n    var viewportVisibleRowcount = Math.floor(viewportLength / rowLength);\n    var listRowcount = Math.ceil(listsize / crosscount);\n    var calculatedCradleRowcount = viewportRowcount + runwaySize * 2;\n    var cradleRowcount = Math.min(listRowcount, calculatedCradleRowcount);\n    var runwayRowcount;\n\n    if (calculatedCradleRowcount >= cradleRowcount) {\n      runwayRowcount = runwaySize;\n    } else {\n      var diff = cradleRowcount - calculatedCradleRowcount;\n      runwayRowcount -= Math.floor(diff / 2);\n      runwayRowcount = Math.max(0, runwayRowcount);\n    }\n\n    var itemcount = cradleRowcount * crosscount;\n\n    if (itemcount > listsize) {\n      itemcount = listsize;\n      cradleRowcount = Math.ceil(itemcount / crosscount);\n    }\n\n    return [cradleRowcount, viewportRowcount, viewportVisibleRowcount, listRowcount, runwayRowcount];\n  }, [orientation, gap, // padding,\n  cellWidth, cellHeight, viewportheight, viewportwidth, listsize, runwaySize, crosscount]),\n      _ref5 = _slicedToArray(_ref4, 5),\n      cradleRowcount = _ref5[0],\n      viewportRowcount = _ref5[1],\n      viewportVisibleRowcount = _ref5[2],\n      // max number of rows completely visible at once\n  listRowcount = _ref5[3],\n      runwayRowcount = _ref5[4]; // ----------------------[ callbacks ]----------------------------\n  // host callbacks\n  // const referenceIndexCallbackRef = useRef(functions?.referenceIndexCallback)\n  // const preloadIndexCallbackRef = useRef(functions?.preloadIndexCallback)\n\n\n  var externalCallbacksRef = (0, react_1.useRef)({\n    referenceIndexCallback: userFunctions === null || userFunctions === void 0 ? void 0 : userFunctions.referenceIndexCallback,\n    preloadIndexCallback: userFunctions === null || userFunctions === void 0 ? void 0 : userFunctions.preloadIndexCallback,\n    cacheDeleteListCallback: userFunctions === null || userFunctions === void 0 ? void 0 : userFunctions.cacheDeleteListCallback,\n    newListSizeCallback: userFunctions === null || userFunctions === void 0 ? void 0 : userFunctions.newListSizeCallback\n  }); // -----------------[ bundle parameters for handlers ]-------------------\n  // bundle all cradle props to pass to handlers - ultimately cradleParametersRef\n\n  var cradleInheritedPropertiesRef = (0, react_1.useRef)(null); // access by closures and support functions\n  // up to date values\n\n  cradleInheritedPropertiesRef.current = {\n    // gridSpecs\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    layout: layout,\n    // ...rest\n    cache: cache,\n    cacheMax: cacheMax,\n    startingIndex: startingIndex,\n    getItem: getItem,\n    placeholder: placeholder,\n    triggerlineOffset: triggerlineOffset,\n    scrollerID: scrollerID,\n    // objects\n    userFunctions: userFunctions,\n    styles: styles,\n    cacheHandler: cacheHandler\n  };\n  var cradlePassthroughPropertiesRef = (0, react_1.useRef)(null); // passed to cellFrame content (user content) if requested\n\n  cradlePassthroughPropertiesRef.current = {\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    layout: layout,\n    runwayRowcount: runwayRowcount,\n    cache: cache,\n    cacheMax: cacheMax,\n    startingIndex: startingIndex,\n    triggerlineOffset: triggerlineOffset\n  }; // configuration properties to share\n\n  var cradleInternalPropertiesRef = (0, react_1.useRef)(null);\n  cradleInternalPropertiesRef.current = {\n    // updated values\n    crosscount: crosscount,\n    cradleRowcount: cradleRowcount,\n    viewportRowcount: viewportRowcount,\n    viewportVisibleRowcount: viewportVisibleRowcount,\n    listRowcount: listRowcount,\n    listsize: listsize,\n    runwayRowcount: runwayRowcount,\n    // the following values are maintained elsewhere\n    isMountedRef: isMountedRef,\n    cradleElementsRef: cradleElementsRef,\n    isCachedRef: isCachedRef,\n    wasCachedRef: wasCachedRef,\n    triggerlineRecordsRef: triggerlineRecordsRef,\n    // for stateHandler\n    cradleStateRef: cradleStateRef,\n    setCradleState: setCradleState\n  }; // placeholder in cradleParameters to make available individual handlers\n\n  var handlersRef = (0, react_1.useRef)(null); // cradle parameters MASTER BUNDLE\n\n  var cradleParameters = {\n    handlersRef: handlersRef,\n    viewportInterruptPropertiesRef: viewportInterruptPropertiesRef,\n    cradleInheritedPropertiesRef: cradleInheritedPropertiesRef,\n    cradlePassthroughPropertiesRef: cradlePassthroughPropertiesRef,\n    cradleInternalPropertiesRef: cradleInternalPropertiesRef,\n    externalCallbacksRef: externalCallbacksRef\n  };\n  var cradleParametersRef = (0, react_1.useRef)(null);\n  cradleParametersRef.current = cradleParameters; // ongoing source of handlers - note all Handlers are given all parameters (cradleParameters)\n\n  if (!handlersRef.current) {\n    handlersRef.current = getCradleHandlers(cradleParameters);\n  } // make handlers directly available to cradle code below\n\n\n  var _handlersRef$current = handlersRef.current,\n      interruptHandler = _handlersRef$current.interruptHandler,\n      scrollHandler = _handlersRef$current.scrollHandler,\n      stateHandler = _handlersRef$current.stateHandler,\n      contentHandler = _handlersRef$current.contentHandler,\n      scaffoldHandler = _handlersRef$current.scaffoldHandler,\n      serviceHandler = _handlersRef$current.serviceHandler,\n      stylesHandler = _handlersRef$current.stylesHandler; // =======================[ CACHING STATE CHANGE SENTINEL ]=========================\n  // intercept change in caching status\n  // when a portal is cached, including the transition of being moved from one cellFrame to another,\n  // (and the infinitegridscroller can be a component that is cached),\n  // the scrollPos (scrollLeft or scrollTop) is reset to 0 (zero). When the scroller is \n  // moved to a cellFrame, this code restores the scrollPos.\n  // The restore action must be the first priority to hide the scrollPos changes from the user\n\n  var isInPortal = viewportwidth == 0 && viewportheight == 0; // must be in portal (cache) state\n\n  var isCacheChange = isInPortal != isCachedRef.current;\n\n  if (isCacheChange) {\n    wasCachedRef.current = isCachedRef.current;\n    isCachedRef.current = isInPortal;\n  }\n\n  var isCachingUnderway = isCachedRef.current || wasCachedRef.current;\n\n  if (isCacheChange || ((_a = viewportInterruptProperties.isReparentingRef) === null || _a === void 0 ? void 0 : _a.current) || viewportInterruptProperties.isResizing && isCachingUnderway) {\n    if ((_b = viewportInterruptProperties.isReparentingRef) === null || _b === void 0 ? void 0 : _b.current) {\n      viewportInterruptProperties.isReparentingRef.current = false; // no longer needed\n\n      parentingTransitionRequiredRef.current = true;\n    }\n\n    if (viewportInterruptProperties.isResizing) {\n      // caching is underway, so cancel\n      viewportInterruptProperties.isResizing = false;\n    }\n\n    if (isCacheChange) {\n      // into or out of caching\n      if (isCachedRef.current && !wasCachedRef.current) {\n        // change into cache\n        interruptHandler.pauseInterrupts();\n      } else if (!isCachedRef.current && wasCachedRef.current) {\n        // change out of cache\n        interruptHandler.restoreInterrupts();\n      }\n    }\n  } // generate state for restoring scrollPos\n\n\n  (0, react_1.useEffect)(function () {\n    if (parentingTransitionRequiredRef.current) {\n      parentingTransitionRequiredRef.current = false;\n      setCradleState('reparentingtransition');\n    }\n  }, [parentingTransitionRequiredRef.current]); // change state for entering or leaving cache\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return; // nothing to do\n\n    if (isCachedRef.current && !wasCachedRef.current) {\n      // into cache\n      setCradleState('cached'); // replaces 'ready' as steady state\n    } else if (!isCachedRef.current && wasCachedRef.current) {\n      // out of cache\n      wasCachedRef.current = false;\n\n      if (cradleStateRef.current == 'cachedwaiting') {\n        setCradleState('ready');\n      } else {\n        setCradleState('setcradlecontent');\n      }\n    }\n  }, [isCachedRef.current, wasCachedRef.current]); // ===================[ INITIALIZATION effects ]=========================\n  // initialization effects are independent of caching\n  // clear mounted flag on unmount\n\n  (0, react_1.useLayoutEffect)(function () {\n    // unmount\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []); //send callback functions to host\n\n  (0, react_1.useEffect)(function () {\n    if (!userFunctions.getCallbacks) return;\n    var scrollToItem = serviceHandler.scrollToItem,\n        reload = serviceHandler.reload,\n        setListsize = serviceHandler.setListsize,\n        clearCache = serviceHandler.clearCache,\n        getCacheMap = serviceHandler.getCacheMap,\n        getCacheList = serviceHandler.getCacheList,\n        getCradleMap = serviceHandler.getCradleMap,\n        modifyCacheMap = serviceHandler.modifyCacheMap,\n        moveIndex = serviceHandler.moveIndex,\n        insertIndex = serviceHandler.insertIndex,\n        removeIndex = serviceHandler.removeIndex;\n    var callbacks = {\n      scrollToItem: scrollToItem,\n      reload: reload,\n      setListsize: setListsize,\n      clearCache: clearCache,\n      getCacheMap: getCacheMap,\n      getCacheList: getCacheList,\n      getCradleMap: getCradleMap,\n      modifyCacheMap: modifyCacheMap,\n      moveIndex: moveIndex,\n      insertIndex: insertIndex,\n      removeIndex: removeIndex\n    };\n    userFunctions.getCallbacks(callbacks);\n  }, []); // initialize window scroll listener\n\n  (0, react_1.useEffect)(function () {\n    var viewportdata = viewportInterruptPropertiesRef.current;\n    viewportdata.elementRef.current.addEventListener('scroll', scrollHandler.onScroll);\n    return function () {\n      viewportdata.elementRef.current && viewportdata.elementRef.current.removeEventListener('scroll', scrollHandler.onScroll);\n    };\n  }, []); // observer support\n\n  /*\n      There are two interection observers, one for the cradle wings, and another for triggerlines;\n          both against the viewport.\n      There is also a resize observer for the cradle wings, to generate responses to size changes of\n          variable cells.\n  */\n\n  (0, react_1.useEffect)(function () {\n    // intersection observer for cradle body\n    // this sets up an IntersectionObserver of the cradle against the viewport. When the\n    // cradle goes out of the observer scope, the \"repositioningRender\" cradle state is triggered.\n    var cradleintersectobserver = interruptHandler.cradleIntersect.createObserver();\n    interruptHandler.cradleIntersect.connectElements(); // triggerobserver tiggers cradle content updates \n    //     when triggerlines pass the edge of the viewport\n\n    var triggerobserver = interruptHandler.axisTriggerlinesIntersect.createObserver();\n    interruptHandler.axisTriggerlinesIntersect.connectElements(); // resize observer generates compensation for changes in cell sizes for variable layout modes\n\n    var resizeobserver = interruptHandler.cradleResize.createObserver();\n    interruptHandler.cradleResize.connectElements();\n    return function () {\n      cradleintersectobserver.disconnect();\n      triggerobserver.disconnect();\n      resizeobserver.disconnect();\n    };\n  }, []); // =====================[ RECONFIGURATION effects ]======================\n  // change caching, resize (UI resize of the viewport), reconfigure, or pivot\n  // initiate preload if requested\n\n  (0, react_1.useEffect)(function () {\n    switch (cache) {\n      case 'preload':\n        {\n          setCradleState('startpreload');\n          break;\n        }\n\n      case 'keepload':\n        {\n          var modelIndexList = contentHandler.getModelIndexList();\n          var cacheDeleteListCallback = serviceHandler.callbacks.cacheDeleteListCallback; // const cacheMax = cradleParameters.cradleInheritedPropertiesRef.current.cacheMax\n\n          cacheHandler.pareCacheToMax(cacheMax, modelIndexList, cacheDeleteListCallback);\n          break;\n        }\n\n      case 'cradle':\n        {\n          var _modelIndexList = contentHandler.getModelIndexList();\n\n          var _cacheDeleteListCallback = serviceHandler.callbacks.cacheDeleteListCallback;\n          cacheHandler.matchCacheToCradle(_modelIndexList, _cacheDeleteListCallback);\n          break;\n        }\n    }\n  }, [cache, cacheMax]); // trigger resizing based on viewport state\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return; // movement to and from cache is independent of ui resizing\n\n    if (isCachedRef.current || wasCachedRef.current) {\n      return;\n    }\n\n    if (viewportInterruptPropertiesRef.current.isResizing) {\n      interruptHandler.pauseInterrupts(); // console.log('calling resizing from isResizing useEvent','-'+scrollerID+'-')\n\n      setCradleState('resizing');\n    } // complete resizing mode\n\n\n    if (!viewportInterruptPropertiesRef.current.isResizing && cradleStateRef.current == 'resizing') {\n      setCradleState('finishresize');\n    }\n  }, [viewportInterruptPropertiesRef.current.isResizing]); // reconfigure for changed size parameters\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    if (isCachedRef.current) return;\n    var signals = interruptHandler.signals;\n    interruptHandler.pauseInterrupts();\n    setCradleState('reconfigure');\n  }, [listsize, cellHeight, cellWidth, gap, padding, triggerlineOffset]); // pivot triggered on change of orientation\n\n  (0, react_1.useEffect)(function () {\n    scaffoldHandler.cradlePositionData.blockScrollProperty = orientation == \"vertical\" ? \"scrollTop\" : \"scrollLeft\";\n    if (cradleStateRef.current == 'setup') return;\n    if (isCachedRef.current) return;\n    var _cradleInheritedPrope = cradleInheritedPropertiesRef.current,\n        cellWidth = _cradleInheritedPrope.cellWidth,\n        cellHeight = _cradleInheritedPrope.cellHeight,\n        gap = _cradleInheritedPrope.gap; // get previous ratio\n\n    var previousCellPixelLength = (orientation == 'vertical' ? cellWidth : cellHeight) + gap;\n    var previousAxisOffset = scaffoldHandler.cradlePositionData.targetAxisPixelOffset;\n    var previousratio = previousAxisOffset / previousCellPixelLength;\n    var pivotCellPixelLength = (orientation == 'vertical' ? cellHeight : cellWidth) + gap;\n    var pivotAxisOffset = previousratio * pivotCellPixelLength;\n    scaffoldHandler.cradlePositionData.targetAxisPixelOffset = Math.round(pivotAxisOffset);\n    interruptHandler.pauseInterrupts();\n    setCradleState('pivot');\n  }, [orientation]); // =====================[ STYLES ]===========================\n  // styles for the six scaffold components\n\n  var _ref6 = (0, react_1.useMemo)(function () {\n    return stylesHandler.setCradleStyles({\n      orientation: orientation,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding,\n      viewportheight: viewportheight,\n      viewportwidth: viewportwidth,\n      crosscount: crosscount,\n      userstyles: styles,\n      triggerlineOffset: triggerlineOffset\n    });\n  }, [orientation, cellHeight, cellWidth, gap, padding, viewportheight, viewportwidth, crosscount, styles, triggerlineOffset]),\n      _ref7 = _slicedToArray(_ref6, 6),\n      cradleHeadStyle = _ref7[0],\n      cradleTailStyle = _ref7[1],\n      cradleAxisStyle = _ref7[2],\n      triggerlineHeadStyle = _ref7[3],\n      triggerlineTailStyle = _ref7[4],\n      cradleDividerStyle = _ref7[5]; // =====================[ STATE MANAGEMENT ]==========================\n  // this is the core state engine (19 states), using named states\n  // useLayoutEffect for suppressing flashes\n\n\n  (0, react_1.useLayoutEffect)(function () {\n    switch (cradleState) {\n      case 'applycellframechanges':\n        {\n          // user intervention\n          setCradleState('ready');\n          break;\n        }\n\n      case 'setup':\n        {\n          // cycle to allow for ref config\n          if (cradleInheritedPropertiesRef.current.cache != 'preload') {\n            if (isCachedRef.current) {\n              setCradleState('cached');\n            } else {\n              setCradleState('dosetup'); // load grid\n            }\n          }\n\n          break;\n        }\n\n      case 'startpreload':\n        {\n          contentHandler.clearCache();\n          setCradleState('dopreload');\n          break;\n        }\n\n      case 'dopreload':\n        {\n          var callback = function callback() {\n            setCradleState('finishpreload');\n          }; // TODO: move API to contentHandler\n\n\n          cacheHandler.preload(cradleParametersRef.current, callback, scrollerID);\n          break;\n        }\n\n      case 'cachedwaiting':\n        {\n          if (!wasCachedRef.current && !isCachedRef.current) {\n            setCradleState('ready');\n          }\n\n          break;\n        }\n\n      case 'cached':\n        {\n          if (!wasCachedRef.current && !isCachedRef.current) {\n            setCradleState('setcradlecontent');\n          }\n\n          break;\n        }\n\n      case 'finishparenting':\n        {\n          if (isCachedRef.current) {\n            // interrupt until caching is resolved\n            setCradleState('cachedwaiting');\n          } else {\n            setCradleState('ready');\n          }\n\n          break;\n        }\n      // renderupdatedcontent is called from updateCradleContent. \n      // it is required to integrate changed DOM configurations before 'ready' is displayed\n\n      case 'renderupdatedcontent':\n        {\n          // cycle for DOM update\n          // cacheHandler.renderPortalList()\n          cradleContent.headDisplayComponents = cradleContent.headModelComponents;\n          cradleContent.tailDisplayComponents = cradleContent.tailModelComponents;\n          setCradleState('finishupdatedcontent');\n          break;\n        }\n\n      case 'finishupdatedcontent':\n        {\n          // cycle for DOM update\n          var _cache = cradleInternalPropertiesRef.current.cache;\n\n          if (_cache == 'keepload') {\n            contentHandler.guardAgainstRunawayCaching();\n          }\n\n          interruptHandler.axisTriggerlinesIntersect.connectElements();\n          interruptHandler.signals.pauseTriggerlinesObserver = false;\n          setCradleState('ready');\n          break;\n        }\n\n      case 'startreposition':\n        {\n          var signals = interruptHandler.signals;\n          signals.pauseTriggerlinesObserver = true; // avoid recursive cradle intersection interrupts\n\n          signals.pauseCradleIntersectionObserver = true;\n          signals.repositioningRequired = false; // because now underway\n\n          setCradleState('repositioningRender');\n          break;\n        }\n\n      /*\n          the following 8 cradle states all resolve with\n          a chain starting with setCradleContent,\n          continuing with 'preparerender', and ending with\n          'normalizesignals'\n      */\n\n      case 'setcradlecontent':\n      case 'dosetup':\n      case 'finishpreload':\n      case 'doreposition': //\n\n      case 'finishresize':\n      case 'pivot':\n      case 'reconfigure': //\n\n      case 'reload':\n        {\n          if (isCachedRef.current) {\n            // interrupt until caching is resolved\n            setCradleState('cached');\n            break;\n          }\n\n          var _cradleContent = contentHandler.content;\n          _cradleContent.headModelComponents = [];\n          _cradleContent.tailModelComponents = []; // register new array id for Object.is to trigger react re-processing\n\n          _cradleContent.headDisplayComponents = [];\n          _cradleContent.tailDisplayComponents = [];\n\n          if (cradleState == 'reload') {\n            cacheHandler.clearCache();\n          }\n\n          contentHandler.setCradleContent(cradleState);\n          var _cache2 = cradleInternalPropertiesRef.current.cache;\n\n          if (_cache2 == 'cradle') {\n            var modelIndexList = contentHandler.getModelIndexList();\n            cacheHandler.matchCacheToCradle(modelIndexList, serviceHandler.callbacks.cacheDeleteListCallback);\n            cacheHandler.renderPortalList();\n          }\n\n          setCradleState('preparerender');\n          break;\n        }\n\n      case 'preparerender':\n        {\n          // cycle for DOM update\n          var _cradleContent2 = contentHandler.content;\n          _cradleContent2.headDisplayComponents = _cradleContent2.headModelComponents;\n          _cradleContent2.tailDisplayComponents = _cradleContent2.tailModelComponents;\n          setCradleState('normalizesignals');\n          break;\n        }\n\n      case 'normalizesignals':\n        {\n          // normalize or resume cycling\n          // prioritize interrupts TODO: validate this\n          // if ((!isCachedRef.current) && viewportInterruptPropertiesRef.current.isResizing) {\n          //     console.log('calling resizing from normalizesignals','-'+scrollerID+'-')\n          //     setCradleState('resizing')\n          // } else if (interruptHandler.signals.repositioningRequired) {\n          //     setCradleState('startreposition')\n          // } else {                     \n          interruptHandler.restoreInterrupts();\n          setCradleState('ready'); // }\n\n          break;\n        }\n      // user request\n\n      case 'clearcache':\n        {\n          contentHandler.clearCache();\n          setCradleState('ready');\n          break;\n        }\n      // moving out of cache into visible DOM tree (cellFrame)\n      // resets scrollPos (scrollLeft/scrollTop) to last UI value\n\n      case 'reparentingtransition':\n        {\n          var cradlePositionData = scaffoldHandler.cradlePositionData; // reset scroll position to previous value\n\n          if (cradlePositionData.blockScrollPos !== null) {\n            // console.log('resetting scroll position to','-'+scrollerID+'-' , cradlePositionData.blockScrollPos)\n            var viewportElement = viewportInterruptPropertiesRef.current.elementRef.current;\n            viewportElement[cradlePositionData.blockScrollProperty] = cradlePositionData.blockScrollPos;\n          }\n\n          setCradleState('finishparenting');\n          break;\n        }\n    }\n  }, [cradleState]); // standard rendering states (3 states)\n\n  (0, react_1.useEffect)(function () {\n    switch (cradleState) {\n      // repositioningRender and repositioningContinuation are toggled to generate continuous \n      // reposiioning renders\n      case 'repositioningRender':\n        break;\n\n      case 'repositioningContinuation':\n        // set from onScroll\n        setCradleState('repositioningRender');\n        break;\n\n      case 'ready':\n        // no op\n        break;\n    }\n  }, [cradleState]); // ==========================[ RENDER ]===========================\n\n  var scrollAxisReferenceIndex = scaffoldHandler.cradlePositionData.targetAxisReferenceIndex;\n  var scrollTrackerArgs = (0, react_1.useMemo)(function () {\n    if (!(cradleState == 'repositioningContinuation' || cradleState == 'repositioningRender')) {\n      return null;\n    }\n\n    var trackerargs = {\n      top: viewportDimensions.top + 3,\n      left: viewportDimensions.left + 3,\n      scrollAxisReferenceIndex: scrollAxisReferenceIndex,\n      listsize: listsize,\n      styles: styles\n    };\n    return trackerargs;\n  }, [cradleState, viewportDimensions, scrollAxisReferenceIndex, listsize, styles]);\n  var cradleContent = contentHandler.content;\n  var contextvalueRef = (0, react_1.useRef)({\n    cradlePassthroughPropertiesRef: cradlePassthroughPropertiesRef,\n    cacheHandler: cacheHandler\n  });\n  return react_1[\"default\"].createElement(exports.CradleContext.Provider, {\n    value: contextvalueRef.current\n  }, cradleState == 'repositioningRender' || cradleState == 'repositioningContinuation' ? react_1[\"default\"].createElement(Scrolltracker_1[\"default\"], {\n    top: scrollTrackerArgs.top,\n    left: scrollTrackerArgs.left,\n    offset: scrollTrackerArgs.scrollAxisReferenceIndex,\n    listsize: scrollTrackerArgs.listsize,\n    styles: scrollTrackerArgs.styles\n  }) : react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-axis',\n    style: cradleAxisStyle,\n    ref: axisCradleElementRef\n  }, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'triggerline-head',\n    style: triggerlineHeadStyle,\n    ref: headTriggerlineCradleElementRef\n  }), react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'triggerline-tail',\n    style: triggerlineTailStyle,\n    ref: tailTriggerlineCradleElementRef\n  }),  true ? react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-divider',\n    style: cradleDividerStyle\n  }) : 0, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'head',\n    ref: headCradleElementRef,\n    style: cradleHeadStyle\n  }, cradleState != 'setup' ? cradleContent.headDisplayComponents : null), react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'tail',\n    ref: tailCradleElementRef,\n    style: cradleTailStyle\n  }, cradleState != 'setup' ? cradleContent.tailDisplayComponents : null)));\n}; // Cradle\n// utility\n\n\nvar getCradleHandlers = function getCradleHandlers(cradleParameters) {\n  var createHandler = function createHandler(handler) {\n    return new handler(cradleParameters);\n  };\n\n  var cacheHandler = cradleParameters.cradleInheritedPropertiesRef.current.cacheHandler;\n  return {\n    cacheHandler: cacheHandler,\n    interruptHandler: createHandler(interrupthandler_1[\"default\"]),\n    scrollHandler: createHandler(scrollhandler_1[\"default\"]),\n    stateHandler: createHandler(statehandler_1[\"default\"]),\n    contentHandler: createHandler(contenthandler_1[\"default\"]),\n    scaffoldHandler: createHandler(scaffoldhandler_1[\"default\"]),\n    serviceHandler: createHandler(servicehandler_1[\"default\"]),\n    stylesHandler: createHandler(styleshandler_1[\"default\"])\n  };\n};\n\nexports[\"default\"] = Cradle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Cradle.tsx\n");

/***/ }),

/***/ "./src/Scrollblock.tsx":
/*!*****************************!*\
  !*** ./src/Scrollblock.tsx ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // scrollblock.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    TODO\n    update length for cradle adjustments based on variable length changes in cell frames.\n\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar Viewport_1 = __webpack_require__(/*! ./Viewport */ \"./src/Viewport.tsx\");\n\nvar Scrollblock = function Scrollblock(_ref) {\n  var children = _ref.children,\n      listsize = _ref.listsize,\n      gridSpecs = _ref.gridSpecs,\n      styles = _ref.styles,\n      scrollerID = _ref.scrollerID;\n  var orientation = gridSpecs.orientation,\n      gap = gridSpecs.gap,\n      padding = gridSpecs.padding,\n      cellHeight = gridSpecs.cellHeight,\n      cellWidth = gridSpecs.cellWidth,\n      layout = gridSpecs.layout; // -------------------------[ context and state ]-------------------------\n\n  var viewportInterruptProperties = (0, react_1.useContext)(Viewport_1.ViewportInterrupt); // -----------------------------------[ data heap ]-------------------------\n\n  var baseScrollBlockLengthRef = (0, react_1.useRef)(null); // const scrollblockRef = useRef(null)\n\n  var divlinerstyleRef = (0, react_1.useRef)(Object.assign({\n    backgroundColor: 'white',\n    position: 'relative'\n  }, styles.cradle));\n\n  var _ref2 = (0, react_1.useState)(divlinerstyleRef.current),\n      _ref3 = _slicedToArray(_ref2, 2),\n      divlinerstyle = _ref3[0],\n      saveDivlinerstyle = _ref3[1]; // to trigger render\n\n\n  var _viewportInterruptPro = viewportInterruptProperties.viewportDimensions,\n      width = _viewportInterruptPro.width,\n      height = _viewportInterruptPro.height;\n  (0, react_1.useLayoutEffect)(function () {\n    updateBaseBlockLength();\n    divlinerstyleRef.current = updateScrollblockStyles(orientation, divlinerstyleRef, baseScrollBlockLengthRef);\n    saveDivlinerstyle(divlinerstyleRef.current);\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]);\n  var updateBaseBlockLength = (0, react_1.useCallback)(function () {\n    var basescrollblocklength = calcBaseScrollblockLength({\n      orientation: orientation,\n      viewportheight: height,\n      viewportwidth: width,\n      listsize: listsize,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding\n    });\n    baseScrollBlockLengthRef.current = basescrollblocklength;\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]); // console.log('scrollblock listsizeRef, baseScrollBlockLengthRef','-'+scrollerID+'-' , listsizeRef, baseScrollBlockLengthRef)    \n\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'scrollblock',\n    style: divlinerstyleRef.current\n  }, children);\n}; // Scrollblock\n// all the parameters can affect the length\n\n\nvar calcBaseScrollblockLength = function calcBaseScrollblockLength(_ref4) {\n  var orientation = _ref4.orientation,\n      viewportheight = _ref4.viewportheight,\n      viewportwidth = _ref4.viewportwidth,\n      listsize = _ref4.listsize,\n      cellHeight = _ref4.cellHeight,\n      cellWidth = _ref4.cellWidth,\n      gap = _ref4.gap,\n      padding = _ref4.padding;\n  // dependents of orientation\n  var crosslength;\n  var cellLength;\n  var viewportcrosslength;\n\n  if (orientation == 'vertical') {\n    crosslength = cellWidth + gap;\n    cellLength = cellHeight + gap;\n    viewportcrosslength = viewportwidth;\n  } else {\n    // 'horizontal'\n    crosslength = cellHeight + gap;\n    cellLength = cellWidth + gap;\n    viewportcrosslength = viewportheight;\n  } // adjustments to viewportcrosslength\n\n\n  viewportcrosslength -= padding * 2;\n  viewportcrosslength += gap;\n  if (viewportcrosslength < crosslength) viewportcrosslength = crosslength; // must be at least one\n\n  var crosscount = Math.floor(viewportcrosslength / crosslength);\n  var listlength = Math.ceil(listsize / crosscount);\n  var straightlength = listlength * cellLength - (listlength > 0 ? gap : 0) + padding * 2;\n  return straightlength;\n};\n\nvar updateScrollblockStyles = function updateScrollblockStyles(orientation, stylesRef, baseScrollblocklengthRef) {\n  var localstyles = Object.assign({}, stylesRef.current);\n  var height;\n  var width;\n\n  if (orientation == 'horizontal') {\n    height = '100%';\n    width = baseScrollblocklengthRef.current + 'px';\n  } else if (orientation == 'vertical') {\n    height = baseScrollblocklengthRef.current + 'px';\n    width = '100%';\n  }\n\n  localstyles.height = height;\n  localstyles.width = width;\n  return localstyles;\n};\n\nexports[\"default\"] = Scrollblock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Scrollblock.tsx\n");

/***/ }),

/***/ "./src/Viewport.tsx":
/*!**************************!*\
  !*** ./src/Viewport.tsx ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // viewport.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ViewportInterrupt = void 0;\n/*\n    The role of viewport is to provide data to its children (scrollblock and cradle),\n    and act as the visible screen portal of the list being shown\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nexports.ViewportInterrupt = react_1[\"default\"].createContext(null); // for children\n\nvar resize_observer_1 = __webpack_require__(/*! @juggle/resize-observer */ \"./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n\nvar ResizeObserver = window['ResizeObserver'] || resize_observer_1.ResizeObserver; // control constant\n\nvar RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE = 250;\n\nvar Viewport = function Viewport(_ref) {\n  var children = _ref.children,\n      gridSpecs = _ref.gridSpecs,\n      styles = _ref.styles,\n      scrollerID = _ref.scrollerID,\n      scrollerData = _ref.scrollerData;\n  // -----------------------[ initialize ]------------------\n  var orientation = gridSpecs.orientation,\n      gap = gridSpecs.gap,\n      padding = gridSpecs.padding,\n      cellHeight = gridSpecs.cellHeight,\n      cellWidth = gridSpecs.cellWidth,\n      layout = gridSpecs.layout;\n\n  var _ref2 = (0, react_1.useState)('setup'),\n      _ref3 = _slicedToArray(_ref2, 2),\n      viewportState = _ref3[0],\n      setViewportState = _ref3[1]; // setup, resizing, resized, ready\n\n\n  var viewportStateRef = (0, react_1.useRef)(null); // for useCallback -> resizeCallback scope\n\n  viewportStateRef.current = viewportState;\n  var isMountedRef = (0, react_1.useRef)(true); // monitor for unmounted\n\n  (0, react_1.useEffect)(function () {\n    // unmount\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  var viewportElementRef = (0, react_1.useRef)(null); // viewportInterruptPropertiesRef is passed as a resizing interrupt (through context) to children\n  // initialize\n\n  var viewportInterruptPropertiesRef = (0, react_1.useRef)({\n    isReparentingRef: scrollerData === null || scrollerData === void 0 ? void 0 : scrollerData.isReparentingRef,\n    isResizing: false,\n    // index:null,\n    viewportDimensions: null,\n    elementRef: null\n  }); // --------------------[ resizer setup ]-----------------------\n\n  var resizeTimeridRef = (0, react_1.useRef)(null);\n  var isResizingRef = (0, react_1.useRef)(false);\n  var resizeObserverRef = (0, react_1.useRef)(null); // set up resizeObserver\n\n  (0, react_1.useEffect)(function () {\n    // initialize\n    resizeObserverRef.current = new ResizeObserver(resizeCallback);\n    resizeObserverRef.current.observe(viewportElementRef.current); // unmount\n\n    return function () {\n      resizeObserverRef.current.disconnect();\n    };\n  }, []); // used by resizeObserver; generates interrupt\n\n  var resizeCallback = (0, react_1.useCallback)(function (entries) {\n    if (!isMountedRef.current || !viewportElementRef.current) return;\n    if (viewportStateRef.current == 'setup') return;\n    var target = entries[0].target; // generate interrupt response, if initiating resize\n\n    if (!isResizingRef.current) {\n      viewportInterruptPropertiesRef.current.isResizing = isResizingRef.current = true; // new object creation triggers a realtime interrupt message to cradle through context\n\n      viewportInterruptPropertiesRef.current = Object.assign({}, viewportInterruptPropertiesRef.current);\n      if (isMountedRef.current) setViewportState('resizing');\n    }\n\n    clearTimeout(resizeTimeridRef.current);\n    resizeTimeridRef.current = setTimeout(function () {\n      isResizingRef.current = false;\n\n      if (isMountedRef.current) {\n        setViewportState('resized');\n      }\n    }, RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE);\n  }, []); // ----------------------------------[ calculate config values ]--------------------------------\n\n  var divlinerstyleRef = (0, react_1.useRef)(null); // initialize with inherited styles\n\n  divlinerstyleRef.current = (0, react_1.useMemo)(function () {\n    return Object.assign({\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      overflow: 'auto',\n      backgroundColor: 'red'\n    }, styles.viewport);\n  }, [styles.viewport]); // update with config values\n\n  divlinerstyleRef.current = (0, react_1.useMemo)(function () {\n    // TODO: gap\n    var mincrosslength = calcMinViewportCrossLength(orientation, cellWidth, cellHeight, gap, padding);\n    var styles = Object.assign({}, divlinerstyleRef.current); // avoid readonly\n\n    if (orientation == 'vertical') {\n      styles.minWidth = mincrosslength + 'px';\n      styles.minHeight = 'auto';\n    } else {\n      styles.minWidth = 'auto';\n      styles.minHeight = mincrosslength + 'px';\n    }\n\n    return styles;\n  }, [orientation, cellWidth, cellHeight, gap, padding]); // update viewportInterruptPropertiesRef; add viewport dimensions\n\n  viewportInterruptPropertiesRef.current = (0, react_1.useMemo)(function () {\n    if (viewportState == 'setup') return viewportInterruptPropertiesRef.current;\n\n    var _viewportElementRef$c = viewportElementRef.current.getBoundingClientRect(),\n        top = _viewportElementRef$c.top,\n        right = _viewportElementRef$c.right,\n        bottom = _viewportElementRef$c.bottom,\n        left = _viewportElementRef$c.left;\n\n    var width = right - left;\n    var height = bottom - top; // TODO this is a duplicate setting procedure with interrupthandler.tsx cradleIntersectionObserverCallback\n\n    var localViewportData = {\n      viewportDimensions: {\n        top: top,\n        right: right,\n        bottom: bottom,\n        left: left,\n        width: width,\n        height: height\n      },\n      elementRef: viewportElementRef,\n      isResizing: isResizingRef.current\n    }; // trigger context change with new object\n\n    var viewportdataobject = Object.assign({}, viewportInterruptPropertiesRef.current, localViewportData);\n    return viewportdataobject;\n  }, [orientation, isResizingRef.current, viewportState]); // --------------------[ state processing ]---------------------------\n\n  (0, react_1.useLayoutEffect)(function () {\n    switch (viewportState) {\n      case 'resized':\n      case 'setup':\n        {\n          setViewportState('ready');\n          break;\n        }\n    }\n  }, [viewportState]); // ----------------------[ render ]--------------------------------\n\n  return react_1[\"default\"].createElement(exports.ViewportInterrupt.Provider, {\n    value: viewportInterruptPropertiesRef.current\n  }, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'viewport',\n    \"data-scrollerid\": scrollerID,\n    style: divlinerstyleRef.current,\n    ref: viewportElementRef\n  }, viewportState != 'setup' && children));\n}; // Viewport\n// establish minimum width/height for the viewport -- approximately one item\n// gap only applies with multi-width items, therefore not used in calculations\n\n\nvar calcMinViewportCrossLength = function calcMinViewportCrossLength(orientation, cellWidth, cellHeight, gap, padding) {\n  var crosslength, cellLength;\n\n  if (orientation == 'vertical') {\n    cellLength = cellWidth;\n  } else {\n    cellLength = cellHeight;\n  }\n\n  crosslength = cellLength + padding * 2;\n  return crosslength;\n};\n\nexports[\"default\"] = Viewport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQ0hyQjtJQUFBLGFBQ2dCLFVBRGhCO0lBQzBCLG1CQUNIVSxVQUZ2QjtJQUdJbUQsS0FBSyxFQUFJcEIsZ0JBQWdCLENBQUNwQixPQUg5QjtJQUlJeUMsR0FBRyxFQUFJdkM7RUFKWCxHQU1PTCxhQUFhLElBQUksT0FBbEIsSUFBOEJYLFFBTnBDLENBREcsQ0FBUDtBQVdILENBOUxELEMsQ0E4TEU7QUFFRjtBQUNBOzs7QUFDQSxJQUFNNEMsMEJBQTBCLEdBQUcsU0FBN0JBLDBCQUE2QixDQUFDdkMsV0FBRCxFQUFjSSxTQUFkLEVBQXlCRCxVQUF6QixFQUFxQ0YsR0FBckMsRUFBMENDLE9BQTFDLEVBQXFEO0VBRXBGLElBQUlpRCxXQUFKLEVBQWlCQyxVQUFqQjs7RUFFQSxJQUFJcEQsV0FBVyxJQUFJLFVBQW5CLEVBQStCO0lBQzNCb0QsVUFBVSxHQUFHaEQsU0FBYjtFQUNILENBRkQsTUFFTztJQUNIZ0QsVUFBVSxHQUFHakQsVUFBYjtFQUNIOztFQUNEZ0QsV0FBVyxHQUFHQyxVQUFVLEdBQUlsRCxPQUFPLEdBQUcsQ0FBdEM7RUFFQSxPQUFPaUQsV0FBUDtBQUVILENBYkQ7O0FBZUFoRSxrQkFBQUEsR0FBZU8sUUFBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvVmlld3BvcnQudHN4P2M4MjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdmlld3BvcnQudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMTktMjAyMiBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG4vKlxuICAgIFRoZSByb2xlIG9mIHZpZXdwb3J0IGlzIHRvIHByb3ZpZGUgZGF0YSB0byBpdHMgY2hpbGRyZW4gKHNjcm9sbGJsb2NrIGFuZCBjcmFkbGUpLFxuICAgIGFuZCBhY3QgYXMgdGhlIHZpc2libGUgc2NyZWVuIHBvcnRhbCBvZiB0aGUgbGlzdCBiZWluZyBzaG93blxuKi9cblxuaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QsIHVzZU1lbW8sIHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0fSBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGNvbnN0IFZpZXdwb3J0SW50ZXJydXB0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKSAvLyBmb3IgY2hpbGRyZW5cblxuaW1wb3J0IHsgUmVzaXplT2JzZXJ2ZXIgYXMgUmVzaXplT2JzZXJ2ZXJQb2xseWZpbGwgfSBmcm9tICdAanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlcidcblxuY29uc3QgUmVzaXplT2JzZXJ2ZXIgPSB3aW5kb3dbJ1Jlc2l6ZU9ic2VydmVyJ10gfHwgUmVzaXplT2JzZXJ2ZXJQb2xseWZpbGxcblxuLy8gY29udHJvbCBjb25zdGFudFxuY29uc3QgUkVTSVpFX1RJTUVPVVRfRk9SX09OQUZURVJTUkVTSVpFID0gMjUwXG5cbmNvbnN0IFZpZXdwb3J0ID0gKHtcbiAgICBjaGlsZHJlbiwgXG4gICAgZ3JpZFNwZWNzLFxuICAgIHN0eWxlcyxcbiAgICBzY3JvbGxlcklELFxuICAgIHNjcm9sbGVyRGF0YSxcbn0pID0+IHtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBpbml0aWFsaXplIF0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGNvbnN0IHtcbiAgICAgICAgb3JpZW50YXRpb24sXG4gICAgICAgIGdhcCxcbiAgICAgICAgcGFkZGluZyxcbiAgICAgICAgY2VsbEhlaWdodCxcbiAgICAgICAgY2VsbFdpZHRoLFxuICAgICAgICBsYXlvdXQsXG4gICAgfSA9IGdyaWRTcGVjc1xuXG4gICAgY29uc3QgW3ZpZXdwb3J0U3RhdGUsc2V0Vmlld3BvcnRTdGF0ZV0gPSB1c2VTdGF0ZSgnc2V0dXAnKSAvLyBzZXR1cCwgcmVzaXppbmcsIHJlc2l6ZWQsIHJlYWR5XG5cbiAgICBjb25zdCB2aWV3cG9ydFN0YXRlUmVmID0gdXNlUmVmKG51bGwpIC8vIGZvciB1c2VDYWxsYmFjayAtPiByZXNpemVDYWxsYmFjayBzY29wZVxuICAgIHZpZXdwb3J0U3RhdGVSZWYuY3VycmVudCA9IHZpZXdwb3J0U3RhdGVcblxuICAgIGNvbnN0IGlzTW91bnRlZFJlZiA9IHVzZVJlZih0cnVlKSAvLyBtb25pdG9yIGZvciB1bm1vdW50ZWRcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG5cbiAgICAgICAgLy8gdW5tb3VudFxuICAgICAgICByZXR1cm4gKCkgPT4ge2lzTW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2V9XG5cbiAgICB9LFtdKVxuXG4gICAgY29uc3Qgdmlld3BvcnRFbGVtZW50UmVmID0gdXNlUmVmKG51bGwpXG5cbiAgICAvLyB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYgaXMgcGFzc2VkIGFzIGEgcmVzaXppbmcgaW50ZXJydXB0ICh0aHJvdWdoIGNvbnRleHQpIHRvIGNoaWxkcmVuXG4gICAgLy8gaW5pdGlhbGl6ZVxuICAgIGNvbnN0IHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZiA9IHVzZVJlZihcbiAgICAgICAge1xuICAgICAgICAgICAgaXNSZXBhcmVudGluZ1JlZjpzY3JvbGxlckRhdGE/LmlzUmVwYXJlbnRpbmdSZWYsIFxuICAgICAgICAgICAgaXNSZXNpemluZzpmYWxzZSwgXG4gICAgICAgICAgICAvLyBpbmRleDpudWxsLFxuICAgICAgICAgICAgdmlld3BvcnREaW1lbnNpb25zOm51bGwsXG4gICAgICAgICAgICBlbGVtZW50UmVmOm51bGxcbiAgICAgICAgfVxuICAgIClcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tWyByZXNpemVyIHNldHVwIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgY29uc3QgcmVzaXplVGltZXJpZFJlZiA9IHVzZVJlZihudWxsKVxuICAgIGNvbnN0IGlzUmVzaXppbmdSZWYgPSB1c2VSZWYoZmFsc2UpXG4gICAgY29uc3QgcmVzaXplT2JzZXJ2ZXJSZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgICAvLyBzZXQgdXAgcmVzaXplT2JzZXJ2ZXJcbiAgICB1c2VFZmZlY3QoKCk9PntcblxuICAgICAgICAvLyBpbml0aWFsaXplXG4gICAgICAgIHJlc2l6ZU9ic2VydmVyUmVmLmN1cnJlbnQgPSBuZXcgUmVzaXplT2JzZXJ2ZXIocmVzaXplQ2FsbGJhY2spXG4gICAgICAgIHJlc2l6ZU9ic2VydmVyUmVmLmN1cnJlbnQub2JzZXJ2ZSh2aWV3cG9ydEVsZW1lbnRSZWYuY3VycmVudClcblxuICAgICAgICAvLyB1bm1vdW50XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG5cbiAgICAgICAgICAgIHJlc2l6ZU9ic2VydmVyUmVmLmN1cnJlbnQuZGlzY29ubmVjdCgpXG5cbiAgICAgICAgfVxuXG4gICAgfSxbXSlcblxuICAgIC8vIHVzZWQgYnkgcmVzaXplT2JzZXJ2ZXI7IGdlbmVyYXRlcyBpbnRlcnJ1cHRcbiAgICBjb25zdCByZXNpemVDYWxsYmFjayA9IHVzZUNhbGxiYWNrKChlbnRyaWVzKT0+e1xuXG4gICAgICAgIGlmICgoIWlzTW91bnRlZFJlZi5jdXJyZW50KSB8fCAoIXZpZXdwb3J0RWxlbWVudFJlZi5jdXJyZW50KSkgcmV0dXJuXG5cbiAgICAgICAgaWYgKHZpZXdwb3J0U3RhdGVSZWYuY3VycmVudCA9PSAnc2V0dXAnKSByZXR1cm5cblxuICAgICAgICBjb25zdCB0YXJnZXQgPSBlbnRyaWVzWzBdLnRhcmdldFxuXG4gICAgICAgIC8vIGdlbmVyYXRlIGludGVycnVwdCByZXNwb25zZSwgaWYgaW5pdGlhdGluZyByZXNpemVcbiAgICAgICAgaWYgKCFpc1Jlc2l6aW5nUmVmLmN1cnJlbnQpIHtcblxuICAgICAgICAgICAgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQuaXNSZXNpemluZyA9IGlzUmVzaXppbmdSZWYuY3VycmVudCA9IHRydWUgXG4gICAgICAgICAgICAvLyBuZXcgb2JqZWN0IGNyZWF0aW9uIHRyaWdnZXJzIGEgcmVhbHRpbWUgaW50ZXJydXB0IG1lc3NhZ2UgdG8gY3JhZGxlIHRocm91Z2ggY29udGV4dFxuICAgICAgICAgICAgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQgPSBPYmplY3QuYXNzaWduKHt9LHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZi5jdXJyZW50KSBcblxuICAgICAgICAgICAgaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50KSBzZXRWaWV3cG9ydFN0YXRlKCdyZXNpemluZycpXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFyVGltZW91dChyZXNpemVUaW1lcmlkUmVmLmN1cnJlbnQpXG4gICAgICAgIHJlc2l6ZVRpbWVyaWRSZWYuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXG4gICAgICAgICAgICBpc1Jlc2l6aW5nUmVmLmN1cnJlbnQgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgc2V0Vmlld3BvcnRTdGF0ZSgncmVzaXplZCcpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxSRVNJWkVfVElNRU9VVF9GT1JfT05BRlRFUlNSRVNJWkUpXG5cbiAgICB9LFtdKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgY2FsY3VsYXRlIGNvbmZpZyB2YWx1ZXMgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBjb25zdCBkaXZsaW5lcnN0eWxlUmVmID0gdXNlUmVmKG51bGwpXG5cbiAgICAvLyBpbml0aWFsaXplIHdpdGggaW5oZXJpdGVkIHN0eWxlc1xuICAgIGRpdmxpbmVyc3R5bGVSZWYuY3VycmVudCA9IHVzZU1lbW8oKCkgPT4ge1xuXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgICAgICB7XG4gICAgICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOjAsXG4gICAgICAgICAgICByaWdodDowLFxuICAgICAgICAgICAgYm90dG9tOjAsXG4gICAgICAgICAgICBsZWZ0OjAsXG4gICAgICAgICAgICBvdmVyZmxvdzonYXV0bycsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6J3JlZCcsXG4gICAgICAgIH0sIHN0eWxlcy52aWV3cG9ydClcblxuICAgIH0sW3N0eWxlcy52aWV3cG9ydF0pXG5cbiAgICAvLyB1cGRhdGUgd2l0aCBjb25maWcgdmFsdWVzXG4gICAgZGl2bGluZXJzdHlsZVJlZi5jdXJyZW50ID0gdXNlTWVtbygoKSA9PiB7XG5cbiAgICAgICAgLy8gVE9ETzogZ2FwXG4gICAgICAgIGxldCBtaW5jcm9zc2xlbmd0aCA9IGNhbGNNaW5WaWV3cG9ydENyb3NzTGVuZ3RoKG9yaWVudGF0aW9uLCBjZWxsV2lkdGgsIGNlbGxIZWlnaHQsIGdhcCwgcGFkZGluZylcbiAgICAgICAgbGV0IHN0eWxlcyA9IE9iamVjdC5hc3NpZ24oe30sZGl2bGluZXJzdHlsZVJlZi5jdXJyZW50KSAvLyBhdm9pZCByZWFkb25seVxuXG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICBzdHlsZXMubWluV2lkdGggPSBtaW5jcm9zc2xlbmd0aCArICdweCdcbiAgICAgICAgICAgIHN0eWxlcy5taW5IZWlnaHQgPSAnYXV0bydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0eWxlcy5taW5XaWR0aCA9ICdhdXRvJ1xuICAgICAgICAgICAgc3R5bGVzLm1pbkhlaWdodCA9IG1pbmNyb3NzbGVuZ3RoICsgJ3B4J1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0eWxlc1xuXG4gICAgfSxbb3JpZW50YXRpb24sIGNlbGxXaWR0aCwgY2VsbEhlaWdodCwgZ2FwLCBwYWRkaW5nXSlcblxuICAgIC8vIHVwZGF0ZSB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWY7IGFkZCB2aWV3cG9ydCBkaW1lbnNpb25zXG4gICAgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQgPSB1c2VNZW1vKCgpID0+IHtcblxuICAgICAgICBpZiAodmlld3BvcnRTdGF0ZSA9PSAnc2V0dXAnKSByZXR1cm4gdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnRcblxuICAgICAgICBjb25zdCB7dG9wLCByaWdodCwgYm90dG9tLCBsZWZ0fSA9IHZpZXdwb3J0RWxlbWVudFJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIGNvbnN0IHdpZHRoID0gKHJpZ2h0IC0gbGVmdClcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gKGJvdHRvbSAtIHRvcClcblxuICAgICAgICAvLyBUT0RPIHRoaXMgaXMgYSBkdXBsaWNhdGUgc2V0dGluZyBwcm9jZWR1cmUgd2l0aCBpbnRlcnJ1cHRoYW5kbGVyLnRzeCBjcmFkbGVJbnRlcnNlY3Rpb25PYnNlcnZlckNhbGxiYWNrXG4gICAgICAgIGNvbnN0IGxvY2FsVmlld3BvcnREYXRhID0ge1xuICAgICAgICAgICAgdmlld3BvcnREaW1lbnNpb25zOnt0b3AscmlnaHQsIGJvdHRvbSwgbGVmdCwgd2lkdGgsIGhlaWdodH0sXG4gICAgICAgICAgICBlbGVtZW50UmVmOnZpZXdwb3J0RWxlbWVudFJlZixcbiAgICAgICAgICAgIGlzUmVzaXppbmc6aXNSZXNpemluZ1JlZi5jdXJyZW50LFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdHJpZ2dlciBjb250ZXh0IGNoYW5nZSB3aXRoIG5ldyBvYmplY3RcbiAgICAgICAgY29uc3Qgdmlld3BvcnRkYXRhb2JqZWN0ID0gT2JqZWN0LmFzc2lnbih7fSx2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYuY3VycmVudCwgbG9jYWxWaWV3cG9ydERhdGEpIFxuXG4gICAgICAgIHJldHVybiAgdmlld3BvcnRkYXRhb2JqZWN0XG5cbiAgICB9LFtvcmllbnRhdGlvbiwgaXNSZXNpemluZ1JlZi5jdXJyZW50LCB2aWV3cG9ydFN0YXRlXSlcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tWyBzdGF0ZSBwcm9jZXNzaW5nIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCk9PntcbiAgICAgICAgc3dpdGNoICh2aWV3cG9ydFN0YXRlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3Jlc2l6ZWQnOlxuICAgICAgICAgICAgY2FzZSAnc2V0dXAnOiB7XG4gICAgICAgICAgICAgICAgc2V0Vmlld3BvcnRTdGF0ZSgncmVhZHknKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH0sW3ZpZXdwb3J0U3RhdGVdKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgcmVuZGVyIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgcmV0dXJuIDxWaWV3cG9ydEludGVycnVwdC5Qcm92aWRlciB2YWx1ZSA9IHsgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQgfT5cbiAgICAgICAgPGRpdiBcbiAgICAgICAgICAgIGRhdGEtdHlwZSA9ICd2aWV3cG9ydCdcbiAgICAgICAgICAgIGRhdGEtc2Nyb2xsZXJpZCA9IHtzY3JvbGxlcklEfVxuICAgICAgICAgICAgc3R5bGUgPSB7ZGl2bGluZXJzdHlsZVJlZi5jdXJyZW50fVxuICAgICAgICAgICAgcmVmID0ge3ZpZXdwb3J0RWxlbWVudFJlZn1cbiAgICAgICAgPlxuICAgICAgICAgICAgeyAodmlld3BvcnRTdGF0ZSAhPSAnc2V0dXAnKSAmJiBjaGlsZHJlbiB9XG4gICAgICAgIDwvZGl2PlxuICAgIDwvVmlld3BvcnRJbnRlcnJ1cHQuUHJvdmlkZXI+XG4gICAgXG59IC8vIFZpZXdwb3J0XG5cbi8vIGVzdGFibGlzaCBtaW5pbXVtIHdpZHRoL2hlaWdodCBmb3IgdGhlIHZpZXdwb3J0IC0tIGFwcHJveGltYXRlbHkgb25lIGl0ZW1cbi8vIGdhcCBvbmx5IGFwcGxpZXMgd2l0aCBtdWx0aS13aWR0aCBpdGVtcywgdGhlcmVmb3JlIG5vdCB1c2VkIGluIGNhbGN1bGF0aW9uc1xuY29uc3QgY2FsY01pblZpZXdwb3J0Q3Jvc3NMZW5ndGggPSAob3JpZW50YXRpb24sIGNlbGxXaWR0aCwgY2VsbEhlaWdodCwgZ2FwLCBwYWRkaW5nKSA9PiB7XG5cbiAgICBsZXQgY3Jvc3NsZW5ndGgsIGNlbGxMZW5ndGhcbiAgICBcbiAgICBpZiAob3JpZW50YXRpb24gPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBjZWxsTGVuZ3RoID0gY2VsbFdpZHRoIFxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNlbGxMZW5ndGggPSBjZWxsSGVpZ2h0XG4gICAgfVxuICAgIGNyb3NzbGVuZ3RoID0gY2VsbExlbmd0aCArIChwYWRkaW5nICogMilcblxuICAgIHJldHVybiBjcm9zc2xlbmd0aFxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZXdwb3J0XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInJlYWN0XzEiLCJjcmVhdGVDb250ZXh0IiwiUmVzaXplT2JzZXJ2ZXIiLCJ3aW5kb3ciLCJyZXNpemVfb2JzZXJ2ZXJfMSIsIlJFU0laRV9USU1FT1VUX0ZPUl9PTkFGVEVSU1JFU0laRSIsIlZpZXdwb3J0IiwiY2hpbGRyZW4iLCJncmlkU3BlY3MiLCJzdHlsZXMiLCJzY3JvbGxlcklEIiwic2Nyb2xsZXJEYXRhIiwib3JpZW50YXRpb24iLCJnYXAiLCJwYWRkaW5nIiwiY2VsbEhlaWdodCIsImNlbGxXaWR0aCIsImxheW91dCIsInZpZXdwb3J0U3RhdGUiLCJzZXRWaWV3cG9ydFN0YXRlIiwidmlld3BvcnRTdGF0ZVJlZiIsImN1cnJlbnQiLCJpc01vdW50ZWRSZWYiLCJ2aWV3cG9ydEVsZW1lbnRSZWYiLCJ2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYiLCJpc1JlcGFyZW50aW5nUmVmIiwiaXNSZXNpemluZyIsInZpZXdwb3J0RGltZW5zaW9ucyIsImVsZW1lbnRSZWYiLCJyZXNpemVUaW1lcmlkUmVmIiwiaXNSZXNpemluZ1JlZiIsInJlc2l6ZU9ic2VydmVyUmVmIiwicmVzaXplQ2FsbGJhY2siLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsImVudHJpZXMiLCJ0YXJnZXQiLCJPYmplY3QiLCJhc3NpZ24iLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZGl2bGluZXJzdHlsZVJlZiIsInBvc2l0aW9uIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0Iiwib3ZlcmZsb3ciLCJiYWNrZ3JvdW5kQ29sb3IiLCJ2aWV3cG9ydCIsIm1pbmNyb3NzbGVuZ3RoIiwiY2FsY01pblZpZXdwb3J0Q3Jvc3NMZW5ndGgiLCJtaW5XaWR0aCIsIm1pbkhlaWdodCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwibG9jYWxWaWV3cG9ydERhdGEiLCJ2aWV3cG9ydGRhdGFvYmplY3QiLCJQcm92aWRlciIsInZhbHVlIiwic3R5bGUiLCJyZWYiLCJjcm9zc2xlbmd0aCIsImNlbGxMZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Viewport.tsx\n");

/***/ }),

/***/ "./src/cellframe/Placeholder.tsx":
/*!***************************************!*\
  !*** ./src/cellframe/Placeholder.tsx ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // placeholder.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar Placeholder = function Placeholder(_ref) {\n  var index = _ref.index,\n      listsize = _ref.listsize,\n      error = _ref.error;\n  var stylesRef = (0, react_1.useRef)({\n    position: 'relative',\n    boxSizing: 'border-box',\n    backgroundColor: 'cyan',\n    border: '2px solid black',\n    height: '100%',\n    width: '100%'\n  });\n  var itemStylesRef = (0, react_1.useRef)({\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: '3px',\n    opacity: .5,\n    borderRadius: '8px',\n    backgroundColor: 'white',\n    margin: '3px',\n    fontSize: 'smaller'\n  });\n  return react_1[\"default\"].createElement(\"div\", {\n    style: stylesRef.current\n  }, !error ? react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, index + 1, \"/\", listsize, \" (loading...)\") : react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, \"item is not available at this time\"));\n};\n\nexports[\"default\"] = Placeholder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY2VsbGZyYW1lL1BsYWNlaG9sZGVyLnRzeC5qcyIsIm1hcHBpbmdzIjoiQ0FBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUEsSUFBTUEsV0FBVyxHQUFHLFNBQWRBLFdBQWMsT0FBNkI7RUFBQSxJQUEzQkMsS0FBMkIsUUFBM0JBLEtBQTJCO0VBQUEsSUFBcEJDLFFBQW9CLFFBQXBCQSxRQUFvQjtFQUFBLElBQVZDLEtBQVUsUUFBVkEsS0FBVTtFQUU3QyxJQUFNQyxTQUFTLEdBQUcsb0JBQU87SUFDckJDLFFBQVEsRUFBQyxVQURZO0lBRXJCQyxTQUFTLEVBQUMsWUFGVztJQUdyQkMsZUFBZSxFQUFDLE1BSEs7SUFJckJDLE1BQU0sRUFBQyxpQkFKYztJQUtyQkMsTUFBTSxFQUFDLE1BTGM7SUFNckJDLEtBQUssRUFBQztFQU5lLENBQVAsQ0FBbEI7RUFRQSxJQUFNQyxhQUFhLEdBQUcsb0JBQ2xCO0lBQ0lOLFFBQVEsRUFBQyxVQURiO0lBRUlPLEdBQUcsRUFBQyxDQUZSO0lBR0lDLElBQUksRUFBQyxDQUhUO0lBSUlDLE9BQU8sRUFBQyxLQUpaO0lBS0lDLE9BQU8sRUFBQyxFQUxaO0lBTUlDLFlBQVksRUFBQyxLQU5qQjtJQU9JVCxlQUFlLEVBQUMsT0FQcEI7SUFRSVUsTUFBTSxFQUFDLEtBUlg7SUFTSUMsUUFBUSxFQUFDO0VBVGIsQ0FEa0IsQ0FBdEI7RUFjQSxPQUFPQztJQUFLQyxLQUFLLEVBQUloQixTQUFTLENBQUNpQjtFQUF4QixHQUNELENBQUNsQixLQUFELEdBQ0VnQjtJQUFLQyxLQUFLLEVBQUlULGFBQWEsQ0FBQ1U7RUFBNUIsR0FBc0NwQixLQUFLLEdBQUcsQ0FBOUMsT0FBa0RDLFFBQWxELGtCQURGLEdBRUVpQjtJQUFLQyxLQUFLLEVBQUlULGFBQWEsQ0FBQ1U7RUFBNUIsR0FBbUMsb0NBQW5DLENBSEQsQ0FBUDtBQU9ILENBL0JEOztBQWlDQUMsa0JBQUFBLEdBQWV0QixXQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9jZWxsZnJhbWUvUGxhY2Vob2xkZXIudHN4P2JiMzQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGxhY2Vob2xkZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMjAgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuaW1wb3J0IFJlYWN0LCB7dXNlUmVmIH0gZnJvbSAncmVhY3QnXG5cbmNvbnN0IFBsYWNlaG9sZGVyID0gKHtpbmRleCwgbGlzdHNpemUsIGVycm9yfSkgPT4ge1xuXG4gICAgY29uc3Qgc3R5bGVzUmVmID0gdXNlUmVmKHtcbiAgICAgICAgcG9zaXRpb246J3JlbGF0aXZlJyxcbiAgICAgICAgYm94U2l6aW5nOidib3JkZXItYm94JyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOidjeWFuJyxcbiAgICAgICAgYm9yZGVyOicycHggc29saWQgYmxhY2snLFxuICAgICAgICBoZWlnaHQ6JzEwMCUnLFxuICAgICAgICB3aWR0aDonMTAwJSdcbiAgICB9IGFzIFJlYWN0LkNTU1Byb3BlcnRpZXMpXG4gICAgY29uc3QgaXRlbVN0eWxlc1JlZiA9IHVzZVJlZihcbiAgICAgICAge1xuICAgICAgICAgICAgcG9zaXRpb246J2Fic29sdXRlJyxcbiAgICAgICAgICAgIHRvcDowLFxuICAgICAgICAgICAgbGVmdDowLFxuICAgICAgICAgICAgcGFkZGluZzonM3B4JyxcbiAgICAgICAgICAgIG9wYWNpdHk6LjUsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6JzhweCcsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6J3doaXRlJywgXG4gICAgICAgICAgICBtYXJnaW46JzNweCcsXG4gICAgICAgICAgICBmb250U2l6ZTonc21hbGxlcicsXG4gICAgICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllc1xuICAgIClcblxuICAgIHJldHVybiA8ZGl2IHN0eWxlID0ge3N0eWxlc1JlZi5jdXJyZW50fT5cbiAgICAgICAgeyAhZXJyb3I/XG4gICAgICAgICAgICA8ZGl2IHN0eWxlID0ge2l0ZW1TdHlsZXNSZWYuY3VycmVudH0+e2luZGV4ICsgMX0ve2xpc3RzaXplfSAobG9hZGluZy4uLik8L2Rpdj46XG4gICAgICAgICAgICA8ZGl2IHN0eWxlID0ge2l0ZW1TdHlsZXNSZWYuY3VycmVudH0+aXRlbSBpcyBub3QgYXZhaWxhYmxlIGF0IHRoaXMgdGltZTwvZGl2PlxuICAgICAgICB9XG4gICAgICAgIFxuICAgIDwvZGl2PlxufVxuXG5leHBvcnQgZGVmYXVsdCBQbGFjZWhvbGRlciJdLCJuYW1lcyI6WyJQbGFjZWhvbGRlciIsImluZGV4IiwibGlzdHNpemUiLCJlcnJvciIsInN0eWxlc1JlZiIsInBvc2l0aW9uIiwiYm94U2l6aW5nIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiaGVpZ2h0Iiwid2lkdGgiLCJpdGVtU3R5bGVzUmVmIiwidG9wIiwibGVmdCIsInBhZGRpbmciLCJvcGFjaXR5IiwiYm9yZGVyUmFkaXVzIiwibWFyZ2luIiwiZm9udFNpemUiLCJyZWFjdF8xIiwic3R5bGUiLCJjdXJyZW50IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/cellframe/Placeholder.tsx\n");

/***/ }),

/***/ "./src/cradle/Scrolltracker.tsx":
/*!**************************************!*\
  !*** ./src/cradle/Scrolltracker.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // scrolltracker.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar ScrollTracker = function ScrollTracker(_ref) {\n  var top = _ref.top,\n      left = _ref.left,\n      offset = _ref.offset,\n      listsize = _ref.listsize,\n      styles = _ref.styles;\n  var trackdata = \"\".concat(offset + 1, \"/\").concat(listsize);\n  var styleRef = (0, react_1.useRef)(Object.assign({\n    top: top + 'px',\n    left: left + 'px',\n    position: 'fixed',\n    zIndex: 3,\n    backgroundColor: 'white',\n    border: '1px solid gray',\n    borderRadius: '10px',\n    fontSize: 'smaller',\n    padding: '3px'\n  }, styles.scrolltracker));\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-name\": 'scrolltracker',\n    style: styleRef.current\n  }, trackdata);\n};\n\nexports[\"default\"] = ScrollTracker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL1Njcm9sbHRyYWNrZXIudHN4LmpzIiwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQSxJQUFNQSxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLE9BQTRDO0VBQUEsSUFBekNDLEdBQXlDLFFBQXpDQSxHQUF5QztFQUFBLElBQXBDQyxJQUFvQyxRQUFwQ0EsSUFBb0M7RUFBQSxJQUE5QkMsTUFBOEIsUUFBOUJBLE1BQThCO0VBQUEsSUFBdEJDLFFBQXNCLFFBQXRCQSxRQUFzQjtFQUFBLElBQVpDLE1BQVksUUFBWkEsTUFBWTtFQUU5RCxJQUFJQyxTQUFTLGFBQU1ILE1BQU0sR0FBRyxDQUFmLGNBQW9CQyxRQUFwQixDQUFiO0VBRUEsSUFBSUcsUUFBUSxHQUFHLG9CQUFPQyxNQUFNLENBQUNDLE1BQVAsQ0FBYztJQUNoQ1IsR0FBRyxFQUFFQSxHQUFHLEdBQUcsSUFEcUI7SUFFaENDLElBQUksRUFBRUEsSUFBSSxHQUFHLElBRm1CO0lBR2hDUSxRQUFRLEVBQUMsT0FIdUI7SUFJaENDLE1BQU0sRUFBQyxDQUp5QjtJQUtoQ0MsZUFBZSxFQUFDLE9BTGdCO0lBTWhDQyxNQUFNLEVBQUUsZ0JBTndCO0lBT2hDQyxZQUFZLEVBQUMsTUFQbUI7SUFRaENDLFFBQVEsRUFBQyxTQVJ1QjtJQVNoQ0MsT0FBTyxFQUFDO0VBVHdCLENBQWQsRUFVR1gsTUFBTSxDQUFDWSxhQVZWLENBQVAsQ0FBZjtFQVlBLE9BQU9DO0lBQUEsYUFBaUIsZUFBakI7SUFBaUNDLEtBQUssRUFBSVosUUFBUSxDQUFDYTtFQUFuRCxHQUE4RGQsU0FBOUQsQ0FBUDtBQUNILENBakJEOztBQW1CQWUsa0JBQUFBLEdBQWVyQixhQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9jcmFkbGUvU2Nyb2xsdHJhY2tlci50c3g/NDUwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzY3JvbGx0cmFja2VyLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDIwIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbmltcG9ydCBSZWFjdCwge3VzZVJlZn0gZnJvbSAncmVhY3QnXG5cbmNvbnN0IFNjcm9sbFRyYWNrZXIgPSAoeyB0b3AsIGxlZnQsIG9mZnNldCwgbGlzdHNpemUsIHN0eWxlcyB9KSA9PiB7XG5cbiAgICBsZXQgdHJhY2tkYXRhID0gYCR7b2Zmc2V0ICsgMX0vJHtsaXN0c2l6ZX1gXG5cbiAgICBsZXQgc3R5bGVSZWYgPSB1c2VSZWYoT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIHRvcDogdG9wICsgJ3B4JyxcbiAgICAgICAgbGVmdDogbGVmdCArICdweCcsXG4gICAgICAgIHBvc2l0aW9uOidmaXhlZCcsXG4gICAgICAgIHpJbmRleDozLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6J3doaXRlJyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGdyYXknLFxuICAgICAgICBib3JkZXJSYWRpdXM6JzEwcHgnLFxuICAgICAgICBmb250U2l6ZTonc21hbGxlcicsXG4gICAgICAgIHBhZGRpbmc6JzNweCdcbiAgICB9IGFzIFJlYWN0LkNTU1Byb3BlcnRpZXMsc3R5bGVzLnNjcm9sbHRyYWNrZXIpKVxuXG4gICAgcmV0dXJuIDxkaXYgZGF0YS1uYW1lID0gJ3Njcm9sbHRyYWNrZXInIHN0eWxlID0ge3N0eWxlUmVmLmN1cnJlbnR9ID57dHJhY2tkYXRhfTwvZGl2PlxufVxuXG5leHBvcnQgZGVmYXVsdCBTY3JvbGxUcmFja2VyIl0sIm5hbWVzIjpbIlNjcm9sbFRyYWNrZXIiLCJ0b3AiLCJsZWZ0Iiwib2Zmc2V0IiwibGlzdHNpemUiLCJzdHlsZXMiLCJ0cmFja2RhdGEiLCJzdHlsZVJlZiIsIk9iamVjdCIsImFzc2lnbiIsInBvc2l0aW9uIiwiekluZGV4IiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiYm9yZGVyUmFkaXVzIiwiZm9udFNpemUiLCJwYWRkaW5nIiwic2Nyb2xsdHJhY2tlciIsInJlYWN0XzEiLCJzdHlsZSIsImN1cnJlbnQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cradle/Scrolltracker.tsx\n");

/***/ }),

/***/ "./src/cradle/cachehandler.tsx":
/*!*************************************!*\
  !*** ./src/cradle/cachehandler.tsx ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // portalhandler.tsx\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PortalList = exports.CacheHandler = void 0;\n/*\n    The infinite list scroller stores user cell data in a central hidden portal cache for each\n    infinitegridscroller root, from whence the data is pulled into the relevant CellFrame for display\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ \"./node_modules/react-reverse-portal/dist/web/index.js\");\n\nvar MAX_CACHE_OVER_RUN = 1.5;\nvar globalCacheItemID = 0; // global scroller data, organized by session scrollerID\n// the cache itself is maintained in the root infinitegridscroller component\n\nvar CacheHandler = /*#__PURE__*/function () {\n  function CacheHandler(scrollerID, setListsize, listsizeRef) {\n    var _this = this;\n\n    _classCallCheck(this, CacheHandler);\n\n    this.cacheProps = {\n      setListState: null,\n      modified: false,\n      metadataMap: new Map(),\n      requestedMap: new Map(),\n      portalMap: new Map(),\n      indexToItemIDMap: new Map(),\n      portalList: null,\n      scrollerID: null\n    }; //===========================[ REPOSITORY AND LIST MANAGEMENT ]==================================\n\n    this.changeListsize = function (newlistsize, cacheDeleteListCallback) {\n      _this.setListsize(newlistsize); // match cache to newlistsize\n\n\n      var portalIndexList = _this.cacheProps.indexToItemIDMap;\n      var mapkeys = Array.from(portalIndexList.keys());\n      mapkeys.sort(function (a, b) {\n        return a - b;\n      });\n      var highestindex = mapkeys.at(-1);\n\n      if (highestindex > newlistsize - 1) {\n        // pare the cache\n        var parelist = mapkeys.filter(function (item) {\n          return item > newlistsize - 1;\n        });\n\n        _this.deletePortal(parelist, cacheDeleteListCallback);\n      }\n    };\n\n    this.clearCache = function () {\n      // keep the setListState callback\n      _this.cacheProps.portalMap.clear();\n\n      _this.cacheProps.metadataMap.clear();\n\n      _this.cacheProps.indexToItemIDMap.clear();\n\n      _this.cacheProps.requestedMap.clear();\n\n      _this.cacheProps.portalList = null;\n      _this.cacheProps.modified = false;\n\n      _this.cacheProps.setListState(); // trigger display update\n\n    }; // set state of the PortalList component of the scroller to trigger render\n\n\n    this.renderPortalList = function () {\n      if (_this.cacheProps.modified) {\n        _this.cacheProps.portalList = Array.from(_this.cacheProps.portalMap.values());\n        _this.cacheProps.modified = false;\n      }\n\n      _this.cacheProps.setListState(); // trigger display update\n\n    };\n\n    this.matchCacheToCradle = function (modelIndexList, cacheDeleteListCallback) {\n      var mapkeys = Array.from(_this.cacheProps.indexToItemIDMap.keys());\n      mapkeys.filter(function (key) {\n        return !modelIndexList.includes(key);\n      });\n\n      _this.deletePortal(mapkeys, cacheDeleteListCallback);\n    };\n\n    this.pareCacheToMax = function (cacheMax, modelIndexList, cacheDeleteListCallback) {\n      var modelLength = modelIndexList.length; // determine need for paring\n\n      if (!cacheMax || !modelLength) return false;\n      var max = Math.max(modelLength, cacheMax);\n      var portalIndexList = _this.cacheProps.indexToItemIDMap;\n      var requestedMap = _this.cacheProps.requestedMap; // if ((portalMapList.size + requestedMap.size) <= max) return false\n\n      if (portalIndexList.size + requestedMap.size <= max) return false; // sort the map keys\n\n      var mapkeyslist = Array.from(portalIndexList.keys());\n      var requestedkeys = Array.from(requestedMap.keys());\n      var mapkeys = mapkeyslist.concat(requestedkeys);\n      mapkeys.sort(function (a, b) {\n        return a - b;\n      }); // get number to pare\n\n      var mapLength = mapkeys.length;\n      var parecount = mapLength - max; // distribute paring proportionally at front and back\n\n      var headindex = modelIndexList[0];\n      var tailindex = modelIndexList[modelLength - 1];\n      var headpos = mapkeys.indexOf(headindex);\n      var tailpos = mapkeys.indexOf(tailindex);\n      var headroom = headpos;\n      var tailroom = mapLength - (tailpos + 1);\n      var pareroom = headroom + tailroom;\n      var headparecount = Math.floor(headroom / pareroom * parecount);\n      var tailparecount = parecount - headparecount; // collect indexes to pare\n\n      var headlist = mapkeys.slice(0, headparecount);\n      var taillist = mapkeys.slice(mapLength - tailparecount);\n      var delList = headlist.concat(taillist);\n\n      _this.deletePortal(delList, cacheDeleteListCallback);\n\n      return true;\n    };\n\n    this.guardAgainstRunawayCaching = function (cacheMax, modelLength) {\n      if (!cacheMax) return false;\n      var portalMap = _this.cacheProps.portalMap;\n      var requestedMap = _this.cacheProps.requestedMap;\n      var max = Math.max(modelLength, cacheMax);\n\n      if (portalMap.size + requestedMap.size <= max * MAX_CACHE_OVER_RUN) {\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    this.cacheProps.scrollerID = scrollerID;\n    this.setListsize = setListsize; // passed from infinitegridscroller setListsize(listsize)\n\n    this.listsizeRef = listsizeRef;\n  }\n\n  _createClass(CacheHandler, [{\n    key: \"preload\",\n    value: function preload(cradleParameters, callback, scrollerID) {\n      var cradlePassthroughPropertiesRef = cradleParameters.cradlePassthroughPropertiesRef;\n      var _cradleParameters$han = cradleParameters.handlersRef.current,\n          stateHandler = _cradleParameters$han.stateHandler,\n          serviceHandler = _cradleParameters$han.serviceHandler;\n      var cradleInheritedProperties = cradleParameters.cradleInheritedPropertiesRef.current;\n      var cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n      var getItem = cradleInheritedProperties.getItem;\n      var listsize = cradleInternalProperties.listsize;\n      var promises = [];\n\n      if (stateHandler.isMountedRef.current) {\n        for (var i = 0; i < listsize; i++) {\n          // console.log('preloading',i)\n          var promise = this.preloadItem(i, getItem, cradlePassthroughPropertiesRef, serviceHandler.callbacks.preloadIndexCallback, scrollerID);\n          promises.push(promise);\n        }\n      }\n\n      Promise.all(promises).then(function () {\n        // console.log(\"finished preloading\",'-'+scrollerID+'-',+this.cacheProps.portalMap.size)\n        callback();\n      });\n    } // =========================[ SNAPSHOTS ]=========================\n\n  }, {\n    key: \"getCacheMap\",\n    value: function getCacheMap() {\n      return new Map(this.cacheProps.indexToItemIDMap);\n    }\n  }, {\n    key: \"getCradleMap\",\n    value: function getCradleMap(modelIndexList) {\n      var cradleMap = new Map();\n      var indexToItemIDMap = this.cacheProps.indexToItemIDMap;\n\n      var _iterator = _createForOfIteratorHelper(modelIndexList),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var index = _step.value;\n          cradleMap.set(index, indexToItemIDMap.get(index));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return cradleMap;\n    }\n  }, {\n    key: \"getCacheList\",\n    value: function getCacheList() {\n      var cachelist = new Map();\n\n      var _iterator2 = _createForOfIteratorHelper(this.cacheProps.metadataMap),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              key = _step2$value[0],\n              value = _step2$value[1];\n\n          var index = value.index,\n              component = value.component;\n          cachelist.set(key, {\n            index: index,\n            component: component\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return cachelist;\n    } // ==========================[ SERVICE SUPPORT ]=========================\n    // TODO implement highrange logic\n\n  }, {\n    key: \"moveIndex\",\n    value: function moveIndex(toindex, fromindex, highrange) {\n      if (fromindex == toindex) return [];\n      var _this$cacheProps = this.cacheProps,\n          indexToItemIDMap = _this$cacheProps.indexToItemIDMap,\n          metadataMap = _this$cacheProps.metadataMap;\n      if (!(indexToItemIDMap.has(fromindex) && indexToItemIDMap.has(toindex))) return;\n      var shiftingindex = fromindex;\n      var shiftingcacheItemID = indexToItemIDMap.get(shiftingindex);\n      var shiftincrement = fromindex < toindex ? -1 : // increment down, make room for shiftingindex at top\n      1; // increment up, make room for shiftingindex at bottom\n\n      var startindex = shiftincrement == -1 ? fromindex : toindex;\n      var endindex = shiftincrement == -1 ? toindex : fromindex;\n      var sliceincrement = shiftincrement == -1 ? 1 : 0;\n      var orderedindexlist = Array.from(indexToItemIDMap.keys());\n      orderedindexlist.sort(function (a, b) {\n        return a - b;\n      });\n      var toprocesslist = orderedindexlist.slice(orderedindexlist.indexOf(startindex) + sliceincrement, orderedindexlist.indexOf(endindex) + sliceincrement);\n      if (shiftincrement == 1) toprocesslist.reverse();\n\n      var _iterator3 = _createForOfIteratorHelper(toprocesslist),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var index = _step3.value;\n          var cacheItemID = indexToItemIDMap.get(index);\n          var newIndex = index + shiftincrement;\n          indexToItemIDMap.set(newIndex, cacheItemID);\n          metadataMap.get(cacheItemID).index = newIndex;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      indexToItemIDMap.set(toindex, shiftingcacheItemID);\n      metadataMap.get(shiftingcacheItemID).index = toindex;\n      var processedlist = toprocesslist.concat([fromindex]);\n      return processedlist;\n    }\n  }, {\n    key: \"incrementFromIndex\",\n    value: function incrementFromIndex(index, highrange, increment) {\n      highrange = highrange !== null && highrange !== void 0 ? highrange : 0;\n      highrange = highrange > index ? highrange : index;\n      var rangecount = highrange - index + 1;\n      var rangeincrement = rangecount * increment;\n      var _this$cacheProps2 = this.cacheProps,\n          indexToItemIDMap = _this$cacheProps2.indexToItemIDMap,\n          metadataMap = _this$cacheProps2.metadataMap;\n      var orderedindexlist = Array.from(indexToItemIDMap.keys());\n      orderedindexlist.sort(function (a, b) {\n        return a - b;\n      }); // console.log('orderedindexlist length',orderedindexlist.length, orderedindexlist)\n      // provides value for slice above the range\n\n      var ptr = orderedindexlist.findIndex(function (value) {\n        return value >= highrange;\n      });\n\n      if (ptr == -1) {\n        ptr = orderedindexlist.length - 1;\n        highrange = orderedindexlist.at(ptr);\n\n        if (highrange < index) {\n          return [];\n        }\n      } // obtain slice above the highvaluerange\n\n\n      var processIndexList = increment == 1 ? orderedindexlist.slice(index) : orderedindexlist.slice(highrange + 1);\n      var indexestoremove = increment == 1 ? orderedindexlist.slice(index, ptr + 1) : orderedindexlist.slice(rangeincrement);\n      var cacheItemsToRemoveMap = new Map();\n\n      var _iterator4 = _createForOfIteratorHelper(indexestoremove),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _index = _step4.value;\n          cacheItemsToRemoveMap.set(_index, indexToItemIDMap.get(_index));\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var removeIndexList = Array.from(cacheItemsToRemoveMap.keys());\n      if (increment == 1) processIndexList.reverse(); // console.log('cache items index, highrange, increment, rangeincrement, indexes to process, remove', \n      //     index, highrange, increment, rangeincrement, processIndexList, cacheItemsToRemoveMap)\n\n      console.log('incrementFromIndex: metadataMap BEFORE\\n', new Map(metadataMap));\n      var modifiedList = [];\n\n      var _iterator5 = _createForOfIteratorHelper(processIndexList),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _index2 = _step5.value;\n          var cacheItemID = indexToItemIDMap.get(_index2);\n          var newIndex = _index2 + rangeincrement;\n          indexToItemIDMap.set(newIndex, cacheItemID);\n          metadataMap.get(cacheItemID).index = newIndex;\n          modifiedList.push(newIndex);\n        } // delete remaining duplicates\n\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      cacheItemsToRemoveMap.forEach(function (index, cacheItemID) {\n        indexToItemIDMap[\"delete\"](index);\n        if (increment == -1) metadataMap[\"delete\"](cacheItemID);\n      });\n      console.log('incrementFromIndex: indexToItemIDMap, metadataMap AFTER\\n', indexToItemIDMap, new Map(metadataMap)); // const changeIndexList = processIndexList.filter(index=>!removeIndexList.includes(index))\n      // console.log('processIndexList, removeIndexList, modifiedList',\n      //     processIndexList, removeIndexList, modifiedList)\n\n      return [modifiedList, removeIndexList];\n    } // ==========================[ INDIVIDUAL PORTAL MANAGEMENT ]============================\n    // used for size calculation in pareCacheToMax\n    // registers indexes when requested but before retrieved and entered into cache\n\n  }, {\n    key: \"registerRequestedPortal\",\n    value: function registerRequestedPortal(index) {\n      this.cacheProps.requestedMap.set(index, null);\n    }\n  }, {\n    key: \"removeRequestedPortal\",\n    value: function removeRequestedPortal(index) {\n      this.cacheProps.requestedMap[\"delete\"](index);\n    }\n  }, {\n    key: \"getNewCacheItemID\",\n    value: function getNewCacheItemID() {\n      return globalCacheItemID++;\n    }\n  }, {\n    key: \"getCacheItemID\",\n    value: function getCacheItemID(index) {\n      var indexMap = this.cacheProps.indexToItemIDMap;\n      var knownID = indexMap.get(index);\n      var knownHasValue = knownID !== null && knownID !== void 0 ? knownID : false; // deal with falsey 0\n\n      var newID = knownHasValue === false ? this.getNewCacheItemID() : null;\n      if (knownHasValue === false) indexMap.set(index, newID);\n      return knownID !== null && knownID !== void 0 ? knownID : newID;\n    }\n  }, {\n    key: \"createPortal\",\n    value: function createPortal(component, index, cacheItemID) {\n      this.removeRequestedPortal(index); // console.log('creating portal for index','-'+this.cacheProps.scrollerID+'-', index)\n\n      var portalNode = createPortalNode(index, cacheItemID); // console.log('creating InPortal node', '-'+this.cacheProps.scrollerID+'-', cacheItemID)\n\n      this.cacheProps.portalMap.set(cacheItemID, //index,\n      react_1[\"default\"].createElement(react_reverse_portal_1.InPortal, {\n        key: cacheItemID,\n        node: portalNode\n      }, \" \", component, \" \")); // <InPortal key = {index} node = {portalNode} > { content } </InPortal>)\n\n      this.cacheProps.modified = true;\n      var portalMetadata = {\n        portalNode: portalNode,\n        isReparentingRef: {\n          current: false\n        },\n        index: index,\n        cacheItemID: cacheItemID,\n        component: component\n      };\n      this.cacheProps.metadataMap.set(cacheItemID, portalMetadata);\n      this.cacheProps.indexToItemIDMap.set(index, cacheItemID);\n      this.renderPortalList();\n      return portalMetadata;\n    }\n  }, {\n    key: \"preloadItem\",\n    value: function preloadItem(index, getItem, cradlePassthroughPropertiesRef, preloadIndexCallback, scrollerID) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var cacheItemID, usercontent, content, scrollerData, portalData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cacheItemID = this.getCacheItemID(index);\n                _context.next = 3;\n                return getItem(index, cacheItemID);\n\n              case 3:\n                usercontent = _context.sent;\n\n                if (usercontent) {\n                  preloadIndexCallback && preloadIndexCallback(index, cacheItemID); // console.log('preloading index','-'+scrollerID+'-' ,index )\n\n                  scrollerData = {\n                    isReparentingRef: null,\n                    cradlePassthroughPropertiesRef: cradlePassthroughPropertiesRef\n                  };\n\n                  if (usercontent.props.hasOwnProperty('scrollerData')) {\n                    content = react_1[\"default\"].cloneElement(usercontent, {\n                      scrollerData: scrollerData\n                    });\n                  } else {\n                    content = usercontent;\n                  }\n\n                  portalData = this.createPortal(content, index, cacheItemID); // make available to user content\n\n                  scrollerData.isReparentingRef = portalData.isReparentingRef;\n                } else {\n                  preloadIndexCallback && preloadIndexCallback(index, cacheItemID, 'error');\n                  console.log('ERROR', 'no content item for preload index, cacheItemID', index, cacheItemID);\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    } // delete a portal list item\n    // accepts an array of indexes\n\n  }, {\n    key: \"deletePortal\",\n    value: function deletePortal(index, cacheDeleteListCallback) {\n      var indexArray;\n\n      if (!Array.isArray(index)) {\n        indexArray = [index];\n      } else {\n        indexArray = index;\n      }\n\n      var _this$cacheProps3 = this.cacheProps,\n          metadataMap = _this$cacheProps3.metadataMap,\n          portalMap = _this$cacheProps3.portalMap,\n          indexToItemIDMap = _this$cacheProps3.indexToItemIDMap;\n      var deleteList = [];\n\n      var _iterator6 = _createForOfIteratorHelper(indexArray),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var i = _step6.value;\n          var cacheItemID = indexToItemIDMap.get(i);\n          deleteList.push(cacheItemID);\n          metadataMap[\"delete\"](cacheItemID);\n          portalMap[\"delete\"](cacheItemID);\n          indexToItemIDMap[\"delete\"](i);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      this.cacheProps.modified = true;\n      cacheDeleteListCallback && cacheDeleteListCallback(deleteList);\n    } // query existence of a portal list item\n\n  }, {\n    key: \"hasPortal\",\n    value: function hasPortal(cacheItemID) {\n      return this.cacheProps.metadataMap.has(cacheItemID);\n    }\n  }, {\n    key: \"getPortal\",\n    value: function getPortal(cacheItemID) {\n      if (this.hasPortal(cacheItemID)) {\n        return this.cacheProps.metadataMap.get(cacheItemID);\n      }\n    }\n  }]);\n\n  return CacheHandler;\n}();\n\nexports.CacheHandler = CacheHandler; // ==========================[ Utility function ]============================\n// get a react-reverse-portal InPortal component, with its metadata\n// with user content and container\n\nvar createPortalNode = function createPortalNode(index, cacheItemID) {\n  var portalNode = (0, react_reverse_portal_1.createHtmlPortalNode)();\n  var container = portalNode.element;\n  container.style.inset = '0px';\n  container.style.position = 'absolute'; // container.style.height = '100%'\n  // container.style.width = '100%'\n\n  container.dataset.type = 'contentenvelope';\n  container.dataset.index = index;\n  container.dataset.cacheitemid = cacheItemID;\n  return portalNode;\n}; // ========================[ Utility component ]==============================\n// portal list component for rapid relisting of updates, using external callback for set state\n\n\nvar PortalList = function PortalList(_ref) {\n  var cacheProps = _ref.cacheProps;\n\n  // console.log('running PORTALLIST', '-'+cacheProps.scrollerID+'-')\n  var _ref2 = (0, react_1.useState)(null),\n      _ref3 = _slicedToArray(_ref2, 2),\n      portalList = _ref3[0],\n      setPortalList = _ref3[1];\n\n  var isMountedRef = (0, react_1.useRef)(true);\n  (0, react_1.useEffect)(function () {\n    cacheProps.setListState = function () {\n      isMountedRef.current && setPortalList(cacheProps.portalList);\n    };\n\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  return portalList;\n};\n\nexports.PortalList = PortalList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL2NhY2hlaGFuZGxlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7Ozs7K0NBQUEsb0o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7O0FBS0E7O0FBR0E7O0FBRUEsSUFBTUEsa0JBQWtCLEdBQUcsR0FBM0I7QUFFQSxJQUFJQyxpQkFBaUIsR0FBRyxDQUF4QixDLENBR0E7QUFDQTs7SUFDYUMsWTtFQUVULHNCQUFZQyxVQUFaLEVBQXdCQyxXQUF4QixFQUFxQ0MsV0FBckMsRUFBZ0Q7SUFBQTs7SUFBQTs7SUFNaEQsa0JBQWE7TUFDVEMsWUFBWSxFQUFDLElBREo7TUFFVEMsUUFBUSxFQUFDLEtBRkE7TUFJVEMsV0FBVyxFQUFDLElBQUlDLEdBQUosRUFKSDtNQUtUQyxZQUFZLEVBQUUsSUFBSUQsR0FBSixFQUxMO01BTVRFLFNBQVMsRUFBQyxJQUFJRixHQUFKLEVBTkQ7TUFPVEcsZ0JBQWdCLEVBQUMsSUFBSUgsR0FBSixFQVBSO01BU1RJLFVBQVUsRUFBQyxJQVRGO01BV1RWLFVBQVUsRUFBQztJQVhGLENBQWIsQ0FOZ0QsQ0F3QmhEOztJQUVBLHNCQUFpQixVQUFDVyxXQUFELEVBQWNDLHVCQUFkLEVBQXlDO01BQ3RELEtBQUksQ0FBQ1gsV0FBTCxDQUFpQlUsV0FBakIsRUFEc0QsQ0FFdEQ7OztNQUNBLElBQU1FLGVBQWUsR0FBRyxLQUFJLENBQUNDLFVBQUwsQ0FBZ0JMLGdCQUF4QztNQUNBLElBQU1NLE9BQU8sR0FBR0MsS0FBSyxDQUFDQyxJQUFOLENBQVdKLGVBQWUsQ0FBQ0ssSUFBaEIsRUFBWCxDQUFoQjtNQUNBSCxPQUFPLENBQUNJLElBQVIsQ0FBYSxVQUFDQyxDQUFELEVBQUdDLENBQUg7UUFBQSxPQUFTRCxDQUFDLEdBQUdDLENBQWI7TUFBQSxDQUFiO01BQ0EsSUFBTUMsWUFB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QSxVQUFhLE9BQW1CO0VBQUEsSUFBaEI3SSxVQUFnQixRQUFoQkEsVUFBZ0I7O0VBRXpDO0VBRUEsWUFBb0Msc0JBQVMsSUFBVCxDQUFwQztFQUFBO0VBQUEsSUFBT0osVUFBUDtFQUFBLElBQW1Ca0osYUFBbkI7O0VBQ0EsSUFBTW5GLFlBQVksR0FBRyxvQkFBTyxJQUFQLENBQXJCO0VBRUEsdUJBQVUsWUFBSTtJQUVWM0QsVUFBVSxDQUFDWCxZQUFYLEdBQTBCLFlBQUk7TUFFMUJzRSxZQUFZLENBQUNWLE9BQWIsSUFBd0I2RixhQUFhLENBQUM5SSxVQUFVLENBQUNKLFVBQVosQ0FBckM7SUFFSCxDQUpEOztJQU1BLE9BQU8sWUFBSztNQUFFK0QsWUFBWSxDQUFDVixPQUFiLEdBQXVCLEtBQXZCO0lBQTZCLENBQTNDO0VBRUgsQ0FWRCxFQVVFLEVBVkY7RUFZQSxPQUFPckQsVUFBUDtBQUNILENBcEJNOztBQUFNd0ksa0JBQUFBLEdBQVVTLFVBQVYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vc3JjL2NyYWRsZS9jYWNoZWhhbmRsZXIudHN4PzllOWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcG9ydGFsaGFuZGxlci50c3hcblxuLypcbiAgICBUaGUgaW5maW5pdGUgbGlzdCBzY3JvbGxlciBzdG9yZXMgdXNlciBjZWxsIGRhdGEgaW4gYSBjZW50cmFsIGhpZGRlbiBwb3J0YWwgY2FjaGUgZm9yIGVhY2hcbiAgICBpbmZpbml0ZWdyaWRzY3JvbGxlciByb290LCBmcm9tIHdoZW5jZSB0aGUgZGF0YSBpcyBwdWxsZWQgaW50byB0aGUgcmVsZXZhbnQgQ2VsbEZyYW1lIGZvciBkaXNwbGF5XG4qL1xuXG5pbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWZ9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcblxuaW1wb3J0IHsgY3JlYXRlSHRtbFBvcnRhbE5vZGUsIEluUG9ydGFsIH0gZnJvbSAncmVhY3QtcmV2ZXJzZS1wb3J0YWwnXG5cbmNvbnN0IE1BWF9DQUNIRV9PVkVSX1JVTiA9IDEuNVxuXG5sZXQgZ2xvYmFsQ2FjaGVJdGVtSUQgPSAwXG5cblxuLy8gZ2xvYmFsIHNjcm9sbGVyIGRhdGEsIG9yZ2FuaXplZCBieSBzZXNzaW9uIHNjcm9sbGVySURcbi8vIHRoZSBjYWNoZSBpdHNlbGYgaXMgbWFpbnRhaW5lZCBpbiB0aGUgcm9vdCBpbmZpbml0ZWdyaWRzY3JvbGxlciBjb21wb25lbnRcbmV4cG9ydCBjbGFzcyBDYWNoZUhhbmRsZXIge1xuXG4gICAgY29uc3RydWN0b3Ioc2Nyb2xsZXJJRCwgc2V0TGlzdHNpemUsIGxpc3RzaXplUmVmKSB7XG4gICAgICAgIHRoaXMuY2FjaGVQcm9wcy5zY3JvbGxlcklEID0gc2Nyb2xsZXJJRFxuICAgICAgICB0aGlzLnNldExpc3RzaXplID0gc2V0TGlzdHNpemUgLy8gcGFzc2VkIGZyb20gaW5maW5pdGVncmlkc2Nyb2xsZXIgc2V0TGlzdHNpemUobGlzdHNpemUpXG4gICAgICAgIHRoaXMubGlzdHNpemVSZWYgPSBsaXN0c2l6ZVJlZlxuICAgIH1cblxuICAgIGNhY2hlUHJvcHMgPSB7XG4gICAgICAgIHNldExpc3RTdGF0ZTpudWxsLFxuICAgICAgICBtb2RpZmllZDpmYWxzZSxcblxuICAgICAgICBtZXRhZGF0YU1hcDpuZXcgTWFwKCksXG4gICAgICAgIHJlcXVlc3RlZE1hcDogbmV3IE1hcCgpLCAvLyBzb21lIHBvcnRhbHMgbWF5IGhhdmUgYmVlbiByZXF1ZXN0ZWQgYnkgcmVxdWVzdGlkbGVjYWxsYmFjaywgbm90IHlldCBjcmVhdGVkXG4gICAgICAgIHBvcnRhbE1hcDpuZXcgTWFwKCksXG4gICAgICAgIGluZGV4VG9JdGVtSURNYXA6bmV3IE1hcCgpLFxuXG4gICAgICAgIHBvcnRhbExpc3Q6bnVsbCxcblxuICAgICAgICBzY3JvbGxlcklEOm51bGxcbiAgICB9XG5cbiAgICBsaXN0c2l6ZVJlZlxuXG4gICAgc2V0TGlzdHNpemUgLy8gc2V0TGlzdHNpemUobGlzdHNpemUpIGdlbmVyYXRlcyBpbmZpbml0ZXNjcm9sbGVyIHVzZVN0YXRlIHVwZGF0ZSBsaXN0c2l6ZSB0aHJvdWdob3V0XG5cbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PVsgUkVQT1NJVE9SWSBBTkQgTElTVCBNQU5BR0VNRU5UIF09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICBjaGFuZ2VMaXN0c2l6ZSA9IChuZXdsaXN0c2l6ZSwgY2FjaGVEZWxldGVMaXN0Q2FsbGJhY2spID0+IHtcbiAgICAgICAgdGhpcy5zZXRMaXN0c2l6ZShuZXdsaXN0c2l6ZSlcbiAgICAgICAgLy8gbWF0Y2ggY2FjaGUgdG8gbmV3bGlzdHNpemVcbiAgICAgICAgY29uc3QgcG9ydGFsSW5kZXhMaXN0ID0gdGhpcy5jYWNoZVByb3BzLmluZGV4VG9JdGVtSURNYXBcbiAgICAgICAgY29uc3QgbWFwa2V5cyA9IEFycmF5LmZyb20ocG9ydGFsSW5kZXhMaXN0LmtleXMoKSlcbiAgICAgICAgbWFwa2V5cy5zb3J0KChhLGIpID0+IGEgLSBiKVxuICAgICAgICBjb25zdCBoaWdoZXN0aW5kZXggPSBtYXBrZXlzLmF0KC0xKVxuICAgICAgICBpZiAoaGlnaGVzdGluZGV4ID4gKG5ld2xpc3RzaXplIC0xKSkgeyAvLyBwYXJlIHRoZSBjYWNoZVxuICAgICAgICAgICAgY29uc3QgcGFyZWxpc3QgPSBtYXBrZXlzLmZpbHRlcigoaXRlbSk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbSA+IChuZXdsaXN0c2l6ZSAtMSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLmRlbGV0ZVBvcnRhbChwYXJlbGlzdCwgY2FjaGVEZWxldGVMaXN0Q2FsbGJhY2spXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhckNhY2hlID0gKCkgPT4ge1xuXG4gICAgICAgIC8vIGtlZXAgdGhlIHNldExpc3RTdGF0ZSBjYWxsYmFja1xuICAgICAgICB0aGlzLmNhY2hlUHJvcHMucG9ydGFsTWFwLmNsZWFyKCkgXG4gICAgICAgIHRoaXMuY2FjaGVQcm9wcy5tZXRhZGF0YU1hcC5jbGVhcigpXG4gICAgICAgIHRoaXMuY2FjaGVQcm9wcy5pbmRleFRvSXRlbUlETWFwLmNsZWFyKClcbiAgICAgICAgdGhpcy5jYWNoZVByb3BzLnJlcXVlc3RlZE1hcC5jbGVhcigpXG4gICAgICAgIHRoaXMuY2FjaGVQcm9wcy5wb3J0YWxMaXN0ID0gbnVsbFxuICAgICAgICB0aGlzLmNhY2hlUHJvcHMubW9kaWZpZWQgPSBmYWxzZVxuXG4gICAgICAgIHRoaXMuY2FjaGVQcm9wcy5zZXRMaXN0U3RhdGUoKSAvLyB0cmlnZ2VyIGRpc3BsYXkgdXBkYXRlXG5cbiAgICB9XG5cbiAgICAvLyBzZXQgc3RhdGUgb2YgdGhlIFBvcnRhbExpc3QgY29tcG9uZW50IG9mIHRoZSBzY3JvbGxlciB0byB0cmlnZ2VyIHJlbmRlclxuICAgIHJlbmRlclBvcnRhbExpc3QgPSAoKSA9PiB7XG5cbiAgICAgICAgaWYgKHRoaXMuY2FjaGVQcm9wcy5tb2RpZmllZCkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVByb3BzLnBvcnRhbExpc3QgPSBBcnJheS5mcm9tKHRoaXMuY2FjaGVQcm9wcy5wb3J0YWxNYXAudmFsdWVzKCkpXG4gICAgICAgICAgICB0aGlzLmNhY2hlUHJvcHMubW9kaWZpZWQgPSBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWNoZVByb3BzLnNldExpc3RTdGF0ZSgpIC8vIHRyaWdnZXIgZGlzcGxheSB1cGRhdGVcblxuICAgIH1cblxuICAgIG1hdGNoQ2FjaGVUb0NyYWRsZSA9IChtb2RlbEluZGV4TGlzdCwgY2FjaGVEZWxldGVMaXN0Q2FsbGJhY2spID0+IHtcblxuICAgICAgICBjb25zdCBtYXBrZXlzID0gQXJyYXkuZnJvbSh0aGlzLmNhY2hlUHJvcHMuaW5kZXhUb0l0ZW1JRE1hcC5rZXlzKCkpXG5cbiAgICAgICAgbWFwa2V5cy5maWx0ZXIoa2V5ID0+ICFtb2RlbEluZGV4TGlzdC5pbmNsdWRlcyhrZXkpKVxuXG4gICAgICAgIHRoaXMuZGVsZXRlUG9ydGFsKG1hcGtleXMsIGNhY2hlRGVsZXRlTGlzdENhbGxiYWNrKVxuXG4gICAgfVxuXG4gICAgcGFyZUNhY2hlVG9NYXggPSAoY2FjaGVNYXgsIG1vZGVsSW5kZXhMaXN0LCBjYWNoZURlbGV0ZUxpc3RDYWxsYmFjaykgPT4ge1xuXG4gICAgICAgIGNvbnN0IG1vZGVsTGVuZ3RoID0gbW9kZWxJbmRleExpc3QubGVuZ3RoXG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIG5lZWQgZm9yIHBhcmluZ1xuICAgICAgICBpZiAoKCFjYWNoZU1heCkgfHwgKCFtb2RlbExlbmd0aCkpIHJldHVybiBmYWxzZVxuXG4gICAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KG1vZGVsTGVuZ3RoLCBjYWNoZU1heClcblxuICAgICAgICBjb25zdCBwb3J0YWxJbmRleExpc3QgPSB0aGlzLmNhY2hlUHJvcHMuaW5kZXhUb0l0ZW1JRE1hcFxuICAgICAgICBjb25zdCByZXF1ZXN0ZWRNYXAgPSB0aGlzLmNhY2hlUHJvcHMucmVxdWVzdGVkTWFwXG5cbiAgICAgICAgLy8gaWYgKChwb3J0YWxNYXBMaXN0LnNpemUgKyByZXF1ZXN0ZWRNYXAuc2l6ZSkgPD0gbWF4KSByZXR1cm4gZmFsc2VcbiAgICAgICAgaWYgKChwb3J0YWxJbmRleExpc3Quc2l6ZSArIHJlcXVlc3RlZE1hcC5zaXplKSA8PSBtYXgpIHJldHVybiBmYWxzZVxuXG4gICAgICAgIC8vIHNvcnQgdGhlIG1hcCBrZXlzXG4gICAgICAgIGNvbnN0IG1hcGtleXNsaXN0ID0gQXJyYXkuZnJvbShwb3J0YWxJbmRleExpc3Qua2V5cygpKVxuICAgICAgICBjb25zdCByZXF1ZXN0ZWRrZXlzID0gQXJyYXkuZnJvbShyZXF1ZXN0ZWRNYXAua2V5cygpKVxuXG4gICAgICAgIGNvbnN0IG1hcGtleXMgPSBtYXBrZXlzbGlzdC5jb25jYXQocmVxdWVzdGVka2V5cylcblxuICAgICAgICBtYXBrZXlzLnNvcnQoKGEsYikgPT4gYSAtIGIpXG5cbiAgICAgICAgLy8gZ2V0IG51bWJlciB0byBwYXJlXG4gICAgICAgIGNvbnN0IG1hcExlbmd0aCA9IG1hcGtleXMubGVuZ3RoXG4gICAgICAgIGNvbnN0IHBhcmVjb3VudCA9IG1hcExlbmd0aCAtIG1heFxuXG4gICAgICAgIC8vIGRpc3RyaWJ1dGUgcGFyaW5nIHByb3BvcnRpb25hbGx5IGF0IGZyb250IGFuZCBiYWNrXG4gICAgICAgIGNvbnN0IGhlYWRpbmRleCA9IG1vZGVsSW5kZXhMaXN0WzBdXG4gICAgICAgIGNvbnN0IHRhaWxpbmRleCA9IG1vZGVsSW5kZXhMaXN0W21vZGVsTGVuZ3RoIC0gMV1cbiAgICAgICAgY29uc3QgaGVhZHBvcyA9IG1hcGtleXMuaW5kZXhPZihoZWFkaW5kZXgpXG4gICAgICAgIGNvbnN0IHRhaWxwb3MgPSBtYXBrZXlzLmluZGV4T2YodGFpbGluZGV4KVxuXG4gICAgICAgIGNvbnN0IGhlYWRyb29tID0gaGVhZHBvc1xuICAgICAgICBjb25zdCB0YWlscm9vbSA9IG1hcExlbmd0aCAtICh0YWlscG9zICsgMSlcbiAgICAgICAgY29uc3QgcGFyZXJvb20gPSBoZWFkcm9vbSArIHRhaWxyb29tXG5cbiAgICAgICAgY29uc3QgaGVhZHBhcmVjb3VudCA9IE1hdGguZmxvb3IoKGhlYWRyb29tL3BhcmVyb29tKSpwYXJlY291bnQpXG4gICAgICAgIGNvbnN0IHRhaWxwYXJlY291bnQgPSBwYXJlY291bnQgLSBoZWFkcGFyZWNvdW50XG5cbiAgICAgICAgLy8gY29sbGVjdCBpbmRleGVzIHRvIHBhcmVcbiAgICAgICAgY29uc3QgaGVhZGxpc3QgPSBtYXBrZXlzLnNsaWNlKDAsaGVhZHBhcmVjb3VudClcbiAgICAgICAgY29uc3QgdGFpbGxpc3QgPSBtYXBrZXlzLnNsaWNlKG1hcExlbmd0aCAtIHRhaWxwYXJlY291bnQpXG5cbiAgICAgICAgY29uc3QgZGVsTGlzdCA9IGhlYWRsaXN0LmNvbmNhdCh0YWlsbGlzdClcblxuICAgICAgICB0aGlzLmRlbGV0ZVBvcnRhbChkZWxMaXN0LCBjYWNoZURlbGV0ZUxpc3RDYWxsYmFjaylcblxuICAgICAgICByZXR1cm4gdHJ1ZVxuXG4gICAgfVxuXG4gICAgZ3VhcmRBZ2FpbnN0UnVuYXdheUNhY2hpbmcgPSAoY2FjaGVNYXgsIG1vZGVsTGVuZ3RoKSA9PiB7XG5cbiAgICAgICAgaWYgKCFjYWNoZU1heCkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgY29uc3QgcG9ydGFsTWFwID0gdGhpcy5jYWNoZVByb3BzLnBvcnRhbE1hcFxuICAgICAgICBjb25zdCByZXF1ZXN0ZWRNYXAgPSB0aGlzLmNhY2hlUHJvcHMucmVxdWVzdGVkTWFwXG5cbiAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgobW9kZWxMZW5ndGgsIGNhY2hlTWF4KVxuXG4gICAgICAgIGlmICgocG9ydGFsTWFwLnNpemUgKyByZXF1ZXN0ZWRNYXAuc2l6ZSkgPD0gKChtYXgpICogTUFYX0NBQ0hFX09WRVJfUlVOKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwcmVsb2FkKGNyYWRsZVBhcmFtZXRlcnMsIGNhbGxiYWNrLCBzY3JvbGxlcklEKSB7XG5cbiAgICAgICAgY29uc3QgeyBjcmFkbGVQYXNzdGhyb3VnaFByb3BlcnRpZXNSZWYgfSA9IGNyYWRsZVBhcmFtZXRlcnNcbiAgICAgICAgY29uc3QgeyBzdGF0ZUhhbmRsZXIsIHNlcnZpY2VIYW5kbGVyIH0gPSBjcmFkbGVQYXJhbWV0ZXJzLmhhbmRsZXJzUmVmLmN1cnJlbnRcblxuICAgICAgICBjb25zdCBjcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzID0gY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmLmN1cnJlbnRcbiAgICAgICAgY29uc3QgY3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzID0gY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbnRlcm5hbFByb3BlcnRpZXNSZWYuY3VycmVudFxuICAgICAgICBjb25zdCB7IGdldEl0ZW0gfSA9IGNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXNcbiAgICAgICAgY29uc3QgeyBsaXN0c2l6ZSB9ID0gY3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzXG5cbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXVxuXG4gICAgICAgIGlmIChzdGF0ZUhhbmRsZXIuaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0c2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3ByZWxvYWRpbmcnLGkpXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJlbG9hZEl0ZW0oXG4gICAgICAgICAgICAgICAgICAgIGksIFxuICAgICAgICAgICAgICAgICAgICBnZXRJdGVtLCBcbiAgICAgICAgICAgICAgICAgICAgY3JhZGxlUGFzc3Rocm91Z2hQcm9wZXJ0aWVzUmVmLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlSGFuZGxlci5jYWxsYmFja3MucHJlbG9hZEluZGV4Q2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbGVySURcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChwcm9taXNlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oXG4gICAgICAgICAgICAoKT0+e1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZmluaXNoZWQgcHJlbG9hZGluZ1wiLCctJytzY3JvbGxlcklEKyctJywrdGhpcy5jYWNoZVByb3BzLnBvcnRhbE1hcC5zaXplKVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuXG4gICAgfVxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVsgU05BUFNIT1RTIF09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICBnZXRDYWNoZU1hcCgpIHtcblxuICAgICAgICByZXR1cm4gbmV3IE1hcCh0aGlzLmNhY2hlUHJvcHMuaW5kZXhUb0l0ZW1JRE1hcClcblxuICAgIH1cblxuICAgIGdldENyYWRsZU1hcChtb2RlbEluZGV4TGlzdCkge1xuXG4gICAgICAgIGNvbnN0IGNyYWRsZU1hcCA9IG5ldyBNYXAoKVxuICAgICAgICBjb25zdCB7IGluZGV4VG9JdGVtSURNYXAgfSA9IHRoaXMuY2FjaGVQcm9wc1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIG1vZGVsSW5kZXhMaXN0KSB7XG5cbiAgICAgICAgICAgIGNyYWRsZU1hcC5zZXQoaW5kZXgsIGluZGV4VG9JdGVtSURNYXAuZ2V0KGluZGV4KSlcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyYWRsZU1hcFxuXG4gICAgfVxuXG4gICAgZ2V0Q2FjaGVMaXN0KCkge1xuXG4gICAgICAgIGNvbnN0IGNhY2hlbGlzdCA9IG5ldyBNYXAoKVxuXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRoaXMuY2FjaGVQcm9wcy5tZXRhZGF0YU1hcCkge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgICAgIH0gPSB2YWx1ZVxuXG4gICAgICAgICAgICBjYWNoZWxpc3Quc2V0KGtleSx7XG4gICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50LFxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhY2hlbGlzdFxuXG4gICAgfVxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1bIFNFUlZJQ0UgU1VQUE9SVCBdPT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIFxuICAgIC8vIFRPRE8gaW1wbGVtZW50IGhpZ2hyYW5nZSBsb2dpY1xuICAgIG1vdmVJbmRleCh0b2luZGV4LCBmcm9taW5kZXgsIGhpZ2hyYW5nZSApIHtcblxuICAgICAgICBpZiAoZnJvbWluZGV4ID09IHRvaW5kZXgpIHJldHVybiBbXVxuXG4gICAgICAgIGNvbnN0IHtpbmRleFRvSXRlbUlETWFwLG1ldGFkYXRhTWFwfSA9IHRoaXMuY2FjaGVQcm9wc1xuXG4gICAgICAgIGlmICghKGluZGV4VG9JdGVtSURNYXAuaGFzKGZyb21pbmRleCkgJiYgaW5kZXhUb0l0ZW1JRE1hcC5oYXModG9pbmRleCkpKSByZXR1cm5cblxuICAgICAgICBjb25zdCBzaGlmdGluZ2luZGV4ID0gZnJvbWluZGV4XG4gICAgICAgIGNvbnN0IHNoaWZ0aW5nY2FjaGVJdGVtSUQgPSBpbmRleFRvSXRlbUlETWFwLmdldChzaGlmdGluZ2luZGV4KVxuXG4gICAgICAgIGNvbnN0IHNoaWZ0aW5jcmVtZW50ID0gXG4gICAgICAgICAgICAoZnJvbWluZGV4IDwgdG9pbmRleCk/IFxuICAgICAgICAgICAgICAgIC0xOiAvLyBpbmNyZW1lbnQgZG93biwgbWFrZSByb29tIGZvciBzaGlmdGluZ2luZGV4IGF0IHRvcFxuICAgICAgICAgICAgICAgIDEgICAvLyBpbmNyZW1lbnQgdXAsIG1ha2Ugcm9vbSBmb3Igc2hpZnRpbmdpbmRleCBhdCBib3R0b21cblxuICAgICAgICBjb25zdCBzdGFydGluZGV4ID0gXG4gICAgICAgICAgICAoc2hpZnRpbmNyZW1lbnQgPT0gLTEpP1xuICAgICAgICAgICAgICAgIGZyb21pbmRleDpcbiAgICAgICAgICAgICAgICB0b2luZGV4XG5cbiAgICAgICAgY29uc3QgZW5kaW5kZXggPSBcbiAgICAgICAgICAgIChzaGlmdGluY3JlbWVudCA9PSAtMSk/XG4gICAgICAgICAgICAgICAgdG9pbmRleDpcbiAgICAgICAgICAgICAgICBmcm9taW5kZXhcblxuICAgICAgICBjb25zdCBzbGljZWluY3JlbWVudCA9IFxuICAgICAgICAgICAgKHNoaWZ0aW5jcmVtZW50ID09IC0xKT9cbiAgICAgICAgICAgIDE6XG4gICAgICAgICAgICAwXG5cbiAgICAgICAgY29uc3Qgb3JkZXJlZGluZGV4bGlzdCA9IEFycmF5LmZyb20oaW5kZXhUb0l0ZW1JRE1hcC5rZXlzKCkpXG4gICAgICAgIG9yZGVyZWRpbmRleGxpc3Quc29ydCgoYSxiKT0+YS1iKVxuICAgICAgICBjb25zdCB0b3Byb2Nlc3NsaXN0ID0gb3JkZXJlZGluZGV4bGlzdC5zbGljZShcbiAgICAgICAgICAgIG9yZGVyZWRpbmRleGxpc3QuaW5kZXhPZihzdGFydGluZGV4KSArIHNsaWNlaW5jcmVtZW50LFxuICAgICAgICAgICAgb3JkZXJlZGluZGV4bGlzdC5pbmRleE9mKGVuZGluZGV4KSArIHNsaWNlaW5jcmVtZW50XG4gICAgICAgIClcblxuICAgICAgICBpZiAoc2hpZnRpbmNyZW1lbnQgPT0gMSkgdG9wcm9jZXNzbGlzdC5yZXZlcnNlKClcblxuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIHRvcHJvY2Vzc2xpc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlSXRlbUlEID0gaW5kZXhUb0l0ZW1JRE1hcC5nZXQoaW5kZXgpXG4gICAgICAgICAgICBjb25zdCBuZXdJbmRleCA9IGluZGV4ICsgc2hpZnRpbmNyZW1lbnRcbiAgICAgICAgICAgIGluZGV4VG9JdGVtSURNYXAuc2V0KG5ld0luZGV4LGNhY2hlSXRlbUlEKVxuICAgICAgICAgICAgbWV0YWRhdGFNYXAuZ2V0KGNhY2hlSXRlbUlEKS5pbmRleCA9IG5ld0luZGV4XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleFRvSXRlbUlETWFwLnNldCh0b2luZGV4LHNoaWZ0aW5nY2FjaGVJdGVtSUQpXG4gICAgICAgIG1ldGFkYXRhTWFwLmdldChzaGlmdGluZ2NhY2hlSXRlbUlEKS5pbmRleCA9IHRvaW5kZXhcblxuICAgICAgICBjb25zdCBwcm9jZXNzZWRsaXN0ID0gdG9wcm9jZXNzbGlzdC5jb25jYXQoW2Zyb21pbmRleF0pXG5cbiAgICAgICAgcmV0dXJuIHByb2Nlc3NlZGxpc3RcblxuICAgIH1cblxuICAgIGluY3JlbWVudEZyb21JbmRleChpbmRleCwgaGlnaHJhbmdlLCBpbmNyZW1lbnQpIHsgLy8gaW5jcmVtZW50IGlzICsxIG9yIC0xXG5cbiAgICAgICAgaGlnaHJhbmdlID0gaGlnaHJhbmdlID8/IDBcblxuICAgICAgICBoaWdocmFuZ2UgPSBcbiAgICAgICAgICAgIChoaWdocmFuZ2UgPiBpbmRleCk/XG4gICAgICAgICAgICAgICAgaGlnaHJhbmdlOlxuICAgICAgICAgICAgICAgIGluZGV4XG5cbiAgICAgICAgY29uc3QgcmFuZ2Vjb3VudCA9IGhpZ2hyYW5nZSAtIGluZGV4ICsgMVxuXG4gICAgICAgIGNvbnN0IHJhbmdlaW5jcmVtZW50ID0gcmFuZ2Vjb3VudCAqIGluY3JlbWVudFxuXG4gICAgICAgIGNvbnN0IHsgaW5kZXhUb0l0ZW1JRE1hcCwgbWV0YWRhdGFNYXAgfSA9IHRoaXMuY2FjaGVQcm9wc1xuXG4gICAgICAgIGNvbnN0IG9yZGVyZWRpbmRleGxpc3QgPSBBcnJheS5mcm9tKGluZGV4VG9JdGVtSURNYXAua2V5cygpKVxuICAgICAgICBvcmRlcmVkaW5kZXhsaXN0LnNvcnQoKGEsYik9PmEtYilcblxuICAgICAgICAvLyBjb25zb2xlLmxvZygnb3JkZXJlZGluZGV4bGlzdCBsZW5ndGgnLG9yZGVyZWRpbmRleGxpc3QubGVuZ3RoLCBvcmRlcmVkaW5kZXhsaXN0KVxuXG4gICAgICAgIC8vIHByb3ZpZGVzIHZhbHVlIGZvciBzbGljZSBhYm92ZSB0aGUgcmFuZ2VcbiAgICAgICAgbGV0IHB0ciA9IG9yZGVyZWRpbmRleGxpc3QuZmluZEluZGV4KCh2YWx1ZSk9PiB2YWx1ZSA+PSBoaWdocmFuZ2UpXG5cbiAgICAgICAgaWYgKHB0ciA9PSAtMSkge1xuICAgICAgICAgICAgcHRyID0gb3JkZXJlZGluZGV4bGlzdC5sZW5ndGggLSAxXG4gICAgICAgICAgICBoaWdocmFuZ2UgPSBvcmRlcmVkaW5kZXhsaXN0LmF0KHB0cilcbiAgICAgICAgICAgIGlmIChoaWdocmFuZ2UgPCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gb2J0YWluIHNsaWNlIGFib3ZlIHRoZSBoaWdodmFsdWVyYW5nZVxuICAgICAgICBjb25zdCBwcm9jZXNzSW5kZXhMaXN0ID0gXG4gICAgICAgICAgICAoaW5jcmVtZW50ID09IDEpP1xuICAgICAgICAgICAgICAgIG9yZGVyZWRpbmRleGxpc3Quc2xpY2UoaW5kZXgpOlxuICAgICAgICAgICAgICAgIG9yZGVyZWRpbmRleGxpc3Quc2xpY2UoaGlnaHJhbmdlICsgMSlcbiAgICAgICAgY29uc3QgaW5kZXhlc3RvcmVtb3ZlID0gXG4gICAgICAgICAgICAoaW5jcmVtZW50ID09IDEpP1xuICAgICAgICAgICAgb3JkZXJlZGluZGV4bGlzdC5zbGljZShpbmRleCwgcHRyICsgMSk6XG4gICAgICAgICAgICBvcmRlcmVkaW5kZXhsaXN0LnNsaWNlKHJhbmdlaW5jcmVtZW50KVxuICAgICAgICBjb25zdCBjYWNoZUl0ZW1zVG9SZW1vdmVNYXAgPSBuZXcgTWFwKClcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBpbmRleGVzdG9yZW1vdmUpIHtcbiAgICAgICAgICAgIGNhY2hlSXRlbXNUb1JlbW92ZU1hcC5zZXQoaW5kZXgsaW5kZXhUb0l0ZW1JRE1hcC5nZXQoaW5kZXgpKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVtb3ZlSW5kZXhMaXN0ID0gQXJyYXkuZnJvbShjYWNoZUl0ZW1zVG9SZW1vdmVNYXAua2V5cygpKVxuXG4gICAgICAgIGlmIChpbmNyZW1lbnQgPT0gMSkgcHJvY2Vzc0luZGV4TGlzdC5yZXZlcnNlKClcblxuICAgICAgICAvLyBjb25zb2xlLmxvZygnY2FjaGUgaXRlbXMgaW5kZXgsIGhpZ2hyYW5nZSwgaW5jcmVtZW50LCByYW5nZWluY3JlbWVudCwgaW5kZXhlcyB0byBwcm9jZXNzLCByZW1vdmUnLCBcbiAgICAgICAgLy8gICAgIGluZGV4LCBoaWdocmFuZ2UsIGluY3JlbWVudCwgcmFuZ2VpbmNyZW1lbnQsIHByb2Nlc3NJbmRleExpc3QsIGNhY2hlSXRlbXNUb1JlbW92ZU1hcClcblxuICAgICAgICBjb25zb2xlLmxvZygnaW5jcmVtZW50RnJvbUluZGV4OiBtZXRhZGF0YU1hcCBCRUZPUkVcXG4nLCBuZXcgTWFwKG1ldGFkYXRhTWFwKSlcbiAgICAgICAgY29uc3QgbW9kaWZpZWRMaXN0ID0gW11cbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBwcm9jZXNzSW5kZXhMaXN0KSB7XG4gICAgICAgICAgICBjb25zdCBjYWNoZUl0ZW1JRCA9IGluZGV4VG9JdGVtSURNYXAuZ2V0KGluZGV4KVxuICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSBpbmRleCArIHJhbmdlaW5jcmVtZW50XG4gICAgICAgICAgICBpbmRleFRvSXRlbUlETWFwLnNldChuZXdJbmRleCwgY2FjaGVJdGVtSUQpXG4gICAgICAgICAgICBtZXRhZGF0YU1hcC5nZXQoY2FjaGVJdGVtSUQpLmluZGV4ID0gbmV3SW5kZXhcbiAgICAgICAgICAgIG1vZGlmaWVkTGlzdC5wdXNoKG5ld0luZGV4KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVsZXRlIHJlbWFpbmluZyBkdXBsaWNhdGVzXG4gICAgICAgIGNhY2hlSXRlbXNUb1JlbW92ZU1hcC5mb3JFYWNoKChpbmRleCwgY2FjaGVJdGVtSUQpID0+e1xuXG4gICAgICAgICAgICBpbmRleFRvSXRlbUlETWFwLmRlbGV0ZShpbmRleClcbiAgICAgICAgICAgIGlmIChpbmNyZW1lbnQgPT0gLTEpIG1ldGFkYXRhTWFwLmRlbGV0ZShjYWNoZUl0ZW1JRClcblxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCdpbmNyZW1lbnRGcm9tSW5kZXg6IGluZGV4VG9JdGVtSURNYXAsIG1ldGFkYXRhTWFwIEFGVEVSXFxuJywgaW5kZXhUb0l0ZW1JRE1hcCwgbmV3IE1hcChtZXRhZGF0YU1hcCkpXG5cbiAgICAgICAgLy8gY29uc3QgY2hhbmdlSW5kZXhMaXN0ID0gcHJvY2Vzc0luZGV4TGlzdC5maWx0ZXIoaW5kZXg9PiFyZW1vdmVJbmRleExpc3QuaW5jbHVkZXMoaW5kZXgpKVxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdwcm9jZXNzSW5kZXhMaXN0LCByZW1vdmVJbmRleExpc3QsIG1vZGlmaWVkTGlzdCcsXG4gICAgICAgIC8vICAgICBwcm9jZXNzSW5kZXhMaXN0LCByZW1vdmVJbmRleExpc3QsIG1vZGlmaWVkTGlzdClcblxuICAgICAgICByZXR1cm4gW21vZGlmaWVkTGlzdCwgcmVtb3ZlSW5kZXhMaXN0XVxuXG4gICAgfVxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1bIElORElWSURVQUwgUE9SVEFMIE1BTkFHRU1FTlQgXT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIC8vIHVzZWQgZm9yIHNpemUgY2FsY3VsYXRpb24gaW4gcGFyZUNhY2hlVG9NYXhcbiAgICAvLyByZWdpc3RlcnMgaW5kZXhlcyB3aGVuIHJlcXVlc3RlZCBidXQgYmVmb3JlIHJldHJpZXZlZCBhbmQgZW50ZXJlZCBpbnRvIGNhY2hlXG4gICAgcmVnaXN0ZXJSZXF1ZXN0ZWRQb3J0YWwoaW5kZXgpIHtcblxuICAgICAgICB0aGlzLmNhY2hlUHJvcHMucmVxdWVzdGVkTWFwLnNldChpbmRleCwgbnVsbClcblxuICAgIH1cblxuICAgIHJlbW92ZVJlcXVlc3RlZFBvcnRhbChpbmRleCkge1xuXG4gICAgICAgIHRoaXMuY2FjaGVQcm9wcy5yZXF1ZXN0ZWRNYXAuZGVsZXRlKGluZGV4KVxuXG4gICAgfVxuXG4gICAgZ2V0TmV3Q2FjaGVJdGVtSUQoKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxDYWNoZUl0ZW1JRCsrXG4gICAgfVxuXG4gICAgZ2V0Q2FjaGVJdGVtSUQoaW5kZXgpIHtcblxuICAgICAgICBjb25zdCBpbmRleE1hcCA9IHRoaXMuY2FjaGVQcm9wcy5pbmRleFRvSXRlbUlETWFwIFxuICAgICAgICBjb25zdCBrbm93bklEID0gaW5kZXhNYXAuZ2V0KGluZGV4KVxuICAgICAgICBjb25zdCBrbm93bkhhc1ZhbHVlID0ga25vd25JRD8/ZmFsc2UgLy8gZGVhbCB3aXRoIGZhbHNleSAwXG4gICAgICAgIGNvbnN0IG5ld0lEID0gKGtub3duSGFzVmFsdWUgPT09IGZhbHNlKT8odGhpcy5nZXROZXdDYWNoZUl0ZW1JRCgpKTpudWxsXG5cbiAgICAgICAgaWYgKGtub3duSGFzVmFsdWUgPT09IGZhbHNlKSBpbmRleE1hcC5zZXQoaW5kZXgsIG5ld0lEKVxuXG4gICAgICAgIHJldHVybiBrbm93bklEPz9uZXdJRFxuXG4gICAgfVxuXG4gICAgY3JlYXRlUG9ydGFsKGNvbXBvbmVudCwgaW5kZXgsIGNhY2hlSXRlbUlEKSB7IC8vIGNyZWF0ZSBuZXcgcG9ydGFsXG5cbiAgICAgICAgdGhpcy5yZW1vdmVSZXF1ZXN0ZWRQb3J0YWwoaW5kZXgpXG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2NyZWF0aW5nIHBvcnRhbCBmb3IgaW5kZXgnLCctJyt0aGlzLmNhY2hlUHJvcHMuc2Nyb2xsZXJJRCsnLScsIGluZGV4KVxuICAgICAgICBjb25zdCBwb3J0YWxOb2RlID0gY3JlYXRlUG9ydGFsTm9kZShpbmRleCwgY2FjaGVJdGVtSUQpXG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2NyZWF0aW5nIEluUG9ydGFsIG5vZGUnLCAnLScrdGhpcy5jYWNoZVByb3BzLnNjcm9sbGVySUQrJy0nLCBjYWNoZUl0ZW1JRClcblxuICAgICAgICB0aGlzLmNhY2hlUHJvcHMucG9ydGFsTWFwLnNldChjYWNoZUl0ZW1JRCwvL2luZGV4LFxuICAgICAgICAgICAgICAgIDxJblBvcnRhbCBrZXkgPSB7Y2FjaGVJdGVtSUR9IG5vZGUgPSB7cG9ydGFsTm9kZX0gPiB7IGNvbXBvbmVudCB9IDwvSW5Qb3J0YWw+KVxuICAgICAgICAgICAgICAgIC8vIDxJblBvcnRhbCBrZXkgPSB7aW5kZXh9IG5vZGUgPSB7cG9ydGFsTm9kZX0gPiB7IGNvbnRlbnQgfSA8L0luUG9ydGFsPilcbiAgICAgICAgdGhpcy5jYWNoZVByb3BzLm1vZGlmaWVkID0gdHJ1ZVxuXG4gICAgICAgIGNvbnN0IHBvcnRhbE1ldGFkYXRhID0ge1xuICAgICAgICAgICAgcG9ydGFsTm9kZSxcbiAgICAgICAgICAgIGlzUmVwYXJlbnRpbmdSZWY6e1xuICAgICAgICAgICAgICAgIGN1cnJlbnQ6ZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBjYWNoZUl0ZW1JRCxcbiAgICAgICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FjaGVQcm9wcy5tZXRhZGF0YU1hcC5zZXQoY2FjaGVJdGVtSUQsIHBvcnRhbE1ldGFkYXRhKVxuICAgICAgICB0aGlzLmNhY2hlUHJvcHMuaW5kZXhUb0l0ZW1JRE1hcC5zZXQoaW5kZXgsIGNhY2hlSXRlbUlEKVxuXG4gICAgICAgIHRoaXMucmVuZGVyUG9ydGFsTGlzdCgpXG5cbiAgICAgICAgcmV0dXJuIHBvcnRhbE1ldGFkYXRhXG5cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHByZWxvYWRJdGVtKGluZGV4LCBcbiAgICAgICAgZ2V0SXRlbSwgXG4gICAgICAgIGNyYWRsZVBhc3N0aHJvdWdoUHJvcGVydGllc1JlZiwgXG4gICAgICAgIHByZWxvYWRJbmRleENhbGxiYWNrLFxuICAgICAgICBzY3JvbGxlcklEXG4gICAgKSB7XG5cbiAgICAgICAgY29uc3QgY2FjaGVJdGVtSUQgPSB0aGlzLmdldENhY2hlSXRlbUlEKGluZGV4KVxuXG4gICAgICAgIGNvbnN0IHVzZXJjb250ZW50ID0gYXdhaXQgZ2V0SXRlbShpbmRleCwgY2FjaGVJdGVtSUQpXG5cbiAgICAgICAgaWYgKHVzZXJjb250ZW50KSB7XG5cbiAgICAgICAgICAgIHByZWxvYWRJbmRleENhbGxiYWNrICYmIHByZWxvYWRJbmRleENhbGxiYWNrKGluZGV4LCBjYWNoZUl0ZW1JRClcblxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3ByZWxvYWRpbmcgaW5kZXgnLCctJytzY3JvbGxlcklEKyctJyAsaW5kZXggKVxuXG4gICAgICAgICAgICBsZXQgY29udGVudCBcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbGVyRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBpc1JlcGFyZW50aW5nUmVmOm51bGwsXG4gICAgICAgICAgICAgICAgY3JhZGxlUGFzc3Rocm91Z2hQcm9wZXJ0aWVzUmVmLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVzZXJjb250ZW50LnByb3BzLmhhc093blByb3BlcnR5KCdzY3JvbGxlckRhdGEnKSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBSZWFjdC5jbG9uZUVsZW1lbnQodXNlcmNvbnRlbnQsIHtzY3JvbGxlckRhdGF9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gdXNlcmNvbnRlbnRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcG9ydGFsRGF0YSA9IFxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUG9ydGFsKGNvbnRlbnQsIGluZGV4LCBjYWNoZUl0ZW1JRClcbiAgICAgICAgICAgIC8vIG1ha2UgYXZhaWxhYmxlIHRvIHVzZXIgY29udGVudFxuICAgICAgICAgICAgc2Nyb2xsZXJEYXRhLmlzUmVwYXJlbnRpbmdSZWYgPSBwb3J0YWxEYXRhLmlzUmVwYXJlbnRpbmdSZWZcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBwcmVsb2FkSW5kZXhDYWxsYmFjayAmJiBwcmVsb2FkSW5kZXhDYWxsYmFjayhpbmRleCwgY2FjaGVJdGVtSUQsICdlcnJvcicpXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRVJST1InLCdubyBjb250ZW50IGl0ZW0gZm9yIHByZWxvYWQgaW5kZXgsIGNhY2hlSXRlbUlEJyxpbmRleCwgY2FjaGVJdGVtSUQpXG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gZGVsZXRlIGEgcG9ydGFsIGxpc3QgaXRlbVxuICAgIC8vIGFjY2VwdHMgYW4gYXJyYXkgb2YgaW5kZXhlc1xuICAgIGRlbGV0ZVBvcnRhbChpbmRleCwgY2FjaGVEZWxldGVMaXN0Q2FsbGJhY2spIHtcblxuICAgICAgICBsZXQgaW5kZXhBcnJheVxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5kZXgpKSB7XG4gICAgICAgICAgICBpbmRleEFycmF5ID0gW2luZGV4XVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXhBcnJheSA9IGluZGV4XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IFxuICAgICAgICAgICAgbWV0YWRhdGFNYXAsXG4gICAgICAgICAgICBwb3J0YWxNYXAsXG4gICAgICAgICAgICBpbmRleFRvSXRlbUlETWFwIFxuICAgICAgICB9ID0gdGhpcy5jYWNoZVByb3BzXG4gICAgICAgIGNvbnN0IGRlbGV0ZUxpc3QgPSBbXVxuICAgICAgICBmb3IgKGxldCBpIG9mIGluZGV4QXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlSXRlbUlEID0gaW5kZXhUb0l0ZW1JRE1hcC5nZXQoaSlcbiAgICAgICAgICAgIGRlbGV0ZUxpc3QucHVzaChjYWNoZUl0ZW1JRClcbiAgICAgICAgICAgIG1ldGFkYXRhTWFwLmRlbGV0ZShjYWNoZUl0ZW1JRClcbiAgICAgICAgICAgIHBvcnRhbE1hcC5kZWxldGUoY2FjaGVJdGVtSUQpXG4gICAgICAgICAgICBpbmRleFRvSXRlbUlETWFwLmRlbGV0ZShpKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FjaGVQcm9wcy5tb2RpZmllZCA9IHRydWVcblxuICAgICAgICBjYWNoZURlbGV0ZUxpc3RDYWxsYmFjayAmJiBjYWNoZURlbGV0ZUxpc3RDYWxsYmFjayhkZWxldGVMaXN0KVxuXG4gICAgfVxuXG4gICAgLy8gcXVlcnkgZXhpc3RlbmNlIG9mIGEgcG9ydGFsIGxpc3QgaXRlbVxuICAgIGhhc1BvcnRhbChjYWNoZUl0ZW1JRCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUHJvcHMubWV0YWRhdGFNYXAuaGFzKGNhY2hlSXRlbUlEKVxuXG4gICAgfVxuXG4gICAgZ2V0UG9ydGFsKGNhY2hlSXRlbUlEKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzUG9ydGFsKGNhY2hlSXRlbUlEKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVQcm9wcy5tZXRhZGF0YU1hcC5nZXQoY2FjaGVJdGVtSUQpXG4gICAgICAgIH1cblxuICAgIH1cblxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVsgVXRpbGl0eSBmdW5jdGlvbiBdPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBnZXQgYSByZWFjdC1yZXZlcnNlLXBvcnRhbCBJblBvcnRhbCBjb21wb25lbnQsIHdpdGggaXRzIG1ldGFkYXRhXG4vLyB3aXRoIHVzZXIgY29udGVudCBhbmQgY29udGFpbmVyXG5jb25zdCBjcmVhdGVQb3J0YWxOb2RlID0gKGluZGV4LCBjYWNoZUl0ZW1JRCkgPT4ge1xuXG4gICAgbGV0IHBvcnRhbE5vZGUgPSBjcmVhdGVIdG1sUG9ydGFsTm9kZSgpXG5cbiAgICBsZXQgY29udGFpbmVyID0gcG9ydGFsTm9kZS5lbGVtZW50XG4gICAgY29udGFpbmVyLnN0eWxlLmluc2V0ID0gJzBweCcgXG4gICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xuICAgIC8vIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnMTAwJSdcbiAgICAvLyBjb250YWluZXIuc3R5bGUud2lkdGggPSAnMTAwJSdcbiAgICBjb250YWluZXIuZGF0YXNldC50eXBlID0gJ2NvbnRlbnRlbnZlbG9wZSdcbiAgICBjb250YWluZXIuZGF0YXNldC5pbmRleCA9IGluZGV4XG4gICAgY29udGFpbmVyLmRhdGFzZXQuY2FjaGVpdGVtaWQgPSBjYWNoZUl0ZW1JRFxuXG4gICAgcmV0dXJuIHBvcnRhbE5vZGVcblxufSAgICAgXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PVsgVXRpbGl0eSBjb21wb25lbnQgXT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBwb3J0YWwgbGlzdCBjb21wb25lbnQgZm9yIHJhcGlkIHJlbGlzdGluZyBvZiB1cGRhdGVzLCB1c2luZyBleHRlcm5hbCBjYWxsYmFjayBmb3Igc2V0IHN0YXRlXG5leHBvcnQgY29uc3QgUG9ydGFsTGlzdCA9ICh7IGNhY2hlUHJvcHMgfSkgPT4ge1xuXG4gICAgLy8gY29uc29sZS5sb2coJ3J1bm5pbmcgUE9SVEFMTElTVCcsICctJytjYWNoZVByb3BzLnNjcm9sbGVySUQrJy0nKVxuXG4gICAgY29uc3QgW3BvcnRhbExpc3QsIHNldFBvcnRhbExpc3RdID0gdXNlU3RhdGUobnVsbClcbiAgICBjb25zdCBpc01vdW50ZWRSZWYgPSB1c2VSZWYodHJ1ZSlcblxuICAgIHVzZUVmZmVjdCgoKT0+e1xuXG4gICAgICAgIGNhY2hlUHJvcHMuc2V0TGlzdFN0YXRlID0gKCk9PntcblxuICAgICAgICAgICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgJiYgc2V0UG9ydGFsTGlzdChjYWNoZVByb3BzLnBvcnRhbExpc3QpXG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7aXNNb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZX1cblxuICAgIH0sW10pIFxuXG4gICAgcmV0dXJuIHBvcnRhbExpc3Rcbn1cbiJdLCJuYW1lcyI6WyJNQVhfQ0FDSEVfT1ZFUl9SVU4iLCJnbG9iYWxDYWNoZUl0ZW1JRCIsIkNhY2hlSGFuZGxlciIsInNjcm9sbGVySUQiLCJzZXRMaXN0c2l6ZSIsImxpc3RzaXplUmVmIiwic2V0TGlzdFN0YXRlIiwibW9kaWZpZWQiLCJtZXRhZGF0YU1hcCIsIk1hcCIsInJlcXVlc3RlZE1hcCIsInBvcnRhbE1hcCIsImluZGV4VG9JdGVtSURNYXAiLCJwb3J0YWxMaXN0IiwibmV3bGlzdHNpemUiLCJjYWNoZURlbGV0ZUxpc3RDYWxsYmFjayIsInBvcnRhbEluZGV4TGlzdCIsImNhY2hlUHJvcHMiLCJtYXBrZXlzIiwiQXJyYXkiLCJmcm9tIiwia2V5cyIsInNvcnQiLCJhIiwiYiIsImhpZ2hlc3RpbmRleCIsImF0IiwicGFyZWxpc3QiLCJmaWx0ZXIiLCJpdGVtIiwiZGVsZXRlUG9ydGFsIiwiY2xlYXIiLCJ2YWx1ZXMiLCJtb2RlbEluZGV4TGlzdCIsImluY2x1ZGVzIiwia2V5IiwiY2FjaGVNYXgiLCJtb2RlbExlbmd0aCIsImxlbmd0aCIsIm1heCIsIk1hdGgiLCJzaXplIiwibWFwa2V5c2xpc3QiLCJyZXF1ZXN0ZWRrZXlzIiwiY29uY2F0IiwibWFwTGVuZ3RoIiwicGFyZWNvdW50IiwiaGVhZGluZGV4IiwidGFpbGluZGV4IiwiaGVhZHBvcyIsImluZGV4T2YiLCJ0YWlscG9zIiwiaGVhZHJvb20iLCJ0YWlscm9vbSIsInBhcmVyb29tIiwiaGVhZHBhcmVjb3VudCIsImZsb29yIiwidGFpbHBhcmVjb3VudCIsImhlYWRsaXN0Iiwic2xpY2UiLCJ0YWlsbGlzdCIsImRlbExpc3QiLCJjcmFkbGVQYXJhbWV0ZXJzIiwiY2FsbGJhY2siLCJjcmFkbGVQYXNzdGhyb3VnaFByb3BlcnRpZXNSZWYiLCJoYW5kbGVyc1JlZiIsImN1cnJlbnQiLCJzdGF0ZUhhbmRsZXIiLCJzZXJ2aWNlSGFuZGxlciIsImNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXMiLCJjcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmIiwiY3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzIiwiY3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzUmVmIiwiZ2V0SXRlbSIsImxpc3RzaXplIiwicHJvbWlzZXMiLCJpc01vdW50ZWRSZWYiLCJpIiwicHJvbWlzZSIsInByZWxvYWRJdGVtIiwiY2FsbGJhY2tzIiwicHJlbG9hZEluZGV4Q2FsbGJhY2siLCJwdXNoIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJjcmFkbGVNYXAiLCJpbmRleCIsInNldCIsImdldCIsImNhY2hlbGlzdCIsInZhbHVlIiwiY29tcG9uZW50IiwidG9pbmRleCIsImZyb21pbmRleCIsImhpZ2hyYW5nZSIsImhhcyIsInNoaWZ0aW5naW5kZXgiLCJzaGlmdGluZ2NhY2hlSXRlbUlEIiwic2hpZnRpbmNyZW1lbnQiLCJzdGFydGluZGV4IiwiZW5kaW5kZXgiLCJzbGljZWluY3JlbWVudCIsIm9yZGVyZWRpbmRleGxpc3QiLCJ0b3Byb2Nlc3NsaXN0IiwicmV2ZXJzZSIsImNhY2hlSXRlbUlEIiwibmV3SW5kZXgiLCJwcm9jZXNzZWRsaXN0IiwiaW5jcmVtZW50IiwicmFuZ2Vjb3VudCIsInJhbmdlaW5jcmVtZW50IiwicHRyIiwiZmluZEluZGV4IiwicHJvY2Vzc0luZGV4TGlzdCIsImluZGV4ZXN0b3JlbW92ZSIsImNhY2hlSXRlbXNUb1JlbW92ZU1hcCIsInJlbW92ZUluZGV4TGlzdCIsImNvbnNvbGUiLCJsb2ciLCJtb2RpZmllZExpc3QiLCJmb3JFYWNoIiwiaW5kZXhNYXAiLCJrbm93bklEIiwia25vd25IYXNWYWx1ZSIsIm5ld0lEIiwiZ2V0TmV3Q2FjaGVJdGVtSUQiLCJyZW1vdmVSZXF1ZXN0ZWRQb3J0YWwiLCJwb3J0YWxOb2RlIiwiY3JlYXRlUG9ydGFsTm9kZSIsInJlYWN0XzEiLCJyZWFjdF9yZXZlcnNlX3BvcnRhbF8xIiwibm9kZSIsInBvcnRhbE1ldGFkYXRhIiwiaXNSZXBhcmVudGluZ1JlZiIsInJlbmRlclBvcnRhbExpc3QiLCJnZXRDYWNoZUl0ZW1JRCIsInVzZXJjb250ZW50Iiwic2Nyb2xsZXJEYXRhIiwicHJvcHMiLCJoYXNPd25Qcm9wZXJ0eSIsImNvbnRlbnQiLCJjbG9uZUVsZW1lbnQiLCJwb3J0YWxEYXRhIiwiY3JlYXRlUG9ydGFsIiwiaW5kZXhBcnJheSIsImlzQXJyYXkiLCJkZWxldGVMaXN0IiwiaGFzUG9ydGFsIiwiZXhwb3J0cyIsImNvbnRhaW5lciIsImVsZW1lbnQiLCJzdHlsZSIsImluc2V0IiwicG9zaXRpb24iLCJkYXRhc2V0IiwidHlwZSIsImNhY2hlaXRlbWlkIiwiUG9ydGFsTGlzdCIsInNldFBvcnRhbExpc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/cradle/cachehandler.tsx\n");

/***/ }),

/***/ "./src/cradle/contentfunctions.tsx":
/*!*****************************************!*\
  !*** ./src/cradle/contentfunctions.tsx ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // contentfunctions.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.deletePortals = exports.allocateContentList = exports.getCellFrameComponentList = exports.calcContentShift = exports.getShiftInstruction = exports.getContentListRequirements = void 0;\n/******************************************************************************************\n ------------------------------------[ SUPPORTING FUNCTIONS ]------------------------------\n*******************************************************************************************/\n\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar CellFrame_1 = __importDefault(__webpack_require__(/*! ../CellFrame */ \"./src/CellFrame.tsx\")); // ======================[ for setCradleContent ]===========================\n\n\nvar getContentListRequirements = function getContentListRequirements(_ref) {\n  var rowLength = _ref.rowLength,\n      cradleInheritedProperties = _ref.cradleInheritedProperties,\n      cradleInternalProperties = _ref.cradleInternalProperties,\n      targetAxisReferenceIndex = _ref.targetAxisReferenceIndex,\n      targetAxisPixelOffset = _ref.targetAxisPixelOffset,\n      viewportElement = _ref.viewportElement;\n  var orientation = cradleInheritedProperties.orientation,\n      cellHeight = cradleInheritedProperties.cellHeight,\n      cellWidth = cradleInheritedProperties.cellWidth,\n      gap = cradleInheritedProperties.gap;\n  var crosscount = cradleInternalProperties.crosscount,\n      cradleRowcount = cradleInternalProperties.cradleRowcount,\n      runwayRowcount = cradleInternalProperties.runwayRowcount,\n      listRowcount = cradleInternalProperties.listRowcount,\n      listsize = cradleInternalProperties.listsize,\n      viewportVisibleRowcount = cradleInternalProperties.viewportVisibleRowcount; // align axis reference to first row item\n  // const origrefindex = targetAxisReferenceIndex\n\n  targetAxisReferenceIndex = Math.min(targetAxisReferenceIndex, listsize - 1);\n  targetAxisReferenceIndex -= targetAxisReferenceIndex % crosscount; // derive target row\n\n  var targetAxisRowOffset = Math.ceil(targetAxisReferenceIndex / crosscount);\n  var maxAxisRowOffset = listRowcount - viewportVisibleRowcount;\n\n  if (targetAxisRowOffset > maxAxisRowOffset) {\n    targetAxisRowOffset = maxAxisRowOffset;\n    targetAxisReferenceIndex = targetAxisRowOffset * crosscount;\n  } // -----------------------[ calc cradleReferenceRow & Index ]------------------------\n  // leading edge\n  // let targetCradleReferenceIndex = Math.max(0,targetAxisReferenceIndex - leadingrunwayitemcount)\n\n\n  var targetCradleRowOffset = Math.max(0, targetAxisRowOffset - runwayRowcount); // trailing edge\n\n  var targetCradleEndRowOffset = targetCradleRowOffset + (cradleRowcount - 1);\n  var listEndRowOffset = listRowcount - 1;\n\n  if (targetCradleEndRowOffset > listEndRowOffset) {\n    var diff = targetCradleEndRowOffset - listEndRowOffset;\n    targetCradleRowOffset -= diff;\n    targetCradleEndRowOffset -= diff;\n  }\n\n  var targetCradleReferenceIndex = targetCradleRowOffset * crosscount; // ---------------------[ calc cradle content count ]---------------------\n\n  var newCradleContentCount = cradleRowcount * crosscount;\n\n  if (targetCradleEndRowOffset == listEndRowOffset) {\n    var endRowRemainderCount = listsize % crosscount;\n\n    if (endRowRemainderCount) {\n      newCradleContentCount -= crosscount - endRowRemainderCount;\n    }\n  } // --------------------[ calc css positioning ]-----------------------\n\n\n  var targetScrollblockPixelOffset = targetAxisRowOffset * rowLength - targetAxisPixelOffset; // ----------------------[ return required values ]---------------------\n\n  return {\n    targetCradleReferenceIndex: targetCradleReferenceIndex,\n    targetAxisReferenceIndex: targetAxisReferenceIndex,\n    targetAxisRowOffset: targetAxisRowOffset,\n    targetScrollblockPixelOffset: targetScrollblockPixelOffset,\n    newCradleContentCount: newCradleContentCount\n  };\n};\n\nexports.getContentListRequirements = getContentListRequirements; // ======================[ for updateCradleContent ]===========================\n// -1 = shift row to head. 1 = shift row to tail. 0 = do not shift a row.\n\nvar getShiftInstruction = function getShiftInstruction(_ref2) {\n  var isViewportScrollingForward = _ref2.isViewportScrollingForward,\n      orientation = _ref2.orientation,\n      triggerlineEntries = _ref2.triggerlineEntries,\n      triggerlineRecord = _ref2.triggerlineRecord,\n      triggerlineSpan = _ref2.triggerlineSpan,\n      scrollerID = _ref2.scrollerID;\n\n  if (isViewportScrollingForward != triggerlineRecord.wasViewportScrollingForward) {\n    triggerlineRecord.wasViewportScrollingForward = isViewportScrollingForward;\n    triggerlineRecord.driver = isViewportScrollingForward ? 'triggerline-tail' : 'triggerline-head';\n    triggerlineRecord.offset = null;\n  }\n\n  var entries = triggerlineEntries.filter(function (entry) {\n    // const isIntersecting = entry.isIntersecting\n    var triggerlinename = entry.target.dataset.type;\n    entry.triggerlinename = triggerlinename;\n    entry.scrollingforward = isViewportScrollingForward;\n    var rootpos = orientation == 'vertical' ? entry.rootBounds.y : entry.rootBounds.x;\n    var entrypos = orientation == 'vertical' ? entry.boundingClientRect.y : entry.boundingClientRect.x;\n    entry.viewportoffset = entrypos - rootpos;\n    return isViewportScrollingForward && triggerlinename == 'triggerline-tail' && entrypos <= rootpos || !isViewportScrollingForward && triggerlinename == 'triggerline-head' && entrypos >= rootpos;\n  }); // if ((entries.length == 0) && (triggerlineEntries.length == 2)) { // reconnecting\n  //     return 0\n  // }\n\n  if (entries.length == 0) {\n    var counterentries = triggerlineEntries.filter(function (entry) {\n      return entry.triggerlinename != triggerlineRecord.driver;\n    });\n    if (counterentries.length == 0) return 0; // console.log('counterentries','-'+scrollerID+'-', [...counterentries])\n    // check for implied trigger - trigger can be bypassed with heavy components\n\n    var counterentry = counterentries.pop(); //dtriggerlineEntries[0]\n\n    var countertriggerlinename = counterentry.triggerlinename;\n    var impliedoffset;\n\n    if (countertriggerlinename != triggerlineRecord.driver) {\n      // should always be true\n      if (countertriggerlinename == 'triggerline-head') {\n        impliedoffset = counterentry.viewportoffset + triggerlineSpan;\n\n        if (impliedoffset <= 0) {\n          triggerlineRecord.offset = impliedoffset; // console.log('returning -1')\n\n          return -1;\n        }\n      } else {\n        // countertriggerlinename == 'triggerline-tail'\n        impliedoffset = counterentry.viewportoffset - triggerlineSpan;\n\n        if (impliedoffset >= 0) {\n          triggerlineRecord.offset = impliedoffset; // console.log('returning 1')\n\n          return 1;\n        }\n      }\n    } // console.log('returning 0')\n\n\n    return 0;\n  }\n\n  var entry = entries[0]; // assume one record gets filtered; only paired above on reconnect\n\n  triggerlineRecord.offset = entry.viewportoffset;\n  var retval;\n\n  if (!isViewportScrollingForward) {\n    retval = 1; // shift row to tail\n  } else {\n    retval = -1; // shift row to head\n  }\n\n  return retval;\n};\n\nexports.getShiftInstruction = getShiftInstruction; // A negative shift instruction is into the head, a positive shift is into the tail.\n// called only from updateCradleContent\n\nvar calcContentShift = function calcContentShift(_ref3) {\n  var shiftinstruction = _ref3.shiftinstruction,\n      cradleInheritedProperties = _ref3.cradleInheritedProperties,\n      cradleInternalProperties = _ref3.cradleInternalProperties,\n      cradleContent = _ref3.cradleContent,\n      cradleElements = _ref3.cradleElements,\n      scrollPos = _ref3.scrollPos;\n\n  // ------------------------[ 1. initialize ]-----------------------\n  var _a, _b;\n\n  var isScrollingViewportForward = shiftinstruction < 0;\n  var gap = cradleInheritedProperties.gap,\n      orientation = cradleInheritedProperties.orientation,\n      cellHeight = cradleInheritedProperties.cellHeight,\n      cellWidth = cradleInheritedProperties.cellWidth,\n      triggerlineOffset = cradleInheritedProperties.triggerlineOffset;\n  var axisElement = cradleElements.axisRef.current;\n  var cradlecontentlist = cradleContent.cradleModelComponents,\n      tailcontentlist = cradleContent.tailModelComponents;\n  var crosscount = cradleInternalProperties.crosscount,\n      cradleRowcount = cradleInternalProperties.cradleRowcount,\n      listsize = cradleInternalProperties.listsize,\n      listRowcount = cradleInternalProperties.listRowcount,\n      viewportRowcount = cradleInternalProperties.viewportRowcount,\n      runwayRowcount = cradleInternalProperties.runwayRowcount;\n  var rowLength = (orientation == 'vertical' ? cellHeight : cellWidth) + gap; // -----------[ 2. calculate axis reference row shift ]-------------------\n  // extra gaps can be caused by rapid scrolling\n\n  var cradleAxisOffset = orientation == 'vertical' ? axisElement.offsetTop : axisElement.offsetLeft; // viewportAxisOffset will be negative for scroll forward and positive for scroll backward\n\n  var viewportAxisOffset = // the pixel distance between the viewport frame and the axis, toward the head\n  cradleAxisOffset - scrollPos;\n  var triggerAxisOffset = isScrollingViewportForward ? // scroll forward engages the tail triggerline which is below the axis\n  // the tail triggerline must be placed to intersect to re-trigger\n  viewportAxisOffset + triggerlineOffset : // scrollbackward engages the head triggerline which is above the axis\n  // the head triggerline muse be placed not to intersect to retrigger\n  viewportAxisOffset - (rowLength - triggerlineOffset); // negative for moving rows out of head into tail;\n  // positive for moving rows out of tail into head\n  // +/- 1 gurantees boundary location results in move\n\n  var triggerRowShift = isScrollingViewportForward ? Math.floor((triggerAxisOffset ? triggerAxisOffset : -1) / rowLength) : Math.ceil((triggerAxisOffset ? triggerAxisOffset : 1) / rowLength);\n  var axisReferenceRowshift = -triggerRowShift; // ------------[ 5. calc new cradle and axis reference row offset ]-------------\n  // base value for cradle reference shift; may change if beyond list bounds\n\n  var cradleReferenceRowshift = axisReferenceRowshift;\n  var previousCradleReferenceIndex = ((_a = cradlecontentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index) || 0;\n  var previousCradleRowOffset = Math.ceil(previousCradleReferenceIndex / crosscount);\n  var previousAxisReferenceIndex = ((_b = tailcontentlist[0]) === null || _b === void 0 ? void 0 : _b.props.index) || 0;\n  var previousAxisRowOffset = Math.ceil(previousAxisReferenceIndex / crosscount); // base values\n\n  var newCradleReferenceRowOffset = previousCradleRowOffset + cradleReferenceRowshift;\n  var newAxisReferenceRowOffset = previousAxisRowOffset + axisReferenceRowshift; // --------[ 6. adjust cradle contents for start and end of list ]-------\n  // ...to maintain constant number of cradle rows\n\n  var listEndrowOffset = listRowcount - 1;\n\n  if (isScrollingViewportForward) {\n    // a. if scrolling forward near the start of the list, new cradle row offset and\n    // cradle row shift count has to be adjusted to accommodate the leading runway\n    // b. if scrolling forward (toward tail of list), as the cradle last row offset approaches \n    // listrow new cradle offset and cradle row shift have to be adjusted to prevent shortening \n    // of cradle content.\n    var targetCradleReferenceRowOffset = Math.max(0, newAxisReferenceRowOffset - runwayRowcount + (runwayRowcount ? -1 : 0) // one row is visible, not runway\n    );\n    var headrowDiff = newCradleReferenceRowOffset - targetCradleReferenceRowOffset;\n\n    if (headrowDiff > 0) {\n      newCradleReferenceRowOffset -= headrowDiff;\n      cradleReferenceRowshift -= headrowDiff;\n    } // case of being in bounds of trailing runway (end of list)\n\n\n    var targetCradleEndrowOffset = newCradleReferenceRowOffset + (cradleRowcount - 1);\n    var tailrowdiff = Math.max(0, targetCradleEndrowOffset - listEndrowOffset);\n\n    if (tailrowdiff > 0) {\n      newCradleReferenceRowOffset -= tailrowdiff;\n      cradleReferenceRowshift -= tailrowdiff;\n    }\n  } else {\n    // !isScrollingViewportForward = scroll backward\n    // c. if scrolling backward (toward head of list), as the cradlerowoffset hits 0, cradle changes have\n    // to be adjusted to prevent shortening of cradle content\n    // d. if scrolling backward near the end of the list, cradle changes has to be adjusted to accomodate\n    // the trailing runway\n    if (newCradleReferenceRowOffset < 0) {\n      cradleReferenceRowshift -= newCradleReferenceRowOffset;\n      newCradleReferenceRowOffset = 0;\n    } // case of in bounds of trailing runway (end of list)\n\n\n    var computedNextCradleEndrowOffset = previousCradleRowOffset + (cradleRowcount - 1) + cradleReferenceRowshift;\n    var targetcradleEndrowoffset = Math.min(listEndrowOffset, newAxisReferenceRowOffset + (viewportRowcount - 1) + (runwayRowcount - 1));\n\n    var _tailrowdiff = Math.max(0, targetcradleEndrowoffset - computedNextCradleEndrowOffset);\n\n    if (_tailrowdiff > 0) {\n      cradleReferenceRowshift += _tailrowdiff;\n      newCradleReferenceRowOffset += _tailrowdiff;\n    }\n  } // ----------------------[ 7. map rows to item references ]----------------------\n\n\n  var newCradleReferenceIndex = newCradleReferenceRowOffset * crosscount;\n  var cradleReferenceItemShift = cradleReferenceRowshift * crosscount;\n  var newAxisReferenceIndex = newAxisReferenceRowOffset * crosscount;\n  var axisReferenceItemShift = axisReferenceRowshift * crosscount;\n  var newCradleContentCount = cradleRowcount * crosscount; // base count\n\n  var includesLastRow = newCradleReferenceRowOffset + cradleRowcount >= listRowcount;\n\n  if (includesLastRow) {\n    var partialspaces = listsize % crosscount;\n    var itemsShortfall = partialspaces == 0 ? 0 : crosscount - partialspaces;\n    newCradleContentCount -= itemsShortfall;\n  } // create head and tail change counts\n\n\n  var changeOfCradleContentCount = cradlecontentlist.length - newCradleContentCount;\n  var listStartChangeCount = -cradleReferenceItemShift;\n  var listEndChangeCount = -listStartChangeCount - changeOfCradleContentCount; // -------------[ 8. calculate new axis pixel position ]------------------\n\n  var newAxisPixelOffset = viewportAxisOffset + axisReferenceRowshift * rowLength; // ---------------------[ 9. return required values ]-------------------\n\n  return {\n    newCradleReferenceIndex: newCradleReferenceIndex,\n    cradleReferenceItemShift: cradleReferenceItemShift,\n    newAxisReferenceIndex: newAxisReferenceIndex,\n    axisReferenceItemShift: axisReferenceItemShift,\n    newAxisPixelOffset: newAxisPixelOffset,\n    newCradleContentCount: newCradleContentCount,\n    listStartChangeCount: listStartChangeCount,\n    listEndChangeCount: listEndChangeCount\n  };\n};\n\nexports.calcContentShift = calcContentShift; // =====================[ shared by both setCradleContent and updateCradleContent ]====================\n// update content\n// adds itemshells at end of contentlist according to headindexcount and tailindescount,\n// or if indexcount values are <0 removes them.\n\nvar getCellFrameComponentList = function getCellFrameComponentList(_ref4) {\n  var cradleInheritedProperties = _ref4.cradleInheritedProperties,\n      cradleInternalProperties = _ref4.cradleInternalProperties,\n      cacheHandler = _ref4.cacheHandler,\n      cradleContentCount = _ref4.cradleContentCount,\n      cradleReferenceIndex = _ref4.cradleReferenceIndex,\n      listStartChangeCount = _ref4.listStartChangeCount,\n      listEndChangeCount = _ref4.listEndChangeCount,\n      contentlist = _ref4.workingContentList,\n      instanceIdCounterRef = _ref4.instanceIdCounterRef;\n\n  var localContentlist = _toConsumableArray(contentlist);\n\n  var lastindexoffset = cradleReferenceIndex + localContentlist.length - 1;\n  var headContentlist = [],\n      tailContentlist = [];\n  var deletedtailitems = [],\n      deletedheaditems = [];\n\n  if (listStartChangeCount >= 0) {\n    // acquire new items\n    for (var newindex = cradleReferenceIndex - listStartChangeCount; newindex < cradleReferenceIndex; newindex++) {\n      headContentlist.push(createCell({\n        index: newindex,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        instanceIdCounterRef: instanceIdCounterRef,\n        cacheHandler: cacheHandler\n      }));\n    }\n  } else {\n    deletedheaditems = localContentlist.splice(0, -listStartChangeCount);\n  }\n\n  if (listEndChangeCount >= 0) {\n    // acquire new items\n    for (var _newindex = lastindexoffset + 1; _newindex < lastindexoffset + 1 + listEndChangeCount; _newindex++) {\n      tailContentlist.push(createCell({\n        index: _newindex,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        instanceIdCounterRef: instanceIdCounterRef,\n        cacheHandler: cacheHandler\n      }));\n    }\n  } else {\n    deletedtailitems = localContentlist.splice(listEndChangeCount, -listEndChangeCount);\n  }\n\n  var deletedItems = deletedheaditems.concat(deletedtailitems);\n  var componentList = headContentlist.concat(localContentlist, tailContentlist);\n  return [componentList, deletedItems];\n};\n\nexports.getCellFrameComponentList = getCellFrameComponentList; // butterfly model. Leading (head) all or partially hidden; tail, visible plus following hidden\n\nvar allocateContentList = function allocateContentList(_ref5) {\n  var contentlist = _ref5.contentlist,\n      axisReferenceIndex = _ref5.axisReferenceIndex;\n\n  var _a;\n\n  var offsetindex = (_a = contentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index; // TODO: Cannot read property 'props' of undefined\n\n  var headitemcount = axisReferenceIndex - offsetindex;\n  var headlist = contentlist.slice(0, headitemcount);\n  var taillist = contentlist.slice(headitemcount);\n  return [headlist, taillist];\n};\n\nexports.allocateContentList = allocateContentList;\n\nvar deletePortals = function deletePortals(cacheHandler, deleteList, cacheDeleteListCallback) {\n  // console.log('inside deletePortals',deleteList)\n  var dlist = deleteList.map(function (item) {\n    return item.props.index;\n  }); // TODO return list of deleted items to user\n\n  cacheHandler.deletePortal(dlist, cacheDeleteListCallback);\n  if (deleteList.length) cacheHandler.renderPortalList();\n};\n\nexports.deletePortals = deletePortals; // =====================[ acquire item ]======================\n\nvar createCell = function createCell(_ref6) {\n  var index = _ref6.index,\n      cradleInheritedProperties = _ref6.cradleInheritedProperties,\n      cradleInternalProperties = _ref6.cradleInternalProperties,\n      instanceIdCounterRef = _ref6.instanceIdCounterRef,\n      cacheHandler = _ref6.cacheHandler;\n  var instanceID = instanceIdCounterRef.current++;\n  var orientation = cradleInheritedProperties.orientation,\n      cellHeight = cradleInheritedProperties.cellHeight,\n      cellWidth = cradleInheritedProperties.cellWidth,\n      getItem = cradleInheritedProperties.getItem,\n      placeholder = cradleInheritedProperties.placeholder,\n      scrollerID = cradleInheritedProperties.scrollerID;\n  var listsize = cradleInternalProperties.listsize;\n  var cacheItemID = cacheHandler.getCacheItemID(index);\n  return react_1[\"default\"].createElement(CellFrame_1[\"default\"], {\n    key: instanceID,\n    orientation: orientation,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    index: index,\n    getItem: getItem,\n    listsize: listsize,\n    placeholder: placeholder,\n    cacheItemID: cacheItemID,\n    instanceID: instanceID,\n    scrollerID: scrollerID\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contentfunctions.tsx\n");

/***/ }),

/***/ "./src/cradle/contenthandler.tsx":
/*!***************************************!*\
  !*** ./src/cradle/contenthandler.tsx ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // contenthandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar contentfunctions_1 = __webpack_require__(/*! ./contentfunctions */ \"./src/cradle/contentfunctions.tsx\");\n\nvar ContentHandler = /*#__PURE__*/function () {\n  function ContentHandler(cradleParameters) {\n    var _this = this;\n\n    _classCallCheck(this, ContentHandler);\n\n    this.content = {\n      cradleModelComponents: null,\n      headModelComponents: null,\n      tailModelComponents: null,\n      // the following two only used in cradle for render\n      headDisplayComponents: [],\n      tailDisplayComponents: []\n    };\n    this.instanceIdCounterRef = {\n      current: 0\n    };\n    this.instanceIdMap = new Map(); // Two public methods - setCradleContent and updateCradleContent\n    // reset cradle, including allocation between head and tail parts of the cradle\n    // called only from cradle state handler\n    // ==========================[ SET CONTENT ]===========================\n    //initially (dosetup), after reposition (doreposition), or with finishresize, pivot, \n    // or user size param reconfigure or reload\n    // setCradleContent sets the scrollblock's scroll position, as well as config and content\n\n    this.setCradleContent = function (cradleState) {\n      // ------------------------------[ 1. initialize ]---------------------------\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var cradleInternalProperties = _this.cradleParameters.cradleInternalPropertiesRef.current;\n      var cradleHandlers = _this.cradleParameters.handlersRef.current;\n      var cacheHandler = cradleHandlers.cacheHandler,\n          scaffoldHandler = cradleHandlers.scaffoldHandler,\n          serviceHandler = cradleHandlers.serviceHandler,\n          interruptHandler = cradleHandlers.interruptHandler; // the triggerlines and cradle wings will be moved, so disconnect them from their observers.\n      // they are reconnected with 'renderupdatedcontent' state in cradle.tsx\n\n      interruptHandler.axisTriggerlinesIntersect.observer.disconnect();\n      interruptHandler.cradleIntersect.observer.disconnect();\n      var cradlePositionData = scaffoldHandler.cradlePositionData;\n      var viewportElement = viewportInterruptProperties.elementRef.current;\n      var requestedAxisReferenceIndex = cradlePositionData.targetAxisReferenceIndex;\n      var targetAxisPixelOffset = cradlePositionData.targetAxisPixelOffset;\n      var orientation = cradleInheritedProperties.orientation,\n          gap = cradleInheritedProperties.gap,\n          padding = cradleInheritedProperties.padding,\n          cellHeight = cradleInheritedProperties.cellHeight,\n          cellWidth = cradleInheritedProperties.cellWidth,\n          cache = cradleInheritedProperties.cache;\n      var crosscount = cradleInternalProperties.crosscount,\n          listsize = cradleInternalProperties.listsize;\n      var workingAxisReferenceIndex = Math.min(requestedAxisReferenceIndex, listsize - 1);\n      workingAxisReferenceIndex -= workingAxisReferenceIndex % crosscount; // console.log('cradleState in setCradleContent; workingAxisReferenceIndex',\n      //     cradleState, workingAxisReferenceIndex)\n\n      if (cradleState == 'doreposition' || cradleState == 'reconfigure') {\n        targetAxisPixelOffset = workingAxisReferenceIndex == 0 ? padding : gap; // default\n      } // console.log('cradleState in setCradleContent; workingAxisReferenceIndex, targetAxisPixelOffset',\n      //     cradleState, workingAxisReferenceIndex, targetAxisPixelOffset)\n\n\n      var workingContentList = [];\n      var cradleContent = _this.content; // ----------------------[ 2. get content requirements ]----------------------\n\n      var isVertical = orientation == 'vertical';\n      var rowLength = isVertical ? cellHeight + gap : cellWidth + gap;\n\n      var _ref = (0, contentfunctions_1.getContentListRequirements)({\n        rowLength: rowLength,\n        targetAxisReferenceIndex: requestedAxisReferenceIndex,\n        targetAxisPixelOffset: targetAxisPixelOffset,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        viewportElement: viewportInterruptProperties.elementRef.current\n      }),\n          targetCradleReferenceIndex = _ref.targetCradleReferenceIndex,\n          targetAxisReferenceIndex = _ref.targetAxisReferenceIndex,\n          targetAxisRowOffset = _ref.targetAxisRowOffset,\n          cradleContentCount = _ref.newCradleContentCount,\n          scrollblockPixelOffset = _ref.targetScrollblockPixelOffset;\n\n      var scrollPosAdjustment;\n\n      if (targetAxisReferenceIndex == 0) {\n        scrollPosAdjustment = 0; // } else if (cradleState == 'doreposition') {\n        //     scrollPosAdjustment = padding //+ gap\n      } else {\n        scrollPosAdjustment = padding;\n      }\n\n      var axisPixelOffset = targetAxisPixelOffset; // ----------------------[ 3. get and config content ]----------------------\n      // returns content constrained by cradleRowcount\n\n      var _ref2 = (0, contentfunctions_1.getCellFrameComponentList)({\n        cacheHandler: cacheHandler,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        cradleContentCount: cradleContentCount,\n        cradleReferenceIndex: targetCradleReferenceIndex,\n        listStartChangeCount: 0,\n        listEndChangeCount: cradleContentCount,\n        workingContentList: workingContentList,\n        instanceIdCounterRef: _this.instanceIdCounterRef\n      }),\n          _ref3 = _slicedToArray(_ref2, 2),\n          newcontentlist = _ref3[0],\n          deleteditems = _ref3[1]; // if (deleteditems.length && (cache == 'cradle')) {\n      //     deletePortals(cacheHandler, deleteditems)\n      // }\n\n\n      var _ref4 = (0, contentfunctions_1.allocateContentList)({\n        contentlist: newcontentlist,\n        axisReferenceIndex: targetAxisReferenceIndex\n      }),\n          _ref5 = _slicedToArray(_ref4, 2),\n          headcontentlist = _ref5[0],\n          tailcontentlist = _ref5[1];\n\n      cradleContent.cradleModelComponents = newcontentlist;\n      cradleContent.headModelComponents = headcontentlist;\n      cradleContent.tailModelComponents = tailcontentlist;\n      cradlePositionData.targetAxisReferenceIndex = targetAxisReferenceIndex;\n      cradlePositionData.targetAxisPixelOffset = axisPixelOffset;\n\n      if (serviceHandler.callbacks.referenceIndexCallback) {\n        var cstate = cradleState;\n        serviceHandler.callbacks.referenceIndexCallback(cradlePositionData.targetAxisReferenceIndex, 'setCradleContent', cstate);\n      } //  ----------------------[ 4. set CSS ]-----------------------\n\n\n      cradlePositionData.blockScrollPos = scrollblockPixelOffset + scrollPosAdjustment; // console.log('setting SCROLLPOS in setCradleContent', '-'+cradleInheritedProperties.scrollerID+'-', cradlePositionData.blockScrollPos)\n\n      viewportElement[cradlePositionData.blockScrollProperty] = cradlePositionData.blockScrollPos;\n      var cradleElements = scaffoldHandler.elements; //cradleElementsRef.current\n\n      var axisElement = cradleElements.axisRef.current;\n      var headElement = cradleElements.headRef.current;\n\n      if (orientation == 'vertical') {\n        var top = targetAxisRowOffset * rowLength + padding;\n        axisElement.style.top = top + 'px';\n        axisElement.style.left = 'auto';\n        headElement.style.paddingBottom = headcontentlist.length ? gap + 'px' : 0;\n      } else {\n        // orientation = 'horizontal'\n        axisElement.style.top = 'auto';\n        var left = targetAxisRowOffset * rowLength + padding;\n        axisElement.style.left = left + 'px';\n        headElement.style.paddingRight = headcontentlist.length ? gap + 'px' : 0;\n      } //  ----------------------[ 5. reset interrupts ]-----------------------\n\n\n      interruptHandler.axisTriggerlinesIntersect.connectElements();\n      interruptHandler.cradleIntersect.connectElements();\n      interruptHandler.signals.pauseTriggerlinesObserver = false; // interruptHandler.signals.pauseCradleIntersectionObserver = false\n    }; // ==================[ UPDATE CONTENT through scroll ]========================\n    // updateCradleContent does not touch the viewport element's scroll position for the scrollblock\n    // instead it reconfigures elements within the cradle\n\n\n    this.updateCradleContent = function (isViewportScrollingForward, triggerlineEntries) {\n      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'notifications';\n\n      // ----------------------[ 1. initialize ]-------------------------\n      var _a; // handler support\n\n\n      var _this$cradleParameter = _this.cradleParameters.handlersRef.current,\n          cacheHandler = _this$cradleParameter.cacheHandler,\n          scrollHandler = _this$cradleParameter.scrollHandler,\n          scaffoldHandler = _this$cradleParameter.scaffoldHandler,\n          stateHandler = _this$cradleParameter.stateHandler,\n          interruptHandler = _this$cradleParameter.interruptHandler,\n          serviceHandler = _this$cradleParameter.serviceHandler; // scroll data\n\n      var scrollData = scrollHandler.scrollData;\n      var scrollPos = scrollData.currentupdate; // console.log('updateCradleContent with scrollPos, blockScrollPos, source', \n      //     scrollPos, scaffoldHandler.cradlePositionData.blockScrollPos, source)\n      // first abandon option/3; nothing to do\n\n      if (scrollPos < 0) {\n        // for Safari, FF elastic bounce at top of scroll\n        return;\n      } // cradle scaffold and user cells\n\n\n      var cradleElements = scaffoldHandler.elements;\n      var cradleContent = _this.content;\n      var modelcontentlist = cradleContent.cradleModelComponents;\n      var oldCradleReferenceIndex = ((_a = modelcontentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index) || 0; // --------------------[ 2. get shift instruction ]-----------------------\n\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var cradleInternalProperties = _this.cradleParameters.cradleInternalPropertiesRef.current;\n      var orientation = cradleInheritedProperties.orientation,\n          cache = cradleInheritedProperties.cache; // -1 is move a row up to the head, +1 is move a row down to the tail, 0 is no shift\n\n      var triggerlineRecord = cradleInternalProperties.triggerlineRecordsRef.current;\n      var shiftinstruction = (0, contentfunctions_1.getShiftInstruction)({\n        scrollerID: cradleInheritedProperties.scrollerID,\n        isViewportScrollingForward: isViewportScrollingForward,\n        orientation: orientation,\n        triggerlineEntries: triggerlineEntries,\n        triggerlineRecord: triggerlineRecord,\n        triggerlineSpan: scaffoldHandler.triggerlineSpan\n      }); // console.log('scrollerID, shiftinstruction',\n      //     '-'+cradleInheritedProperties.scrollerID+'-', shiftinstruction)\n      // second abandon option/3; nothing to do\n\n      if (shiftinstruction == 0) {\n        // console.log('triggerlineRecord',triggerlineRecord)\n        return;\n      } // --------------------------------[ 3. Calculate shifts ]-------------------------------\n      // cradle properties\n      // const cradleInheritedProperties = this.cradleParameters.cradleInheritedPropertiesRef.current\n      // const viewportElement = this.cradleParameters.viewportInterruptPropertiesRef.current.elementRef.current\n\n\n      var _ref6 = (0, contentfunctions_1.calcContentShift)({\n        shiftinstruction: shiftinstruction,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        cradleContent: cradleContent,\n        cradleElements: cradleElements,\n        scrollPos: scrollPos\n      }),\n          newCradleReferenceIndex = _ref6.newCradleReferenceIndex,\n          cradleItemShift = _ref6.cradleReferenceItemShift,\n          axisReferenceIndex = _ref6.newAxisReferenceIndex,\n          axisItemShift = _ref6.axisReferenceItemShift,\n          axisPixelOffset = _ref6.newAxisPixelOffset,\n          cradleContentCount = _ref6.newCradleContentCount,\n          listStartChangeCount = _ref6.listStartChangeCount,\n          listEndChangeCount = _ref6.listEndChangeCount; // third abandon option/3; nothing to do\n\n\n      if (axisItemShift == 0 && cradleItemShift == 0) {\n        // TODO: is this possible?\n        return;\n      } // the triggerlines will be moved, so disconnect them from their observer.\n      // they are reconnected with 'renderupdatedcontent' state in cradle.tsx\n\n\n      interruptHandler.axisTriggerlinesIntersect.observer.disconnect();\n      interruptHandler.signals.pauseTriggerlinesObserver = true; // ----------------------------------[ 4. reconfigure cradle content ]--------------------------\n      // collect modified content\n\n      var updatedContentList,\n          deletedContentItems = [];\n\n      if (listStartChangeCount || listEndChangeCount) {\n        // if either is non-0 then modify content\n        var _ref7 = (0, contentfunctions_1.getCellFrameComponentList)({\n          cacheHandler: cacheHandler,\n          cradleInheritedProperties: cradleInheritedProperties,\n          cradleInternalProperties: cradleInternalProperties,\n          cradleContentCount: cradleContentCount,\n          workingContentList: modelcontentlist,\n          listStartChangeCount: listStartChangeCount,\n          listEndChangeCount: listEndChangeCount,\n          cradleReferenceIndex: oldCradleReferenceIndex,\n          instanceIdCounterRef: _this.instanceIdCounterRef\n        });\n\n        var _ref8 = _slicedToArray(_ref7, 2);\n\n        updatedContentList = _ref8[0];\n        deletedContentItems = _ref8[1];\n      } else {\n        updatedContentList = modelcontentlist;\n      }\n\n      if (deletedContentItems.length && cache == 'cradle') {\n        (0, contentfunctions_1.deletePortals)(cacheHandler, deletedContentItems, serviceHandler.callbacks.cacheDeleteListCallback);\n      } // ----------------------------------[ 5. allocate cradle content ]--------------------------\n\n\n      var _ref9 = (0, contentfunctions_1.allocateContentList)({\n        contentlist: updatedContentList,\n        axisReferenceIndex: axisReferenceIndex\n      }),\n          _ref10 = _slicedToArray(_ref9, 2),\n          headcontent = _ref10[0],\n          tailcontent = _ref10[1];\n\n      cradleContent.cradleModelComponents = updatedContentList;\n      cradleContent.headModelComponents = headcontent;\n      cradleContent.tailModelComponents = tailcontent;\n\n      if (serviceHandler.callbacks.referenceIndexCallback) {\n        var cstate = stateHandler.cradleStateRef.current;\n        serviceHandler.callbacks.referenceIndexCallback(scaffoldHandler.cradlePositionData.targetAxisReferenceIndex, 'updateCradleContent', cstate);\n      } // -------------------------------[ 6. set css changes ]-------------------------\n\n\n      var axisElement = cradleElements.axisRef.current;\n      var headElement = cradleElements.headRef.current;\n\n      if (cradleInheritedProperties.orientation == 'vertical') {\n        var topPos = scrollPos + axisPixelOffset;\n        axisElement.style.top = topPos + 'px';\n        axisElement.style.left = 'auto';\n        headElement.style.paddingBottom = headcontent.length ? cradleInheritedProperties.gap + 'px' : 0;\n      } else {\n        // 'horizontal'\n        var leftPos = scrollPos + axisPixelOffset;\n        axisElement.style.top = 'auto';\n        axisElement.style.left = leftPos + 'px';\n        headElement.style.paddingRight = headcontent.length ? cradleInheritedProperties.gap + 'px' : 0;\n      }\n\n      var cradlePositionData = scaffoldHandler.cradlePositionData;\n      cradlePositionData.targetAxisReferenceIndex = axisReferenceIndex;\n      cradlePositionData.targetAxisPixelOffset = axisPixelOffset;\n      stateHandler.setCradleState('renderupdatedcontent');\n    };\n\n    this.guardAgainstRunawayCaching = function () {\n      var cacheMax = _this.cradleParameters.cradleInheritedPropertiesRef.current.cacheMax;\n      var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n          contentHandler = _this$cradleParameter2.contentHandler,\n          cacheHandler = _this$cradleParameter2.cacheHandler;\n      var modelComponentList = contentHandler.content.cradleModelComponents;\n\n      if (cacheHandler.guardAgainstRunawayCaching(cacheMax, modelComponentList.length)) {\n        _this.pareCacheToMax();\n      }\n    };\n\n    this.pareCacheToMax = function () {\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n\n      if (cradleInheritedProperties.cache == 'keepload') {\n        var cradleHandlers = _this.cradleParameters.handlersRef.current;\n        var cacheHandler = cradleHandlers.cacheHandler,\n            serviceHandler = cradleHandlers.serviceHandler;\n\n        var modelIndexList = _this.getModelIndexList();\n\n        var paring = cacheHandler.pareCacheToMax(cradleInheritedProperties.cacheMax, modelIndexList, serviceHandler.callbacks.cacheDeleteListCallback);\n        if (paring) cacheHandler.renderPortalList();\n      }\n    }; // ==========================[ SERVICE SUPPORT ]=======================\n\n\n    this.clearCache = function () {\n      var cradleContent = _this.content;\n      var cacheHandler = _this.cradleParameters.handlersRef.current.cacheHandler;\n      cradleContent.headModelComponents = [];\n      cradleContent.tailModelComponents = []; // register new array id for Object.is to trigger react re-processing\n\n      cradleContent.headDisplayComponents = [];\n      cradleContent.tailDisplayComponents = [];\n      cacheHandler.clearCache();\n    };\n\n    this.cradleParameters = cradleParameters;\n  }\n\n  _createClass(ContentHandler, [{\n    key: \"getModelIndexList\",\n    value: function getModelIndexList() {\n      var cradleModelComponents = this.content.cradleModelComponents;\n\n      if (!cradleModelComponents) {\n        return [];\n      } else {\n        return cradleModelComponents.map(function (item) {\n          return item.props.index;\n        });\n      }\n    }\n  }, {\n    key: \"updateCellFrames\",\n    value: function updateCellFrames(modifiedCellFrameMap) {\n      // console.log('contentHandler got modifiedCellFrameMap',modifiedCellFrameMap)\n      if (!modifiedCellFrameMap.size) return;\n      var stateHandler = this.cradleParameters.handlersRef.current.stateHandler;\n      var _this$content = this.content,\n          cradleModelComponents = _this$content.cradleModelComponents,\n          headModelComponents = _this$content.headModelComponents,\n          tailModelComponents = _this$content.tailModelComponents,\n          headDisplayComponents = _this$content.headDisplayComponents,\n          tailDisplayComponents = _this$content.tailDisplayComponents;\n\n      function processComponent(component, i, array) {\n        var instanceID = component.props.instanceID;\n\n        if (modifiedCellFrameMap.has(instanceID)) {\n          array[i] = modifiedCellFrameMap.get(instanceID);\n        }\n      }\n\n      cradleModelComponents.forEach(processComponent);\n      headModelComponents.forEach(processComponent);\n      tailModelComponents.forEach(processComponent);\n      this.content.headDisplayComponents = headModelComponents;\n      this.content.tailDisplayComponents = tailModelComponents;\n      stateHandler.setCradleState('applycellframechanges');\n    }\n  }, {\n    key: \"changeCradleCacheItemIDs\",\n    value: function changeCradleCacheItemIDs(changeList) {\n      if (changeList.length == 0) return;\n      var cacheHandler = this.cradleParameters.handlersRef.current.cacheHandler;\n      var _cacheHandler$cachePr = cacheHandler.cacheProps,\n          indexToItemIDMap = _cacheHandler$cachePr.indexToItemIDMap,\n          metadataMap = _cacheHandler$cachePr.metadataMap; // console.log('==> changeCradleCacheItemIDs: changeList, indexToItemIDMap, metadataMap', \n      //     changeList, indexToItemIDMap, metadataMap)\n\n      var _this$content2 = this.content,\n          cradleModelComponents = _this$content2.cradleModelComponents,\n          headModelComponents = _this$content2.headModelComponents,\n          tailModelComponents = _this$content2.tailModelComponents;\n\n      function processcomponent(component, i, array) {\n        var index = component.props.index;\n        var ptr = changeList.indexOf(index); // console.log('processing array index, cache index, change position', \n        //     i, index, ptr)\n\n        if (ptr != -1) {\n          var cacheItemID = indexToItemIDMap.get(index); // console.log('new cacheItemID, old cacheItemID', cacheItemID, component.props.cacheItemID )\n\n          array[i] = react_1[\"default\"].cloneElement(component, {\n            cacheItemID: cacheItemID\n          });\n        }\n      }\n\n      cradleModelComponents.forEach(processcomponent);\n      headModelComponents.forEach(processcomponent);\n      tailModelComponents.forEach(processcomponent);\n      this.content.headDisplayComponents = headModelComponents;\n      this.content.tailDisplayComponents = tailModelComponents;\n    }\n  }, {\n    key: \"createNewCacheItemIDs\",\n    value: function createNewCacheItemIDs(newList) {\n      var cacheHandler = this.cradleParameters.handlersRef.current.cacheHandler;\n      var _this$content3 = this.content,\n          cradleModelComponents = _this$content3.cradleModelComponents,\n          headModelComponents = _this$content3.headModelComponents,\n          tailModelComponents = _this$content3.tailModelComponents;\n\n      function processcomponent(component, i, array) {\n        var index = component.props.index;\n        var ptr = newList.indexOf(index);\n\n        if (ptr != -1) {\n          var newCacheItemID = cacheHandler.getNewCacheItemID();\n          array[i] = react_1[\"default\"].cloneElement(component, {\n            newCacheItemID: newCacheItemID\n          });\n        }\n      }\n\n      cradleModelComponents.forEach(processcomponent);\n      headModelComponents.forEach(processcomponent);\n      tailModelComponents.forEach(processcomponent);\n      this.content.headDisplayComponents = headModelComponents;\n      this.content.tailDisplayComponents = tailModelComponents;\n    }\n  }]);\n\n  return ContentHandler;\n}();\n\nexports[\"default\"] = ContentHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contenthandler.tsx\n");

/***/ }),

/***/ "./src/cradle/interrupthandler.tsx":
/*!*****************************************!*\
  !*** ./src/cradle/interrupthandler.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(" // interruptshandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    TODO: trigger reposition if triggerline entries come back with isIntersecting the same for both\n*/\n\nvar resize_observer_1 = __webpack_require__(/*! @juggle/resize-observer */ \"./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n\nvar ResizeObserver = window['ResizeObserver'] || resize_observer_1.ResizeObserver;\n\nvar InterruptHandler = /*#__PURE__*/_createClass(function InterruptHandler(cradleParameters) {\n  var _this = this;\n\n  _classCallCheck(this, InterruptHandler);\n\n  this.isTailCradleInView = false;\n  this.isHeadCradleInView = false; // TODO: stub\n\n  this.cradleresizeobservercallback = function (entries) {\n    if (_this.signals.pauseCradleResizeObserver) return;\n  };\n\n  this.axisTriggerlinesObserverCallback = function (entries) {\n    if (_this.signals.pauseTriggerlinesObserver) {\n      // console.log('returning from axisTriggerlinesObserverCallback with pause!')\n      return;\n    }\n\n    var testrootbounds = entries[0].rootBounds;\n\n    if (testrootbounds.width == 0 && testrootbounds.height == 0) {\n      // reparenting\n      return;\n    }\n\n    var _this$cradleParameter = _this.cradleParameters.handlersRef.current,\n        contentHandler = _this$cradleParameter.contentHandler,\n        stateHandler = _this$cradleParameter.stateHandler,\n        scrollHandler = _this$cradleParameter.scrollHandler;\n\n    if (stateHandler.isMountedRef.current) {\n      var scrollData = scrollHandler.scrollData;\n\n      if (scrollData.start != scrollData.current || scrollData.current != scrollData.previous) {\n        scrollData.previousupdate = scrollData.currentupdate;\n        scrollData.currentupdate = scrollData.current;\n        var isViewportScrollingForward;\n\n        if (scrollData.previousupdate == scrollData.currentupdate) {\n          isViewportScrollingForward = scrollData.previous < scrollData.current;\n        } else {\n          isViewportScrollingForward = scrollData.previousupdate < scrollData.currentupdate;\n        }\n\n        contentHandler.updateCradleContent(isViewportScrollingForward, entries, 'triggerlinesObserver');\n      }\n    }\n  };\n\n  this.cradleIntersectionObserverCallback = function (entries) {\n    var _a;\n\n    var signals = _this.signals;\n    var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n        stateHandler = _this$cradleParameter2.stateHandler,\n        contentHandler = _this$cradleParameter2.contentHandler;\n\n    if (signals.pauseCradleIntersectionObserver) {\n      return;\n    }\n\n    for (var i = 0; i < entries.length; i++) {\n      var entry = entries[i];\n\n      if (entry.target.dataset.type == 'head') {\n        _this.isHeadCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n        ;\n      } else {\n        _this.isTailCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n        ;\n      }\n    }\n\n    _this.signals.repositioningRequired = !_this.isHeadCradleInView && !_this.isTailCradleInView;\n    var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n\n    if (_this.signals.repositioningRequired) // start reposition if no other interrupts are underway\n      {\n        var cradleState = stateHandler.cradleStateRef.current;\n\n        if (!viewportInterruptProperties.isResizing && !((_a = viewportInterruptProperties.isReparentingRef) === null || _a === void 0 ? void 0 : _a.current) && !(cradleState == 'repositioningRender') && !(cradleState == 'repositioningContinuation') && !(cradleState == 'renderupdatedcontent') && // TODO: *TEST*\n        !(cradleState == 'finishupdatedcontent') && !(cradleState == 'finishresize') && !(cradleState == 'doreposition') && !(cradleState == 'pivot')) {\n          var element = viewportInterruptProperties.elementRef.current;\n          var scrollerID = _this.cradleParameters.cradleInheritedPropertiesRef.current.scrollerID;\n\n          if (!element) {\n            console.log('SYSTEM: viewport element not set in cradleIntersectionObserverCallback', scrollerID, viewportInterruptProperties);\n            return;\n          } // TODO this is a duplicate setting procedure with viewport.tsx\n\n\n          var rect = element.getBoundingClientRect();\n          var top = rect.top,\n              right = rect.right,\n              bottom = rect.bottom,\n              left = rect.left;\n          var width = right - left,\n              height = bottom - top;\n          viewportInterruptProperties.viewportDimensions = {\n            top: top,\n            right: right,\n            bottom: bottom,\n            left: left,\n            width: width,\n            height: height\n          }; // update for scrolltracker\n          // console.log('calling startreposition from cradleIntersectionObserverCallback:scrollerID, entries',\n          //  '-' + scrollerID + '-', entries)\n          // debugger\n\n          stateHandler.setCradleState('startreposition');\n        }\n      }\n  }; // for adjusting to content re-sizing\n\n\n  this.cradleResize = {\n    observer: null,\n    callback: this.cradleresizeobservercallback,\n    connectElements: function connectElements() {\n      var observer = _this.cradleResize.observer;\n      var cradleElements = _this.cradleParameters.handlersRef.current.scaffoldHandler.elements;\n      observer.observe(cradleElements.headRef.current);\n      observer.observe(cradleElements.tailRef.current);\n    },\n    createObserver: function createObserver() {\n      _this.cradleResize.observer = new ResizeObserver(_this.cradleResize.callback);\n      return _this.cradleResize.observer;\n    }\n  };\n  this.cradleIntersect = {\n    observer: null,\n    callback: this.cradleIntersectionObserverCallback,\n    connectElements: function connectElements() {\n      var observer = _this.cradleIntersect.observer;\n      var cradleElements = _this.cradleParameters.handlersRef.current.scaffoldHandler.elements;\n      observer.observe(cradleElements.headRef.current);\n      observer.observe(cradleElements.tailRef.current);\n    },\n    createObserver: function createObserver() {\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      _this.cradleIntersect.observer = new IntersectionObserver(_this.cradleIntersect.callback, {\n        root: viewportInterruptProperties.elementRef.current,\n        threshold: 0\n      });\n      return _this.cradleIntersect.observer;\n    }\n  };\n  this.axisTriggerlinesIntersect = {\n    observer: null,\n    callback: this.axisTriggerlinesObserverCallback,\n    connectElements: function connectElements() {\n      var observer = _this.axisTriggerlinesIntersect.observer;\n      var cradleElements = _this.cradleParameters.handlersRef.current.scaffoldHandler.elements;\n      observer.observe(cradleElements.headTriggerlineRef.current);\n      observer.observe(cradleElements.tailTriggerlineRef.current);\n    },\n    createObserver: function createObserver() {\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      _this.axisTriggerlinesIntersect.observer = new IntersectionObserver(_this.axisTriggerlinesIntersect.callback, {\n        root: viewportInterruptProperties.elementRef.current,\n        threshold: 0\n      });\n      return _this.axisTriggerlinesIntersect.observer;\n    }\n  };\n  this.signals = {\n    repositioningRequired: false,\n    pauseTriggerlinesObserver: false,\n    pauseCradleIntersectionObserver: false,\n    pauseCradleResizeObserver: false,\n    pauseScrollingEffects: false\n  };\n\n  this.pauseInterrupts = function () {\n    var signals = _this.signals;\n    signals.pauseTriggerlinesObserver = true;\n    signals.pauseCradleIntersectionObserver = true;\n    signals.pauseCradleResizeObserver = true;\n    signals.pauseScrollingEffects = true;\n  };\n\n  this.restoreInterrupts = function () {\n    var signals = _this.signals;\n    signals.pauseTriggerlinesObserver = false;\n    signals.pauseCradleIntersectionObserver = false;\n    signals.pauseCradleResizeObserver = false;\n    signals.pauseScrollingEffects = false;\n  };\n\n  this.cradleParameters = cradleParameters;\n});\n\nexports[\"default\"] = InterruptHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/interrupthandler.tsx\n");

/***/ }),

/***/ "./src/cradle/scaffoldhandler.tsx":
/*!****************************************!*\
  !*** ./src/cradle/scaffoldhandler.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // cradlehandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar ScaffoldHandler = /*#__PURE__*/function () {\n  function ScaffoldHandler(cradleParameters) {\n    _classCallCheck(this, ScaffoldHandler);\n\n    // cradlePositionData controls the relative positions of the scaffold elements\n    this.cradlePositionData = {\n      /*\n          \"block\" = cradleblock, which is the element that is scrolled\n               blockScrollPos is set by scrollHandler during and after scrolling,\n          and by setCradleContent in contentHandler, which repositions the cradle.\n               blockScrollPos is used by\n              - cradle initialization in response to reparenting interrupt\n              - setCradleContent\n           */\n      blockScrollPos: null,\n\n      /*\n          values can be \"scrollTop\" or \"scrollLeft\" (of the viewport element) depending on orientation\n               blockScrollProperty is set by the orientation reconfiguration effect in cradle module.\n               it is used where blockScrollPos is used above.\n      */\n      blockScrollProperty: null,\n\n      /*\n          targetAxisReferenceIndex is set by\n              - setCradleContent\n              - updateCradleContent\n              - scaffoldHandler (initialization)\n              - scrollHandler (during and after scroll)\n              - host scrollToItem call\n               targetAxisReferenceIndex is used by\n              - scrollTrackerArgs in cradle module\n              - requestedAxisReferenceIndex in setCradleContent\n      */\n      targetAxisReferenceIndex: null,\n\n      /*\n          targetAxisPixelOffset is set by\n              - setCradleContent\n              - updateCradleContent\n              - scaffoldHandler (initialization)\n              - scrollHandler (during and after scroll)\n              - pivot effect (change of orientation) in cradle module\n               targetAxisPixelOffset is used by\n              - previousAxisOffset in pivot effect\n              - setCradleContent\n           */\n      targetAxisPixelOffset: null\n    };\n    this.cradleParameters = cradleParameters;\n    var _cradleParameters$cra = cradleParameters.cradleInternalPropertiesRef.current.cradleElementsRef.current,\n        axisRef = _cradleParameters$cra.axisRef,\n        headRef = _cradleParameters$cra.headRef,\n        tailRef = _cradleParameters$cra.tailRef,\n        headTriggerlineRef = _cradleParameters$cra.headTriggerlineRef,\n        tailTriggerlineRef = _cradleParameters$cra.tailTriggerlineRef;\n    this.elements = {\n      axisRef: axisRef,\n      headRef: headRef,\n      tailRef: tailRef,\n      headTriggerlineRef: headTriggerlineRef,\n      tailTriggerlineRef: tailTriggerlineRef\n    };\n    var _this$cradleParameter = this.cradleParameters.cradleInheritedPropertiesRef.current,\n        startingIndex = _this$cradleParameter.startingIndex,\n        padding = _this$cradleParameter.padding;\n    var listsize = this.cradleParameters.cradleInternalPropertiesRef.current.listsize; // progression of references: implied->target\n\n    this.cradlePositionData.targetAxisReferenceIndex = Math.min(startingIndex, listsize - 1) || 0;\n    this.cradlePositionData.targetAxisPixelOffset = 0;\n  }\n\n  _createClass(ScaffoldHandler, [{\n    key: \"getViewportDimensions\",\n    value: function getViewportDimensions() {\n      var viewportElement = this.cradleParameters.viewportInterruptPropertiesRef.current.elementRef.current;\n      return {\n        width: viewportElement.clientWidth,\n        height: viewportElement.clientHeight\n      };\n    }\n  }]);\n\n  return ScaffoldHandler;\n}();\n\nexports[\"default\"] = ScaffoldHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3NjYWZmb2xkaGFuZGxlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7QUFDQTs7Ozs7Ozs7Ozs7O0lBRXFCQSxlO0VBRWpCLHlCQUFZQyxnQkFBWixFQUE0QjtJQUFBOztJQXdDNUI7SUFDTywwQkFBcUI7TUFFeEI7Ozs7Ozs7O01BV0FDLGNBQWMsRUFBQyxJQWJTOztNQWV4Qjs7Ozs7TUFPQUMsbUJBQW1CLEVBQUMsSUF0Qkk7O01Bd0J4Qjs7Ozs7Ozs7Ozs7TUFZQUMsd0JBQXdCLEVBQUMsSUFwQ0Q7O01Bc0N4Qjs7Ozs7Ozs7Ozs7TUFhQUMscUJBQXFCLEVBQUM7SUFuREUsQ0FBckI7SUF2Q0gsS0FBS0osZ0JBQUwsR0FBd0JBLGdCQUF4QjtJQUVBLDRCQU1JQSxnQkFBZ0IsQ0FBQ0ssMkJBQWpCLENBQTZDQyxPQUE3QyxDQUFxREMsaUJBQXJELENBQXVFRCxPQU4zRTtJQUFBLElBQ0lFLE9BREoseUJBQ0lBLE9BREo7SUFBQSxJQUVJQyxPQUZKLHlCQUVJQSxPQUZKO0lBQUEsSUFHSUMsT0FISix5QkFHSUEsT0FISjtJQUFBLElBSUlDLGtCQUpKLHlCQUlJQSxrQkFKSjtJQUFBLElBS0lDLGtCQUxKLHlCQUtJQSxrQkFMSjtJQVFBLEtBQUtDLFFBQUwsR0FBZ0I7TUFDWkwsT0FBTyxFQUFQQSxPQURZO01BRVpDLE9BQU8sRUFBUEEsT0FGWTtNQUdaQyxPQUFPLEVBQVBBLE9BSFk7TUFJWkMsa0JBQWtCLEVBQWxCQSxrQkFKWTtNQUtaQyxrQkFBa0IsRUFBbEJBO0lBTFksQ0FBaEI7SUFRQSw0QkFHSSxLQUFLWixnQkFBTCxDQUFzQmMsNEJBQXRCLENBQW1EUixPQUh2RDtJQUFBLElBQ0lTLGFBREoseUJBQ0lBLGFBREo7SUFBQSxJQUVJQyxPQUZKLHlCQUVJQSxPQUZKO0lBS0EsSUFDSUMsUUFESixHQUVJLEtBQUtqQixnQkFBTCxDQUFzQkssMkJBQXRCLENBQWtEQyxPQUZ0RCxDQUNJVyxRQURKLENBekJ3QixDQTZCeEI7O0lBQ0EsS0FBS0Msa0JBQUwsQ0FBd0JmLHdCQUF4QixHQUNLZ0IsSUFBSSxDQUFDQyxHQUFMLENBQVNMLGFBQVQsRUFBd0JFLFFBQVEsR0FBRyxDQUFuQyxLQUEwQyxDQUQvQztJQUVBLEtBQUtDLGtCQUFMLENBQXdCZCxxQkFBeEIsR0FBZ0QsQ0FBaEQ7RUFFSDs7OztXQWdFTSxpQ0FBcUI7TUFDeEIsSUFBTWlCLGVBQWUsR0FBRyxLQUFLckIsZ0JBQUwsQ0FBc0JzQiw4QkFBdEIsQ0FBcURoQixPQUFyRCxDQUE2RGlCLFVBQTdELENBQXdFakIsT0FBaEc7TUFDQSxPQUFPO1FBQUNrQixLQUFLLEVBQUNILGVBQWUsQ0FBQ0ksV0FBdkI7UUFBb0NDLE1BQU0sRUFBRUwsZUFBZSxDQUFDTTtNQUE1RCxDQUFQO0lBQ0g7Ozs7OztBQXZHTEMsa0JBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9jcmFkbGUvc2NhZmZvbGRoYW5kbGVyLnRzeD9mYzJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGNyYWRsZWhhbmRsZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMjEgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NhZmZvbGRIYW5kbGVyIHsgXG5cbiAgICBjb25zdHJ1Y3RvcihjcmFkbGVQYXJhbWV0ZXJzKSB7XG5cbiAgICAgICAgdGhpcy5jcmFkbGVQYXJhbWV0ZXJzID0gY3JhZGxlUGFyYW1ldGVyc1xuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGF4aXNSZWYsIFxuICAgICAgICAgICAgaGVhZFJlZiwgXG4gICAgICAgICAgICB0YWlsUmVmLFxuICAgICAgICAgICAgaGVhZFRyaWdnZXJsaW5lUmVmLFxuICAgICAgICAgICAgdGFpbFRyaWdnZXJsaW5lUmVmXG4gICAgICAgIH0gPSBjcmFkbGVQYXJhbWV0ZXJzLmNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZi5jdXJyZW50LmNyYWRsZUVsZW1lbnRzUmVmLmN1cnJlbnRcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSB7XG4gICAgICAgICAgICBheGlzUmVmLFxuICAgICAgICAgICAgaGVhZFJlZixcbiAgICAgICAgICAgIHRhaWxSZWYsXG4gICAgICAgICAgICBoZWFkVHJpZ2dlcmxpbmVSZWYsXG4gICAgICAgICAgICB0YWlsVHJpZ2dlcmxpbmVSZWZcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0YXJ0aW5nSW5kZXgsIFxuICAgICAgICAgICAgcGFkZGluZ1xuICAgICAgICB9ID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLmNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXNSZWYuY3VycmVudFxuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGxpc3RzaXplLFxuICAgICAgICB9ID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLmNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZi5jdXJyZW50XG5cbiAgICAgICAgLy8gcHJvZ3Jlc3Npb24gb2YgcmVmZXJlbmNlczogaW1wbGllZC0+dGFyZ2V0XG4gICAgICAgIHRoaXMuY3JhZGxlUG9zaXRpb25EYXRhLnRhcmdldEF4aXNSZWZlcmVuY2VJbmRleCA9IFxuICAgICAgICAgICAgKE1hdGgubWluKHN0YXJ0aW5nSW5kZXgsKGxpc3RzaXplIC0gMSkpIHx8IDApXG4gICAgICAgIHRoaXMuY3JhZGxlUG9zaXRpb25EYXRhLnRhcmdldEF4aXNQaXhlbE9mZnNldCA9IDBcblxuICAgIH1cblxuICAgIHByaXZhdGUgY3JhZGxlUGFyYW1ldGVyc1xuXG4gICAgcHVibGljIHRyaWdnZXJsaW5lU3BhblxuXG4gICAgLy8gY3JhZGxlUG9zaXRpb25EYXRhIGNvbnRyb2xzIHRoZSByZWxhdGl2ZSBwb3NpdGlvbnMgb2YgdGhlIHNjYWZmb2xkIGVsZW1lbnRzXG4gICAgcHVibGljIGNyYWRsZVBvc2l0aW9uRGF0YSA9IHtcblxuICAgICAgICAvKlxuICAgICAgICAgICAgXCJibG9ja1wiID0gY3JhZGxlYmxvY2ssIHdoaWNoIGlzIHRoZSBlbGVtZW50IHRoYXQgaXMgc2Nyb2xsZWRcblxuICAgICAgICAgICAgYmxvY2tTY3JvbGxQb3MgaXMgc2V0IGJ5IHNjcm9sbEhhbmRsZXIgZHVyaW5nIGFuZCBhZnRlciBzY3JvbGxpbmcsXG4gICAgICAgICAgICBhbmQgYnkgc2V0Q3JhZGxlQ29udGVudCBpbiBjb250ZW50SGFuZGxlciwgd2hpY2ggcmVwb3NpdGlvbnMgdGhlIGNyYWRsZS5cblxuICAgICAgICAgICAgYmxvY2tTY3JvbGxQb3MgaXMgdXNlZCBieVxuICAgICAgICAgICAgICAgIC0gY3JhZGxlIGluaXRpYWxpemF0aW9uIGluIHJlc3BvbnNlIHRvIHJlcGFyZW50aW5nIGludGVycnVwdFxuICAgICAgICAgICAgICAgIC0gc2V0Q3JhZGxlQ29udGVudFxuXG4gICAgICAgICovXG4gICAgICAgIGJsb2NrU2Nyb2xsUG9zOm51bGwsXG5cbiAgICAgICAgLypcbiAgICAgICAgICAgIHZhbHVlcyBjYW4gYmUgXCJzY3JvbGxUb3BcIiBvciBcInNjcm9sbExlZnRcIiAob2YgdGhlIHZpZXdwb3J0IGVsZW1lbnQpIGRlcGVuZGluZyBvbiBvcmllbnRhdGlvblxuXG4gICAgICAgICAgICBibG9ja1Njcm9sbFByb3BlcnR5IGlzIHNldCBieSB0aGUgb3JpZW50YXRpb24gcmVjb25maWd1cmF0aW9uIGVmZmVjdCBpbiBjcmFkbGUgbW9kdWxlLlxuXG4gICAgICAgICAgICBpdCBpcyB1c2VkIHdoZXJlIGJsb2NrU2Nyb2xsUG9zIGlzIHVzZWQgYWJvdmUuXG4gICAgICAgICovXG4gICAgICAgIGJsb2NrU2Nyb2xsUHJvcGVydHk6bnVsbCxcblxuICAgICAgICAvKlxuICAgICAgICAgICAgdGFyZ2V0QXhpc1JlZmVyZW5jZUluZGV4IGlzIHNldCBieVxuICAgICAgICAgICAgICAgIC0gc2V0Q3JhZGxlQ29udGVudFxuICAgICAgICAgICAgICAgIC0gdXBkYXRlQ3JhZGxlQ29udGVudFxuICAgICAgICAgICAgICAgIC0gc2NhZmZvbGRIYW5kbGVyIChpbml0aWFsaXphdGlvbilcbiAgICAgICAgICAgICAgICAtIHNjcm9sbEhhbmRsZXIgKGR1cmluZyBhbmQgYWZ0ZXIgc2Nyb2xsKVxuICAgICAgICAgICAgICAgIC0gaG9zdCBzY3JvbGxUb0l0ZW0gY2FsbFxuXG4gICAgICAgICAgICB0YXJnZXRBeGlzUmVmZXJlbmNlSW5kZXggaXMgdXNlZCBieVxuICAgICAgICAgICAgICAgIC0gc2Nyb2xsVHJhY2tlckFyZ3MgaW4gY3JhZGxlIG1vZHVsZVxuICAgICAgICAgICAgICAgIC0gcmVxdWVzdGVkQXhpc1JlZmVyZW5jZUluZGV4IGluIHNldENyYWRsZUNvbnRlbnRcbiAgICAgICAgKi9cbiAgICAgICAgdGFyZ2V0QXhpc1JlZmVyZW5jZUluZGV4Om51bGwsXG5cbiAgICAgICAgLypcbiAgICAgICAgICAgIHRhcmdldEF4aXNQaXhlbE9mZnNldCBpcyBzZXQgYnlcbiAgICAgICAgICAgICAgICAtIHNldENyYWRsZUNvbnRlbnRcbiAgICAgICAgICAgICAgICAtIHVwZGF0ZUNyYWRsZUNvbnRlbnRcbiAgICAgICAgICAgICAgICAtIHNjYWZmb2xkSGFuZGxlciAoaW5pdGlhbGl6YXRpb24pXG4gICAgICAgICAgICAgICAgLSBzY3JvbGxIYW5kbGVyIChkdXJpbmcgYW5kIGFmdGVyIHNjcm9sbClcbiAgICAgICAgICAgICAgICAtIHBpdm90IGVmZmVjdCAoY2hhbmdlIG9mIG9yaWVudGF0aW9uKSBpbiBjcmFkbGUgbW9kdWxlXG5cbiAgICAgICAgICAgIHRhcmdldEF4aXNQaXhlbE9mZnNldCBpcyB1c2VkIGJ5XG4gICAgICAgICAgICAgICAgLSBwcmV2aW91c0F4aXNPZmZzZXQgaW4gcGl2b3QgZWZmZWN0XG4gICAgICAgICAgICAgICAgLSBzZXRDcmFkbGVDb250ZW50XG5cbiAgICAgICAgKi9cbiAgICAgICAgdGFyZ2V0QXhpc1BpeGVsT2Zmc2V0Om51bGwsXG5cbiAgICB9XG5cbiAgICBwdWJsaWMgZWxlbWVudHNcblxuICAgIHB1YmxpYyBnZXRWaWV3cG9ydERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGNvbnN0IHZpZXdwb3J0RWxlbWVudCA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy52aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYuY3VycmVudC5lbGVtZW50UmVmLmN1cnJlbnRcbiAgICAgICAgcmV0dXJuIHt3aWR0aDp2aWV3cG9ydEVsZW1lbnQuY2xpZW50V2lkdGgsIGhlaWdodDogdmlld3BvcnRFbGVtZW50LmNsaWVudEhlaWdodH1cbiAgICB9XG5cbn0iXSwibmFtZXMiOlsiU2NhZmZvbGRIYW5kbGVyIiwiY3JhZGxlUGFyYW1ldGVycyIsImJsb2NrU2Nyb2xsUG9zIiwiYmxvY2tTY3JvbGxQcm9wZXJ0eSIsInRhcmdldEF4aXNSZWZlcmVuY2VJbmRleCIsInRhcmdldEF4aXNQaXhlbE9mZnNldCIsImNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZiIsImN1cnJlbnQiLCJjcmFkbGVFbGVtZW50c1JlZiIsImF4aXNSZWYiLCJoZWFkUmVmIiwidGFpbFJlZiIsImhlYWRUcmlnZ2VybGluZVJlZiIsInRhaWxUcmlnZ2VybGluZVJlZiIsImVsZW1lbnRzIiwiY3JhZGxlSW5oZXJpdGVkUHJvcGVydGllc1JlZiIsInN0YXJ0aW5nSW5kZXgiLCJwYWRkaW5nIiwibGlzdHNpemUiLCJjcmFkbGVQb3NpdGlvbkRhdGEiLCJNYXRoIiwibWluIiwidmlld3BvcnRFbGVtZW50Iiwidmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzUmVmIiwiZWxlbWVudFJlZiIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJoZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cradle/scaffoldhandler.tsx\n");

/***/ }),

/***/ "./src/cradle/scrollhandler.tsx":
/*!**************************************!*\
  !*** ./src/cradle/scrollhandler.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // scrollhandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar SCROLL_TIMEOUT_FOR_ONAFTERSCROLL = 500;\n\nvar ScrollHandler = /*#__PURE__*/_createClass(function ScrollHandler(cradleParameters) {\n  var _this = this;\n\n  _classCallCheck(this, ScrollHandler);\n\n  this.scrollData = {\n    start: 0,\n    current: 0,\n    previous: 0,\n    previousupdate: 0,\n    currentupdate: 0\n  };\n  this._scrolltimerid = null;\n  this.isScrolling = false;\n\n  this.onScroll = function (e) {\n    var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n    var viewportElement = viewportInterruptProperties.elementRef.current;\n\n    if (viewportElement.clientWidth == 0 && viewportElement.clientHeight == 0) {\n      // in cache\n      clearTimeout(_this._scrolltimerid);\n      return;\n    }\n\n    var scrollPositionCurrent = _this.cradleParameters.cradleInheritedPropertiesRef.current.orientation == 'vertical' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n    var scrollerID = _this.cradleParameters.cradleInheritedPropertiesRef.current.scrollerID; // console.log('scrollPositionCurrent in onScroll','-'+scrollerID+'-' ,scrollPositionCurrent)\n\n    if (scrollPositionCurrent < 0) {\n      // for Safari\n      return;\n    }\n\n    clearTimeout(_this._scrolltimerid);\n    var signals = _this.cradleParameters.handlersRef.current.interruptHandler.signals;\n\n    if (signals.pauseScrollingEffects) {\n      return;\n    }\n\n    if (!_this.isScrolling) {\n      _this.isScrolling = true;\n      _this.scrollData.start = scrollPositionCurrent;\n      _this.scrollData.currentupdate = scrollPositionCurrent;\n    }\n\n    var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffoldHandler;\n    var cradlePositionData = scaffoldHandler.cradlePositionData; // keep up to date in case of reparenting interrupt\n\n    cradlePositionData.blockScrollPos = scrollPositionCurrent;\n    _this.scrollData.previous = _this.scrollData.current;\n    _this.scrollData.current = scrollPositionCurrent;\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler;\n    var cradleState = stateHandler.cradleStateRef.current;\n    var _this$cradleParameter = _this.cradleParameters.handlersRef.current,\n        contentHandler = _this$cradleParameter.contentHandler,\n        serviceHandler = _this$cradleParameter.serviceHandler;\n\n    if (!viewportInterruptProperties.isResizing) {\n      if (cradleState == 'ready' || cradleState == 'repositioningRender' || cradleState == 'repositioningContinuation') {\n        if (cradleState == 'ready') {\n          // const itemindex = cradlePositionData.targetAxisReferenceIndex\n          var axisVisiblePixelOffset;\n          var cradleElements = scaffoldHandler.elements;\n          var axisElement = cradleElements.axisRef.current;\n          var _viewportElement = _this.cradleParameters.viewportInterruptPropertiesRef.current.elementRef.current;\n\n          if (_this.cradleParameters.cradleInheritedPropertiesRef.current.orientation == 'vertical') {\n            axisVisiblePixelOffset = axisElement.offsetTop - _viewportElement.scrollTop;\n          } else {\n            axisVisiblePixelOffset = axisElement.offsetLeft - _viewportElement.scrollLeft;\n          } // cradlePositionData.targetAxisReferenceIndex = itemindex\n\n\n          cradlePositionData.targetAxisPixelOffset = axisVisiblePixelOffset;\n        }\n\n        if (cradleState == 'repositioningRender' || cradleState == 'repositioningContinuation') {\n          _this.calcImpliedRepositioningData();\n\n          if (cradleState == 'repositioningRender') stateHandler.setCradleState('repositioningContinuation');\n        }\n      }\n    }\n\n    _this._scrolltimerid = setTimeout(function () {\n      _this.onAfterScroll();\n    }, SCROLL_TIMEOUT_FOR_ONAFTERSCROLL);\n    return false;\n  };\n\n  this.onAfterScroll = function () {\n    _this.isScrolling = false;\n    var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n        stateHandler = _this$cradleParameter2.stateHandler,\n        contentHandler = _this$cradleParameter2.contentHandler,\n        cacheHandler = _this$cradleParameter2.cacheHandler;\n    var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n    var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    var cradleState = stateHandler.cradleStateRef.current;\n\n    switch (cradleState) {\n      case 'repositioningRender':\n      case 'repositioningContinuation':\n        {\n          _this.updateBlockScrollPos();\n\n          stateHandler.setCradleState('doreposition');\n          break;\n        }\n\n      default:\n        {\n          if (_this.scrollData.start != _this.scrollData.current || _this.scrollData.current != _this.scrollData.previous) {\n            if (stateHandler.isMountedRef.current) {\n              _this.updateReferenceData();\n            }\n          }\n        }\n    } // const {scaffoldHandler} = this.cradleParameters.handlersRef.current\n    // const { cradlePositionData } = scaffoldHandler\n\n\n    var cache = cradleInheritedProperties.cache;\n\n    if (cache == 'keepload') {\n      contentHandler.pareCacheToMax();\n    }\n  }; // after scroll, but not after repositioning\n\n\n  this.updateReferenceData = function () {\n    var _this$cradleParameter3 = _this.cradleParameters.handlersRef.current,\n        stateHandler = _this$cradleParameter3.stateHandler,\n        scaffoldHandler = _this$cradleParameter3.scaffoldHandler;\n    var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n    if (!stateHandler.isMountedRef.current) return;\n    var axisVisiblePixelOffset;\n    var cradleElements = scaffoldHandler.elements;\n    var viewportElement = viewportInterruptProperties.elementRef.current;\n\n    if (cradleProps.orientation == 'vertical') {\n      // console.log('scrollTop in updateReferenceData',viewportElement.scrollTop)\n      axisVisiblePixelOffset = cradleElements.axisRef.current.offsetTop - viewportElement.scrollTop;\n    } else {\n      axisVisiblePixelOffset = cradleElements.axisRef.current.offsetLeft - viewportElement.scrollLeft;\n    }\n\n    var cradlePositionData = scaffoldHandler.cradlePositionData;\n    cradlePositionData.targetAxisPixelOffset = axisVisiblePixelOffset;\n\n    if (!viewportInterruptProperties.isResizing) {\n      _this.updateBlockScrollPos();\n    }\n  }; // called from finishreposition state change call above\n  // called from updateReferenceData\n\n\n  this.updateBlockScrollPos = function () {\n    var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n    var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffoldHandler;\n    var cradlePositionData = scaffoldHandler.cradlePositionData;\n    var viewportElement = viewportInterruptProperties.elementRef.current;\n\n    if (!(viewportElement.clientWidth == 0 && viewportElement.clientHeight == 0)) {\n      // in cache\n      if (cradleProps.orientation == 'vertical') {\n        cradlePositionData.blockScrollPos = viewportElement.scrollTop;\n      } else {\n        cradlePositionData.blockScrollPos = viewportElement.scrollLeft;\n      }\n    }\n  };\n\n  this.calcImpliedRepositioningData = function () {\n    var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n    var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    var cradleConfig = _this.cradleParameters.cradleInternalPropertiesRef.current;\n    var crosscount = cradleConfig.crosscount,\n        listsize = cradleConfig.listsize;\n    var viewportElement = viewportInterruptProperties.elementRef.current;\n    var orientation = cradleProps.orientation;\n    var scrollPos, cellLength;\n\n    if (orientation == 'vertical') {\n      scrollPos = viewportElement.scrollTop;\n      cellLength = cradleProps.cellHeight + cradleProps.gap; // console.log('scrollPos in calcImpliedRepositioningData', scrollPos)\n    } else {\n      scrollPos = viewportElement.scrollLeft;\n      cellLength = cradleProps.cellWidth + cradleProps.gap;\n    }\n\n    var axisPixelOffset = cellLength - scrollPos % cellLength;\n\n    if (axisPixelOffset == cellLength + cradleProps.padding) {\n      axisPixelOffset = 0;\n    }\n\n    var axisRowIndex = Math.ceil((scrollPos - cradleProps.padding) / cellLength);\n    var axisReferenceIndex = axisRowIndex * crosscount;\n    axisReferenceIndex = Math.min(axisReferenceIndex, listsize - 1);\n    var diff = axisReferenceIndex % crosscount;\n    axisReferenceIndex -= diff;\n    if (axisReferenceIndex == 0) axisPixelOffset = 0; // defensive\n\n    var cradlePositionData = _this.cradleParameters.handlersRef.current.scaffoldHandler.cradlePositionData;\n    cradlePositionData.targetAxisReferenceIndex = axisReferenceIndex;\n    cradlePositionData.targetAxisPixelOffset = axisPixelOffset;\n  };\n\n  this.cradleParameters = cradleParameters;\n});\n\nexports[\"default\"] = ScrollHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/scrollhandler.tsx\n");

/***/ }),

/***/ "./src/cradle/servicehandler.tsx":
/*!***************************************!*\
  !*** ./src/cradle/servicehandler.tsx ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // servicehandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\")); // ServiceHandler handles client service requests\n\n\nvar ServiceHandler = /*#__PURE__*/_createClass(function ServiceHandler(cradleParameters) {\n  var _this = this;\n\n  _classCallCheck(this, ServiceHandler);\n\n  // ========================[ GENERAL ]============================\n  this.reload = function () {\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler;\n    var interruptHandler = _this.cradleParameters.handlersRef.current.interruptHandler;\n    interruptHandler.pauseInterrupts();\n    stateHandler.setCradleState('reload');\n  };\n\n  this.scrollToItem = function (index) {\n    var signals = _this.cradleParameters.handlersRef.current.interruptHandler.signals;\n    var _this$cradleParameter = _this.cradleParameters.handlersRef.current,\n        scaffoldHandler = _this$cradleParameter.scaffoldHandler,\n        stateHandler = _this$cradleParameter.stateHandler;\n    signals.pauseScrollingEffects = true;\n    scaffoldHandler.cradlePositionData.targetAxisReferenceIndex = index;\n    stateHandler.setCradleState('doreposition');\n  };\n\n  this.setListsize = function (listsize) {\n    var cacheHandler = _this.cradleParameters.handlersRef.current.cacheHandler;\n    cacheHandler.changeListsize(listsize, _this.callbacks.cacheDeleteListCallback);\n  }; // ======================[ GET SNAPSHOTS ]========================\n\n\n  this.getCacheMap = function () {\n    var cacheHandler = _this.cradleParameters.handlersRef.current.cacheHandler;\n    return cacheHandler.getCacheMap();\n  };\n\n  this.getCacheList = function () {\n    var cacheHandler = _this.cradleParameters.handlersRef.current.cacheHandler;\n    return cacheHandler.getCacheList();\n  };\n\n  this.getCradleMap = function () {\n    var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n        cacheHandler = _this$cradleParameter2.cacheHandler,\n        contentHandler = _this$cradleParameter2.contentHandler;\n    var modelIndexList = contentHandler.getModelIndexList();\n    return cacheHandler.getCradleMap(modelIndexList);\n  }; // =================[ CACHE MANAGEMENT REQUESTS ]==================\n\n\n  this.clearCache = function () {\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler;\n    stateHandler.setCradleState('clearcache');\n  }; // blank index values (cacheItemID) are assigned a new \n  // cacheItemID if in the cradle, otherwise removed from the cache.\n  // Duplicate index/itemID pairs have the itemID turned to blank\n  // and are processed by the above rule\n\n\n  this.modifyCacheMap = function (modifyMap) {\n    // console.log('modifyMap in serviceHandler',modifyMap)\n    var modifymapsize = modifyMap.size;\n    if (modifymapsize == 0) return true;\n    var unitIDset = new Set(modifyMap.values());\n    var unitidsetsize = unitIDset.size;\n\n    if (modifymapsize != unitidsetsize) {\n      var modifyUnitIDCount = new Map();\n      modifyMap.forEach(function (cacheUnitID, index) {\n        if (!modifyUnitIDCount.has(cacheUnitID)) {\n          modifyUnitIDCount.set(cacheUnitID, 1);\n        } else {\n          modifyUnitIDCount.set(cacheUnitID, modifyUnitIDCount.get(cacheUnitID) + 1);\n        }\n      });\n      modifyUnitIDCount[\"delete\"](null); // legitimate\n\n      var duplicateunits = new Map();\n      modifyUnitIDCount.forEach(function (count, cacheUnitID) {\n        if (count > 1) {\n          duplicateunits.set(cacheUnitID, count);\n        }\n      });\n\n      if (duplicateunits.size) {\n        console.log('WARNING: modifyCacheMap rejected: \\\n                    duplicate cacheUnitID index assignment values found:\\\n                    duplicateCacheUnitIDs, modifyMap', duplicateunits, modifyMap);\n        return false;\n      }\n    }\n\n    var _this$cradleParameter3 = _this.cradleParameters.handlersRef.current,\n        cacheHandler = _this$cradleParameter3.cacheHandler,\n        contentHandler = _this$cradleParameter3.contentHandler; // apply changes to cache index and cacheItemID maps\n\n    var _cacheHandler$cachePr = cacheHandler.cacheProps,\n        metadataMap = _cacheHandler$cachePr.metadataMap,\n        indexToItemIDMap = _cacheHandler$cachePr.indexToItemIDMap; // const cradleMap = this.getCradleMap() // index to cacheItemID\n\n    var duplicates = new Map();\n    var processed = new Map();\n    var originalitemindex = new Map();\n    var ignored = new Map();\n    var pending = new Map();\n    modifyMap.forEach(function (cacheItemID, index) {\n      if (cacheItemID === null) {\n        pending.set(index, null);\n      } else {\n        if (!indexToItemIDMap.has(index)) {\n          // not in cache\n          ignored.set(index, cacheItemID);\n        } else {\n          if (indexToItemIDMap.get(index) != cacheItemID) {\n            // modification requested\n            indexToItemIDMap.set(index, cacheItemID); // modiication applied, part 1\n\n            var data = metadataMap.get(cacheItemID);\n            originalitemindex.set(cacheItemID, data.index);\n            data.index = index; // modification applied, part 2\n\n            processed.set(index, cacheItemID);\n          }\n        }\n      }\n    }); // console.log('ignored,processed',ignored,processed)\n\n    if (processed.size == 0 && pending.size == 0) return true;\n\n    if (processed.size) {\n      cacheHandler.cacheProps.modified = true;\n      cacheHandler.renderPortalList();\n    } // eliminate duplicate cacheItemIDs in index map\n    // if the original index for the re-assigned cache item still maps to the cache item,\n    // then there is a duplicate\n\n\n    originalitemindex.forEach(function (cacheItemID, index) {\n      if (indexToItemIDMap.has(index) && indexToItemIDMap.get(index) == cacheItemID) {\n        duplicates.set(cacheItemID, index);\n      }\n    });\n    var retval = true;\n\n    if (duplicates.size) {\n      retval = false;\n      console.log('WARNING: original mapping for re-assigned cache item ID(s) was left \\\n                unchanged by modifyCacheMap, creating duplicates:\\\n                \\nduplicates, modifyMap\\n', duplicates, modifyMap, '\\nDuplicates left behind will be cleared.');\n      duplicates.forEach(function (index, cacheItemID) {\n        pending.set(index, null);\n      });\n    }\n\n    if (pending.size) {\n      pending.forEach(function (value, index) {\n        modifyMap.set(index, value); // assert null for cacheItemID\n      });\n    } // apply changes to extant cellFrames\n\n\n    var cradleModelComponents = contentHandler.content.cradleModelComponents;\n    var modifiedCellFrames = new Map();\n    cradleModelComponents.forEach(function (component) {\n      var index = component.props.index;\n\n      if (modifyMap.has(index)) {\n        var cacheItemID = component.props.cacheItemID;\n        var newCacheItemID = modifyMap.get(index);\n\n        if (newCacheItemID === null) {\n          newCacheItemID = cacheHandler.getNewCacheItemID();\n        }\n\n        if (newCacheItemID != cacheItemID) {\n          var instanceID = component.props.instanceID;\n          modifiedCellFrames.set(instanceID, react_1[\"default\"].cloneElement(component, {\n            cacheItemID: newCacheItemID\n          }));\n        }\n      }\n    }); // console.log('modifiedCellFrames',modifiedCellFrames)\n\n    if (modifiedCellFrames.size) {\n      contentHandler.updateCellFrames(modifiedCellFrames);\n    }\n\n    return true;\n  }; // TODO implement hightrange logic\n\n\n  this.moveIndex = function (toindex, fromindex) {\n    var highrange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (fromindex == toindex) return;\n    var _this$cradleParameter4 = _this.cradleParameters.handlersRef.current,\n        cacheHandler = _this$cradleParameter4.cacheHandler,\n        contentHandler = _this$cradleParameter4.contentHandler,\n        stateHandler = _this$cradleParameter4.stateHandler;\n    var processedIndexList = cacheHandler.moveIndex(toindex, fromindex, highrange);\n\n    if (processedIndexList.length) {\n      cacheHandler.cacheProps.modified = true;\n      cacheHandler.renderPortalList();\n      contentHandler.changeCradleCacheItemIDs(processedIndexList);\n      stateHandler.setCradleState('applycellframechanges');\n    }\n  };\n\n  this.insertIndex = function (index) {\n    var rangehighindex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    console.log('service handler called to insert index', index, rangehighindex);\n\n    _this.insertRemoveIndex(index, rangehighindex, +1);\n  };\n\n  this.removeIndex = function (index) {\n    var rangehighindex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    console.log('service handler called to remove index', index, rangehighindex);\n\n    _this.insertRemoveIndex(index, rangehighindex, -1);\n  }; // shared logic\n\n\n  this.insertRemoveIndex = function (index, rangehighindex, increment) {\n    var _this$cradleParameter5 = _this.cradleParameters.handlersRef.current,\n        cacheHandler = _this$cradleParameter5.cacheHandler,\n        contentHandler = _this$cradleParameter5.contentHandler,\n        stateHandler = _this$cradleParameter5.stateHandler;\n    var listsize = _this.cradleParameters.cradleInternalPropertiesRef.current.listsize;\n\n    var _cacheHandler$increme = cacheHandler.incrementFromIndex(index, rangehighindex, increment),\n        _cacheHandler$increme2 = _slicedToArray(_cacheHandler$increme, 2),\n        changeList = _cacheHandler$increme2[0],\n        removeList = _cacheHandler$increme2[1]; // console.log('insertRemoveIndex: listsize, changeList, removeList',listsize, changeList, removeList)\n\n\n    contentHandler.changeCradleCacheItemIDs(changeList);\n    if (increment == +1) contentHandler.createNewCacheItemIDs(removeList);\n    stateHandler.setCradleState('applycellframechanges');\n    var changecount = removeList.length * increment;\n    var newlistsize = listsize + changecount;\n\n    _this.setListsize(newlistsize);\n  };\n\n  this.cradleParameters = cradleParameters; // doing this explicitly here for documentation\n\n  var _cradleParameters$ext = cradleParameters.externalCallbacksRef.current,\n      referenceIndexCallback = _cradleParameters$ext.referenceIndexCallback,\n      preloadIndexCallback = _cradleParameters$ext.preloadIndexCallback,\n      cacheDeleteListCallback = _cradleParameters$ext.cacheDeleteListCallback,\n      newListSizeCallback = _cradleParameters$ext.newListSizeCallback;\n  var callbacks = {\n    referenceIndexCallback: referenceIndexCallback,\n    preloadIndexCallback: preloadIndexCallback,\n    cacheDeleteListCallback: cacheDeleteListCallback,\n    newListSizeCallback: newListSizeCallback\n  };\n  this.callbacks = callbacks;\n});\n\nexports[\"default\"] = ServiceHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/servicehandler.tsx\n");

/***/ }),

/***/ "./src/cradle/statehandler.tsx":
/*!*************************************!*\
  !*** ./src/cradle/statehandler.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // statehandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar StateHandler = /*#__PURE__*/_createClass(function StateHandler(cradleParameters) {\n  _classCallCheck(this, StateHandler);\n\n  this.cradleParameters = cradleParameters;\n  var internalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n  this.setCradleState = internalProperties.setCradleState;\n  this.cradleStateRef = internalProperties.cradleStateRef;\n  this.isMountedRef = internalProperties.isMountedRef;\n});\n\nexports[\"default\"] = StateHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3N0YXRlaGFuZGxlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7QUFDQTs7Ozs7Ozs7Ozs7O0lBRXFCQSxZLDZCQUVqQixzQkFBWUMsZ0JBQVosRUFBNEI7RUFBQTs7RUFFekIsS0FBS0EsZ0JBQUwsR0FBd0JBLGdCQUF4QjtFQUVBLElBQU1DLGtCQUFrQixHQUFHRCxnQkFBZ0IsQ0FBQ0UsMkJBQWpCLENBQTZDQyxPQUF4RTtFQUVBLEtBQUtDLGNBQUwsR0FBc0JILGtCQUFrQixDQUFDRyxjQUF6QztFQUNBLEtBQUtDLGNBQUwsR0FBc0JKLGtCQUFrQixDQUFDSSxjQUF6QztFQUNBLEtBQUtDLFlBQUwsR0FBb0JMLGtCQUFrQixDQUFDSyxZQUF2QztBQUVGLEM7O0FBWkxDLGtCQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvY3JhZGxlL3N0YXRlaGFuZGxlci50c3g/NjM5NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdGF0ZWhhbmRsZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMjEgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGVIYW5kbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGNyYWRsZVBhcmFtZXRlcnMpIHtcblxuICAgICAgIHRoaXMuY3JhZGxlUGFyYW1ldGVycyA9IGNyYWRsZVBhcmFtZXRlcnNcblxuICAgICAgIGNvbnN0IGludGVybmFsUHJvcGVydGllcyA9IGNyYWRsZVBhcmFtZXRlcnMuY3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzUmVmLmN1cnJlbnRcblxuICAgICAgIHRoaXMuc2V0Q3JhZGxlU3RhdGUgPSBpbnRlcm5hbFByb3BlcnRpZXMuc2V0Q3JhZGxlU3RhdGVcbiAgICAgICB0aGlzLmNyYWRsZVN0YXRlUmVmID0gaW50ZXJuYWxQcm9wZXJ0aWVzLmNyYWRsZVN0YXRlUmVmXG4gICAgICAgdGhpcy5pc01vdW50ZWRSZWYgPSBpbnRlcm5hbFByb3BlcnRpZXMuaXNNb3VudGVkUmVmXG4gICAgICAgXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmFkbGVQYXJhbWV0ZXJzXG5cbiAgICBwdWJsaWMgY3JhZGxlU3RhdGVSZWZcbiAgICBwdWJsaWMgc2V0Q3JhZGxlU3RhdGVcbiAgICBwdWJsaWMgaXNNb3VudGVkUmVmXG5cbn1cbiJdLCJuYW1lcyI6WyJTdGF0ZUhhbmRsZXIiLCJjcmFkbGVQYXJhbWV0ZXJzIiwiaW50ZXJuYWxQcm9wZXJ0aWVzIiwiY3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzUmVmIiwiY3VycmVudCIsInNldENyYWRsZVN0YXRlIiwiY3JhZGxlU3RhdGVSZWYiLCJpc01vdW50ZWRSZWYiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cradle/statehandler.tsx\n");

/***/ }),

/***/ "./src/cradle/styleshandler.tsx":
/*!**************************************!*\
  !*** ./src/cradle/styleshandler.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // styleshandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar StylesHandler = /*#__PURE__*/_createClass(function StylesHandler(cradleParameters) {\n  var _this = this;\n\n  _classCallCheck(this, StylesHandler);\n\n  this.setCradleStyles = function (_ref) {\n    var orientation = _ref.orientation,\n        cellHeight = _ref.cellHeight,\n        cellWidth = _ref.cellWidth,\n        gap = _ref.gap,\n        padding = _ref.padding,\n        crosscount = _ref.crosscount,\n        viewportheight = _ref.viewportheight,\n        viewportwidth = _ref.viewportwidth,\n        userstyles = _ref.userstyles,\n        triggerlineOffset = _ref.triggerlineOffset;\n\n    // TODO: change 'cradle' to 'head' and 'tail' for more granularity\n    // TODO: triggerline offset for head styles experimentally set to negative\n    //    to assure a brealline is always available for notification\n    var headstyles = _this.getHeadStyles(gap, padding, orientation, userstyles.cradle);\n\n    var tailstyles = _this.getTailStyles(gap, padding, orientation, userstyles.cradle);\n\n    var axisstyles = _this.getAxisStyles(gap, padding, orientation, userstyles.axis);\n\n    var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffoldHandler;\n\n    var triggerlineheadstyles = _this.getTriggerlineHeadStyles(orientation, cellHeight, cellWidth, triggerlineOffset, gap);\n\n    var triggerlinetailstyles = _this.getTriggerlineTailStyles(orientation, cellHeight, cellWidth, triggerlineOffset, gap);\n\n    scaffoldHandler.triggerlineSpan = _this.tailTriggerlineOffset - _this.headTriggerlineOffset;\n    var cradledividerstyles = {\n      zIndex: 1,\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      boxShadow: '0 0 5px 3px red'\n    };\n    headstyles.gridGap = gap + 'px';\n    tailstyles.gridGap = gap + 'px';\n\n    if (orientation == 'horizontal') {\n      headstyles.padding = \"\".concat(padding, \"px 0 \").concat(padding, \"px \").concat(padding, \"px\");\n      headstyles.width = 'auto';\n      headstyles.height = '100%';\n      headstyles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n      //     sets length of horiz cradle items in one line (row), not multi-row config\n\n      headstyles.gridTemplateRows = cellHeight ? \"repeat(\".concat(crosscount, \", minmax(\").concat(cellHeight, \"px, 1fr))\") : 'auto';\n      headstyles.gridTemplateColumns = 'none';\n      tailstyles.padding = \"\".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px 0\");\n      tailstyles.width = 'auto';\n      tailstyles.height = '100%';\n      tailstyles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n      //     sets length of horiz cradle items in one line (row), not multi-row config\n\n      tailstyles.gridTemplateRows = cellHeight ? \"repeat(\".concat(crosscount, \", minmax(\").concat(cellHeight, \"px, 1fr))\") : 'auto';\n      tailstyles.gridTemplateColumns = 'none';\n    } else if (orientation == 'vertical') {\n      headstyles.padding = \"\".concat(padding, \"px \").concat(padding, \"px 0 \").concat(padding, \"px\");\n      headstyles.width = '100%';\n      headstyles.height = 'auto';\n      headstyles.gridAutoFlow = 'row';\n      headstyles.gridTemplateRows = 'none';\n      headstyles.gridTemplateColumns = cellWidth ? \"repeat(auto-fill, minmax(\".concat(cellWidth, \"px, 1fr))\") : 'auto';\n      tailstyles.padding = \"0 \".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px\");\n      tailstyles.width = '100%';\n      tailstyles.height = 'auto';\n      tailstyles.gridAutoFlow = 'row';\n      tailstyles.gridTemplateRows = 'none';\n      tailstyles.gridTemplateColumns = cellWidth ? \"repeat(auto-fill, minmax(\".concat(cellWidth, \"px, 1fr))\") : 'auto';\n    }\n\n    return [headstyles, tailstyles, axisstyles, triggerlineheadstyles, triggerlinetailstyles, cradledividerstyles];\n  };\n\n  this.getHeadStyles = function (gap, padding, orientation, userheadstyles) {\n    var bottom, left, top, right;\n\n    if (orientation == 'vertical') {\n      bottom = 0;\n      left = 0;\n      right = 0;\n      top = 'auto';\n    } else {\n      bottom = 0;\n      left = 'auto';\n      right = 0;\n      top = 0;\n    }\n\n    return Object.assign(Object.assign({}, {\n      position: 'absolute',\n      backgroundColor: 'blue',\n      display: 'grid',\n      gridGap: gap + 'px',\n      padding: padding + 'px',\n      justifyContent: 'start',\n      alignContent: 'start',\n      boxSizing: 'border-box',\n      bottom: bottom,\n      left: left,\n      right: right,\n      top: top\n    }), userheadstyles);\n  };\n\n  this.getTailStyles = function (gap, padding, orientation, usertailstyles) {\n    var bottom, left, top, right;\n\n    if (orientation == 'vertical') {\n      bottom = 'auto';\n      left = 0;\n      right = 0;\n      top = 0;\n    } else {\n      bottom = 0;\n      left = 0;\n      right = 'auto';\n      top = 0;\n    }\n\n    return Object.assign(Object.assign({}, {\n      position: 'absolute',\n      backgroundColor: 'blue',\n      display: 'grid',\n      gridGap: gap + 'px',\n      padding: padding + 'px',\n      justifyContent: 'start',\n      alignContent: 'start',\n      boxSizing: 'border-box',\n      top: top,\n      left: left,\n      right: right,\n      bottom: bottom\n    }), usertailstyles);\n  };\n\n  this.getAxisStyles = function (gap, padding, orientation, useraxisstyles) {\n    var top, left, width, height; // for axis\n\n    if (orientation == 'vertical') {\n      top = padding + 'px';\n      left = 'auto';\n      width = '100%';\n      height = 'auto';\n    } else {\n      top = 'auto';\n      left = padding + 'px';\n      width = 0;\n      height = '100%';\n    }\n\n    return Object.assign(Object.assign({}, {\n      position: 'relative',\n      top: top,\n      left: left,\n      width: width,\n      height: height\n    }), useraxisstyles);\n  };\n\n  this.getTriggerlineTailStyles = function (orientation, cellHeight, cellWidth, triggerlineOffset, gap) {\n    var transform; // for position relative to axis\n\n    var position = 'absolute',\n        width = '100%',\n        height = '100%';\n    _this.tailTriggerlineOffset = triggerlineOffset;\n\n    if (orientation == 'horizontal') {\n      transform = \"translateX(\".concat(triggerlineOffset + 'px', \")\");\n    } else {\n      transform = \"translateY(\".concat(triggerlineOffset + 'px', \")\");\n    }\n\n    return Object.assign({}, {\n      position: position,\n      width: width,\n      height: height,\n      transform: transform\n    });\n  };\n\n  this.getTriggerlineHeadStyles = function (orientation, cellHeight, cellWidth, triggerlineOffset, gap) {\n    var transform; // for position relative to axis\n\n    var position = 'absolute',\n        width = '100%',\n        height = '100%';\n\n    if (orientation == 'horizontal') {\n      _this.headTriggerlineOffset = -(cellWidth + gap - triggerlineOffset);\n      transform = \"translateX(\".concat(_this.headTriggerlineOffset + 'px', \")\");\n    } else {\n      _this.headTriggerlineOffset = -(cellHeight + gap - triggerlineOffset);\n      transform = \"translateY(\".concat(_this.headTriggerlineOffset + 'px', \")\");\n    }\n\n    return Object.assign({}, {\n      position: position,\n      width: width,\n      height: height,\n      transform: transform\n    });\n  };\n\n  this.cradleParameters = cradleParameters;\n});\n\nexports[\"default\"] = StylesHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/styleshandler.tsx\n");

/***/ }),

/***/ "./src/infinitegridscroller.tsx":
/*!**************************************!*\
  !*** ./src/infinitegridscroller.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // infinitegridscroller.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    react-infinite-grid-scroller = RIGS\n\n    ROADMAP:\n        // cache management\n            // cacheMax; cacheMax over-run\n            // preload\n            // keepload\n            // cradle\n            cache mapping modification by user\n            organize return values of getItem\n            checkmark enable console feedback (for external callbacks)\n            add swap callback\n            check behaviour of axis & triggerlines with modify cache map - extra DOM cycle?\n            constrain preload by cacheMax!\n\n        insert, remove, swap functions (create cacheItemID reference system)\n\n        also surface external callbacks with return values for testing\n        review all code\n        newListsize callback\n\n        layout: uniform, variable, dynamic, dense\n\n        test changing all gridscroller parameters\n        test config size edge cases - over and under sized cells\n\n        create demo site - github pages, and sandbox\n        release to npm\n\n    BUGS:\n        - select nested lists, then preload -> breaks presentation\n        - clear cache after change mapping triggers a setCradleContent event\n            - disable/re-enable interrupts?\n        //- rapid scrolling up with full cache can lead to overshoot just shy of reposition,\n        //    with trigger lines out of view\n        // - time lag before repositioning the trigger lines - promises?\n        // - when sublist is in scroll motion when being reparented, block scrollpos is not properly recovered\n        // - item 400 in 400 item nested list of scrollers crosscount = 3 takes up entire width of viewport\n\n    TODO:\n        - add an increment list size internal function\n        - during modification, assigen cloneElements from main to head/tail, instead of recreating\n            each for head tail\n        - allow range for moveto\n        - cacheMax is also boundary for preload, and for dense, as well as keepload (?)\n        - add insertCacheItem and removeCacheItem - affects listsize\n        - adjust listSize for add and remove\n        - add modify listsize callback\n        - getItem null return means past list - list size is adjusted;\n            undefined means error; reject means error \"unable to load\"\n\n        - review event cycles - they seem slower\n        - try to preload all children, even if cached\n        - return modified cachedItemMap from modify, add, and remove\n\n        - use allSettled instead of all\n        - use finally for callback\n        - provide way to attempt reload of a single cell (change instanceID)\n        - modifyCacheMap instruction by user\n        - call matchCacheToCradle through contentHandler (?) iac rationalize calls to cacheHandler\n        - test and review cacheItemID\n        - implement changeOrder (by index) callback for user - cellFrame index prop must be updated\n        - use cacheItemID for referencing; index for order - cellFrame reload to re-order?\n        - review state change chains in cradle\n        - check preload intent against state machine handling\n        - rationalize await handling everywhere to behave like promises\n        - check number of passes to scrollblock; consider implementing named states\n        // - rationalize external callbacks routing\n        // callback for user re preload\n        error handling for preload items -- allow recovery\n        test for memory leaks with Chrome's window.performance.memory property\n        try to reduce need to run renderportallist - try some kind of pagination/grouping\n        replace top/left with transformx/y\n        prioritize fetch cells for visible cells\n        customizable scrolltracker, or provide callback feature for scroll tracking\n        reload from/to for insertions and substitutions\n        check use of useCallback\n        test for two root portals\n        promote system constants to 'advanced' parameter, eg RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE\n        calc minwidth by form factor\n        review scroller-frame for appropriate dimensions - s/b inset:0;position:absolute\n        add grid-template-rows: max-content to parent for safari issue grid-auto-flow: column not filling column\n        cross-browser testing\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar Viewport_1 = __importDefault(__webpack_require__(/*! ./Viewport */ \"./src/Viewport.tsx\"));\n\nvar Scrollblock_1 = __importDefault(__webpack_require__(/*! ./Scrollblock */ \"./src/Scrollblock.tsx\"));\n\nvar Cradle_1 = __importDefault(__webpack_require__(/*! ./Cradle */ \"./src/Cradle.tsx\"));\n\nvar cachehandler_1 = __webpack_require__(/*! ./cradle/cachehandler */ \"./src/cradle/cachehandler.tsx\"); // -------------------[ global session ID generator ]----------------\n\n\nvar globalScrollerID = 0; // ===================================[ INITIALIZE ]===========================\n\n/*\n    The job of InfiniteGridScroller is to pass parameters to dependents.\n    Viewport contains the scrollblock, fullsize for adjusted cell height/width, which in turn contains the cradle\n        - a component that contains CellFrames (which contain displayed items or transitional placeholders).\n    The CellFrames are skeletons which contain the host content components.\n\n    Host content is created in a portal cache (via PortalAgent) and then portal'd to its host CellFrame\n\n    Scrollblock virtually represents the entirety of the list, and is the scroller\n\n    Cradle contains the list items, and is 'virtualized' -- it appears as\n      though it is the full scrollblock, but in fact it is only slightly larger than\n      the viewport.\n    - individual items are framed by CellFrame, managed by Cradle\n\n    Overall the infinitegridscroller manages the (often asynchronous) interactions of the\n    components of the mechanism\n*/\n\nvar InfiniteGridScroller = function InfiniteGridScroller(props) {\n  // ------------------[ normalize properties ]--------------------\n  var _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? 'vertical' : _props$orientation,\n      _props$gap = props.gap,\n      gap = _props$gap === void 0 ? 0 : _props$gap,\n      _props$padding = props.padding,\n      padding = _props$padding === void 0 ? 0 : _props$padding,\n      cellHeight = props.cellHeight,\n      cellWidth = props.cellWidth,\n      _props$layout = props.layout,\n      layout = _props$layout === void 0 ? 'uniform' : _props$layout,\n      _props$estimatedListS = props.estimatedListSize,\n      estimatedListSize = _props$estimatedListS === void 0 ? 0 : _props$estimatedListS,\n      _props$runwaySize = props.runwaySize,\n      runwaySize = _props$runwaySize === void 0 ? 3 : _props$runwaySize,\n      _props$startingIndex = props.startingIndex,\n      startingIndex = _props$startingIndex === void 0 ? 0 : _props$startingIndex,\n      getItem = props.getItem,\n      placeholder = props.placeholder,\n      _props$styles = props.styles,\n      styles = _props$styles === void 0 ? {} : _props$styles,\n      _props$cache = props.cache,\n      cache = _props$cache === void 0 ? 'cradle' : _props$cache,\n      _props$cacheMax = props.cacheMax,\n      cacheMax = _props$cacheMax === void 0 ? null : _props$cacheMax,\n      _props$triggerlineOff = props.triggerlineOffset,\n      triggerlineOffset = _props$triggerlineOff === void 0 ? 10 : _props$triggerlineOff,\n      _props$functions = props.functions,\n      functions = _props$functions === void 0 ? {} : _props$functions,\n      scrollerData = props.scrollerData,\n      _props$advanced = props.advanced,\n      advanced = _props$advanced === void 0 ? {} : _props$advanced; // avoid null\n\n  styles = styles !== null && styles !== void 0 ? styles : {};\n  functions = functions !== null && functions !== void 0 ? functions : {};\n  advanced = advanced !== null && advanced !== void 0 ? advanced : {}; // prop constraints - non-negative values\n\n  runwaySize = Math.max(0, runwaySize);\n  estimatedListSize = Math.max(0, estimatedListSize);\n  startingIndex = Math.max(0, startingIndex); // enums\n\n  if (!['horizontal', 'vertical'].includes(orientation)) {\n    orientation = 'vertical';\n  }\n\n  if (!['preload', 'keepload', 'cradle'].includes(cache)) {\n    cache = 'cradle';\n  }\n\n  if (!['uniform', 'variable', 'dynamic', 'dense'].includes(layout)) {\n    layout = 'uniform';\n  }\n\n  var gridSpecs = {\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    layout: layout\n  };\n\n  var _ref = (0, react_1.useState)('setup'),\n      _ref2 = _slicedToArray(_ref, 2),\n      scrollerState = _ref2[0],\n      setScrollerState = _ref2[1];\n\n  var gridSpecsRef = (0, react_1.useRef)(gridSpecs);\n  var stylesRef = (0, react_1.useRef)(styles);\n  var functionsRef = (0, react_1.useRef)(functions); // for mount\n\n  var scrollerSessionIDRef = (0, react_1.useRef)(null);\n  var scrollerID = scrollerSessionIDRef.current; // satisfy React Object.is for attributes\n\n  if (!compareProps(gridSpecs, gridSpecsRef.current)) {\n    gridSpecsRef.current = gridSpecs;\n  }\n\n  if (!compareProps(styles, stylesRef.current)) {\n    stylesRef.current = styles;\n  }\n\n  if (!compareProps(functions, functionsRef.current)) {\n    functionsRef.current = functions;\n  }\n\n  var cacheHandlerRef = (0, react_1.useRef)(null);\n  (0, react_1.useEffect)(function () {\n    scrollerSessionIDRef.current = globalScrollerID++;\n    cacheHandlerRef.current = new cachehandler_1.CacheHandler(scrollerSessionIDRef.current, setListsize, listsizeRef);\n  }, []);\n  var listsizeRef = (0, react_1.useRef)(estimatedListSize);\n  var listsize = listsizeRef.current; // console.log('infinite scroller listsizeRef','-'+scrollerID+'-' , scrollerState, listsizeRef)\n  // console.log('infinite scroller scrollerID, scrollerState, cache, cacheMax', \n  //     '-'+scrollerID+'-',scrollerState, cache, cacheMax)\n\n  var setListsize = (0, react_1.useCallback)(function (listsize) {\n    if (listsize == listsizeRef.current) return;\n    listsizeRef.current = listsize; // inform the user\n\n    functionsRef.current.newListsize && functionsRef.current.newListsize(listsize);\n    setScrollerState('setlistsize');\n  }, []); // --------------------[ render ]---------------------\n\n  (0, react_1.useEffect)(function () {\n    switch (scrollerState) {\n      case 'setup':\n      case 'setlistsize':\n        setScrollerState('ready');\n    }\n  }, [scrollerState]);\n  return react_1[\"default\"].createElement(react_1[\"default\"].Fragment, null, scrollerState != 'setup' && react_1[\"default\"].createElement(Viewport_1[\"default\"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    scrollerData: scrollerData,\n    scrollerID: scrollerID\n  }, react_1[\"default\"].createElement(Scrollblock_1[\"default\"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    listsize: listsize,\n    scrollerID: scrollerID\n  }, react_1[\"default\"].createElement(Cradle_1[\"default\"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    listsize: listsize,\n    cache: cache,\n    cacheMax: cacheMax,\n    userFunctions: functionsRef.current,\n    startingIndex: startingIndex,\n    getItem: getItem,\n    placeholder: placeholder,\n    runwaySize: runwaySize,\n    triggerlineOffset: triggerlineOffset,\n    cacheHandler: cacheHandlerRef.current,\n    scrollerID: scrollerID\n  }))), scrollerState != 'setup' && react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cacheroot',\n    style: cacherootstyle\n  }, react_1[\"default\"].createElement(cachehandler_1.PortalList, {\n    cacheProps: cacheHandlerRef.current.cacheProps\n  })));\n};\n\nvar cacherootstyle = {\n  display: 'none'\n}; // static, out of view \n\nexports[\"default\"] = InfiniteGridScroller; // utilities\n\nfunction compareProps(obj1, obj2) {\n  var keys = Object.keys(obj1);\n  var same;\n\n  for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {\n    var key = _keys[_i2];\n\n    if (!Object.is(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/infinitegridscroller.tsx\n");

/***/ }),

/***/ "./node_modules/react-reverse-portal/dist/web/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-reverse-portal/dist/web/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InPortal\": () => (/* binding */ InPortal),\n/* harmony export */   \"OutPortal\": () => (/* binding */ OutPortal),\n/* harmony export */   \"createHtmlPortalNode\": () => (/* binding */ createHtmlPortalNode),\n/* harmony export */   \"createSvgPortalNode\": () => (/* binding */ createSvgPortalNode)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"react-dom\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n// Internally, the portalNode must be for either HTML or SVG elements\nvar ELEMENT_TYPE_HTML = 'html';\nvar ELEMENT_TYPE_SVG = 'svg';\n// ReactDOM can handle several different namespaces, but they're not exported publicly\n// https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/DOMNamespaces.js#L8-L10\nvar SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\nvar validateElementType = function (domElement, elementType) {\n    if (elementType === ELEMENT_TYPE_HTML) {\n        return domElement instanceof HTMLElement;\n    }\n    if (elementType === ELEMENT_TYPE_SVG) {\n        return domElement instanceof SVGElement;\n    }\n    throw new Error(\"Unrecognized element type \\\"\" + elementType + \"\\\" for validateElementType.\");\n};\n// This is the internal implementation: the public entry points set elementType to an appropriate value\nvar createPortalNode = function (elementType, options) {\n    var initialProps = {};\n    var parent;\n    var lastPlaceholder;\n    var element;\n    if (elementType === ELEMENT_TYPE_HTML) {\n        element = document.createElement('div');\n    }\n    else if (elementType === ELEMENT_TYPE_SVG) {\n        element = document.createElementNS(SVG_NAMESPACE, 'g');\n    }\n    else {\n        throw new Error(\"Invalid element type \\\"\" + elementType + \"\\\" for createPortalNode: must be \\\"html\\\" or \\\"svg\\\".\");\n    }\n    if (options && typeof options === \"object\") {\n        for (var _i = 0, _a = Object.entries(options.attributes); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            element.setAttribute(key, value);\n        }\n    }\n    var portalNode = {\n        element: element,\n        elementType: elementType,\n        setPortalProps: function (props) {\n            initialProps = props;\n        },\n        getInitialPortalProps: function () {\n            return initialProps;\n        },\n        mount: function (newParent, newPlaceholder) {\n            if (newPlaceholder === lastPlaceholder) {\n                // Already mounted - noop.\n                return;\n            }\n            portalNode.unmount();\n            // To support SVG and other non-html elements, the portalNode's elementType needs to match\n            // the elementType it's being rendered into\n            if (newParent !== parent) {\n                if (!validateElementType(newParent, elementType)) {\n                    throw new Error(\"Invalid element type for portal: \\\"\" + elementType + \"\\\" portalNodes must be used with \" + elementType + \" elements, but OutPortal is within <\" + newParent.tagName + \">.\");\n                }\n            }\n            newParent.replaceChild(portalNode.element, newPlaceholder);\n            parent = newParent;\n            lastPlaceholder = newPlaceholder;\n        },\n        unmount: function (expectedPlaceholder) {\n            if (expectedPlaceholder && expectedPlaceholder !== lastPlaceholder) {\n                // Skip unmounts for placeholders that aren't currently mounted\n                // They will have been automatically unmounted already by a subsequent mount()\n                return;\n            }\n            if (parent && lastPlaceholder) {\n                parent.replaceChild(lastPlaceholder, portalNode.element);\n                parent = undefined;\n                lastPlaceholder = undefined;\n            }\n        }\n    };\n    return portalNode;\n};\nvar InPortal = /** @class */ (function (_super) {\n    __extends(InPortal, _super);\n    function InPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.addPropsChannel = function () {\n            Object.assign(_this.props.node, {\n                setPortalProps: function (props) {\n                    // Rerender the child node here if/when the out portal props change\n                    _this.setState({ nodeProps: props });\n                }\n            });\n        };\n        _this.state = {\n            nodeProps: _this.props.node.getInitialPortalProps(),\n        };\n        return _this;\n    }\n    InPortal.prototype.componentDidMount = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.componentDidUpdate = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, children = _a.children, node = _a.node;\n        return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, function (child) {\n            if (!react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child))\n                return child;\n            return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, _this.state.nodeProps);\n        }), node.element);\n    };\n    return InPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar OutPortal = /** @class */ (function (_super) {\n    __extends(OutPortal, _super);\n    function OutPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.placeholderNode = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        _this.passPropsThroughPortal();\n        return _this;\n    }\n    OutPortal.prototype.passPropsThroughPortal = function () {\n        var propsForTarget = Object.assign({}, this.props, { node: undefined });\n        this.props.node.setPortalProps(propsForTarget);\n    };\n    OutPortal.prototype.componentDidMount = function () {\n        var node = this.props.node;\n        this.currentPortalNode = node;\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentDidUpdate = function () {\n        // We re-mount on update, just in case we were unmounted (e.g. by\n        // a second OutPortal, which has now been removed)\n        var node = this.props.node;\n        // If we're switching portal nodes, we need to clean up the current one first.\n        if (this.currentPortalNode && node !== this.currentPortalNode) {\n            this.currentPortalNode.unmount(this.placeholderNode.current);\n            this.currentPortalNode = node;\n        }\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentWillUnmount = function () {\n        var node = this.props.node;\n        node.unmount(this.placeholderNode.current);\n    };\n    OutPortal.prototype.render = function () {\n        // Render a placeholder to the DOM, so we can get a reference into\n        // our location in the DOM, and swap it out for the portaled node.\n        // A <div> placeholder works fine even for SVG.\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: this.placeholderNode });\n    };\n    return OutPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar createHtmlPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_HTML);\nvar createSvgPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_SVG);\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-reverse-portal/dist/web/index.js\n");

/***/ }),

/***/ "./node_modules/requestidlecallback/index.js":
/*!***************************************************!*\
  !*** ./node_modules/requestidlecallback/index.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}(function(){\n\t'use strict';\n\tvar scheduleStart, throttleDelay, lazytimer, lazyraf;\n\tvar root = typeof window != 'undefined' ?\n\t\twindow :\n\t\ttypeof __webpack_require__.g != undefined ?\n\t\t\t__webpack_require__.g :\n\t\t\tthis || {};\n\tvar requestAnimationFrame = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;\n\tvar cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;\n\tvar tasks = [];\n\tvar runAttempts = 0;\n\tvar isRunning = false;\n\tvar remainingTime = 7;\n\tvar minThrottle = 35;\n\tvar throttle = 125;\n\tvar index = 0;\n\tvar taskStart = 0;\n\tvar tasklength = 0;\n\tvar IdleDeadline = {\n\t\tget didTimeout(){\n\t\t\treturn false;\n\t\t},\n\t\ttimeRemaining: function(){\n\t\t\tvar timeRemaining = remainingTime - (Date.now() - taskStart);\n\t\t\treturn timeRemaining < 0 ? 0 : timeRemaining;\n\t\t},\n\t};\n\tvar setInactive = debounce(function(){\n\t\tremainingTime = 22;\n\t\tthrottle = 66;\n\t\tminThrottle = 0;\n\t});\n\n\tfunction debounce(fn){\n\t\tvar id, timestamp;\n\t\tvar wait = 99;\n\t\tvar check = function(){\n\t\t\tvar last = (Date.now()) - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tid = setTimeout(check, wait - last);\n\t\t\t} else {\n\t\t\t\tid = null;\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\t\treturn function(){\n\t\t\ttimestamp = Date.now();\n\t\t\tif(!id){\n\t\t\t\tid = setTimeout(check, wait);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction abortRunning(){\n\t\tif(isRunning){\n\t\t\tif(lazyraf){\n\t\t\t\tcancelRequestAnimationFrame(lazyraf);\n\t\t\t}\n\t\t\tif(lazytimer){\n\t\t\t\tclearTimeout(lazytimer);\n\t\t\t}\n\t\t\tisRunning = false;\n\t\t}\n\t}\n\n\tfunction onInputorMutation(){\n\t\tif(throttle != 125){\n\t\t\tremainingTime = 7;\n\t\t\tthrottle = 125;\n\t\t\tminThrottle = 35;\n\n\t\t\tif(isRunning) {\n\t\t\t\tabortRunning();\n\t\t\t\tscheduleLazy();\n\t\t\t}\n\t\t}\n\t\tsetInactive();\n\t}\n\n\tfunction scheduleAfterRaf() {\n\t\tlazyraf = null;\n\t\tlazytimer = setTimeout(runTasks, 0);\n\t}\n\n\tfunction scheduleRaf(){\n\t\tlazytimer = null;\n\t\trequestAnimationFrame(scheduleAfterRaf);\n\t}\n\n\tfunction scheduleLazy(){\n\n\t\tif(isRunning){return;}\n\t\tthrottleDelay = throttle - (Date.now() - taskStart);\n\n\t\tscheduleStart = Date.now();\n\n\t\tisRunning = true;\n\n\t\tif(minThrottle && throttleDelay < minThrottle){\n\t\t\tthrottleDelay = minThrottle;\n\t\t}\n\n\t\tif(throttleDelay > 9){\n\t\t\tlazytimer = setTimeout(scheduleRaf, throttleDelay);\n\t\t} else {\n\t\t\tthrottleDelay = 0;\n\t\t\tscheduleRaf();\n\t\t}\n\t}\n\n\tfunction runTasks(){\n\t\tvar task, i, len;\n\t\tvar timeThreshold = remainingTime > 9 ?\n\t\t\t9 :\n\t\t\t1\n\t\t;\n\n\t\ttaskStart = Date.now();\n\t\tisRunning = false;\n\n\t\tlazytimer = null;\n\n\t\tif(runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart){\n\t\t\tfor(i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++){\n\t\t\t\ttask = tasks.shift();\n\t\t\t\ttasklength++;\n\t\t\t\tif(task){\n\t\t\t\t\ttask(IdleDeadline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(tasks.length){\n\t\t\tscheduleLazy();\n\t\t} else {\n\t\t\trunAttempts = 0;\n\t\t}\n\t}\n\n\tfunction requestIdleCallbackShim(task){\n\t\tindex++;\n\t\ttasks.push(task);\n\t\tscheduleLazy();\n\t\treturn index;\n\t}\n\n\tfunction cancelIdleCallbackShim(id){\n\t\tvar index = id - 1 - tasklength;\n\t\tif(tasks[index]){\n\t\t\ttasks[index] = null;\n\t\t}\n\t}\n\n\tif(!root.requestIdleCallback || !root.cancelIdleCallback){\n\t\troot.requestIdleCallback = requestIdleCallbackShim;\n\t\troot.cancelIdleCallback = cancelIdleCallbackShim;\n\n\t\tif(root.document && document.addEventListener){\n\t\t\troot.addEventListener('scroll', onInputorMutation, true);\n\t\t\troot.addEventListener('resize', onInputorMutation);\n\n\t\t\tdocument.addEventListener('focus', onInputorMutation, true);\n\t\t\tdocument.addEventListener('mouseover', onInputorMutation, true);\n\t\t\t['click', 'keypress', 'touchstart', 'mousedown'].forEach(function(name){\n\t\t\t\tdocument.addEventListener(name, onInputorMutation, {capture: true, passive: true});\n\t\t\t});\n\n\t\t\tif(root.MutationObserver){\n\t\t\t\tnew MutationObserver( onInputorMutation ).observe( document.documentElement, {childList: true, subtree: true, attributes: true} );\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\troot.requestIdleCallback(function(){}, {timeout: 0});\n\t\t} catch(e){\n\t\t\t(function(rIC){\n\t\t\t\tvar timeRemainingProto, timeRemaining;\n\t\t\t\troot.requestIdleCallback = function(fn, timeout){\n\t\t\t\t\tif(timeout && typeof timeout.timeout == 'number'){\n\t\t\t\t\t\treturn rIC(fn, timeout.timeout);\n\t\t\t\t\t}\n\t\t\t\t\treturn rIC(fn);\n\t\t\t\t};\n\t\t\t\tif(root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)){\n\t\t\t\t\ttimeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, 'timeRemaining');\n\t\t\t\t\tif(!timeRemaining || !timeRemaining.configurable || !timeRemaining.get){return;}\n\t\t\t\t\tObject.defineProperty(timeRemainingProto, 'timeRemaining', {\n\t\t\t\t\t\tvalue:  function(){\n\t\t\t\t\t\t\treturn timeRemaining.get.call(this);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(root.requestIdleCallback)\n\t\t}\n\t}\n\n\treturn {\n\t\trequest: requestIdleCallbackShim,\n\t\tcancel: cancelIdleCallbackShim,\n\t};\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/requestidlecallback/index.js\n");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_react__;

/***/ }),

/***/ "react-dom":
/*!****************************!*\
  !*** external "react-dom" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/infinitegridscroller.tsx");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});