/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["react-infinite-grid-scroller"] = factory(require("react"), require("react-dom"));
	else
		root["react-infinite-grid-scroller"] = factory(root["react"], root["react-dom"]);
})(self, (__WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOMRectReadOnly\": () => (/* binding */ DOMRectReadOnly)\n/* harmony export */ });\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n\nvar DOMRectReadOnly = (function () {\n    function DOMRectReadOnly(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.top = this.y;\n        this.left = this.x;\n        this.bottom = this.top + this.height;\n        this.right = this.left + this.width;\n        return (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_0__.freeze)(this);\n    }\n    DOMRectReadOnly.prototype.toJSON = function () {\n        var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n        return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };\n    };\n    DOMRectReadOnly.fromRect = function (rectangle) {\n        return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n    };\n    return DOMRectReadOnly;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL0RPTVJlY3RSZWFkT25seS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscURBQU07QUFDckI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQzBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvRE9NUmVjdFJlYWRPbmx5LmpzP2ZkZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJlZXplIH0gZnJvbSAnLi91dGlscy9mcmVlemUnO1xudmFyIERPTVJlY3RSZWFkT25seSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRE9NUmVjdFJlYWRPbmx5KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy50b3AgPSB0aGlzLnk7XG4gICAgICAgIHRoaXMubGVmdCA9IHRoaXMueDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLnRvcCArIHRoaXMuaGVpZ2h0O1xuICAgICAgICB0aGlzLnJpZ2h0ID0gdGhpcy5sZWZ0ICsgdGhpcy53aWR0aDtcbiAgICAgICAgcmV0dXJuIGZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgRE9NUmVjdFJlYWRPbmx5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHggPSBfYS54LCB5ID0gX2EueSwgdG9wID0gX2EudG9wLCByaWdodCA9IF9hLnJpZ2h0LCBib3R0b20gPSBfYS5ib3R0b20sIGxlZnQgPSBfYS5sZWZ0LCB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XG4gICAgICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHRvcDogdG9wLCByaWdodDogcmlnaHQsIGJvdHRvbTogYm90dG9tLCBsZWZ0OiBsZWZ0LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG4gICAgfTtcbiAgICBET01SZWN0UmVhZE9ubHkuZnJvbVJlY3QgPSBmdW5jdGlvbiAocmVjdGFuZ2xlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRE9NUmVjdFJlYWRPbmx5KHJlY3RhbmdsZS54LCByZWN0YW5nbGUueSwgcmVjdGFuZ2xlLndpZHRoLCByZWN0YW5nbGUuaGVpZ2h0KTtcbiAgICB9O1xuICAgIHJldHVybiBET01SZWN0UmVhZE9ubHk7XG59KCkpO1xuZXhwb3J0IHsgRE9NUmVjdFJlYWRPbmx5IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObservation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObservation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObservation\": () => (/* binding */ ResizeObservation)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResizeObserverBoxOptions */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\");\n/* harmony import */ var _algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./algorithms/calculateBoxSize */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\n\n\nvar skipNotifyOnElement = function (target) {\n    return !(0,_utils_element__WEBPACK_IMPORTED_MODULE_2__.isSVG)(target)\n        && !(0,_utils_element__WEBPACK_IMPORTED_MODULE_2__.isReplacedElement)(target)\n        && getComputedStyle(target).display === 'inline';\n};\nvar ResizeObservation = (function () {\n    function ResizeObservation(target, observedBox) {\n        this.target = target;\n        this.observedBox = observedBox || _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.CONTENT_BOX;\n        this.lastReportedSize = {\n            inlineSize: 0,\n            blockSize: 0\n        };\n    }\n    ResizeObservation.prototype.isActive = function () {\n        var size = (0,_algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_1__.calculateBoxSize)(this.target, this.observedBox, true);\n        if (skipNotifyOnElement(this.target)) {\n            this.lastReportedSize = size;\n        }\n        if (this.lastReportedSize.inlineSize !== size.inlineSize\n            || this.lastReportedSize.blockSize !== size.blockSize) {\n            return true;\n        }\n        return false;\n    };\n    return ResizeObservation;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmF0aW9uLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0U7QUFDTDtBQUNOO0FBQzNEO0FBQ0EsWUFBWSxxREFBSztBQUNqQixZQUFZLGlFQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDJGQUFvQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOEVBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUM0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmF0aW9uLmpzPzQ0YzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zIH0gZnJvbSAnLi9SZXNpemVPYnNlcnZlckJveE9wdGlvbnMnO1xuaW1wb3J0IHsgY2FsY3VsYXRlQm94U2l6ZSB9IGZyb20gJy4vYWxnb3JpdGhtcy9jYWxjdWxhdGVCb3hTaXplJztcbmltcG9ydCB7IGlzU1ZHLCBpc1JlcGxhY2VkRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvZWxlbWVudCc7XG52YXIgc2tpcE5vdGlmeU9uRWxlbWVudCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICByZXR1cm4gIWlzU1ZHKHRhcmdldClcbiAgICAgICAgJiYgIWlzUmVwbGFjZWRFbGVtZW50KHRhcmdldClcbiAgICAgICAgJiYgZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmRpc3BsYXkgPT09ICdpbmxpbmUnO1xufTtcbnZhciBSZXNpemVPYnNlcnZhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0LCBvYnNlcnZlZEJveCkge1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5vYnNlcnZlZEJveCA9IG9ic2VydmVkQm94IHx8IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5DT05URU5UX0JPWDtcbiAgICAgICAgdGhpcy5sYXN0UmVwb3J0ZWRTaXplID0ge1xuICAgICAgICAgICAgaW5saW5lU2l6ZTogMCxcbiAgICAgICAgICAgIGJsb2NrU2l6ZTogMFxuICAgICAgICB9O1xuICAgIH1cbiAgICBSZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuaXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzaXplID0gY2FsY3VsYXRlQm94U2l6ZSh0aGlzLnRhcmdldCwgdGhpcy5vYnNlcnZlZEJveCwgdHJ1ZSk7XG4gICAgICAgIGlmIChza2lwTm90aWZ5T25FbGVtZW50KHRoaXMudGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0UmVwb3J0ZWRTaXplID0gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYXN0UmVwb3J0ZWRTaXplLmlubGluZVNpemUgIT09IHNpemUuaW5saW5lU2l6ZVxuICAgICAgICAgICAgfHwgdGhpcy5sYXN0UmVwb3J0ZWRTaXplLmJsb2NrU2l6ZSAhPT0gc2l6ZS5ibG9ja1NpemUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBSZXNpemVPYnNlcnZhdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZhdGlvbiB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObservation.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserver.js":
/*!********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserver.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserver\": () => (/* binding */ ResizeObserver)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResizeObserverController */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\n\nvar ResizeObserver = (function () {\n    function ResizeObserver(callback) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (typeof callback !== 'function') {\n            throw new TypeError(\"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.connect(this, callback);\n    }\n    ResizeObserver.prototype.observe = function (target, options) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (!(0,_utils_element__WEBPACK_IMPORTED_MODULE_1__.isElement)(target)) {\n            throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.observe(this, target, options);\n    };\n    ResizeObserver.prototype.unobserve = function (target) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (!(0,_utils_element__WEBPACK_IMPORTED_MODULE_1__.isElement)(target)) {\n            throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.unobserve(this, target);\n    };\n    ResizeObserver.prototype.disconnect = function () {\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.disconnect(this);\n    };\n    ResizeObserver.toString = function () {\n        return 'function ResizeObserver () { [polyfill code] }';\n    };\n    return ResizeObserver;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRTtBQUMxQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1RkFBZ0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEseURBQVM7QUFDdEI7QUFDQTtBQUNBLFFBQVEsdUZBQWdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlEQUFTO0FBQ3RCO0FBQ0E7QUFDQSxRQUFRLHlGQUFrQztBQUMxQztBQUNBO0FBQ0EsUUFBUSwwRkFBbUM7QUFDM0M7QUFDQTtBQUNBLDZDQUE2QyxpQkFBaUI7QUFDOUQ7QUFDQTtBQUNBLENBQUM7QUFDeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9SZXNpemVPYnNlcnZlci5qcz9kMDIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlciB9IGZyb20gJy4vUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyJztcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvZWxlbWVudCc7XG52YXIgUmVzaXplT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUmVzaXplT2JzZXJ2ZXInOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdSZXNpemVPYnNlcnZlcic6IFRoZSBjYWxsYmFjayBwcm92aWRlZCBhcyBwYXJhbWV0ZXIgMSBpcyBub3QgYSBmdW5jdGlvbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmNvbm5lY3QodGhpcywgY2FsbGJhY2spO1xuICAgIH1cbiAgICBSZXNpemVPYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnb2JzZXJ2ZScgb24gJ1Jlc2l6ZU9ic2VydmVyJzogMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ29ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IHBhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlICdFbGVtZW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5vYnNlcnZlKHRoaXMsIHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBSZXNpemVPYnNlcnZlci5wcm90b3R5cGUudW5vYnNlcnZlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd1bm9ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd1bm9ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IHBhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlICdFbGVtZW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci51bm9ic2VydmUodGhpcywgdGFyZ2V0KTtcbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuZGlzY29ubmVjdCh0aGlzKTtcbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ2Z1bmN0aW9uIFJlc2l6ZU9ic2VydmVyICgpIHsgW3BvbHlmaWxsIGNvZGVdIH0nO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyO1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserver.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverBoxOptions\": () => (/* binding */ ResizeObserverBoxOptions)\n/* harmony export */ });\nvar ResizeObserverBoxOptions;\n(function (ResizeObserverBoxOptions) {\n    ResizeObserverBoxOptions[\"BORDER_BOX\"] = \"border-box\";\n    ResizeObserverBoxOptions[\"CONTENT_BOX\"] = \"content-box\";\n    ResizeObserverBoxOptions[\"DEVICE_PIXEL_CONTENT_BOX\"] = \"device-pixel-content-box\";\n})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNERBQTREO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zLmpzP2U1NTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucztcbihmdW5jdGlvbiAoUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zKSB7XG4gICAgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zW1wiQk9SREVSX0JPWFwiXSA9IFwiYm9yZGVyLWJveFwiO1xuICAgIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9uc1tcIkNPTlRFTlRfQk9YXCJdID0gXCJjb250ZW50LWJveFwiO1xuICAgIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9uc1tcIkRFVklDRV9QSVhFTF9DT05URU5UX0JPWFwiXSA9IFwiZGV2aWNlLXBpeGVsLWNvbnRlbnQtYm94XCI7XG59KShSZXNpemVPYnNlcnZlckJveE9wdGlvbnMgfHwgKFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyA9IHt9KSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverController\": () => (/* binding */ ResizeObserverController)\n/* harmony export */ });\n/* harmony import */ var _utils_scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/scheduler */ \"./node_modules/@juggle/resize-observer/lib/utils/scheduler.js\");\n/* harmony import */ var _ResizeObservation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ResizeObservation */ \"./node_modules/@juggle/resize-observer/lib/ResizeObservation.js\");\n/* harmony import */ var _ResizeObserverDetail__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ResizeObserverDetail */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js\");\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n\n\n\n\nvar observerMap = new WeakMap();\nvar getObservationIndex = function (observationTargets, target) {\n    for (var i = 0; i < observationTargets.length; i += 1) {\n        if (observationTargets[i].target === target) {\n            return i;\n        }\n    }\n    return -1;\n};\nvar ResizeObserverController = (function () {\n    function ResizeObserverController() {\n    }\n    ResizeObserverController.connect = function (resizeObserver, callback) {\n        var detail = new _ResizeObserverDetail__WEBPACK_IMPORTED_MODULE_2__.ResizeObserverDetail(resizeObserver, callback);\n        observerMap.set(resizeObserver, detail);\n    };\n    ResizeObserverController.observe = function (resizeObserver, target, options) {\n        var detail = observerMap.get(resizeObserver);\n        var firstObservation = detail.observationTargets.length === 0;\n        if (getObservationIndex(detail.observationTargets, target) < 0) {\n            firstObservation && _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.push(detail);\n            detail.observationTargets.push(new _ResizeObservation__WEBPACK_IMPORTED_MODULE_1__.ResizeObservation(target, options && options.box));\n            (0,_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.updateCount)(1);\n            _utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.scheduler.schedule();\n        }\n    };\n    ResizeObserverController.unobserve = function (resizeObserver, target) {\n        var detail = observerMap.get(resizeObserver);\n        var index = getObservationIndex(detail.observationTargets, target);\n        var lastObservation = detail.observationTargets.length === 1;\n        if (index >= 0) {\n            lastObservation && _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.splice(_utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.indexOf(detail), 1);\n            detail.observationTargets.splice(index, 1);\n            (0,_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.updateCount)(-1);\n        }\n    };\n    ResizeObserverController.disconnect = function (resizeObserver) {\n        var _this = this;\n        var detail = observerMap.get(resizeObserver);\n        detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });\n        detail.activeTargets.splice(0, detail.activeTargets.length);\n    };\n    return ResizeObserverController;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRDtBQUNIO0FBQ007QUFDSjtBQUMxRDtBQUNBO0FBQ0Esb0JBQW9CLCtCQUErQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1RUFBb0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdFQUFvQjtBQUNwRCwrQ0FBK0MsaUVBQWlCO0FBQ2hFLFlBQVksNkRBQVc7QUFDdkIsWUFBWSxnRUFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMEVBQXNCLENBQUMsMkVBQXVCO0FBQzdFO0FBQ0EsWUFBWSw2REFBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLG9EQUFvRDtBQUN0SDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ21DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmpzP2YzNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NoZWR1bGVyLCB1cGRhdGVDb3VudCB9IGZyb20gJy4vdXRpbHMvc2NoZWR1bGVyJztcbmltcG9ydCB7IFJlc2l6ZU9ic2VydmF0aW9uIH0gZnJvbSAnLi9SZXNpemVPYnNlcnZhdGlvbic7XG5pbXBvcnQgeyBSZXNpemVPYnNlcnZlckRldGFpbCB9IGZyb20gJy4vUmVzaXplT2JzZXJ2ZXJEZXRhaWwnO1xuaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi91dGlscy9yZXNpemVPYnNlcnZlcnMnO1xudmFyIG9ic2VydmVyTWFwID0gbmV3IFdlYWtNYXAoKTtcbnZhciBnZXRPYnNlcnZhdGlvbkluZGV4ID0gZnVuY3Rpb24gKG9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYnNlcnZhdGlvblRhcmdldHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKG9ic2VydmF0aW9uVGFyZ2V0c1tpXS50YXJnZXQgPT09IHRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufTtcbnZhciBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcigpIHtcbiAgICB9XG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmNvbm5lY3QgPSBmdW5jdGlvbiAocmVzaXplT2JzZXJ2ZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkZXRhaWwgPSBuZXcgUmVzaXplT2JzZXJ2ZXJEZXRhaWwocmVzaXplT2JzZXJ2ZXIsIGNhbGxiYWNrKTtcbiAgICAgICAgb2JzZXJ2ZXJNYXAuc2V0KHJlc2l6ZU9ic2VydmVyLCBkZXRhaWwpO1xuICAgIH07XG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLm9ic2VydmUgPSBmdW5jdGlvbiAocmVzaXplT2JzZXJ2ZXIsIHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgZGV0YWlsID0gb2JzZXJ2ZXJNYXAuZ2V0KHJlc2l6ZU9ic2VydmVyKTtcbiAgICAgICAgdmFyIGZpcnN0T2JzZXJ2YXRpb24gPSBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgaWYgKGdldE9ic2VydmF0aW9uSW5kZXgoZGV0YWlsLm9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KSA8IDApIHtcbiAgICAgICAgICAgIGZpcnN0T2JzZXJ2YXRpb24gJiYgcmVzaXplT2JzZXJ2ZXJzLnB1c2goZGV0YWlsKTtcbiAgICAgICAgICAgIGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMucHVzaChuZXcgUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0LCBvcHRpb25zICYmIG9wdGlvbnMuYm94KSk7XG4gICAgICAgICAgICB1cGRhdGVDb3VudCgxKTtcbiAgICAgICAgICAgIHNjaGVkdWxlci5zY2hlZHVsZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIudW5vYnNlcnZlID0gZnVuY3Rpb24gKHJlc2l6ZU9ic2VydmVyLCB0YXJnZXQpIHtcbiAgICAgICAgdmFyIGRldGFpbCA9IG9ic2VydmVyTWFwLmdldChyZXNpemVPYnNlcnZlcik7XG4gICAgICAgIHZhciBpbmRleCA9IGdldE9ic2VydmF0aW9uSW5kZXgoZGV0YWlsLm9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGxhc3RPYnNlcnZhdGlvbiA9IGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMubGVuZ3RoID09PSAxO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgbGFzdE9ic2VydmF0aW9uICYmIHJlc2l6ZU9ic2VydmVycy5zcGxpY2UocmVzaXplT2JzZXJ2ZXJzLmluZGV4T2YoZGV0YWlsKSwgMSk7XG4gICAgICAgICAgICBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB1cGRhdGVDb3VudCgtMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKHJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBkZXRhaWwgPSBvYnNlcnZlck1hcC5nZXQocmVzaXplT2JzZXJ2ZXIpO1xuICAgICAgICBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAob3QpIHsgcmV0dXJuIF90aGlzLnVub2JzZXJ2ZShyZXNpemVPYnNlcnZlciwgb3QudGFyZ2V0KTsgfSk7XG4gICAgICAgIGRldGFpbC5hY3RpdmVUYXJnZXRzLnNwbGljZSgwLCBkZXRhaWwuYWN0aXZlVGFyZ2V0cy5sZW5ndGgpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcjtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverDetail\": () => (/* binding */ ResizeObserverDetail)\n/* harmony export */ });\nvar ResizeObserverDetail = (function () {\n    function ResizeObserverDetail(resizeObserver, callback) {\n        this.activeTargets = [];\n        this.skippedTargets = [];\n        this.observationTargets = [];\n        this.observer = resizeObserver;\n        this.callback = callback;\n    }\n    return ResizeObserverDetail;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRGV0YWlsLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQytCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJEZXRhaWwuanM/NzgxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUmVzaXplT2JzZXJ2ZXJEZXRhaWwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyRGV0YWlsKHJlc2l6ZU9ic2VydmVyLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmFjdGl2ZVRhcmdldHMgPSBbXTtcbiAgICAgICAgdGhpcy5za2lwcGVkVGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLm9ic2VydmF0aW9uVGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLm9ic2VydmVyID0gcmVzaXplT2JzZXJ2ZXI7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyRGV0YWlsO1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyRGV0YWlsIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverEntry\": () => (/* binding */ ResizeObserverEntry)\n/* harmony export */ });\n/* harmony import */ var _algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/calculateBoxSize */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\");\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n\n\nvar ResizeObserverEntry = (function () {\n    function ResizeObserverEntry(target) {\n        var boxes = (0,_algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_0__.calculateBoxSizes)(target);\n        this.target = target;\n        this.contentRect = boxes.contentRect;\n        this.borderBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.borderBoxSize]);\n        this.contentBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.contentBoxSize]);\n        this.devicePixelContentBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.devicePixelContentBoxSize]);\n    }\n    return ResizeObserverEntry;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRW50cnkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtFO0FBQzFCO0FBQ3hDO0FBQ0E7QUFDQSxvQkFBb0IsK0VBQWlCO0FBQ3JDO0FBQ0E7QUFDQSw2QkFBNkIscURBQU07QUFDbkMsOEJBQThCLHFEQUFNO0FBQ3BDLHlDQUF5QyxxREFBTTtBQUMvQztBQUNBO0FBQ0EsQ0FBQztBQUM4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRW50cnkuanM/NDFlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxjdWxhdGVCb3hTaXplcyB9IGZyb20gJy4vYWxnb3JpdGhtcy9jYWxjdWxhdGVCb3hTaXplJztcbmltcG9ydCB7IGZyZWV6ZSB9IGZyb20gJy4vdXRpbHMvZnJlZXplJztcbnZhciBSZXNpemVPYnNlcnZlckVudHJ5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlckVudHJ5KHRhcmdldCkge1xuICAgICAgICB2YXIgYm94ZXMgPSBjYWxjdWxhdGVCb3hTaXplcyh0YXJnZXQpO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5jb250ZW50UmVjdCA9IGJveGVzLmNvbnRlbnRSZWN0O1xuICAgICAgICB0aGlzLmJvcmRlckJveFNpemUgPSBmcmVlemUoW2JveGVzLmJvcmRlckJveFNpemVdKTtcbiAgICAgICAgdGhpcy5jb250ZW50Qm94U2l6ZSA9IGZyZWV6ZShbYm94ZXMuY29udGVudEJveFNpemVdKTtcbiAgICAgICAgdGhpcy5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplID0gZnJlZXplKFtib3hlcy5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplXSk7XG4gICAgfVxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlckVudHJ5O1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyRW50cnkgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js":
/*!************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverSize\": () => (/* binding */ ResizeObserverSize)\n/* harmony export */ });\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n\nvar ResizeObserverSize = (function () {\n    function ResizeObserverSize(inlineSize, blockSize) {\n        this.inlineSize = inlineSize;\n        this.blockSize = blockSize;\n        (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_0__.freeze)(this);\n    }\n    return ResizeObserverSize;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyU2l6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEscURBQU07QUFDZDtBQUNBO0FBQ0EsQ0FBQztBQUM2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyU2l6ZS5qcz9jNjU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyZWV6ZSB9IGZyb20gJy4vdXRpbHMvZnJlZXplJztcbnZhciBSZXNpemVPYnNlcnZlclNpemUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyU2l6ZShpbmxpbmVTaXplLCBibG9ja1NpemUpIHtcbiAgICAgICAgdGhpcy5pbmxpbmVTaXplID0gaW5saW5lU2l6ZTtcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSBibG9ja1NpemU7XG4gICAgICAgIGZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyU2l6ZTtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlclNpemUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"broadcastActiveObservations\": () => (/* binding */ broadcastActiveObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n/* harmony import */ var _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverEntry */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\");\n/* harmony import */ var _calculateDepthForNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculateDepthForNode */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\");\n/* harmony import */ var _calculateBoxSize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./calculateBoxSize */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\");\n\n\n\n\nvar broadcastActiveObservations = function () {\n    var shallowestDepth = Infinity;\n    var callbacks = [];\n    _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.forEach(function processObserver(ro) {\n        if (ro.activeTargets.length === 0) {\n            return;\n        }\n        var entries = [];\n        ro.activeTargets.forEach(function processTarget(ot) {\n            var entry = new _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverEntry(ot.target);\n            var targetDepth = (0,_calculateDepthForNode__WEBPACK_IMPORTED_MODULE_2__.calculateDepthForNode)(ot.target);\n            entries.push(entry);\n            ot.lastReportedSize = (0,_calculateBoxSize__WEBPACK_IMPORTED_MODULE_3__.calculateBoxSize)(ot.target, ot.observedBox);\n            if (targetDepth < shallowestDepth) {\n                shallowestDepth = targetDepth;\n            }\n        });\n        callbacks.push(function resizeObserverCallback() {\n            ro.callback.call(ro.observer, entries, ro.observer);\n        });\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n    });\n    for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n        var callback = callbacks_1[_i];\n        callback();\n    }\n    return shallowestDepth;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJEO0FBQ0U7QUFDRztBQUNWO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLElBQUksMkVBQXVCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIscUVBQW1CO0FBQy9DLDhCQUE4Qiw2RUFBcUI7QUFDbkQ7QUFDQSxrQ0FBa0MsbUVBQWdCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLDhDQUE4Qyx5QkFBeUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zLmpzP2NhYjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbmltcG9ydCB7IFJlc2l6ZU9ic2VydmVyRW50cnkgfSBmcm9tICcuLi9SZXNpemVPYnNlcnZlckVudHJ5JztcbmltcG9ydCB7IGNhbGN1bGF0ZURlcHRoRm9yTm9kZSB9IGZyb20gJy4vY2FsY3VsYXRlRGVwdGhGb3JOb2RlJztcbmltcG9ydCB7IGNhbGN1bGF0ZUJveFNpemUgfSBmcm9tICcuL2NhbGN1bGF0ZUJveFNpemUnO1xudmFyIGJyb2FkY2FzdEFjdGl2ZU9ic2VydmF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2hhbGxvd2VzdERlcHRoID0gSW5maW5pdHk7XG4gICAgdmFyIGNhbGxiYWNrcyA9IFtdO1xuICAgIHJlc2l6ZU9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIHByb2Nlc3NPYnNlcnZlcihybykge1xuICAgICAgICBpZiAocm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgICAgICByby5hY3RpdmVUYXJnZXRzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc1RhcmdldChvdCkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob3QudGFyZ2V0KTtcbiAgICAgICAgICAgIHZhciB0YXJnZXREZXB0aCA9IGNhbGN1bGF0ZURlcHRoRm9yTm9kZShvdC50YXJnZXQpO1xuICAgICAgICAgICAgZW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIG90Lmxhc3RSZXBvcnRlZFNpemUgPSBjYWxjdWxhdGVCb3hTaXplKG90LnRhcmdldCwgb3Qub2JzZXJ2ZWRCb3gpO1xuICAgICAgICAgICAgaWYgKHRhcmdldERlcHRoIDwgc2hhbGxvd2VzdERlcHRoKSB7XG4gICAgICAgICAgICAgICAgc2hhbGxvd2VzdERlcHRoID0gdGFyZ2V0RGVwdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiByZXNpemVPYnNlcnZlckNhbGxiYWNrKCkge1xuICAgICAgICAgICAgcm8uY2FsbGJhY2suY2FsbChyby5vYnNlcnZlciwgZW50cmllcywgcm8ub2JzZXJ2ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcm8uYWN0aXZlVGFyZ2V0cy5zcGxpY2UoMCwgcm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGgpO1xuICAgIH0pO1xuICAgIGZvciAodmFyIF9pID0gMCwgY2FsbGJhY2tzXzEgPSBjYWxsYmFja3M7IF9pIDwgY2FsbGJhY2tzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc18xW19pXTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYWxsb3dlc3REZXB0aDtcbn07XG5leHBvcnQgeyBicm9hZGNhc3RBY3RpdmVPYnNlcnZhdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateBoxSize\": () => (/* binding */ calculateBoxSize),\n/* harmony export */   \"calculateBoxSizes\": () => (/* binding */ calculateBoxSizes)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ResizeObserverBoxOptions */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\");\n/* harmony import */ var _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverSize */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\");\n/* harmony import */ var _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../DOMRectReadOnly */ \"./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n/* harmony import */ var _utils_global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/global */ \"./node_modules/@juggle/resize-observer/lib/utils/global.js\");\n\n\n\n\n\n\nvar cache = new WeakMap();\nvar scrollRegexp = /auto|scroll/;\nvar verticalRegexp = /^tb|vertical/;\nvar IE = (/msie|trident/i).test(_utils_global__WEBPACK_IMPORTED_MODULE_5__.global.navigator && _utils_global__WEBPACK_IMPORTED_MODULE_5__.global.navigator.userAgent);\nvar parseDimension = function (pixel) { return parseFloat(pixel || '0'); };\nvar size = function (inlineSize, blockSize, switchSizes) {\n    if (inlineSize === void 0) { inlineSize = 0; }\n    if (blockSize === void 0) { blockSize = 0; }\n    if (switchSizes === void 0) { switchSizes = false; }\n    return new _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);\n};\nvar zeroBoxes = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_4__.freeze)({\n    devicePixelContentBoxSize: size(),\n    borderBoxSize: size(),\n    contentBoxSize: size(),\n    contentRect: new _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__.DOMRectReadOnly(0, 0, 0, 0)\n});\nvar calculateBoxSizes = function (target, forceRecalculation) {\n    if (forceRecalculation === void 0) { forceRecalculation = false; }\n    if (cache.has(target) && !forceRecalculation) {\n        return cache.get(target);\n    }\n    if ((0,_utils_element__WEBPACK_IMPORTED_MODULE_3__.isHidden)(target)) {\n        cache.set(target, zeroBoxes);\n        return zeroBoxes;\n    }\n    var cs = getComputedStyle(target);\n    var svg = (0,_utils_element__WEBPACK_IMPORTED_MODULE_3__.isSVG)(target) && target.ownerSVGElement && target.getBBox();\n    var removePadding = !IE && cs.boxSizing === 'border-box';\n    var switchSizes = verticalRegexp.test(cs.writingMode || '');\n    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n    var horizontalPadding = paddingLeft + paddingRight;\n    var verticalPadding = paddingTop + paddingBottom;\n    var horizontalBorderArea = borderLeft + borderRight;\n    var verticalBorderArea = borderTop + borderBottom;\n    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n    var boxes = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_4__.freeze)({\n        devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),\n        borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n        contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n        contentRect: new _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__.DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n    });\n    cache.set(target, boxes);\n    return boxes;\n};\nvar calculateBoxSize = function (target, observedBox, forceRecalculation) {\n    var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;\n    switch (observedBox) {\n        case _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:\n            return devicePixelContentBoxSize;\n        case _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.BORDER_BOX:\n            return borderBoxSize;\n        default:\n            return contentBoxSize;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlQm94U2l6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF1RTtBQUNaO0FBQ047QUFDRjtBQUNWO0FBQ0E7QUFDekM7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDJEQUFnQixJQUFJLHFFQUEwQjtBQUM5RSx3Q0FBd0M7QUFDeEM7QUFDQSxpQ0FBaUM7QUFDakMsZ0NBQWdDO0FBQ2hDLGtDQUFrQztBQUNsQyxlQUFlLG1FQUFrQjtBQUNqQztBQUNBLGdCQUFnQixxREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkRBQWU7QUFDcEMsQ0FBQztBQUNEO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0RBQVE7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHFEQUFLO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNkRBQWU7QUFDeEMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsd0dBQWlEO0FBQzlEO0FBQ0EsYUFBYSwwRkFBbUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlQm94U2l6ZS5qcz8xMDZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyB9IGZyb20gJy4uL1Jlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyc7XG5pbXBvcnQgeyBSZXNpemVPYnNlcnZlclNpemUgfSBmcm9tICcuLi9SZXNpemVPYnNlcnZlclNpemUnO1xuaW1wb3J0IHsgRE9NUmVjdFJlYWRPbmx5IH0gZnJvbSAnLi4vRE9NUmVjdFJlYWRPbmx5JztcbmltcG9ydCB7IGlzU1ZHLCBpc0hpZGRlbiB9IGZyb20gJy4uL3V0aWxzL2VsZW1lbnQnO1xuaW1wb3J0IHsgZnJlZXplIH0gZnJvbSAnLi4vdXRpbHMvZnJlZXplJztcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gJy4uL3V0aWxzL2dsb2JhbCc7XG52YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xudmFyIHNjcm9sbFJlZ2V4cCA9IC9hdXRvfHNjcm9sbC87XG52YXIgdmVydGljYWxSZWdleHAgPSAvXnRifHZlcnRpY2FsLztcbnZhciBJRSA9ICgvbXNpZXx0cmlkZW50L2kpLnRlc3QoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG52YXIgcGFyc2VEaW1lbnNpb24gPSBmdW5jdGlvbiAocGl4ZWwpIHsgcmV0dXJuIHBhcnNlRmxvYXQocGl4ZWwgfHwgJzAnKTsgfTtcbnZhciBzaXplID0gZnVuY3Rpb24gKGlubGluZVNpemUsIGJsb2NrU2l6ZSwgc3dpdGNoU2l6ZXMpIHtcbiAgICBpZiAoaW5saW5lU2l6ZSA9PT0gdm9pZCAwKSB7IGlubGluZVNpemUgPSAwOyB9XG4gICAgaWYgKGJsb2NrU2l6ZSA9PT0gdm9pZCAwKSB7IGJsb2NrU2l6ZSA9IDA7IH1cbiAgICBpZiAoc3dpdGNoU2l6ZXMgPT09IHZvaWQgMCkgeyBzd2l0Y2hTaXplcyA9IGZhbHNlOyB9XG4gICAgcmV0dXJuIG5ldyBSZXNpemVPYnNlcnZlclNpemUoKHN3aXRjaFNpemVzID8gYmxvY2tTaXplIDogaW5saW5lU2l6ZSkgfHwgMCwgKHN3aXRjaFNpemVzID8gaW5saW5lU2l6ZSA6IGJsb2NrU2l6ZSkgfHwgMCk7XG59O1xudmFyIHplcm9Cb3hlcyA9IGZyZWV6ZSh7XG4gICAgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTogc2l6ZSgpLFxuICAgIGJvcmRlckJveFNpemU6IHNpemUoKSxcbiAgICBjb250ZW50Qm94U2l6ZTogc2l6ZSgpLFxuICAgIGNvbnRlbnRSZWN0OiBuZXcgRE9NUmVjdFJlYWRPbmx5KDAsIDAsIDAsIDApXG59KTtcbnZhciBjYWxjdWxhdGVCb3hTaXplcyA9IGZ1bmN0aW9uICh0YXJnZXQsIGZvcmNlUmVjYWxjdWxhdGlvbikge1xuICAgIGlmIChmb3JjZVJlY2FsY3VsYXRpb24gPT09IHZvaWQgMCkgeyBmb3JjZVJlY2FsY3VsYXRpb24gPSBmYWxzZTsgfVxuICAgIGlmIChjYWNoZS5oYXModGFyZ2V0KSAmJiAhZm9yY2VSZWNhbGN1bGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5nZXQodGFyZ2V0KTtcbiAgICB9XG4gICAgaWYgKGlzSGlkZGVuKHRhcmdldCkpIHtcbiAgICAgICAgY2FjaGUuc2V0KHRhcmdldCwgemVyb0JveGVzKTtcbiAgICAgICAgcmV0dXJuIHplcm9Cb3hlcztcbiAgICB9XG4gICAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICAgIHZhciBzdmcgPSBpc1NWRyh0YXJnZXQpICYmIHRhcmdldC5vd25lclNWR0VsZW1lbnQgJiYgdGFyZ2V0LmdldEJCb3goKTtcbiAgICB2YXIgcmVtb3ZlUGFkZGluZyA9ICFJRSAmJiBjcy5ib3hTaXppbmcgPT09ICdib3JkZXItYm94JztcbiAgICB2YXIgc3dpdGNoU2l6ZXMgPSB2ZXJ0aWNhbFJlZ2V4cC50ZXN0KGNzLndyaXRpbmdNb2RlIHx8ICcnKTtcbiAgICB2YXIgY2FuU2Nyb2xsVmVydGljYWxseSA9ICFzdmcgJiYgc2Nyb2xsUmVnZXhwLnRlc3QoY3Mub3ZlcmZsb3dZIHx8ICcnKTtcbiAgICB2YXIgY2FuU2Nyb2xsSG9yaXpvbnRhbGx5ID0gIXN2ZyAmJiBzY3JvbGxSZWdleHAudGVzdChjcy5vdmVyZmxvd1ggfHwgJycpO1xuICAgIHZhciBwYWRkaW5nVG9wID0gc3ZnID8gMCA6IHBhcnNlRGltZW5zaW9uKGNzLnBhZGRpbmdUb3ApO1xuICAgIHZhciBwYWRkaW5nUmlnaHQgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ1JpZ2h0KTtcbiAgICB2YXIgcGFkZGluZ0JvdHRvbSA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5wYWRkaW5nQm90dG9tKTtcbiAgICB2YXIgcGFkZGluZ0xlZnQgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ0xlZnQpO1xuICAgIHZhciBib3JkZXJUb3AgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MuYm9yZGVyVG9wV2lkdGgpO1xuICAgIHZhciBib3JkZXJSaWdodCA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5ib3JkZXJSaWdodFdpZHRoKTtcbiAgICB2YXIgYm9yZGVyQm90dG9tID0gc3ZnID8gMCA6IHBhcnNlRGltZW5zaW9uKGNzLmJvcmRlckJvdHRvbVdpZHRoKTtcbiAgICB2YXIgYm9yZGVyTGVmdCA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5ib3JkZXJMZWZ0V2lkdGgpO1xuICAgIHZhciBob3Jpem9udGFsUGFkZGluZyA9IHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0O1xuICAgIHZhciB2ZXJ0aWNhbFBhZGRpbmcgPSBwYWRkaW5nVG9wICsgcGFkZGluZ0JvdHRvbTtcbiAgICB2YXIgaG9yaXpvbnRhbEJvcmRlckFyZWEgPSBib3JkZXJMZWZ0ICsgYm9yZGVyUmlnaHQ7XG4gICAgdmFyIHZlcnRpY2FsQm9yZGVyQXJlYSA9IGJvcmRlclRvcCArIGJvcmRlckJvdHRvbTtcbiAgICB2YXIgaG9yaXpvbnRhbFNjcm9sbGJhclRoaWNrbmVzcyA9ICFjYW5TY3JvbGxIb3Jpem9udGFsbHkgPyAwIDogdGFyZ2V0Lm9mZnNldEhlaWdodCAtIHZlcnRpY2FsQm9yZGVyQXJlYSAtIHRhcmdldC5jbGllbnRIZWlnaHQ7XG4gICAgdmFyIHZlcnRpY2FsU2Nyb2xsYmFyVGhpY2tuZXNzID0gIWNhblNjcm9sbFZlcnRpY2FsbHkgPyAwIDogdGFyZ2V0Lm9mZnNldFdpZHRoIC0gaG9yaXpvbnRhbEJvcmRlckFyZWEgLSB0YXJnZXQuY2xpZW50V2lkdGg7XG4gICAgdmFyIHdpZHRoUmVkdWN0aW9uID0gcmVtb3ZlUGFkZGluZyA/IGhvcml6b250YWxQYWRkaW5nICsgaG9yaXpvbnRhbEJvcmRlckFyZWEgOiAwO1xuICAgIHZhciBoZWlnaHRSZWR1Y3Rpb24gPSByZW1vdmVQYWRkaW5nID8gdmVydGljYWxQYWRkaW5nICsgdmVydGljYWxCb3JkZXJBcmVhIDogMDtcbiAgICB2YXIgY29udGVudFdpZHRoID0gc3ZnID8gc3ZnLndpZHRoIDogcGFyc2VEaW1lbnNpb24oY3Mud2lkdGgpIC0gd2lkdGhSZWR1Y3Rpb24gLSB2ZXJ0aWNhbFNjcm9sbGJhclRoaWNrbmVzcztcbiAgICB2YXIgY29udGVudEhlaWdodCA9IHN2ZyA/IHN2Zy5oZWlnaHQgOiBwYXJzZURpbWVuc2lvbihjcy5oZWlnaHQpIC0gaGVpZ2h0UmVkdWN0aW9uIC0gaG9yaXpvbnRhbFNjcm9sbGJhclRoaWNrbmVzcztcbiAgICB2YXIgYm9yZGVyQm94V2lkdGggPSBjb250ZW50V2lkdGggKyBob3Jpem9udGFsUGFkZGluZyArIHZlcnRpY2FsU2Nyb2xsYmFyVGhpY2tuZXNzICsgaG9yaXpvbnRhbEJvcmRlckFyZWE7XG4gICAgdmFyIGJvcmRlckJveEhlaWdodCA9IGNvbnRlbnRIZWlnaHQgKyB2ZXJ0aWNhbFBhZGRpbmcgKyBob3Jpem9udGFsU2Nyb2xsYmFyVGhpY2tuZXNzICsgdmVydGljYWxCb3JkZXJBcmVhO1xuICAgIHZhciBib3hlcyA9IGZyZWV6ZSh7XG4gICAgICAgIGRldmljZVBpeGVsQ29udGVudEJveFNpemU6IHNpemUoTWF0aC5yb3VuZChjb250ZW50V2lkdGggKiBkZXZpY2VQaXhlbFJhdGlvKSwgTWF0aC5yb3VuZChjb250ZW50SGVpZ2h0ICogZGV2aWNlUGl4ZWxSYXRpbyksIHN3aXRjaFNpemVzKSxcbiAgICAgICAgYm9yZGVyQm94U2l6ZTogc2l6ZShib3JkZXJCb3hXaWR0aCwgYm9yZGVyQm94SGVpZ2h0LCBzd2l0Y2hTaXplcyksXG4gICAgICAgIGNvbnRlbnRCb3hTaXplOiBzaXplKGNvbnRlbnRXaWR0aCwgY29udGVudEhlaWdodCwgc3dpdGNoU2l6ZXMpLFxuICAgICAgICBjb250ZW50UmVjdDogbmV3IERPTVJlY3RSZWFkT25seShwYWRkaW5nTGVmdCwgcGFkZGluZ1RvcCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0KVxuICAgIH0pO1xuICAgIGNhY2hlLnNldCh0YXJnZXQsIGJveGVzKTtcbiAgICByZXR1cm4gYm94ZXM7XG59O1xudmFyIGNhbGN1bGF0ZUJveFNpemUgPSBmdW5jdGlvbiAodGFyZ2V0LCBvYnNlcnZlZEJveCwgZm9yY2VSZWNhbGN1bGF0aW9uKSB7XG4gICAgdmFyIF9hID0gY2FsY3VsYXRlQm94U2l6ZXModGFyZ2V0LCBmb3JjZVJlY2FsY3VsYXRpb24pLCBib3JkZXJCb3hTaXplID0gX2EuYm9yZGVyQm94U2l6ZSwgY29udGVudEJveFNpemUgPSBfYS5jb250ZW50Qm94U2l6ZSwgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZSA9IF9hLmRldmljZVBpeGVsQ29udGVudEJveFNpemU7XG4gICAgc3dpdGNoIChvYnNlcnZlZEJveCkge1xuICAgICAgICBjYXNlIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5ERVZJQ0VfUElYRUxfQ09OVEVOVF9CT1g6XG4gICAgICAgICAgICByZXR1cm4gZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTtcbiAgICAgICAgY2FzZSBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMuQk9SREVSX0JPWDpcbiAgICAgICAgICAgIHJldHVybiBib3JkZXJCb3hTaXplO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRCb3hTaXplO1xuICAgIH1cbn07XG5leHBvcnQgeyBjYWxjdWxhdGVCb3hTaXplLCBjYWxjdWxhdGVCb3hTaXplcyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateDepthForNode\": () => (/* binding */ calculateDepthForNode)\n/* harmony export */ });\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\nvar calculateDepthForNode = function (node) {\n    if ((0,_utils_element__WEBPACK_IMPORTED_MODULE_0__.isHidden)(node)) {\n        return Infinity;\n    }\n    var depth = 0;\n    var parent = node.parentNode;\n    while (parent) {\n        depth += 1;\n        parent = parent.parentNode;\n    }\n    return depth;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlRGVwdGhGb3JOb2RlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDO0FBQ0EsUUFBUSx3REFBUTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlRGVwdGhGb3JOb2RlLmpzP2M5MzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNIaWRkZW4gfSBmcm9tICcuLi91dGlscy9lbGVtZW50JztcbnZhciBjYWxjdWxhdGVEZXB0aEZvck5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChpc0hpZGRlbihub2RlKSkge1xuICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIGRlcHRoICs9IDE7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZGVwdGg7XG59O1xuZXhwb3J0IHsgY2FsY3VsYXRlRGVwdGhGb3JOb2RlIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deliverResizeLoopError\": () => (/* binding */ deliverResizeLoopError)\n/* harmony export */ });\nvar msg = 'ResizeObserver loop completed with undelivered notifications.';\nvar deliverResizeLoopError = function () {\n    var event;\n    if (typeof ErrorEvent === 'function') {\n        event = new ErrorEvent('error', {\n            message: msg\n        });\n    }\n    else {\n        event = document.createEvent('Event');\n        event.initEvent('error', false, false);\n        event.message = msg;\n    }\n    window.dispatchEvent(event);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvZGVsaXZlclJlc2l6ZUxvb3BFcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9hbGdvcml0aG1zL2RlbGl2ZXJSZXNpemVMb29wRXJyb3IuanM/YzJlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbXNnID0gJ1Jlc2l6ZU9ic2VydmVyIGxvb3AgY29tcGxldGVkIHdpdGggdW5kZWxpdmVyZWQgbm90aWZpY2F0aW9ucy4nO1xudmFyIGRlbGl2ZXJSZXNpemVMb29wRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV2ZW50O1xuICAgIGlmICh0eXBlb2YgRXJyb3JFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBldmVudCA9IG5ldyBFcnJvckV2ZW50KCdlcnJvcicsIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1zZ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICAgIGV2ZW50LmluaXRFdmVudCgnZXJyb3InLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBldmVudC5tZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG59O1xuZXhwb3J0IHsgZGVsaXZlclJlc2l6ZUxvb3BFcnJvciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gatherActiveObservationsAtDepth\": () => (/* binding */ gatherActiveObservationsAtDepth)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n/* harmony import */ var _calculateDepthForNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calculateDepthForNode */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\");\n\n\nvar gatherActiveObservationsAtDepth = function (depth) {\n    _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.forEach(function processObserver(ro) {\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n        ro.skippedTargets.splice(0, ro.skippedTargets.length);\n        ro.observationTargets.forEach(function processTarget(ot) {\n            if (ot.isActive()) {\n                if ((0,_calculateDepthForNode__WEBPACK_IMPORTED_MODULE_1__.calculateDepthForNode)(ot.target) > depth) {\n                    ro.activeTargets.push(ot);\n                }\n                else {\n                    ro.skippedTargets.push(ot);\n                }\n            }\n        });\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkQ7QUFDSztBQUNoRTtBQUNBLElBQUksMkVBQXVCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDZFQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQzJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvYWxnb3JpdGhtcy9nYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoLmpzPzQ1YjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbmltcG9ydCB7IGNhbGN1bGF0ZURlcHRoRm9yTm9kZSB9IGZyb20gJy4vY2FsY3VsYXRlRGVwdGhGb3JOb2RlJztcbnZhciBnYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoID0gZnVuY3Rpb24gKGRlcHRoKSB7XG4gICAgcmVzaXplT2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc09ic2VydmVyKHJvKSB7XG4gICAgICAgIHJvLmFjdGl2ZVRhcmdldHMuc3BsaWNlKDAsIHJvLmFjdGl2ZVRhcmdldHMubGVuZ3RoKTtcbiAgICAgICAgcm8uc2tpcHBlZFRhcmdldHMuc3BsaWNlKDAsIHJvLnNraXBwZWRUYXJnZXRzLmxlbmd0aCk7XG4gICAgICAgIHJvLm9ic2VydmF0aW9uVGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uIHByb2Nlc3NUYXJnZXQob3QpIHtcbiAgICAgICAgICAgIGlmIChvdC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGN1bGF0ZURlcHRoRm9yTm9kZShvdC50YXJnZXQpID4gZGVwdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcm8uYWN0aXZlVGFyZ2V0cy5wdXNoKG90KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJvLnNraXBwZWRUYXJnZXRzLnB1c2gob3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0IHsgZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hasActiveObservations\": () => (/* binding */ hasActiveObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n\nvar hasActiveObservations = function () {\n    return _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzQWN0aXZlT2JzZXJ2YXRpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJEO0FBQzNEO0FBQ0EsV0FBVyx3RUFBb0IsaUJBQWlCLHFDQUFxQztBQUNyRjtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzQWN0aXZlT2JzZXJ2YXRpb25zLmpzP2RkYTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbnZhciBoYXNBY3RpdmVPYnNlcnZhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlc2l6ZU9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChybykgeyByZXR1cm4gcm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGggPiAwOyB9KTtcbn07XG5leHBvcnQgeyBoYXNBY3RpdmVPYnNlcnZhdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hasSkippedObservations\": () => (/* binding */ hasSkippedObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n\nvar hasSkippedObservations = function () {\n    return _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzU2tpcHBlZE9ic2VydmF0aW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyRDtBQUMzRDtBQUNBLFdBQVcsd0VBQW9CLGlCQUFpQixzQ0FBc0M7QUFDdEY7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9hbGdvcml0aG1zL2hhc1NraXBwZWRPYnNlcnZhdGlvbnMuanM/YzEwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNpemVPYnNlcnZlcnMgfSBmcm9tICcuLi91dGlscy9yZXNpemVPYnNlcnZlcnMnO1xudmFyIGhhc1NraXBwZWRPYnNlcnZhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlc2l6ZU9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChybykgeyByZXR1cm4gcm8uc2tpcHBlZFRhcmdldHMubGVuZ3RoID4gMDsgfSk7XG59O1xuZXhwb3J0IHsgaGFzU2tpcHBlZE9ic2VydmF0aW9ucyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserver\": () => (/* reexport safe */ _ResizeObserver__WEBPACK_IMPORTED_MODULE_0__.ResizeObserver),\n/* harmony export */   \"ResizeObserverEntry\": () => (/* reexport safe */ _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverEntry),\n/* harmony export */   \"ResizeObserverSize\": () => (/* reexport safe */ _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_2__.ResizeObserverSize)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ResizeObserver */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserver.js\");\n/* harmony import */ var _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverEntry */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\");\n/* harmony import */ var _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ResizeObserverSize */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2V4cG9ydHMvcmVzaXplLW9ic2VydmVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFtRDtBQUNVO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9leHBvcnRzL3Jlc2l6ZS1vYnNlcnZlci5qcz8xZDFmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyIH0gZnJvbSAnLi4vUmVzaXplT2JzZXJ2ZXInO1xuZXhwb3J0IHsgUmVzaXplT2JzZXJ2ZXJFbnRyeSB9IGZyb20gJy4uL1Jlc2l6ZU9ic2VydmVyRW50cnknO1xuZXhwb3J0IHsgUmVzaXplT2JzZXJ2ZXJTaXplIH0gZnJvbSAnLi4vUmVzaXplT2JzZXJ2ZXJTaXplJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/element.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isElement\": () => (/* binding */ isElement),\n/* harmony export */   \"isHidden\": () => (/* binding */ isHidden),\n/* harmony export */   \"isReplacedElement\": () => (/* binding */ isReplacedElement),\n/* harmony export */   \"isSVG\": () => (/* binding */ isSVG)\n/* harmony export */ });\nvar isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };\nvar isHidden = function (target) {\n    if (isSVG(target)) {\n        var _a = target.getBBox(), width = _a.width, height = _a.height;\n        return !width && !height;\n    }\n    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;\n    return !(offsetWidth || offsetHeight || target.getClientRects().length);\n};\nvar isElement = function (obj) {\n    var _a, _b;\n    if (obj instanceof Element) {\n        return true;\n    }\n    var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;\n    return !!(scope && obj instanceof scope.Element);\n};\nvar isReplacedElement = function (target) {\n    switch (target.tagName) {\n        case 'INPUT':\n            if (target.type !== 'image') {\n                break;\n            }\n        case 'VIDEO':\n        case 'AUDIO':\n        case 'EMBED':\n        case 'OBJECT':\n        case 'CANVAS':\n        case 'IFRAME':\n        case 'IMG':\n            return true;\n    }\n    return false;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2VsZW1lbnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDeUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9lbGVtZW50LmpzPzNjZDUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzU1ZHID0gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCAmJiAnZ2V0QkJveCcgaW4gdGFyZ2V0OyB9O1xudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGlmIChpc1NWRyh0YXJnZXQpKSB7XG4gICAgICAgIHZhciBfYSA9IHRhcmdldC5nZXRCQm94KCksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcbiAgICAgICAgcmV0dXJuICF3aWR0aCAmJiAhaGVpZ2h0O1xuICAgIH1cbiAgICB2YXIgX2IgPSB0YXJnZXQsIG9mZnNldFdpZHRoID0gX2Iub2Zmc2V0V2lkdGgsIG9mZnNldEhlaWdodCA9IF9iLm9mZnNldEhlaWdodDtcbiAgICByZXR1cm4gIShvZmZzZXRXaWR0aCB8fCBvZmZzZXRIZWlnaHQgfHwgdGFyZ2V0LmdldENsaWVudFJlY3RzKCkubGVuZ3RoKTtcbn07XG52YXIgaXNFbGVtZW50ID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBzY29wZSA9IChfYiA9IChfYSA9IG9iaikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm93bmVyRG9jdW1lbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5kZWZhdWx0VmlldztcbiAgICByZXR1cm4gISEoc2NvcGUgJiYgb2JqIGluc3RhbmNlb2Ygc2NvcGUuRWxlbWVudCk7XG59O1xudmFyIGlzUmVwbGFjZWRFbGVtZW50ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHN3aXRjaCAodGFyZ2V0LnRhZ05hbWUpIHtcbiAgICAgICAgY2FzZSAnSU5QVVQnOlxuICAgICAgICAgICAgaWYgKHRhcmdldC50eXBlICE9PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1ZJREVPJzpcbiAgICAgICAgY2FzZSAnQVVESU8nOlxuICAgICAgICBjYXNlICdFTUJFRCc6XG4gICAgICAgIGNhc2UgJ09CSkVDVCc6XG4gICAgICAgIGNhc2UgJ0NBTlZBUyc6XG4gICAgICAgIGNhc2UgJ0lGUkFNRSc6XG4gICAgICAgIGNhc2UgJ0lNRyc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydCB7IGlzU1ZHLCBpc0hpZGRlbiwgaXNFbGVtZW50LCBpc1JlcGxhY2VkRWxlbWVudCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/element.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js":
/*!******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/freeze.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"freeze\": () => (/* binding */ freeze)\n/* harmony export */ });\nvar freeze = function (obj) { return Object.freeze(obj); };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2ZyZWV6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvZnJlZXplLmpzP2ZjZjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBmcmVlemUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBPYmplY3QuZnJlZXplKG9iaik7IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/freeze.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/global.js":
/*!******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/global.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"global\": () => (/* binding */ global)\n/* harmony export */ });\nvar global = typeof window !== 'undefined' ? window : {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2dsb2JhbC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9nbG9iYWwuanM/Y2I3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIGdsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/global.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/process.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/process.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"process\": () => (/* binding */ process)\n/* harmony export */ });\n/* harmony import */ var _algorithms_hasActiveObservations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../algorithms/hasActiveObservations */ \"./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js\");\n/* harmony import */ var _algorithms_hasSkippedObservations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../algorithms/hasSkippedObservations */ \"./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js\");\n/* harmony import */ var _algorithms_deliverResizeLoopError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../algorithms/deliverResizeLoopError */ \"./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js\");\n/* harmony import */ var _algorithms_broadcastActiveObservations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../algorithms/broadcastActiveObservations */ \"./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js\");\n/* harmony import */ var _algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../algorithms/gatherActiveObservationsAtDepth */ \"./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js\");\n\n\n\n\n\nvar process = function () {\n    var depth = 0;\n    (0,_algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__.gatherActiveObservationsAtDepth)(depth);\n    while ((0,_algorithms_hasActiveObservations__WEBPACK_IMPORTED_MODULE_0__.hasActiveObservations)()) {\n        depth = (0,_algorithms_broadcastActiveObservations__WEBPACK_IMPORTED_MODULE_3__.broadcastActiveObservations)();\n        (0,_algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__.gatherActiveObservationsAtDepth)(depth);\n    }\n    if ((0,_algorithms_hasSkippedObservations__WEBPACK_IMPORTED_MODULE_1__.hasSkippedObservations)()) {\n        (0,_algorithms_deliverResizeLoopError__WEBPACK_IMPORTED_MODULE_2__.deliverResizeLoopError)();\n    }\n    return depth > 0;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3Byb2Nlc3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTRFO0FBQ0U7QUFDQTtBQUNVO0FBQ1E7QUFDaEc7QUFDQTtBQUNBLElBQUksNEdBQStCO0FBQ25DLFdBQVcsd0ZBQXFCO0FBQ2hDLGdCQUFnQixvR0FBMkI7QUFDM0MsUUFBUSw0R0FBK0I7QUFDdkM7QUFDQSxRQUFRLDBGQUFzQjtBQUM5QixRQUFRLDBGQUFzQjtBQUM5QjtBQUNBO0FBQ0E7QUFDbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9wcm9jZXNzLmpzP2Q0YzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzQWN0aXZlT2JzZXJ2YXRpb25zIH0gZnJvbSAnLi4vYWxnb3JpdGhtcy9oYXNBY3RpdmVPYnNlcnZhdGlvbnMnO1xuaW1wb3J0IHsgaGFzU2tpcHBlZE9ic2VydmF0aW9ucyB9IGZyb20gJy4uL2FsZ29yaXRobXMvaGFzU2tpcHBlZE9ic2VydmF0aW9ucyc7XG5pbXBvcnQgeyBkZWxpdmVyUmVzaXplTG9vcEVycm9yIH0gZnJvbSAnLi4vYWxnb3JpdGhtcy9kZWxpdmVyUmVzaXplTG9vcEVycm9yJztcbmltcG9ydCB7IGJyb2FkY2FzdEFjdGl2ZU9ic2VydmF0aW9ucyB9IGZyb20gJy4uL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zJztcbmltcG9ydCB7IGdhdGhlckFjdGl2ZU9ic2VydmF0aW9uc0F0RGVwdGggfSBmcm9tICcuLi9hbGdvcml0aG1zL2dhdGhlckFjdGl2ZU9ic2VydmF0aW9uc0F0RGVwdGgnO1xudmFyIHByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlcHRoID0gMDtcbiAgICBnYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoKGRlcHRoKTtcbiAgICB3aGlsZSAoaGFzQWN0aXZlT2JzZXJ2YXRpb25zKCkpIHtcbiAgICAgICAgZGVwdGggPSBicm9hZGNhc3RBY3RpdmVPYnNlcnZhdGlvbnMoKTtcbiAgICAgICAgZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aChkZXB0aCk7XG4gICAgfVxuICAgIGlmIChoYXNTa2lwcGVkT2JzZXJ2YXRpb25zKCkpIHtcbiAgICAgICAgZGVsaXZlclJlc2l6ZUxvb3BFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gZGVwdGggPiAwO1xufTtcbmV4cG9ydCB7IHByb2Nlc3MgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/process.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"queueMicroTask\": () => (/* binding */ queueMicroTask)\n/* harmony export */ });\nvar trigger;\nvar callbacks = [];\nvar notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };\nvar queueMicroTask = function (callback) {\n    if (!trigger) {\n        var toggle_1 = 0;\n        var el_1 = document.createTextNode('');\n        var config = { characterData: true };\n        new MutationObserver(function () { return notify(); }).observe(el_1, config);\n        trigger = function () { el_1.textContent = \"\" + (toggle_1 ? toggle_1-- : toggle_1++); };\n    }\n    callbacks.push(callback);\n    trigger();\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3F1ZXVlTWljcm9UYXNrLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsMkJBQTJCLG1EQUFtRCxjQUFjO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLDJDQUEyQyxrQkFBa0I7QUFDN0QsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQzBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvcXVldWVNaWNyb1Rhc2suanM/YTk5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdHJpZ2dlcjtcbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFja3Muc3BsaWNlKDApLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IHJldHVybiBjYigpOyB9KTsgfTtcbnZhciBxdWV1ZU1pY3JvVGFzayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGlmICghdHJpZ2dlcikge1xuICAgICAgICB2YXIgdG9nZ2xlXzEgPSAwO1xuICAgICAgICB2YXIgZWxfMSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgdmFyIGNvbmZpZyA9IHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9O1xuICAgICAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7IHJldHVybiBub3RpZnkoKTsgfSkub2JzZXJ2ZShlbF8xLCBjb25maWcpO1xuICAgICAgICB0cmlnZ2VyID0gZnVuY3Rpb24gKCkgeyBlbF8xLnRleHRDb250ZW50ID0gXCJcIiArICh0b2dnbGVfMSA/IHRvZ2dsZV8xLS0gOiB0b2dnbGVfMSsrKTsgfTtcbiAgICB9XG4gICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHRyaWdnZXIoKTtcbn07XG5leHBvcnQgeyBxdWV1ZU1pY3JvVGFzayB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"queueResizeObserver\": () => (/* binding */ queueResizeObserver)\n/* harmony export */ });\n/* harmony import */ var _queueMicroTask__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queueMicroTask */ \"./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js\");\n\nvar queueResizeObserver = function (cb) {\n    (0,_queueMicroTask__WEBPACK_IMPORTED_MODULE_0__.queueMicroTask)(function ResizeObserver() {\n        requestAnimationFrame(cb);\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3F1ZXVlUmVzaXplT2JzZXJ2ZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0Q7QUFDbEQ7QUFDQSxJQUFJLCtEQUFjO0FBQ2xCO0FBQ0EsS0FBSztBQUNMO0FBQytCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvcXVldWVSZXNpemVPYnNlcnZlci5qcz9hMzY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHF1ZXVlTWljcm9UYXNrIH0gZnJvbSAnLi9xdWV1ZU1pY3JvVGFzayc7XG52YXIgcXVldWVSZXNpemVPYnNlcnZlciA9IGZ1bmN0aW9uIChjYikge1xuICAgIHF1ZXVlTWljcm9UYXNrKGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpO1xuICAgIH0pO1xufTtcbmV4cG9ydCB7IHF1ZXVlUmVzaXplT2JzZXJ2ZXIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resizeObservers\": () => (/* binding */ resizeObservers)\n/* harmony export */ });\nvar resizeObservers = [];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3Jlc2l6ZU9ic2VydmVycy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9yZXNpemVPYnNlcnZlcnMuanM/YThlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVzaXplT2JzZXJ2ZXJzID0gW107XG5leHBvcnQgeyByZXNpemVPYnNlcnZlcnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/scheduler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/scheduler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"scheduler\": () => (/* binding */ scheduler),\n/* harmony export */   \"updateCount\": () => (/* binding */ updateCount)\n/* harmony export */ });\n/* harmony import */ var _process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process */ \"./node_modules/@juggle/resize-observer/lib/utils/process.js\");\n/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ \"./node_modules/@juggle/resize-observer/lib/utils/global.js\");\n/* harmony import */ var _queueResizeObserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queueResizeObserver */ \"./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js\");\n\n\n\nvar watching = 0;\nvar isWatching = function () { return !!watching; };\nvar CATCH_PERIOD = 250;\nvar observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\nvar events = [\n    'resize',\n    'load',\n    'transitionend',\n    'animationend',\n    'animationstart',\n    'animationiteration',\n    'keyup',\n    'keydown',\n    'mouseup',\n    'mousedown',\n    'mouseover',\n    'mouseout',\n    'blur',\n    'focus'\n];\nvar time = function (timeout) {\n    if (timeout === void 0) { timeout = 0; }\n    return Date.now() + timeout;\n};\nvar scheduled = false;\nvar Scheduler = (function () {\n    function Scheduler() {\n        var _this = this;\n        this.stopped = true;\n        this.listener = function () { return _this.schedule(); };\n    }\n    Scheduler.prototype.run = function (timeout) {\n        var _this = this;\n        if (timeout === void 0) { timeout = CATCH_PERIOD; }\n        if (scheduled) {\n            return;\n        }\n        scheduled = true;\n        var until = time(timeout);\n        (0,_queueResizeObserver__WEBPACK_IMPORTED_MODULE_2__.queueResizeObserver)(function () {\n            var elementsHaveResized = false;\n            try {\n                elementsHaveResized = (0,_process__WEBPACK_IMPORTED_MODULE_0__.process)();\n            }\n            finally {\n                scheduled = false;\n                timeout = until - time();\n                if (!isWatching()) {\n                    return;\n                }\n                if (elementsHaveResized) {\n                    _this.run(1000);\n                }\n                else if (timeout > 0) {\n                    _this.run(timeout);\n                }\n                else {\n                    _this.start();\n                }\n            }\n        });\n    };\n    Scheduler.prototype.schedule = function () {\n        this.stop();\n        this.run();\n    };\n    Scheduler.prototype.observe = function () {\n        var _this = this;\n        var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };\n        document.body ? cb() : _global__WEBPACK_IMPORTED_MODULE_1__.global.addEventListener('DOMContentLoaded', cb);\n    };\n    Scheduler.prototype.start = function () {\n        var _this = this;\n        if (this.stopped) {\n            this.stopped = false;\n            this.observer = new MutationObserver(this.listener);\n            this.observe();\n            events.forEach(function (name) { return _global__WEBPACK_IMPORTED_MODULE_1__.global.addEventListener(name, _this.listener, true); });\n        }\n    };\n    Scheduler.prototype.stop = function () {\n        var _this = this;\n        if (!this.stopped) {\n            this.observer && this.observer.disconnect();\n            events.forEach(function (name) { return _global__WEBPACK_IMPORTED_MODULE_1__.global.removeEventListener(name, _this.listener, true); });\n            this.stopped = true;\n        }\n    };\n    return Scheduler;\n}());\nvar scheduler = new Scheduler();\nvar updateCount = function (n) {\n    !watching && n > 0 && scheduler.start();\n    watching += n;\n    !watching && scheduler.stop();\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3NjaGVkdWxlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvQztBQUNGO0FBQzBCO0FBQzVEO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlFQUFtQjtBQUMzQjtBQUNBO0FBQ0Esc0NBQXNDLGlEQUFPO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsK0JBQStCLDREQUF1QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxPQUFPLDREQUF1QiwrQkFBK0I7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLE9BQU8sK0RBQTBCLCtCQUErQjtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9zY2hlZHVsZXIuanM/YjAwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9jZXNzIH0gZnJvbSAnLi9wcm9jZXNzJztcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gJy4vZ2xvYmFsJztcbmltcG9ydCB7IHF1ZXVlUmVzaXplT2JzZXJ2ZXIgfSBmcm9tICcuL3F1ZXVlUmVzaXplT2JzZXJ2ZXInO1xudmFyIHdhdGNoaW5nID0gMDtcbnZhciBpc1dhdGNoaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gISF3YXRjaGluZzsgfTtcbnZhciBDQVRDSF9QRVJJT0QgPSAyNTA7XG52YXIgb2JzZXJ2ZXJDb25maWcgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoYXJhY3RlckRhdGE6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9O1xudmFyIGV2ZW50cyA9IFtcbiAgICAncmVzaXplJyxcbiAgICAnbG9hZCcsXG4gICAgJ3RyYW5zaXRpb25lbmQnLFxuICAgICdhbmltYXRpb25lbmQnLFxuICAgICdhbmltYXRpb25zdGFydCcsXG4gICAgJ2FuaW1hdGlvbml0ZXJhdGlvbicsXG4gICAgJ2tleXVwJyxcbiAgICAna2V5ZG93bicsXG4gICAgJ21vdXNldXAnLFxuICAgICdtb3VzZWRvd24nLFxuICAgICdtb3VzZW92ZXInLFxuICAgICdtb3VzZW91dCcsXG4gICAgJ2JsdXInLFxuICAgICdmb2N1cydcbl07XG52YXIgdGltZSA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgaWYgKHRpbWVvdXQgPT09IHZvaWQgMCkgeyB0aW1lb3V0ID0gMDsgfVxuICAgIHJldHVybiBEYXRlLm5vdygpICsgdGltZW91dDtcbn07XG52YXIgc2NoZWR1bGVkID0gZmFsc2U7XG52YXIgU2NoZWR1bGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zY2hlZHVsZSgpOyB9O1xuICAgIH1cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aW1lb3V0ID09PSB2b2lkIDApIHsgdGltZW91dCA9IENBVENIX1BFUklPRDsgfVxuICAgICAgICBpZiAoc2NoZWR1bGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHVudGlsID0gdGltZSh0aW1lb3V0KTtcbiAgICAgICAgcXVldWVSZXNpemVPYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHNIYXZlUmVzaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0hhdmVSZXNpemVkID0gcHJvY2VzcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IHVudGlsIC0gdGltZSgpO1xuICAgICAgICAgICAgICAgIGlmICghaXNXYXRjaGluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzSGF2ZVJlc2l6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucnVuKDEwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW4odGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdGFydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgdGhpcy5ydW4oKTtcbiAgICB9O1xuICAgIFNjaGVkdWxlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNiID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMub2JzZXJ2ZXIgJiYgX3RoaXMub2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCBvYnNlcnZlckNvbmZpZyk7IH07XG4gICAgICAgIGRvY3VtZW50LmJvZHkgPyBjYigpIDogZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYik7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5zdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZSgpO1xuICAgICAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIF90aGlzLmxpc3RlbmVyLCB0cnVlKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLnN0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgJiYgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgX3RoaXMubGlzdGVuZXIsIHRydWUpOyB9KTtcbiAgICAgICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTY2hlZHVsZXI7XG59KCkpO1xudmFyIHNjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIoKTtcbnZhciB1cGRhdGVDb3VudCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgIXdhdGNoaW5nICYmIG4gPiAwICYmIHNjaGVkdWxlci5zdGFydCgpO1xuICAgIHdhdGNoaW5nICs9IG47XG4gICAgIXdhdGNoaW5nICYmIHNjaGVkdWxlci5zdG9wKCk7XG59O1xuZXhwb3J0IHsgc2NoZWR1bGVyLCB1cGRhdGVDb3VudCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/scheduler.js\n");

/***/ }),

/***/ "./src/cellshell.tsx":
/*!***************************!*\
  !*** ./src/cellshell.tsx ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // cellshell.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar requestidlecallback_1 = __webpack_require__(/*! requestidlecallback */ \"./node_modules/requestidlecallback/index.js\");\n\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ \"./node_modules/react-reverse-portal/dist/web/index.js\");\n\nvar placeholder_1 = __importDefault(__webpack_require__(/*! ./placeholder */ \"./src/placeholder.tsx\"));\n\nvar cradle_1 = __webpack_require__(/*! ./cradle */ \"./src/cradle.tsx\");\n\nvar IDLECALLBACK_TIMEOUT = 1000;\n\nvar CellShell = function CellShell(_a) {\n  var orientation = _a.orientation,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      index = _a.index,\n      observer = _a.observer,\n      // intersection observer\n  callbacks = _a.callbacks,\n      getItem = _a.getItem,\n      listsize = _a.listsize,\n      placeholder = _a.placeholder,\n      instanceID = _a.instanceID,\n      scrollerName = _a.scrollerName,\n      scrollerID = _a.scrollerID;\n  var cradleDataRef = (0, react_1.useContext)(cradle_1.CradleContext);\n  var portalManager = cradleDataRef.current.portalManager;\n\n  var _b = (0, react_1.useState)({\n    overflow: 'hidden'\n  }),\n      styles = _b[0],\n      saveStyles = _b[1];\n\n  var _c = (0, react_1.useState)('setup'),\n      cellStatus = _c[0],\n      setCellStatus = _c[1]; // console.log('RUNNING cellshell cellStatus, index, scrollerID, instanceID',cellStatus, index, scrollerID, instanceID)\n\n\n  var shellRef = (0, react_1.useRef)(null); // const instanceIDRef = useRef(instanceID)\n\n  var isMountedRef = (0, react_1.useRef)(true);\n  var portaldataRef = (0, react_1.useRef)(null); // console.log('RUNNING cellshell scrollerID, index, cellStatus', scrollerID, index, cellStatus)\n  // for unmount\n\n  (0, react_1.useEffect)(function () {\n    return function () {\n      isMountedRef.current = false; // console.log('UNsetting observer for index',index)\n\n      observer.unobserve(observerElementRef.current);\n    };\n  }, []); // ----------------- [ placeholder definition ] -------------------------\n\n  var customplaceholder = (0, react_1.useMemo)(function () {\n    return placeholder ? react_1[\"default\"].createElement(placeholder, {\n      index: index,\n      listsize: listsize\n    }) : null;\n  }, [placeholder, listsize]);\n  var placeholderRef = (0, react_1.useRef)(null);\n  placeholderRef.current = (0, react_1.useMemo)(function () {\n    var placeholder = customplaceholder ? customplaceholder : react_1[\"default\"].createElement(placeholder_1[\"default\"], {\n      index: index,\n      listsize: listsize,\n      error: false\n    });\n    return placeholder;\n  }, [index, customplaceholder, listsize]); // ---------------- [ end of placeholder definition ] ------------------------\n\n  var requestidlecallback = window['requestIdleCallback'] ? window['requestIdleCallback'] : requestidlecallback_1.requestIdleCallback;\n  var cancelidlecallback = window['cancelIdleCallback'] ? window['cancelIdleCallback'] : requestidlecallback_1.cancelIdleCallback;\n  var requestIdleCallbackIdRef = (0, react_1.useRef)(null); // initialize cell content\n\n  (0, react_1.useEffect)(function () {\n    // console.log('CELLSHELL mounting index',index)\n    portaldataRef.current = portalManager.fetchOrCreatePortal(index, placeholderRef.current);\n    var hasUserContent = !!portaldataRef.current.hasusercontent; // previous InPortal creation for index\n\n    var reverseportal = portaldataRef.current.reverseportal;\n    contentcomponentRef.current = react_1[\"default\"].createElement(react_reverse_portal_1.OutPortal, {\n      node: reverseportal\n    });\n\n    if (!hasUserContent) {\n      setCellStatus('getusercontent');\n    } else {\n      portaldataRef.current.isReparenting = true;\n      if (isMountedRef.current) setCellStatus('ready');\n    } // unmount\n\n\n    return function () {\n      // console.log('CELLSHELL UNmounting index',index)\n      cancelidlecallback(requestIdleCallbackIdRef.current);\n    };\n  }, []); // cradle invariant ondemand callback parameter value\n\n  var getElementData = (0, react_1.useCallback)(function () {\n    return [index, shellRef];\n  }, []); // initialize callbacks\n\n  (0, react_1.useEffect)(function () {\n    var localcalls = callbacks;\n    localcalls.setElementData && localcalls.setElementData(getElementData(), 'register');\n    return function () {\n      localcalls.setElementData && localcalls.setElementData(getElementData(), 'unregister');\n    };\n  }, [callbacks]); // ---------------------[ configure observer ]--------------------------\n\n  var observerElementRef = (0, react_1.useRef)(null); // persistent observer element ref for unmount\n  // const observersetRef = useRef(false)\n\n  (0, react_1.useEffect)(function () {\n    // console.log('index, cellStatus', index, shellRef.current)\n    // if ((!shellRef.current) || observersetRef.current) {\n    //     return\n    // }\n    // console.log('setting observer for index',index)\n    observer.observe(shellRef.current);\n    observerElementRef.current = shellRef.current; // observersetRef.current = true\n  }, []); //[observer, shellRef.current, cellStatus])\n  // ---------------------[ end of configure observer ]-------------------------\n  // set styles\n\n  (0, react_1.useEffect)(function () {\n    var newStyles = getShellStyles(orientation, cellHeight, cellWidth, styles);\n\n    if (isMountedRef.current) {\n      saveStyles(newStyles);\n    }\n  }, [orientation, cellHeight, cellWidth]);\n  var contentcomponentRef = (0, react_1.useRef)(null);\n  (0, react_1.useEffect)(function () {\n    switch (cellStatus) {\n      case 'setup':\n        // no-op\n        break;\n\n      case 'getusercontent':\n        {\n          requestIdleCallbackIdRef.current = requestidlecallback(function () {\n            return __awaiter(void 0, void 0, void 0, function () {\n              var usercontent, reverseportal;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , getItem(index)];\n\n                  case 1:\n                    usercontent = _a.sent();\n\n                    if (isMountedRef.current) {\n                      if (usercontent) {\n                        portaldataRef.current.hasusercontent = true;\n                        portaldataRef.current = portalManager.updatePortal(index, usercontent);\n                        reverseportal = portaldataRef.current.reverseportal;\n                        portaldataRef.current.isReparenting = true;\n                        contentcomponentRef.current = react_1[\"default\"].createElement(react_reverse_portal_1.OutPortal, {\n                          node: reverseportal\n                        });\n                      } else {\n                        console.log('ERROR', 'no content item');\n                      }\n\n                      setCellStatus('ready');\n                    }\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }, {\n            timeout: IDLECALLBACK_TIMEOUT\n          });\n          break;\n        }\n\n      case 'ready':\n        {\n          break;\n        }\n    }\n  }, [cellStatus]);\n  return react_1[\"default\"].createElement(\"div\", {\n    ref: shellRef,\n    \"data-type\": 'cellshell',\n    \"data-scrollerid\": scrollerID,\n    \"data-index\": index,\n    \"data-instanceid\": instanceID,\n    style: styles\n  }, cellStatus != 'setup' && contentcomponentRef.current);\n}; // CellShell\n\n\nvar getShellStyles = function getShellStyles(orientation, cellHeight, cellWidth, styles) {\n  var styleset = Object.assign({\n    position: 'relative'\n  }, styles);\n\n  if (orientation == 'horizontal') {\n    styleset.width = cellWidth ? cellWidth + 'px' : 'auto';\n    styleset.height = 'auto';\n  } else if (orientation === 'vertical') {\n    styleset.width = 'auto';\n    styleset.height = cellHeight ? cellHeight + 'px' : 'auto';\n  }\n\n  return styleset;\n};\n\nexports[\"default\"] = CellShell;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cellshell.tsx\n");

/***/ }),

/***/ "./src/cradle.tsx":
/*!************************!*\
  !*** ./src/cradle.tsx ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // cradle.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CradleContext = void 0;\n/*\n    TODO:\n\n    - try position fixed during reparenting to preserve scroll position\n\n    - consider eliminating cellintersectobserver in favour of head and tail intersect oberver\n\n    - scroll reset problem recurs with repeated above and below rapid resets\n        the problem comes with update content from endofscroll, after double normalize signals\n        the extra reparenting is inserted during the timeout for normalize signals\n    - try cleartimeout\n\n\n    - fix scroll reset on reparent\n    - review need for setscrollposition\n    - BUG: in FF nested scroller switch from placeholder to content resets scroll position\n    - unmounted warning to do with InPortal\n\n    ObserversManager\n    WingsAgent\n    MessageAgent ? // message with host environment, such as referenceIndexCallback\n\n    ScrollManager\n    SignalsManager\n    StateManager\n    ContentManager\n    CradleManager\n    ServiceManager // user services\n    StylesManager\n\n    BUGS:\n    - check styles in scrollTracker args\n    - doreposition gets stuck at a particular number after getting behind on heavy scroll\n        check pauseScrollingEffects\n    - variable cells showing signs of getItem() with portal\n    - Chrome sometimes misses nested cell portals horizontally\n    - reduce computing intensity to avoid battery drainage\n*/\n\n/*\n    Description\n    -----------\n    The GridStroller provides the illusion of infinite scrolling through the use of a data 'cradle' inside a viewport.\n    The illusion is maintained by synchronizing changes in cradle content with cradle location inside a scrollblock, such\n    that as the scrollblock is moved, the cradle moves oppositely in the scrollblock (to stay visible within the viewport).\n    The scrollblock is sized to approximate the list being viewed, so as to have a scroll thumb size and position which\n    realistically reflects the size of the list being shown.\n\n    The position of the cradle is controlled by a 'spine' which is a 0px height/width (along the medial - ScrollBlock can be\n    verticsl or horizontal). The purpose of the spine is to act as a 'fold', above which cell content expands 'upwards', and\n    below which the cell content expands  'downwards'. GridScroller can be viewed vertically or horizontally. When horizontal,\n    the spine has a 0px width, so that the 'fold' is vertical, and cells expand to the left and right.\n\n    The spine is controlled to always be in the at the leading edge of the leading cellrow of the viewport. Thus\n    in vertical orientation, the spine 'top' css attribute is always equal to the 'scrollTop' position of the scrollblock,\n    plus an adjustment. The adjustment is the result of the alignment of the spine in relation to the top-(or left-)most cell\n    in the viewport (the 'reference' row). The spine can only be placed at the leading edge of the first visible\n    cell in the viewport. Therefore the spine offset from the leading edge of the viewport can be anywhere from minus to\n    plus the length of the leading row. The exact amount depends on where the 'breakpoint' of transition notification is set for\n    cells crossing the viewport threshold (and can be configured). The default of the breakpoint is .5 (half the length of the cell).\n\n    Technically, there are several reference points tracked by the GridScroller. These are:\n        - spineReferenceIndex (the virtual index of the item controlling the location of the spine)\n            The spineReferenceIndex is also used to allocate items above (lower index value) and below (same or higher index value)\n            the fold\n        - cradleReferenceIndex (the virtual index of the item defining the leading bound of the cradle content)\n        - spinePosOffset (pixels - plus or minus - that the spine is placed in relation to the viewport's leading edge)\n    \n    These reference points are applied to the following structures:\n        - the viewport\n        - the scrollblock\n        - the cradle, consisting of\n            - the spine (contains cradle head and tail)\n            - the head (contains leading items)\n            - the tail (contains trailing items)\n\n    Structure details:\n        the cradle content consists of\n        - the number of rows that are visible in the viewport (according to the default parameters)\n            - this typically includes one partially visible row\n        - the number of runway rows specified in the parameters, times 2 (one et for the head; one for the tail)\n        - the number of items is the number of rows times the 'crosscount' the lateral number of cells.\n        - the last row might consist of fewer items than crosscount, to match the maximum listsize\n        - the cradleRowcount (visible default rows + runwaycount * 2) and viewpointRowcount (visble rows;typicall one partial)\n\n    Item containers:\n        Client cell content is contained in CellShell's, which are configured according to GridScroller's input parameters.\n        The ItemCell's are in turn contained in CSS grid structures. There are two grid structures - one in the cradle head,\n        and one in the cradle tail. Each grid structure is allowed uniform padding and gaps - identical between the two.\n\n    Overscroll handling:\n        Owing to the weight of the code, and potential rapidity of scrolling, there is an overscroll protocol.\n        if the overscroll is such that part of the cradle is still within the viewport boundaries, then the overscroll\n        is calculated as the number of cell rows that would fit (completely or partially) in the space between the edge of\n        the cradle that is receding from a viewport edge.\n\n        If the overshoot is such that the cradle has entirely passed out of the viewport, the GridScroller goes into 'Repositoining'\n        mode, meaning that it tracks relative location of the spine edge of the viewport, and repaints the cradle accroding to\n        this position when the scrolling stops.\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\");\n\nvar portalmanager_1 = __webpack_require__(/*! ./portalmanager */ \"./src/portalmanager.tsx\");\n\nvar ITEM_OBSERVER_THRESHOLD = [0, 1]; // import agency classes - loci of data and related methods\n\nvar scrollmanager_1 = __importDefault(__webpack_require__(/*! ./cradle/scrollmanager */ \"./src/cradle/scrollmanager.tsx\"));\n\nvar statemanager_1 = __importDefault(__webpack_require__(/*! ./cradle/statemanager */ \"./src/cradle/statemanager.tsx\"));\n\nvar contentmanager_1 = __importDefault(__webpack_require__(/*! ./cradle/contentmanager */ \"./src/cradle/contentmanager.tsx\"));\n\nvar cradlemanager_1 = __importDefault(__webpack_require__(/*! ./cradle/cradlemanager */ \"./src/cradle/cradlemanager.tsx\"));\n\nvar interruptmanager_1 = __importDefault(__webpack_require__(/*! ./cradle/interruptmanager */ \"./src/cradle/interruptmanager.tsx\"));\n\nvar servicemanager_1 = __importDefault(__webpack_require__(/*! ./cradle/servicemanager */ \"./src/cradle/servicemanager.tsx\"));\n\nvar stylesmanager_1 = __importDefault(__webpack_require__(/*! ./cradle/stylesmanager */ \"./src/cradle/stylesmanager.tsx\")); // popup position trackeer\n\n\nvar scrolltracker_1 = __importDefault(__webpack_require__(/*! ./scrolltracker */ \"./src/scrolltracker.tsx\"));\n\nexports.CradleContext = react_1[\"default\"].createContext(null); // for children\n\nvar portalrootstyle = {\n  display: 'none'\n}; // static parm\n\nvar NORMALIZE_SIGNALS_TIMEOUT = 250;\n\nvar Cradle = function Cradle(_a) {\n  // =============================================================================================\n  // --------------------------------------[ INITIALIZATION ]-------------------------------------\n  // =============================================================================================\n  var _b;\n\n  var gap = _a.gap,\n      padding = _a.padding,\n      runwaycount = _a.runwaycount,\n      listsize = _a.listsize,\n      defaultVisibleIndex = _a.defaultVisibleIndex,\n      orientation = _a.orientation,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      getItem = _a.getItem,\n      placeholder = _a.placeholder,\n      functions = _a.functions,\n      styles = _a.styles,\n      scrollerName = _a.scrollerName,\n      scrollerID = _a.scrollerID; // ---------------------[ bundle cradle props to pass around ]-------------------\n\n  var cradlePropsRef = (0, react_1.useRef)(null); // access by closures\n\n  cradlePropsRef.current = {\n    gap: gap,\n    padding: padding,\n    runwaycount: runwaycount,\n    listsize: listsize,\n    defaultVisibleIndex: defaultVisibleIndex,\n    orientation: orientation,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    getItem: getItem,\n    placeholder: placeholder,\n    scrollerName: scrollerName,\n    scrollerID: scrollerID\n  }; // ----------------[ context ]----------------\n\n  var _c = (0, react_1.useState)('setup'),\n      cradleState = _c[0],\n      setCradleState = _c[1];\n\n  var viewportProperties = (0, react_1.useContext)(viewport_1.ViewportInterrupt);\n  var viewportDataRef = (0, react_1.useRef)(null);\n  viewportDataRef.current = viewportProperties; // if (viewportData.index === null) {\n  //     console.log('RUNNING index cradleState', viewportData.index, cradleState)\n  // }\n  // ----------------[ cradle butterfly html components ]---------------\n\n  var isMountedRef = (0, react_1.useRef)(true);\n  var isReparentingRef = (0, react_1.useRef)(false);\n  var normalizeTimerRef = (0, react_1.useRef)(null);\n  var headCradleElementRef = (0, react_1.useRef)(null);\n  var tailCradleElementRef = (0, react_1.useRef)(null);\n  var spineCradleElementRef = (0, react_1.useRef)(null);\n  var cradleStateRef = (0, react_1.useRef)(null); // access by closures\n\n  cradleStateRef.current = cradleState;\n  var cradleElementsRef = (0, react_1.useRef)({\n    head: headCradleElementRef,\n    tail: tailCradleElementRef,\n    spine: spineCradleElementRef\n  }); // if ((cradleState == 'normalizesignals') && viewportData.portal?.isReparenting) {\n\n  var viewportDimensions = viewportProperties.viewportDimensions;\n  var viewportheight = viewportDimensions.height,\n      viewportwidth = viewportDimensions.width; // -------------------[ configuration calculations ]---------------------\n\n  var crosscount = (0, react_1.useMemo)(function () {\n    var crosscount;\n    var size = orientation == 'horizontal' ? viewportheight : viewportwidth;\n    var crossLength = orientation == 'horizontal' ? cellHeight : cellWidth;\n    var lengthforcalc = size - padding * 2 + gap; // length of viewport\n\n    var tilelengthforcalc = crossLength + gap;\n    tilelengthforcalc = Math.min(tilelengthforcalc, lengthforcalc); // result cannot be less than 1\n\n    crosscount = Math.floor(lengthforcalc / tilelengthforcalc);\n    return crosscount;\n  }, [orientation, cellWidth, cellHeight, gap, padding, viewportheight, viewportwidth]);\n\n  var _d = (0, react_1.useMemo)(function () {\n    var viewportLength, cellLength;\n\n    if (orientation == 'vertical') {\n      viewportLength = viewportheight;\n      cellLength = cellHeight;\n    } else {\n      viewportLength = viewportwidth;\n      cellLength = cellWidth;\n    }\n\n    cellLength += gap;\n    var viewportrowcount = Math.ceil(viewportLength / cellLength);\n    var cradleRowcount = viewportrowcount + runwaycount * 2;\n    var itemcount = cradleRowcount * crosscount;\n\n    if (itemcount > listsize) {\n      itemcount = listsize;\n      cradleRowcount = Math.ceil(itemcount / crosscount);\n    }\n\n    return [cradleRowcount, viewportrowcount];\n  }, [orientation, cellWidth, cellHeight, gap, listsize, // padding,\n  viewportheight, viewportwidth, runwaycount, crosscount]),\n      cradleRowcount = _d[0],\n      viewportRowcount = _d[1];\n\n  var cradleConfigRef = (0, react_1.useRef)(null);\n  cradleConfigRef.current = {\n    crosscount: crosscount,\n    cradleRowcount: cradleRowcount,\n    viewportRowcount: viewportRowcount,\n    cellObserverThreshold: ITEM_OBSERVER_THRESHOLD,\n    listRowcount: Math.ceil(listsize / crosscount)\n  };\n  var cradleDataRef = (0, react_1.useRef)({\n    portalManager: null,\n    scrollerID: scrollerID,\n    viewportDataRef: viewportDataRef\n  }); // -------------------[ support services ]------------------\n\n  var managersRef = (0, react_1.useRef)(null); // make available to individual managers\n\n  var commonProps = {\n    managersRef: managersRef,\n    viewportdataRef: viewportDataRef,\n    cradlePropsRef: cradlePropsRef,\n    cradleConfigRef: cradleConfigRef,\n    cradleDataRef: cradleDataRef\n  };\n  var referenceIndexCallbackRef = (0, react_1.useRef)(functions === null || functions === void 0 ? void 0 : functions.referenceIndexCallback);\n  var serviceCallsRef = (0, react_1.useRef)({\n    referenceIndexCallbackRef: referenceIndexCallbackRef\n  });\n  var setItemElementData = (0, react_1.useCallback)(function (itemElementData, reportType) {\n    var index = itemElementData[0],\n        shellref = itemElementData[1];\n\n    if (reportType == 'register') {\n      contentManager.itemElements.set(index, shellref);\n    } else if (reportType == 'unregister') {\n      contentManager.itemElements[\"delete\"](index);\n    }\n  }, []);\n  var contentCallbacksRef = (0, react_1.useRef)({\n    setElementData: setItemElementData\n  }); // ---------------------[ setup ]------------------\n\n  (0, react_1.useLayoutEffect)(function () {\n    cradleDataRef.current.portalManager = new portalmanager_1.PortalManager(); // cleanup portal repository; clear isMountedRef\n\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  var _e = (0, react_1.useMemo)(function () {\n    return [new scrollmanager_1[\"default\"](commonProps), new statemanager_1[\"default\"](commonProps, cradleStateRef, setCradleState, isMountedRef), new contentmanager_1[\"default\"](commonProps, contentCallbacksRef), new cradlemanager_1[\"default\"](commonProps, cradleElementsRef.current), new interruptmanager_1[\"default\"](commonProps), new servicemanager_1[\"default\"](commonProps, serviceCallsRef), new stylesmanager_1[\"default\"](commonProps)];\n  }, []),\n      scrollManager = _e[0],\n      stateManager = _e[1],\n      contentManager = _e[2],\n      cradleManager = _e[3],\n      interruptManager = _e[4],\n      serviceManager = _e[5],\n      stylesManager = _e[6]; // this is an immediate response to reparenting. Reparenting resets scroll positions\n  // this restores scroll as soon as cradle is invoked after reparenting\n\n\n  if ((_b = viewportProperties.portal) === null || _b === void 0 ? void 0 : _b.isReparenting) {\n    // if (viewportData.index == 6) {\n    //         console.log('restoring scrollpos from, to', \n    //             viewportData.index,\n    //             viewportData.elementref.current[cradleManager.cradleReferenceData.blockScrollProperty],\n    //             Math.max(0,cradleManager.cradleReferenceData.blockScrollPos))\n    // }\n    viewportProperties.portal.isReparenting = false;\n    viewportProperties.elementref.current[cradleManager.cradleReferenceData.blockScrollProperty] = Math.max(0, cradleManager.cradleReferenceData.blockScrollPos);\n  } // if (viewportDataRef.current.index == 6) {\n  //     console.log('RUNNING CRADLE index, cradleState',viewportDataRef.current.index, cradleState)\n  // }\n  // functions and styles handled separately\n  // if (viewportData.index == 0) console.log('cradle index, cradleState, props',\n  //     viewportData.index,cradleState, cradlePropsRef.current)\n  // -----------------------------------------------------------------------\n  // -------------------------[ configuration ]-----------------------------\n  // -----------------------------------------------------------------------\n  // -------------------------[ cradle management nodes ]-----------------\n  // to instantiate managersRef\n\n\n  var managementsetRef = (0, react_1.useRef)({\n    scroll: scrollManager,\n    // signals:signalsManager, \n    state: stateManager,\n    content: contentManager,\n    cradle: cradleManager,\n    service: serviceManager,\n    interrupts: interruptManager,\n    styles: stylesManager\n  });\n  managersRef.current = managementsetRef.current; // if ((viewportDataRef.current.index == 6) /*|| (viewportDataRef.current.index === null)*/) {\n  //     console.log('RUNNING CRADLE index',\n  //         viewportDataRef.current.index, '\\n',\n  //         '==>','cradleState:',cradleState,'\\n',\n  //         'isRepositioning signal:',interruptManager.states.isRepositioning,'\\n',\n  //         // 'isReparenting signal, state:',viewportDataRef.current.portal?.isReparenting,\n  //         // isReparentingRef.current,'\\n',\n  //         'isResizing signal:',viewportData.isResizing,'\\n',\n  //         'repositioningRequired:',interruptManager.signals.repositioningRequired)\n  // }\n  // ------------------------------------------------------------------------\n  // -----------------------[ initialization effects ]-----------------------\n  //initialize host functions properties\n\n  (0, react_1.useEffect)(function () {\n    if (functions === null || functions === void 0 ? void 0 : functions.hasOwnProperty('scrollToItem')) {\n      functions.scrollToItem = serviceManager.scrollToItem;\n    }\n\n    if (functions === null || functions === void 0 ? void 0 : functions.hasOwnProperty('getVisibleList')) {\n      functions.getVisibleList = serviceManager.getVisibleList;\n    }\n\n    if (functions === null || functions === void 0 ? void 0 : functions.hasOwnProperty('getContentList')) {\n      functions.getContentList = serviceManager.getContentList;\n    }\n\n    if (functions === null || functions === void 0 ? void 0 : functions.hasOwnProperty('reload')) {\n      functions.reload = serviceManager.reload;\n    }\n\n    referenceIndexCallbackRef.current = functions === null || functions === void 0 ? void 0 : functions.referenceIndexCallback;\n  }, [functions]); // initialize window scroll listener\n\n  (0, react_1.useEffect)(function () {\n    var viewportdata = viewportDataRef.current;\n    viewportdata.elementref.current.addEventListener('scroll', scrollManager.onScroll);\n    return function () {\n      viewportdata.elementref.current && viewportdata.elementref.current.removeEventListener('scroll', scrollManager.onScroll);\n    };\n  }, []); // -----------------------------------------------------------------------\n  // -----------------------[ reconfiguration effects ]---------------------\n  // trigger resizing based on viewport state\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n\n    if (viewportProperties.isResizing) {\n      var signals = interruptManager.signals;\n      signals.pauseCellObserver = true;\n      signals.pauseCradleIntersectionObserver = true;\n      signals.pauseCradleResizeObserver = true;\n      signals.pauseScrollingEffects = true; // const states = interruptManager.states\n      // states.isResizing = true\n\n      setCradleState('resizing');\n    } // complete resizing mode\n\n\n    if (!viewportProperties.isResizing && cradleStateRef.current == 'resizing') {\n      setCradleState('resized');\n    }\n  }, [viewportProperties.isResizing]); // reload for changed parameters\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    var signals = interruptManager.signals;\n    signals.pauseCellObserver = true;\n    signals.pauseScrollingEffects = true;\n    setCradleState('reload');\n  }, [listsize, cellHeight, cellWidth, gap, padding]); // trigger pivot on change in orientation\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return; // get previous ratio\n\n    var previousCellPixelLength = orientation == 'vertical' ? cradlePropsRef.current.cellWidth : cradlePropsRef.current.cellHeight; // let previousSpineOffset = cradleManager.cradleReferenceData.theNextSpinePixelOffset\n\n    var previousSpineOffset = cradleManager.cradleReferenceData.nextCradlePosOffset;\n    var previousratio = previousSpineOffset / previousCellPixelLength;\n    var currentCellPixelLength = orientation == 'vertical' ? cradlePropsRef.current.cellHeight : cradlePropsRef.current.cellWidth;\n    var currentSpineOffset = previousratio * currentCellPixelLength;\n    cradleManager.cradleReferenceData.nextCradlePosOffset = Math.round(currentSpineOffset);\n    var signals = interruptManager.signals;\n    signals.pauseCellObserver = true; // pauseCradleIntersectionObserverRef.current = true\n\n    signals.pauseScrollingEffects = true;\n    setCradleState('pivot'); // let cradleContent = contentAgentRef.current.content\n\n    cradleContent.headModel = [];\n    cradleContent.tailModel = [];\n    cradleContent.headView = [];\n    cradleContent.tailView = [];\n  }, [orientation]); // =======================================================================\n  // -------------------------[ OPERATION ]---------------------------------\n  // =======================================================================\n  // -----------------------------------------------------------------------\n  // ------------------------[ style data ]-------------------------------\n  // styles for wings and spine\n\n  var _f = (0, react_1.useMemo)(function () {\n    return stylesManager.setCradleStyles({\n      orientation: orientation,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding,\n      viewportheight: viewportheight,\n      viewportwidth: viewportwidth,\n      crosscount: crosscount,\n      userstyles: styles\n    });\n  }, [orientation, cellHeight, cellWidth, gap, padding, viewportheight, viewportwidth, crosscount, styles]),\n      cradleHeadStyle = _f[0],\n      cradleTailStyle = _f[1],\n      cradleSpineStyle = _f[2]; // =================================================================================\n  // -------------------------[ Observer support]-------------------------\n  // =================================================================================\n\n  /*\n      There are two interection observers, one for the cradle, and another for itemShells;\n          both against the viewport.\n      There is also a resize observer for the cradle wings, to respond to size changes of\n          variable cells.\n  */\n  // --------------------------[ resize observer ]-----------------------------------\n  // set up cradle resizeobserver\n\n\n  (0, react_1.useEffect)(function () {\n    var observer = interruptManager.cradleResize.create();\n    var cradleElements = cradleManager.elements;\n    observer.observe(cradleElements.headRef.current);\n    observer.observe(cradleElements.tailRef.current);\n    return function () {\n      observer.disconnect();\n    };\n  }, []); // --------------------[ intersection observer for cradle body ]-----------------------\n  // this sets up an IntersectionObserver of the cradle against the viewport. When the\n  // cradle goes out of the observer scope, the \"repositioningA\" cradle state is triggerd.\n\n  (0, react_1.useEffect)(function () {\n    var observer = interruptManager.cradleIntersect.create();\n    var cradleElements = cradleManager.elements;\n    observer.observe(cradleElements.headRef.current);\n    observer.observe(cradleElements.tailRef.current);\n    return function () {\n      observer.disconnect();\n    };\n  }, []); // unset and reset observers for reposition\n\n  (0, react_1.useEffect)(function () {\n    if (cradleState != 'startreposition' && cradleState != 'finishreposition') return;\n    var observer = interruptManager.cradleIntersect.observer;\n\n    if (cradleState == 'startreposition') {\n      observer.disconnect();\n    }\n\n    if (cradleState == 'finishreposition') {\n      var cradleElements = cradleManager.elements;\n      observer.observe(cradleElements.headRef.current);\n      observer.observe(cradleElements.tailRef.current);\n    }\n  }, [cradleState]); // --------------------------[ item shell observer ]-----------------------------\n\n  /*\n      The cradle content is driven by notifications from the IntersectionObserver.\n      - as the user scrolls the cradle, which has a runwaycount at both the leading\n          and trailing edges, CellShells scroll into or out of the scope of the observer\n          (defined by the width/height of the viewport + the lengths of the runways). The observer\n          notifies the app (through cellobservercallback() below) at the crossings of the itemshells\n          of the defined observer cradle boundaries.\n           The no-longer-intersecting notifications trigger dropping of that number of affected items from\n          the cradle contentlist. The dropping of items from the trailing end of the content list\n          triggers the addition of an equal number of items at the leading edge of the cradle content.\n           Technically, the opposite end position spec is set (top or left depending on orientation),\n          and the matching end position spec is set to 'auto' when items are added. This causes items to be\n          \"squeezed\" into the leading or trailing ends of the ui content (out of view) as appropriate.\n           There are exceptions for setup and edge cases.\n  */\n  // responds to change of orientation\n\n  (0, react_1.useEffect)(function () {\n    var observer = interruptManager.cellIntersect.observer;\n    if (observer) observer.disconnect();\n    observer = interruptManager.cellIntersect.create();\n    return function () {\n      observer.disconnect();\n    };\n  }, [orientation]); // =====================================================================================\n  // ----------------------------------[ state management ]-------------------------------\n  // =====================================================================================\n  // data for state processing\n\n  var callingCradleState = (0, react_1.useRef)(cradleStateRef.current);\n  var headlayoutDataRef = (0, react_1.useRef)(null); // this is the core state engine\n  // useLayout for suppressing flashes\n\n  (0, react_1.useLayoutEffect)(function () {\n    var viewportData = viewportDataRef.current;\n    var cradleContent = contentManager.content;\n\n    switch (cradleState) {\n      // renderupdatedcontent is called from cellintersectionobservercallback (interruptManager), \n      // and called from onAfterScroll (scrollManager)\n      // it is required set configurations before 'ready' TODO: specify!\n      case 'renderupdatedcontent':\n        {\n          setCradleState('ready');\n          break;\n        }\n      // ----------------------------------------------------------------------\n      // ------------[ reposition when repositioningRequired is true ]---------------\n\n      case 'startreposition':\n        {\n          // interruptManager.states.isRepositioning = true\n          interruptManager.signals.pauseCradleIntersectionObserver = true;\n          setCradleState('repositioningA');\n          break;\n        }\n\n      case 'finishreposition':\n        {\n          interruptManager.signals.pauseCradleIntersectionObserver = false;\n          scrollManager.updateReferenceData();\n          setCradleState('doreposition'); // setCradleState('updatepositionreferences')\n\n          break;\n        }\n      // case 'updatepositionreferences':{\n      //     scrollManager.updateReferenceData()\n      //     setCradleState('doreposition')\n      //     break\n      // }\n      // -----------------------------------------------------------------------\n      // ------------[ the following 5 cradle states all resolve with ]---------\n      // ------------[ a chain starting with 'preparecontent', which  ]---------\n      // ------------[ calls setCradleContent                         ]---------\n\n      case 'doreposition':\n      case 'setup':\n      case 'resized':\n      case 'pivot':\n      case 'reload':\n        callingCradleState.current = cradleState; // message for setCradleContent\n\n        setCradleState('preparecontent'); // cycle to allow some config\n\n        break;\n\n      case 'preparecontent':\n        {\n          cradleContent.headModel = [];\n          cradleContent.tailModel = [];\n          cradleContent.headView = [];\n          cradleContent.tailView = [];\n          cradleDataRef.current.portalManager.resetScrollerPortalRepository();\n          contentManager.setCradleContent(callingCradleState.current);\n          setCradleState('preparerender');\n          break;\n        }\n\n      case 'preparerender':\n        {\n          var cradleContent_1 = contentManager.content;\n          cradleContent_1.headView = cradleContent_1.headModel;\n          cradleContent_1.tailView = cradleContent_1.tailModel;\n          viewportData.elementref.current[cradleManager.cradleReferenceData.blockScrollProperty] = Math.max(0, cradleManager.cradleReferenceData.blockScrollPos);\n          setCradleState('normalizesignals'); // call a timeout for ready (or interrupt continuation)\n\n          break;\n        }\n\n      case 'normalizesignals':\n        {\n          normalizeTimerRef.current = setTimeout(function () {\n            if (!isMountedRef.current) return; // allow short-circuit fallbacks to continue interrupt responses\n\n            /*1*/\n\n            if (!viewportData.isResizing) {\n              // resize short-circuit\n\n              /*2*/\n              if (!interruptManager.signals.repositioningRequired) {\n                // repositioning short-circuit\n                // /*3*/           if ((!viewportDataRef.current.portal) || (!viewportDataRef.current.portal.isReparenting))\n                //                     /*&& (!isReparentingRef.current))*/ { // reparent (restorescrollpos) short-circuit\n                var signals = interruptManager.signals;\n\n                if (viewportData.elementref.current) {\n                  // already unmounted if fails (?)\n                  signals.pauseCellObserver && (signals.pauseCellObserver = false);\n                  signals.pauseScrollingEffects && (signals.pauseScrollingEffects = false);\n                  signals.pauseCradleIntersectionObserver && (signals.pauseCradleIntersectionObserver = false);\n                  signals.pauseCradleResizeObserver && (signals.pauseCradleResizeObserver = false);\n                } else {\n                  console.log('ERROR: viewport element not set in normalizesignals', scrollerID, viewportData);\n                }\n                /*default outcome*/\n\n\n                if (isMountedRef.current) setCradleState('ready'); //                 } else {\n                // /*3*/               if (isMountedRef.current) setCradleState('restorescrollposition')\n                //                 }\n              } else {\n                /*2*/\n                if (isMountedRef.current) setCradleState('startreposition');\n              }\n            } else {\n              /*1*/\n              if (isMountedRef.current) setCradleState('resizing');\n            }\n          }, NORMALIZE_SIGNALS_TIMEOUT);\n          break;\n        }\n    }\n  }, [cradleState]); // standard processing stages\n\n  (0, react_1.useEffect)(function () {\n    var viewportData = viewportDataRef.current;\n\n    switch (cradleState) {\n      case 'repositioningA':\n        break;\n\n      case 'repositioningB':\n        setCradleState('repositioningA');\n        break;\n\n      case 'ready':\n        break;\n    }\n  }, [cradleState]); // =============================================================================\n  // ------------------------------[ RENDER... ]----------------------------------\n  // =============================================================================\n\n  var scrollTrackerArgs = (0, react_1.useMemo)(function () {\n    if (!(cradleStateRef.current == 'repositioningB' || cradleStateRef.current == 'repositioningA')) {\n      return;\n    }\n\n    var trackerargs = {\n      top: viewportDimensions.top + 3,\n      left: viewportDimensions.left + 3,\n      referenceIndexOffset: cradleManager.cradleReferenceData.scrollImpliedItemIndexReference,\n      listsize: cradlePropsRef.current.listsize,\n      styles: cradlePropsRef.current.styles\n    };\n    return trackerargs;\n  }, [cradleStateRef.current, viewportDimensions, cradleManager.cradleReferenceData.scrollImpliedItemIndexReference, cradlePropsRef]);\n  var cradleContent = contentManager.content; // portalroot is the hidden portal component cache\n\n  return react_1[\"default\"].createElement(exports.CradleContext.Provider, {\n    value: cradleDataRef\n  }, cradleStateRef.current != 'setup' && react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'portalroot',\n    style: portalrootstyle\n  }, react_1[\"default\"].createElement(portalmanager_1.PortalList, {\n    scrollerData: cradleDataRef.current.portalManager.scrollerData\n  })), cradleStateRef.current == 'repositioningA' || cradleStateRef.current == 'repositioningB' ? react_1[\"default\"].createElement(scrolltracker_1[\"default\"], {\n    top: scrollTrackerArgs.top,\n    left: scrollTrackerArgs.left,\n    offset: scrollTrackerArgs.referenceIndexOffset,\n    listsize: scrollTrackerArgs.listsize,\n    styles: scrollTrackerArgs.styles\n  }) : react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-spine',\n    style: cradleSpineStyle,\n    ref: spineCradleElementRef\n  },  true ? react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-divider',\n    style: {\n      zIndex: 1,\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      boxShadow: '0 0 5px 3px red'\n    }\n  }) : 0, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'head',\n    ref: headCradleElementRef,\n    style: cradleHeadStyle\n  }, cradleStateRef.current != 'setup' ? cradleContent.headView : null), react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'tail',\n    ref: tailCradleElementRef,\n    style: cradleTailStyle\n  }, cradleStateRef.current != 'setup' ? cradleContent.tailView : null)));\n}; // Cradle\n\n\nexports[\"default\"] = Cradle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle.tsx\n");

/***/ }),

/***/ "./src/cradle/contentfunctions.tsx":
/*!*****************************************!*\
  !*** ./src/cradle/contentfunctions.tsx ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // cradlefunctions.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.deleteAndRerenderPortals = exports.allocateContentList = exports.getUICellShellList = exports.calcHeadAndTailChanges = exports.calcContentShifts = exports.isolateShiftingIntersections = exports.getContentListRequirements = void 0;\n/******************************************************************************************\n ------------------------------------[ SUPPORTING FUNCTIONS ]------------------------------\n*******************************************************************************************/\n\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar cellshell_1 = __importDefault(__webpack_require__(/*! ../cellshell */ \"./src/cellshell.tsx\"));\n\nvar detect_browser_1 = __webpack_require__(/*! detect-browser */ \"./node_modules/detect-browser/es/index.js\");\n\nvar browser = (0, detect_browser_1.detect)(); // ======================[ for setCradleContent ]===========================\n\nvar getContentListRequirements = function getContentListRequirements(_a) {\n  var _b;\n\n  var // called from setCradleContent only\n  cradleProps = _a.cradleProps,\n      cradleConfig = _a.cradleConfig,\n      referenceoffset = _a.visibletargetindexoffset,\n      targetViewportOffset = _a.targetViewportOffset,\n      viewportElement = _a.viewportElement;\n  var orientation = cradleProps.orientation,\n      cellHeight = cradleProps.cellHeight,\n      cellWidth = cradleProps.cellWidth,\n      runwaycount = cradleProps.runwaycount,\n      gap = cradleProps.gap,\n      padding = cradleProps.padding,\n      listsize = cradleProps.listsize;\n  var crosscount = cradleConfig.crosscount,\n      cradleRowcount = cradleConfig.cradleRowcount,\n      viewportRowcount = cradleConfig.viewportRowcount; // reconcile spineReferenceIndex to crosscount context\n\n  var diff = referenceoffset % crosscount;\n  referenceoffset -= diff; // -------------[ calc basic inputs: cellLength, contentCount. ]----------\n\n  var cellLength, viewportlength;\n\n  if (orientation == 'vertical') {\n    cellLength = cellHeight + gap;\n    viewportlength = viewportElement.offsetHeight;\n  } else {\n    cellLength = cellWidth + gap;\n    viewportlength = viewportElement.offsetWidth;\n  } // let viewportrows = Math.floor(viewportlength / cellLength)\n\n\n  var viewportrows = viewportRowcount;\n  var cradleAvailableContentCount = cradleRowcount * crosscount; // -----------------------[ calc leadingitemcount, referenceoffset ]-----------------------\n\n  var runwayitemcount = runwaycount * crosscount;\n  runwayitemcount = Math.min(runwayitemcount, referenceoffset); // for list head\n  // -----------------------[ calc cradleReferenceIndex ]------------------------\n  // leading edge\n\n  var cradleReferenceIndex = referenceoffset - runwayitemcount; // ------------[ adjust cradleReferenceIndex for underflow ]------------\n\n  diff = 0; // reset\n\n  var indexshift = 0; // adjustment if overshoot head\n\n  if (cradleReferenceIndex < 0) {\n    diff = cradleReferenceIndex;\n    indexshift = Math.floor(cradleReferenceIndex / crosscount) * crosscount;\n    cradleReferenceIndex += indexshift;\n  } // ------------[ adjust cradleReferenceIndex and contentCount for listsize overflow ]------------\n\n\n  var spinePosOffset = targetViewportOffset % cellLength; // if (spinePosOffset < 0) { // TODO: this shouldn't happen - reproduce from wide botton to narrow\n  //     spinePosOffset += (orientation == 'vertical'?cellHeight:cellWidth)\n  //     referenceoffset += crosscount\n  //     cradleReferenceIndex += crosscount\n  // }\n  // --------------------[ calc css positioning ]-----------------------\n\n  var targetrowoffset = Math.ceil(referenceoffset / crosscount);\n  var scrollblockOffset = targetrowoffset * cellLength + padding; // gap\n\n  var spineAdjustment;\n  var cradleActualContentCount = cradleAvailableContentCount;\n\n  if (targetrowoffset == 0) {\n    scrollblockOffset = 0;\n    spinePosOffset = 0; // padding\n\n    spineAdjustment = padding;\n  } else {\n    spineAdjustment = 0; //gap;\n\n    _b = adjustSpineOffsetForMaxRefIndex({\n      referenceoffset: referenceoffset,\n      spinePosOffset: spinePosOffset,\n      scrollblockOffset: scrollblockOffset,\n      targetrowoffset: targetrowoffset,\n      viewportlength: viewportlength,\n      listsize: listsize,\n      viewportrows: viewportrows,\n      crosscount: crosscount,\n      cellLength: cellLength,\n      padding: padding,\n      gap: gap,\n      cradleReferenceIndex: cradleReferenceIndex,\n      cradleAvailableContentCount: cradleAvailableContentCount\n    }), cradleReferenceIndex = _b[0], cradleActualContentCount = _b[1], referenceoffset = _b[2], scrollblockOffset = _b[3], spinePosOffset = _b[4];\n  }\n\n  return {\n    cradleReferenceIndex: cradleReferenceIndex,\n    referenceoffset: referenceoffset,\n    cradleActualContentCount: cradleActualContentCount,\n    scrollblockOffset: scrollblockOffset,\n    spinePosOffset: spinePosOffset,\n    spineAdjustment: spineAdjustment\n  }; // summarize requirements message\n};\n\nexports.getContentListRequirements = getContentListRequirements;\n\nvar adjustSpineOffsetForMaxRefIndex = function adjustSpineOffsetForMaxRefIndex(_a) {\n  var listsize = _a.listsize,\n      crosscount = _a.crosscount,\n      cradleAvailableContentCount = _a.cradleAvailableContentCount,\n      cradleReferenceIndex = _a.cradleReferenceIndex,\n      referenceoffset = _a.referenceoffset,\n      targetrowoffset = _a.targetrowoffset,\n      scrollblockOffset = _a.scrollblockOffset,\n      spinePosOffset = _a.spinePosOffset,\n      viewportlength = _a.viewportlength,\n      viewportrows = _a.viewportrows,\n      cellLength = _a.cellLength,\n      padding = _a.padding,\n      gap = _a.gap;\n  var activelistitemcount = cradleReferenceIndex + cradleAvailableContentCount;\n  var activelistrowcount = Math.ceil(activelistitemcount / crosscount);\n  var listRowcount = Math.ceil(listsize / crosscount);\n\n  if (activelistrowcount > listRowcount) {\n    var diffrows = activelistrowcount - listRowcount;\n    var diff = diffrows * crosscount;\n    cradleReferenceIndex -= diff;\n    activelistrowcount -= diffrows;\n  } // let testlistrowcount = Math.ceil((cradleReferenceIndex + contentCount + 1)/crosscount)\n\n\n  var cradleActualContentCount = cradleAvailableContentCount;\n\n  if (activelistrowcount == listRowcount) {\n    var diff = listsize % crosscount;\n\n    if (diff) {\n      cradleActualContentCount -= crosscount - diff;\n    }\n  }\n\n  var maxrefindexrowoffset = Math.ceil(listsize / crosscount) - viewportrows + 1; // console.log('targetrowoffset, maxrefindexrowoffset', targetrowoffset, maxrefindexrowoffset)\n\n  if (targetrowoffset > maxrefindexrowoffset) {\n    var diff = targetrowoffset - maxrefindexrowoffset;\n    targetrowoffset -= diff; // maxrefindexrowoffset\n\n    referenceoffset = targetrowoffset * crosscount;\n    scrollblockOffset = targetrowoffset * cellLength + padding;\n    spinePosOffset = viewportlength - (viewportrows - 1) * cellLength - gap;\n  }\n\n  return [cradleReferenceIndex, cradleActualContentCount, referenceoffset, scrollblockOffset, spinePosOffset];\n}; // ======================[ for updateCradleContent ]===========================\n// filter out items that not proximate to the spine\n// TODO: keep last trigger position (x or y) to determine direction of scroll\n\n\nvar isolateShiftingIntersections = function isolateShiftingIntersections(_a) {\n  // console.log('==>> intersections',intersections)\n  var intersections = _a.intersections,\n      cradleContent = _a.cradleContent,\n      cellObserverThreshold = _a.cellObserverThreshold,\n      scrollingviewportforward = _a.scrollingviewportforward;\n  var headcontent = cradleContent.headModel;\n  var tailcontent = cradleContent.tailModel;\n  var //headindexes = [], \n  // tailindexes = [],\n  // headintersectionindexes = [],\n  // headintersections = [],\n  // tailintersectionindexes = [],\n  // tailintersections = [],\n  intersectingmetadata = {},\n      shiftingintersections = [],\n      shiftingindexes = [],\n      shiftingmetadata = []; // collect lists of current content indexes...\n  // headindexes, tailindexes\n\n  var headindexes = headcontent.map(function (component) {\n    return component.props.index;\n  });\n  var tailindexes = tailcontent.map(function (component) {\n    return component.props.index;\n  });\n  var duplicates = {};\n  var intersectionsptr = 0; // split intersections into head and tail indexes\n\n  for (var _i = 0, intersections_1 = intersections; _i < intersections_1.length; _i++) {\n    var entry = intersections_1[_i];\n    var entryindex = parseInt(entry.target.dataset.index);\n    var newitemptr = void 0;\n    var isShiftingEntry = false;\n\n    if (scrollingviewportforward) {\n      if (tailindexes.includes(entryindex)) {\n        shiftingindexes.push(entryindex);\n        shiftingintersections.push(entry);\n        newitemptr = shiftingintersections.length - 1; // used from iobj metadata for duplicate resolution\n\n        isShiftingEntry = true;\n      }\n    } else {\n      // if (scrollingviewportforward) {\n      if (headindexes.includes(entryindex)) {\n        shiftingindexes.push(entryindex);\n        shiftingintersections.push(entry);\n        newitemptr = shiftingintersections.length - 1; // used for duplicate resolution\n\n        isShiftingEntry = true;\n      }\n    } // } else {\n    //     console.log('SYSTEM ERROR: unknown intersection element, aborting isolateRelevantIntersections',entry)\n    //     return // shouldn't happen; give up\n    // }\n    // let ratio\n    // if (browser && browser.name == 'safari') {\n    //     ratio = entry.intersectionRatio\n    // } else {\n    //     ratio = Math.round(entry.intersectionRatio * 1000)/1000\n    // }\n\n\n    if (isShiftingEntry) {\n      var iobj = {\n        entryindex: entryindex,\n        // intersecting:calculatedintersecting,  // to accommodate browser differences\n        isIntersecting: entry.isIntersecting,\n        // threshold:Math.round(entry.intersectionRatio),\n        intersectionRatio: entry.intersectionRatio,\n        time: entry.time,\n        itemptr: newitemptr,\n        intersectionsptr: intersectionsptr,\n        entry: entry\n      };\n\n      if (!intersectingmetadata[entryindex]) {\n        // this is a new item\n        intersectingmetadata[entryindex] = iobj;\n      } else {\n        // this is a duplicate intersection item\n        if (!Array.isArray(intersectingmetadata[entryindex])) {\n          intersectingmetadata[entryindex] = [intersectingmetadata[entryindex]]; // arr\n        }\n\n        intersectingmetadata[entryindex].push(iobj); // add to duplicates list for later processing\n\n        if (!duplicates[entryindex]) {\n          duplicates[entryindex] = [];\n          duplicates[entryindex].push(intersectingmetadata[entryindex][0]);\n        }\n\n        duplicates[entryindex].push(iobj);\n      }\n    }\n\n    intersectionsptr++;\n  }\n\n  console.log('scrollingviewportforward, duplicates', scrollingviewportforward, __assign({}, duplicates)); // console.log('headintersectionindexes, tailintersectionindexes, intersections, intersectingmetadata',\n  //     headintersectionindexes, tailintersectionindexes, intersections, intersectingmetadata)\n  // resolve duplicates. For uneven number, keep the most recent\n  // otherwise delete them; they cancel each other out.\n  // duplicate items occur with rapid back and forth scrolling\n  // an even number of items cancel out; for an odd number the most recent is valid\n\n  if (Object.keys(duplicates).length) {\n    // > 0) { // there are duplicates to process\n    var intersectionsdelete_1 = [];\n\n    for (var duplicateindex in duplicates) {\n      var duplicatemetadatalist = duplicates[duplicateindex]; // replace duplicates array in interesting with selected iobj\n      // if (duplicatemetadatalist.length % 2) { // uneven; keep one\n      // duplicatemetadatalist.sort(duplicatecomparebytime)\n\n      var iobj = duplicatemetadatalist.slice(duplicatemetadatalist.length - 1, 1);\n      intersectingmetadata[iobj.index] = iobj; // replace any array with the metadata object\n      // } else { // remove the entry\n      //     delete intersectingmetadata[duplicatemetadatalist[0].index]\n      // }\n\n      for (var _b = 0, duplicatemetadatalist_1 = duplicatemetadatalist; _b < duplicatemetadatalist_1.length; _b++) {\n        var entrymetadata = duplicatemetadatalist_1[_b];\n        var itemptr = entrymetadata.itemptr;\n\n        if (itemptr !== undefined) {\n          // TODO: shouldn't happen\n          intersectionsdelete_1.push(itemptr);\n        }\n      }\n    } // filter out deleted head and tail items\n\n\n    if (intersectionsdelete_1.length) {\n      shiftingindexes = shiftingindexes.filter(function (value, index) {\n        return !intersectionsdelete_1.includes(index);\n      });\n    }\n  }\n\n  shiftingindexes.sort(indexcompare);\n  shiftingintersections.sort(entrycompare); // --------------------------[ ready to process! ]-----------------------------\n  // set reference points in relation to the spine\n\n  var referenceindex = shiftingindexes[shiftingindexes.length - 1]; // TODO referenceindex is 0 in other direction\n\n  var sectionptr = shiftingindexes.indexOf(referenceindex); // collect notifications to main thread (filtered intersections)\n  // console.log('POINTERS scrollingviewportforward, headptr, tailptr', scrollingviewportforward,headptr, tailptr)\n\n  var returnindex; // for return\n  // for scrollviewportbackward, moving toward head, add items to head, shift items to tail\n  // for scrollingviewportforward, moving toward tail, add items to tail, shift items to head\n\n  if (scrollingviewportforward && sectionptr >= 0) {\n    returnindex = shiftingindexes[sectionptr];\n    var refindex = returnindex - 1;\n\n    for (var ptr = sectionptr; ptr < shiftingindexes.length; ptr++) {\n      var index = shiftingindexes[ptr]; // test for continuity and consistency\n\n      if (index - 1 == refindex) {\n        // && (intersectingmetadata[index].isIntersecting == refintersecting)) {\n        shiftingintersections.push(shiftingintersections[ptr]);\n        shiftingindexes.push(index);\n        shiftingmetadata.push(intersectingmetadata[index]);\n      } else {\n        break;\n      }\n\n      refindex = index; // refintersecting = intersectingmetadata[index].intersecting\n    }\n  } // console.log('headintersectionindexes, tailintersectionindexes',headintersectionindexes, tailintersectionindexes)\n  // shiftingintersections.sort(entrycompare)\n  // this returns items to shift, according to scrollingviewportforward\n  // console.log('==> scrollingviewportforward, shiftingindexes, shiftingmetadata, shiftingintersections',\n  //     scrollingviewportforward ,shiftingindexes, shiftingmetadata, shiftingintersections)\n\n\n  return shiftingintersections;\n};\n\nexports.isolateShiftingIntersections = isolateShiftingIntersections;\n\nvar indexcompare = function indexcompare(a, b) {\n  var retval = a < b ? -1 : 1;\n  return retval;\n};\n\nvar entrycompare = function entrycompare(a, b) {\n  var retval = parseInt(a.target.dataset.index) < parseInt(b.target.dataset.index) ? -1 : 1;\n  return retval;\n};\n\nvar duplicatecomparebytime = function duplicatecomparebytime(a, b) {\n  var retval = a.time < b.time ? -1 : 1;\n}; // TODO: fix cradleActualContentCount\n// A negative shift is toward the head, a positive shift is toward the tail\n// called only from updateCradleContent\n\n\nvar calcContentShifts = function calcContentShifts(_a) {\n  // ------------------------[ initialize ]-----------------------\n  var _b;\n\n  var cradleProps = _a.cradleProps,\n      cradleElements = _a.cradleElements,\n      cradleContent = _a.cradleContent,\n      cradleConfig = _a.cradleConfig,\n      viewportElement = _a.viewportElement,\n      // itemElements,\n  shiftingintersections = _a.shiftingintersections,\n      scrollingviewportforward = _a.scrollingviewportforward,\n      viewportData = _a.viewportData;\n  var gap = cradleProps.gap,\n      orientation = cradleProps.orientation,\n      cellHeight = cradleProps.cellHeight,\n      cellWidth = cradleProps.cellWidth,\n      listsize = cradleProps.listsize,\n      padding = cradleProps.padding,\n      runwaycount = cradleProps.runwaycount;\n  var spineElement = cradleElements.spineRef.current,\n      headElement = cradleElements.headRef.current,\n      tailElement = cradleElements.tailRef.current;\n  var cradlecontentlist = cradleContent.cradleModel,\n      headcontentlist = cradleContent.headModel,\n      tailcontentlist = cradleContent.tailModel;\n  var crosscount = cradleConfig.crosscount,\n      cradleRowcount = cradleConfig.cradleRowcount,\n      listRowcount = cradleConfig.listRowcount,\n      viewportRowcount = cradleConfig.viewportRowcount,\n      itemObserverThreshold = cradleConfig.itemObserverThreshold;\n  var BOD = false,\n      EOD = false; // beginning-of-data, end-of-data flags\n\n  var cellLength = (orientation == 'vertical' ? cellHeight : cellWidth) + gap;\n  var viewportspineoffset; // the pixel distance between the viewport frame and the spine, toward the head\n  // -------[ 1. calculate spine's headblock overshoot item & row counts, if any ]-------\n\n  var headblockoffset, tailblockoffset, viewportlength;\n  var viewportvisiblegaplength = 0;\n\n  if (orientation == 'vertical') {\n    viewportspineoffset = spineElement.offsetTop - viewportElement.scrollTop;\n    viewportlength = viewportElement.offsetHeight; // measure any gap between the cradle and the top viewport boundary\n\n    if (!scrollingviewportforward) {\n      // scrollviewportbackward, toward head\n      // if viewportspineoffset is below the top by more than the height of \n      // the headElment then a gap will be visible\n      viewportvisiblegaplength = viewportspineoffset - headElement.offsetHeight;\n    }\n  } else {\n    // horizontal\n    viewportspineoffset = spineElement.offsetLeft - viewportElement.scrollLeft;\n    viewportlength = viewportElement.offsetWidth;\n\n    if (!scrollingviewportforward) {\n      // scroll backward, toward head\n      viewportvisiblegaplength = viewportspineoffset - headElement.offsetWidth;\n    }\n  }\n\n  if (viewportvisiblegaplength < 0 || viewportvisiblegaplength > viewportlength) {\n    viewportvisiblegaplength = 0; // no visible gap, or doreposition should have kicked in\n  } // viewportvisiblegaplength is always positive\n\n\n  var overshootrowcount = viewportvisiblegaplength == 0 ? 0 : Math.ceil(viewportvisiblegaplength / cellLength); // rows to fill viewport\n\n  var overshootitemcount = overshootrowcount * crosscount; // -----------------[ 2. calculate item & row shift counts including overshoot ]-------------\n\n  /*\n      shift item count is the number of items the virtual cradle shifts, according to observer\n      shift negative closer to head, shift positive closer to tail\n      cradle reference is the first content item\n      spine reference is the first tail item\n  */\n\n  var headaddshiftitemcount = 0,\n      tailaddshiftitemcount = 0,\n      headaddshiftrowcount = 0,\n      tailaddshiftrowcount = 0;\n\n  if (!scrollingviewportforward) {\n    // viewport moves toward tail, add tail items, shift positive\n    tailaddshiftitemcount = shiftingintersections.length;\n  } else {\n    // scrollviewportbackward, viewport toward head, add head items, shift negative\n    headaddshiftitemcount = shiftingintersections.length;\n  } // console.log('1. shiftingintersections.length, headaddshiftitemcount,tailaddshiftitemcount',\n  //     shiftingintersections.length,headaddshiftitemcount,tailaddshiftitemcount)\n  // negative value shifted toward head; positive value shofted toward tail\n  // one of the two expressions in the following line will be 0\n\n\n  var spinereferenceshiftitemcount = tailaddshiftitemcount - (headaddshiftitemcount + overshootitemcount);\n  var cradlereferenceshiftitemcount = tailaddshiftitemcount - (headaddshiftitemcount + overshootitemcount);\n  var cradlereferencerowshift = cradlereferenceshiftitemcount > 0 // could include partial row from shiftingintersections\n  ? Math.ceil(cradlereferenceshiftitemcount / crosscount) : Math.floor(cradlereferenceshiftitemcount / crosscount);\n  cradlereferenceshiftitemcount = Math.round(cradlereferencerowshift * crosscount);\n  var spinereferencerowshift = spinereferenceshiftitemcount > 0 // could include partial row from shiftingintersections\n  ? Math.ceil(spinereferenceshiftitemcount / crosscount) : Math.floor(spinereferenceshiftitemcount / crosscount);\n  spinereferenceshiftitemcount = Math.round(spinereferencerowshift * crosscount); // ----------------[ 3. calc new cradle reference index and spine reference index ]-----------------\n\n  var previouscradlereferenceindex = cradlecontentlist[0].props.index || 0;\n  var previouscradlerowoffset = Math.round(previouscradlereferenceindex / crosscount);\n  var previousspinereferenceindex = ((_b = tailcontentlist[0]) === null || _b === void 0 ? void 0 : _b.props.index) || 0; // TODO:Uncaught TypeError: Cannot read property 'props' of undefined\n  // const previousspinereferencerowoffset = Math.round(previousspinereferenceindex/crosscount)\n  // computed shifted cradle end row, looking for overshoot\n\n  var rowovershoot;\n  var computedcradleEndrow = previouscradlerowoffset + cradleRowcount + cradlereferencerowshift - 1;\n\n  if (scrollingviewportforward) {\n    // scroll viewport toward tail, shift is positive, add to tail\n    rowovershoot = computedcradleEndrow - listRowcount; // overshoot amount \n\n    if (rowovershoot > 0) {\n      cradlereferencerowshift -= rowovershoot;\n      cradlereferenceshiftitemcount -= rowovershoot * crosscount;\n    }\n  } else {\n    // scroll viewport backward, scroll viewport toward head, shift is negative, add to head\n    rowovershoot = previouscradlerowoffset + cradlereferencerowshift;\n\n    if (rowovershoot < 0) {\n      cradlereferencerowshift -= rowovershoot; // add back the overshoot\n\n      cradlereferenceshiftitemcount -= rowovershoot * crosscount;\n    }\n  }\n\n  var newcradlereferenceindex = previouscradlereferenceindex + cradlereferenceshiftitemcount;\n  var newspinereferenceindex = previousspinereferenceindex + spinereferenceshiftitemcount;\n\n  if (newcradlereferenceindex < 0) {\n    cradlereferenceshiftitemcount += newcradlereferenceindex; // cradlereferencerowshift += Math.round(newcradlereferenceindex/crosscount)\n    // computedcradleEndrow += Math.round(newcradlereferenceindex/crosscount)\n\n    newcradlereferenceindex = 0;\n  }\n\n  if (newspinereferenceindex < 0) {\n    spinereferenceshiftitemcount += newspinereferenceindex; // spinereferencerowshift += Math.round(newspinereferenceindex/crosscount)\n\n    newspinereferenceindex = 0;\n  }\n\n  if (computedcradleEndrow >= listRowcount) {\n    EOD = true;\n  }\n\n  if (previouscradlerowoffset + cradlereferencerowshift <= 0) {\n    // undershoot, past start of dataset\n    BOD = true;\n  } // console.log('2. computedcradleEndrow,listRowcount,previouscradlerowoffset,cradlereferencerowshift','\\n',\n  //     computedcradleEndrow,listRowcount,previouscradlerowoffset,cradlereferencerowshift)\n  // -------------[ 4. reconcile spineReferenceAdjustment and calc newspinePosOffset ]------------------\n\n\n  var spinereferenceitemshift = newspinereferenceindex - previousspinereferenceindex;\n  var cradlereferenceitemshift = newcradlereferenceindex - previouscradlereferenceindex;\n  var spinerowshift = spinereferencerowshift; // Math.round(spinereferenceitemshift/crosscount)\n\n  var spineposshift = spinerowshift * cellLength;\n  var newspineposoffset = viewportspineoffset + spineposshift; // make necessary visibility adjustments\n\n  var newspinePosOffsetWorking = newspineposoffset;\n  var spineReferenceAdjustment = 0;\n\n  if (Math.abs(newspineposoffset) > cellLength) {\n    newspinePosOffsetWorking = newspineposoffset % cellLength;\n    spineReferenceAdjustment = -(Math.ceil((newspineposoffset - newspinePosOffsetWorking) / cellLength) * crosscount);\n  }\n\n  if (newspinePosOffsetWorking < 0) {\n    newspinePosOffsetWorking += cellLength;\n    spineReferenceAdjustment += crosscount;\n  }\n\n  if (spineReferenceAdjustment) {\n    var spineRowAdjustment = Math.round(spineReferenceAdjustment / crosscount);\n    newspinereferenceindex += spineReferenceAdjustment;\n    spinereferenceitemshift += spineReferenceAdjustment;\n\n    if (!(BOD || EOD)) {\n      newcradlereferenceindex += spineReferenceAdjustment;\n      cradlereferenceitemshift += spineReferenceAdjustment;\n    }\n  }\n\n  newspineposoffset = newspinePosOffsetWorking; // ---------------------[ 5. return required values ]-------------------\n\n  var partialrowfreespaces = cradlecontentlist.length % crosscount;\n  var partialrowitems = partialrowfreespaces ? crosscount - partialrowfreespaces : 0;\n  var cradleAvailableContentCount = cradlecontentlist.length + partialrowitems; // cradleRowcount * crosscount\n\n  var newCradleActualContentCount = Math.min(cradleAvailableContentCount, listsize - newcradlereferenceindex);\n  var newheadcount, newtailcount, headchangecount, tailchangecount;\n  newheadcount = newspinereferenceindex - newcradlereferenceindex;\n  newtailcount = newCradleActualContentCount - newheadcount; // console.log('3. newheadcount, newtailcount, newspinereferenceindex - newcradlereferenceindex,newCradleActualContentCount, BOD, EOD', '\\n',\n  //     newheadcount, newtailcount, newspinereferenceindex, newcradlereferenceindex, newCradleActualContentCount,BOD, EOD)\n\n  return [newcradlereferenceindex, cradlereferenceitemshift, newspinereferenceindex, spinereferenceitemshift, newspineposoffset, newCradleActualContentCount, headchangecount, tailchangecount];\n};\n\nexports.calcContentShifts = calcContentShifts;\n\nvar calcHeadAndTailChanges = function calcHeadAndTailChanges(_a) {\n  var cradleProps = _a.cradleProps,\n      cradleConfig = _a.cradleConfig,\n      cradleContent = _a.cradleContent,\n      cradleshiftcount = _a.cradleshiftcount,\n      scrollingviewportforward = _a.scrollingviewportforward,\n      cradleReferenceIndex = _a.cradleReferenceIndex;\n  var listsize = cradleProps.listsize;\n  var headcontent = cradleContent.headModel;\n  var tailcontent = cradleContent.tailModel;\n  var crosscount = cradleConfig.crosscount,\n      cradleRowcount = cradleConfig.cradleRowcount;\n  cradleshiftcount = Math.abs(cradleshiftcount);\n  var rowshiftcount = Math.ceil(cradleshiftcount / crosscount); //+ boundaryrowcount\n\n  var headrowcount, tailrowcount;\n  headrowcount = Math.ceil(headcontent.length / crosscount);\n  tailrowcount = Math.ceil(tailcontent.length / crosscount);\n  var pendingcontentoffset; // lookahead to new cradleReferenceIndex\n\n  var headchangecount, tailchangecount; // the output instructions for getUICellShellList\n  // anticipaate add to one end, clip from the other        \n\n  var additemcount = 0;\n  var cliprowcount = 0,\n      clipitemcount = 0;\n\n  if (scrollingviewportforward) {\n    // clip from head; add to tail; scroll forward tail is direction of scroll\n    // adjust clipitemcount\n    if (headrowcount + rowshiftcount > cradleProps.runwaycount) {\n      var rowdiff = headrowcount + rowshiftcount - cradleProps.runwaycount;\n      cliprowcount = rowdiff;\n      clipitemcount = cliprowcount * crosscount;\n    }\n\n    additemcount = clipitemcount; // maintain constant cradle count\n\n    pendingcontentoffset = cradleReferenceIndex + clipitemcount; // after clip\n\n    var proposedtailindex = pendingcontentoffset + cradleRowcount * crosscount - 1; // modelcontentlist.length - 1\n    // adkjust changes for list boundaries\n\n    if (proposedtailindex > listsize - 1) {\n      var diffitemcount = proposedtailindex - (listsize - 1); // items outside range\n\n      additemcount -= diffitemcount; // adjust the addcontent accordingly\n\n      var diffrows = Math.floor(diffitemcount / crosscount); // number of full rows to leave in place\n\n      var diffrowitems = diffrows * crosscount; // derived number of items to leave in place\n\n      clipitemcount -= diffrowitems; // apply adjustment to netshift\n\n      if (additemcount <= 0) {\n        // nothing to do\n        additemcount = 0;\n      }\n\n      if (clipitemcount <= 0) {\n        clipitemcount = 0;\n      }\n    }\n\n    headchangecount = clipitemcount == 0 ? 0 : -clipitemcount;\n    tailchangecount = additemcount;\n  } else {\n    // scroll viewport backward, in direction of head; clip from tail, add to head\n    var intersectionindexes = []; // headcount will be less than minimum (runwaycount), so a shift can be accomplished[]\n\n    if (headrowcount - rowshiftcount < cradleProps.runwaycount) {\n      // calculate clip for tail\n      var rowshortfall = cradleProps.runwaycount - (headrowcount - rowshiftcount);\n      cliprowcount = rowshortfall;\n      var tailrowitemcount = tailcontent.length % crosscount;\n      if (tailrowitemcount == 0) tailrowitemcount = crosscount;\n      clipitemcount = tailrowitemcount;\n\n      if (tailrowcount > 1) {\n        if (cliprowcount > tailrowcount) {\n          cliprowcount = tailrowcount;\n        }\n\n        if (cliprowcount > 1) {\n          clipitemcount += (cliprowcount - 1) * crosscount;\n        }\n      } // compenstate with additemcount\n\n\n      additemcount = cliprowcount * crosscount;\n    }\n\n    var proposedindexoffset = cradleReferenceIndex - additemcount;\n\n    if (proposedindexoffset < 0) {\n      var diffitemcount = -proposedindexoffset;\n      var diffrows = Math.ceil(diffitemcount / crosscount); // number of full rows to leave in place\n\n      var diffrowitems = diffrows * crosscount;\n      additemcount -= diffitemcount;\n      clipitemcount -= diffrowitems;\n\n      if (additemcount <= 0) {\n        additemcount = 0;\n      }\n\n      if (clipitemcount <= 0) {\n        clipitemcount = 0;\n      }\n    }\n\n    headchangecount = additemcount;\n    tailchangecount = clipitemcount == 0 ? 0 : -clipitemcount;\n  }\n\n  return [headchangecount, tailchangecount];\n};\n\nexports.calcHeadAndTailChanges = calcHeadAndTailChanges; // =====================[ shared by both setCradleContent and updateCradleContent ]====================\n// update content\n// adds itemshells at end of contentlist according to headindexcount and tailindescount,\n// or if indexcount values are <0 removes them.\n\nvar getUICellShellList = function getUICellShellList(_a) {\n  var cradleProps = _a.cradleProps,\n      cradleConfig = _a.cradleConfig,\n      cradleActualContentCount = _a.cradleActualContentCount,\n      cradleReferenceIndex = _a.cradleReferenceIndex,\n      headchangecount = _a.headchangecount,\n      tailchangecount = _a.tailchangecount,\n      contentlist = _a.localContentList,\n      callbacks = _a.callbacks,\n      observer = _a.observer,\n      instanceIdCounterRef = _a.instanceIdCounterRef;\n  var crosscount = cradleConfig.crosscount,\n      cradleRowcount = cradleConfig.cradleRowcount;\n\n  var localContentlist = __spreadArray([], contentlist, true);\n\n  var tailindexoffset = cradleReferenceIndex + contentlist.length; // let headindexoffset = cradleReferenceIndex\n  // let returnContentlist\n\n  var headContentlist = [];\n  var topconstraint = cradleReferenceIndex - headchangecount,\n      bottomconstraint = cradleReferenceIndex - headchangecount + (cradleActualContentCount + 1); // TODO: validate \"+1\"\n\n  var deletedtailitems = [],\n      deletedheaditems = [];\n\n  if (headchangecount >= 0) {\n    for (var index = cradleReferenceIndex - headchangecount; index < cradleReferenceIndex; index++) {\n      if (!(index >= topconstraint && index <= bottomconstraint)) {\n        continue;\n      }\n\n      headContentlist.push(acquireItem({\n        index: index,\n        cradleProps: cradleProps,\n        observer: observer,\n        callbacks: callbacks,\n        instanceIdCounterRef: instanceIdCounterRef\n      }));\n    }\n  } else {\n    deletedheaditems = localContentlist.splice(0, -headchangecount);\n  }\n\n  var tailContentlist = [];\n\n  if (tailchangecount >= 0) {\n    for (var index = tailindexoffset; index < tailindexoffset + tailchangecount; index++) {\n      if (!(index >= topconstraint && index <= bottomconstraint)) {\n        continue;\n      }\n\n      tailContentlist.push(acquireItem({\n        index: index,\n        cradleProps: cradleProps,\n        observer: observer,\n        callbacks: callbacks,\n        instanceIdCounterRef: instanceIdCounterRef\n      }));\n    }\n  } else {\n    deletedtailitems = localContentlist.splice(tailchangecount, -tailchangecount);\n  }\n\n  var deleteditems = deletedheaditems.concat(deletedtailitems);\n  var componentList = headContentlist.concat(localContentlist, tailContentlist);\n  return [componentList, deleteditems];\n};\n\nexports.getUICellShellList = getUICellShellList; // butterfly model. Leading (head) all or partially hidden; tail, visible plus following hidden\n\nvar allocateContentList = function allocateContentList(_a) {\n  var _b;\n\n  var contentlist = _a.contentlist,\n      // of cradle, in items (React components)\n  spinereferenceindex = _a.spinereferenceindex;\n  var offsetindex = (_b = contentlist[0]) === null || _b === void 0 ? void 0 : _b.props.index; // TODO: Cannot read property 'props' of undefined\n\n  var headitemcount;\n  headitemcount = spinereferenceindex - offsetindex;\n  var headlist = contentlist.slice(0, headitemcount);\n  var taillist = contentlist.slice(headitemcount);\n  return [headlist, taillist];\n};\n\nexports.allocateContentList = allocateContentList;\n\nvar deleteAndRerenderPortals = function deleteAndRerenderPortals(portalManager, deleteList) {\n  for (var _i = 0, deleteList_1 = deleteList; _i < deleteList_1.length; _i++) {\n    var item = deleteList_1[_i];\n    portalManager.deletePortal(item.props.index);\n  }\n\n  if (deleteList.length) portalManager.renderPortalList();\n};\n\nexports.deleteAndRerenderPortals = deleteAndRerenderPortals; // =====================[ acquire item support ]======================\n\nvar acquireItem = function acquireItem(_a) {\n  var index = _a.index,\n      cradleProps = _a.cradleProps,\n      observer = _a.observer,\n      callbacks = _a.callbacks,\n      instanceIdCounterRef = _a.instanceIdCounterRef;\n  var instanceID = instanceIdCounterRef.current++;\n  return emitItem({\n    index: index,\n    cradleProps: cradleProps,\n    observer: observer,\n    callbacks: callbacks,\n    instanceID: instanceID\n  });\n};\n\nvar emitItem = function emitItem(_a) {\n  var index = _a.index,\n      cradleProps = _a.cradleProps,\n      observer = _a.observer,\n      callbacks = _a.callbacks,\n      instanceID = _a.instanceID;\n  var orientation = cradleProps.orientation,\n      cellHeight = cradleProps.cellHeight,\n      cellWidth = cradleProps.cellWidth,\n      getItem = cradleProps.getItem,\n      placeholder = cradleProps.placeholder,\n      listsize = cradleProps.listsize,\n      scrollerName = cradleProps.scrollerName,\n      scrollerID = cradleProps.scrollerID;\n  return react_1[\"default\"].createElement(cellshell_1[\"default\"], {\n    key: index,\n    orientation: orientation,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    index: index,\n    observer: observer,\n    callbacks: callbacks,\n    getItem: getItem,\n    listsize: listsize,\n    placeholder: placeholder,\n    instanceID: instanceID,\n    scrollerName: scrollerName,\n    scrollerID: scrollerID\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contentfunctions.tsx\n");

/***/ }),

/***/ "./src/cradle/contentmanager.tsx":
/*!***************************************!*\
  !*** ./src/cradle/contentmanager.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(" // contentmanager.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar contentfunctions_1 = __webpack_require__(/*! ./contentfunctions */ \"./src/cradle/contentfunctions.tsx\");\n\nvar ContentManager =\n/** @class */\nfunction () {\n  function ContentManager(commonProps, contentCallbacksRef) {\n    var _this = this;\n\n    this.content = {\n      cradleModel: null,\n      headModel: null,\n      tailModel: null,\n      headView: [],\n      tailView: []\n    };\n    this.itemElements = new Map();\n    this.instanceIdCounterRef = {\n      current: 0\n    };\n    this.instanceIdMap = new Map();\n    this._previousScrollForward = undefined; // Two public methods - setCradleContent and updateCradleContent\n    // reset cradle, including allocation between head and tail parts of the cradle\n    // called only from cradle preparerender event\n    // TODO: last row is sometimes left off with reposition\n\n    this.setCradleContent = function (cradleState) {\n      var viewportData = _this.commonProps.viewportdataRef.current;\n      var cradleProps = _this.commonProps.cradlePropsRef.current;\n      var cradleConfig = _this.commonProps.cradleConfigRef.current;\n      var scrollManager = _this.commonProps.managersRef.current.scroll;\n      var cradleManager = _this.commonProps.managersRef.current.cradle;\n      var stateManager = _this.commonProps.managersRef.current.state;\n      var serviceManager = _this.commonProps.managersRef.current.service;\n      var interruptManager = _this.commonProps.managersRef.current.interrupts;\n      var cradleData = _this.commonProps.cradleDataRef.current; // if (viewportData.index == 6) {\n      //     console.log('SETTING content - cradleState, cradleData in setCradleContent',\n      // cradleState, cradleData)\n      // }\n\n      var viewportElement = viewportData.elementref.current;\n      var visibletargetindexoffset = cradleManager.cradleReferenceData.nextItemIndexReference;\n      var visibletargetscrolloffset = cradleManager.cradleReferenceData.nextCradlePosOffset;\n      var cellHeight = cradleProps.cellHeight,\n          cellWidth = cradleProps.cellWidth,\n          orientation = cradleProps.orientation,\n          runwaycount = cradleProps.runwaycount,\n          gap = cradleProps.gap,\n          padding = cradleProps.padding,\n          listsize = cradleProps.listsize;\n      var cradleRowcount = cradleConfig.cradleRowcount,\n          crosscount = cradleConfig.crosscount,\n          viewportRowcount = cradleConfig.viewportRowcount;\n\n      if (cradleState == 'doreposition') {\n        visibletargetscrolloffset = visibletargetindexoffset == 0 ? padding : gap;\n      }\n\n      var localContentList = [];\n      var cradleContent = _this.content;\n\n      var _a = (0, contentfunctions_1.getContentListRequirements)({\n        cradleProps: cradleProps,\n        cradleConfig: cradleConfig,\n        visibletargetindexoffset: visibletargetindexoffset,\n        targetViewportOffset: visibletargetscrolloffset,\n        viewportElement: viewportData.elementref.current\n      }),\n          cradleReferenceIndex = _a.cradleReferenceIndex,\n          referenceoffset = _a.referenceoffset,\n          cradleActualContentCount = _a.cradleActualContentCount,\n          scrollblockOffset = _a.scrollblockOffset,\n          spinePosOffset = _a.spinePosOffset,\n          spineAdjustment = _a.spineAdjustment; // console.log('cradleActualContentCount from getContentListRequirements',cradleActualContentCount)\n      // if (viewportData.index == 6) {\n      //     console.log('SET index, cradleActualContentCount', viewportData.index,cradleActualContentCount)\n      // }\n      // returns content constrained by cradleRowcount\n\n\n      var _b = (0, contentfunctions_1.getUICellShellList)({\n        cradleProps: cradleProps,\n        cradleConfig: cradleConfig,\n        cradleActualContentCount: cradleActualContentCount,\n        cradleReferenceIndex: cradleReferenceIndex,\n        headchangecount: 0,\n        tailchangecount: cradleActualContentCount,\n        localContentList: localContentList,\n        callbacks: _this.contentCallbacksRef.current,\n        observer: interruptManager.cellIntersect.observer,\n        instanceIdCounterRef: _this.instanceIdCounterRef\n      }),\n          childlist = _b[0],\n          deleteditems = _b[1];\n\n      (0, contentfunctions_1.deleteAndRerenderPortals)(cradleData.portalManager, deleteditems);\n\n      var _c = (0, contentfunctions_1.allocateContentList)({\n        contentlist: childlist,\n        spinereferenceindex: referenceoffset\n      }),\n          headcontentlist = _c[0],\n          tailcontentlist = _c[1];\n\n      if (headcontentlist.length == 0) {\n        spinePosOffset = padding;\n      }\n\n      cradleContent.cradleModel = childlist;\n      cradleContent.headModel = headcontentlist;\n      cradleContent.tailModel = tailcontentlist;\n      cradleManager.cradleReferenceData.scrollImpliedItemIndexReference = referenceoffset;\n      cradleManager.cradleReferenceData.scrollImpliedCradlePosOffset = spinePosOffset;\n      cradleManager.cradleReferenceData.nextItemIndexReference = referenceoffset;\n      cradleManager.cradleReferenceData.nextCradlePosOffset = spinePosOffset;\n\n      if (serviceManager.serviceCalls.referenceIndexCallbackRef.current) {\n        var cstate = cradleState; // if (cstate == 'setreload') cstate = 'reload'\n\n        serviceManager.serviceCalls.referenceIndexCallbackRef.current(cradleManager.cradleReferenceData.nextItemIndexReference, 'setCradleContent', cstate);\n      }\n\n      var cradleElements = cradleManager.elements; //cradleElementsRef.current\n\n      cradleManager.cradleReferenceData.blockScrollPos = scrollblockOffset - spinePosOffset; // console.log('setting blockScrollPos in setCradleContent: blockScrollPos, scrollblockOffset, spinePosOffset',\n      //     cradleManager.cradleReferenceData.blockScrollPos, scrollblockOffset, spinePosOffset)\n\n      if (orientation == 'vertical') {\n        cradleManager.cradleReferenceData.blockScrollProperty = 'scrollTop'; // cradleManager.cradleReferenceData.blockScrollPos = viewportElement.scrollTop\n\n        cradleElements.spineRef.current.style.top = scrollblockOffset + spineAdjustment + 'px';\n        cradleElements.spineRef.current.style.left = 'auto';\n        cradleElements.headRef.current.style.paddingBottom = headcontentlist.length ? cradleProps.gap + 'px' : 0;\n      } else {\n        // orientation = 'horizontal'\n        cradleManager.cradleReferenceData.blockScrollProperty = 'scrollLeft'; // cradleManager.cradleReferenceData.blockScrollPos = viewportElement.scrollLeft\n\n        cradleElements.spineRef.current.style.top = 'auto';\n        cradleElements.spineRef.current.style.left = scrollblockOffset + spineAdjustment + 'px';\n        cradleElements.headRef.current.style.paddingRight = headcontentlist.length ? cradleProps.gap + 'px' : 0;\n      }\n    };\n\n    this.updateCradleContent = function (entries, source) {\n      var _a;\n\n      if (source === void 0) {\n        source = 'notifications';\n      }\n\n      var viewportData = _this.commonProps.viewportdataRef.current;\n      var cradleProps = _this.commonProps.cradlePropsRef.current;\n      var scrollManager = _this.commonProps.managersRef.current.scroll;\n      var cradleManager = _this.commonProps.managersRef.current.cradle;\n      var stateManager = _this.commonProps.managersRef.current.state;\n      var interruptManager = _this.commonProps.managersRef.current.interrupts;\n      var cradleData = _this.commonProps.cradleDataRef.current; // if (viewportData.index == 6) {\n      // console.log('UPDATING content - source; in updateCradleContent',source)\n      // }\n\n      var viewportElement = viewportData.elementref.current;\n\n      if (!viewportElement) {\n        // not mounted; return\n        return;\n      }\n\n      var scrollOffset;\n\n      if (cradleProps.orientation == 'vertical') {\n        scrollOffset = viewportElement.scrollTop;\n      } else {\n        scrollOffset = viewportElement.scrollLeft;\n      }\n\n      if (scrollOffset < 0) {\n        // for Safari elastic bounce at top of scroll\n        return;\n      } // ----------------------------[ 1. initialize ]----------------------------\n\n\n      var scrollPositions = scrollManager.scrollPositions; //scrollPositionsRef.current\n\n      var scrollingviewportforward;\n\n      if (scrollPositions.current == scrollPositions.previous) {\n        // edge case \n        scrollingviewportforward = _this._previousScrollForward;\n      } else {\n        // console.log('scrollPositions',scrollPositions)\n        scrollingviewportforward = scrollPositions.currentupdate > scrollPositions.previousupdate;\n        _this._previousScrollForward = scrollingviewportforward;\n      }\n\n      if (scrollingviewportforward === undefined) {\n        return; // init call\n      }\n\n      var cradleElements = cradleManager.elements;\n      var cradleContent = _this.content;\n      var cradleConfig = _this.commonProps.cradleConfigRef.current;\n      var itemElements = _this.itemElements;\n      var modelcontentlist = cradleContent.cradleModel;\n      var cradleReferenceIndex = modelcontentlist[0].props.index; // --------------------[ 2. filter intersections list ]-----------------------\n      // filter out inapplicable intersection entries\n      // we're only interested in intersections proximal to the spine\n\n      var shiftingintersections = [];\n\n      if (entries.length) {\n        shiftingintersections = (0, contentfunctions_1.isolateShiftingIntersections)({\n          scrollingviewportforward: scrollingviewportforward,\n          intersections: entries,\n          cradleContent: cradleContent,\n          cellObserverThreshold: cradleConfig.cellObserverThreshold\n        }); // console.log('SHIFTING intersections',shiftingintersections)\n      } // --------------------------------[ 3. Calculate shifts ]-------------------------------\n\n\n      var _b = (0, contentfunctions_1.calcContentShifts)({\n        cradleProps: cradleProps,\n        cradleConfig: cradleConfig,\n        cradleElements: cradleElements,\n        cradleContent: cradleContent,\n        viewportElement: viewportElement,\n        // itemElements,\n        shiftingintersections: shiftingintersections,\n        scrollingviewportforward: scrollingviewportforward,\n        viewportData: viewportData\n      }),\n          cradlereferenceindex = _b[0],\n          cradleitemshift = _b[1],\n          spinereferenceindex = _b[2],\n          spineitemshift = _b[3],\n          spineposoffset = _b[4],\n          newCradleActualContentCount = _b[5],\n          headchange = _b[6],\n          tailchange = _b[7];\n\n      if (spineitemshift == 0 && cradleitemshift == 0) return; // ------------------[ 4. calculate head and tail consolidated cradle content changes ]-----------------\n      // the number of items to add to and clip from the contentlist\n      // negative number is clip; positive number is add\n\n      var _c = (0, contentfunctions_1.calcHeadAndTailChanges)({\n        cradleProps: cradleProps,\n        cradleConfig: cradleConfig,\n        cradleContent: cradleContent,\n        cradleshiftcount: cradleitemshift,\n        scrollingviewportforward: scrollingviewportforward,\n        cradleReferenceIndex: cradleReferenceIndex\n      }),\n          headchangecount = _c[0],\n          tailchangecount = _c[1]; // ----------------------------------[ 5. reconfigure cradle content ]--------------------------\n      // collect modified content\n\n\n      var localContentList,\n          deletedContentItems = [];\n\n      if (headchangecount || tailchangecount) {\n        // TODO: apparently headchangecount of -0 fails test, should be fixed\n        _a = (0, contentfunctions_1.getUICellShellList)({\n          cradleProps: cradleProps,\n          cradleConfig: cradleConfig,\n          cradleActualContentCount: newCradleActualContentCount,\n          localContentList: modelcontentlist,\n          headchangecount: headchangecount,\n          tailchangecount: tailchangecount,\n          cradleReferenceIndex: cradleReferenceIndex,\n          observer: interruptManager.cellIntersect.observer,\n          callbacks: _this.contentCallbacksRef.current,\n          instanceIdCounterRef: _this.instanceIdCounterRef\n        }), localContentList = _a[0], deletedContentItems = _a[1];\n      } else {\n        localContentList = modelcontentlist;\n      }\n\n      (0, contentfunctions_1.deleteAndRerenderPortals)(cradleData.portalManager, deletedContentItems); // ----------------------------------[ 7. allocate cradle content ]--------------------------\n\n      var _d = (0, contentfunctions_1.allocateContentList)({\n        contentlist: localContentList,\n        spinereferenceindex: spinereferenceindex\n      }),\n          headcontent = _d[0],\n          tailcontent = _d[1];\n\n      cradleContent.cradleModel = localContentList;\n      cradleContent.headView = cradleContent.headModel = headcontent;\n      cradleContent.tailView = cradleContent.tailModel = tailcontent; // -------------------------------[ 8. set css changes ]-------------------------\n\n      scrollManager.updateBlockScrollPos();\n\n      if (spineposoffset !== undefined) {\n        // scrollManager.updateBlockScrollPos()\n        if (cradleProps.orientation == 'vertical') {\n          // cradleManager.cradleReferenceData.blockScrollPos = viewportElement.scrollTop\n          // cradleManager.cradleReferenceData.blockScrollProperty = 'scrollTop'\n          cradleElements.spineRef.current.style.top = viewportElement.scrollTop + spineposoffset + 'px';\n          cradleElements.spineRef.current.style.left = 'auto';\n          cradleElements.headRef.current.style.paddingBottom = headcontent.length ? cradleProps.gap + 'px' : 0;\n        } else {\n          // cradleManager.cradleReferenceData.blockScrollPos = viewportElement.scrollLeft\n          // cradleManager.cradleReferenceData.blockScrollProperty = 'scrollLeft'\n          cradleElements.spineRef.current.style.top = 'auto';\n          cradleElements.spineRef.current.style.left = viewportElement.scrollLeft + spineposoffset + 'px';\n          cradleElements.headRef.current.style.paddingRight = headcontent.length ? cradleProps.gap + 'px' : 0;\n        }\n      }\n\n      cradleManager.cradleReferenceData.scrollImpliedItemIndexReference = spinereferenceindex;\n      cradleManager.cradleReferenceData.scrollImpliedCradlePosOffset = spineposoffset;\n      cradleManager.cradleReferenceData.nextItemIndexReference = spinereferenceindex;\n      cradleManager.cradleReferenceData.nextCradlePosOffset = spineposoffset;\n      stateManager.setCradleState('renderupdatedcontent');\n    };\n\n    this.commonProps = commonProps;\n    this.contentCallbacksRef = contentCallbacksRef;\n  }\n\n  return ContentManager;\n}();\n\nexports[\"default\"] = ContentManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contentmanager.tsx\n");

/***/ }),

/***/ "./src/cradle/cradlemanager.tsx":
/*!**************************************!*\
  !*** ./src/cradle/cradlemanager.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // cradlemanager.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar CradleManager =\n/** @class */\nfunction () {\n  function CradleManager(commonProps, cradleElements) {\n    /*\n       ItemIndexReference is the sequential index of first item of the cradle tail\n       CradlePosOffset is the pixel offset of the cradle spine from the edge of the viewport\n       blockScrollPos is the scrollPos of the scrollblock in relation to the viewport\n       progression is scroll -> next\n    */\n    this.cradleReferenceData = {\n      scrollImpliedItemIndexReference: null,\n      scrollImpliedCradlePosOffset: null,\n      nextItemIndexReference: null,\n      nextCradlePosOffset: null,\n      // to set scrollPos after doreposition, or\n      // to restore scrollTop or scrollLeft after clobbered by DOM\n      blockScrollPos: null,\n      blockScrollProperty: null\n    };\n    this.elements = {\n      spineRef: null,\n      headRef: null,\n      tailRef: null\n    };\n    this.commonProps = commonProps;\n    var elements = this.elements;\n    elements.spineRef = cradleElements.spine;\n    elements.headRef = cradleElements.head;\n    elements.tailRef = cradleElements.tail;\n    var _a = this.commonProps.cradlePropsRef.current,\n        defaultVisibleIndex = _a.defaultVisibleIndex,\n        listsize = _a.listsize,\n        padding = _a.padding; // progression of references: scroll->next\n\n    this.cradleReferenceData.scrollImpliedItemIndexReference = Math.min(defaultVisibleIndex, listsize - 1) || 0;\n    this.cradleReferenceData.scrollImpliedCradlePosOffset = padding;\n    this.cradleReferenceData.nextItemIndexReference = this.cradleReferenceData.scrollImpliedItemIndexReference;\n    this.cradleReferenceData.nextCradlePosOffset = this.cradleReferenceData.scrollImpliedCradlePosOffset;\n  }\n\n  return CradleManager;\n}();\n\nexports[\"default\"] = CradleManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL2NyYWRsZW1hbmFnZXIudHN4LmpzIiwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7Ozs7OztBQUVBO0FBQUE7QUFBQTtBQUVJLHlCQUFZQSxXQUFaLEVBQXlCQyxjQUF6QixFQUF1QztBQXFCeEM7Ozs7OztBQU1BLCtCQUFzQjtBQUVuQkMscUNBQStCLEVBQUMsSUFGYjtBQUduQkMsa0NBQTRCLEVBQUMsSUFIVjtBQUtuQkMsNEJBQXNCLEVBQUMsSUFMSjtBQU1uQkMseUJBQW1CLEVBQUMsSUFORDtBQVFuQjtBQUNBO0FBQ0FDLG9CQUFjLEVBQUMsSUFWSTtBQVduQkMseUJBQW1CLEVBQUM7QUFYRCxLQUF0QjtBQWVBLG9CQUFXO0FBQ1JDLGNBQVEsRUFBQyxJQUREO0FBRVJDLGFBQU8sRUFBQyxJQUZBO0FBR1JDLGFBQU8sRUFBQztBQUhBLEtBQVg7QUF4Q0ksU0FBS1YsV0FBTCxHQUFtQkEsV0FBbkI7QUFFQSxRQUFJVyxRQUFRLEdBQUcsS0FBS0EsUUFBcEI7QUFDQUEsWUFBUSxDQUFDSCxRQUFULEdBQW9CUCxjQUFjLENBQUNXLEtBQW5DO0FBQ0FELFlBQVEsQ0FBQ0YsT0FBVCxHQUFtQlIsY0FBYyxDQUFDWSxJQUFsQztBQUNBRixZQUFRLENBQUNELE9BQVQsR0FBbUJULGNBQWMsQ0FBQ2EsSUFBbEM7QUFFSSxhQUEyQyxLQUFLZCxXQUFMLENBQWlCZSxjQUFqQixDQUFnQ0MsT0FBM0U7QUFBQSxRQUFDQyxtQkFBbUIseUJBQXBCO0FBQUEsUUFBc0JDLFFBQVEsY0FBOUI7QUFBQSxRQUFnQ0MsT0FBTyxhQUF2QyxDQVRnQyxDQVdwQzs7QUFDQSxTQUFLQyxtQkFBTCxDQUF5QmxCLCtCQUF6QixHQUE0RG1CLElBQUksQ0FBQ0MsR0FBTCxDQUFTTCxtQkFBVCxFQUE4QkMsUUFBUSxHQUFHLENBQXpDLEtBQWdELENBQTVHO0FBQ0EsU0FBS0UsbUJBQUwsQ0FBeUJqQiw0QkFBekIsR0FBd0RnQixPQUF4RDtBQUNBLFNBQUtDLG1CQUFMLENBQXlCaEIsc0JBQXpCLEdBQWtELEtBQUtnQixtQkFBTCxDQUF5QmxCLCtCQUEzRTtBQUNBLFNBQUtrQixtQkFBTCxDQUF5QmYsbUJBQXpCLEdBQStDLEtBQUtlLG1CQUFMLENBQXlCakIsNEJBQXhFO0FBRUY7O0FBK0JMO0FBQUMsQ0FsREQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vc3JjL2NyYWRsZS9jcmFkbGVtYW5hZ2VyLnRzeD84NTBmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGNyYWRsZW1hbmFnZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMjEgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3JhZGxlTWFuYWdlciB7IFxuXG4gICAgY29uc3RydWN0b3IoY29tbW9uUHJvcHMsIGNyYWRsZUVsZW1lbnRzKSB7XG5cbiAgICAgICB0aGlzLmNvbW1vblByb3BzID0gY29tbW9uUHJvcHNcblxuICAgICAgIGxldCBlbGVtZW50cyA9IHRoaXMuZWxlbWVudHNcbiAgICAgICBlbGVtZW50cy5zcGluZVJlZiA9IGNyYWRsZUVsZW1lbnRzLnNwaW5lXG4gICAgICAgZWxlbWVudHMuaGVhZFJlZiA9IGNyYWRsZUVsZW1lbnRzLmhlYWRcbiAgICAgICBlbGVtZW50cy50YWlsUmVmID0gY3JhZGxlRWxlbWVudHMudGFpbFxuXG4gICAgICAgbGV0IHtkZWZhdWx0VmlzaWJsZUluZGV4LCBsaXN0c2l6ZSwgcGFkZGluZ30gPSB0aGlzLmNvbW1vblByb3BzLmNyYWRsZVByb3BzUmVmLmN1cnJlbnRcblxuICAgICAgIC8vIHByb2dyZXNzaW9uIG9mIHJlZmVyZW5jZXM6IHNjcm9sbC0+bmV4dFxuICAgICAgIHRoaXMuY3JhZGxlUmVmZXJlbmNlRGF0YS5zY3JvbGxJbXBsaWVkSXRlbUluZGV4UmVmZXJlbmNlID0gKE1hdGgubWluKGRlZmF1bHRWaXNpYmxlSW5kZXgsKGxpc3RzaXplIC0gMSkpIHx8IDApXG4gICAgICAgdGhpcy5jcmFkbGVSZWZlcmVuY2VEYXRhLnNjcm9sbEltcGxpZWRDcmFkbGVQb3NPZmZzZXQgPSBwYWRkaW5nXG4gICAgICAgdGhpcy5jcmFkbGVSZWZlcmVuY2VEYXRhLm5leHRJdGVtSW5kZXhSZWZlcmVuY2UgPSB0aGlzLmNyYWRsZVJlZmVyZW5jZURhdGEuc2Nyb2xsSW1wbGllZEl0ZW1JbmRleFJlZmVyZW5jZVxuICAgICAgIHRoaXMuY3JhZGxlUmVmZXJlbmNlRGF0YS5uZXh0Q3JhZGxlUG9zT2Zmc2V0ID0gdGhpcy5jcmFkbGVSZWZlcmVuY2VEYXRhLnNjcm9sbEltcGxpZWRDcmFkbGVQb3NPZmZzZXRcblxuICAgIH1cblxuICAgIGNvbW1vblByb3BzIC8vIHN0YW5kYXJkIGZvciBtYW5hZ2VycywgYnV0IG5vdCB1c2VkIGhlcmUgeWV0XG5cbiAgIC8qIFxuICAgICAgSXRlbUluZGV4UmVmZXJlbmNlIGlzIHRoZSBzZXF1ZW50aWFsIGluZGV4IG9mIGZpcnN0IGl0ZW0gb2YgdGhlIGNyYWRsZSB0YWlsXG4gICAgICBDcmFkbGVQb3NPZmZzZXQgaXMgdGhlIHBpeGVsIG9mZnNldCBvZiB0aGUgY3JhZGxlIHNwaW5lIGZyb20gdGhlIGVkZ2Ugb2YgdGhlIHZpZXdwb3J0XG4gICAgICBibG9ja1Njcm9sbFBvcyBpcyB0aGUgc2Nyb2xsUG9zIG9mIHRoZSBzY3JvbGxibG9jayBpbiByZWxhdGlvbiB0byB0aGUgdmlld3BvcnRcbiAgICAgIHByb2dyZXNzaW9uIGlzIHNjcm9sbCAtPiBuZXh0XG4gICAqL1xuICAgY3JhZGxlUmVmZXJlbmNlRGF0YSA9IHtcblxuICAgICAgc2Nyb2xsSW1wbGllZEl0ZW1JbmRleFJlZmVyZW5jZTpudWxsLFxuICAgICAgc2Nyb2xsSW1wbGllZENyYWRsZVBvc09mZnNldDpudWxsLFxuXG4gICAgICBuZXh0SXRlbUluZGV4UmVmZXJlbmNlOm51bGwsXG4gICAgICBuZXh0Q3JhZGxlUG9zT2Zmc2V0Om51bGwsXG5cbiAgICAgIC8vIHRvIHNldCBzY3JvbGxQb3MgYWZ0ZXIgZG9yZXBvc2l0aW9uLCBvclxuICAgICAgLy8gdG8gcmVzdG9yZSBzY3JvbGxUb3Agb3Igc2Nyb2xsTGVmdCBhZnRlciBjbG9iYmVyZWQgYnkgRE9NXG4gICAgICBibG9ja1Njcm9sbFBvczpudWxsLCBcbiAgICAgIGJsb2NrU2Nyb2xsUHJvcGVydHk6bnVsbCxcblxuICAgfVxuXG4gICBlbGVtZW50cyA9IHtcbiAgICAgIHNwaW5lUmVmOm51bGwsIFxuICAgICAgaGVhZFJlZjpudWxsLCBcbiAgICAgIHRhaWxSZWY6bnVsbFxuICAgfVxuXG59Il0sIm5hbWVzIjpbImNvbW1vblByb3BzIiwiY3JhZGxlRWxlbWVudHMiLCJzY3JvbGxJbXBsaWVkSXRlbUluZGV4UmVmZXJlbmNlIiwic2Nyb2xsSW1wbGllZENyYWRsZVBvc09mZnNldCIsIm5leHRJdGVtSW5kZXhSZWZlcmVuY2UiLCJuZXh0Q3JhZGxlUG9zT2Zmc2V0IiwiYmxvY2tTY3JvbGxQb3MiLCJibG9ja1Njcm9sbFByb3BlcnR5Iiwic3BpbmVSZWYiLCJoZWFkUmVmIiwidGFpbFJlZiIsImVsZW1lbnRzIiwic3BpbmUiLCJoZWFkIiwidGFpbCIsImNyYWRsZVByb3BzUmVmIiwiY3VycmVudCIsImRlZmF1bHRWaXNpYmxlSW5kZXgiLCJsaXN0c2l6ZSIsInBhZGRpbmciLCJjcmFkbGVSZWZlcmVuY2VEYXRhIiwiTWF0aCIsIm1pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/cradle/cradlemanager.tsx\n");

/***/ }),

/***/ "./src/cradle/interruptmanager.tsx":
/*!*****************************************!*\
  !*** ./src/cradle/interruptmanager.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(" // wingsmanager.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar resize_observer_1 = __webpack_require__(/*! @juggle/resize-observer */ \"./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n\nvar ResizeObserverClass = window['ResizeObserver'] || resize_observer_1.ResizeObserver;\n\nvar InterruptManager =\n/** @class */\nfunction () {\n  function InterruptManager(commonProps) {\n    var _this = this;\n\n    this.isTailCradleInView = false;\n    this.isHeadCradleInView = false; // TODO: stub\n\n    this.cradleresizeobservercallback = function (entries) {\n      if (_this.signals.pauseCradleResizeObserver) return;\n    };\n\n    this.cradleIntersectionObserverCallback = function (entries) {\n      var _a;\n\n      var signals = _this.signals;\n      var stateManager = _this.commonProps.managersRef.current.state;\n      var contentManager = _this.commonProps.managersRef.current.content;\n\n      if (signals.pauseCradleIntersectionObserver) {\n        // console.log('returning from intersectionobserver for PAUSE')\n        return;\n      }\n\n      for (var i = 0; i < entries.length; i++) {\n        var entry = entries[i];\n\n        if (entry.target.dataset.type == 'head') {\n          _this.isHeadCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n          ;\n        } else {\n          _this.isTailCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n          ;\n        }\n      }\n\n      _this.signals.repositioningRequired = !_this.isHeadCradleInView && !_this.isTailCradleInView;\n      var viewportData = _this.commonProps.viewportdataRef.current; // if (viewportData.index == 6) {\n      //     console.log('new repositioningRequired from intersection interrupt',this.signals.repositioningRequired)\n      // }\n\n      if (_this.signals.repositioningRequired) // start reposition if no other interrupts are underway\n        {\n          var cradleState = stateManager.cradleStateRef.current;\n\n          if (!viewportData.isResizing && !((_a = viewportData.portal) === null || _a === void 0 ? void 0 : _a.isReparenting) && !(cradleState == 'resized') && !(cradleState == 'repositioningA') && !(cradleState == 'repositioningB') && !(cradleState == 'finishreposition') && // !(cradleState == 'updatepositionreferences') &&\n          !(cradleState == 'doreposition') && !(cradleState == 'pivot') && !(cradleState == 'restorescrollposition')) {\n            var element = viewportData.elementref.current;\n\n            if (!element) {\n              console.log('viewport element not set in cradleIntersectionObserverCallback', _this.commonProps.cradlePropsRef.current.scrollerID, viewportData);\n              return;\n            }\n\n            var rect = element.getBoundingClientRect();\n            var top_1 = rect.top,\n                right = rect.right,\n                bottom = rect.bottom,\n                left = rect.left;\n            var width = right - left,\n                height = bottom - top_1;\n            viewportData.viewportDimensions = {\n              top: top_1,\n              right: right,\n              bottom: bottom,\n              left: left,\n              width: width,\n              height: height\n            }; // update for scrolltracker\n\n            signals.pauseCellObserver = true; // pauseCradleIntersectionObserverRef.current = true\n\n            var cradleContent = contentManager.content;\n            cradleContent.headModel = [];\n            cradleContent.tailModel = [];\n            cradleContent.headView = [];\n            cradleContent.tailView = [];\n            stateManager.setCradleState('startreposition');\n          }\n        }\n    }; // the async callback from IntersectionObserver.\n\n\n    this.cellintersectionobservercallback = function (entries) {\n      var testrootbounds = entries[0].rootBounds;\n\n      if (testrootbounds.width == 0 && testrootbounds.height == 0) {\n        // reparenting\n        return;\n      }\n\n      var viewportData = _this.commonProps.viewportdataRef.current; // if (viewportData.index == 6) {\n      //         console.log('cell intersection entries for ', viewportData.index, entries)\n      // }\n\n      var contentManager = _this.commonProps.managersRef.current.content;\n      var stateManager = _this.commonProps.managersRef.current.state;\n      var scrollManager = _this.commonProps.managersRef.current.scroll;\n      var movedentries = []; // console.log('ENTRIES', entries)\n      // debugger\n\n      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n        var entry = entries_1[_i]; // console.log('entry dataset',Object.assign({},entry.target.dataset))\n\n        if (entry.target.dataset.initialized) {\n          // console.log('entry initialized',entry.target.dataset.initialized)\n          movedentries.push(entry);\n        } else {\n          // console.log('INITIALIZING entry',entry.target.dataset.initialized)\n          entry.target.dataset.initialized = 'true'; // console.log('INITIALIZED entry',Object.assign({},entry.target.dataset))\n        }\n      } // TODO: moved this above initialization; no apparent difference to bug\n\n\n      if (_this.signals.pauseCellObserver) {\n        return;\n      } // if (viewportData.index == 6) {\n      // console.log('movedentries for ', viewportData.index, movedentries)\n      // }\n      // TODO: set scrollPositions.atLastUpdateCall\n\n\n      if (stateManager.isMountedRef.current) {\n        var scrollPositions = scrollManager.scrollPositions;\n\n        if (scrollPositions.start != scrollPositions.current || scrollPositions.current != scrollPositions.previous) {\n          scrollPositions.previousupdate = scrollPositions.currentupdate;\n          scrollPositions.currentupdate = scrollPositions.current;\n          contentManager.updateCradleContent(movedentries, 'cellObserver');\n        }\n      }\n    };\n\n    this.cradleResize = {\n      observer: null,\n      callback: this.cradleresizeobservercallback,\n      create: function create() {\n        _this.cradleResize.observer = new ResizeObserverClass(_this.cradleResize.callback);\n        return _this.cradleResize.observer;\n      }\n    };\n    this.cradleIntersect = {\n      observer: null,\n      callback: this.cradleIntersectionObserverCallback,\n      create: function create() {\n        var viewportData = _this.commonProps.viewportdataRef.current;\n        _this.cradleIntersect.observer = new IntersectionObserver(_this.cradleIntersect.callback, {\n          root: viewportData.elementref.current,\n          threshold: 0\n        });\n        return _this.cradleIntersect.observer;\n      }\n    };\n    this.cellIntersect = {\n      observer: null,\n      callback: null,\n      create: function create() {\n        var viewportData = _this.commonProps.viewportdataRef.current;\n        _this.cellIntersect.observer = new IntersectionObserver(_this.cellintersectionobservercallback, {\n          root: viewportData.elementref.current,\n          threshold: _this.commonProps.cradleConfigRef.current.cellObserverThreshold\n        });\n        return _this.cellIntersect.observer;\n      }\n    }; // states = {\n    // isRepositioning:false, // right now for debug only\n    // isResizing:false, // right now for debug only\n    // isReparenting:false, // right now not used\n    // repositioningRequired: false,\n    // }\n\n    this.signals = {\n      repositioningRequired: false,\n      pauseCellObserver: false,\n      pauseCradleIntersectionObserver: false,\n      pauseCradleResizeObserver: false,\n      pauseScrollingEffects: false\n    };\n    this.commonProps = commonProps;\n  }\n\n  return InterruptManager;\n}();\n\nexports[\"default\"] = InterruptManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/interruptmanager.tsx\n");

/***/ }),

/***/ "./src/cradle/scrollmanager.tsx":
/*!**************************************!*\
  !*** ./src/cradle/scrollmanager.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // scrollmanager.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar SCROLL_TIMEOUT_FOR_ONAFTERSCROLL = 500;\n\nvar ScrollManager =\n/** @class */\nfunction () {\n  function ScrollManager(commonProps) {\n    var _this = this;\n\n    this.scrollPositions = {\n      start: 0,\n      current: 0,\n      previous: 0,\n      previousupdate: 0,\n      currentupdate: 0\n    };\n    this._scrolltimerid = null;\n    this.isScrolling = false;\n\n    this.onScroll = function (e) {\n      var signals = _this.commonProps.managersRef.current.interrupts.signals; // if (signals.pauseScrollingEffects) {\n      //     return\n      // }\n\n      var viewportData = _this.commonProps.viewportdataRef.current;\n      var viewportElement = viewportData.elementref.current;\n      var cradleManager = _this.commonProps.managersRef.current.cradle;\n      var scrollPositionCurrent = _this.commonProps.cradlePropsRef.current.orientation == 'vertical' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n\n      if (!_this.isScrolling) {\n        _this.isScrolling = true;\n        _this.scrollPositions.start = scrollPositionCurrent;\n        _this.scrollPositions.currentupdate = scrollPositionCurrent;\n      }\n\n      if (scrollPositionCurrent < 0) {\n        // for Safari\n        return;\n      } // cradleManager.cradleReferenceData.blockScrollPos = scrollPositionCurrent // TODO: redundant?\n\n\n      _this.scrollPositions.previous = _this.scrollPositions.current;\n      _this.scrollPositions.current = scrollPositionCurrent; // if (viewportData.index == 6) {\n      //     console.log('running onScroll for index, scrollPositions',\n      //         viewportData.index,this.scrollPositions)\n      // }\n\n      clearTimeout(_this._scrolltimerid);\n\n      if (signals.pauseScrollingEffects) {\n        return;\n      }\n\n      var stateManager = _this.commonProps.managersRef.current.state;\n      var cradleState = stateManager.cradleStateRef.current;\n      var contentManager = _this.commonProps.managersRef.current.content;\n      var serviceManager = _this.commonProps.managersRef.current.service;\n\n      if (!viewportData.isResizing) {\n        if (cradleState == 'ready' || cradleState == 'repositioningA' || cradleState == 'repositioningB') {\n          if (cradleState == 'ready') {\n            var itemindex = cradleManager.cradleReferenceData.nextItemIndexReference;\n            var spineVisiblePosOffset = void 0;\n            var cradleElements = cradleManager.elements;\n\n            if (_this.commonProps.cradlePropsRef.current.orientation == 'vertical') {\n              spineVisiblePosOffset = cradleElements.spineRef.current.offsetTop - _this.commonProps.viewportdataRef.current.elementref.current.scrollTop;\n            } else {\n              spineVisiblePosOffset = cradleElements.spineRef.current.offsetLeft - _this.commonProps.viewportdataRef.current.elementref.current.scrollLeft;\n            }\n\n            cradleManager.cradleReferenceData.scrollImpliedItemIndexReference = itemindex;\n            cradleManager.cradleReferenceData.scrollImpliedCradlePosOffset = spineVisiblePosOffset;\n          }\n\n          if (cradleState == 'repositioningA' || cradleState == 'repositioningB') {\n            _this._setScrollReferenceIndexData();\n\n            if (cradleState == 'repositioningA') stateManager.setCradleState('repositioningB');\n          } // TODO: re-instate the following\n\n\n          serviceManager.serviceCalls.referenceIndexCallbackRef.current && serviceManager.serviceCalls.referenceIndexCallbackRef.current(cradleManager.cradleReferenceData.scrollImpliedItemIndexReference, 'scrolling', cradleState);\n        }\n      }\n\n      _this._scrolltimerid = setTimeout(function () {\n        _this._onAfterScroll();\n      }, SCROLL_TIMEOUT_FOR_ONAFTERSCROLL);\n      return false;\n    };\n\n    this._onAfterScroll = function () {\n      _this.isScrolling = false;\n      var stateManager = _this.commonProps.managersRef.current.state;\n      var contentManager = _this.commonProps.managersRef.current.content;\n      var viewportData = _this.commonProps.viewportdataRef.current;\n      var cradleState = stateManager.cradleStateRef.current; // if (viewportData.index == 6) {\n      //     console.log('running onAfterScroll for index, cradleState',\n      //         viewportData.index,this.scrollPositions, cradleState)\n      // }\n\n      switch (cradleState) {\n        case 'repositioningA':\n        case 'repositioningB':\n          {\n            stateManager.setCradleState('finishreposition');\n            break;\n          }\n\n        default:\n          {\n            if (_this.scrollPositions.start != _this.scrollPositions.current || _this.scrollPositions.current != _this.scrollPositions.previous) {\n              if (stateManager.isMountedRef.current) {\n                _this.updateReferenceData(); // contentManager.updateCradleContent([], 'endofscroll') // for Safari to compensate for overscroll\n\n              }\n            }\n          }\n      }\n    };\n\n    this.updateReferenceData = function () {\n      var stateManager = _this.commonProps.managersRef.current.state;\n      var cradleManager = _this.commonProps.managersRef.current.cradle;\n      var cradleProps = _this.commonProps.cradlePropsRef.current;\n      var viewportData = _this.commonProps.viewportdataRef.current; // const contentManager = this.commonProps.managersRef.current.content\n\n      if (!stateManager.isMountedRef.current) return;\n      var spineVisiblePosOffset;\n      var cradleElements = cradleManager.elements;\n      var viewportElement = viewportData.elementref.current;\n\n      if (cradleProps.orientation == 'vertical') {\n        spineVisiblePosOffset = cradleElements.spineRef.current.offsetTop - viewportElement.scrollTop;\n      } else {\n        spineVisiblePosOffset = cradleElements.spineRef.current.offsetLeft - viewportElement.scrollLeft;\n      }\n\n      cradleManager.cradleReferenceData.scrollImpliedCradlePosOffset = spineVisiblePosOffset;\n\n      if (!viewportData.isResizing) {\n        cradleManager.cradleReferenceData.nextItemIndexReference = cradleManager.cradleReferenceData.scrollImpliedItemIndexReference;\n        cradleManager.cradleReferenceData.nextCradlePosOffset = cradleManager.cradleReferenceData.scrollImpliedCradlePosOffset;\n\n        _this.updateBlockScrollPos();\n      }\n    };\n\n    this.updateBlockScrollPos = function () {\n      var cradleManager = _this.commonProps.managersRef.current.cradle;\n      var cradleProps = _this.commonProps.cradlePropsRef.current;\n      var viewportData = _this.commonProps.viewportdataRef.current;\n      var viewportElement = viewportData.elementref.current;\n\n      if (cradleProps.orientation == 'vertical') {\n        cradleManager.cradleReferenceData.blockScrollProperty = 'scrollTop';\n        cradleManager.cradleReferenceData.blockScrollPos = viewportElement.scrollTop;\n      } else {\n        cradleManager.cradleReferenceData.blockScrollProperty = 'scrollLeft';\n        cradleManager.cradleReferenceData.blockScrollPos = viewportElement.scrollLeft;\n      }\n    };\n\n    this._setScrollReferenceIndexData = function () {\n      var viewportData = _this.commonProps.viewportdataRef.current;\n      var cradleProps = _this.commonProps.cradlePropsRef.current;\n      var cradleConfig = _this.commonProps.cradleConfigRef.current;\n      var crosscount = cradleConfig.crosscount;\n      var viewportElement = viewportData.elementref.current;\n      var orientation = cradleProps.orientation,\n          listsize = cradleProps.listsize;\n      var scrollPos, cellLength;\n\n      if (orientation == 'vertical') {\n        scrollPos = viewportElement.scrollTop;\n        cellLength = cradleProps.cellHeight + cradleProps.gap;\n      } else {\n        scrollPos = viewportElement.scrollLeft;\n        cellLength = cradleProps.cellWidth + cradleProps.gap;\n      }\n\n      var referencescrolloffset = cellLength - scrollPos % cellLength;\n\n      if (referencescrolloffset == cellLength + cradleProps.padding) {\n        referencescrolloffset = 0;\n      }\n\n      var referencerowindex = Math.ceil((scrollPos - cradleProps.padding) / cellLength);\n      var spineReferenceIndex = referencerowindex * crosscount;\n      spineReferenceIndex = Math.min(spineReferenceIndex, listsize - 1);\n      var diff = spineReferenceIndex % crosscount;\n      spineReferenceIndex -= diff;\n      var referenceIndexData = {\n        index: spineReferenceIndex,\n        spineVisiblePosOffset: referencescrolloffset\n      };\n      if (spineReferenceIndex == 0) referencescrolloffset = 0; // defensive\n\n      var cradleManager = _this.commonProps.managersRef.current.cradle;\n      cradleManager.cradleReferenceData.scrollImpliedItemIndexReference = spineReferenceIndex;\n      cradleManager.cradleReferenceData.scrollImpliedCradlePosOffset = referencescrolloffset;\n    };\n\n    this.commonProps = commonProps;\n  }\n\n  return ScrollManager;\n}();\n\nexports[\"default\"] = ScrollManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/scrollmanager.tsx\n");

/***/ }),

/***/ "./src/cradle/servicemanager.tsx":
/*!***************************************!*\
  !*** ./src/cradle/servicemanager.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // servicemanager.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar ServiceManager =\n/** @class */\nfunction () {\n  function ServiceManager(commonProps, serviceCallsRef) {\n    var _this = this;\n\n    this.getVisibleList = function () {\n      var contentManager = _this.commonProps.managersRef.current.content;\n      var cradleContent = contentManager.content;\n      var viewportData = _this.commonProps.viewportdataRef.current;\n      var cradleManager = _this.commonProps.managersRef.current.cradle;\n      var cradleElements = cradleManager.elements;\n      return getVisibleItemsList({\n        itemElementMap: contentManager.itemElements,\n        viewportElement: viewportData.elementref.current,\n        cradleElements: cradleElements,\n        cradleProps: _this.commonProps.cradlePropsRef.current,\n        cradleContent: cradleContent\n      });\n    };\n\n    this.getContentList = function () {\n      var contentManager = _this.commonProps.managersRef.current.content;\n      var contentlist = Array.from(contentManager.itemElements);\n      contentlist.sort(function (a, b) {\n        return a[0] < b[0] ? -1 : 1;\n      });\n      return contentlist;\n    };\n\n    this.reload = function () {\n      var signals = _this.commonProps.managersRef.current.interrupts.signals;\n      var stateManager = _this.commonProps.managersRef.current.state;\n      signals.pauseCellObserver = true;\n      signals.pauseScrollingEffects = true;\n      stateManager.setCradleState('reload');\n    };\n\n    this.scrollToItem = function (index) {\n      var signals = _this.commonProps.managersRef.current.interrupts.signals;\n      var cradleManager = _this.commonProps.managersRef.current.cradle;\n      var stateManager = _this.commonProps.managersRef.current.state;\n      signals.pauseCellObserver = true;\n      signals.pauseScrollingEffects = true;\n      cradleManager.cradleReferenceData.nextItemIndexReference = index;\n      stateManager.setCradleState('doreposition');\n    };\n\n    this.commonProps = commonProps;\n    this.serviceCalls = serviceCallsRef.current;\n  }\n\n  return ServiceManager;\n}();\n\nexports[\"default\"] = ServiceManager;\n\nvar getVisibleItemsList = function getVisibleItemsList(_a) {\n  var itemElementMap = _a.itemElementMap,\n      viewportElement = _a.viewportElement,\n      cradleElements = _a.cradleElements,\n      cradleProps = _a.cradleProps,\n      cradleContent = _a.cradleContent;\n  var headElement = cradleElements.headRef.current;\n  var spineElement = cradleElements.spineRef.current;\n  var orientation = cradleProps.orientation;\n  var headlist = cradleContent.headView;\n  var itemlistindexes = Array.from(itemElementMap.keys());\n  itemlistindexes.sort(function (a, b) {\n    return a < b ? -1 : 1;\n  });\n  var headlistindexes = [];\n\n  for (var _i = 0, headlist_1 = headlist; _i < headlist_1.length; _i++) {\n    var item = headlist_1[_i];\n    headlistindexes.push(parseInt(item.props.index));\n  }\n\n  var list = [];\n  var cradleTop = headElement.offsetTop + spineElement.offsetTop,\n      cradleLeft = headElement.offsetLeft + spineElement.offsetLeft;\n  var scrollblockTopOffset = -viewportElement.scrollTop,\n      scrollblockLeftOffset = -viewportElement.scrollLeft,\n      viewportHeight = viewportElement.offsetHeight,\n      viewportWidth = viewportElement.offsetWidth,\n      viewportTopOffset = -scrollblockTopOffset,\n      viewportBottomOffset = -scrollblockTopOffset + viewportHeight;\n\n  for (var _b = 0, itemlistindexes_1 = itemlistindexes; _b < itemlistindexes_1.length; _b++) {\n    var index = itemlistindexes_1[_b];\n    var element = itemElementMap.get(index).current;\n    var inheadlist = headlistindexes.includes(index);\n    var top_1 = inheadlist ? element.offsetTop : (orientation == 'vertical' ? headElement.offsetHeight : 0) + element.offsetTop,\n        left = inheadlist ? element.offsetLeft : (orientation == 'horizontal' ? headElement.offsetWidth : 0) + element.offsetLeft,\n        width = element.offsetWidth,\n        height = element.offsetHeight,\n        right = left + width,\n        bottom = top_1 + height;\n    var itemTopOffset = scrollblockTopOffset + cradleTop + top_1,\n        // offset from top of viewport\n    itemBottomOffset = scrollblockTopOffset + cradleTop + bottom,\n        // offset from top of viewport\n    itemLeftOffset = scrollblockLeftOffset + cradleLeft + left,\n        itemRightOffset = scrollblockLeftOffset + cradleLeft + right;\n    var isVisible = false; // default\n\n    var topPortion = void 0,\n        bottomPortion = void 0,\n        leftPortion = void 0,\n        rightPortion = void 0;\n\n    if (itemTopOffset < 0 && itemBottomOffset > 0) {\n      orientation == 'vertical' && (isVisible = true);\n      bottomPortion = itemBottomOffset;\n      topPortion = bottomPortion - height;\n    } else if (itemTopOffset >= 0 && itemBottomOffset < viewportHeight) {\n      orientation == 'vertical' && (isVisible = true);\n      topPortion = height;\n      bottomPortion = 0;\n    } else if (itemTopOffset > 0 && itemTopOffset - viewportHeight < 0) {\n      orientation == 'vertical' && (isVisible = true);\n      topPortion = viewportHeight - itemTopOffset;\n      bottomPortion = topPortion - height;\n    } else {\n      if (orientation == 'vertical') continue;\n    }\n\n    if (itemLeftOffset < 0 && itemRightOffset > 0) {\n      orientation == 'horizontal' && (isVisible = true);\n      rightPortion = itemRightOffset;\n      leftPortion = rightPortion - width;\n    } else if (itemLeftOffset >= 0 && itemRightOffset < viewportWidth) {\n      orientation == 'horizontal' && (isVisible = true);\n      leftPortion = width;\n      rightPortion = 0;\n    } else if (itemLeftOffset > 0 && itemLeftOffset - viewportWidth < 0) {\n      orientation == 'horizontal' && (isVisible = true);\n      leftPortion = viewportWidth - itemLeftOffset;\n      rightPortion = leftPortion - width;\n    } else {\n      if (orientation == 'horizontal') continue;\n    }\n\n    var verticalRatio = topPortion > 0 ? topPortion / height : bottomPortion / height,\n        horizontalRatio = leftPortion > 0 ? leftPortion / width : rightPortion / height;\n    var itemData = {\n      index: index,\n      isVisible: isVisible,\n      top: top_1,\n      right: right,\n      bottom: bottom,\n      left: left,\n      width: width,\n      height: height,\n      itemTopOffset: itemTopOffset,\n      itemBottomOffset: itemBottomOffset,\n      topPortion: topPortion,\n      bottomPortion: bottomPortion,\n      itemLeftOffset: itemLeftOffset,\n      itemRightOffset: itemRightOffset,\n      leftPortion: leftPortion,\n      rightPortion: rightPortion,\n      verticalRatio: verticalRatio,\n      horizontalRatio: horizontalRatio\n    };\n    list.push(itemData);\n  }\n\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/servicemanager.tsx\n");

/***/ }),

/***/ "./src/cradle/statemanager.tsx":
/*!*************************************!*\
  !*** ./src/cradle/statemanager.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // statemanager.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar StateManager =\n/** @class */\nfunction () {\n  function StateManager(commonProps, cradleStateRef, setCradleState, isMountedRef) {\n    this.commonProps = commonProps;\n    this.setCradleState = setCradleState;\n    this.cradleStateRef = cradleStateRef;\n    this.isMountedRef = isMountedRef;\n  }\n\n  return StateManager;\n}();\n\nexports[\"default\"] = StateManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3N0YXRlbWFuYWdlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7QUFDQTs7Ozs7O0FBRUE7QUFBQTtBQUFBO0FBRUksd0JBQVlBLFdBQVosRUFBd0JDLGNBQXhCLEVBQXVDQyxjQUF2QyxFQUFzREMsWUFBdEQsRUFBa0U7QUFFL0QsU0FBS0gsV0FBTCxHQUFtQkEsV0FBbkI7QUFFQSxTQUFLRSxjQUFMLEdBQXNCQSxjQUF0QjtBQUNBLFNBQUtELGNBQUwsR0FBc0JBLGNBQXRCO0FBQ0EsU0FBS0UsWUFBTCxHQUFvQkEsWUFBcEI7QUFFRjs7QUFRTDtBQUFDLENBbEJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9jcmFkbGUvc3RhdGVtYW5hZ2VyLnRzeD9mMTBkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0YXRlbWFuYWdlci50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAyMSBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZU1hbmFnZXIge1xuXG4gICAgY29uc3RydWN0b3IoY29tbW9uUHJvcHMsY3JhZGxlU3RhdGVSZWYsc2V0Q3JhZGxlU3RhdGUsaXNNb3VudGVkUmVmKSB7XG5cbiAgICAgICB0aGlzLmNvbW1vblByb3BzID0gY29tbW9uUHJvcHNcblxuICAgICAgIHRoaXMuc2V0Q3JhZGxlU3RhdGUgPSBzZXRDcmFkbGVTdGF0ZVxuICAgICAgIHRoaXMuY3JhZGxlU3RhdGVSZWYgPSBjcmFkbGVTdGF0ZVJlZlxuICAgICAgIHRoaXMuaXNNb3VudGVkUmVmID0gaXNNb3VudGVkUmVmXG4gICAgICAgXG4gICAgfVxuXG4gICAgY29tbW9uUHJvcHNcblxuICAgIGNyYWRsZVN0YXRlUmVmXG4gICAgc2V0Q3JhZGxlU3RhdGVcbiAgICBpc01vdW50ZWRSZWZcblxufVxuIl0sIm5hbWVzIjpbImNvbW1vblByb3BzIiwiY3JhZGxlU3RhdGVSZWYiLCJzZXRDcmFkbGVTdGF0ZSIsImlzTW91bnRlZFJlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/cradle/statemanager.tsx\n");

/***/ }),

/***/ "./src/cradle/stylesmanager.tsx":
/*!**************************************!*\
  !*** ./src/cradle/stylesmanager.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval(" // stylesmanager.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar StylesManager =\n/** @class */\nfunction () {\n  function StylesManager(commonProps) {\n    var _this = this;\n\n    this.setCradleStyles = function (_a) {\n      var orientation = _a.orientation,\n          cellHeight = _a.cellHeight,\n          cellWidth = _a.cellWidth,\n          gap = _a.gap,\n          padding = _a.padding,\n          crosscount = _a.crosscount,\n          viewportheight = _a.viewportheight,\n          viewportwidth = _a.viewportwidth,\n          userstyles = _a.userstyles; // TODO: change 'cradle' to 'head' and 'tail' for more granularity\n\n      var headstyles = _this.getHeadStyles(gap, padding, orientation, userstyles === null || userstyles === void 0 ? void 0 : userstyles.cradle);\n\n      var tailstyles = _this.getTailStyles(gap, padding, orientation, userstyles === null || userstyles === void 0 ? void 0 : userstyles.cradle);\n\n      var spinestyles = _this.getSpineStyles(gap, padding, orientation, userstyles === null || userstyles === void 0 ? void 0 : userstyles.spine);\n\n      headstyles.gridGap = gap + 'px';\n      tailstyles.gridGap = gap + 'px';\n\n      if (orientation == 'horizontal') {\n        headstyles.padding = \"\".concat(padding, \"px 0 \").concat(padding, \"px \").concat(padding, \"px\");\n        headstyles.width = 'auto';\n        headstyles.height = '100%';\n        headstyles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n        //     sets length of horiz cradle items in one line (row), not multi-row config\n\n        headstyles.gridTemplateRows = cellHeight ? \"repeat(\".concat(crosscount, \", minmax(\").concat(cellHeight, \"px, 1fr))\") : 'auto'; // headstyles.gridTemplateRows = cellHeight?`repeat(auto-fit, minmax(${cellHeight}px, 1fr))`:'auto'\n\n        headstyles.gridTemplateColumns = 'none';\n        tailstyles.padding = \"\".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px 0\");\n        tailstyles.width = 'auto';\n        tailstyles.height = '100%';\n        tailstyles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n        //     sets length of horiz cradle items in one line (row), not multi-row config\n\n        tailstyles.gridTemplateRows = cellHeight ? \"repeat(\".concat(crosscount, \", minmax(\").concat(cellHeight, \"px, 1fr))\") : 'auto'; // tailstyles.gridTemplateRows = cellHeight?`repeat(auto-fit, minmax(${cellHeight}px, 1fr))`:'auto'\n\n        tailstyles.gridTemplateColumns = 'none';\n      } else if (orientation == 'vertical') {\n        headstyles.padding = \"\".concat(padding, \"px \").concat(padding, \"px 0 \").concat(padding, \"px\");\n        headstyles.width = '100%';\n        headstyles.height = 'auto';\n        headstyles.gridAutoFlow = 'row';\n        headstyles.gridTemplateRows = 'none';\n        headstyles.gridTemplateColumns = cellWidth ? \"repeat(auto-fit, minmax(\".concat(cellWidth, \"px, 1fr))\") : 'auto';\n        tailstyles.padding = \"0 \".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px\");\n        tailstyles.width = '100%';\n        tailstyles.height = 'auto';\n        tailstyles.gridAutoFlow = 'row';\n        tailstyles.gridTemplateRows = 'none';\n        tailstyles.gridTemplateColumns = cellWidth ? \"repeat(auto-fit, minmax(\".concat(cellWidth, \"px, 1fr))\") : 'auto';\n      }\n\n      return [headstyles, tailstyles, spinestyles];\n    };\n\n    this.getHeadStyles = function (gap, padding, orientation, userheadstyles) {\n      var bottom, left, top, right;\n\n      if (orientation == 'vertical') {\n        bottom = 0;\n        left = 0;\n        right = 0;\n        top = 'auto';\n      } else {\n        bottom = 0;\n        left = 'auto';\n        right = 0;\n        top = 0;\n      }\n\n      return __assign(__assign({}, {\n        position: 'absolute',\n        backgroundColor: 'blue',\n        display: 'grid',\n        gridGap: gap + 'px',\n        padding: padding + 'px',\n        justifyContent: 'start',\n        alignContent: 'start',\n        boxSizing: 'border-box',\n        bottom: bottom,\n        left: left,\n        right: right,\n        top: top\n      }), userheadstyles);\n    };\n\n    this.getTailStyles = function (gap, padding, orientation, usertailstyles) {\n      var bottom, left, top, right;\n\n      if (orientation == 'vertical') {\n        bottom = 'auto';\n        left = 0;\n        right = 0;\n        top = 0;\n      } else {\n        bottom = 0;\n        left = 0;\n        right = 'auto';\n        top = 0;\n      }\n\n      return __assign(__assign({}, {\n        position: 'absolute',\n        backgroundColor: 'blue',\n        display: 'grid',\n        gridGap: gap + 'px',\n        padding: padding + 'px',\n        justifyContent: 'start',\n        alignContent: 'start',\n        boxSizing: 'border-box',\n        top: top,\n        left: left,\n        right: right,\n        bottom: bottom\n      }), usertailstyles);\n    };\n\n    this.getSpineStyles = function (gap, padding, orientation, userspinestyles) {\n      var top, left, width, height; // for spine\n\n      if (orientation == 'vertical') {\n        top = padding + 'px';\n        left = 'auto';\n        width = '100%';\n        height = 'auto';\n      } else {\n        top = 'auto';\n        left = padding + 'px';\n        width = 0;\n        height = '100%';\n      }\n\n      return __assign(__assign({}, {\n        position: 'relative',\n        top: top,\n        left: left,\n        width: width,\n        height: height\n      }), userspinestyles);\n    };\n\n    this.commonProps = commonProps;\n  }\n\n  return StylesManager;\n}();\n\nexports[\"default\"] = StylesManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/stylesmanager.tsx\n");

/***/ }),

/***/ "./src/infinitegridscroller.tsx":
/*!**************************************!*\
  !*** ./src/infinitegridscroller.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // infinitegridscroller.tsx\n// copyright (c) 2019-2021 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    BUG: reposition chip appears outside viewport when list partly hidden\n    BUG: repositioningA is broken.\n    TODO:\n    - reload from/to for insertions and substitutions\n    - provide user with isReparenting flag to be able to reset scroll\n    - check use of useCallback\n    - resize triggered by root only, unless variable\n    - intersection applied to cradle only\n    - test for two root portals\n    - nested list overflows port boundaries on android FF\n    - promote system constants to 'advanced' parameter, eg RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE\n    - calc minwidth by form factor\n    - review scroller-frame for appropriate dimensions - s/b inset:0;position:absolute\n    - add grid-template-rows: max-content to parent for safari issue grid-auto-flow: column not filling column\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __importDefault(__webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\"));\n\nvar scrollblock_1 = __importDefault(__webpack_require__(/*! ./scrollblock */ \"./src/scrollblock.tsx\"));\n\nvar cradle_1 = __importDefault(__webpack_require__(/*! ./cradle */ \"./src/cradle.tsx\"));\n\nvar globalScrollerID = 0; // ===================================[ INITIALIZE ]===========================\n\n/*\n    The job of InfiniteGridScroller is to pass parameters to dependents.\n    Viewport contains the scrollblock, fullsize for adjusted cell height/width, which in turn contains the cradle\n        - a component that contains CellShells (which contain displayed items or transitional placeholders).\n    The CellShells are skeletons which contain the host content components.\n\n    Host content is created in a portal cache (via PortalAgent) and then portal'd to its host CellShell\n\n    Scrollblock virtually represents the entirety of the list, and is the scroller\n\n    Cradle contains the list items, and is 'virtualized' -- it appears as\n      though it is the full scrollblock, but in fact it is only slightly larger than\n      the viewport.\n    - individual items are framed by CellShell, managed by Cradle\n\n    Overall the infinitegridscroller manages the (often asynchronous) interactions of the\n    components of the mechanism\n*/\n\nvar InfiniteGridScroller = function InfiniteGridScroller(props) {\n  // empty parameters use defaults\n  var orientation = props.orientation,\n      // vertical or horizontal\n  gap = props.gap,\n      // space between grid cells, not including the leading and trailing edges\n  padding = props.padding,\n      // the space between the items and the viewport, applied to the cradle\n  cellHeight = props.cellHeight,\n      // the outer pixel height - literal for vertical; approximate for horizontal\n  cellWidth = props.cellWidth,\n      // the outer pixel width - literal for horizontal; approximate for vertical\n  runwaySize = props.runwaySize,\n      // the number of items outside the view of each side of the viewport \n  // -- gives time to assemble before display\n  listSize = props.listSize,\n      // the exact number of the size of the virtual list; will eventually be changable.\n  defaultVisibleIndex = props.indexOffset,\n      // the 0-based starting index of the list, when first loaded\n  getItem = props.getItem,\n      // function provided by host - parameter is index number, set by system; return value is \n  // host-selected component or promise of a component\n  functions = props.functions,\n      // properties with direct access to some component utilites, optional\n  placeholder = props.placeholder,\n      // a sparse component to stand in for content until the content arrives; \n  // optional, replaces default placeholder\n  styles = props.styles,\n      // passive style over-rides (eg. color, opacity); has \n  // properties viewport, scrollblock, cradle, or scrolltracker\n  // to come...\n  // cache = \"preload\" or \"keepload\" or \"none\"\n  // dense, // boolean (only with preload)\n  // advanced, technical settings like useRequestIdleCallback, and RequestIdleCallbackTimeout\n  layout = props.layout,\n      // uniform, variable\n  scrollerName = props.scrollerName; // for mount\n\n  var scrollerSessionIDRef = (0, react_1.useRef)(globalScrollerID); // increment scrollerSessionID\n\n  (0, react_1.useEffect)(function () {\n    globalScrollerID++;\n  }, []); // set defaults\n\n  functions !== null && functions !== void 0 ? functions : functions = {};\n  gap !== null && gap !== void 0 ? gap : gap = 0;\n  padding !== null && padding !== void 0 ? padding : padding = 0;\n  runwaySize !== null && runwaySize !== void 0 ? runwaySize : runwaySize = 3;\n  defaultVisibleIndex !== null && defaultVisibleIndex !== void 0 ? defaultVisibleIndex : defaultVisibleIndex = 0;\n  listSize !== null && listSize !== void 0 ? listSize : listSize = 0;\n  layout !== null && layout !== void 0 ? layout : layout = 'uniform'; // constraints\n\n  defaultVisibleIndex = Math.max(0, defaultVisibleIndex); // non-negative\n\n  defaultVisibleIndex = Math.min(listSize, defaultVisibleIndex); // not larger than list\n\n  if (!['horizontal', 'vertical'].includes(orientation)) {\n    orientation = 'vertical';\n  }\n\n  return react_1[\"default\"].createElement(viewport_1[\"default\"], {\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    gap: gap,\n    padding: padding,\n    orientation: orientation,\n    functions: functions,\n    styles: styles,\n    scrollerID: scrollerSessionIDRef.current\n  }, react_1[\"default\"].createElement(scrollblock_1[\"default\"], {\n    listsize: listSize,\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    gap: gap,\n    padding: padding,\n    orientation: orientation,\n    functions: functions,\n    styles: styles,\n    scrollerID: scrollerSessionIDRef.current\n  }, react_1[\"default\"].createElement(cradle_1[\"default\"], {\n    listsize: listSize,\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    gap: gap,\n    padding: padding,\n    orientation: orientation,\n    functions: functions,\n    styles: styles,\n    scrollerID: scrollerSessionIDRef.current,\n    scrollerName: scrollerName,\n    defaultVisibleIndex: defaultVisibleIndex,\n    getItem: getItem,\n    placeholder: placeholder,\n    runwaycount: runwaySize\n  })));\n};\n\nexports[\"default\"] = InfiniteGridScroller;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/infinitegridscroller.tsx\n");

/***/ }),

/***/ "./src/placeholder.tsx":
/*!*****************************!*\
  !*** ./src/placeholder.tsx ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // placeholder.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar Placeholder = function Placeholder(_a) {\n  var index = _a.index,\n      listsize = _a.listsize,\n      error = _a.error;\n  var stylesRef = (0, react_1.useRef)({\n    position: 'relative',\n    boxSizing: 'border-box',\n    backgroundColor: 'cyan',\n    border: '2px solid black',\n    height: '100%',\n    width: '100%'\n  });\n  var itemStylesRef = (0, react_1.useRef)({\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: '3px',\n    opacity: .5,\n    borderRadius: '8px',\n    backgroundColor: 'white',\n    margin: '3px',\n    fontSize: 'smaller'\n  });\n  return react_1[\"default\"].createElement(\"div\", {\n    style: stylesRef.current\n  }, !error ? react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, index + 1, \"/\", listsize) : react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, \"item is not available at this time\"));\n};\n\nexports[\"default\"] = Placeholder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGxhY2Vob2xkZXIudHN4LmpzIiwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQSxJQUFNQSxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFDQyxFQUFELEVBQXlCO01BQXZCQyxLQUFLO01BQUVDLFFBQVE7TUFBRUMsS0FBSztBQUV4QyxNQUFNQyxTQUFTLEdBQUcsb0JBQU87QUFDckJDLFlBQVEsRUFBQyxVQURZO0FBRXJCQyxhQUFTLEVBQUMsWUFGVztBQUdyQkMsbUJBQWUsRUFBQyxNQUhLO0FBSXJCQyxVQUFNLEVBQUMsaUJBSmM7QUFLckJDLFVBQU0sRUFBQyxNQUxjO0FBTXJCQyxTQUFLLEVBQUM7QUFOZSxHQUFQLENBQWxCO0FBUUEsTUFBTUMsYUFBYSxHQUFHLG9CQUNsQjtBQUNJTixZQUFRLEVBQUMsVUFEYjtBQUVJTyxPQUFHLEVBQUMsQ0FGUjtBQUdJQyxRQUFJLEVBQUMsQ0FIVDtBQUlJQyxXQUFPLEVBQUMsS0FKWjtBQUtJQyxXQUFPLEVBQUMsRUFMWjtBQU1JQyxnQkFBWSxFQUFDLEtBTmpCO0FBT0lULG1CQUFlLEVBQUMsT0FQcEI7QUFRSVUsVUFBTSxFQUFDLEtBUlg7QUFTSUMsWUFBUSxFQUFDO0FBVGIsR0FEa0IsQ0FBdEI7QUFjQSxTQUFPQztBQUFLQyxTQUFLLEVBQUloQixTQUFTLENBQUNpQjtBQUF4QixLQUNELENBQUNsQixLQUFELEdBQ0VnQjtBQUFLQyxTQUFLLEVBQUlULGFBQWEsQ0FBQ1U7QUFBNUIsS0FBc0NwQixLQUFLLEdBQUcsQ0FBOUMsT0FBa0RDLFFBQWxELENBREYsR0FFRWlCO0FBQUtDLFNBQUssRUFBSVQsYUFBYSxDQUFDVTtBQUE1QixLQUFtQyxvQ0FBbkMsQ0FIRCxDQUFQO0FBT0gsQ0EvQkQ7O0FBaUNBQyxrQkFBQUEsR0FBZXZCLFdBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vc3JjL3BsYWNlaG9sZGVyLnRzeD8xMTMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBsYWNlaG9sZGVyLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDIwIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbmltcG9ydCBSZWFjdCwge3VzZVJlZiwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcblxuY29uc3QgUGxhY2Vob2xkZXIgPSAoe2luZGV4LCBsaXN0c2l6ZSwgZXJyb3J9KSA9PiB7XG5cbiAgICBjb25zdCBzdHlsZXNSZWYgPSB1c2VSZWYoe1xuICAgICAgICBwb3NpdGlvbjoncmVsYXRpdmUnLFxuICAgICAgICBib3hTaXppbmc6J2JvcmRlci1ib3gnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6J2N5YW4nLFxuICAgICAgICBib3JkZXI6JzJweCBzb2xpZCBibGFjaycsXG4gICAgICAgIGhlaWdodDonMTAwJScsXG4gICAgICAgIHdpZHRoOicxMDAlJ1xuICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcylcbiAgICBjb25zdCBpdGVtU3R5bGVzUmVmID0gdXNlUmVmKFxuICAgICAgICB7XG4gICAgICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOjAsXG4gICAgICAgICAgICBsZWZ0OjAsXG4gICAgICAgICAgICBwYWRkaW5nOiczcHgnLFxuICAgICAgICAgICAgb3BhY2l0eTouNSxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czonOHB4JyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjond2hpdGUnLCBcbiAgICAgICAgICAgIG1hcmdpbjonM3B4JyxcbiAgICAgICAgICAgIGZvbnRTaXplOidzbWFsbGVyJyxcbiAgICAgICAgfSBhcyBSZWFjdC5DU1NQcm9wZXJ0aWVzXG4gICAgKVxuXG4gICAgcmV0dXJuIDxkaXYgc3R5bGUgPSB7c3R5bGVzUmVmLmN1cnJlbnR9PlxuICAgICAgICB7ICFlcnJvcj9cbiAgICAgICAgICAgIDxkaXYgc3R5bGUgPSB7aXRlbVN0eWxlc1JlZi5jdXJyZW50fT57aW5kZXggKyAxfS97bGlzdHNpemV9PC9kaXY+OlxuICAgICAgICAgICAgPGRpdiBzdHlsZSA9IHtpdGVtU3R5bGVzUmVmLmN1cnJlbnR9Pml0ZW0gaXMgbm90IGF2YWlsYWJsZSBhdCB0aGlzIHRpbWU8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICA8L2Rpdj5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGxhY2Vob2xkZXIiXSwibmFtZXMiOlsiUGxhY2Vob2xkZXIiLCJfYSIsImluZGV4IiwibGlzdHNpemUiLCJlcnJvciIsInN0eWxlc1JlZiIsInBvc2l0aW9uIiwiYm94U2l6aW5nIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiaGVpZ2h0Iiwid2lkdGgiLCJpdGVtU3R5bGVzUmVmIiwidG9wIiwibGVmdCIsInBhZGRpbmciLCJvcGFjaXR5IiwiYm9yZGVyUmFkaXVzIiwibWFyZ2luIiwiZm9udFNpemUiLCJyZWFjdF8xIiwic3R5bGUiLCJjdXJyZW50IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/placeholder.tsx\n");

/***/ }),

/***/ "./src/portalmanager.tsx":
/*!*******************************!*\
  !*** ./src/portalmanager.tsx ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // portalmanager.tsx\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PortalList = exports.PortalWrapper = exports.PortalManager = void 0;\n/*\n    The infinite list scroller stores user cell data in a central hidden portal cache for each\n    infinitegridscroller root, from whence the data is pulled into the relevant CellShell for display\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ \"./node_modules/react-reverse-portal/dist/web/index.js\"); // global scroller data, organized by session scrollerID\n\n\nvar PortalManager =\n/** @class */\nfunction () {\n  function PortalManager() {\n    //===========================[ REPOSITORY AND LIST MANAGEMENT ]==================================\n    var _this = this;\n\n    this.scrollerData = {\n      setListState: null,\n      modified: false,\n      portalMetadataMap: new Map(),\n      portalMap: new Map(),\n      portalList: null\n    }; // set state of the PortalList component of the scroller to trigger render\n\n    this.renderPortalList = function () {\n      if (_this.scrollerData.modified) {\n        _this.scrollerData.portalList = Array.from(_this.scrollerData.portalMap.values());\n        _this.scrollerData.modified = false;\n      }\n\n      _this.scrollerData.setListState(); // trigger display update\n\n    };\n  } // initialize scroller repository\n\n\n  PortalManager.prototype.resetScrollerPortalRepository = function () {\n    // keep the setListState callback\n    this.scrollerData.portalMap.clear();\n    this.scrollerData.portalMetadataMap.clear();\n    this.scrollerData.portalList = null;\n    this.scrollerData.modified = false;\n  }; // ==========================[ INDIVIDUAL PORTAL MANAGEMENT ]============================\n  // add a portal list item. The index is the scroller's portal dataset index\n\n\n  PortalManager.prototype.fetchOrCreatePortal = function (index, content) {\n    if (this.hasPortal(index)) {\n      return this.getPortal(index);\n    } // if not found, create new portal\n\n\n    var _a = createInPortal(content, index),\n        inportal = _a[0],\n        reverseportal = _a[1];\n\n    this.scrollerData.portalMap.set(index, react_1[\"default\"].createElement(exports.PortalWrapper, {\n      inportal: inportal,\n      key: index,\n      index: index\n    }));\n    this.scrollerData.modified = true;\n    var portalMetadata = {\n      reverseportal: reverseportal,\n      isReparenting: false,\n      hasusercontent: false\n    };\n    this.scrollerData.portalMetadataMap.set(index, portalMetadata);\n    this.renderPortalList();\n    return portalMetadata;\n  }; // update the content of a portal list item\n\n\n  PortalManager.prototype.updatePortal = function (index, content) {\n    var portalMetadata = this.getPortal(index);\n    var portalComponent = updateInPortal(content, portalMetadata.reverseportal);\n    this.scrollerData.portalMap.set(index, react_1[\"default\"].createElement(exports.PortalWrapper, {\n      inportal: portalComponent,\n      key: index,\n      index: index\n    }));\n    this.scrollerData.modified = true;\n    this.renderPortalList();\n    return portalMetadata;\n  }; // delete a portal list item\n\n\n  PortalManager.prototype.deletePortal = function (index) {\n    this.scrollerData.portalMetadataMap[\"delete\"](index);\n    this.scrollerData.portalMap[\"delete\"](index);\n    this.scrollerData.modified = true;\n  }; // query existence of a portal list item\n\n\n  PortalManager.prototype.hasPortal = function (index) {\n    return this.scrollerData.portalMetadataMap.has(index);\n  }; // get a portal list item's meta data\n\n\n  PortalManager.prototype.getPortal = function (index) {\n    return this.scrollerData.portalMetadataMap.get(index);\n  };\n\n  return PortalManager;\n}();\n\nexports.PortalManager = PortalManager; // ==========================[ Utility functions ]============================\n// get a react-reverse-portal InPortal component, with its metadata\n// with user content and container\n\nvar createInPortal = function createInPortal(content, index) {\n  // console.log('creating inportal index, scrollerID',index,scrollerID)\n  var reversePortal = (0, react_reverse_portal_1.createHtmlPortalNode)(); // reversePortal.element = container\n\n  var container = reversePortal.element;\n  container.style.inset = '0px';\n  container.style.position = 'absolute';\n  container.dataset.type = 'portalcontainer';\n  container.dataset.index = index; // container.dataset.scrollerid = scrollerID\n\n  container.setAttribute('key', index);\n  return [react_1[\"default\"].createElement(react_reverse_portal_1.InPortal, {\n    node: reversePortal\n  }, content), reversePortal];\n}; // update an InPortal component's user content\n\n\nvar updateInPortal = function updateInPortal(content, reversePortal) {\n  return react_1[\"default\"].createElement(react_reverse_portal_1.InPortal, {\n    node: reversePortal\n  }, content);\n}; // ========================[ Utility components ]==============================\n\n\nvar wrapperstyle = {\n  display: 'none'\n}; // static; should take same dimensions as container CellShell\n// hidden portal wrapper for clarity and usage of conventional react relisting services\n\nvar PortalWrapper = function PortalWrapper(_a) {\n  var inportal = _a.inportal,\n      index = _a.index;\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'portalwrapper',\n    \"data-index\": index,\n    style: wrapperstyle,\n    key: index\n  }, inportal);\n};\n\nexports.PortalWrapper = PortalWrapper; // portal list component for rapid relisting of updates, using external callback for set state\n\nvar PortalList = function PortalList(_a) {\n  var scrollerData = _a.scrollerData;\n\n  var _b = (0, react_1.useState)(null),\n      portalList = _b[0],\n      setPortalList = _b[1];\n\n  var isMountedRef = (0, react_1.useRef)(true);\n  (0, react_1.useEffect)(function () {\n    scrollerData.setListState = function () {\n      isMountedRef.current && setPortalList(scrollerData.portalList);\n    };\n\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  return portalList;\n};\n\nexports.PortalList = PortalList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcG9ydGFsbWFuYWdlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7Ozs7QUFLQTs7QUFFQSxzSSxDQUVBOzs7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUVJO0FBRko7O0FBSUksd0JBQWU7QUFDWEEsa0JBQVksRUFBQyxJQURGO0FBRVhDLGNBQVEsRUFBQyxLQUZFO0FBR1hDLHVCQUFpQixFQUFDLElBQUlDLEdBQUosRUFIUDtBQUlYQyxlQUFTLEVBQUMsSUFBSUQsR0FBSixFQUpDO0FBS1hFLGdCQUFVLEVBQUM7QUFMQSxLQUFmLENBSkosQ0F3Qkk7O0FBQ0EsNEJBQW1CO0FBRWYsVUFBSUMsS0FBSSxDQUFDQyxZQUFMLENBQWtCTixRQUF0QixFQUFnQztBQUM1QkssYUFBSSxDQUFDQyxZQUFMLENBQWtCRixVQUFsQixHQUErQkcsS0FBSyxDQUFDQyxJQUFOLENBQVdILEtBQUksQ0FBQ0MsWUFBTCxDQUFrQkgsU0FBbEIsQ0FBNEJNLE1BQTVCLEVBQVgsQ0FBL0I7QUFDQUosYUFBSSxDQUFDQyxZQUFMLENBQWtCTixRQUFsQixHQUE2QixLQUE3QjtBQUNIOztBQUVESyxXQUFJLENBQUNDLFlBQUwsQ0FBa0JQLFlBQWxCLEdBUGUsQ0FPa0I7O0FBRXBDLEtBVEQ7QUE4RUgsR0F2R0QsQ0FZSTs7O0FBRUFXO0FBRUk7QUFDQSxTQUFLSixZQUFMLENBQWtCSCxTQUFsQixDQUE0QlEsS0FBNUI7QUFDQSxTQUFLTCxZQUFMLENBQWtCTCxpQkFBbEIsQ0FBb0NVLEtBQXBDO0FBQ0EsU0FBS0wsWUFBTCxDQUFrQkYsVUFBbEIsR0FBK0IsSUFBL0I7QUFDQSxTQUFLRSxZQUFMLENBQWtCTixRQUFsQixHQUE2QixLQUE3QjtBQUVILEdBUkQsQ0FkSixDQW9DSTtBQUVBOzs7QUFDQVUsMERBQW9CRSxLQUFwQixFQUEyQkMsT0FBM0IsRUFBa0M7QUFFOUIsUUFBSSxLQUFLQyxTQUFMLENBQWVGLEtBQWYsQ0FBSixFQUEyQjtBQUN2QixhQUFPLEtBQUtHLFNBQUwsQ0FBZUgsS0FBZixDQUFQO0FBQ0gsS0FKNkIsQ0FNOUI7OztBQUVNLGFBQTJCSSxjQUFjLENBQUNILE9BQUQsRUFBVUQsS0FBVixDQUF6QztBQUFBLFFBQUNLLFFBQVEsUUFBVDtBQUFBLFFBQVVDLGFBQWEsUUFBdkI7O0FBRU4sU0FBS1osWUFBTCxDQUFrQkgsU0FBbEIsQ0FBNEJnQixHQUE1QixDQUFnQ1AsS0FBaEMsRUFBc0NRLGlDQUFDQyxxQkFBRCxFQUFjO0FBQUNKLGNBQVEsRUFBSUEsUUFBYjtBQUF1QkssU0FBRyxFQUFJVixLQUE5QjtBQUFxQ0EsV0FBSyxFQUFJQTtBQUE5QyxLQUFkLENBQXRDO0FBQ0EsU0FBS04sWUFBTCxDQUFrQk4sUUFBbEIsR0FBNkIsSUFBN0I7QUFFQSxRQUFNdUIsY0FBYyxHQUFHO0FBQ25CTCxtQkFBYSxlQURNO0FBRW5CTSxtQkFBYSxFQUFDLEtBRks7QUFHbkJDLG9CQUFjLEVBQUM7QUFISSxLQUF2QjtBQU1BLFNBQUtuQixZQUFMLENBQWtCTCxpQkFBbEIsQ0FBb0NrQixHQUFwQyxDQUF3Q1AsS0FBeEMsRUFBK0NXLGNBQS9DO0FBRUEsU0FBS0csZ0JBQUw7QUFFQSxXQUFPSCxjQUFQO0FBRUgsR0F6QkQsQ0F2Q0osQ0FrRUk7OztBQUNBYixtREFBYUUsS0FBYixFQUFvQkMsT0FBcEIsRUFBMkI7QUFDdkIsUUFBTVUsY0FBYyxHQUFHLEtBQUtSLFNBQUwsQ0FBZUgsS0FBZixDQUF2QjtBQUVBLFFBQU1lLGVBQWUsR0FBR0MsY0FBYyxDQUFDZixPQUFELEVBQVVVLGNBQWMsQ0FBQ0wsYUFBekIsQ0FBdEM7QUFFQSxTQUFLWixZQUFMLENBQWtCSCxTQUFsQixDQUE0QmdCLEdBQTVCLENBQWdDUCxLQUFoQyxFQUFzQ1EsaUNBQUNDLHFCQUFELEVBQWM7QUFBQ0osY0FBUSxFQUFJVSxlQUFiO0FBQThCTCxTQUFHLEVBQUlWLEtBQXJDO0FBQTRDQSxXQUFLLEVBQUlBO0FBQXJELEtBQWQsQ0FBdEM7QUFDQSxTQUFLTixZQUFMLENBQWtCTixRQUFsQixHQUE2QixJQUE3QjtBQUVBLFNBQUswQixnQkFBTDtBQUVBLFdBQU9ILGNBQVA7QUFDSCxHQVhELENBbkVKLENBZ0ZJOzs7QUFDQWIsbURBQWFFLEtBQWIsRUFBa0I7QUFFZCxTQUFLTixZQUFMLENBQWtCTCxpQkFBbEIsV0FBMkNXLEtBQTNDO0FBQ0EsU0FBS04sWUFBTCxDQUFrQkgsU0FBbEIsV0FBbUNTLEtBQW5DO0FBQ0EsU0FBS04sWUFBTCxDQUFrQk4sUUFBbEIsR0FBNkIsSUFBN0I7QUFFSCxHQU5ELENBakZKLENBeUZJOzs7QUFDQVUsZ0RBQVVFLEtBQVYsRUFBZTtBQUVYLFdBQU8sS0FBS04sWUFBTCxDQUFrQkwsaUJBQWxCLENBQW9DNEIsR0FBcEMsQ0FBd0NqQixLQUF4QyxDQUFQO0FBRUgsR0FKRCxDQTFGSixDQWdHSTs7O0FBQ0FGLGdEQUFVRSxLQUFWLEVBQWU7QUFFWCxXQUFPLEtBQUtOLFlBQUwsQ0FBa0JMLGlCQUFsQixDQUFvQzZCLEdBQXBDLENBQXdDbEIsS0FBeEMsQ0FBUDtBQUVILEdBSkQ7O0FBTUo7QUFBQyxDQXZHRDs7QUFBYVMscUJBQUFBLGlCLENBeUdiO0FBRUE7QUFDQTs7QUFDQSxJQUFNTCxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQUNILE9BQUQsRUFBVUQsS0FBVixFQUFlO0FBRWxDO0FBQ0EsTUFBSW1CLGFBQWEsR0FBRyxrREFBcEIsQ0FIa0MsQ0FJbEM7O0FBQ0EsTUFBSUMsU0FBUyxHQUFHRCxhQUFhLENBQUNFLE9BQTlCO0FBQ0FELFdBQVMsQ0FBQ0UsS0FBVixDQUFnQkMsS0FBaEIsR0FBd0IsS0FBeEI7QUFDQUgsV0FBUyxDQUFDRSxLQUFWLENBQWdCRSxRQUFoQixHQUEyQixVQUEzQjtBQUNBSixXQUFTLENBQUNLLE9BQVYsQ0FBa0JDLElBQWxCLEdBQXlCLGlCQUF6QjtBQUNBTixXQUFTLENBQUNLLE9BQVYsQ0FBa0J6QixLQUFsQixHQUEwQkEsS0FBMUIsQ0FUa0MsQ0FVbEM7O0FBQ0FvQixXQUFTLENBQUNPLFlBQVYsQ0FBdUIsS0FBdkIsRUFBNkIzQixLQUE3QjtBQUdBLFNBQU8sQ0FBQ1EsaUNBQUNvQiwrQkFBRCxFQUFTO0FBQUNDLFFBQUksRUFBSVY7QUFBVCxHQUFULEVBQ0hsQixPQURHLENBQUQsRUFFS2tCLGFBRkwsQ0FBUDtBQUlILENBbEJELEMsQ0FvQkE7OztBQUNBLElBQU1ILGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQ2YsT0FBRCxFQUFVa0IsYUFBVixFQUF1QjtBQUUxQyxTQUFPWCxpQ0FBQ29CLCtCQUFELEVBQVM7QUFBQ0MsUUFBSSxFQUFJVjtBQUFULEdBQVQsRUFDRGxCLE9BREMsQ0FBUDtBQUlILENBTkQsQyxDQVFBOzs7QUFFQSxJQUFNNkIsWUFBWSxHQUFHO0FBQUNDLFNBQU8sRUFBQztBQUFULENBQXJCLEMsQ0FBc0M7QUFFdEM7O0FBQ08sSUFBTUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFDQyxFQUFELEVBQW9CO01BQWpCNUIsUUFBUTtNQUFFTCxLQUFLO0FBRTNDLFNBQU9RO0FBQUEsaUJBQWlCLGVBQWpCO0FBQWdDLGtCQUFnQlIsS0FBaEQ7QUFBd0RzQixTQUFLLEVBQUtRLFlBQWxFO0FBQWlGcEIsT0FBRyxFQUFLVjtBQUF6RixLQUNESyxRQURDLENBQVA7QUFJSCxDQU5NOztBQUFNSSxxQkFBQUEsR0FBYXVCLGFBQWIsQyxDQVFiOztBQUNPLElBQU1FLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUNELEVBQUQsRUFBaUI7TUFBZHZDLFlBQVk7O0FBRS9CLFdBQThCLHNCQUFTLElBQVQsQ0FBOUI7QUFBQSxNQUFDRixVQUFVLFFBQVg7QUFBQSxNQUFhMkMsYUFBYSxRQUExQjs7QUFDTixNQUFNQyxZQUFZLEdBQUcsb0JBQU8sSUFBUCxDQUFyQjtBQUVBLHlCQUFVO0FBRU4xQyxnQkFBWSxDQUFDUCxZQUFiLEdBQTRCO0FBQ3hCaUQsa0JBQVksQ0FBQ0MsT0FBYixJQUF3QkYsYUFBYSxDQUFDekMsWUFBWSxDQUFDRixVQUFkLENBQXJDO0FBQ0gsS0FGRDs7QUFJQSxXQUFPO0FBQU80QyxrQkFBWSxDQUFDQyxPQUFiLEdBQXVCLEtBQXZCO0FBQTZCLEtBQTNDO0FBRUgsR0FSRCxFQVFFLEVBUkY7QUFVQSxTQUFPN0MsVUFBUDtBQUNILENBaEJNOztBQUFNaUIsa0JBQUFBLEdBQVV5QixVQUFWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9wb3J0YWxtYW5hZ2VyLnRzeD9hYzgyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBvcnRhbG1hbmFnZXIudHN4XG5cbi8qXG4gICAgVGhlIGluZmluaXRlIGxpc3Qgc2Nyb2xsZXIgc3RvcmVzIHVzZXIgY2VsbCBkYXRhIGluIGEgY2VudHJhbCBoaWRkZW4gcG9ydGFsIGNhY2hlIGZvciBlYWNoXG4gICAgaW5maW5pdGVncmlkc2Nyb2xsZXIgcm9vdCwgZnJvbSB3aGVuY2UgdGhlIGRhdGEgaXMgcHVsbGVkIGludG8gdGhlIHJlbGV2YW50IENlbGxTaGVsbCBmb3IgZGlzcGxheVxuKi9cblxuaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgY3JlYXRlSHRtbFBvcnRhbE5vZGUsIEluUG9ydGFsIH0gZnJvbSAncmVhY3QtcmV2ZXJzZS1wb3J0YWwnXG5cbi8vIGdsb2JhbCBzY3JvbGxlciBkYXRhLCBvcmdhbml6ZWQgYnkgc2Vzc2lvbiBzY3JvbGxlcklEXG5leHBvcnQgY2xhc3MgUG9ydGFsTWFuYWdlciB7XG5cbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PVsgUkVQT1NJVE9SWSBBTkQgTElTVCBNQU5BR0VNRU5UIF09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICBzY3JvbGxlckRhdGEgPSB7XG4gICAgICAgIHNldExpc3RTdGF0ZTpudWxsLFxuICAgICAgICBtb2RpZmllZDpmYWxzZSxcbiAgICAgICAgcG9ydGFsTWV0YWRhdGFNYXA6bmV3IE1hcCgpLFxuICAgICAgICBwb3J0YWxNYXA6bmV3IE1hcCgpLFxuICAgICAgICBwb3J0YWxMaXN0Om51bGxcbiAgICB9XG5cbiAgICAvLyBpbml0aWFsaXplIHNjcm9sbGVyIHJlcG9zaXRvcnlcblxuICAgIHJlc2V0U2Nyb2xsZXJQb3J0YWxSZXBvc2l0b3J5KCkge1xuXG4gICAgICAgIC8vIGtlZXAgdGhlIHNldExpc3RTdGF0ZSBjYWxsYmFja1xuICAgICAgICB0aGlzLnNjcm9sbGVyRGF0YS5wb3J0YWxNYXAuY2xlYXIoKSBcbiAgICAgICAgdGhpcy5zY3JvbGxlckRhdGEucG9ydGFsTWV0YWRhdGFNYXAuY2xlYXIoKVxuICAgICAgICB0aGlzLnNjcm9sbGVyRGF0YS5wb3J0YWxMaXN0ID0gbnVsbFxuICAgICAgICB0aGlzLnNjcm9sbGVyRGF0YS5tb2RpZmllZCA9IGZhbHNlXG5cbiAgICB9XG5cbiAgICAvLyBzZXQgc3RhdGUgb2YgdGhlIFBvcnRhbExpc3QgY29tcG9uZW50IG9mIHRoZSBzY3JvbGxlciB0byB0cmlnZ2VyIHJlbmRlclxuICAgIHJlbmRlclBvcnRhbExpc3QgPSAoKSA9PiB7XG5cbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsZXJEYXRhLm1vZGlmaWVkKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbGVyRGF0YS5wb3J0YWxMaXN0ID0gQXJyYXkuZnJvbSh0aGlzLnNjcm9sbGVyRGF0YS5wb3J0YWxNYXAudmFsdWVzKCkpXG4gICAgICAgICAgICB0aGlzLnNjcm9sbGVyRGF0YS5tb2RpZmllZCA9IGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNjcm9sbGVyRGF0YS5zZXRMaXN0U3RhdGUoKSAvLyB0cmlnZ2VyIGRpc3BsYXkgdXBkYXRlXG5cbiAgICB9XG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVsgSU5ESVZJRFVBTCBQT1JUQUwgTUFOQUdFTUVOVCBdPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgLy8gYWRkIGEgcG9ydGFsIGxpc3QgaXRlbS4gVGhlIGluZGV4IGlzIHRoZSBzY3JvbGxlcidzIHBvcnRhbCBkYXRhc2V0IGluZGV4XG4gICAgZmV0Y2hPckNyZWF0ZVBvcnRhbChpbmRleCwgY29udGVudCkgeyAvLyBjb250ZW50IGlzIHVzZWQgZm9yIG5ldyBwb3J0YWwgb25seVxuXG4gICAgICAgIGlmICh0aGlzLmhhc1BvcnRhbChpbmRleCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFBvcnRhbChpbmRleClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vdCBmb3VuZCwgY3JlYXRlIG5ldyBwb3J0YWxcblxuICAgICAgICBjb25zdCBbaW5wb3J0YWwscmV2ZXJzZXBvcnRhbF0gPSBjcmVhdGVJblBvcnRhbChjb250ZW50LCBpbmRleClcblxuICAgICAgICB0aGlzLnNjcm9sbGVyRGF0YS5wb3J0YWxNYXAuc2V0KGluZGV4LDxQb3J0YWxXcmFwcGVyIGlucG9ydGFsID0ge2lucG9ydGFsfSBrZXkgPSB7aW5kZXh9IGluZGV4ID0ge2luZGV4fS8+KVxuICAgICAgICB0aGlzLnNjcm9sbGVyRGF0YS5tb2RpZmllZCA9IHRydWVcblxuICAgICAgICBjb25zdCBwb3J0YWxNZXRhZGF0YSA9IHtcbiAgICAgICAgICAgIHJldmVyc2Vwb3J0YWwsIFxuICAgICAgICAgICAgaXNSZXBhcmVudGluZzpmYWxzZSxcbiAgICAgICAgICAgIGhhc3VzZXJjb250ZW50OmZhbHNlIFxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zY3JvbGxlckRhdGEucG9ydGFsTWV0YWRhdGFNYXAuc2V0KGluZGV4LCBwb3J0YWxNZXRhZGF0YSlcblxuICAgICAgICB0aGlzLnJlbmRlclBvcnRhbExpc3QoKVxuXG4gICAgICAgIHJldHVybiBwb3J0YWxNZXRhZGF0YVxuXG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIHRoZSBjb250ZW50IG9mIGEgcG9ydGFsIGxpc3QgaXRlbVxuICAgIHVwZGF0ZVBvcnRhbChpbmRleCwgY29udGVudCkge1xuICAgICAgICBjb25zdCBwb3J0YWxNZXRhZGF0YSA9IHRoaXMuZ2V0UG9ydGFsKGluZGV4KVxuXG4gICAgICAgIGNvbnN0IHBvcnRhbENvbXBvbmVudCA9IHVwZGF0ZUluUG9ydGFsKGNvbnRlbnQsIHBvcnRhbE1ldGFkYXRhLnJldmVyc2Vwb3J0YWwgKVxuXG4gICAgICAgIHRoaXMuc2Nyb2xsZXJEYXRhLnBvcnRhbE1hcC5zZXQoaW5kZXgsPFBvcnRhbFdyYXBwZXIgaW5wb3J0YWwgPSB7cG9ydGFsQ29tcG9uZW50fSBrZXkgPSB7aW5kZXh9IGluZGV4ID0ge2luZGV4fS8+KVxuICAgICAgICB0aGlzLnNjcm9sbGVyRGF0YS5tb2RpZmllZCA9IHRydWVcblxuICAgICAgICB0aGlzLnJlbmRlclBvcnRhbExpc3QoKVxuXG4gICAgICAgIHJldHVybiBwb3J0YWxNZXRhZGF0YVxuICAgIH1cblxuICAgIC8vIGRlbGV0ZSBhIHBvcnRhbCBsaXN0IGl0ZW1cbiAgICBkZWxldGVQb3J0YWwoaW5kZXgpIHtcblxuICAgICAgICB0aGlzLnNjcm9sbGVyRGF0YS5wb3J0YWxNZXRhZGF0YU1hcC5kZWxldGUoaW5kZXgpXG4gICAgICAgIHRoaXMuc2Nyb2xsZXJEYXRhLnBvcnRhbE1hcC5kZWxldGUoaW5kZXgpXG4gICAgICAgIHRoaXMuc2Nyb2xsZXJEYXRhLm1vZGlmaWVkID0gdHJ1ZVxuXG4gICAgfVxuXG4gICAgLy8gcXVlcnkgZXhpc3RlbmNlIG9mIGEgcG9ydGFsIGxpc3QgaXRlbVxuICAgIGhhc1BvcnRhbChpbmRleCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNjcm9sbGVyRGF0YS5wb3J0YWxNZXRhZGF0YU1hcC5oYXMoaW5kZXgpXG5cbiAgICB9XG5cbiAgICAvLyBnZXQgYSBwb3J0YWwgbGlzdCBpdGVtJ3MgbWV0YSBkYXRhXG4gICAgZ2V0UG9ydGFsKGluZGV4KSB7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsZXJEYXRhLnBvcnRhbE1ldGFkYXRhTWFwLmdldChpbmRleClcblxuICAgIH1cblxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVsgVXRpbGl0eSBmdW5jdGlvbnMgXT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gZ2V0IGEgcmVhY3QtcmV2ZXJzZS1wb3J0YWwgSW5Qb3J0YWwgY29tcG9uZW50LCB3aXRoIGl0cyBtZXRhZGF0YVxuLy8gd2l0aCB1c2VyIGNvbnRlbnQgYW5kIGNvbnRhaW5lclxuY29uc3QgY3JlYXRlSW5Qb3J0YWwgPSAoY29udGVudCwgaW5kZXgpID0+IHtcblxuICAgIC8vIGNvbnNvbGUubG9nKCdjcmVhdGluZyBpbnBvcnRhbCBpbmRleCwgc2Nyb2xsZXJJRCcsaW5kZXgsc2Nyb2xsZXJJRClcbiAgICBsZXQgcmV2ZXJzZVBvcnRhbCA9IGNyZWF0ZUh0bWxQb3J0YWxOb2RlKClcbiAgICAvLyByZXZlcnNlUG9ydGFsLmVsZW1lbnQgPSBjb250YWluZXJcbiAgICBsZXQgY29udGFpbmVyID0gcmV2ZXJzZVBvcnRhbC5lbGVtZW50XG4gICAgY29udGFpbmVyLnN0eWxlLmluc2V0ID0gJzBweCcgXG4gICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xuICAgIGNvbnRhaW5lci5kYXRhc2V0LnR5cGUgPSAncG9ydGFsY29udGFpbmVyJ1xuICAgIGNvbnRhaW5lci5kYXRhc2V0LmluZGV4ID0gaW5kZXhcbiAgICAvLyBjb250YWluZXIuZGF0YXNldC5zY3JvbGxlcmlkID0gc2Nyb2xsZXJJRFxuICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2tleScsaW5kZXgpXG5cblxuICAgIHJldHVybiBbPEluUG9ydGFsIG5vZGUgPSB7cmV2ZXJzZVBvcnRhbH0+XG4gICAgICAgIHtjb250ZW50fVxuICAgIDwvSW5Qb3J0YWw+LHJldmVyc2VQb3J0YWxdXG5cbn0gICAgIFxuXG4vLyB1cGRhdGUgYW4gSW5Qb3J0YWwgY29tcG9uZW50J3MgdXNlciBjb250ZW50XG5jb25zdCB1cGRhdGVJblBvcnRhbCA9IChjb250ZW50LCByZXZlcnNlUG9ydGFsKSA9PiB7XG5cbiAgICByZXR1cm4gPEluUG9ydGFsIG5vZGUgPSB7cmV2ZXJzZVBvcnRhbH0gPlxuICAgICAgICB7IGNvbnRlbnQgfVxuICAgIDwvSW5Qb3J0YWw+XG5cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09WyBVdGlsaXR5IGNvbXBvbmVudHMgXT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5jb25zdCB3cmFwcGVyc3R5bGUgPSB7ZGlzcGxheTonbm9uZSd9IC8vIHN0YXRpYzsgc2hvdWxkIHRha2Ugc2FtZSBkaW1lbnNpb25zIGFzIGNvbnRhaW5lciBDZWxsU2hlbGxcblxuLy8gaGlkZGVuIHBvcnRhbCB3cmFwcGVyIGZvciBjbGFyaXR5IGFuZCB1c2FnZSBvZiBjb252ZW50aW9uYWwgcmVhY3QgcmVsaXN0aW5nIHNlcnZpY2VzXG5leHBvcnQgY29uc3QgUG9ydGFsV3JhcHBlciA9ICh7IGlucG9ydGFsLCBpbmRleCB9KSA9PiB7XG5cbiAgICByZXR1cm4gPGRpdiBkYXRhLXR5cGUgPSAncG9ydGFsd3JhcHBlcicgZGF0YS1pbmRleCA9IHsgaW5kZXggfSBzdHlsZSA9IHsgd3JhcHBlcnN0eWxlIH0ga2V5ID0geyBpbmRleCB9PlxuICAgICAgICB7IGlucG9ydGFsIH1cbiAgICA8L2Rpdj5cblxufVxuXG4vLyBwb3J0YWwgbGlzdCBjb21wb25lbnQgZm9yIHJhcGlkIHJlbGlzdGluZyBvZiB1cGRhdGVzLCB1c2luZyBleHRlcm5hbCBjYWxsYmFjayBmb3Igc2V0IHN0YXRlXG5leHBvcnQgY29uc3QgUG9ydGFsTGlzdCA9ICh7IHNjcm9sbGVyRGF0YSB9KSA9PiB7XG5cbiAgICBjb25zdCBbcG9ydGFsTGlzdCwgc2V0UG9ydGFsTGlzdF0gPSB1c2VTdGF0ZShudWxsKVxuICAgIGNvbnN0IGlzTW91bnRlZFJlZiA9IHVzZVJlZih0cnVlKVxuXG4gICAgdXNlRWZmZWN0KCgpPT57XG5cbiAgICAgICAgc2Nyb2xsZXJEYXRhLnNldExpc3RTdGF0ZSA9ICgpPT57XG4gICAgICAgICAgICBpc01vdW50ZWRSZWYuY3VycmVudCAmJiBzZXRQb3J0YWxMaXN0KHNjcm9sbGVyRGF0YS5wb3J0YWxMaXN0KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtpc01vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlfVxuXG4gICAgfSxbXSkgXG5cbiAgICByZXR1cm4gcG9ydGFsTGlzdFxufVxuIl0sIm5hbWVzIjpbInNldExpc3RTdGF0ZSIsIm1vZGlmaWVkIiwicG9ydGFsTWV0YWRhdGFNYXAiLCJNYXAiLCJwb3J0YWxNYXAiLCJwb3J0YWxMaXN0IiwiX3RoaXMiLCJzY3JvbGxlckRhdGEiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJQb3J0YWxNYW5hZ2VyIiwiY2xlYXIiLCJpbmRleCIsImNvbnRlbnQiLCJoYXNQb3J0YWwiLCJnZXRQb3J0YWwiLCJjcmVhdGVJblBvcnRhbCIsImlucG9ydGFsIiwicmV2ZXJzZXBvcnRhbCIsInNldCIsInJlYWN0XzEiLCJleHBvcnRzIiwia2V5IiwicG9ydGFsTWV0YWRhdGEiLCJpc1JlcGFyZW50aW5nIiwiaGFzdXNlcmNvbnRlbnQiLCJyZW5kZXJQb3J0YWxMaXN0IiwicG9ydGFsQ29tcG9uZW50IiwidXBkYXRlSW5Qb3J0YWwiLCJoYXMiLCJnZXQiLCJyZXZlcnNlUG9ydGFsIiwiY29udGFpbmVyIiwiZWxlbWVudCIsInN0eWxlIiwiaW5zZXQiLCJwb3NpdGlvbiIsImRhdGFzZXQiLCJ0eXBlIiwic2V0QXR0cmlidXRlIiwicmVhY3RfcmV2ZXJzZV9wb3J0YWxfMSIsIm5vZGUiLCJ3cmFwcGVyc3R5bGUiLCJkaXNwbGF5IiwiUG9ydGFsV3JhcHBlciIsIl9hIiwiUG9ydGFsTGlzdCIsInNldFBvcnRhbExpc3QiLCJpc01vdW50ZWRSZWYiLCJjdXJyZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/portalmanager.tsx\n");

/***/ }),

/***/ "./src/scrollblock.tsx":
/*!*****************************!*\
  !*** ./src/scrollblock.tsx ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // scrollblock.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\");\n\nvar Scrollblock = function Scrollblock(_a) {\n  var children = _a.children,\n      listsize = _a.listsize,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      padding = _a.padding,\n      orientation = _a.orientation,\n      functions = _a.functions,\n      styles = _a.styles,\n      scrollerID = _a.scrollerID; // -------------------------[ context and state ]-------------------------\n\n  var viewportProperties = (0, react_1.useContext)(viewport_1.ViewportInterrupt); // const [blockstate,setBlockState] = useState('render') // setup -> render\n  // if (viewportData.index == 0) console.log('RUNNING scrollblock viewportData.index, blockstate',viewportData.index,blockstate)\n  // -----------------------------------[ data heap ]-------------------------\n\n  var scrollBlockLengthRef = (0, react_1.useRef)(null); // const scrollblockRef = useRef(null)\n\n  var divlinerstyleRef = (0, react_1.useRef)(Object.assign({\n    backgroundColor: 'white',\n    position: 'relative'\n  }, styles === null || styles === void 0 ? void 0 : styles.cradle));\n\n  var _b = (0, react_1.useState)(divlinerstyleRef.current),\n      divlinerstyle = _b[0],\n      saveDivlinerstyle = _b[1]; // to trigger render\n\n\n  var viewportDimensions = viewportProperties.viewportDimensions,\n      itemobserver = viewportProperties.itemobserver\n  /*, isResizing*/\n  ;\n  var top = viewportDimensions.top,\n      right = viewportDimensions.right,\n      bottom = viewportDimensions.bottom,\n      left = viewportDimensions.left,\n      width = viewportDimensions.width,\n      height = viewportDimensions.height; // state engine\n  // useEffect(()=>{\n  //     switch (blockstate) {\n  //         case 'setup': {\n  //             setBlockState('render')\n  //             break\n  //         }\n  //     }\n  // },[blockstate])\n\n  (0, react_1.useLayoutEffect)(function () {\n    updateBlockLength();\n    divlinerstyleRef.current = updateScrollblockStyles(orientation, divlinerstyleRef, scrollBlockLengthRef);\n    saveDivlinerstyle(divlinerstyleRef.current);\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]);\n  var updateBlockLength = (0, react_1.useCallback)(function () {\n    var scrollblocklength = calcScrollblockLength({\n      listsize: listsize,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding,\n      orientation: orientation,\n      viewportheight: height,\n      viewportwidth: width\n    }); // if (viewportData.index == 0) console.log('scrollblock updateBlockLength to ', scrollblocklength)\n\n    scrollBlockLengthRef.current = scrollblocklength;\n  }, [listsize, cellHeight, cellWidth, gap, padding, orientation, height, width]);\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'scrollblock',\n    style: divlinerstyleRef.current\n  }, children);\n}; // Scrollblock\n// <div ref = {scrollblockRef} data-type = 'scrollblock' style={divlinerstyleRef.current}>{children}</div>\n// all the parameters affect the length\n\n\nvar calcScrollblockLength = function calcScrollblockLength(_a) {\n  var listsize = _a.listsize,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      padding = _a.padding,\n      orientation = _a.orientation,\n      viewportheight = _a.viewportheight,\n      viewportwidth = _a.viewportwidth; // dependents of orientation\n\n  var crosslength;\n  var cellLength;\n  var viewportcrosslength;\n\n  if (orientation == 'vertical') {\n    crosslength = cellWidth + gap;\n    cellLength = cellHeight + gap;\n    viewportcrosslength = viewportwidth;\n  } else {\n    crosslength = cellHeight + gap;\n    cellLength = cellWidth + gap;\n    viewportcrosslength = viewportheight;\n  } // adjustments to viewportcrosslength\n\n\n  viewportcrosslength -= padding * 2;\n  viewportcrosslength += gap;\n  if (viewportcrosslength < crosslength) viewportcrosslength = crosslength; // must be at least one\n\n  var crosscount = Math.floor(viewportcrosslength / crosslength);\n  var listlength = Math.ceil(listsize / crosscount);\n  var straightlength = listlength * cellLength - (listlength > 0 ? gap : 0) + padding * 2;\n  return straightlength;\n};\n\nvar updateScrollblockStyles = function updateScrollblockStyles(orientation, stylesRef, scrollblocklengthRef) {\n  var localstyles = Object.assign({}, stylesRef.current);\n  var height;\n  var width;\n\n  if (orientation == 'horizontal') {\n    height = '100%';\n    width = scrollblocklengthRef.current + 'px';\n  } else if (orientation == 'vertical') {\n    height = scrollblocklengthRef.current + 'px';\n    width = '100%';\n  }\n\n  localstyles.height = height;\n  localstyles.width = width;\n  return localstyles;\n};\n\nexports[\"default\"] = Scrollblock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scrollblock.tsx\n");

/***/ }),

/***/ "./src/scrolltracker.tsx":
/*!*******************************!*\
  !*** ./src/scrolltracker.tsx ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // scrolltracker.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar ScrollTracker = function ScrollTracker(_a) {\n  var top = _a.top,\n      left = _a.left,\n      offset = _a.offset,\n      listsize = _a.listsize,\n      styles = _a.styles;\n  var trackdata = \"\".concat(offset + 1, \"/\").concat(listsize);\n  var styleRef = (0, react_1.useRef)(Object.assign({\n    top: top + 'px',\n    left: left + 'px',\n    position: 'fixed',\n    zIndex: 3,\n    backgroundColor: 'white',\n    border: '1px solid gray',\n    borderRadius: '10px',\n    fontSize: 'smaller',\n    padding: '3px'\n  }, styles === null || styles === void 0 ? void 0 : styles.scrolltracker));\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-name\": 'scrolltracker',\n    style: styleRef.current\n  }, trackdata);\n};\n\nexports[\"default\"] = ScrollTracker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nyb2xsdHJhY2tlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBLElBQU1BLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ0MsRUFBRCxFQUF3QztNQUFyQ0MsR0FBRztNQUFFQyxJQUFJO01BQUVDLE1BQU07TUFBRUMsUUFBUTtNQUFFQyxNQUFNO0FBRXhELE1BQUlDLFNBQVMsR0FBRyxVQUFHSCxNQUFNLEdBQUcsQ0FBWixFQUFhLEdBQWIsRUFBYUksTUFBYixDQUFpQkgsUUFBakIsQ0FBaEI7QUFFQSxNQUFJSSxRQUFRLEdBQUcsb0JBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ2hDVCxPQUFHLEVBQUVBLEdBQUcsR0FBRyxJQURxQjtBQUVoQ0MsUUFBSSxFQUFFQSxJQUFJLEdBQUcsSUFGbUI7QUFHaENTLFlBQVEsRUFBQyxPQUh1QjtBQUloQ0MsVUFBTSxFQUFDLENBSnlCO0FBS2hDQyxtQkFBZSxFQUFDLE9BTGdCO0FBTWhDQyxVQUFNLEVBQUUsZ0JBTndCO0FBT2hDQyxnQkFBWSxFQUFDLE1BUG1CO0FBUWhDQyxZQUFRLEVBQUMsU0FSdUI7QUFTaENDLFdBQU8sRUFBQztBQVR3QixHQUFkLEVBVUdaLE1BQU0sU0FBTixVQUFNLFdBQU4sR0FBTSxNQUFOLFNBQU0sQ0FBRWEsYUFWWCxDQUFQLENBQWY7QUFZQSxTQUFPQztBQUFBLGlCQUFpQixlQUFqQjtBQUFpQ0MsU0FBSyxFQUFJWixRQUFRLENBQUNhO0FBQW5ELEtBQThEZixTQUE5RCxDQUFQO0FBQ0gsQ0FqQkQ7O0FBbUJBZ0Isa0JBQUFBLEdBQWV2QixhQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9zY3JvbGx0cmFja2VyLnRzeD9mZjgxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNjcm9sbHRyYWNrZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMjAgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuaW1wb3J0IFJlYWN0LCB7dXNlUmVmfSBmcm9tICdyZWFjdCdcblxuY29uc3QgU2Nyb2xsVHJhY2tlciA9ICh7IHRvcCwgbGVmdCwgb2Zmc2V0LCBsaXN0c2l6ZSwgc3R5bGVzIH0pID0+IHtcblxuICAgIGxldCB0cmFja2RhdGEgPSBgJHtvZmZzZXQgKyAxfS8ke2xpc3RzaXplfWBcblxuICAgIGxldCBzdHlsZVJlZiA9IHVzZVJlZihPYmplY3QuYXNzaWduKHtcbiAgICAgICAgdG9wOiB0b3AgKyAncHgnLFxuICAgICAgICBsZWZ0OiBsZWZ0ICsgJ3B4JyxcbiAgICAgICAgcG9zaXRpb246J2ZpeGVkJyxcbiAgICAgICAgekluZGV4OjMsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjond2hpdGUnLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgZ3JheScsXG4gICAgICAgIGJvcmRlclJhZGl1czonMTBweCcsXG4gICAgICAgIGZvbnRTaXplOidzbWFsbGVyJyxcbiAgICAgICAgcGFkZGluZzonM3B4J1xuICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcyxzdHlsZXM/LnNjcm9sbHRyYWNrZXIpKVxuXG4gICAgcmV0dXJuIDxkaXYgZGF0YS1uYW1lID0gJ3Njcm9sbHRyYWNrZXInIHN0eWxlID0ge3N0eWxlUmVmLmN1cnJlbnR9ID57dHJhY2tkYXRhfTwvZGl2PlxufVxuXG5leHBvcnQgZGVmYXVsdCBTY3JvbGxUcmFja2VyIl0sIm5hbWVzIjpbIlNjcm9sbFRyYWNrZXIiLCJfYSIsInRvcCIsImxlZnQiLCJvZmZzZXQiLCJsaXN0c2l6ZSIsInN0eWxlcyIsInRyYWNrZGF0YSIsImNvbmNhdCIsInN0eWxlUmVmIiwiT2JqZWN0IiwiYXNzaWduIiwicG9zaXRpb24iLCJ6SW5kZXgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXIiLCJib3JkZXJSYWRpdXMiLCJmb250U2l6ZSIsInBhZGRpbmciLCJzY3JvbGx0cmFja2VyIiwicmVhY3RfMSIsInN0eWxlIiwiY3VycmVudCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scrolltracker.tsx\n");

/***/ }),

/***/ "./src/viewport.tsx":
/*!**************************!*\
  !*** ./src/viewport.tsx ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // viewport.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ViewportInterrupt = void 0;\n/*\n    The role of viewport is to provide data to its children (scrollblock and cradle),\n    and act as the visible screen portal of the list being shown\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nexports.ViewportInterrupt = react_1[\"default\"].createContext(null); // for children\n\nvar resize_observer_1 = __webpack_require__(/*! @juggle/resize-observer */ \"./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n\nvar cradle_1 = __webpack_require__(/*! ./cradle */ \"./src/cradle.tsx\");\n\nvar ResizeObserver = window['ResizeObserver'] || resize_observer_1.ResizeObserver; // control constant\n\nvar RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE = 250;\n\nvar Viewport = function Viewport(_a) {\n  // -----------------------[ initialize ]------------------\n  var children = _a.children,\n      cellWidth = _a.cellWidth,\n      cellHeight = _a.cellHeight,\n      gap = _a.gap,\n      padding = _a.padding,\n      orientation = _a.orientation,\n      functions = _a.functions,\n      styles = _a.styles,\n      scrollerID = _a.scrollerID;\n\n  var _b = (0, react_1.useState)('setup'),\n      viewportState = _b[0],\n      setViewportState = _b[1];\n\n  var viewportStateRef = (0, react_1.useRef)(null); // for useCallback -> resizeCallback scope\n\n  viewportStateRef.current = viewportState; // only available if viewport is a child of an infiniteScroller\n\n  var parentCradlePropertiesRef = (0, react_1.useContext)(cradle_1.CradleContext); // if this is a scroller child, get the parent portal manager\n\n  var parentPortalManagerRef = (0, react_1.useRef)(parentCradlePropertiesRef === null || parentCradlePropertiesRef === void 0 ? void 0 : parentCradlePropertiesRef.current.portalManager);\n  var isMountedRef = (0, react_1.useRef)(true); // monitor for unmounted\n\n  (0, react_1.useEffect)(function () {\n    // unmount\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  var divlinerstyleRef = (0, react_1.useRef)(null); // integrate inherited styles\n\n  divlinerstyleRef.current = (0, react_1.useMemo)(function () {\n    return Object.assign({\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      overflow: 'auto',\n      backgroundColor: 'red'\n    }, styles === null || styles === void 0 ? void 0 : styles.viewport);\n  }, [styles === null || styles === void 0 ? void 0 : styles.viewport]);\n  var viewportdivRef = (0, react_1.useRef)(null); // viewportPropertiesRef is passed as an interrupt context to children\n\n  var viewportPropertiesRef = (0, react_1.useRef)({\n    portal: null,\n    isResizing: false,\n    index: null\n  }); // --------------------[ resizer setup ]-----------------------\n\n  var resizeTimeridRef = (0, react_1.useRef)(null);\n  var isResizingRef = (0, react_1.useRef)(false);\n  var resizeObserverRef = (0, react_1.useRef)(null); // set up resizeObserver\n\n  (0, react_1.useEffect)(function () {\n    // initialize\n    resizeObserverRef.current = new ResizeObserver(resizeCallback);\n    resizeObserverRef.current.observe(viewportdivRef.current); // unmount\n\n    return function () {\n      resizeObserverRef.current.disconnect();\n    };\n  }, []); // used by resizeObserver; generates interrupt\n\n  var resizeCallback = (0, react_1.useCallback)(function (entries) {\n    if (viewportStateRef.current == 'setup') {\n      return;\n    }\n\n    var target = entries[0].target; // first register shouldn't generate interrupt\n\n    if (!target.dataset.initialized) {\n      // console.log('initializing target', target.dataset)\n      target.dataset.initialized = true;\n      return;\n    } // generate interrupt response, if initiating resize\n\n\n    if (!isResizingRef.current) {\n      viewportPropertiesRef.current.isResizing = isResizingRef.current = true; // new object creation triggers a realtime interrupt message to cradle through context\n\n      viewportPropertiesRef.current = Object.assign({}, viewportPropertiesRef.current);\n      if (isMountedRef.current) setViewportState('resizing');\n    }\n\n    clearTimeout(resizeTimeridRef.current);\n    resizeTimeridRef.current = setTimeout(function () {\n      isResizingRef.current = false;\n\n      if (isMountedRef.current) {\n        setViewportState('resized');\n      }\n    }, RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE);\n  }, []); // -------------------[ set portal for non-root viewports ]-------------\n\n  (0, react_1.useEffect)(function () {\n    if (!parentPortalManagerRef.current) return; // root viewport has no portal\n\n    var parentPortalManager = parentPortalManagerRef.current;\n    var portalindex;\n    var element = viewportdivRef.current;\n\n    while (element) {\n      if (element.dataset && element.dataset.type == 'portalcontainer') {\n        portalindex = parseInt(element.dataset.index);\n        viewportPropertiesRef.current.portal = parentPortalManager.getPortal(portalindex);\n        viewportPropertiesRef.current.index = portalindex;\n        break;\n      } else {\n        element = element.parentElement;\n      }\n    }\n\n    if (!element) {\n      console.log('ERROR: parent portalcontainer not found');\n      return;\n    }\n  }, []); // ----------------------------------[ calculate config ]--------------------------------\n  // calculated values\n\n  divlinerstyleRef.current = (0, react_1.useMemo)(function () {\n    // TODO: gap\n    var mincrosslength = calcMinViewportCrossLength(orientation, cellWidth, cellHeight, gap, padding);\n    var styles = Object.assign({}, divlinerstyleRef.current); // avoid readonly\n\n    if (orientation == 'vertical') {\n      styles.minWidth = mincrosslength + 'px';\n      styles.minHeight = 'auto';\n    } else {\n      styles.minWidth = 'auto';\n      styles.minHeight = mincrosslength + 'px';\n    }\n\n    return styles;\n  }, [orientation, cellWidth, cellHeight, gap, padding]); // complete context data for children\n\n  viewportPropertiesRef.current = (0, react_1.useMemo)(function () {\n    if (viewportState == 'setup') return viewportPropertiesRef.current;\n\n    var _a = viewportdivRef.current.getBoundingClientRect(),\n        top = _a.top,\n        right = _a.right,\n        bottom = _a.bottom,\n        left = _a.left;\n\n    var width = right - left;\n    var height = bottom - top;\n    var localViewportData = {\n      viewportDimensions: {\n        top: top,\n        right: right,\n        bottom: bottom,\n        left: left,\n        width: width,\n        height: height\n      },\n      elementref: viewportdivRef,\n      isResizing: isResizingRef.current\n    }; // trigger context change with new object\n\n    var viewportdataobject = Object.assign({}, viewportPropertiesRef.current, localViewportData);\n    return viewportdataobject;\n  }, [orientation, isResizingRef.current, viewportState]); // --------------------[ state processing ]---------------------------\n\n  (0, react_1.useLayoutEffect)(function () {\n    switch (viewportState) {\n      case 'resized':\n      case 'setup':\n        {\n          setViewportState('render');\n          break;\n        }\n    }\n  }, [viewportState]); // ----------------------[ render ]--------------------------------\n\n  return react_1[\"default\"].createElement(exports.ViewportInterrupt.Provider, {\n    value: viewportPropertiesRef.current\n  }, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'viewport',\n    \"data-scrollerid\": scrollerID,\n    style: divlinerstyleRef.current,\n    ref: viewportdivRef\n  }, viewportState != 'setup' && children));\n}; // Viewport\n// establish minimum width/height for the viewport -- approximately one item\n// gap only applies with multi-width items, therefore not used in calculations\n\n\nvar calcMinViewportCrossLength = function calcMinViewportCrossLength(orientation, cellWidth, cellHeight, gap, padding) {\n  // console.log('calcMinViewportCrossLength parms',orientation, cellWidth, cellHeight, padding,)\n  var crosslength, cellLength;\n\n  if (orientation == 'vertical') {\n    cellLength = cellWidth; //+ gap\n  } else {\n    cellLength = cellHeight; // + gap\n  }\n\n  crosslength = cellLength + padding * 2;\n  return crosslength;\n};\n\nexports[\"default\"] = Viewport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/viewport.tsx\n");

/***/ }),

/***/ "./node_modules/detect-browser/es/index.js":
/*!*************************************************!*\
  !*** ./node_modules/detect-browser/es/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BotInfo\": () => (/* binding */ BotInfo),\n/* harmony export */   \"BrowserInfo\": () => (/* binding */ BrowserInfo),\n/* harmony export */   \"NodeInfo\": () => (/* binding */ NodeInfo),\n/* harmony export */   \"ReactNativeInfo\": () => (/* binding */ ReactNativeInfo),\n/* harmony export */   \"SearchBotDeviceInfo\": () => (/* binding */ SearchBotDeviceInfo),\n/* harmony export */   \"browserName\": () => (/* binding */ browserName),\n/* harmony export */   \"detect\": () => (/* binding */ detect),\n/* harmony export */   \"detectOS\": () => (/* binding */ detectOS),\n/* harmony export */   \"getNodeVersion\": () => (/* binding */ getNodeVersion),\n/* harmony export */   \"parseUserAgent\": () => (/* binding */ parseUserAgent)\n/* harmony export */ });\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar BrowserInfo = /** @class */ (function () {\n    function BrowserInfo(name, version, os) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.type = 'browser';\n    }\n    return BrowserInfo;\n}());\n\nvar NodeInfo = /** @class */ (function () {\n    function NodeInfo(version) {\n        this.version = version;\n        this.type = 'node';\n        this.name = 'node';\n        this.os = process.platform;\n    }\n    return NodeInfo;\n}());\n\nvar SearchBotDeviceInfo = /** @class */ (function () {\n    function SearchBotDeviceInfo(name, version, os, bot) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.bot = bot;\n        this.type = 'bot-device';\n    }\n    return SearchBotDeviceInfo;\n}());\n\nvar BotInfo = /** @class */ (function () {\n    function BotInfo() {\n        this.type = 'bot';\n        this.bot = true; // NOTE: deprecated test name instead\n        this.name = 'bot';\n        this.version = null;\n        this.os = null;\n    }\n    return BotInfo;\n}());\n\nvar ReactNativeInfo = /** @class */ (function () {\n    function ReactNativeInfo() {\n        this.type = 'react-native';\n        this.name = 'react-native';\n        this.version = null;\n        this.os = null;\n    }\n    return ReactNativeInfo;\n}());\n\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [\n    ['aol', /AOLShield\\/([0-9\\._]+)/],\n    ['edge', /Edge\\/([0-9\\._]+)/],\n    ['edge-ios', /EdgiOS\\/([0-9\\._]+)/],\n    ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/],\n    ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/],\n    ['samsung', /SamsungBrowser\\/([0-9\\.]+)/],\n    ['silk', /\\bSilk\\/([0-9._-]+)\\b/],\n    ['miui', /MiuiBrowser\\/([0-9\\.]+)$/],\n    ['beaker', /BeakerBrowser\\/([0-9\\.]+)/],\n    ['edge-chromium', /EdgA?\\/([0-9\\.]+)/],\n    [\n        'chromium-webview',\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/,\n    ],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n    ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n    ['fxios', /FxiOS\\/([0-9\\.]+)/],\n    ['opera-mini', /Opera Mini.*Version\\/([0-9\\.]+)/],\n    ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)/],\n    ['pie', /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/],\n    ['pie', /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/],\n    ['netfront', /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/],\n    ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n    ['android', /Android\\s([0-9\\.]+)/],\n    ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9\\._]+).*Safari/],\n    ['facebook', /FB[AS]V\\/([0-9\\.]+)/],\n    ['instagram', /Instagram\\s([0-9\\.]+)/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/],\n    ['curl', /^curl\\/([0-9\\.]+)$/],\n    ['searchbot', SEARCHBOX_UA_REGEX],\n];\nvar operatingSystemRules = [\n    ['iOS', /iP(hone|od|ad)/],\n    ['Android OS', /Android/],\n    ['BlackBerry OS', /BlackBerry|BB10/],\n    ['Windows Mobile', /IEMobile/],\n    ['Amazon OS', /Kindle/],\n    ['Windows 3.11', /Win16/],\n    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],\n    ['Windows 98', /(Windows 98)|(Win98)/],\n    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],\n    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],\n    ['Windows Server 2003', /(Windows NT 5.2)/],\n    ['Windows Vista', /(Windows NT 6.0)/],\n    ['Windows 7', /(Windows NT 6.1)/],\n    ['Windows 8', /(Windows NT 6.2)/],\n    ['Windows 8.1', /(Windows NT 6.3)/],\n    ['Windows 10', /(Windows NT 10.0)/],\n    ['Windows ME', /Windows ME/],\n    ['Windows CE', /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],\n    ['Open BSD', /OpenBSD/],\n    ['Sun OS', /SunOS/],\n    ['Chrome OS', /CrOS/],\n    ['Linux', /(Linux)|(X11)/],\n    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],\n    ['QNX', /QNX/],\n    ['BeOS', /BeOS/],\n    ['OS/2', /OS\\/2/],\n];\nfunction detect(userAgent) {\n    if (!!userAgent) {\n        return parseUserAgent(userAgent);\n    }\n    if (typeof document === 'undefined' &&\n        typeof navigator !== 'undefined' &&\n        navigator.product === 'ReactNative') {\n        return new ReactNativeInfo();\n    }\n    if (typeof navigator !== 'undefined') {\n        return parseUserAgent(navigator.userAgent);\n    }\n    return getNodeVersion();\n}\nfunction matchUserAgent(ua) {\n    // opted for using reduce here rather than Array#first with a regex.test call\n    // this is primarily because using the reduce we only perform the regex\n    // execution once rather than once for the test and for the exec again below\n    // probably something that needs to be benchmarked though\n    return (ua !== '' &&\n        userAgentRules.reduce(function (matched, _a) {\n            var browser = _a[0], regex = _a[1];\n            if (matched) {\n                return matched;\n            }\n            var uaMatch = regex.exec(ua);\n            return !!uaMatch && [browser, uaMatch];\n        }, false));\n}\nfunction browserName(ua) {\n    var data = matchUserAgent(ua);\n    return data ? data[0] : null;\n}\nfunction parseUserAgent(ua) {\n    var matchedRule = matchUserAgent(ua);\n    if (!matchedRule) {\n        return null;\n    }\n    var name = matchedRule[0], match = matchedRule[1];\n    if (name === 'searchbot') {\n        return new BotInfo();\n    }\n    // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)\n    var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);\n    if (versionParts) {\n        if (versionParts.length < REQUIRED_VERSION_PARTS) {\n            versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);\n        }\n    }\n    else {\n        versionParts = [];\n    }\n    var version = versionParts.join('.');\n    var os = detectOS(ua);\n    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n    if (searchBotMatch && searchBotMatch[1]) {\n        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n    }\n    return new BrowserInfo(name, version, os);\n}\nfunction detectOS(ua) {\n    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];\n        var match = regex.exec(ua);\n        if (match) {\n            return os;\n        }\n    }\n    return null;\n}\nfunction getNodeVersion() {\n    var isNode = typeof process !== 'undefined' && process.version;\n    return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nfunction createVersionParts(count) {\n    var output = [];\n    for (var ii = 0; ii < count; ii++) {\n        output.push('0');\n    }\n    return output;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/detect-browser/es/index.js\n");

/***/ }),

/***/ "./node_modules/react-reverse-portal/dist/web/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-reverse-portal/dist/web/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InPortal\": () => (/* binding */ InPortal),\n/* harmony export */   \"OutPortal\": () => (/* binding */ OutPortal),\n/* harmony export */   \"createHtmlPortalNode\": () => (/* binding */ createHtmlPortalNode),\n/* harmony export */   \"createSvgPortalNode\": () => (/* binding */ createSvgPortalNode)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"react-dom\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n// Internally, the portalNode must be for either HTML or SVG elements\nvar ELEMENT_TYPE_HTML = 'html';\nvar ELEMENT_TYPE_SVG = 'svg';\n// ReactDOM can handle several different namespaces, but they're not exported publicly\n// https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/DOMNamespaces.js#L8-L10\nvar SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\nvar validateElementType = function (domElement, elementType) {\n    if (elementType === ELEMENT_TYPE_HTML) {\n        return domElement instanceof HTMLElement;\n    }\n    if (elementType === ELEMENT_TYPE_SVG) {\n        return domElement instanceof SVGElement;\n    }\n    throw new Error(\"Unrecognized element type \\\"\" + elementType + \"\\\" for validateElementType.\");\n};\n// This is the internal implementation: the public entry points set elementType to an appropriate value\nvar createPortalNode = function (elementType, options) {\n    var initialProps = {};\n    var parent;\n    var lastPlaceholder;\n    var element;\n    if (elementType === ELEMENT_TYPE_HTML) {\n        element = document.createElement('div');\n    }\n    else if (elementType === ELEMENT_TYPE_SVG) {\n        element = document.createElementNS(SVG_NAMESPACE, 'g');\n    }\n    else {\n        throw new Error(\"Invalid element type \\\"\" + elementType + \"\\\" for createPortalNode: must be \\\"html\\\" or \\\"svg\\\".\");\n    }\n    if (options && typeof options === \"object\") {\n        for (var _i = 0, _a = Object.entries(options.attributes); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            element.setAttribute(key, value);\n        }\n    }\n    var portalNode = {\n        element: element,\n        elementType: elementType,\n        setPortalProps: function (props) {\n            initialProps = props;\n        },\n        getInitialPortalProps: function () {\n            return initialProps;\n        },\n        mount: function (newParent, newPlaceholder) {\n            if (newPlaceholder === lastPlaceholder) {\n                // Already mounted - noop.\n                return;\n            }\n            portalNode.unmount();\n            // To support SVG and other non-html elements, the portalNode's elementType needs to match\n            // the elementType it's being rendered into\n            if (newParent !== parent) {\n                if (!validateElementType(newParent, elementType)) {\n                    throw new Error(\"Invalid element type for portal: \\\"\" + elementType + \"\\\" portalNodes must be used with \" + elementType + \" elements, but OutPortal is within <\" + newParent.tagName + \">.\");\n                }\n            }\n            newParent.replaceChild(portalNode.element, newPlaceholder);\n            parent = newParent;\n            lastPlaceholder = newPlaceholder;\n        },\n        unmount: function (expectedPlaceholder) {\n            if (expectedPlaceholder && expectedPlaceholder !== lastPlaceholder) {\n                // Skip unmounts for placeholders that aren't currently mounted\n                // They will have been automatically unmounted already by a subsequent mount()\n                return;\n            }\n            if (parent && lastPlaceholder) {\n                parent.replaceChild(lastPlaceholder, portalNode.element);\n                parent = undefined;\n                lastPlaceholder = undefined;\n            }\n        }\n    };\n    return portalNode;\n};\nvar InPortal = /** @class */ (function (_super) {\n    __extends(InPortal, _super);\n    function InPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.addPropsChannel = function () {\n            Object.assign(_this.props.node, {\n                setPortalProps: function (props) {\n                    // Rerender the child node here if/when the out portal props change\n                    _this.setState({ nodeProps: props });\n                }\n            });\n        };\n        _this.state = {\n            nodeProps: _this.props.node.getInitialPortalProps(),\n        };\n        return _this;\n    }\n    InPortal.prototype.componentDidMount = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.componentDidUpdate = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, children = _a.children, node = _a.node;\n        return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, function (child) {\n            if (!react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child))\n                return child;\n            return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, _this.state.nodeProps);\n        }), node.element);\n    };\n    return InPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar OutPortal = /** @class */ (function (_super) {\n    __extends(OutPortal, _super);\n    function OutPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.placeholderNode = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        _this.passPropsThroughPortal();\n        return _this;\n    }\n    OutPortal.prototype.passPropsThroughPortal = function () {\n        var propsForTarget = Object.assign({}, this.props, { node: undefined });\n        this.props.node.setPortalProps(propsForTarget);\n    };\n    OutPortal.prototype.componentDidMount = function () {\n        var node = this.props.node;\n        this.currentPortalNode = node;\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentDidUpdate = function () {\n        // We re-mount on update, just in case we were unmounted (e.g. by\n        // a second OutPortal, which has now been removed)\n        var node = this.props.node;\n        // If we're switching portal nodes, we need to clean up the current one first.\n        if (this.currentPortalNode && node !== this.currentPortalNode) {\n            this.currentPortalNode.unmount(this.placeholderNode.current);\n            this.currentPortalNode = node;\n        }\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentWillUnmount = function () {\n        var node = this.props.node;\n        node.unmount(this.placeholderNode.current);\n    };\n    OutPortal.prototype.render = function () {\n        // Render a placeholder to the DOM, so we can get a reference into\n        // our location in the DOM, and swap it out for the portaled node.\n        // A <div> placeholder works fine even for SVG.\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: this.placeholderNode });\n    };\n    return OutPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar createHtmlPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_HTML);\nvar createSvgPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_SVG);\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-reverse-portal/dist/web/index.js\n");

/***/ }),

/***/ "./node_modules/requestidlecallback/index.js":
/*!***************************************************!*\
  !*** ./node_modules/requestidlecallback/index.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}(function(){\n\t'use strict';\n\tvar scheduleStart, throttleDelay, lazytimer, lazyraf;\n\tvar root = typeof window != 'undefined' ?\n\t\twindow :\n\t\ttypeof __webpack_require__.g != undefined ?\n\t\t\t__webpack_require__.g :\n\t\t\tthis || {};\n\tvar requestAnimationFrame = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;\n\tvar cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;\n\tvar tasks = [];\n\tvar runAttempts = 0;\n\tvar isRunning = false;\n\tvar remainingTime = 7;\n\tvar minThrottle = 35;\n\tvar throttle = 125;\n\tvar index = 0;\n\tvar taskStart = 0;\n\tvar tasklength = 0;\n\tvar IdleDeadline = {\n\t\tget didTimeout(){\n\t\t\treturn false;\n\t\t},\n\t\ttimeRemaining: function(){\n\t\t\tvar timeRemaining = remainingTime - (Date.now() - taskStart);\n\t\t\treturn timeRemaining < 0 ? 0 : timeRemaining;\n\t\t},\n\t};\n\tvar setInactive = debounce(function(){\n\t\tremainingTime = 22;\n\t\tthrottle = 66;\n\t\tminThrottle = 0;\n\t});\n\n\tfunction debounce(fn){\n\t\tvar id, timestamp;\n\t\tvar wait = 99;\n\t\tvar check = function(){\n\t\t\tvar last = (Date.now()) - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tid = setTimeout(check, wait - last);\n\t\t\t} else {\n\t\t\t\tid = null;\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\t\treturn function(){\n\t\t\ttimestamp = Date.now();\n\t\t\tif(!id){\n\t\t\t\tid = setTimeout(check, wait);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction abortRunning(){\n\t\tif(isRunning){\n\t\t\tif(lazyraf){\n\t\t\t\tcancelRequestAnimationFrame(lazyraf);\n\t\t\t}\n\t\t\tif(lazytimer){\n\t\t\t\tclearTimeout(lazytimer);\n\t\t\t}\n\t\t\tisRunning = false;\n\t\t}\n\t}\n\n\tfunction onInputorMutation(){\n\t\tif(throttle != 125){\n\t\t\tremainingTime = 7;\n\t\t\tthrottle = 125;\n\t\t\tminThrottle = 35;\n\n\t\t\tif(isRunning) {\n\t\t\t\tabortRunning();\n\t\t\t\tscheduleLazy();\n\t\t\t}\n\t\t}\n\t\tsetInactive();\n\t}\n\n\tfunction scheduleAfterRaf() {\n\t\tlazyraf = null;\n\t\tlazytimer = setTimeout(runTasks, 0);\n\t}\n\n\tfunction scheduleRaf(){\n\t\tlazytimer = null;\n\t\trequestAnimationFrame(scheduleAfterRaf);\n\t}\n\n\tfunction scheduleLazy(){\n\n\t\tif(isRunning){return;}\n\t\tthrottleDelay = throttle - (Date.now() - taskStart);\n\n\t\tscheduleStart = Date.now();\n\n\t\tisRunning = true;\n\n\t\tif(minThrottle && throttleDelay < minThrottle){\n\t\t\tthrottleDelay = minThrottle;\n\t\t}\n\n\t\tif(throttleDelay > 9){\n\t\t\tlazytimer = setTimeout(scheduleRaf, throttleDelay);\n\t\t} else {\n\t\t\tthrottleDelay = 0;\n\t\t\tscheduleRaf();\n\t\t}\n\t}\n\n\tfunction runTasks(){\n\t\tvar task, i, len;\n\t\tvar timeThreshold = remainingTime > 9 ?\n\t\t\t9 :\n\t\t\t1\n\t\t;\n\n\t\ttaskStart = Date.now();\n\t\tisRunning = false;\n\n\t\tlazytimer = null;\n\n\t\tif(runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart){\n\t\t\tfor(i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++){\n\t\t\t\ttask = tasks.shift();\n\t\t\t\ttasklength++;\n\t\t\t\tif(task){\n\t\t\t\t\ttask(IdleDeadline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(tasks.length){\n\t\t\tscheduleLazy();\n\t\t} else {\n\t\t\trunAttempts = 0;\n\t\t}\n\t}\n\n\tfunction requestIdleCallbackShim(task){\n\t\tindex++;\n\t\ttasks.push(task);\n\t\tscheduleLazy();\n\t\treturn index;\n\t}\n\n\tfunction cancelIdleCallbackShim(id){\n\t\tvar index = id - 1 - tasklength;\n\t\tif(tasks[index]){\n\t\t\ttasks[index] = null;\n\t\t}\n\t}\n\n\tif(!root.requestIdleCallback || !root.cancelIdleCallback){\n\t\troot.requestIdleCallback = requestIdleCallbackShim;\n\t\troot.cancelIdleCallback = cancelIdleCallbackShim;\n\n\t\tif(root.document && document.addEventListener){\n\t\t\troot.addEventListener('scroll', onInputorMutation, true);\n\t\t\troot.addEventListener('resize', onInputorMutation);\n\n\t\t\tdocument.addEventListener('focus', onInputorMutation, true);\n\t\t\tdocument.addEventListener('mouseover', onInputorMutation, true);\n\t\t\t['click', 'keypress', 'touchstart', 'mousedown'].forEach(function(name){\n\t\t\t\tdocument.addEventListener(name, onInputorMutation, {capture: true, passive: true});\n\t\t\t});\n\n\t\t\tif(root.MutationObserver){\n\t\t\t\tnew MutationObserver( onInputorMutation ).observe( document.documentElement, {childList: true, subtree: true, attributes: true} );\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\troot.requestIdleCallback(function(){}, {timeout: 0});\n\t\t} catch(e){\n\t\t\t(function(rIC){\n\t\t\t\tvar timeRemainingProto, timeRemaining;\n\t\t\t\troot.requestIdleCallback = function(fn, timeout){\n\t\t\t\t\tif(timeout && typeof timeout.timeout == 'number'){\n\t\t\t\t\t\treturn rIC(fn, timeout.timeout);\n\t\t\t\t\t}\n\t\t\t\t\treturn rIC(fn);\n\t\t\t\t};\n\t\t\t\tif(root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)){\n\t\t\t\t\ttimeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, 'timeRemaining');\n\t\t\t\t\tif(!timeRemaining || !timeRemaining.configurable || !timeRemaining.get){return;}\n\t\t\t\t\tObject.defineProperty(timeRemainingProto, 'timeRemaining', {\n\t\t\t\t\t\tvalue:  function(){\n\t\t\t\t\t\t\treturn timeRemaining.get.call(this);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(root.requestIdleCallback)\n\t\t}\n\t}\n\n\treturn {\n\t\trequest: requestIdleCallbackShim,\n\t\tcancel: cancelIdleCallbackShim,\n\t};\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/requestidlecallback/index.js\n");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_react__;

/***/ }),

/***/ "react-dom":
/*!****************************!*\
  !*** external "react-dom" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/infinitegridscroller.tsx");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});