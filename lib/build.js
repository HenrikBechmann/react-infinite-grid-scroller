(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("React"));
	else if(typeof define === 'function' && define.amd)
		define(["React"], factory);
	else if(typeof exports === 'object')
		exports["Scroller"] = factory(require("React"));
	else
		root["Scroller"] = factory(root["React"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_react__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/infinitegridscroller.tsx");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/react-is-mounted-hook/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-is-mounted-hook/lib/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar use_is_mounted_1 = __importDefault(__webpack_require__(/*! ./use-is-mounted */ \"./node_modules/react-is-mounted-hook/lib/use-is-mounted.js\"));\nexports.default = use_is_mounted_1.default;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy1tb3VudGVkLWhvb2svbGliL2luZGV4LmpzPzVjOGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRDQUE0QztBQUM1QztBQUNBLDhDQUE4QyxjQUFjO0FBQzVELHVDQUF1QyxtQkFBTyxDQUFDLG9GQUFrQjtBQUNqRTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzLW1vdW50ZWQtaG9vay9saWIvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB1c2VfaXNfbW91bnRlZF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3VzZS1pcy1tb3VudGVkXCIpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVzZV9pc19tb3VudGVkXzEuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-is-mounted-hook/lib/index.js\n");

/***/ }),

/***/ "./node_modules/react-is-mounted-hook/lib/use-is-mounted.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-is-mounted-hook/lib/use-is-mounted.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = __webpack_require__(/*! react */ \"react\");\nfunction useIsMounted() {\n    var ref = react_1.useRef(false);\n    react_1.useEffect(function () {\n        ref.current = true;\n        return function () {\n            ref.current = false;\n        };\n    }, []);\n    return function () { return ref.current; };\n}\nexports.default = useIsMounted;\n//# sourceMappingURL=use-is-mounted.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy1tb3VudGVkLWhvb2svbGliL3VzZS1pcy1tb3VudGVkLmpzPzkzMjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RCxjQUFjLG1CQUFPLENBQUMsb0JBQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsd0JBQXdCLG9CQUFvQjtBQUM1QztBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMtbW91bnRlZC1ob29rL2xpYi91c2UtaXMtbW91bnRlZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG5mdW5jdGlvbiB1c2VJc01vdW50ZWQoKSB7XG4gICAgdmFyIHJlZiA9IHJlYWN0XzEudXNlUmVmKGZhbHNlKTtcbiAgICByZWFjdF8xLnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiByZWYuY3VycmVudDsgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHVzZUlzTW91bnRlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1pcy1tb3VudGVkLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-is-mounted-hook/lib/use-is-mounted.js\n");

/***/ }),

/***/ "./node_modules/requestidlecallback/index.js":
/*!***************************************************!*\
  !*** ./node_modules/requestidlecallback/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}(function(){\n\t'use strict';\n\tvar scheduleStart, throttleDelay, lazytimer, lazyraf;\n\tvar root = typeof window != 'undefined' ?\n\t\twindow :\n\t\ttypeof global != undefined ?\n\t\t\tglobal :\n\t\t\tthis || {};\n\tvar requestAnimationFrame = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;\n\tvar cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;\n\tvar tasks = [];\n\tvar runAttempts = 0;\n\tvar isRunning = false;\n\tvar remainingTime = 7;\n\tvar minThrottle = 35;\n\tvar throttle = 125;\n\tvar index = 0;\n\tvar taskStart = 0;\n\tvar tasklength = 0;\n\tvar IdleDeadline = {\n\t\tget didTimeout(){\n\t\t\treturn false;\n\t\t},\n\t\ttimeRemaining: function(){\n\t\t\tvar timeRemaining = remainingTime - (Date.now() - taskStart);\n\t\t\treturn timeRemaining < 0 ? 0 : timeRemaining;\n\t\t},\n\t};\n\tvar setInactive = debounce(function(){\n\t\tremainingTime = 22;\n\t\tthrottle = 66;\n\t\tminThrottle = 0;\n\t});\n\n\tfunction debounce(fn){\n\t\tvar id, timestamp;\n\t\tvar wait = 99;\n\t\tvar check = function(){\n\t\t\tvar last = (Date.now()) - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tid = setTimeout(check, wait - last);\n\t\t\t} else {\n\t\t\t\tid = null;\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\t\treturn function(){\n\t\t\ttimestamp = Date.now();\n\t\t\tif(!id){\n\t\t\t\tid = setTimeout(check, wait);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction abortRunning(){\n\t\tif(isRunning){\n\t\t\tif(lazyraf){\n\t\t\t\tcancelRequestAnimationFrame(lazyraf);\n\t\t\t}\n\t\t\tif(lazytimer){\n\t\t\t\tclearTimeout(lazytimer);\n\t\t\t}\n\t\t\tisRunning = false;\n\t\t}\n\t}\n\n\tfunction onInputorMutation(){\n\t\tif(throttle != 125){\n\t\t\tremainingTime = 7;\n\t\t\tthrottle = 125;\n\t\t\tminThrottle = 35;\n\n\t\t\tif(isRunning) {\n\t\t\t\tabortRunning();\n\t\t\t\tscheduleLazy();\n\t\t\t}\n\t\t}\n\t\tsetInactive();\n\t}\n\n\tfunction scheduleAfterRaf() {\n\t\tlazyraf = null;\n\t\tlazytimer = setTimeout(runTasks, 0);\n\t}\n\n\tfunction scheduleRaf(){\n\t\tlazytimer = null;\n\t\trequestAnimationFrame(scheduleAfterRaf);\n\t}\n\n\tfunction scheduleLazy(){\n\n\t\tif(isRunning){return;}\n\t\tthrottleDelay = throttle - (Date.now() - taskStart);\n\n\t\tscheduleStart = Date.now();\n\n\t\tisRunning = true;\n\n\t\tif(minThrottle && throttleDelay < minThrottle){\n\t\t\tthrottleDelay = minThrottle;\n\t\t}\n\n\t\tif(throttleDelay > 9){\n\t\t\tlazytimer = setTimeout(scheduleRaf, throttleDelay);\n\t\t} else {\n\t\t\tthrottleDelay = 0;\n\t\t\tscheduleRaf();\n\t\t}\n\t}\n\n\tfunction runTasks(){\n\t\tvar task, i, len;\n\t\tvar timeThreshold = remainingTime > 9 ?\n\t\t\t9 :\n\t\t\t1\n\t\t;\n\n\t\ttaskStart = Date.now();\n\t\tisRunning = false;\n\n\t\tlazytimer = null;\n\n\t\tif(runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart){\n\t\t\tfor(i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++){\n\t\t\t\ttask = tasks.shift();\n\t\t\t\ttasklength++;\n\t\t\t\tif(task){\n\t\t\t\t\ttask(IdleDeadline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(tasks.length){\n\t\t\tscheduleLazy();\n\t\t} else {\n\t\t\trunAttempts = 0;\n\t\t}\n\t}\n\n\tfunction requestIdleCallbackShim(task){\n\t\tindex++;\n\t\ttasks.push(task);\n\t\tscheduleLazy();\n\t\treturn index;\n\t}\n\n\tfunction cancelIdleCallbackShim(id){\n\t\tvar index = id - 1 - tasklength;\n\t\tif(tasks[index]){\n\t\t\ttasks[index] = null;\n\t\t}\n\t}\n\n\tif(!root.requestIdleCallback || !root.cancelIdleCallback){\n\t\troot.requestIdleCallback = requestIdleCallbackShim;\n\t\troot.cancelIdleCallback = cancelIdleCallbackShim;\n\n\t\tif(root.document && document.addEventListener){\n\t\t\troot.addEventListener('scroll', onInputorMutation, true);\n\t\t\troot.addEventListener('resize', onInputorMutation);\n\n\t\t\tdocument.addEventListener('focus', onInputorMutation, true);\n\t\t\tdocument.addEventListener('mouseover', onInputorMutation, true);\n\t\t\t['click', 'keypress', 'touchstart', 'mousedown'].forEach(function(name){\n\t\t\t\tdocument.addEventListener(name, onInputorMutation, {capture: true, passive: true});\n\t\t\t});\n\n\t\t\tif(root.MutationObserver){\n\t\t\t\tnew MutationObserver( onInputorMutation ).observe( document.documentElement, {childList: true, subtree: true, attributes: true} );\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\troot.requestIdleCallback(function(){}, {timeout: 0});\n\t\t} catch(e){\n\t\t\t(function(rIC){\n\t\t\t\tvar timeRemainingProto, timeRemaining;\n\t\t\t\troot.requestIdleCallback = function(fn, timeout){\n\t\t\t\t\tif(timeout && typeof timeout.timeout == 'number'){\n\t\t\t\t\t\treturn rIC(fn, timeout.timeout);\n\t\t\t\t\t}\n\t\t\t\t\treturn rIC(fn);\n\t\t\t\t};\n\t\t\t\tif(root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)){\n\t\t\t\t\ttimeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, 'timeRemaining');\n\t\t\t\t\tif(!timeRemaining || !timeRemaining.configurable || !timeRemaining.get){return;}\n\t\t\t\t\tObject.defineProperty(timeRemainingProto, 'timeRemaining', {\n\t\t\t\t\t\tvalue:  function(){\n\t\t\t\t\t\t\treturn timeRemaining.get.call(this);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(root.requestIdleCallback)\n\t\t}\n\t}\n\n\treturn {\n\t\trequest: requestIdleCallbackShim,\n\t\tcancel: cancelIdleCallbackShim,\n\t};\n}));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/requestidlecallback/index.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./src/cradle.tsx":
/*!************************!*\
  !*** ./src/cradle.tsx ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // cradle.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\");\n\nvar react_is_mounted_hook_1 = __importDefault(__webpack_require__(/*! react-is-mounted-hook */ \"./node_modules/react-is-mounted-hook/lib/index.js\"));\n\nvar cradlefunctions_1 = __webpack_require__(/*! ./cradlefunctions */ \"./src/cradlefunctions.tsx\");\n\nvar scrolltracker_1 = __importDefault(__webpack_require__(/*! ./scrolltracker */ \"./src/scrolltracker.tsx\"));\n\nvar SCROLL_TIMEOUT_FOR_ONAFTERSCROLL = 200;\n\nvar Cradle = function Cradle(_a) {\n  // =============================================================================================\n  // --------------------------------------[ initialization ]-------------------------------------\n  var gap = _a.gap,\n      padding = _a.padding,\n      runwaylength = _a.runwaylength,\n      listsize = _a.listsize,\n      offset = _a.offset,\n      orientation = _a.orientation,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      getItem = _a.getItem,\n      placeholder = _a.placeholder,\n      component = _a.component,\n      styles = _a.styles;\n  var isMounted = react_is_mounted_hook_1[\"default\"]();\n  var viewportData = react_1.useContext(viewport_1.ViewportContext);\n\n  var _b = react_1.useState('setup'),\n      cradlestate = _b[0],\n      saveCradleState = _b[1];\n\n  var cradlestateRef = react_1.useRef(null); // access by closures\n\n  cradlestateRef.current = cradlestate;\n\n  var _c = react_1.useState('ready'),\n      scrollstate = _c[0],\n      saveScrollState = _c[1]; // console.log('running cradle with cradlestate, scrollstate', cradlestate, scrollstate)\n  // -----------------------------[ data heap ]-----------------------\n\n\n  var listsizeRef = react_1.useRef(null);\n  listsizeRef.current = listsize;\n  var viewportDataRef = react_1.useRef(null);\n  viewportDataRef.current = viewportData;\n  var isResizingRef = react_1.useRef(false);\n  var pauseObserversRef = react_1.useRef(false);\n  var reportReferenceIndexRef = react_1.useRef(component === null || component === void 0 ? void 0 : component.reportReferenceIndex); // -----------------------[ effects ]-------------------------\n  // initialize window listener, and component elements\n\n  react_1.useEffect(function () {\n    viewportData.elementref.current.addEventListener('scroll', onScroll);\n\n    if (component === null || component === void 0 ? void 0 : component.hasOwnProperty('getVisibleList')) {\n      component.getVisibleList = getVisibleList;\n    }\n\n    if (component === null || component === void 0 ? void 0 : component.hasOwnProperty('getContentList')) {\n      component.getContentList = getContentList;\n    }\n\n    if (component === null || component === void 0 ? void 0 : component.hasOwnProperty('scrollToItem')) {\n      component.scrollToItem = scrollToItem;\n    }\n\n    if (component === null || component === void 0 ? void 0 : component.hasOwnProperty('reload')) {\n      component.reload = reload;\n    }\n\n    return function () {\n      viewportData.elementref.current && viewportData.elementref.current.removeEventListener('scroll', onScroll);\n    };\n  }, []); // triger resizing based on viewport state\n\n  react_1.useEffect(function () {\n    isResizingRef.current = viewportData.isResizing;\n\n    if (isResizingRef.current) {\n      callingReferenceIndexDataRef.current = __assign({}, referenceIndexDataRef.current);\n      pauseObserversRef.current = true;\n      saveCradleState('resizing');\n    }\n\n    if (!isResizingRef.current && cradlestateRef.current == 'resizing') {\n      saveCradleState('resize');\n    }\n  }, [viewportData.isResizing]); // ------------------------[ session data ]-----------------------\n  // current location\n\n  var _d = react_1.useState({\n    index: Math.min(offset, listsize - 1) || 0,\n    scrolloffset: 0\n  }),\n      referenceindexdata = _d[0],\n      saveReferenceindex = _d[1];\n\n  var referenceIndexDataRef = react_1.useRef(null); // access by closures\n\n  referenceIndexDataRef.current = referenceindexdata;\n  var lastReferenceIndexDataRef = react_1.useRef(null);\n  var isCradleInViewRef = react_1.useRef(true);\n\n  var _e = react_1.useState(null),\n      dropentries = _e[0],\n      saveDropentries = _e[1]; // trigger add entries\n\n\n  var _f = react_1.useState(null),\n      addentries = _f[0],\n      saveAddentries = _f[1]; // add entries\n\n\n  var contentlistRef = react_1.useRef([]);\n  var isScrollingRef = react_1.useRef(false);\n  var itemobserverRef = react_1.useRef(null);\n  var cradleobserverRef = react_1.useRef(null);\n  var cellSpecs = react_1.useMemo(function () {\n    return {\n      cellWidth: cellWidth,\n      cellHeight: cellHeight,\n      gap: gap,\n      padding: padding\n    };\n  }, [cellWidth, cellHeight, gap, padding]);\n  var cellSpecsRef = react_1.useRef(null);\n  cellSpecsRef.current = cellSpecs;\n  var divlinerStylesRef = react_1.useRef(Object.assign({\n    position: 'absolute',\n    backgroundColor: 'blue',\n    display: 'grid',\n    gridGap: gap + 'px',\n    padding: padding + 'px',\n    justifyContent: 'start',\n    alignContent: 'start',\n    boxSizing: 'border-box'\n  }, styles === null || styles === void 0 ? void 0 : styles.cradle));\n  var orientationRef = react_1.useRef(orientation);\n  orientationRef.current = orientation; // availability in closures\n\n  var divlinerStyleRevisionsRef = react_1.useRef(null); // for modifications by observer actions\n\n  var cradleElementRef = react_1.useRef(null);\n  var viewportDimensions = viewportData.viewportDimensions;\n  var viewportheight = viewportDimensions.height,\n      viewportwidth = viewportDimensions.width;\n  var crosscount = react_1.useMemo(function () {\n    var crosscount;\n    var size = orientation == 'horizontal' ? viewportheight : viewportwidth;\n    var crossLength = orientation == 'horizontal' ? cellHeight : cellWidth;\n    var lengthforcalc = size - padding * 2 + gap; // length of viewport\n\n    var tilelengthforcalc = crossLength + gap;\n    tilelengthforcalc = Math.min(tilelengthforcalc, lengthforcalc); // result cannot be less than 1\n\n    crosscount = Math.floor(lengthforcalc / tilelengthforcalc);\n    return crosscount;\n  }, [orientation, cellWidth, cellHeight, gap, padding, viewportheight, viewportwidth]); // ==============================================================================================\n  // ----------------------------------[ config management ]--------------------------------\n\n  var crosscountRef = react_1.useRef(crosscount); // for easy reference by observer\n\n  var previousCrosscountRef = react_1.useRef(); // available for resize logic\n\n  previousCrosscountRef.current = crosscountRef.current; // available for resize logic\n\n  crosscountRef.current = crosscount; // available for observer closure\n\n  divlinerStylesRef.current = react_1.useMemo(function () {\n    // merge base style and revisions (by observer)\n    var divlinerStyles = Object.assign(__assign({}, divlinerStylesRef.current), divlinerStyleRevisionsRef.current);\n    var styles = cradlefunctions_1.setCradleStyles({\n      orientation: orientation,\n      divlinerStyles: divlinerStyles,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      crosscount: crosscount,\n      viewportheight: viewportheight,\n      viewportwidth: viewportwidth\n    });\n    return styles;\n  }, [orientation, cellHeight, cellWidth, gap, padding, viewportheight, viewportwidth, crosscount, divlinerStyleRevisionsRef.current]);\n  react_1.useEffect(function () {\n    pauseObserversRef.current = true;\n    callingReferenceIndexDataRef.current = __assign({}, referenceIndexDataRef.current);\n    saveCradleState('reload');\n  }, [listsize, cellHeight, cellWidth, gap, padding]);\n  var itemElementsRef = react_1.useRef(new Map());\n  var scrollTimeridRef = react_1.useRef(null); // =================================================================================\n  // -------------------------[ IntersectionObserver support]-------------------------\n  // There are two observers, one for the cradle, and another for itemShells; both against\n  // the viewport.\n  // --------------------------[ cradle observer ]-----------------------------------\n  // this sets up an IntersectionObserver of the cradle against the viewport. When the\n  // cradle goes out of the observer scope, the \"repositioning\" cradle state is triggerd.\n\n  react_1.useEffect(function () {\n    cradleobserverRef.current = new IntersectionObserver(cradleobservercallback, {\n      root: viewportData.elementref.current\n    });\n    cradleobserverRef.current.observe(cradleElementRef.current);\n  }, []);\n  var cradleobservercallback = react_1.useCallback(function (entries) {\n    isCradleInViewRef.current = entries[0].isIntersecting; // console.log('isCradleInViewRef.current',isCradleInViewRef.current)\n  }, []); // --------------------------[ item shell observer ]-----------------------------\n\n  /*\n      The cradle content is driven by notifications from the IntersectionObserver.\n      - as the user scrolls the cradle, which has a runway at both the leading\n          and trailing edges, itemShells scroll into or out of the scope of the observer\n          (defined by the width/height of the viewport + the lengths of the runways). The observer\n          notifies the app (through itemobservercallback() below) at the crossings of the itemshells\n          of the defined observer cradle boundaries.\n           The no-longer-intersecting notifications trigger dropping of that number of affected items from\n          the cradle contentlist. The dropping of items from the trailing end of the content list\n          triggers the addition of an equal number of items at the leading edge of the cradle content.\n           Technically, the opposite end position spec is set (top or left depending on orientation),\n          and the matching end position spec is set to 'auto' when items are added. This causes items to be\n          \"squeezed\" into the leading or trailing ends of the ui content (out of view) as appropriate.\n           There are exceptions for setup and edge cases.\n  */\n\n  var dropcontentRef = react_1.useRef(null);\n  var dropstylesRef = react_1.useRef(null);\n  var dropcontentlistRef = react_1.useRef(null);\n  var addcontentRef = react_1.useRef(null);\n  var addstylesRef = react_1.useRef(null);\n  var addcontentlistRef = react_1.useRef(null); // the async callback from IntersectionObserver.\n\n  var itemobservercallback = react_1.useCallback(function (entries) {\n    // console.log('pauseObserversRef.current, cradlestateRef.current',pauseObserversRef.current, cradlestateRef.current)\n    if (pauseObserversRef.current) {\n      return;\n    }\n\n    if (cradlestateRef.current == 'ready') {\n      var dropentries_1 = entries.filter(function (entry) {\n        return !entry.isIntersecting;\n      }); // console.log('dropentries',dropentries)\n\n      if (dropentries_1.length) {\n        dropcontentRef.current = dropentries_1; // isMounted() && saveScrollState('dropcontent')\n\n        isMounted() && saveDropentries(dropentries_1); // console.log('dropentries', dropentries)\n      }\n    }\n  }, []); // drop scroll content\n\n  react_1.useEffect(function () {\n    if (dropentries === null) return; // if (scrollstate != 'dropcontent') return\n\n    var localdropentries = __spreadArrays(dropentries);\n\n    var contentlistcopy = __spreadArrays(contentlistRef.current); // let dropentries = dropcontentRef.current\n\n\n    dropcontentRef.current = null;\n    var sampleEntry = localdropentries[0];\n    var cradleElement = cradleElementRef.current;\n    var parentElement = cradleElement.parentElement;\n    var viewportElement = viewportData.elementref.current;\n    var scrollforward;\n    var localContentList; // -- isolate forward and backward lists\n    //  then set scrollforward\n\n    var forwardcount = 0,\n        backwardcount = 0;\n\n    for (var droprecordindex = 0; droprecordindex < localdropentries.length; droprecordindex++) {\n      if (orientation == 'vertical') {\n        if (sampleEntry.boundingClientRect.y - sampleEntry.rootBounds.y < 0) {\n          forwardcount++;\n        } else {\n          backwardcount++;\n        }\n      } else {\n        if (sampleEntry.boundingClientRect.x - sampleEntry.rootBounds.x < 0) {\n          forwardcount++;\n        } else {\n          backwardcount++;\n        }\n      }\n    }\n\n    var netshift = forwardcount - backwardcount;\n\n    if (netshift == 0) {\n      // saveScrollState('ready')\n      return;\n    }\n\n    scrollforward = forwardcount > backwardcount;\n    netshift = Math.abs(netshift); // = number of rows to shift * crosscount\n    // set pendingcontentoffset\n\n    var indexoffset = contentlistcopy[0].props.index;\n    var pendingcontentoffset;\n    var addcontentcount = Math.ceil(netshift / crosscountRef.current) * crosscountRef.current; // adjust in full row increments\n\n    console.log('starting addcontentcount in drop:netshift, indexoffset, addcontentcount, contentlistcopy.length', netshift, indexoffset, addcontentcount, contentlistcopy.length); // console.log('addcontentcount in drop',addcontentcount)\n\n    var headindexcount, tailindexcount;\n\n    if (scrollforward) {\n      pendingcontentoffset = indexoffset + netshift;\n      var proposedtailoffset = pendingcontentoffset + addcontentcount + (contentlistcopy.length - netshift - 1);\n\n      if (proposedtailoffset > listsize - 1) {\n        var diffitemcount = proposedtailoffset - (listsize - 1);\n        addcontentcount -= diffitemcount;\n        var diffrows = Math.floor(diffitemcount / crosscountRef.current);\n        var diffrowitems = diffrows * crosscountRef.current;\n        var netshiftadjustment = diffrowitems;\n        netshift -= netshiftadjustment;\n        console.log('drop vars ,indexoffset, netshift, pendingcontentoffset, proposedtailoffset, diffitemcount, \\\n                    diffrows, diffitems, netshiftadjustment, addcontentcount, netshift', indexoffset, netshift, pendingcontentoffset, proposedtailoffset, diffitemcount, diffrows, diffrowitems, netshiftadjustment, addcontentcount, netshift);\n\n        if (addcontentcount <= 0) {\n          // saveScrollState('ready')\n          // console.log('exiting scrollforward drop with addcontentcount',addcontentcount)\n          return;\n        }\n      }\n\n      headindexcount = -netshift;\n      tailindexcount = 0;\n    } else {\n      pendingcontentoffset = indexoffset;\n      var proposedindexoffset = pendingcontentoffset - addcontentcount;\n\n      if (proposedindexoffset < 0) {\n        var diffitemcount = -proposedindexoffset;\n        var diffrows = Math.floor(diffitemcount / crosscountRef.current);\n        var netshiftadjustment = diffrows * crosscountRef.current;\n        addcontentcount -= netshiftadjustment;\n        netshift -= netshiftadjustment;\n\n        if (addcontentcount <= 0) {\n          // console.log('exiting scrollbackward drop with addcontentcount',addcontentcount)\n          // saveScrollState('ready')\n          return;\n        }\n      }\n\n      headindexcount = 0;\n      tailindexcount = -netshift;\n    } // console.log('revised addcontentcount in drop',addcontentcount)\n\n\n    localContentList = cradlefunctions_1.getUIContentList({\n      indexoffset: indexoffset,\n      localContentList: __spreadArrays(contentlistcopy),\n      headindexcount: headindexcount,\n      tailindexcount: tailindexcount,\n      callbacksRef: callbacksRef\n    });\n    console.log('ending content count in drop', localContentList.length); // console.log('DROP localContentList',localContentList.length, indexoffset, contentlistRef.current, headindexcount, tailindexcount)\n\n    var styles = cradlefunctions_1.setCradleStyleRevisionsForDrop({\n      cradleElement: cradleElement,\n      parentElement: parentElement,\n      scrollforward: scrollforward,\n      orientation: orientation\n    }); // console.log('drop styles',{...styles})\n    // immediate change for modification, but an anti-pattern\n\n    var elementstyle = cradleElementRef.current.style;\n    elementstyle.top = styles.top;\n    elementstyle.bottom = styles.bottom;\n    elementstyle.left = styles.left;\n    elementstyle.right = styles.right; // console.log('drop styles',styles)\n\n    divlinerStyleRevisionsRef.current = styles;\n    contentlistRef.current = localContentList; // dropcontentlistRef.current = localContentList\n    // dropstylesRef.current = styles\n    // saveDropentries(null)\n    // addcontentRef.current = {count:addcontentcount,scrollforward,contentoffset:pendingcontentoffset}\n\n    saveAddentries({\n      count: addcontentcount,\n      scrollforward: scrollforward,\n      contentoffset: pendingcontentoffset\n    }); // saveScrollState('addcontent') // -> applydropcontent -> addcontent\n  }, [dropentries]); // add scroll content\n\n  react_1.useEffect(function () {\n    // saveAddentries(null)\n    // return\n    if (addentries === null) return; // if (scrollstate != 'addcontent') return\n\n    var localaddentries = __assign({}, addentries);\n\n    var localContentList = __spreadArrays(contentlistRef.current); // console.log('ADDING scroll content')\n    // let addentries = addcontentRef.current\n    // addcontentRef.current = null\n\n\n    var cradleElement = cradleElementRef.current;\n    var parentElement = cradleElement.parentElement;\n    var viewportElement = viewportData.elementref.current;\n    var scrollforward = localaddentries.scrollforward; // set localContentList\n\n    var contentoffset = localaddentries.contentoffset,\n        addcontentcount = localaddentries.count;\n    var headindexcount, tailindexcount;\n\n    if (scrollforward) {\n      headindexcount = 0, tailindexcount = addcontentcount;\n    } else {\n      headindexcount = addcontentcount;\n      tailindexcount = 0;\n    }\n\n    localContentList = cradlefunctions_1.getUIContentList({\n      localContentList: localContentList,\n      headindexcount: headindexcount,\n      tailindexcount: tailindexcount,\n      indexoffset: contentoffset,\n      orientation: orientation,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      observer: itemobserverRef.current,\n      crosscount: crosscount,\n      callbacksRef: callbacksRef,\n      getItem: getItem,\n      listsize: listsize,\n      placeholder: placeholder\n    });\n    console.log('ending content count in add', localContentList.length); // console.log('Add localContentList:,localContentList.length, contentoffset, headindexcount, tailindexcount',\n    //     localContentList.length, contentoffset, headindexcount, tailindexcount)\n\n    var styles = cradlefunctions_1.setCradleStyleRevisionsForAdd({\n      cradleElement: cradleElement,\n      parentElement: parentElement,\n      scrollforward: scrollforward,\n      orientation: orientation\n    }); // console.log('add styles',{...styles})\n    // console.log('styles, cradle offsetHeight, offsetTop',styles, cradleElement.offsetHeight, cradleElement.offsetTop)\n    // immediate change for modification\n\n    var elementstyle = cradleElementRef.current.style;\n    elementstyle.top = styles.top;\n    elementstyle.bottom = styles.bottom;\n    elementstyle.left = styles.left;\n    elementstyle.right = styles.right; // addstylesRef.current = styles\n\n    divlinerStyleRevisionsRef.current = styles; // addcontentlistRef.current = localContentList\n\n    contentlistRef.current = localContentList; // saveScrollState('applyaddstyles') // -> applyaddcontent -> ready\n    // console.log('addentries',addentries)\n    // saveScrollState('ready')\n\n    saveAddentries(null);\n  }, [addentries]); // End of IntersectionObserver support\n  // ========================================================================================\n  // -------------------------------[ Assembly of content]-----------------------------------\n  // reset cradle\n\n  var setCradleContent = react_1.useCallback(function (cradleState, referenceIndexData) {\n    var visibletargetindexoffset = referenceIndexData.index,\n        visibletargetscrolloffset = referenceIndexData.scrolloffset;\n    if (cradleState == 'reposition') visibletargetscrolloffset = 0;\n    var localContentList = []; // any duplicated items will be re-used by react\n\n    var _a = cradlefunctions_1.getContentListRequirements({\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      orientation: orientation,\n      viewportheight: viewportheight,\n      viewportwidth: viewportwidth,\n      runwaylength: runwaylength,\n      gap: gap,\n      padding: padding,\n      visibletargetindexoffset: visibletargetindexoffset,\n      targetScrollOffset: visibletargetscrolloffset,\n      crosscount: crosscount,\n      listsize: listsize\n    }),\n        indexoffset = _a.indexoffset,\n        referenceoffset = _a.referenceoffset,\n        contentCount = _a.contentCount,\n        scrollblockoffset = _a.scrollblockoffset,\n        cradleoffset = _a.cradleoffset;\n\n    referenceIndexDataRef.current = {\n      index: referenceoffset,\n      scrolloffset: visibletargetscrolloffset\n    };\n    reportReferenceIndexRef.current && reportReferenceIndexRef.current(referenceIndexDataRef.current.index);\n    saveReferenceindex(referenceIndexDataRef.current);\n    var childlist = cradlefunctions_1.getUIContentList({\n      indexoffset: indexoffset,\n      headindexcount: 0,\n      tailindexcount: contentCount,\n      orientation: orientation,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      localContentList: localContentList,\n      observer: itemobserverRef.current,\n      crosscount: crosscount,\n      callbacksRef: callbacksRef,\n      getItem: getItem,\n      listsize: listsize,\n      placeholder: placeholder\n    });\n    contentDataRef.current = childlist;\n    var elementstyle = cradleElementRef.current.style;\n    var styles = {};\n\n    if (orientation == 'vertical') {\n      styles.top = cradleoffset + 'px';\n      styles.bottom = 'auto';\n      styles.left = 'auto';\n      styles.right = 'auto';\n      positionDataRef.current = {\n        property: 'scrollTop',\n        value: scrollblockoffset\n      };\n    } else {\n      // orientation = 'horizontal'\n      styles.top = 'auto';\n      styles.bottom = styles.bottom = 'auto';\n      styles.left = cradleoffset + 'px';\n      styles.right = 'auto';\n      positionDataRef.current = {\n        property: 'scrollLeft',\n        value: scrollblockoffset\n      };\n    }\n\n    layoutDataRef.current = styles;\n  }, [cellHeight, cellWidth, orientation, viewportheight, viewportwidth, runwaylength, gap, padding, crosscount]); // =====================================================================================\n  // ----------------------------------[ state management ]-------------------------------\n  // callback for scroll\n\n  var onScroll = react_1.useCallback(function () {\n    if (!isScrollingRef.current) {\n      isScrollingRef.current = true;\n    }\n\n    clearTimeout(scrollTimeridRef.current);\n    scrollTimeridRef.current = setTimeout(function () {\n      isScrollingRef.current = false;\n      var cradleState = cradlestateRef.current;\n\n      if (!isResizingRef.current && !viewportDataRef.current.isResizing) {\n        cradleState != 'repositioning' && cradlefunctions_1.normalizeCradleAnchors(cradleElementRef.current, orientationRef.current);\n        saveReferenceindex(__assign({}, referenceIndexDataRef.current)); // trigger re-run to capture end of scroll session values\n\n        lastReferenceIndexDataRef.current = __assign({}, referenceIndexDataRef.current);\n      }\n\n      switch (cradleState) {\n        case 'repositioning':\n          {\n            pauseObserversRef.current = true;\n            callingReferenceIndexDataRef.current = __assign({}, referenceIndexDataRef.current);\n            saveCradleState('reposition');\n            break;\n          }\n      }\n    }, SCROLL_TIMEOUT_FOR_ONAFTERSCROLL);\n\n    if (!isResizingRef.current && !viewportDataRef.current.isResizing) {\n      var cradleState = cradlestateRef.current;\n\n      if (cradleState == 'ready' || cradleState == 'repositioning') {\n        referenceIndexDataRef.current = cradlefunctions_1.getReferenceIndexData({\n          orientation: orientationRef.current,\n          viewportData: viewportDataRef.current,\n          cellSpecsRef: cellSpecsRef,\n          crosscountRef: crosscountRef,\n          listsize: listsizeRef.current\n        });\n        reportReferenceIndexRef.current && reportReferenceIndexRef.current(referenceIndexDataRef.current.index);\n        saveReferenceindex(referenceIndexDataRef.current);\n      }\n    }\n\n    if (!isCradleInViewRef.current && !pauseObserversRef.current && !isResizingRef.current && !(cradlestateRef.current == 'resize') && !(cradlestateRef.current == 'repositioning') && !(cradlestateRef.current == 'reposition')) {\n      var rect = viewportDataRef.current.elementref.current.getBoundingClientRect();\n      var top_1 = rect.top,\n          right = rect.right,\n          bottom = rect.bottom,\n          left = rect.left;\n      var width = right - left,\n          height = bottom - top_1;\n      viewportDataRef.current.viewportDimensions = {\n        top: top_1,\n        right: right,\n        bottom: bottom,\n        left: left,\n        width: width,\n        height: height\n      }; // update for scrolltracker\n\n      saveCradleState('repositioning');\n    }\n  }, []); // trigger pivot on change in orientation\n\n  react_1.useEffect(function () {\n    var rootMargin;\n\n    if (orientation == 'horizontal') {\n      rootMargin = \"0px \" + runwaylength + \"px 0px \" + runwaylength + \"px\";\n    } else {\n      rootMargin = runwaylength + \"px 0px \" + runwaylength + \"px 0px\";\n    } // console.log('rootMargin',options)\n\n\n    itemobserverRef.current = new IntersectionObserver(itemobservercallback, {\n      root: viewportData.elementref.current,\n      rootMargin: rootMargin,\n      threshold: 0\n    });\n    contentlistRef.current = [];\n\n    if (cradlestate != 'setup') {\n      pauseObserversRef.current = true;\n      callingReferenceIndexDataRef.current = __assign({}, lastReferenceIndexDataRef.current);\n      saveCradleState('pivot');\n    }\n  }, [orientation, listsize, cellHeight, cellWidth, gap, padding]);\n  react_1.useLayoutEffect(function () {\n    // console.log('processing scrollstate',scrollstate)\n    switch (scrollstate) {\n      case 'applydropstyles':\n        {\n          // console.log('APPLYING drop styles')\n          divlinerStyleRevisionsRef.current = dropstylesRef.current;\n          saveScrollState('applydropcontent');\n          break;\n        }\n\n      case 'applydropcontent':\n        {\n          // console.log('APPLYING drop content')\n          contentlistRef.current = dropcontentlistRef.current;\n          saveScrollState('addcontent');\n          break;\n        }\n\n      case 'applyaddstyles':\n        {\n          // console.log('APPLYING add styles')\n          divlinerStyleRevisionsRef.current = addstylesRef.current;\n          saveScrollState('applyaddcontent');\n          break;\n        }\n\n      case 'applyaddcontent':\n        {\n          // console.log('APPLYING add content')\n          contentlistRef.current = addcontentlistRef.current;\n          saveScrollState('ready');\n          break;\n        }\n    }\n  }, [scrollstate]); // data for state processing\n\n  var callingCradleState = react_1.useRef(cradlestateRef.current);\n  var callingReferenceIndexDataRef = react_1.useRef(referenceIndexDataRef.current);\n  var layoutDataRef = react_1.useRef(null);\n  var positionDataRef = react_1.useRef(null);\n  var contentDataRef = react_1.useRef(null); // this is the core state engine\n  // useLayout for suppressing flashes\n\n  react_1.useLayoutEffect(function () {\n    switch (cradlestate) {\n      case 'reload':\n        contentlistRef.current = [];\n        saveCradleState('reposition');\n        break;\n\n      case 'position':\n        {\n          viewportData.elementref.current[positionDataRef.current.property] = positionDataRef.current.value;\n          saveCradleState('layout');\n          break;\n        }\n\n      case 'layout':\n        {\n          divlinerStyleRevisionsRef.current = layoutDataRef.current;\n          saveCradleState('content');\n          break;\n        }\n\n      case 'content':\n        {\n          contentlistRef.current = contentDataRef.current;\n          saveCradleState('normalize');\n          break;\n        }\n    }\n  }, [cradlestate]); // standard processing stages\n\n  react_1.useEffect(function () {\n    switch (cradlestate) {\n      case 'setup':\n      case 'resize':\n      case 'pivot':\n      case 'reposition':\n        callingCradleState.current = cradlestate;\n        saveCradleState('settle');\n        break;\n\n      case 'settle':\n        {\n          setCradleContent(callingCradleState.current, callingReferenceIndexDataRef.current);\n          saveCradleState('position');\n          break;\n        }\n\n      case 'normalize':\n        {\n          setTimeout(function () {\n            // redundant scroll position to avoid accidental positioning at tail end of reposition\n            if (viewportData.elementref.current) {\n              // already unmounted if fails\n              viewportData.elementref.current[positionDataRef.current.property] = positionDataRef.current.value;\n              cradlefunctions_1.normalizeCradleAnchors(cradleElementRef.current, orientationRef.current);\n              lastReferenceIndexDataRef.current = __assign({}, referenceIndexDataRef.current);\n              pauseObserversRef.current && (pauseObserversRef.current = false);\n            }\n          }, 66);\n          saveCradleState('ready');\n          break;\n        }\n\n      case 'ready':\n        break;\n    }\n  }, [cradlestate]); // =============================================================================\n  // ------------------------------[ callbacks ]----------------------------------\n  // on host demand\n\n  var getVisibleList = react_1.useCallback(function () {\n    var itemlist = Array.from(itemElementsRef.current);\n    return cradlefunctions_1.calcVisibleItems(itemlist, viewportData.elementref.current, cradleElementRef.current, orientationRef.current);\n  }, []);\n  var getContentList = react_1.useCallback(function () {\n    return Array.from(itemElementsRef.current);\n  }, []);\n  var reload = react_1.useCallback(function () {\n    saveCradleState('reload');\n  }, []);\n  var scrollToItem = react_1.useCallback(function (index, alignment) {\n    if (alignment === void 0) {\n      alignment = 'nearest';\n    }\n\n    console.log('requested scrollToItem', index, alignment);\n    callingReferenceIndexDataRef.current = {\n      index: 0,\n      scrolloffset: 0\n    };\n    saveCradleState('reposition');\n  }, []); // content item registration\n\n  var getItemElementData = react_1.useCallback(function (itemElementData, reportType) {\n    var index = itemElementData[0],\n        shellref = itemElementData[1];\n\n    if (reportType == 'register') {\n      itemElementsRef.current.set(index, shellref);\n    } else if (reportType == 'unregister') {\n      itemElementsRef.current[\"delete\"](index);\n    }\n  }, []);\n  var callbacksRef = react_1.useRef({\n    getElementData: getItemElementData\n  }); // =============================================================================\n  // ------------------------------[ render... ]----------------------------------\n\n  var divlinerstyles = divlinerStylesRef.current;\n  return react_1[\"default\"].createElement(react_1[\"default\"].Fragment, null, cradlestateRef.current == 'repositioning' ? react_1[\"default\"].createElement(scrolltracker_1[\"default\"], {\n    top: viewportDimensions.top + 3,\n    left: viewportDimensions.left + 3,\n    offset: referenceIndexDataRef.current.index,\n    listsize: listsize,\n    styles: styles\n  }) : null, react_1[\"default\"].createElement(\"div\", {\n    ref: cradleElementRef,\n    style: divlinerstyles\n  }, cradlestateRef.current != 'setup' ? contentlistRef.current : null));\n}; // Cradle\n\n\nexports[\"default\"] = Cradle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle.tsx\n");

/***/ }),

/***/ "./src/cradlefunctions.tsx":
/*!*********************************!*\
  !*** ./src/cradlefunctions.tsx ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // cradlefunctions.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/******************************************************************************************\n ------------------------------------[ SUPPORTING FUNCTIONS ]------------------------------\n*******************************************************************************************/\n\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar itemshell_1 = __importDefault(__webpack_require__(/*! ./itemshell */ \"./src/itemshell.tsx\"));\n\nexports.calcVisibleItems = function (itemsArray, viewportElement, cradleElement, orientation) {\n  var list = [];\n  var cradleTop = cradleElement.offsetTop,\n      cradleLeft = cradleElement.offsetLeft;\n  var scrollblockTopOffset = -viewportElement.scrollTop,\n      scrollblockLeftOffset = -viewportElement.scrollLeft,\n      viewportHeight = viewportElement.offsetHeight,\n      viewportWidth = viewportElement.offsetWidth,\n      viewportTopOffset = -scrollblockTopOffset,\n      viewportBottomOffset = -scrollblockTopOffset + viewportHeight;\n\n  for (var i = 0; i < itemsArray.length; i++) {\n    var _a = itemsArray[i],\n        index = _a[0],\n        elementRef = _a[1];\n    var element = elementRef.current;\n    var top_1 = element.offsetTop,\n        left = element.offsetLeft,\n        width = element.offsetWidth,\n        height = element.offsetHeight,\n        right = left + width,\n        bottom = top_1 + height;\n    var itemTopOffset = scrollblockTopOffset + cradleTop + top_1,\n        // offset from top of viewport\n    itemBottomOffset = scrollblockTopOffset + cradleTop + bottom,\n        // offset from top of viewport\n    itemLeftOffset = scrollblockLeftOffset + cradleLeft + left,\n        itemRightOffset = scrollblockLeftOffset + cradleLeft + right;\n    var isVisible = false; // default\n\n    var topPortion = void 0,\n        bottomPortion = void 0,\n        leftPortion = void 0,\n        rightPortion = void 0;\n\n    if (itemTopOffset < 0 && itemBottomOffset > 0) {\n      orientation == 'vertical' && (isVisible = true);\n      bottomPortion = itemBottomOffset;\n      topPortion = bottomPortion - height;\n    } else if (itemTopOffset >= 0 && itemBottomOffset < viewportHeight) {\n      orientation == 'vertical' && (isVisible = true);\n      topPortion = height;\n      bottomPortion = 0;\n    } else if (itemTopOffset > 0 && itemTopOffset - viewportHeight < 0) {\n      orientation == 'vertical' && (isVisible = true);\n      topPortion = viewportHeight - itemTopOffset;\n      bottomPortion = topPortion - height;\n    } else {\n      if (orientation == 'vertical') continue;\n    }\n\n    if (itemLeftOffset < 0 && itemRightOffset > 0) {\n      orientation == 'horizontal' && (isVisible = true);\n      rightPortion = itemRightOffset;\n      leftPortion = rightPortion - width;\n    } else if (itemLeftOffset >= 0 && itemRightOffset < viewportWidth) {\n      orientation == 'horizontal' && (isVisible = true);\n      leftPortion = width;\n      rightPortion = 0;\n    } else if (itemLeftOffset > 0 && itemLeftOffset - viewportWidth < 0) {\n      orientation == 'horizontal' && (isVisible = true);\n      leftPortion = viewportWidth - itemLeftOffset;\n      rightPortion = leftPortion - width;\n    } else {\n      if (orientation == 'horizontal') continue;\n    }\n\n    var verticalRatio = topPortion > 0 ? topPortion / height : bottomPortion / height,\n        horizontalRatio = leftPortion > 0 ? leftPortion / width : rightPortion / height;\n    var itemData = {\n      index: index,\n      isVisible: isVisible,\n      top: top_1,\n      right: right,\n      bottom: bottom,\n      left: left,\n      width: width,\n      height: height,\n      itemTopOffset: itemTopOffset,\n      itemBottomOffset: itemBottomOffset,\n      topPortion: topPortion,\n      bottomPortion: bottomPortion,\n      itemLeftOffset: itemLeftOffset,\n      itemRightOffset: itemRightOffset,\n      leftPortion: leftPortion,\n      rightPortion: rightPortion,\n      verticalRatio: verticalRatio,\n      horizontalRatio: horizontalRatio\n    };\n    list.push(itemData);\n  }\n\n  list.sort(function (a, b) {\n    return a.index - b.index;\n  });\n  return list;\n};\n\nexports.getReferenceIndexData = function (_a) {\n  var orientation = _a.orientation,\n      viewportData = _a.viewportData,\n      cellSpecsRef = _a.cellSpecsRef,\n      crosscountRef = _a.crosscountRef,\n      listsize = _a.listsize;\n  var cellSpecs = cellSpecsRef.current;\n  var viewportElement = viewportData.elementref.current;\n  var scrollPos, cellLength;\n\n  if (orientation == 'vertical') {\n    scrollPos = viewportElement.scrollTop;\n    cellLength = cellSpecs.cellHeight + cellSpecs.gap;\n  } else {\n    scrollPos = viewportElement.scrollLeft;\n    cellLength = cellSpecs.cellWidth + cellSpecs.gap;\n  }\n\n  var referencescrolloffset = cellLength - scrollPos % cellLength; // + cellSpecs.padding\n\n  if (referencescrolloffset == cellLength + cellSpecs.padding) referencescrolloffset = 0;\n  var referencerowindex = Math.ceil((scrollPos - cellSpecs.padding) / cellLength);\n  var referenceindex = referencerowindex * crosscountRef.current;\n  var referenceIndexData = {\n    index: Math.min(referenceindex, listsize - 1),\n    scrolloffset: referencescrolloffset\n  };\n  if (referenceIndexData.index == 0) referenceIndexData.scrolloffset = 0; // defensive\n\n  return referenceIndexData;\n}; // evaluate content for requirements\n\n\nexports.getContentListRequirements = function (_a) {\n  // -------------[ calc basic inputs: cellLength, contentCount. ]----------\n  var orientation = _a.orientation,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      viewportheight = _a.viewportheight,\n      viewportwidth = _a.viewportwidth,\n      runwaylength = _a.runwaylength,\n      gap = _a.gap,\n      padding = _a.padding,\n      visibletargetindexoffset = _a.visibletargetindexoffset,\n      targetScrollOffset = _a.targetScrollOffset,\n      crosscount = _a.crosscount,\n      listsize = _a.listsize;\n  var cradleContentLength, cellLength, viewportlength;\n\n  if (orientation == 'vertical') {\n    cellLength = cellHeight + gap;\n    viewportlength = viewportheight;\n  } else {\n    cellLength = cellWidth + gap;\n    viewportlength = viewportwidth;\n  }\n\n  cradleContentLength = viewportlength + runwaylength * 2;\n  var cradlerowcount = Math.ceil(cradleContentLength / cellLength);\n  var contentCount = cradlerowcount * crosscount;\n  if (contentCount > listsize) contentCount = listsize; // -----------------------[ calc leadingitemcount, referenceoffset ]-----------------------\n\n  var cradleleadingrowcount = Math.floor(runwaylength / cellLength);\n  var leadingitemcount = cradleleadingrowcount * crosscount;\n  var targetdiff = visibletargetindexoffset % crosscount;\n  var referenceoffset = visibletargetindexoffset - targetdiff; // part of return message\n\n  leadingitemcount += targetdiff;\n  leadingitemcount = Math.min(leadingitemcount, visibletargetindexoffset); // for list head\n  // -----------------------[ calc indexoffset ]------------------------\n  // leading edge\n\n  var indexoffset = visibletargetindexoffset - leadingitemcount;\n  var diff = indexoffset % crosscount;\n  indexoffset -= diff; // ------------[ adjust indexoffset and contentCount for listsize ]------------\n\n  diff = 0;\n  var shift = 0;\n\n  if (indexoffset + contentCount > listsize) {\n    diff = indexoffset + contentCount - listsize;\n    shift = diff % crosscount;\n  }\n\n  if (diff) {\n    indexoffset -= diff - shift;\n    contentCount -= shift;\n  } // --------------------[ calc css positioning ]-----------------------\n\n\n  var indexrowoffset = Math.floor(indexoffset / crosscount);\n  var cradleoffset = indexrowoffset * cellLength;\n  var targetrowoffset = Math.floor(visibletargetindexoffset / crosscount);\n  var rowscrollblockoffset = targetrowoffset * cellLength;\n  var scrollblockoffset = Math.max(0, rowscrollblockoffset - targetScrollOffset);\n  return {\n    indexoffset: indexoffset,\n    referenceoffset: referenceoffset,\n    contentCount: contentCount,\n    scrollblockoffset: scrollblockoffset,\n    cradleoffset: cradleoffset\n  }; // summarize requirements message\n}; // this makes ui resize less visually jarring\n\n\nexports.normalizeCradleAnchors = function (cradleElement, orientation) {\n  var styles = {};\n  var stylerevisions = {};\n\n  if (orientation == 'vertical') {\n    if (cradleElement.style.top == 'auto') {\n      styles.top = cradleElement.offsetTop + 'px';\n      styles.bottom = 'auto';\n      styles.left = 'auto';\n      styles.right = 'auto';\n    }\n  } else {\n    if (cradleElement.style.left == 'auto') {\n      styles.left = cradleElement.offsetLeft + 'px';\n      styles.right = 'auto';\n      styles.top = 'auto';\n      styles.bottom = 'auto';\n    }\n  }\n\n  for (var style in styles) {\n    cradleElement.style[style] = styles[style];\n  }\n}; // update content\n// adds itemshells at end of contentlist according to headindexcount and tailindescount,\n// or if indexcount values are <0 removes them.\n\n\nexports.getUIContentList = function (props) {\n  var indexoffset = props.indexoffset,\n      headindexcount = props.headindexcount,\n      tailindexcount = props.tailindexcount,\n      orientation = props.orientation,\n      cellHeight = props.cellHeight,\n      cellWidth = props.cellWidth,\n      contentlist = props.localContentList,\n      crosscount = props.crosscount,\n      listsize = props.listsize,\n      callbacksRef = props.callbacksRef,\n      getItem = props.getItem,\n      placeholder = props.placeholder,\n      observer = props.observer; // console.log('getUIContentList: indexoffset, headindexcount, tailindexcount, \\\n  //     orientation, cellHeight, cellWidth, \\\n  //     crosscount, listsize, contentlist',\n  //     indexoffset, \n  //     headindexcount, \n  //     tailindexcount, \n  //     orientation, \n  //     cellHeight, \n  //     cellWidth, \n  //     crosscount,\n  //     listsize,\n  //     contentlist,\n  // )\n\n  var localContentlist = __spreadArrays(contentlist);\n\n  var tailindexoffset = indexoffset + contentlist.length;\n  var returnContentlist;\n  var headContentlist = [];\n\n  if (headindexcount >= 0) {\n    for (var index = indexoffset - headindexcount; index < indexoffset; index++) {\n      headContentlist.push(emitItem({\n        index: index,\n        orientation: orientation,\n        cellHeight: cellHeight,\n        cellWidth: cellWidth,\n        observer: observer,\n        callbacksRef: callbacksRef,\n        getItem: getItem,\n        listsize: listsize,\n        placeholder: placeholder\n      }));\n    }\n  } else {\n    localContentlist.splice(0, -headindexcount);\n  }\n\n  var tailContentlist = [];\n\n  if (tailindexcount >= 0) {\n    for (var index = tailindexoffset; index < tailindexoffset + tailindexcount; index++) {\n      tailContentlist.push(emitItem({\n        index: index,\n        orientation: orientation,\n        cellHeight: cellHeight,\n        cellWidth: cellWidth,\n        observer: observer,\n        callbacksRef: callbacksRef,\n        getItem: getItem,\n        listsize: listsize,\n        placeholder: placeholder\n      }));\n    }\n  } else {\n    localContentlist.splice(tailindexcount, -tailindexcount);\n  }\n\n  returnContentlist = headContentlist.concat(localContentlist, tailContentlist); // console.log('returnContentlist',returnContentlist)\n\n  return returnContentlist;\n};\n\nvar emitItem = function emitItem(_a) {\n  var index = _a.index,\n      orientation = _a.orientation,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      observer = _a.observer,\n      callbacksRef = _a.callbacksRef,\n      getItem = _a.getItem,\n      listsize = _a.listsize,\n      placeholder = _a.placeholder;\n  return react_1[\"default\"].createElement(itemshell_1[\"default\"], {\n    key: index,\n    orientation: orientation,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    index: index,\n    observer: observer,\n    callbacks: callbacksRef,\n    getItem: getItem,\n    listsize: listsize,\n    placeholder: placeholder\n  });\n}; // ========================================================================================\n// ------------------------------------[ styles ]------------------------------------------\n// ========================================================================================\n\n\nexports.setCradleStyles = function (_a) {\n  var orientation = _a.orientation,\n      stylesobject = _a.divlinerStyles,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      crosscount = _a.crosscount,\n      viewportheight = _a.viewportheight,\n      viewportwidth = _a.viewportwidth;\n  var styles = Object.assign({}, stylesobject);\n\n  if (orientation == 'horizontal') {\n    styles.width = 'auto';\n    styles.height = '100%';\n    styles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n    //     sets length of horiz cradle items in one line (row), not multi-row config\n\n    styles.gridTemplateRows = cellHeight ? \"repeat(\" + crosscount + \", minmax(\" + cellHeight + \"px, 1fr))\" : 'auto';\n    styles.gridTemplateColumns = 'none'; // styles.minWidth = viewportwidth + 'px'\n    // styles.minHeight = 0\n  } else if (orientation == 'vertical') {\n    styles.width = '100%';\n    styles.height = 'auto';\n    styles.gridAutoFlow = 'row';\n    styles.gridTemplateRows = 'none';\n    styles.gridTemplateColumns = cellWidth ? \"repeat(auto-fit, minmax(\" + cellWidth + \"px, 1fr))\" : 'auto'; // styles.minWidth = 0\n    // styles.minHeight = viewportheight + 'px'\n  }\n\n  return styles;\n};\n\nexports.setCradleStyleRevisionsForDrop = function (_a) {\n  var cradleElement = _a.cradleElement,\n      parentElement = _a.parentElement,\n      scrollforward = _a.scrollforward,\n      orientation = _a.orientation;\n  var styles = {};\n  var headpos, tailpos; // set styles revisions\n\n  if (orientation == 'vertical') {\n    // console.log('for DROP top, bottom',cradleElement.style.top,cradleElement.style.bottom)\n    var offsetHeight = cradleElement.offsetHeight;\n    var parentHeight = parentElement.offsetHeight;\n    var offsetTop = cradleElement.offsetTop; // let csstop = parseInt(cradleElement.style.top)\n    // let cssbottom = parseInt(cradleElement.style.bottom)\n    // let offsetTop\n    // if (isNaN(csstop)) {\n    //     offsetTop = (parentHeight - cssbottom) - offsetHeight \n    // } else {\n    //     offsetTop = csstop\n    // }\n    // let directoffsetTop = cradleElement.offsetTop\n    // console.log('DROP offsetHeight, parentHeight, csstop, cssbottom, calcoffsetTop, offsetTop',\n    //     offsetHeight, parentHeight, csstop, cssbottom, calcoffsetTop, offsetTop)\n\n    styles.left = 'auto';\n    styles.right = 'auto';\n\n    if (scrollforward) {\n      tailpos = offsetTop + offsetHeight;\n      styles.top = 'auto';\n      styles.bottom = parentHeight - tailpos + 'px';\n    } else {\n      headpos = offsetTop;\n      styles.top = headpos + 'px';\n      styles.bottom = 'auto';\n    }\n  } else {\n    var offsetLeft = cradleElement.offsetLeft;\n    var offsetWidth = cradleElement.offsetWidth;\n    var parentWidth = parentElement.offsetWidth;\n    var cssleft = parseInt(cradleElement.style.left);\n    var cssright = parseInt(cradleElement.style.bottom); // let offsetLeft\n    // if (isNaN(cssleft)) {\n    //     offsetLeft = cssright - parentWidth - offsetWidth\n    // } else {\n    //     offsetLeft = cssleft\n    // }\n\n    styles.top = 'auto';\n    styles.bottom = 'auto';\n\n    if (scrollforward) {\n      tailpos = offsetLeft + offsetWidth;\n      styles.left = 'auto';\n      styles.right = parentWidth - tailpos + 'px';\n    } else {\n      headpos = offsetLeft;\n      styles.left = headpos + 'px';\n      styles.right = 'auto';\n    }\n  }\n\n  return styles;\n};\n\nexports.setCradleStyleRevisionsForAdd = function (_a) {\n  var cradleElement = _a.cradleElement,\n      parentElement = _a.parentElement,\n      scrollforward = _a.scrollforward,\n      orientation = _a.orientation;\n  var styles = {};\n  var headpos, tailpos; // set style revisions\n\n  if (orientation == 'vertical') {\n    // console.log('for ADD top, bottom',cradleElement.style.top,cradleElement.style.bottom)\n    // let offsetTop\n    var offsetHeight = cradleElement.offsetHeight;\n    var parentHeight = parentElement.offsetHeight;\n    var csstop = parseInt(cradleElement.style.top);\n    var cssbottom = parseInt(cradleElement.style.bottom);\n    var offsetTop = cradleElement.offsetTop; // let offsetTop\n    // if (isNaN(csstop)) {\n    //     offsetTop = parentHeight - cssbottom  - offsetHeight\n    // } else {\n    //     offsetTop = csstop\n    // }\n    // console.log('ADD cssbottom, csstop, parentHeight, offsetHeight',\n    //     cssbottom,csstop, cradleElement.style.bottom, cradleElement.style.top, parentHeight, offsetHeight)\n    // let directoffsetTop = cradleElement.offsetTop\n    // console.log('ADD calcoffsetTop, offsetTop',calcoffsetTop,offsetTop)\n\n    styles.left = 'auto';\n    styles.right = 'auto';\n\n    if (scrollforward) {\n      headpos = offsetTop;\n      styles.top = headpos + 'px';\n      styles.bottom = 'auto';\n    } else {\n      // scroll backward\n      tailpos = offsetTop + offsetHeight;\n      styles.top = 'auto';\n      styles.bottom = parentHeight - tailpos + 'px';\n    }\n  } else {\n    var offsetLeft = cradleElement.offsetLeft;\n    var offsetWidth = cradleElement.offsetWidth;\n    var parentWidth = parentElement.offsetWidth;\n    var cssleft = parseInt(cradleElement.style.left);\n    var cssright = parseInt(cradleElement.style.bottom); // let offsetLeft\n    // if (isNaN(cssleft)) {\n    //     offsetLeft = cssright - parentWidth - offsetWidth\n    // } else {\n    //     offsetLeft = cssleft\n    // }\n\n    styles.top = 'auto';\n    styles.bottom = 'auto';\n\n    if (scrollforward) {\n      headpos = offsetLeft;\n      styles.left = headpos + 'px';\n      styles.right = 'auto';\n    } else {\n      // scroll backward\n      tailpos = offsetLeft + offsetWidth;\n      styles.left = 'auto';\n      styles.right = parentWidth - tailpos + 'px';\n    }\n  }\n\n  return styles;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradlefunctions.tsx\n");

/***/ }),

/***/ "./src/infinitegridscroller.tsx":
/*!**************************************!*\
  !*** ./src/infinitegridscroller.tsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // infinitegridscroller.tsx\n// copyright (c) 2019 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __importDefault(__webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\"));\n\nvar scrollblock_1 = __importDefault(__webpack_require__(/*! ./scrollblock */ \"./src/scrollblock.tsx\"));\n\nvar cradle_1 = __importDefault(__webpack_require__(/*! ./cradle */ \"./src/cradle.tsx\"));\n/*\n    BACKLOG:\n    - cache: none/preload/keepload\n*/\n// ===================================[ INITIALIZE ]===========================\n\n/*\n    The job of InfiniteGridScroller is to pass parameters to dependents.\n    Viewport contains the scrollblock, which in turn contains the cradle\n        - a component that contains displayed (or nearly displayed) items.\n    The items are skeletons which contain the host content components.\n\n    Scrollblock virtually represents the entirety of the list, and of course scrolls\n    Cradle contains the list items, and is 'virtualiized' -- it appears as\n      though it is the full scrollblock, but in fact it is only slightly larger than\n      the viewport.\n    - individual items are framed by ItemShell, managed by Cradle\n\n    Overall the infinitegridscroller manages the often asynchronous interactions of the\n    components of the mechanism\n*/\n\n\nvar InfiniteGridScroller = function InfiniteGridScroller(props) {\n  var _a, _b, _c, _d, _e, _f;\n\n  var orientation = props.orientation,\n      // vertical or horizontal\n  gap = props.gap,\n      // space between grid cells, not including the leading and trailing edges\n  padding = props.padding,\n      // the space between the items and the viewport, applied to the cradle\n  cellHeight = props.cellHeight,\n      // the outer pixel height - literal for vertical; approximate for horizontal\n  cellWidth = props.cellWidth,\n      // the outer pixel width - literal for horizontal; approximate for vertical\n  runway = props.runway,\n      // the number of items outside the view of each side of the viewport \n  // -- gives time to assemble before display\n  listsize = props.listsize,\n      // the exact number of the size of the virtual list\n  offset = props.offset,\n      // the 0-based starting index of the list, when first loaded\n  getItem = props.getItem,\n      // function provided by host - parameter is index number, set by system; return value is \n  // host-selected component or promise of a component\n  component = props.component,\n      // properties with direct access to some component utilites, optional\n  placeholder = props.placeholder,\n      // a sparse component to stand in for content until the content arrives; \n  // optional, replaces default\n  styles = props.styles; // defaults\n\n  (_a = component) !== null && _a !== void 0 ? _a : component = {};\n  (_b = gap) !== null && _b !== void 0 ? _b : gap = 0;\n  (_c = padding) !== null && _c !== void 0 ? _c : padding = 0;\n  (_d = runway) !== null && _d !== void 0 ? _d : runway = 3;\n  (_e = offset) !== null && _e !== void 0 ? _e : offset = 0;\n  (_f = listsize) !== null && _f !== void 0 ? _f : listsize = 0; // constraints\n\n  offset = Math.max(0, offset); // non-negative\n\n  offset = Math.min(listsize, offset); // not larger than list\n\n  if (!['horizontal', 'vertical'].includes(orientation)) {\n    orientation = 'horizontal';\n  } // convert to pixels\n\n\n  var runwaylength = orientation == 'vertical' ? runway * (cellHeight + gap) : runway * (cellWidth + gap);\n  runwaylength && (runwaylength += padding * 2);\n  return react_1[\"default\"].createElement(viewport_1[\"default\"], {\n    orientation: orientation,\n    cellWidth: cellHeight,\n    cellHeight: cellHeight,\n    gap: gap,\n    padding: padding,\n    component: component,\n    styles: styles\n  }, react_1[\"default\"].createElement(scrollblock_1[\"default\"], {\n    listsize: listsize,\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    gap: gap,\n    padding: padding,\n    orientation: orientation,\n    component: component,\n    styles: styles\n  }, react_1[\"default\"].createElement(cradle_1[\"default\"], {\n    gap: gap,\n    padding: padding,\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    listsize: listsize,\n    offset: offset,\n    orientation: orientation,\n    runwaylength: runwaylength,\n    getItem: getItem,\n    component: component,\n    placeholder: placeholder,\n    styles: styles\n  })));\n};\n\nexports[\"default\"] = InfiniteGridScroller;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/infinitegridscroller.tsx\n");

/***/ }),

/***/ "./src/itemshell.tsx":
/*!***************************!*\
  !*** ./src/itemshell.tsx ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // itemframe.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar requestidlecallback_1 = __webpack_require__(/*! requestidlecallback */ \"./node_modules/requestidlecallback/index.js\");\n\nvar react_is_mounted_hook_1 = __importDefault(__webpack_require__(/*! react-is-mounted-hook */ \"./node_modules/react-is-mounted-hook/lib/index.js\"));\n\nvar placeholder_1 = __importDefault(__webpack_require__(/*! ./placeholder */ \"./src/placeholder.tsx\"));\n\nvar ItemShell = function ItemShell(props) {\n  var orientation = props.orientation,\n      cellHeight = props.cellHeight,\n      cellWidth = props.cellWidth,\n      index = props.index,\n      observer = props.observer,\n      callbacks = props.callbacks,\n      getItem = props.getItem,\n      listsize = props.listsize,\n      placeholder = props.placeholder;\n\n  var _a = react_1.useState(null),\n      content = _a[0],\n      saveContent = _a[1];\n\n  var _b = react_1.useState(null),\n      error = _b[0],\n      saveError = _b[1];\n\n  var _c = react_1.useState({\n    overflow: 'hidden'\n  }),\n      styles = _c[0],\n      saveStyles = _c[1];\n\n  var shellRef = react_1.useRef(null);\n  var isMounted = react_is_mounted_hook_1[\"default\"](); // initialize\n\n  react_1.useEffect(function () {\n    var itemrequest = {\n      current: null\n    };\n    var requestidlecallback = window['requestIdleCallback'] ? window['requestIdleCallback'] : requestidlecallback_1.requestIdleCallback;\n    var cancelidlecallback = window['cancelIdleCallback'] ? window['cancelIdleCallback'] : requestidlecallback_1.cancelIdleCallback;\n\n    if (getItem) {\n      itemrequest = requestidlecallback(function () {\n        var value = getItem(index);\n\n        if (value && value.then) {\n          value.then(function (value) {\n            if (isMounted()) {\n              saveContent(value);\n              saveError(null);\n            }\n          })[\"catch\"](function (e) {\n            saveContent(null);\n            saveError(e);\n          });\n        } else {\n          if (isMounted()) {\n            if (value) {\n              saveContent(value);\n              saveError(null);\n            } else {\n              saveError(true);\n              saveContent(null);\n            }\n          }\n        }\n      });\n    }\n\n    return function () {\n      var requesthandle = itemrequest.current;\n      cancelidlecallback(requesthandle);\n    };\n  }, []); // initialize\n\n  react_1.useEffect(function () {\n    var localcalls = callbacks.current;\n    localcalls.getElementData && localcalls.getElementData(getElementData(), 'register');\n    return function () {\n      localcalls.getElementData && localcalls.getElementData(getElementData(), 'unregister');\n    };\n  }, [callbacks]);\n  react_1.useEffect(function () {\n    observer.observe(shellRef.current);\n    return function () {\n      observer.unobserve(shellRef.current);\n    };\n  }, [observer]);\n  react_1.useEffect(function () {\n    var newStyles = getShellStyles(orientation, cellHeight, cellWidth, styles);\n\n    if (isMounted()) {\n      saveStyles(newStyles);\n    }\n  }, [orientation, cellHeight, cellWidth]); // cradle ondemand callback parameter value\n\n  var getElementData = react_1.useCallback(function () {\n    return [index, shellRef];\n  }, []); // placeholder handling\n\n  var customholderRef = react_1.useRef(placeholder ? react_1[\"default\"].createElement(placeholder, {\n    index: index,\n    listsize: listsize\n  }) : null);\n  return react_1[\"default\"].createElement(\"div\", {\n    ref: shellRef,\n    \"data-index\": index,\n    style: styles\n  }, styles.width ? content ? content : customholderRef.current ? customholderRef.current : react_1[\"default\"].createElement(placeholder_1[\"default\"], {\n    index: index,\n    listsize: listsize,\n    error: error\n  }) : null);\n}; // ItemShell\n\n\nvar getShellStyles = function getShellStyles(orientation, cellHeight, cellWidth, styles) {\n  var styleset = Object.assign({}, styles);\n\n  if (orientation == 'horizontal') {\n    styleset.width = cellWidth ? cellWidth + 'px' : 'auto';\n    styleset.height = 'auto';\n  } else if (orientation === 'vertical') {\n    styleset.width = 'auto';\n    styleset.height = cellHeight ? cellHeight + 'px' : 'auto';\n  }\n\n  return styleset;\n};\n\nexports[\"default\"] = ItemShell;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/itemshell.tsx\n");

/***/ }),

/***/ "./src/placeholder.tsx":
/*!*****************************!*\
  !*** ./src/placeholder.tsx ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // placeholder.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar Placeholder = function Placeholder(_a) {\n  var index = _a.index,\n      listsize = _a.listsize,\n      error = _a.error;\n  var stylesRef = react_1.useRef({\n    position: 'relative',\n    boxSizing: 'border-box',\n    backgroundColor: 'cyan',\n    border: '2px solid black',\n    height: '100%',\n    width: '100%'\n  });\n  var itemStylesRef = react_1.useRef({\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: '3px',\n    opacity: .5,\n    borderRadius: '8px',\n    backgroundColor: 'white',\n    margin: '3px',\n    fontSize: 'smaller'\n  });\n  return react_1[\"default\"].createElement(\"div\", {\n    style: stylesRef.current\n  }, !error ? react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, index + 1, \"/\", listsize) : react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, \"item is not available at this time\"));\n};\n\nexports[\"default\"] = Placeholder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL3NyYy9wbGFjZWhvbGRlci50c3g/MTEzMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUEsSUFBTSxXQUFXLEdBQUcsU0FBZCxXQUFjLENBQUMsRUFBRCxFQUF5QjtNQUF2QixnQjtNQUFPLHNCO01BQVUsZ0I7QUFFbkMsTUFBTSxTQUFTLEdBQUcsZUFBTztBQUNyQixZQUFRLEVBQUMsVUFEWTtBQUVyQixhQUFTLEVBQUMsWUFGVztBQUdyQixtQkFBZSxFQUFDLE1BSEs7QUFJckIsVUFBTSxFQUFDLGlCQUpjO0FBS3JCLFVBQU0sRUFBQyxNQUxjO0FBTXJCLFNBQUssRUFBQztBQU5lLEdBQVAsQ0FBbEI7QUFRQSxNQUFNLGFBQWEsR0FBRyxlQUNsQjtBQUNJLFlBQVEsRUFBQyxVQURiO0FBRUksT0FBRyxFQUFDLENBRlI7QUFHSSxRQUFJLEVBQUMsQ0FIVDtBQUlJLFdBQU8sRUFBQyxLQUpaO0FBS0ksV0FBTyxFQUFDLEVBTFo7QUFNSSxnQkFBWSxFQUFDLEtBTmpCO0FBT0ksbUJBQWUsRUFBQyxPQVBwQjtBQVFJLFVBQU0sRUFBQyxLQVJYO0FBU0ksWUFBUSxFQUFDO0FBVGIsR0FEa0IsQ0FBdEI7QUFjQSxTQUFPO0FBQUssU0FBSyxFQUFJLFNBQVMsQ0FBQztBQUF4QixLQUNELENBQUMsS0FBRCxHQUNFO0FBQUssU0FBSyxFQUFJLGFBQWEsQ0FBQztBQUE1QixLQUFzQyxLQUFLLEdBQUcsQ0FBOUMsRSxHQUFBLEVBQWtELFFBQWxELENBREYsR0FFRTtBQUFLLFNBQUssRUFBSSxhQUFhLENBQUM7QUFBNUIsS0FBbUMsb0NBQW5DLENBSEQsQ0FBUDtBQU9ILENBL0JEOztBQWlDQSxxQkFBZSxXQUFmIiwiZmlsZSI6Ii4vc3JjL3BsYWNlaG9sZGVyLnRzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHBsYWNlaG9sZGVyLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDIwIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbmltcG9ydCBSZWFjdCwge3VzZVJlZiwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcblxuY29uc3QgUGxhY2Vob2xkZXIgPSAoe2luZGV4LCBsaXN0c2l6ZSwgZXJyb3J9KSA9PiB7XG5cbiAgICBjb25zdCBzdHlsZXNSZWYgPSB1c2VSZWYoe1xuICAgICAgICBwb3NpdGlvbjoncmVsYXRpdmUnLFxuICAgICAgICBib3hTaXppbmc6J2JvcmRlci1ib3gnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6J2N5YW4nLFxuICAgICAgICBib3JkZXI6JzJweCBzb2xpZCBibGFjaycsXG4gICAgICAgIGhlaWdodDonMTAwJScsXG4gICAgICAgIHdpZHRoOicxMDAlJ1xuICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcylcbiAgICBjb25zdCBpdGVtU3R5bGVzUmVmID0gdXNlUmVmKFxuICAgICAgICB7XG4gICAgICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOjAsXG4gICAgICAgICAgICBsZWZ0OjAsXG4gICAgICAgICAgICBwYWRkaW5nOiczcHgnLFxuICAgICAgICAgICAgb3BhY2l0eTouNSxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czonOHB4JyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjond2hpdGUnLCBcbiAgICAgICAgICAgIG1hcmdpbjonM3B4JyxcbiAgICAgICAgICAgIGZvbnRTaXplOidzbWFsbGVyJyxcbiAgICAgICAgfSBhcyBSZWFjdC5DU1NQcm9wZXJ0aWVzXG4gICAgKVxuXG4gICAgcmV0dXJuIDxkaXYgc3R5bGUgPSB7c3R5bGVzUmVmLmN1cnJlbnR9PlxuICAgICAgICB7ICFlcnJvcj9cbiAgICAgICAgICAgIDxkaXYgc3R5bGUgPSB7aXRlbVN0eWxlc1JlZi5jdXJyZW50fT57aW5kZXggKyAxfS97bGlzdHNpemV9PC9kaXY+OlxuICAgICAgICAgICAgPGRpdiBzdHlsZSA9IHtpdGVtU3R5bGVzUmVmLmN1cnJlbnR9Pml0ZW0gaXMgbm90IGF2YWlsYWJsZSBhdCB0aGlzIHRpbWU8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICA8L2Rpdj5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGxhY2Vob2xkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/placeholder.tsx\n");

/***/ }),

/***/ "./src/scrollblock.tsx":
/*!*****************************!*\
  !*** ./src/scrollblock.tsx ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // scrollblock.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\");\n\nvar Scrollblock = function Scrollblock(_a) {\n  var children = _a.children,\n      listsize = _a.listsize,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      padding = _a.padding,\n      orientation = _a.orientation,\n      component = _a.component,\n      styles = _a.styles; // -------------------------[ context and state ]-------------------------\n\n  var viewportData = react_1.useContext(viewport_1.ViewportContext);\n\n  var _b = react_1.useState('prepare'),\n      blockstate = _b[0],\n      setBlockState = _b[1]; // -----------------------------------[ data heap ]-------------------------\n\n\n  var scrollBlockLengthRef = react_1.useRef(null);\n  var scrollblockRef = react_1.useRef(null);\n  var divlinerstyleRef = react_1.useRef(Object.assign({\n    backgroundColor: 'white',\n    position: 'relative'\n  }, styles === null || styles === void 0 ? void 0 : styles.cradle));\n\n  var _c = react_1.useState(divlinerstyleRef.current),\n      divlinerstyle = _c[0],\n      saveDivlinerstyle = _c[1]; // to trigger render\n\n\n  var viewportDimensions = viewportData.viewportDimensions,\n      itemobserver = viewportData.itemobserver,\n      isResizing = viewportData.isResizing;\n  var top = viewportDimensions.top,\n      right = viewportDimensions.right,\n      bottom = viewportDimensions.bottom,\n      left = viewportDimensions.left,\n      width = viewportDimensions.width,\n      height = viewportDimensions.height; // state engine\n\n  react_1.useEffect(function () {\n    switch (blockstate) {\n      case 'prepare':\n        {\n          setBlockState('render');\n          break;\n        }\n    }\n  }, [blockstate]);\n  react_1.useLayoutEffect(function () {\n    updateBlockLength();\n    divlinerstyleRef.current = updateScrollblockStyles(orientation, divlinerstyleRef, scrollBlockLengthRef);\n    saveDivlinerstyle(divlinerstyleRef.current);\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]);\n  var updateBlockLength = react_1.useCallback(function () {\n    var scrollblocklength = calcScrollblockLength({\n      listsize: listsize,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding,\n      orientation: orientation,\n      viewportheight: height,\n      viewportwidth: width\n    });\n    scrollBlockLengthRef.current = scrollblocklength;\n  }, [listsize, cellHeight, cellWidth, gap, padding, orientation, height, width]);\n  return blockstate != 'prepare' ? react_1[\"default\"].createElement(\"div\", {\n    ref: scrollblockRef,\n    style: divlinerstyleRef.current\n  }, children) : null;\n}; // Scrollblock\n// all the parameters affect the length\n\n\nvar calcScrollblockLength = function calcScrollblockLength(_a) {\n  var listsize = _a.listsize,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      padding = _a.padding,\n      orientation = _a.orientation,\n      viewportheight = _a.viewportheight,\n      viewportwidth = _a.viewportwidth; // dependents of orientation\n\n  var crosslength;\n  var cellLength;\n  var viewportcrosslength;\n\n  if (orientation == 'vertical') {\n    crosslength = cellWidth + gap;\n    cellLength = cellHeight + gap;\n    viewportcrosslength = viewportwidth;\n  } else {\n    crosslength = cellHeight + gap;\n    cellLength = cellWidth + gap;\n    viewportcrosslength = viewportheight;\n  } // adjustments to viewportcrosslength\n\n\n  viewportcrosslength -= padding * 2;\n  viewportcrosslength += gap;\n  if (viewportcrosslength < crosslength) viewportcrosslength = crosslength; // must be at least one\n\n  var crosscount = Math.floor(viewportcrosslength / crosslength);\n  var listlength = Math.ceil(listsize / crosscount);\n  var straightlength = listlength * cellLength - (listlength > 0 ? gap : 0) + padding * 2;\n  return straightlength;\n};\n\nvar updateScrollblockStyles = function updateScrollblockStyles(orientation, stylesRef, scrollblocklengthRef) {\n  var localstyles = Object.assign({}, stylesRef.current);\n  var height;\n  var width;\n\n  if (orientation == 'horizontal') {\n    height = '100%';\n    width = scrollblocklengthRef.current + 'px';\n  } else if (orientation == 'vertical') {\n    height = scrollblocklengthRef.current + 'px';\n    width = '100%';\n  }\n\n  localstyles.height = height;\n  localstyles.width = width;\n  return localstyles;\n};\n\nexports[\"default\"] = Scrollblock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scrollblock.tsx\n");

/***/ }),

/***/ "./src/scrolltracker.tsx":
/*!*******************************!*\
  !*** ./src/scrolltracker.tsx ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // scrolltracker.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar ScrollTracker = function ScrollTracker(_a) {\n  var top = _a.top,\n      left = _a.left,\n      offset = _a.offset,\n      listsize = _a.listsize,\n      styles = _a.styles;\n  var trackdata = offset + 1 + \"/\" + listsize;\n  var styleRef = react_1.useRef(Object.assign({\n    top: top + 'px',\n    left: left + 'px',\n    position: 'fixed',\n    zIndex: 3,\n    backgroundColor: 'white',\n    border: '1px solid gray',\n    borderRadius: '10px',\n    fontSize: 'smaller',\n    padding: '3px'\n  }, styles === null || styles === void 0 ? void 0 : styles.scrolltracker));\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-name\": 'scrolltracker',\n    style: styleRef.current\n  }, trackdata);\n};\n\nexports[\"default\"] = ScrollTracker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL3NyYy9zY3JvbGx0cmFja2VyLnRzeD9mZjgxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQSxJQUFNLGFBQWEsR0FBRyxTQUFoQixhQUFnQixDQUFDLEVBQUQsRUFBd0M7TUFBckMsWTtNQUFLLGM7TUFBTSxrQjtNQUFRLHNCO01BQVUsa0I7QUFFbEQsTUFBSSxTQUFTLEdBQU0sTUFBTSxHQUFHLENBQVQsR0FBVSxHQUFWLEdBQWMsUUFBakM7QUFFQSxNQUFJLFFBQVEsR0FBRyxlQUFPLE1BQU0sQ0FBQyxNQUFQLENBQWM7QUFDaEMsT0FBRyxFQUFFLEdBQUcsR0FBRyxJQURxQjtBQUVoQyxRQUFJLEVBQUUsSUFBSSxHQUFHLElBRm1CO0FBR2hDLFlBQVEsRUFBQyxPQUh1QjtBQUloQyxVQUFNLEVBQUMsQ0FKeUI7QUFLaEMsbUJBQWUsRUFBQyxPQUxnQjtBQU1oQyxVQUFNLEVBQUUsZ0JBTndCO0FBT2hDLGdCQUFZLEVBQUMsTUFQbUI7QUFRaEMsWUFBUSxFQUFDLFNBUnVCO0FBU2hDLFdBQU8sRUFBQztBQVR3QixHQUFkLEVBVUcsTUFBTSxTQUFOLFVBQU0sV0FBTixHQUFNLE1BQU4sU0FBTSxDQUFFLGFBVlgsQ0FBUCxDQUFmO0FBWUEsU0FBTztBQUFBLGlCQUFpQixlQUFqQjtBQUFpQyxTQUFLLEVBQUksUUFBUSxDQUFDO0FBQW5ELEtBQThELFNBQTlELENBQVA7QUFDSCxDQWpCRDs7QUFtQkEscUJBQWUsYUFBZiIsImZpbGUiOiIuL3NyYy9zY3JvbGx0cmFja2VyLnRzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNjcm9sbHRyYWNrZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMjAgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuaW1wb3J0IFJlYWN0LCB7dXNlUmVmfSBmcm9tICdyZWFjdCdcblxuY29uc3QgU2Nyb2xsVHJhY2tlciA9ICh7IHRvcCwgbGVmdCwgb2Zmc2V0LCBsaXN0c2l6ZSwgc3R5bGVzIH0pID0+IHtcblxuICAgIGxldCB0cmFja2RhdGEgPSBgJHtvZmZzZXQgKyAxfS8ke2xpc3RzaXplfWBcblxuICAgIGxldCBzdHlsZVJlZiA9IHVzZVJlZihPYmplY3QuYXNzaWduKHtcbiAgICAgICAgdG9wOiB0b3AgKyAncHgnLFxuICAgICAgICBsZWZ0OiBsZWZ0ICsgJ3B4JyxcbiAgICAgICAgcG9zaXRpb246J2ZpeGVkJyxcbiAgICAgICAgekluZGV4OjMsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjond2hpdGUnLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgZ3JheScsXG4gICAgICAgIGJvcmRlclJhZGl1czonMTBweCcsXG4gICAgICAgIGZvbnRTaXplOidzbWFsbGVyJyxcbiAgICAgICAgcGFkZGluZzonM3B4J1xuICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcyxzdHlsZXM/LnNjcm9sbHRyYWNrZXIpKVxuXG4gICAgcmV0dXJuIDxkaXYgZGF0YS1uYW1lID0gJ3Njcm9sbHRyYWNrZXInIHN0eWxlID0ge3N0eWxlUmVmLmN1cnJlbnR9ID57dHJhY2tkYXRhfTwvZGl2PlxufVxuXG5leHBvcnQgZGVmYXVsdCBTY3JvbGxUcmFja2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scrolltracker.tsx\n");

/***/ }),

/***/ "./src/viewport.tsx":
/*!**************************!*\
  !*** ./src/viewport.tsx ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // viewport.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n    The role of viewport is to provide data to its children (scrollblock and cradle),\n    and act as the visible portal of the list being shown\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nexports.ViewportContext = react_1[\"default\"].createContext(null);\n\nvar react_is_mounted_hook_1 = __importDefault(__webpack_require__(/*! react-is-mounted-hook */ \"./node_modules/react-is-mounted-hook/lib/index.js\")); // control constant\n\n\nvar RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE = 250;\n\nvar Viewport = function Viewport(_a) {\n  // -----------------------[ initialize ]------------------\n  var children = _a.children,\n      orientation = _a.orientation,\n      cellWidth = _a.cellWidth,\n      cellHeight = _a.cellHeight,\n      gap = _a.gap,\n      padding = _a.padding,\n      component = _a.component,\n      styles = _a.styles; // processing state\n\n  var _b = react_1.useState('prepare'),\n      portstate = _b[0],\n      setPortState = _b[1];\n\n  var isMounted = react_is_mounted_hook_1[\"default\"](); // data heap\n\n  var timeoutidRef = react_1.useRef(null);\n  var viewportdivRef = react_1.useRef(undefined);\n  var resizeScrollPosRef = react_1.useRef({\n    top: 0,\n    left: 0\n  });\n  var divlinerstyleRef = react_1.useRef(Object.assign({\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    // height:'100%',\n    // width:'100%',\n    overflow: 'auto',\n    backgroundColor: 'red'\n  }, styles === null || styles === void 0 ? void 0 : styles.viewport));\n  var resizeTimeridRef = react_1.useRef(null);\n  var isResizingRef = react_1.useRef(false);\n  var viewportDataRef = react_1.useRef(null); // initialize\n\n  react_1.useEffect(function () {\n    window.addEventListener('resize', onResize);\n    return function () {\n      window.removeEventListener('resize', onResize);\n    };\n  }, []); // event listener callback\n\n  var onResize = react_1.useCallback(function () {\n    if (!isResizingRef.current) {\n      isResizingRef.current = true; // below is a realtime message to cradle.onScroll\n      // to stop updating the referenceIndexData, and to the item observer to stop\n      // triggering responses (anticipating reset of cradle content based on resize)\n\n      viewportDataRef.current.isResizing = true;\n      resizeScrollPosRef.current = {\n        top: viewportdivRef.current.scrollTop,\n        left: viewportdivRef.current.scrollLeft\n      };\n      if (isMounted()) setPortState('resizing');\n    }\n\n    clearTimeout(resizeTimeridRef.current);\n    resizeTimeridRef.current = setTimeout(function () {\n      isResizingRef.current = false;\n      if (isMounted()) setPortState('resize');\n    }, RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE);\n  }, []); // ----------------------------------[ calculate ]--------------------------------\n  // calculated values\n\n  divlinerstyleRef.current = react_1.useMemo(function () {\n    var mincrosslength = calcMinViewportCrossLength(orientation, cellWidth, cellHeight, padding);\n\n    var styles = __assign({}, divlinerstyleRef.current);\n\n    if (orientation == 'vertical') {\n      styles.minWidth = mincrosslength + 'px';\n      styles.minHeight = 'auto';\n    } else {\n      styles.minWidth = 'auto';\n      styles.minHeight = mincrosslength + 'px';\n    }\n\n    return styles;\n  }, [orientation, cellWidth, cellHeight, padding]);\n  var viewportClientRect;\n\n  if (viewportdivRef.current) {\n    viewportClientRect = viewportdivRef.current.getBoundingClientRect();\n  } else {\n    viewportClientRect = {};\n  }\n\n  var top = viewportClientRect.top,\n      right = viewportClientRect.right,\n      bottom = viewportClientRect.bottom,\n      left = viewportClientRect.left; // set context data for children\n\n  viewportDataRef.current = react_1.useMemo(function () {\n    var width, height, localViewportData;\n\n    if (!(top === undefined)) {\n      //proxy\n      width = right - left;\n      height = bottom - top;\n      localViewportData = {\n        viewportDimensions: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left,\n          width: width,\n          height: height\n        },\n        elementref: viewportdivRef,\n        isResizing: isResizingRef.current\n      };\n    }\n\n    return localViewportData;\n  }, [orientation, top, right, bottom, left, isResizingRef.current]); // --------------------[ state processing ]---------------------------\n\n  react_1.useEffect(function () {\n    switch (portstate) {\n      case 'prepare':\n      case 'resize':\n        {\n          setPortState('render');\n          break;\n        }\n    }\n  }, [portstate]); // ----------------------[ render ]--------------------------------\n\n  return react_1[\"default\"].createElement(exports.ViewportContext.Provider, {\n    value: viewportDataRef.current\n  }, react_1[\"default\"].createElement(\"div\", {\n    style: divlinerstyleRef.current,\n    ref: viewportdivRef\n  }, portstate != 'prepare' ? children : null));\n}; // Viewport\n// establish minimum width/height for the viewport -- approximately one item\n\n\nvar calcMinViewportCrossLength = function calcMinViewportCrossLength(orientation, cellWidth, cellHeight, padding) {\n  var crosslength, cellLength;\n\n  if (orientation == 'vertical') {\n    cellLength = cellWidth;\n  } else {\n    cellLength = cellHeight;\n  }\n\n  crosslength = cellLength + padding * 2;\n  return crosslength;\n};\n\nexports[\"default\"] = Viewport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/viewport.tsx\n");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_react__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci9leHRlcm5hbCBcIlJlYWN0XCI/YzQ4MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJyZWFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///react\n");

/***/ })

/******/ });
});