/*! For license information please see build.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F(require("react"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","react-dom"],F):"object"==typeof exports?exports["react-infinite-grid-scroller"]=F(require("react"),require("react-dom")):Q["react-infinite-grid-scroller"]=F(Q.react,Q["react-dom"])}(self,((__WEBPACK_EXTERNAL_MODULE_react__,__WEBPACK_EXTERNAL_MODULE_react_dom__)=>(()=>{var __webpack_modules__={"./src/CellFrame.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// CellFrame.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    The role of CellFrame is to fetch user content from the cache, or from the host (using getItem).\n    While an item is being fetched, CellFrame presents a placeholder (either the default or an\n    imported custom version). If there is an error in fetching content then the placeholder is used\n    to present the error to the user. If a new itemID is set by the parent (to synchronize with an altered\n    cache), then CellFrame replaces the old item with the new item.\n\n    getItem (which is a function provided by the host) can return one of several values:\n        - a React component\n        - a promise of a component\n        - null\n        - undefined\n    Anything else is treated as an error\n\n    if a promise is returned, then the promise returns a React component, null or undefined.\n\n    If a valid react component is returned from getItem, then it is instantiated in the cache, and rendered in the\n    CellFrame. If null is returned, then CellFrame sends a message to its scroller that the host has\n    indicated the the item being fetched instead represents the end of the list, and the listsize should\n    be adjusted accordingly. Any other value that is returned is treated as an error, and presented\n    as such to the user through the placeholder component.\n\n    getItem sends the index (logical index in the list) and a session itemID to the host, so that\n    the host can sync its own tracking with the scroller.\n\n    One CellFrame at a time is designated as the host of the two triggerLines with the isTriggerCell flag.\n    The triggerlines trigger an update of the Cradle through an IntersectionObserver.\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nvar requestidlecallback_1 = __webpack_require__(/*! requestidlecallback */ "./node_modules/requestidlecallback/index.js"); // polyfill if needed\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ "./node_modules/react-reverse-portal/dist/web/index.js"); // fetch from cache\nvar Placeholder_1 = __importDefault(__webpack_require__(/*! ./cellframe/Placeholder */ "./src/cellframe/Placeholder.tsx")); // default\nvar Cradle_1 = __webpack_require__(/*! ./Cradle */ "./src/Cradle.tsx");\nvar defaultPlaceholderMessages = {\n  loading: \'(loading...)\',\n  retrieving: \'(retrieving from cache)\',\n  "null": \'end of list\',\n  undefined: \'host returned "undefined"\',\n  invalid: \'invalid React element\'\n};\nvar CellFrame = function CellFrame(_ref) {\n  var orientation = _ref.orientation,\n    cellHeight = _ref.cellHeight,\n    cellWidth = _ref.cellWidth,\n    cellMinHeight = _ref.cellMinHeight,\n    cellMinWidth = _ref.cellMinWidth,\n    layout = _ref.layout,\n    getItem = _ref.getItem,\n    listsize = _ref.listsize,\n    placeholder = _ref.placeholder,\n    itemID = _ref.itemID,\n    index = _ref.index,\n    instanceID = _ref.instanceID,\n    scrollerID = _ref.scrollerID,\n    isTriggercell = _ref.isTriggercell,\n    placeholderFrameStyles = _ref.placeholderFrameStyles,\n    placeholderLinerStyles = _ref.placeholderLinerStyles,\n    placeholderErrorFrameStyles = _ref.placeholderErrorFrameStyles,\n    placeholderErrorLinerStyles = _ref.placeholderErrorLinerStyles,\n    placeholderMessages = _ref.placeholderMessages,\n    usePlaceholder = _ref.usePlaceholder;\n  var coreConfigRef = (0, react_1.useRef)(null);\n  coreConfigRef.current = {\n    orientation: orientation,\n    layout: layout,\n    cellWidth: cellWidth,\n    cellHeight: cellHeight\n  };\n  // ----------------------[ setup ]----------------------\n  var cradleContext = (0, react_1.useContext)(Cradle_1.CradleContext);\n  var cacheAPI = cradleContext.cacheAPI,\n    scrollerPropertiesRef = cradleContext.scrollerPropertiesRef,\n    nullItemSetMaxListsize = cradleContext.nullItemSetMaxListsize,\n    itemExceptionCallback = cradleContext.itemExceptionCallback,\n    IDLECALLBACK_TIMEOUT = cradleContext.IDLECALLBACK_TIMEOUT,\n    triggercellTriggerlinesRef = cradleContext.triggercellTriggerlinesRef;\n  // style change generates state refresh\n  var stylesRef = (0, react_1.useRef)({});\n  var holderStylesRef = (0, react_1.useRef)({});\n  var placeholderMessagesRef = (0, react_1.useRef)(null);\n  placeholderMessagesRef.current = (0, react_1.useMemo)(function () {\n    var newMessages = Object.assign(Object.assign({}, defaultPlaceholderMessages), placeholderMessages);\n    return newMessages;\n  }, [placeholderMessages]);\n  // processing state\n  var _ref2 = (0, react_1.useState)(\'setup\'),\n    _ref3 = _slicedToArray(_ref2, 2),\n    frameState = _ref3[0],\n    setFrameState = _ref3[1];\n  var frameStateRef = (0, react_1.useRef)(null);\n  frameStateRef.current = frameState;\n  // DOM ref\n  var frameRef = (0, react_1.useRef)(null);\n  // to track unmount interrupt\n  var isMountedRef = (0, react_1.useRef)(true);\n  // cache data\n  var portalMetadataRef = (0, react_1.useRef)(null);\n  // the placeholder to use\n  var placeholderRef = (0, react_1.useRef)(null);\n  // the session itemID to use; could be updated by parent\n  var itemIDRef = (0, react_1.useRef)(null);\n  itemIDRef.current = itemID;\n  var cellFramePropertiesRef = (0, react_1.useRef)(null);\n  cellFramePropertiesRef.current = {\n    itemID: itemID,\n    index: index\n  };\n  // fetch error\n  var errorRef = (0, react_1.useRef)(false);\n  // placeholder message\n  var messageRef = (0, react_1.useRef)(null);\n  (0, react_1.useEffect)(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  // for unmount\n  (0, react_1.useEffect)(function () {\n    return function () {\n      cancelidlecallback(requestIdleCallbackIdRef.current);\n      cacheAPI.unregisterPendingPortal(index);\n    };\n  }, []);\n  // refresh content if itemID changes\n  (0, react_1.useLayoutEffect)(function () {\n    if (frameStateRef.current == \'setup\') return;\n    if (isMountedRef.current) setFrameState(\'getusercontent\');\n  }, [itemID]);\n  // ----------------- [ placeholder definition ] -------------------------\n  var customplaceholder = (0, react_1.useMemo)(function () {\n    if (!usePlaceholder) return null;\n    return placeholder ? react_1["default"].createElement(placeholder, {\n      index: index,\n      listsize: listsize,\n      message: messageRef.current,\n      error: errorRef.current\n    }) : null;\n  }, [index, placeholder, listsize, messageRef.current, errorRef.current, usePlaceholder]);\n  placeholderRef.current = (0, react_1.useMemo)(function () {\n    if (!usePlaceholder) return null;\n    var placeholder = customplaceholder ? customplaceholder : react_1["default"].createElement(Placeholder_1["default"], {\n      key: \'placeholder\',\n      index: index,\n      listsize: listsize,\n      message: messageRef.current,\n      error: errorRef.current,\n      userFrameStyles: placeholderFrameStyles,\n      userLinerStyles: placeholderLinerStyles,\n      userErrorFrameStyles: placeholderErrorFrameStyles,\n      userErrorLinerStyles: placeholderErrorLinerStyles\n    });\n    return placeholder;\n  }, [index, customplaceholder, listsize, messageRef.current, errorRef.current, usePlaceholder, placeholderFrameStyles, placeholderLinerStyles, placeholderErrorFrameStyles, placeholderErrorLinerStyles]);\n  // ---------------- [ requestidlecallback config ] ------------------------\n  var requestidlecallback =\n  // requestIdleCallback\n  window[\'requestIdleCallback\'] ? window[\'requestIdleCallback\'] : requestidlecallback_1.requestIdleCallback;\n  var cancelidlecallback =\n  // cancelIdleCallback\n  window[\'cancelIdleCallback\'] ? window[\'cancelIdleCallback\'] : requestidlecallback_1.cancelIdleCallback;\n  var requestIdleCallbackIdRef = (0, react_1.useRef)(null);\n  // --------------------[ processing ]-----------------\n  // set styles\n  (0, react_1.useEffect)(function () {\n    var newStyles = getFrameStyles(orientation, cellHeight, cellWidth, cellMinHeight, cellMinWidth, layout, stylesRef.current);\n    var newHolderStyles = getContentHolderStyles(layout, orientation, cellMinWidth, cellMinHeight);\n    if (isMountedRef.current) {\n      stylesRef.current = newStyles;\n      holderStylesRef.current = newHolderStyles;\n    }\n  }, [orientation, cellHeight, cellWidth, cellMinHeight, cellMinWidth, layout]);\n  var portalNodeRef = (0, react_1.useRef)(null);\n  (0, react_1.useLayoutEffect)(function () {\n    switch (frameState) {\n      case \'setup\':\n        {\n          setFrameState(\'working\'); // \'getusercontent\' will be called\n          break;\n        }\n      case \'working\':\n        {\n          setFrameState(\'getusercontent\'); // delay paint while working\n          break;\n        }\n      case \'getusercontent\':\n        {\n          var _itemID = itemIDRef.current;\n          var cached = cacheAPI.hasPortal(_itemID);\n          var _coreConfigRef$curren = coreConfigRef.current,\n            _layout = _coreConfigRef$curren.layout,\n            _orientation = _coreConfigRef$curren.orientation,\n            _cellWidth = _coreConfigRef$curren.cellWidth,\n            _cellHeight = _coreConfigRef$curren.cellHeight;\n          if (cached) {\n            messageRef.current = placeholderMessagesRef.current.retrieving;\n            if (isMountedRef.current) {\n              // get cache data\n              portalMetadataRef.current = cacheAPI.getPortalMetadata(_itemID);\n              // update cell and scroller properties ref in case of switch in either\n              portalMetadataRef.current.scrollerProperties.cellFramePropertiesRef = cellFramePropertiesRef;\n              portalMetadataRef.current.scrollerProperties.scrollerPropertiesRef = scrollerPropertiesRef;\n              // get OutPortal node\n              portalNodeRef.current = portalMetadataRef.current.portalNode;\n              setContainerStyles(portalNodeRef.current.element, _layout, _orientation, _cellWidth, _cellHeight);\n              setFrameState(\'retrieved\');\n            }\n          } else {\n            messageRef.current = placeholderMessagesRef.current.loading;\n            // reserve space in the cache\n            cacheAPI.registerPendingPortal(index);\n            // enqueue the fetch\n            requestIdleCallbackIdRef.current = requestidlecallback(function () {\n              return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                var _a, _b, returnvalue, usercontent, error, isValidElement, content, scrollerProperties, addinCount, addinProps;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      _context.next = 3;\n                      return getItem(index, _itemID);\n                    case 3:\n                      usercontent = _context.sent;\n                      if (usercontent === null) returnvalue = usercontent;\n                      if (usercontent === undefined) {\n                        error = new Error(placeholderMessagesRef.current.undefined);\n                      }\n                      _context.next = 12;\n                      break;\n                    case 8:\n                      _context.prev = 8;\n                      _context.t0 = _context["catch"](0);\n                      returnvalue = usercontent = undefined;\n                      error = _context.t0;\n                    case 12:\n                      // process the return value\n                      if (usercontent !== null && usercontent !== undefined) {\n                        isValidElement = react_1["default"].isValidElement(usercontent);\n                        if (!isValidElement) {\n                          returnvalue = usercontent;\n                          usercontent = undefined;\n                          error = new Error(placeholderMessagesRef.current.invalid);\n                        }\n                      }\n                      if (!isMountedRef.current) {\n                        _context.next = 31;\n                        break;\n                      }\n                      if (!(usercontent !== null && usercontent !== undefined)) {\n                        _context.next = 29;\n                        break;\n                      }\n                      // if usercontent is otherwise disallowed, let error handling deal with it.\n                      scrollerProperties = {\n                        cellFramePropertiesRef: cellFramePropertiesRef,\n                        scrollerPropertiesRef: scrollerPropertiesRef\n                      };\n                      addinCount = 0;\n                      addinProps = {};\n                      if ((_a = usercontent.props) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(\'scrollerProperties\')) {\n                        addinProps.scrollerProperties = scrollerProperties;\n                        addinCount++;\n                      }\n                      if ((_b = usercontent.props) === null || _b === void 0 ? void 0 : _b.hasOwnProperty(\'cacheAPI\')) {\n                        addinProps.cacheAPI = cacheAPI.instance;\n                        addinCount++;\n                      }\n                      if (addinCount) {\n                        content = react_1["default"].cloneElement(usercontent, addinProps);\n                      } else {\n                        content = usercontent;\n                      }\n                      _context.next = 23;\n                      return cacheAPI.createPortal(content, index, _itemID, scrollerProperties);\n                    case 23:\n                      portalMetadataRef.current = _context.sent;\n                      portalNodeRef.current = portalMetadataRef.current.portalNode;\n                      setContainerStyles(portalNodeRef.current.element, _layout, _orientation, _cellWidth, _cellHeight);\n                      isMountedRef.current && setFrameState(\'inserting\');\n                      _context.next = 31;\n                      break;\n                    case 29:\n                      // null or undefined; handle non-component value\n                      cacheAPI.unregisterPendingPortal(index); // create portal failed\n                      if (usercontent === null) {\n                        // truncate listsize at this index\n                        itemExceptionCallback && itemExceptionCallback(index, _itemID, returnvalue, \'cellFrame\', new Error(placeholderMessagesRef.current["null"]));\n                        nullItemSetMaxListsize(index);\n                      } else {\n                        // usercontent === undefined, meaning an error has occurred\n                        // change placeholder message to error message\n                        errorRef.current = error;\n                        // notify the host\n                        itemExceptionCallback && itemExceptionCallback(index, _itemID, returnvalue, \'cellFrame\', error);\n                        isMountedRef.current && setFrameState(\'error\');\n                      }\n                    case 31:\n                    case "end":\n                      return _context.stop();\n                  }\n                }, _callee, null, [[0, 8]]);\n              }));\n            }, {\n              timeout: IDLECALLBACK_TIMEOUT\n            });\n          }\n          break;\n        }\n      case \'inserting\':\n      case \'retrieved\':\n        {\n          setFrameState(\'ready\');\n          break;\n        }\n    }\n  }, [frameState]);\n  // Note: the contentholder type layer is included to provide an anchor for the triggerlines.\n  return react_1["default"].createElement("div", {\n    ref: frameRef,\n    "data-type": \'cellframe\',\n    "data-scrollerid": scrollerID,\n    "data-index": index,\n    "data-instanceid": instanceID,\n    style: stylesRef.current\n  }, frameState != \'setup\' ? react_1["default"].createElement("div", {\n    "data-type": \'contentholder\',\n    style: holderStylesRef.current\n  }, frameState != \'ready\' ? placeholderRef.current : react_1["default"].createElement(react_reverse_portal_1.OutPortal, {\n    key: \'portal\',\n    node: portalNodeRef.current\n  })) : react_1["default"].createElement("div", null), isTriggercell ? triggercellTriggerlinesRef.current : null);\n}; // CellFrame\n//(frameState != \'setup\') && \nexports["default"] = CellFrame;\n// utilities\nvar getFrameStyles = function getFrameStyles(orientation, cellHeight, cellWidth, cellMinHeight, cellMinWidth, layout, styles) {\n  var styleset = Object.assign(Object.assign({}, styles), {\n    position: \'relative\',\n    overflow: \'visible\'\n  });\n  if (orientation === \'vertical\') {\n    styleset.width = null;\n    if (layout == \'uniform\') {\n      styleset.height = cellHeight + \'px\';\n      styleset.minHeight = null;\n      styleset.maxHeight = null;\n    } else {\n      // \'variable\'\n      styleset.height = null;\n      styleset.minHeight = cellMinHeight + \'px\';\n      styleset.maxHeight = cellHeight + \'px\';\n    }\n  } else {\n    // \'horizontal\'\n    styleset.height = null;\n    if (layout == \'uniform\') {\n      styleset.width = cellWidth + \'px\';\n      styleset.minWidth = null;\n      styleset.maxWidth = null;\n    } else {\n      // \'variable\'\n      styleset.width = null;\n      styleset.minWidth = cellMinWidth + \'px\';\n      styleset.maxWidth = cellWidth + \'px\';\n    }\n  }\n  return styleset;\n};\nvar getContentHolderStyles = function getContentHolderStyles(layout, orientation, cellMinWidth, cellMinHeight) {\n  var styles = {};\n  if (layout == \'uniform\') {\n    styles = {\n      inset: \'0px\',\n      position: \'absolute\',\n      height: null,\n      width: null,\n      minWidth: null,\n      minHeight: null\n    };\n  } else {\n    // variable\n    styles.inset = null;\n    styles.position = null;\n    if (orientation == \'vertical\') {\n      styles.width = \'100%\';\n      styles.height = null;\n      styles.minWidth = null;\n      styles.minHeight = cellMinHeight + \'px\';\n    } else {\n      styles.width = null;\n      styles.height = \'100%\';\n      styles.minWidth = cellMinWidth + \'px\';\n      styles.minHeight = null;\n    }\n  }\n  return styles;\n};\n// see also some base styles set in cachehandler\nvar setContainerStyles = function setContainerStyles(container, layout, orientation, cellWidth, cellHeight) {\n  container.style.overflow = \'hidden\';\n  if (layout == \'uniform\') {\n    container.style.inset = \'0px\';\n    container.style.position = \'absolute\';\n    container.style.maxWidth = null;\n    container.style.maxHeight = null;\n    container.style.height = null;\n    container.style.width = null;\n  } else {\n    // variable\n    container.style.inset = null;\n    container.style.position = null;\n    if (orientation == \'vertical\') {\n      container.style.width = \'100%\';\n      container.style.height = null;\n      container.style.maxWidth = null;\n      container.style.maxHeight = cellHeight + \'px\';\n    } else {\n      container.style.width = null;\n      container.style.height = \'100%\';\n      container.style.maxWidth = cellWidth + \'px\';\n      container.style.maxHeight = null;\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/CellFrame.tsx\n')},"./src/Cradle.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\n// Cradle.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CradleContext = void 0;\n/*\n    The Cradle does the bulk of the work for the infinite grid scroller. It does so with the help of\n    eight process handlers (class instances), and one main sub-component - the CellFrame.\n\n    Cradle's main responsibility is to manage the ~30 state changes of the system.\n\n    The illusion of infinite content is maintained by synchronizing changes in cradle content with the\n    Cradle location inside the Scrollblock, such that as the Scrollblock is moved, the cradle moves\n    oppositely to stay visible within the viewport.\n\n    The Scrollblock is sized to approximate the list being viewed, so as to have a scroll thumb size\n    and position which realistically reflects the size of the list being shown.\n\n    The position of the cradle is controlled by an 'axis' which is a 0px height/width div\n    (along the medial - ScrollBlock can be vertical or horizontal). The purpose of the axis is to\n    act as a 'fold', above which cradle content expands 'headwards' (up or left) in the Cradle, and\n    below which the cradle content expands 'tailwards' (doen or right). The Cradle content is held in\n    two CSS grids (children of the axis): one above or left (the 'head' grid), and one below or right,\n    of the position of the axis (the 'tail' grid).\n\n    The axis is kept near the leading (headward) edge of the visible cell rows of the Viewport\n\n    Technically, there are several key reference points tracked by the Cradle. These are:\n        - axisReferenceIndex is the virtual index of the item controlling the location of the axis.\n            The axisReferenceIndex is also used to allocate items above (lower index value) and below\n            (same or higher index value) the axis fold. The axisRefernceIndex is the first item in the\n            tail section of the Cradle.\n        - (cradleReferenceIndex is inferred from the axisReferenceIndex, and is the virtual index of\n            the item defining the leading bound of the cradle content. The cradleReferenceIndex is usually\n            the first item in the head section of the Cradle, unless the cradle shows the very top of the\n            list, in which case the cradleReferenceIndex is the same as the AxisReferenceIndex)\n        - axisViewportPixelOffset (pixels that place the axis in relation to the viewport's leading edge)\n        - the blockScrollPos, which is the amount of scroll (Viewport scrollTop or scrollLeft) of the\n            ScrollBlock\n    \n    Overscroll handling (repositioning):\n        Owing to the potential rapidity of scrolling, which in the case of large lists and heavy content\n        can be too fast for the system to keep up, there is an overscroll protocol called 'repositioning'.\n\n        If the overscroll is such that the cradle (including its two content grids) has entirely passed\n        out of the viewport, then the Cradle component is replaced by a ScrollTracker (or by null if\n        the host takes responsibility for feedback). The ScrollTracker displays to the user the relative\n        location in the virtual list at the edge of the viewport during repositioning. When the scrolling\n        stops Cradle recreates the cradle content, according to the final position of the repositioning\n        process.\n\n    Cradle changes are activated by interrupts:\n    - scrolling\n    - resizing of the viewport\n    - observer callbacks:\n        - cradle/viewport intersection for repositioning when the cradle races out of scope\n        - two 'triggerline'/viewport intersections which trigger rolling of content\n            - rolling content triggers re-allocation of content between cradle head and tail grids\n    - pivot - change of orientation\n    - host changes of configuration specs through property changes or direct service calls\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\nvar Viewport_1 = __webpack_require__(/*! ./Viewport */ \"./src/Viewport.tsx\");\n// popup position tracker for repositioning\nvar ScrollTracker_1 = __importDefault(__webpack_require__(/*! ./cradle/ScrollTracker */ \"./src/cradle/ScrollTracker.tsx\"));\n// support code; process handlers\nvar scrollhandler_1 = __importDefault(__webpack_require__(/*! ./cradle/scrollhandler */ \"./src/cradle/scrollhandler.tsx\"));\nvar statehandler_1 = __importDefault(__webpack_require__(/*! ./cradle/statehandler */ \"./src/cradle/statehandler.tsx\"));\nvar contenthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/contenthandler */ \"./src/cradle/contenthandler.tsx\"));\nvar layouthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/layouthandler */ \"./src/cradle/layouthandler.tsx\"));\nvar interrupthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/interrupthandler */ \"./src/cradle/interrupthandler.tsx\"));\nvar servicehandler_1 = __importDefault(__webpack_require__(/*! ./cradle/servicehandler */ \"./src/cradle/servicehandler.tsx\"));\nvar styleshandler_1 = __importDefault(__webpack_require__(/*! ./cradle/styleshandler */ \"./src/cradle/styleshandler.tsx\"));\n// cacheAPI is imported as a property; instantiated at the root\nvar InfiniteGridScroller_1 = __webpack_require__(/*! ./InfiniteGridScroller */ \"./src/InfiniteGridScroller.tsx\");\n// for children\nexports.CradleContext = react_1[\"default\"].createContext(null);\n// component\nvar Cradle = function Cradle(_ref) {\n  var gridSpecs = _ref.gridSpecs,\n    runwaySize = _ref.runwaySize,\n    listsize = _ref.listsize,\n    updateListsize = _ref.updateListsize,\n    startingIndex = _ref.startingIndex,\n    getItem = _ref.getItem,\n    placeholder = _ref.placeholder,\n    placeholderMessages = _ref.placeholderMessages,\n    userCallbacks = _ref.userCallbacks,\n    styles = _ref.styles,\n    triggerlineOffset = _ref.triggerlineOffset,\n    cache = _ref.cache,\n    cacheMax = _ref.cacheMax,\n    scrollerID = _ref.scrollerID,\n    cacheAPI = _ref.cacheAPI,\n    usePlaceholder = _ref.usePlaceholder,\n    useScrollTracker = _ref.useScrollTracker,\n    showAxis = _ref.showAxis,\n    ONAFTERSCROLL_TIMEOUT = _ref.ONAFTERSCROLL_TIMEOUT,\n    IDLECALLBACK_TIMEOUT = _ref.IDLECALLBACK_TIMEOUT,\n    MAX_CACHE_OVER_RUN = _ref.MAX_CACHE_OVER_RUN,\n    VARIABLE_MEASUREMENTS_TIMEOUT = _ref.VARIABLE_MEASUREMENTS_TIMEOUT,\n    scrollerProperties = _ref.scrollerProperties;\n  // ========================[ DATA SETUP ]========================\n  // unpack gridSpecs\n  var orientation = gridSpecs.orientation,\n    gap = gridSpecs.gap,\n    padding = gridSpecs.padding,\n    cellHeight = gridSpecs.cellHeight,\n    cellWidth = gridSpecs.cellWidth,\n    cellMinHeight = gridSpecs.cellMinHeight,\n    cellMinWidth = gridSpecs.cellMinWidth,\n    layout = gridSpecs.layout;\n  // get viewport context\n  var ViewportContextProperties = (0, react_1.useContext)(Viewport_1.ViewportContext);\n  var ViewportContextPropertiesRef = (0, react_1.useRef)(null);\n  ViewportContextPropertiesRef.current = ViewportContextProperties; // for closures\n  // flags\n  var isMountedRef = (0, react_1.useRef)(true);\n  var isCachedRef = (0, react_1.useRef)(false);\n  var wasCachedRef = (0, react_1.useRef)(false);\n  var hasBeenRenderedRef = (0, react_1.useRef)(false);\n  // trigger control\n  var triggerHistoryRef = (0, react_1.useRef)({\n    previousReferenceName: null\n  });\n  //  viewport dimensions and cached state\n  var getViewportDimensions = function getViewportDimensions() {\n    var viewportElement = ViewportContextProperties.elementRef.current;\n    return {\n      width: viewportElement.offsetWidth,\n      height: viewportElement.offsetHeight\n    };\n  };\n  // two sources; could use some reconciliation\n  var viewportDimensions = ViewportContextProperties.viewportDimensions; // for scrollTracker\n  var _getViewportDimension = getViewportDimensions(),\n    viewportheight = _getViewportDimension.height,\n    viewportwidth = _getViewportDimension.width; // viewportDimensions\n  // cache test\n  // zero width and height means the component must be in portal (cache) state\n  var isInPortal = viewportwidth == 0 && viewportheight == 0;\n  var isCacheChange = isInPortal != isCachedRef.current;\n  if (isCacheChange) {\n    wasCachedRef.current = isCachedRef.current;\n    isCachedRef.current = isInPortal;\n  }\n  // cradle state\n  var _ref2 = (0, react_1.useState)('setup'),\n    _ref3 = _slicedToArray(_ref2, 2),\n    cradleState = _ref3[0],\n    setCradleState = _ref3[1];\n  var cradleStateRef = (0, react_1.useRef)(null); // access by closures\n  cradleStateRef.current = cradleState;\n  // if (!scrollerProperties) {\n  // console.log('--\x3e cradleState','-'+scrollerID+'-', cradleState)\n  // console.log('-- index',~'+scrollerProperties?.cellFramePropertiesRef.current.index+'~')\n  // }\n  // cradle scaffold element refs\n  var headCradleElementRef = (0, react_1.useRef)(null);\n  var tailCradleElementRef = (0, react_1.useRef)(null);\n  var axisCradleElementRef = (0, react_1.useRef)(null);\n  var triggercellTriggerlineHeadElementRef = (0, react_1.useRef)(null);\n  var triggercellTriggerlineTailElementRef = (0, react_1.useRef)(null);\n  // layout bundle\n  var cradleElementsRef = (0, react_1.useRef)({\n    headRef: headCradleElementRef,\n    tailRef: tailCradleElementRef,\n    axisRef: axisCradleElementRef,\n    triggercellTriggerlineHeadRef: triggercellTriggerlineHeadElementRef,\n    triggercellTriggerlineTailRef: triggercellTriggerlineTailElementRef\n  });\n  // ------------------------[ calculated properties ]------------------------\n  // configuration calculations\n  // crosscount (also calculated by Scrollblock for deriving Scrollblock length)\n  var crosscount = (0, react_1.useMemo)(function () {\n    if (isCachedRef.current) return 0;\n    var viewportcrosslength = orientation == 'vertical' ? viewportwidth : viewportheight;\n    // cross length of viewport (gap to match crossLength)\n    var viewportcrosslengthforcalc = viewportcrosslength - padding * 2 + gap;\n    var cellcrosslength = (orientation == 'vertical' ? cellWidth : cellHeight) + gap;\n    var cellcrosslengthforcalc = Math.min(cellcrosslength, viewportcrosslengthforcalc); // result cannot be less than 1\n    var crosscount = Math.floor(viewportcrosslengthforcalc / cellcrosslengthforcalc);\n    return crosscount;\n  }, [orientation, gap, padding, cellWidth, cellHeight, viewportheight, viewportwidth]);\n  // various row counts\n  var _ref4 = (0, react_1.useMemo)(function () {\n      var viewportLength = orientation == 'vertical' ? viewportheight : viewportwidth;\n      var baseRowLength;\n      if (layout == 'uniform') {\n        if (orientation == 'vertical') {\n          baseRowLength = cellHeight;\n        } else {\n          baseRowLength = cellWidth;\n        }\n      } else {\n        // layout == 'variable'\n        if (orientation == 'vertical') {\n          baseRowLength = cellMinHeight;\n        } else {\n          baseRowLength = cellMinWidth;\n        }\n      }\n      baseRowLength += gap;\n      var viewportRowcount = Math.ceil(viewportLength / baseRowLength);\n      var listRowcount = Math.ceil(listsize / crosscount);\n      var calculatedCradleRowcount = viewportRowcount + runwaySize * 2;\n      var cradleRowcount = Math.min(listRowcount, calculatedCradleRowcount);\n      var runwayRowcount;\n      if (calculatedCradleRowcount >= cradleRowcount) {\n        runwayRowcount = runwaySize;\n      } else {\n        var diff = cradleRowcount - calculatedCradleRowcount;\n        runwayRowcount -= Math.floor(diff / 2);\n        runwayRowcount = Math.max(0, runwayRowcount);\n      }\n      var itemcount = cradleRowcount * crosscount;\n      if (itemcount > listsize) {\n        itemcount = listsize;\n        cradleRowcount = Math.ceil(itemcount / crosscount);\n      }\n      return [cradleRowcount, viewportRowcount, listRowcount, runwayRowcount];\n    }, [orientation, gap,\n    // padding,\n    cellWidth, cellHeight, cellMinWidth, cellMinHeight, viewportheight, viewportwidth, listsize, runwaySize, crosscount, layout]),\n    _ref5 = _slicedToArray(_ref4, 4),\n    cradleRowcount = _ref5[0],\n    viewportRowcount = _ref5[1],\n    listRowcount = _ref5[2],\n    runwayRowcount = _ref5[3];\n  // ----------------------[ callbacks ]----------------------------\n  // host callbacks, upacked by serviceHandler\n  var externalCallbacksRef = (0, react_1.useRef)({\n    referenceIndexCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.referenceIndexCallback,\n    repositioningFlagCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.repositioningFlagCallback,\n    repositioningIndexCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.repositioningIndexCallback,\n    preloadIndexCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.preloadIndexCallback,\n    deleteListCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.deleteListCallback,\n    changeListsizeCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.changeListsizeCallback,\n    itemExceptionCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.itemExceptionCallback\n  });\n  // -----------------[ bundle properties for handlers ]-------------------\n  // bundle all cradle props to pass to handlers - ultimately cradleParametersRef\n  var cradleInheritedPropertiesRef = (0, react_1.useRef)(null); // access by closures and support callbacks\n  // up to date values\n  cradleInheritedPropertiesRef.current = {\n    // gridSpecs\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    layout: layout,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    cellMinHeight: cellMinHeight,\n    cellMinWidth: cellMinWidth,\n    // ...rest\n    cache: cache,\n    cacheMax: cacheMax,\n    startingIndex: startingIndex,\n    runwaySize: runwaySize,\n    getItem: getItem,\n    placeholder: placeholder,\n    placeholderMessages: placeholderMessages,\n    usePlaceholder: usePlaceholder,\n    triggerlineOffset: triggerlineOffset,\n    scrollerID: scrollerID,\n    // objects\n    userCallbacks: userCallbacks,\n    styles: styles,\n    cacheAPI: cacheAPI,\n    // control values\n    ONAFTERSCROLL_TIMEOUT: ONAFTERSCROLL_TIMEOUT,\n    MAX_CACHE_OVER_RUN: MAX_CACHE_OVER_RUN,\n    scrollerProperties: scrollerProperties\n  };\n  var scrollerPropertiesRef = (0, react_1.useRef)(null);\n  // passed to cellFrame content (user content) if requested\n  scrollerPropertiesRef.current = {\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    layout: layout,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    cellMinHeight: cellMinHeight,\n    cellMinWidth: cellMinWidth,\n    listsize: listsize,\n    runwayRowcount: runwayRowcount,\n    cache: cache,\n    cacheMax: cacheMax,\n    startingIndex: startingIndex,\n    crosscount: crosscount,\n    scrollerID: scrollerID\n  };\n  // configuration properties to share with handlers\n  var cradleInternalPropertiesRef = (0, react_1.useRef)(null);\n  cradleInternalPropertiesRef.current = {\n    // updated values\n    crosscount: crosscount,\n    cradleRowcount: cradleRowcount,\n    viewportRowcount: viewportRowcount,\n    listRowcount: listRowcount,\n    listsize: listsize,\n    updateListsize: updateListsize,\n    runwayRowcount: runwayRowcount,\n    // the following values are maintained elsewhere\n    isMountedRef: isMountedRef,\n    cradleElementsRef: cradleElementsRef,\n    isCachedRef: isCachedRef,\n    wasCachedRef: wasCachedRef,\n    triggerHistoryRef: triggerHistoryRef,\n    // for stateHandler\n    cradleStateRef: cradleStateRef,\n    setCradleState: setCradleState\n  };\n  // placeholder in cradleParameters to make available individual handlers\n  var handlersRef = (0, react_1.useRef)(null);\n  // cradle parameters MASTER BUNDLE\n  var cradleParameters = {\n    handlersRef: handlersRef,\n    ViewportContextPropertiesRef: ViewportContextPropertiesRef,\n    cradleInheritedPropertiesRef: cradleInheritedPropertiesRef,\n    scrollerPropertiesRef: scrollerPropertiesRef,\n    cradleInternalPropertiesRef: cradleInternalPropertiesRef,\n    externalCallbacksRef: externalCallbacksRef\n  };\n  var cradleParametersRef = (0, react_1.useRef)(null);\n  cradleParametersRef.current = cradleParameters;\n  // ongoing source of handlers - note all Handlers are given all parameters (cradleParameters)\n  if (!handlersRef.current) {\n    handlersRef.current = getCradleHandlers(cradleParameters);\n  }\n  // make handlers directly available to cradle code below\n  var _handlersRef$current = handlersRef.current,\n    interruptHandler = _handlersRef$current.interruptHandler,\n    scrollHandler = _handlersRef$current.scrollHandler,\n    contentHandler = _handlersRef$current.contentHandler,\n    layoutHandler = _handlersRef$current.layoutHandler,\n    serviceHandler = _handlersRef$current.serviceHandler,\n    stylesHandler = _handlersRef$current.stylesHandler;\n  // =======================[ INTERCEPT CACHING STATE CHANGE ]=========================\n  /*\n      Intercept change in caching status:\n      when a component is cached in a portal (in the React virtual DOM), including the transition of\n      being moved from one cellFrame to another when crossing the Cradle axis,\n      the scrollPos (scrollLeft or scrollTop) is reset to 0 (zero). When the scroller is\n      moved to a cellFrame, this code triggers restoration the scrollPos (see case 'parentingtransition'\n      in the state management section below).\n  \n      This supports InfiniteGridScroller components to be cached as content.\n  \n      The restore scrollPos action must be the first priority to hide these scrollPos adjustments\n      from the user.\n  */\n  var restoreScrollPos = function restoreScrollPos() {\n    var cradlePositionData = layoutHandler.cradlePositionData;\n    var blockScrollPos = cradlePositionData.blockScrollPos;\n    var blockXScrollPos = cradlePositionData.blockXScrollPos;\n    if (blockScrollPos !== null) {\n      var viewportElement = ViewportContextPropertiesRef.current.elementRef.current;\n      viewportElement[cradlePositionData.blockScrollProperty] = blockScrollPos;\n      viewportElement[cradlePositionData.blockXScrollProperty] = blockXScrollPos;\n    }\n  };\n  if (isCacheChange && !isCachedRef.current) {\n    restoreScrollPos();\n  }\n  // change state for entering or leaving cache\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return; // nothing to do\n    if (isCachedRef.current && !wasCachedRef.current) {\n      // into cache\n      setCradleState('cached');\n    } else if (!isCachedRef.current && wasCachedRef.current) {\n      // out of cache\n      wasCachedRef.current = false;\n      if (hasBeenRenderedRef.current) {\n        setCradleState('rerenderfromcache');\n      } else {\n        setCradleState('firstrenderfromcache');\n      }\n    }\n  }, [isCachedRef.current, wasCachedRef.current]);\n  // ===================[ INITIALIZATION effects ]=========================\n  // initialization effects are independent of caching\n  // clear mounted flag on unmount\n  (0, react_1.useEffect)(function () {\n    isMountedRef.current = true;\n    // unmount\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  //send call-in functions to host\n  (0, react_1.useEffect)(function () {\n    if (!userCallbacks.functionsCallback) return;\n    var scrollToIndex = serviceHandler.scrollToIndex,\n      reload = serviceHandler.reload,\n      setListsize = serviceHandler.setListsize,\n      clearCache = serviceHandler.clearCache,\n      getCacheIndexMap = serviceHandler.getCacheIndexMap,\n      getCacheItemMap = serviceHandler.getCacheItemMap,\n      getCradleIndexMap = serviceHandler.getCradleIndexMap,\n      remapIndexes = serviceHandler.remapIndexes,\n      moveIndex = serviceHandler.moveIndex,\n      insertIndex = serviceHandler.insertIndex,\n      removeIndex = serviceHandler.removeIndex;\n    var functions = {\n      scrollToIndex: scrollToIndex,\n      reload: reload,\n      setListsize: setListsize,\n      clearCache: clearCache,\n      getCacheIndexMap: getCacheIndexMap,\n      getCacheItemMap: getCacheItemMap,\n      getCradleIndexMap: getCradleIndexMap,\n      remapIndexes: remapIndexes,\n      moveIndex: moveIndex,\n      insertIndex: insertIndex,\n      removeIndex: removeIndex\n    };\n    userCallbacks.functionsCallback(functions);\n  }, []);\n  // initialize window scroll listeners\n  (0, react_1.useEffect)(function () {\n    var viewportElement = ViewportContextPropertiesRef.current.elementRef.current;\n    viewportElement.addEventListener('scroll', scrollHandler.onScroll);\n    return function () {\n      viewportElement && viewportElement.removeEventListener('scroll', scrollHandler.onScroll);\n    };\n  }, []);\n  // iOS Safari requires special handling - it ignores assignments to scrollLeft/scrollTop during scrolling\n  (0, react_1.useEffect)(function () {\n    var layout = cradleInheritedPropertiesRef.current.layout;\n    if (!(0, InfiniteGridScroller_1.isSafariIOS)() || layout == 'uniform') return;\n    var viewportElement = ViewportContextPropertiesRef.current.elementRef.current;\n    viewportElement.addEventListener('scroll', scrollHandler.iOSonScroll);\n    return function () {\n      viewportElement && viewportElement.removeEventListener('scroll', scrollHandler.iOSonScroll);\n    };\n  }, []);\n  // observer support\n  /*\n      There are two interection observers: one for the two cradle grids, and another for triggerlines;\n          both against the viewport.\n  */\n  (0, react_1.useEffect)(function () {\n    var cradleIntersect = interruptHandler.cradleIntersect,\n      triggerlinesIntersect = interruptHandler.triggerlinesIntersect;\n    // intersection observer for cradle body\n    // this sets up an IntersectionObserver of the cradle against the viewport. When the\n    // cradle goes out of the observer scope, the 'repositioningRender' cradle state is triggered.\n    var cradleintersectobserver = cradleIntersect.createObserver();\n    cradleIntersect.connectElements();\n    // triggerobserver triggers cradle content updates \n    //     when triggerlines pass the edge of the viewport\n    // defer connectElements until triggercell triggerlines have been assigned\n    var triggerobserver = triggerlinesIntersect.createObserver();\n    return function () {\n      cradleintersectobserver.disconnect();\n      triggerobserver.disconnect();\n    };\n  }, []);\n  // =====================[ RECONFIGURATION effects ]======================\n  // change listsize, caching, resize (UI resize of the viewport), reconfigure, or pivot\n  // inernal callback: the new list size will always be less than current listsize\n  // invoked if getItem returns null\n  var nullItemSetMaxListsize = (0, react_1.useCallback)(function (maxListsize) {\n    var listsize = cradleInternalPropertiesRef.current.listsize;\n    if (maxListsize < listsize) {\n      var _serviceHandler$callb = serviceHandler.callbacks,\n        deleteListCallback = _serviceHandler$callb.deleteListCallback,\n        changeListsizeCallback = _serviceHandler$callb.changeListsizeCallback;\n      var dListCallback;\n      if (deleteListCallback) {\n        dListCallback = function dListCallback(deleteList) {\n          deleteListCallback('getItem returned null', deleteList);\n        };\n      }\n      contentHandler.updateListsize(maxListsize);\n      cacheAPI.changeCacheListsize(maxListsize, dListCallback, changeListsizeCallback);\n    }\n  }, []);\n  // caching change\n  (0, react_1.useEffect)(function () {\n    if (cache == 'preload') {\n      setCradleState('startpreload');\n      return;\n    }\n    if (cradleStateRef.current == 'setup') return;\n    switch (cache) {\n      case 'keepload':\n        {\n          var modelIndexList = contentHandler.getModelIndexList();\n          var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n          var dListCallback;\n          if (deleteListCallback) {\n            dListCallback = function dListCallback(deleteList) {\n              deleteListCallback('pare cache to cacheMax', deleteList);\n            };\n          }\n          var _cacheMax = cradleParameters.cradleInheritedPropertiesRef.current.cacheMax;\n          if (cacheAPI.pareCacheToMax(_cacheMax, modelIndexList, dListCallback)) {\n            cacheAPI.renderPortalLists();\n          }\n          setCradleState('changecaching');\n          break;\n        }\n      case 'cradle':\n        {\n          var _modelIndexList = contentHandler.getModelIndexList();\n          var _deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n          var _dListCallback;\n          if (_deleteListCallback) {\n            _dListCallback = function _dListCallback(deleteList) {\n              _deleteListCallback('match cache to cradle', deleteList);\n            };\n          }\n          if (cacheAPI.matchCacheToCradle(_modelIndexList, _dListCallback)) {\n            cacheAPI.renderPortalLists();\n          }\n          setCradleState('changecaching');\n          break;\n        }\n    }\n  }, [cache, cacheMax]);\n  // trigger viewportresizing response based on viewport state\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    // movement to and from cache is independent of ui viewportresizing\n    if (isCachedRef.current || wasCachedRef.current) {\n      return;\n    }\n    if (ViewportContextPropertiesRef.current.isResizing && cradleStateRef.current != 'viewportresizing') {\n      interruptHandler.pauseInterrupts();\n      setCradleState('viewportresizing');\n    }\n    // complete viewportresizing mode\n    if (!ViewportContextPropertiesRef.current.isResizing && cradleStateRef.current == 'viewportresizing') {\n      setCradleState('finishviewportresize');\n    }\n  }, [ViewportContextPropertiesRef.current.isResizing]);\n  // reconfigure for changed size parameters\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    if (isCachedRef.current) return;\n    interruptHandler.pauseInterrupts();\n    setCradleState('reconfigure');\n  }, [cellHeight, cellWidth, gap, padding, triggerlineOffset, layout, runwaySize]);\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    if (isCachedRef.current) return;\n    var _cradleInternalProper = cradleInternalPropertiesRef.current,\n      viewportRowcount = _cradleInternalProper.viewportRowcount,\n      crosscount = _cradleInternalProper.crosscount;\n    var runwaySize = cradleInheritedPropertiesRef.current.runwaySize;\n    var calculatedCradleRowcount = viewportRowcount + runwaySize * 2;\n    var calculatedCradleItemcount = calculatedCradleRowcount * crosscount;\n    var indexSpan = contentHandler.indexSpan;\n    var _indexSpan = _slicedToArray(indexSpan, 2),\n      lowIndex = _indexSpan[0],\n      highIndex = _indexSpan[1];\n    var measuredCradleItemCount;\n    var changeIsWithinCradle;\n    if (indexSpan.length == 0) {\n      measuredCradleItemCount = 0;\n      changeIsWithinCradle = true;\n    } else {\n      measuredCradleItemCount = highIndex - lowIndex + 1;\n      changeIsWithinCradle = highIndex >= listsize - 1;\n    }\n    if (measuredCradleItemCount < calculatedCradleItemcount ||\n    // sub-viewport visible listcount\n    changeIsWithinCradle) {\n      // change is not beyond cradle\n      interruptHandler.pauseInterrupts();\n      setCradleState('reconfigureforlistsize');\n    } else {\n      setCradleState('ready');\n    }\n  }, [listsize]);\n  // a new getItem function implies the need to reload\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    interruptHandler.pauseInterrupts();\n    setCradleState('reload');\n  }, [getItem]);\n  // pivot triggered on change of orientation\n  (0, react_1.useEffect)(function () {\n    layoutHandler.cradlePositionData.blockScrollProperty = orientation == \"vertical\" ? \"scrollTop\" : \"scrollLeft\";\n    layoutHandler.cradlePositionData.blockXScrollProperty = orientation == \"horizontal\" ? \"scrollTop\" : \"scrollLeft\";\n    if (cradleStateRef.current == 'setup') {\n      layoutHandler.cradlePositionData.blockScrollPos = 0;\n      layoutHandler.cradlePositionData.blockXScrollPos = 0;\n      return;\n    }\n    if (isCachedRef.current) {\n      hasBeenRenderedRef.current = false;\n      return;\n    }\n    var _cradleInheritedPrope = cradleInheritedPropertiesRef.current,\n      layout = _cradleInheritedPrope.layout,\n      gap = _cradleInheritedPrope.gap;\n    var cradlePositionData = layoutHandler.cradlePositionData;\n    if (layout == 'uniform') {\n      var _cradleInheritedPrope2 = cradleInheritedPropertiesRef.current,\n        _cellWidth = _cradleInheritedPrope2.cellWidth,\n        _cellHeight = _cradleInheritedPrope2.cellHeight,\n        _gap = _cradleInheritedPrope2.gap;\n      // get previous ratio\n      var previousCellPixelLength = (orientation == 'vertical' ? _cellWidth : _cellHeight) + _gap;\n      var previousAxisOffset = layoutHandler.cradlePositionData.targetAxisViewportPixelOffset;\n      var previousratio = previousAxisOffset / previousCellPixelLength;\n      var pivotCellPixelLength = (orientation == 'vertical' ? _cellHeight : _cellWidth) + _gap;\n      var pivotAxisOffset = previousratio * pivotCellPixelLength;\n      cradlePositionData.targetAxisViewportPixelOffset = Math.round(pivotAxisOffset);\n    } else {\n      cradlePositionData.targetAxisViewportPixelOffset = gap;\n    }\n    interruptHandler.pauseInterrupts();\n    setCradleState('pivot');\n  }, [orientation]);\n  // =====================[ STYLES ]===========================\n  // styles for the six scaffold components\n  var _ref6 = (0, react_1.useMemo)(function () {\n      return stylesHandler.getCradleStyles({\n        orientation: orientation,\n        cellHeight: cellHeight,\n        cellWidth: cellWidth,\n        cellMinHeight: cellMinHeight,\n        cellMinWidth: cellMinWidth,\n        gap: gap,\n        padding: padding,\n        viewportheight: viewportheight,\n        viewportwidth: viewportwidth,\n        crosscount: crosscount,\n        userstyles: styles,\n        triggerlineOffset: triggerlineOffset,\n        layout: layout\n      });\n    }, [orientation, cellHeight, cellWidth, cellMinHeight, cellMinWidth, gap, padding, viewportheight, viewportwidth, crosscount, styles, triggerlineOffset, layout]),\n    _ref7 = _slicedToArray(_ref6, 6),\n    cradleHeadStyle = _ref7[0],\n    cradleTailStyle = _ref7[1],\n    cradleAxisStyle = _ref7[2],\n    cradleDividerStyle = _ref7[3],\n    triggercellTriggerlineHeadStyle = _ref7[4],\n    triggercellTriggerlineTailStyle = _ref7[5];\n  // =====================[ STATE MANAGEMENT ]==========================\n  // this is the core state engine (about 30 states), using named states\n  // useLayoutEffect for suppressing flashes\n  (0, react_1.useLayoutEffect)(function () {\n    switch (cradleState) {\n      // --------------[ precursors to setCradleContent ]---------------\n      // these are all workflow related, but\n      // resize could be asynchronous when rotating phone during scroll intertia\n      case 'setup':\n        {\n          // cycle to allow for ref assignments\n          if (cradleInheritedPropertiesRef.current.cache != 'preload') {\n            if (isCachedRef.current) {\n              setCradleState('cached');\n            } else {\n              setCradleState('firstrender'); // load grid\n            }\n          }\n\n          break;\n        }\n      case 'viewportresizing':\n        {\n          // no-op, wait for resizing to end\n          break;\n        }\n      case 'startpreload':\n        {\n          var finalCallback = function finalCallback() {\n            var modelIndexList = contentHandler.getModelIndexList();\n            var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n            var dListCallback;\n            if (deleteListCallback) {\n              dListCallback = function dListCallback(deleteList) {\n                deleteListCallback('pare cache to cacheMax', deleteList);\n              };\n            }\n            if (cacheAPI.pareCacheToMax(cacheMax, modelIndexList, dListCallback)) {\n              cacheAPI.renderPortalLists();\n            }\n            if (!isCachedRef.current) {\n              setCradleState('finishpreload');\n            } else {\n              setCradleState('cached');\n            }\n          };\n          cacheAPI.preload(finalCallback, nullItemSetMaxListsize);\n          break;\n        }\n      case 'cached':\n        {\n          if (!wasCachedRef.current && !isCachedRef.current) {\n            if (hasBeenRenderedRef.current) {\n              setCradleState('rerenderfromcache');\n            } else {\n              setCradleState('firstrenderfromcache');\n            }\n          } // else wait for reparenting\n          break;\n        }\n      case 'startreposition':\n        {\n          var signals = interruptHandler.signals;\n          signals.pauseTriggerlinesObserver = true;\n          // avoid recursive cradle intersection interrupts\n          signals.pauseCradleIntersectionObserver = true;\n          signals.repositioningRequired = false; // because now underway\n          if (scrollHandler.isScrolling) {\n            setCradleState('repositioningRender'); // toggles with repositioningContinuation\n          } else {\n            setCradleState('finishreposition');\n          }\n          break;\n        }\n      // -------------------[ setCradleContent ]------------------\n      /*\n          the following 12 cradle states all resolve with\n          a chain starting with setCradleContent,\n          continuing with 'preparerender', and ending with\n          'restoreinterrupts', with a detour for variable layout\n          to reconfigure the scrollblock\n      */\n      case 'firstrender':\n      case 'firstrenderfromcache':\n      case 'rerenderfromcache':\n      case 'scrollto':\n      case 'changecaching':\n      case 'finishpreload':\n      case 'finishreposition':\n      case 'finishviewportresize':\n      case 'pivot':\n      case 'reconfigure':\n      case 'reconfigureforlistsize':\n      case 'reload':\n        {\n          if (isCachedRef.current) {\n            setCradleState('cached');\n            break;\n          }\n          var _cradleContent = contentHandler.content;\n          _cradleContent.headModelComponents = [];\n          _cradleContent.tailModelComponents = [];\n          var _layout = cradleInheritedPropertiesRef.current.layout;\n          interruptHandler.triggerlinesIntersect.disconnect();\n          interruptHandler.cradleIntersect.disconnect();\n          if (_layout == 'variable') {\n            // restore base config to scrollblock\n            // already done for reposition\n            cradleState != 'finishreposition' && layoutHandler.restoreBaseScrollblockConfig();\n          }\n          if (cradleState == 'reload') {\n            cacheAPI.clearCache();\n          }\n          var _listsize = cradleInternalPropertiesRef.current.listsize;\n          // set data\n          if (_listsize) contentHandler.setCradleContent(cradleState);\n          if (cradleState != 'finishpreload') {\n            hasBeenRenderedRef.current = true;\n          }\n          // synchronize cache if necessary\n          var _cache = cradleInheritedPropertiesRef.current.cache;\n          if (_cache == 'cradle') {\n            var modelIndexList = contentHandler.getModelIndexList();\n            var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n            var dListCallback;\n            if (deleteListCallback) {\n              dListCallback = function dListCallback(deleteList) {\n                deleteListCallback('match cache to cradle', deleteList);\n              };\n            }\n            if (cacheAPI.matchCacheToCradle(modelIndexList, dListCallback)) {\n              cacheAPI.renderPortalLists();\n            }\n          }\n          // prepare the cycle for preparerender\n          _cradleContent.headDisplayComponents = _cradleContent.headModelComponents;\n          _cradleContent.tailDisplayComponents = _cradleContent.tailModelComponents;\n          // update virtual DOM\n          if (_layout == 'uniform') {\n            setCradleState('preparerender');\n          } else {\n            setCradleState('refreshDOMsetforvariability');\n          }\n          break;\n        }\n      case 'preparerender':\n        {\n          // cycle for DOM update\n          // triggerlines will have been assigned to a new triggerCell by now.\n          // connectElements was delayed for a cycle to render triggercell triggerlines\n          interruptHandler.triggerlinesIntersect.connectElements();\n          interruptHandler.cradleIntersect.connectElements();\n          setCradleState('restoreinterrupts'); // to restore interrupts\n          break;\n        }\n      case 'restoreinterrupts':\n        {\n          // normalize\n          interruptHandler.restoreInterrupts();\n          setCradleState('ready');\n          break;\n        }\n      // ----------------------[ followup from updateCradleContent ]------------\n      // scroll effects\n      // renderupdatedcontent is called from updateCradleContent. \n      // it is required to integrate changed DOM configurations before 'ready' is displayed\n      case 'renderupdatedcontent':\n        {\n          // cycle for DOM update\n          contentHandler.updateCradleContent();\n          setCradleState('finishupdatedcontent');\n          break;\n        }\n      case 'finishupdatedcontent':\n        {\n          // cycle for DOM update\n          // synchronize cache\n          var _cache2 = cradleInternalPropertiesRef.current.cache;\n          if (_cache2 == 'keepload') {\n            contentHandler.guardAgainstRunawayCaching();\n          }\n          var _layout2 = cradleInheritedPropertiesRef.current.layout;\n          if (_layout2 == 'uniform') {\n            interruptHandler.triggerlinesIntersect.connectElements();\n            // re-activate triggers; triggerlines will have been assigned to a new triggerCell by now.\n            // setCradleState('reconnectupdatedcontent')\n            setCradleState('ready');\n          } else {\n            // 'variable' content requiring reconfiguration\n            setCradleState('refreshDOMupdateforvariability');\n          }\n          break;\n        }\n      // ---------------------[ adjust scrollblock for set variable content ]--------------\n      case 'refreshDOMsetforvariability':\n        {\n          setCradleState('preparesetforvariability');\n          break;\n        }\n      case 'preparesetforvariability':\n        {\n          setTimeout(function () {\n            if (isMountedRef.current) {\n              contentHandler.adjustScrollblockForVariability('setcradle');\n              setCradleState('finishsetforvariability');\n            }\n          }, VARIABLE_MEASUREMENTS_TIMEOUT);\n          break;\n        }\n      case 'finishsetforvariability':\n        {\n          setCradleState('preparerender');\n          break;\n        }\n      // ------------------------[ adjust scrollblock for update variable content ]--------------\n      case 'refreshDOMupdateforvariability':\n        {\n          // extra cycle to allow for DOM synchronizion with grid changes\n          setCradleState('adjustupdateforvariability');\n          break;\n        }\n      case 'adjustupdateforvariability':\n        {\n          setTimeout(function () {\n            contentHandler.adjustScrollblockForVariability('updatecradle');\n            setCradleState('finishupdateforvariability');\n          }, 0);\n          break;\n        }\n      case 'finishupdateforvariability':\n        {\n          // re-activate triggers; triggerlines will have been assigned to a new triggerCell by now.\n          interruptHandler.triggerlinesIntersect.connectElements();\n          interruptHandler.signals.pauseCradleIntersectionObserver = false;\n          setCradleState('ready');\n          break;\n        }\n      // ----------------[ user requests ]-------------\n      case 'channelcradleresetafterinsertremove':\n        {\n          cacheAPI.applyPortalPartitionItemsForDeleteList();\n          setCradleState('changelistsizeafterinsertremove');\n          break;\n        }\n      // support for various host service requests; syncs cradle content with cache changes\n      case 'applyinsertremovechanges':\n      case 'applyremapchanges':\n      case 'applymovechanges':\n        {\n          cradleContent.headDisplayComponents = cradleContent.headModelComponents;\n          cradleContent.tailDisplayComponents = cradleContent.tailModelComponents;\n          cacheAPI.applyPortalPartitionItemsForDeleteList();\n          if (cradleState == 'applyinsertremovechanges') {\n            setCradleState('changelistsizeafterinsertremove');\n          } else {\n            setCradleState('ready');\n          }\n          break;\n        }\n      case 'changelistsizeafterinsertremove':\n        {\n          var newlistsize = serviceHandler.newlistsize;\n          serviceHandler.newlistsize = null;\n          setCradleState('ready');\n          // service handler called because this is a followon of a user intervention\n          serviceHandler.setListsize(newlistsize);\n          break;\n        }\n      case 'clearcache':\n        {\n          contentHandler.clearCradle();\n          cradleContent.headDisplayComponents = [];\n          cradleContent.tailDisplayComponents = [];\n          cacheAPI.clearCache();\n          setCradleState('ready');\n          break;\n        }\n    }\n  }, [cradleState]);\n  // standard rendering states (3 states)\n  (0, react_1.useEffect)(function () {\n    switch (cradleState) {\n      // repositioningRender and repositioningContinuation are toggled to generate continuous \n      // repositioning renders\n      case 'repositioningRender':\n        // no-op\n        break;\n      case 'repositioningContinuation':\n        // set from onScroll\n        setCradleState('repositioningRender');\n        break;\n      case 'ready':\n        // no-op\n        break;\n    }\n  }, [cradleState]);\n  // ==========================[ RENDER ]===========================\n  var scrollAxisReferenceIndex = layoutHandler.cradlePositionData.targetAxisReferenceIndex;\n  var scrollIndexRef = (0, react_1.useRef)(scrollAxisReferenceIndex);\n  var scrollTrackerArgs = (0, react_1.useMemo)(function () {\n    if (!['repositioningContinuation', 'repositioningRender', 'finishreposition'].includes(cradleState)) {\n      return null;\n    }\n    if (scrollAxisReferenceIndex != scrollIndexRef.current) {\n      scrollIndexRef.current = scrollAxisReferenceIndex;\n      var repositioningIndexCallback = serviceHandler.callbacks.repositioningIndexCallback;\n      repositioningIndexCallback && repositioningIndexCallback(scrollAxisReferenceIndex);\n    }\n    if (!useScrollTracker) return null;\n    var trackerargs = {\n      top: viewportDimensions.top + 3,\n      left: viewportDimensions.left + 3,\n      scrollAxisReferenceIndex: scrollAxisReferenceIndex,\n      listsize: listsize,\n      styles: styles\n    };\n    return trackerargs;\n  }, [cradleState, viewportDimensions, scrollAxisReferenceIndex, listsize, styles, useScrollTracker]);\n  var cradleContent = contentHandler.content;\n  var triggercellTriggerlinesRef = (0, react_1.useRef)(null);\n  triggercellTriggerlinesRef.current = (0, react_1.useMemo)(function () {\n    return [react_1[\"default\"].createElement(\"div\", {\n      key: 'head',\n      \"data-type\": 'headtrigger',\n      style: triggercellTriggerlineHeadStyle,\n      ref: triggercellTriggerlineHeadElementRef\n    }), react_1[\"default\"].createElement(\"div\", {\n      key: 'tail',\n      \"data-type\": 'tailtrigger',\n      style: triggercellTriggerlineTailStyle,\n      ref: triggercellTriggerlineTailElementRef\n    })];\n  }, [triggercellTriggerlineHeadStyle, triggercellTriggerlineTailStyle]);\n  var contextvalueRef = (0, react_1.useRef)({\n    scrollerPropertiesRef: scrollerPropertiesRef,\n    cacheAPI: cacheAPI,\n    nullItemSetMaxListsize: nullItemSetMaxListsize,\n    itemExceptionCallback: serviceHandler.callbacks.itemExceptionCallback,\n    IDLECALLBACK_TIMEOUT: IDLECALLBACK_TIMEOUT,\n    triggercellTriggerlinesRef: triggercellTriggerlinesRef\n  });\n  // display the cradle components, the ScrollTracker, or null\n  return react_1[\"default\"].createElement(exports.CradleContext.Provider, {\n    value: contextvalueRef.current\n  }, ['repositioningContinuation', 'repositioningRender'].includes(cradleState) ? useScrollTracker ? react_1[\"default\"].createElement(ScrollTracker_1[\"default\"], {\n    top: scrollTrackerArgs.top,\n    left: scrollTrackerArgs.left,\n    offset: scrollTrackerArgs.scrollAxisReferenceIndex,\n    listsize: scrollTrackerArgs.listsize,\n    styles: scrollTrackerArgs.styles\n  }) : null : react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-axis',\n    style: cradleAxisStyle,\n    ref: axisCradleElementRef\n  }, showAxis ?\n  // for debug\n  react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-divider',\n    style: cradleDividerStyle\n  }) : null, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'head',\n    ref: headCradleElementRef,\n    style: cradleHeadStyle\n  }, cradleState != 'setup' ? cradleContent.headDisplayComponents : null), react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'tail',\n    ref: tailCradleElementRef,\n    style: cradleTailStyle\n  }, cradleState != 'setup' ? cradleContent.tailDisplayComponents : null)));\n}; // Cradle\nexports[\"default\"] = Cradle;\n// utility\nvar getCradleHandlers = function getCradleHandlers(cradleParameters) {\n  var createHandler = function createHandler(handler) {\n    return new handler(cradleParameters);\n  };\n  var cacheAPI = cradleParameters.cradleInheritedPropertiesRef.current.cacheAPI;\n  cacheAPI.cradleParameters = cradleParameters;\n  return {\n    cacheAPI: cacheAPI,\n    interruptHandler: createHandler(interrupthandler_1[\"default\"]),\n    scrollHandler: createHandler(scrollhandler_1[\"default\"]),\n    stateHandler: createHandler(statehandler_1[\"default\"]),\n    contentHandler: createHandler(contenthandler_1[\"default\"]),\n    layoutHandler: createHandler(layouthandler_1[\"default\"]),\n    serviceHandler: createHandler(servicehandler_1[\"default\"]),\n    stylesHandler: createHandler(styleshandler_1[\"default\"])\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Cradle.tsx\n")},"./src/InfiniteGridScroller.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// InfiniteGridScroller.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.isSafariIOS = void 0;\n/*\n    react-infinite-grid-scroller = RIGS\n\n    The job of InfiniteGridScroller is to pass parameters to dependents.\n    Viewport contains the Scrollblock, which is full size for listsize of given cell height/width.\n    Scrollblock in turn contains the Cradle - a component that contains CellFrames, which contain\n    displayed user content (items) or transitional placeholders.\n\n    Host content is instantiated in a cache of React portals (via cacheAPI). Content is then\n    portal\'d to CellFrames. The cache can be configured to hold more items than the Cradle (limited by\n    device memory). Caching allows host content to maintain state.\n\n    Scrollblock represents the entirety of the list (and is sized accordingly). It is the object that is scrolled.\n\n    Cradle contains the list items, and is \'virtualized\' -- it appears as though it scrolls through a filled\n    scrollblock, but in fact it is only slightly larger than the viewport. Content is rotated in and out of the\n    cradle through the cache.\n    \n    Individual host items are framed by CellFrame, which are managed by Cradle.\n\n    Overall the InfiniteGridScroller as a package manages the asynchronous interactions of the\n    components of the mechanism. Most of the work occurs in the Cradle component.\n\n    The Rigs liner (the top level Viewport element) is set with \'display:absolute\' and \'inset:0\', so the user\n    containing block should be styles accordingly.\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\n// defensive\nvar react_error_boundary_1 = __webpack_require__(/*! react-error-boundary */ "./node_modules/react-error-boundary/dist/react-error-boundary.esm.js"); // www.npmjs.com/package/react-error-boundary\nvar isSafariIOS = function isSafariIOS() {\n  var is_ios = /iP(ad|od|hone)/i.test(window.navigator.userAgent),\n    is_safari = !!navigator.userAgent.match(/Version\\/[\\d\\.]+.*Safari/);\n  return is_ios && is_safari;\n};\nexports.isSafariIOS = isSafariIOS;\n// based on module template\nfunction ErrorFallback(_ref) {\n  var error = _ref.error,\n    resetErrorBoundary = _ref.resetErrorBoundary;\n  return react_1["default"].createElement("div", {\n    role: "alert",\n    style: {\n      margin: \'3px\'\n    }\n  }, react_1["default"].createElement("p", null, "Something went wrong inside react-infinite-grid-scroller. See the console for details."), react_1["default"].createElement("p", null, "Click to cancel the error and try to continue."), react_1["default"].createElement("button", {\n    style: {\n      border: \'1px solid black\',\n      margin: \'3px\',\n      padding: \'3px\'\n    },\n    onClick: resetErrorBoundary\n  }, "Cancel error"));\n}\n// scroller components\nvar Viewport_1 = __importDefault(__webpack_require__(/*! ./Viewport */ "./src/Viewport.tsx"));\nvar Scrollblock_1 = __importDefault(__webpack_require__(/*! ./Scrollblock */ "./src/Scrollblock.tsx"));\nvar Cradle_1 = __importDefault(__webpack_require__(/*! ./Cradle */ "./src/Cradle.tsx"));\n// loaded here to minimize redundant renders in Cradle\nvar PortalCache_1 = __importDefault(__webpack_require__(/*! ./PortalCache */ "./src/PortalCache.tsx"));\n// -------------------[ global session ID generator ]----------------\nvar globalScrollerID = 0;\n// ===================================[ INITIALIZE ]===========================\nvar InfiniteGridScroller = function InfiniteGridScroller(props) {\n  // ------------------[ normalize properties ]--------------------\n  var cellHeight = props.cellHeight,\n    cellWidth = props.cellWidth,\n    _props$startingListSi = props.startingListSize,\n    startingListSize = _props$startingListSi === void 0 ? 0 : _props$startingListSi,\n    getItem = props.getItem,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? \'vertical\' : _props$orientation,\n    _props$gap = props.gap,\n    gap = _props$gap === void 0 ? 0 : _props$gap,\n    _props$padding = props.padding,\n    padding = _props$padding === void 0 ? 0 : _props$padding,\n    _props$layout = props.layout,\n    layout = _props$layout === void 0 ? \'uniform\' : _props$layout,\n    _props$cellMinHeight = props.cellMinHeight,\n    cellMinHeight = _props$cellMinHeight === void 0 ? 25 : _props$cellMinHeight,\n    _props$cellMinWidth = props.cellMinWidth,\n    cellMinWidth = _props$cellMinWidth === void 0 ? 25 : _props$cellMinWidth,\n    _props$runwaySize = props.runwaySize,\n    runwaySize = _props$runwaySize === void 0 ? 3 : _props$runwaySize,\n    _props$startingIndex = props.startingIndex,\n    startingIndex = _props$startingIndex === void 0 ? 0 : _props$startingIndex,\n    _props$cache = props.cache,\n    cache = _props$cache === void 0 ? \'cradle\' : _props$cache,\n    _props$cacheMax = props.cacheMax,\n    cacheMax = _props$cacheMax === void 0 ? null : _props$cacheMax,\n    placeholder = props.placeholder,\n    _props$usePlaceholder = props.usePlaceholder,\n    usePlaceholder = _props$usePlaceholder === void 0 ? true : _props$usePlaceholder,\n    _props$useScrollTrack = props.useScrollTracker,\n    useScrollTracker = _props$useScrollTrack === void 0 ? true : _props$useScrollTrack,\n    _props$styles = props.styles,\n    styles = _props$styles === void 0 ? {} : _props$styles,\n    _props$placeholderMes = props.placeholderMessages,\n    placeholderMessages = _props$placeholderMes === void 0 ? {} : _props$placeholderMes,\n    _props$callbacks = props.callbacks,\n    callbacks = _props$callbacks === void 0 ? {} : _props$callbacks,\n    _props$technical = props.technical,\n    technical = _props$technical === void 0 ? {} : _props$technical,\n    _props$cacheAPI = props.cacheAPI,\n    cacheAPI = _props$cacheAPI === void 0 ? null : _props$cacheAPI,\n    dragdropProperties = props.dragdropProperties,\n    scrollerProperties = props.scrollerProperties;\n  var isMinimalPropsFail = false;\n  if (!(cellWidth && cellHeight && getItem)) {\n    console.log(\'RIGS: cellWidth, cellHeight, and getItem are required\');\n    isMinimalPropsFail = true;\n  }\n  // ---------------------[ Data setup ]----------------------\n  var originalValues = {\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    cellMinHeight: cellMinHeight,\n    cellMinWidth: cellMinWidth,\n    gap: gap,\n    padding: padding,\n    startingIndex: startingIndex,\n    startingListSize: startingListSize,\n    runwaySize: runwaySize,\n    cacheMax: cacheMax\n  };\n  // avoid null/undefined\n  styles = styles !== null && styles !== void 0 ? styles : {};\n  callbacks = callbacks !== null && callbacks !== void 0 ? callbacks : {};\n  technical = technical !== null && technical !== void 0 ? technical : {};\n  startingIndex = startingIndex !== null && startingIndex !== void 0 ? startingIndex : 0;\n  startingListSize = startingListSize !== null && startingListSize !== void 0 ? startingListSize : 0;\n  runwaySize = runwaySize !== null && runwaySize !== void 0 ? runwaySize : 3;\n  usePlaceholder = usePlaceholder !== null && usePlaceholder !== void 0 ? usePlaceholder : true;\n  useScrollTracker = useScrollTracker !== null && useScrollTracker !== void 0 ? useScrollTracker : true;\n  cellMinHeight = cellMinHeight !== null && cellMinHeight !== void 0 ? cellMinHeight : 0;\n  cellMinWidth = cellMinWidth !== null && cellMinWidth !== void 0 ? cellMinWidth : 0;\n  cacheMax = cacheMax !== null && cacheMax !== void 0 ? cacheMax : 0;\n  cellHeight = +cellHeight;\n  cellWidth = +cellWidth;\n  cellMinHeight = +cellMinHeight;\n  cellMinWidth = +cellMinWidth;\n  gap = +gap;\n  padding = +padding;\n  startingIndex = +startingIndex;\n  startingListSize = +startingListSize;\n  runwaySize = +runwaySize;\n  cacheMax = +cacheMax;\n  var verifiedValues = {\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    cellMinHeight: cellMinHeight,\n    cellMinWidth: cellMinWidth,\n    gap: gap,\n    padding: padding,\n    startingIndex: startingIndex,\n    startingListSize: startingListSize,\n    runwaySize: runwaySize,\n    cacheMax: cacheMax\n  };\n  cellMinHeight = Math.max(cellMinHeight, 25);\n  cellMinWidth = Math.max(cellMinWidth, 25);\n  cellMinHeight = Math.min(cellHeight, cellMinHeight);\n  cellMinWidth = Math.min(cellWidth, cellMinWidth);\n  // prop constraints - non-negative values\n  runwaySize = Math.max(1, runwaySize); // runwaysize must be at least 1\n  startingListSize = Math.max(0, startingListSize);\n  startingIndex = Math.max(0, startingIndex);\n  // package\n  var problems = 0;\n  for (var prop in verifiedValues) {\n    if (isNaN(verifiedValues[prop])) {\n      problems++;\n    }\n  }\n  if (problems) {\n    console.error(\'Error: invalid number - compare originalValues and verifiedValues\', originalValues, verifiedValues);\n  }\n  // enums\n  if (![\'horizontal\', \'vertical\'].includes(orientation)) {\n    orientation = \'vertical\';\n  }\n  if (![\'preload\', \'keepload\', \'cradle\'].includes(cache)) {\n    cache = \'cradle\';\n  }\n  if (![\'uniform\', \'variable\'].includes(layout)) {\n    layout = \'uniform\';\n  }\n  var gridSpecs = {\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    cellMinHeight: cellMinHeight,\n    cellMinWidth: cellMinWidth,\n    layout: layout\n  };\n  var gridSpecsRef = (0, react_1.useRef)(gridSpecs);\n  // state\n  var _ref2 = (0, react_1.useState)(\'setup\'),\n    _ref3 = _slicedToArray(_ref2, 2),\n    scrollerState = _ref3[0],\n    setScrollerState = _ref3[1]; // setup, setlistsize, ready\n  // system\n  var stylesRef = (0, react_1.useRef)(styles);\n  var callbacksRef = (0, react_1.useRef)(callbacks);\n  var placeholderMessagesRef = (0, react_1.useRef)(placeholderMessages);\n  var _technical = technical,\n    showAxis = _technical.showAxis,\n    triggerlineOffset = _technical.triggerlineOffset,\n    VIEWPORT_RESIZE_TIMEOUT = _technical.VIEWPORT_RESIZE_TIMEOUT,\n    ONAFTERSCROLL_TIMEOUT = _technical.ONAFTERSCROLL_TIMEOUT,\n    IDLECALLBACK_TIMEOUT = _technical.IDLECALLBACK_TIMEOUT,\n    VARIABLE_MEASUREMENTS_TIMEOUT = _technical.VARIABLE_MEASUREMENTS_TIMEOUT,\n    MAX_CACHE_OVER_RUN = _technical.MAX_CACHE_OVER_RUN,\n    CACHE_PARTITION_SIZE = _technical.CACHE_PARTITION_SIZE;\n  VIEWPORT_RESIZE_TIMEOUT = VIEWPORT_RESIZE_TIMEOUT !== null && VIEWPORT_RESIZE_TIMEOUT !== void 0 ? VIEWPORT_RESIZE_TIMEOUT : 250;\n  ONAFTERSCROLL_TIMEOUT = ONAFTERSCROLL_TIMEOUT !== null && ONAFTERSCROLL_TIMEOUT !== void 0 ? ONAFTERSCROLL_TIMEOUT : 100;\n  IDLECALLBACK_TIMEOUT = IDLECALLBACK_TIMEOUT !== null && IDLECALLBACK_TIMEOUT !== void 0 ? IDLECALLBACK_TIMEOUT : 250;\n  VARIABLE_MEASUREMENTS_TIMEOUT = VARIABLE_MEASUREMENTS_TIMEOUT !== null && VARIABLE_MEASUREMENTS_TIMEOUT !== void 0 ? VARIABLE_MEASUREMENTS_TIMEOUT : 250;\n  MAX_CACHE_OVER_RUN = MAX_CACHE_OVER_RUN !== null && MAX_CACHE_OVER_RUN !== void 0 ? MAX_CACHE_OVER_RUN : 1.5;\n  CACHE_PARTITION_SIZE = CACHE_PARTITION_SIZE !== null && CACHE_PARTITION_SIZE !== void 0 ? CACHE_PARTITION_SIZE : 30;\n  if (typeof showAxis != \'boolean\') showAxis = false;\n  triggerlineOffset = triggerlineOffset !== null && triggerlineOffset !== void 0 ? triggerlineOffset : 10;\n  if (typeof usePlaceholder != \'boolean\') usePlaceholder = true;\n  if (typeof useScrollTracker != \'boolean\') useScrollTracker = true;\n  // for mount version\n  var scrollerSessionIDRef = (0, react_1.useRef)(null);\n  var scrollerID = scrollerSessionIDRef.current;\n  // for children\n  var cacheAPIRef = (0, react_1.useRef)(cacheAPI);\n  var updateFunctionRef = (0, react_1.useRef)(null);\n  var listsizeRef = (0, react_1.useRef)(startingListSize);\n  var listsize = listsizeRef.current;\n  // tests for React with Object.is for changed properties; avoid re-renders with no change\n  if (!compareProps(gridSpecs, gridSpecsRef.current)) {\n    gridSpecsRef.current = gridSpecs;\n  }\n  if (!compareProps(styles, stylesRef.current)) {\n    stylesRef.current = styles;\n  }\n  if (!compareProps(callbacks, callbacksRef.current)) {\n    callbacksRef.current = callbacks;\n  }\n  if (!compareProps(placeholderMessages, placeholderMessagesRef.current)) {\n    placeholderMessagesRef.current = placeholderMessages;\n  }\n  // -------------------------[ Initialization ]-------------------------------\n  var getCacheAPI = function getCacheAPI(cacheAPI) {\n    cacheAPIRef.current = cacheAPI;\n  };\n  var getUpdateFunction = function getUpdateFunction(fn) {\n    updateFunctionRef.current = fn;\n  };\n  var useLocalCache = !cacheAPI;\n  var isMountedRef = (0, react_1.useRef)(true);\n  (0, react_1.useEffect)(function () {\n    if (scrollerSessionIDRef.current === null) {\n      // defend against React.StrictMode double run\n      scrollerSessionIDRef.current = globalScrollerID++;\n    }\n  }, []);\n  // called when getItem returns null, or direct call from user (see serviceHandler)\n  var updateListsize = (0, react_1.useCallback)(function (listsize) {\n    if (listsize == listsizeRef.current) return;\n    listsizeRef.current = listsize;\n    // inform the user\n    callbacksRef.current.newListsize && callbacksRef.current.newListsize(listsize);\n    setScrollerState(\'setlistsize\');\n  }, []);\n  // ---------------------[ State handling ]------------------------\n  (0, react_1.useEffect)(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  var itemSetRef = (0, react_1.useRef)(null);\n  (0, react_1.useEffect)(function () {\n    switch (scrollerState) {\n      case \'setup\':\n        // replace cacheAPI with facade which includes hidden scrollerID\n        cacheAPIRef.current = cacheAPIRef.current.registerScroller(scrollerSessionIDRef.current);\n        itemSetRef.current = cacheAPIRef.current.itemSet; // for unmount unRegisterScroller\n        if (updateFunctionRef.current) {\n          // obtained from PortalCache\n          cacheAPIRef.current.partitionRepoForceUpdate = updateFunctionRef.current;\n        }\n      case \'setlistsize\':\n        setScrollerState(\'ready\');\n    }\n    return function () {\n      if (!isMountedRef.current) {\n        // double call possible - a React anomaly\n        cacheAPIRef.current.unRegisterScroller(itemSetRef.current);\n      }\n    };\n  }, [scrollerState]);\n  // --------------------[ Render ]---------------------\n  if (problems || isMinimalPropsFail) {\n    return react_1["default"].createElement("div", null, "error: see console.");\n  }\n  // component calls are deferred by scrollerState to give cacheAPI a chance to initialize\n  return react_1["default"].createElement(react_error_boundary_1.ErrorBoundary, {\n    FallbackComponent: ErrorFallback,\n    // elaboration TBD\n    onReset: function onReset() {},\n    onError: function onError() {}\n  }, scrollerState != \'setup\' && react_1["default"].createElement(Viewport_1["default"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    scrollerID: scrollerID,\n    VIEWPORT_RESIZE_TIMEOUT: VIEWPORT_RESIZE_TIMEOUT\n  }, react_1["default"].createElement(Scrollblock_1["default"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    listsize: listsize,\n    scrollerID: scrollerID\n  }, react_1["default"].createElement(Cradle_1["default"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    listsize: listsize,\n    updateListsize: updateListsize,\n    cache: cache,\n    cacheMax: cacheMax,\n    userCallbacks: callbacksRef.current,\n    startingIndex: startingIndex,\n    getItem: getItem,\n    placeholder: placeholder,\n    placeholderMessages: placeholderMessagesRef.current,\n    runwaySize: runwaySize,\n    triggerlineOffset: triggerlineOffset,\n    scrollerProperties: scrollerProperties,\n    cacheAPI: cacheAPIRef.current,\n    usePlaceholder: usePlaceholder,\n    useScrollTracker: useScrollTracker,\n    showAxis: showAxis,\n    ONAFTERSCROLL_TIMEOUT: ONAFTERSCROLL_TIMEOUT,\n    IDLECALLBACK_TIMEOUT: IDLECALLBACK_TIMEOUT,\n    MAX_CACHE_OVER_RUN: MAX_CACHE_OVER_RUN,\n    VARIABLE_MEASUREMENTS_TIMEOUT: VARIABLE_MEASUREMENTS_TIMEOUT,\n    scrollerID: scrollerID\n  }))), useLocalCache && react_1["default"].createElement("div", {\n    "data-type": \'cacheroot\',\n    style: cacherootstyle\n  }, react_1["default"].createElement(PortalCache_1["default"], {\n    getCacheAPI: getCacheAPI,\n    getUpdateFunction: getUpdateFunction,\n    CACHE_PARTITION_SIZE: CACHE_PARTITION_SIZE\n  })));\n};\nexports["default"] = InfiniteGridScroller;\n// ----------------------------[ Support ]------------------------------\nvar cacherootstyle = {\n  display: \'none\'\n}; // as React.CSSProperties // static, out of view \n// utility\nfunction compareProps(obj1, obj2) {\n  if (!obj1 || !obj2) return false;\n  var keys = Object.keys(obj1);\n  for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {\n    var key = _keys[_i2];\n    if (!Object.is(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/InfiniteGridScroller.tsx\n')},"./src/PortalCache.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// CellFrame.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nvar cacheAPI_1 = __importDefault(__webpack_require__(/*! ./portalcache/cacheAPI */ "./src/portalcache/cacheAPI.tsx"));\nvar PortalCache = function PortalCache(_ref) {\n  var CACHE_PARTITION_SIZE = _ref.CACHE_PARTITION_SIZE,\n    getCacheAPI = _ref.getCacheAPI,\n    getUpdateFunction = _ref.getUpdateFunction;\n  var cacheAPIRef = (0, react_1.useRef)(null);\n  var partitionArrayRef = (0, react_1.useRef)(null);\n  var partitionRepoForceUpdate = (0, react_1.useCallback)(function (partitionRenderList) {\n    partitionArrayRef.current = partitionRenderList;\n    isMountedRef.current && setPortalCacheCounter(++counterRef.current); // force render\n  }, []);\n  (0, react_1.useEffect)(function () {\n    if (cacheAPIRef.current) return;\n    var cacheAPI = new cacheAPI_1["default"](CACHE_PARTITION_SIZE);\n    cacheAPIRef.current = cacheAPI;\n    getCacheAPI(cacheAPI);\n    getUpdateFunction(partitionRepoForceUpdate);\n  }, []);\n  var _ref2 = (0, react_1.useState)(0),\n    _ref3 = _slicedToArray(_ref2, 2),\n    portalCacheCounter = _ref3[0],\n    setPortalCacheCounter = _ref3[1];\n  var counterRef = (0, react_1.useRef)(portalCacheCounter);\n  var _ref4 = (0, react_1.useState)(\'setup\'),\n    _ref5 = _slicedToArray(_ref4, 2),\n    masterState = _ref5[0],\n    setMasterState = _ref5[1];\n  var isMountedRef = (0, react_1.useRef)(true);\n  (0, react_1.useEffect)(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  (0, react_1.useEffect)(function () {\n    switch (masterState) {\n      case \'setup\':\n        {\n          setMasterState(\'ready\');\n        }\n    }\n  }, [masterState]);\n  return react_1["default"].createElement("div", {\n    "data-type": \'portal-master\'\n  }, partitionArrayRef.current);\n};\nexports["default"] = PortalCache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvUG9ydGFsQ2FjaGUudHN4IiwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUFBLFNBQUFBLGVBQUFDLEdBQUEsRUFBQUMsQ0FBQSxXQUFBQyxlQUFBLENBQUFGLEdBQUEsS0FBQUcscUJBQUEsQ0FBQUgsR0FBQSxFQUFBQyxDQUFBLEtBQUFHLDJCQUFBLENBQUFKLEdBQUEsRUFBQUMsQ0FBQSxLQUFBSSxnQkFBQTtBQUFBLFNBQUFBLGlCQUFBLGNBQUFDLFNBQUE7QUFBQSxTQUFBRiw0QkFBQUcsQ0FBQSxFQUFBQyxNQUFBLFNBQUFELENBQUEscUJBQUFBLENBQUEsc0JBQUFFLGlCQUFBLENBQUFGLENBQUEsRUFBQUMsTUFBQSxPQUFBRSxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsU0FBQSxDQUFBQyxRQUFBLENBQUFDLElBQUEsQ0FBQVAsQ0FBQSxFQUFBUSxLQUFBLGFBQUFMLENBQUEsaUJBQUFILENBQUEsQ0FBQVMsV0FBQSxFQUFBTixDQUFBLEdBQUFILENBQUEsQ0FBQVMsV0FBQSxDQUFBQyxJQUFBLE1BQUFQLENBQUEsY0FBQUEsQ0FBQSxtQkFBQVEsS0FBQSxDQUFBQyxJQUFBLENBQUFaLENBQUEsT0FBQUcsQ0FBQSwrREFBQVUsSUFBQSxDQUFBVixDQUFBLFVBQUFELGlCQUFBLENBQUFGLENBQUEsRUFBQUMsTUFBQTtBQUFBLFNBQUFDLGtCQUFBVCxHQUFBLEVBQUFxQixHQUFBLFFBQUFBLEdBQUEsWUFBQUEsR0FBQSxHQUFBckIsR0FBQSxDQUFBc0IsTUFBQSxFQUFBRCxHQUFBLEdBQUFyQixHQUFBLENBQUFzQixNQUFBLFdBQUFyQixDQUFBLE1BQUFzQixJQUFBLE9BQUFMLEtBQUEsQ0FBQUcsR0FBQSxHQUFBcEIsQ0FBQSxHQUFBb0IsR0FBQSxFQUFBcEIsQ0FBQSxJQUFBc0IsSUFBQSxDQUFBdEIsQ0FBQSxJQUFBRCxHQUFBLENBQUFDLENBQUEsVUFBQXNCLElBQUE7QUFBQSxTQUFBcEIsc0JBQUFILEdBQUEsRUFBQUMsQ0FBQSxRQUFBdUIsRUFBQSxXQUFBeEIsR0FBQSxnQ0FBQXlCLE1BQUEsSUFBQXpCLEdBQUEsQ0FBQXlCLE1BQUEsQ0FBQUMsUUFBQSxLQUFBMUIsR0FBQSw0QkFBQXdCLEVBQUEsUUFBQUcsRUFBQSxFQUFBQyxFQUFBLEVBQUFDLEVBQUEsRUFBQUMsRUFBQSxFQUFBQyxJQUFBLE9BQUFDLEVBQUEsT0FBQUMsRUFBQSxpQkFBQUosRUFBQSxJQUFBTCxFQUFBLEdBQUFBLEVBQUEsQ0FBQVYsSUFBQSxDQUFBZCxHQUFBLEdBQUFrQyxJQUFBLFFBQUFqQyxDQUFBLFFBQUFVLE1BQUEsQ0FBQWEsRUFBQSxNQUFBQSxFQUFBLFVBQUFRLEVBQUEsdUJBQUFBLEVBQUEsSUFBQUwsRUFBQSxHQUFBRSxFQUFBLENBQUFmLElBQUEsQ0FBQVUsRUFBQSxHQUFBVyxJQUFBLE1BQUFKLElBQUEsQ0FBQUssSUFBQSxDQUFBVCxFQUFBLENBQUFVLEtBQUEsR0FBQU4sSUFBQSxDQUFBVCxNQUFBLEtBQUFyQixDQUFBLEdBQUErQixFQUFBLGlCQUFBTSxHQUFBLElBQUFMLEVBQUEsT0FBQUwsRUFBQSxHQUFBVSxHQUFBLHlCQUFBTixFQUFBLFlBQUFSLEVBQUEsZUFBQU0sRUFBQSxHQUFBTixFQUFBLGNBQUFiLE1BQUEsQ0FBQW1CLEVBQUEsTUFBQUEsRUFBQSwyQkFBQUcsRUFBQSxRQUFBTCxFQUFBLGFBQUFHLElBQUE7QUFBQSxTQUFBN0IsZ0JBQUFGLEdBQUEsUUFBQWtCLEtBQUEsQ0FBQXFCLE9BQUEsQ0FBQXZDLEdBQUEsVUFBQUEsR0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQUF3QyxPQUFBLEdBQUFDLFlBQUEsQ0FBQUMsbUJBQUE7QUFFQSxJQUFBQyxVQUFBLEdBQUFDLGVBQUEsQ0FBQUYsbUJBQUE7QUFFQSxJQUFNRyxXQUFXLEdBQVcsU0FBdEJBLFdBQVdBLENBQUFDLElBQUEsRUFBdUU7RUFBQSxJQUExREMsb0JBQW9CLEdBQUFELElBQUEsQ0FBcEJDLG9CQUFvQjtJQUFFQyxXQUFXLEdBQUFGLElBQUEsQ0FBWEUsV0FBVztJQUFFQyxpQkFBaUIsR0FBQUgsSUFBQSxDQUFqQkcsaUJBQWlCO0VBRTlFLElBQU1DLFdBQVcsR0FBRyxJQUFBVixPQUFBLENBQUFXLE1BQU0sRUFBQyxJQUFJLENBQUM7RUFFaEMsSUFBTUMsaUJBQWlCLEdBQUcsSUFBQVosT0FBQSxDQUFBVyxNQUFNLEVBQUMsSUFBSSxDQUFDO0VBRXRDLElBQU1FLHdCQUF3QixHQUFHLElBQUFiLE9BQUEsQ0FBQWMsV0FBVyxFQUFDLFVBQUNDLG1CQUF1QixFQUFJO0lBRXJFSCxpQkFBaUIsQ0FBQ0ksT0FBTyxHQUFHRCxtQkFBbUI7SUFFL0NFLFlBQVksQ0FBQ0QsT0FBTyxJQUFJRSxxQkFBcUIsQ0FBQyxFQUFFQyxVQUFVLENBQUNILE9BQU8sQ0FBQyxFQUFDO0VBRXhFLENBQUMsRUFBQyxFQUFFLENBQUM7RUFFTCxJQUFBaEIsT0FBQSxDQUFBb0IsU0FBUyxFQUFDLFlBQUs7SUFFWCxJQUFJVixXQUFXLENBQUNNLE9BQU8sRUFBRTtJQUV6QixJQUFNSyxRQUFRLEdBQUcsSUFBSWxCLFVBQUEsV0FBUSxDQUFDSSxvQkFBb0IsQ0FBQztJQUVuREcsV0FBVyxDQUFDTSxPQUFPLEdBQUdLLFFBQVE7SUFFOUJiLFdBQVcsQ0FBQ2EsUUFBUSxDQUFDO0lBQ3JCWixpQkFBaUIsQ0FBQ0ksd0JBQXdCLENBQUM7RUFFL0MsQ0FBQyxFQUFDLEVBQUUsQ0FBQztFQUVMLElBQUFTLEtBQUEsR0FBb0QsSUFBQXRCLE9BQUEsQ0FBQXVCLFFBQVEsRUFBQyxDQUFDLENBQUM7SUFBQUMsS0FBQSxHQUFBakUsY0FBQSxDQUFBK0QsS0FBQTtJQUF4REcsa0JBQWtCLEdBQUFELEtBQUE7SUFBRU4scUJBQXFCLEdBQUFNLEtBQUE7RUFDaEQsSUFBTUwsVUFBVSxHQUFHLElBQUFuQixPQUFBLENBQUFXLE1BQU0sRUFBQ2Msa0JBQWtCLENBQUM7RUFFN0MsSUFBQUMsS0FBQSxHQUFzQyxJQUFBMUIsT0FBQSxDQUFBdUIsUUFBUSxFQUFDLE9BQU8sQ0FBQztJQUFBSSxLQUFBLEdBQUFwRSxjQUFBLENBQUFtRSxLQUFBO0lBQWhERSxXQUFXLEdBQUFELEtBQUE7SUFBRUUsY0FBYyxHQUFBRixLQUFBO0VBRWxDLElBQU1WLFlBQVksR0FBRyxJQUFBakIsT0FBQSxDQUFBVyxNQUFNLEVBQUMsSUFBSSxDQUFDO0VBRWpDLElBQUFYLE9BQUEsQ0FBQW9CLFNBQVMsRUFBQyxZQUFJO0lBRVZILFlBQVksQ0FBQ0QsT0FBTyxHQUFHLElBQUk7SUFFM0IsT0FBTyxZQUFLO01BRVJDLFlBQVksQ0FBQ0QsT0FBTyxHQUFHLEtBQUs7SUFFaEMsQ0FBQztFQUVMLENBQUMsRUFBQyxFQUFFLENBQUM7RUFFTCxJQUFBaEIsT0FBQSxDQUFBb0IsU0FBUyxFQUFDLFlBQUk7SUFFVixRQUFRUSxXQUFXO01BQ2YsS0FBSyxPQUFPO1FBQUU7VUFDVkMsY0FBYyxDQUFDLE9BQU8sQ0FBQzs7O0VBSW5DLENBQUMsRUFBQyxDQUFDRCxXQUFXLENBQUMsQ0FBQztFQUVoQixPQUFPNUIsT0FBQSxZQUFBOEIsYUFBQTtJQUFBLGFBQWlCO0VBQWUsR0FBRWxCLGlCQUFpQixDQUFDSSxPQUFPLENBQU87QUFFN0UsQ0FBQztBQUVEZSxrQkFBQSxHQUFlMUIsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvUG9ydGFsQ2FjaGUudHN4P2IyMTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ2VsbEZyYW1lLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDE5LTIwMjMgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuaW1wb3J0IFJlYWN0LCB7RkMsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlQ2FsbGJhY2t9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgQ2FjaGVBUEkgZnJvbSAnLi9wb3J0YWxjYWNoZS9jYWNoZUFQSSdcblxuY29uc3QgUG9ydGFsQ2FjaGU6RkM8YW55PiA9ICh7Q0FDSEVfUEFSVElUSU9OX1NJWkUsIGdldENhY2hlQVBJLCBnZXRVcGRhdGVGdW5jdGlvbiB9KSA9PiB7XG5cbiAgICBjb25zdCBjYWNoZUFQSVJlZiA9IHVzZVJlZihudWxsKVxuXG4gICAgY29uc3QgcGFydGl0aW9uQXJyYXlSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIGNvbnN0IHBhcnRpdGlvblJlcG9Gb3JjZVVwZGF0ZSA9IHVzZUNhbGxiYWNrKChwYXJ0aXRpb25SZW5kZXJMaXN0OmFueSkgPT4ge1xuXG4gICAgICAgIHBhcnRpdGlvbkFycmF5UmVmLmN1cnJlbnQgPSBwYXJ0aXRpb25SZW5kZXJMaXN0XG5cbiAgICAgICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgJiYgc2V0UG9ydGFsQ2FjaGVDb3VudGVyKCsrY291bnRlclJlZi5jdXJyZW50KSAvLyBmb3JjZSByZW5kZXJcblxuICAgIH0sW10pXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuXG4gICAgICAgIGlmIChjYWNoZUFQSVJlZi5jdXJyZW50KSByZXR1cm5cblxuICAgICAgICBjb25zdCBjYWNoZUFQSSA9IG5ldyBDYWNoZUFQSShDQUNIRV9QQVJUSVRJT05fU0laRSlcblxuICAgICAgICBjYWNoZUFQSVJlZi5jdXJyZW50ID0gY2FjaGVBUElcblxuICAgICAgICBnZXRDYWNoZUFQSShjYWNoZUFQSSlcbiAgICAgICAgZ2V0VXBkYXRlRnVuY3Rpb24ocGFydGl0aW9uUmVwb0ZvcmNlVXBkYXRlKVxuXG4gICAgfSxbXSlcblxuICAgIGNvbnN0IFtwb3J0YWxDYWNoZUNvdW50ZXIsIHNldFBvcnRhbENhY2hlQ291bnRlcl0gPSB1c2VTdGF0ZSgwKVxuICAgIGNvbnN0IGNvdW50ZXJSZWYgPSB1c2VSZWYocG9ydGFsQ2FjaGVDb3VudGVyKVxuXG4gICAgY29uc3QgW21hc3RlclN0YXRlLCBzZXRNYXN0ZXJTdGF0ZV0gPSB1c2VTdGF0ZSgnc2V0dXAnKVxuXG4gICAgY29uc3QgaXNNb3VudGVkUmVmID0gdXNlUmVmKHRydWUpXG5cbiAgICB1c2VFZmZlY3QoKCk9PntcblxuICAgICAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IHRydWVcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuXG4gICAgICAgICAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlXG5cbiAgICAgICAgfVxuXG4gICAgfSxbXSkgXG5cbiAgICB1c2VFZmZlY3QoKCk9PntcblxuICAgICAgICBzd2l0Y2ggKG1hc3RlclN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdzZXR1cCc6IHtcbiAgICAgICAgICAgICAgICBzZXRNYXN0ZXJTdGF0ZSgncmVhZHknKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFttYXN0ZXJTdGF0ZV0pXG5cbiAgICByZXR1cm4gPGRpdiBkYXRhLXR5cGUgPSAncG9ydGFsLW1hc3Rlcic+e3BhcnRpdGlvbkFycmF5UmVmLmN1cnJlbnR9PC9kaXY+XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9ydGFsQ2FjaGVcbiJdLCJuYW1lcyI6WyJfc2xpY2VkVG9BcnJheSIsImFyciIsImkiLCJfYXJyYXlXaXRoSG9sZXMiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiVHlwZUVycm9yIiwibyIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiQXJyYXkiLCJmcm9tIiwidGVzdCIsImxlbiIsImxlbmd0aCIsImFycjIiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3MiLCJfZSIsIl94IiwiX3IiLCJfYXJyIiwiX24iLCJfZCIsIm5leHQiLCJkb25lIiwicHVzaCIsInZhbHVlIiwiZXJyIiwiaXNBcnJheSIsInJlYWN0XzEiLCJfX2ltcG9ydFN0YXIiLCJyZXF1aXJlIiwiY2FjaGVBUElfMSIsIl9faW1wb3J0RGVmYXVsdCIsIlBvcnRhbENhY2hlIiwiX3JlZiIsIkNBQ0hFX1BBUlRJVElPTl9TSVpFIiwiZ2V0Q2FjaGVBUEkiLCJnZXRVcGRhdGVGdW5jdGlvbiIsImNhY2hlQVBJUmVmIiwidXNlUmVmIiwicGFydGl0aW9uQXJyYXlSZWYiLCJwYXJ0aXRpb25SZXBvRm9yY2VVcGRhdGUiLCJ1c2VDYWxsYmFjayIsInBhcnRpdGlvblJlbmRlckxpc3QiLCJjdXJyZW50IiwiaXNNb3VudGVkUmVmIiwic2V0UG9ydGFsQ2FjaGVDb3VudGVyIiwiY291bnRlclJlZiIsInVzZUVmZmVjdCIsImNhY2hlQVBJIiwiX3JlZjIiLCJ1c2VTdGF0ZSIsIl9yZWYzIiwicG9ydGFsQ2FjaGVDb3VudGVyIiwiX3JlZjQiLCJfcmVmNSIsIm1hc3RlclN0YXRlIiwic2V0TWFzdGVyU3RhdGUiLCJjcmVhdGVFbGVtZW50IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/PortalCache.tsx\n')},"./src/Scrollblock.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// Scrollblock.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n\n    The scrollblock provides the scrollable element (scrolled by Viewport) of the infinite grid scroller.\n    It is sized according to the given cell size and row counts, adjusted for variable cradle content.\n    Its only state change is change of styles.\n\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nvar Viewport_1 = __webpack_require__(/*! ./Viewport */ "./src/Viewport.tsx");\nvar Scrollblock = function Scrollblock(_ref) {\n  var children = _ref.children,\n    listsize = _ref.listsize,\n    gridSpecs = _ref.gridSpecs,\n    styles = _ref.styles,\n    scrollerID = _ref.scrollerID;\n  var orientation = gridSpecs.orientation,\n    gap = gridSpecs.gap,\n    padding = gridSpecs.padding,\n    cellHeight = gridSpecs.cellHeight,\n    cellWidth = gridSpecs.cellWidth;\n  // -------------------------[ context and state ]-------------------------\n  var ViewportContextProperties = (0, react_1.useContext)(Viewport_1.ViewportContext);\n  // -----------------------------------[ data heap ]-------------------------\n  var baseScrollBlockLengthRef = (0, react_1.useRef)(null);\n  // just for init\n  var linerStyle = (0, react_1.useMemo)(function () {\n    return Object.assign(Object.assign({}, styles.scrollblock), {\n      position: \'relative\'\n    });\n  }, []);\n  var divlinerstyleRef = (0, react_1.useRef)(linerStyle);\n  var _ref2 = (0, react_1.useState)(divlinerstyleRef.current),\n    _ref3 = _slicedToArray(_ref2, 2),\n    divlinerstyle = _ref3[0],\n    saveDivlinerstyle = _ref3[1]; // to trigger render\n  var _ViewportContextPrope = ViewportContextProperties.viewportDimensions,\n    width = _ViewportContextPrope.width,\n    height = _ViewportContextPrope.height;\n  // reconfigure\n  (0, react_1.useLayoutEffect)(function () {\n    updateBaseBlockLength({\n      orientation: orientation,\n      viewportheight: height,\n      viewportwidth: width,\n      listsize: listsize,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding\n    });\n    divlinerstyleRef.current = updateScrollblockStyles(orientation, divlinerstyleRef, baseScrollBlockLengthRef, cellWidth, cellHeight, padding);\n    saveDivlinerstyle(divlinerstyleRef.current);\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]);\n  var updateBaseBlockLength = (0, react_1.useCallback)(function (layoutspecs) {\n    var basescrollblocklength = calcBaseScrollblockLength(layoutspecs);\n    baseScrollBlockLengthRef.current = basescrollblocklength;\n  }, []);\n  return react_1["default"].createElement("div", {\n    "data-type": \'scrollblock\',\n    style: divlinerstyleRef.current\n  }, children);\n}; // Scrollblock\nexports["default"] = Scrollblock;\n// any of the parameters can affect the length\nvar calcBaseScrollblockLength = function calcBaseScrollblockLength(_ref4) {\n  var orientation = _ref4.orientation,\n    viewportheight = _ref4.viewportheight,\n    viewportwidth = _ref4.viewportwidth,\n    listsize = _ref4.listsize,\n    cellHeight = _ref4.cellHeight,\n    cellWidth = _ref4.cellWidth,\n    gap = _ref4.gap,\n    padding = _ref4.padding;\n  // ---------------[ calculate crosscount ]------------------\n  //crosscount is also calculated by Cradle\n  var crosslength;\n  var cellLength;\n  var viewportcrosslength;\n  if (orientation == \'vertical\') {\n    crosslength = cellWidth + gap;\n    cellLength = cellHeight + gap;\n    viewportcrosslength = viewportwidth;\n  } else {\n    // \'horizontal\'\n    crosslength = cellHeight + gap;\n    cellLength = cellWidth + gap;\n    viewportcrosslength = viewportheight;\n  }\n  // adjustments to viewportcrosslength\n  viewportcrosslength -= padding * 2;\n  viewportcrosslength += gap; // to match crossLength\n  if (viewportcrosslength < crosslength) viewportcrosslength = crosslength; // must be at least one\n  var crosscount = Math.floor(viewportcrosslength / crosslength);\n  // -------------------[ calculate scrollblock length ]-----------------\n  var listrowcount = Math.ceil(listsize / crosscount);\n  var baselength = listrowcount * cellLength - (listrowcount > 0 ? gap :\n  // final cell has no trailing gap\n  0) + padding * 2; // leading and trailing padding\n  return baselength;\n};\nvar updateScrollblockStyles = function updateScrollblockStyles(orientation, stylesRef, baseScrollblocklengthRef, cellWidth, cellHeight, padding) {\n  var localstyles = Object.assign({}, stylesRef.current); // new object\n  var height, width, minHeight, minWidth;\n  if (orientation == \'vertical\') {\n    height = baseScrollblocklengthRef.current + \'px\';\n    width = \'100%\';\n    minWidth = cellWidth + padding * 2 + \'px\';\n    minHeight = null;\n  } else {\n    // orientation == \'horizontal\'\n    height = \'100%\';\n    width = baseScrollblocklengthRef.current + \'px\';\n    minHeight = cellHeight + padding * 2 + \'px\';\n    minWidth = null;\n  }\n  localstyles.height = height;\n  localstyles.width = width;\n  localstyles.minHeight = minHeight;\n  localstyles.minWidth = minWidth;\n  return localstyles;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Scrollblock.tsx\n')},"./src/Viewport.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// Viewport.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ViewportContext = void 0;\n/*\n    The role of viewport is to provide viewport data to its children (scrollblock and cradle) through the\n    ViewportContext object, and act as the visible screen portal of the list being shown.\n    If Viewport is resized, it notifies the Cradle to reconfigure.\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nexports.ViewportContext = react_1["default"].createContext(null); // for children\nvar Viewport = function Viewport(_ref) {\n  var children = _ref.children,\n    gridSpecs = _ref.gridSpecs,\n    styles = _ref.styles,\n    scrollerID = _ref.scrollerID,\n    VIEWPORT_RESIZE_TIMEOUT = _ref.VIEWPORT_RESIZE_TIMEOUT;\n  // -----------------------[ initialize ]------------------\n  var orientation = gridSpecs.orientation;\n  var _ref2 = (0, react_1.useState)(\'setup\'),\n    _ref3 = _slicedToArray(_ref2, 2),\n    viewportState = _ref3[0],\n    setViewportState = _ref3[1]; // setup, resizing, resized, ready\n  var viewportStateRef = (0, react_1.useRef)(null); // for useCallback -> resizeCallback scope\n  viewportStateRef.current = viewportState;\n  var isMountedRef = (0, react_1.useRef)(true);\n  var viewportElementRef = (0, react_1.useRef)(null);\n  // ViewportContextPropertiesRef is passed as a resizing interrupt (through context) to children\n  var ViewportContextPropertiesRef = (0, react_1.useRef)({\n    isResizing: false,\n    viewportDimensions: null,\n    elementRef: null\n  });\n  // mark as unmounted\n  (0, react_1.useEffect)(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  // --------------------[ viewport resizer interrupt ]-----------------------\n  var resizeTimeridRef = (0, react_1.useRef)(null);\n  var isResizingRef = (0, react_1.useRef)(false);\n  var resizeObserverRef = (0, react_1.useRef)(null);\n  // set up resizeObserver\n  (0, react_1.useEffect)(function () {\n    // initialize\n    resizeObserverRef.current = new ResizeObserver(resizeCallback);\n    resizeObserverRef.current.observe(viewportElementRef.current);\n    // unmount\n    return function () {\n      resizeObserverRef.current.disconnect();\n    };\n  }, []);\n  // used by resizeObserver; generates interrupt\n  var resizeCallback = (0, react_1.useCallback)(function (entries) {\n    if (viewportStateRef.current == \'setup\') return;\n    var target = entries[0].target;\n    // no need to trigger interrupt on first resize notification\n    if (!target.dataset.initialized) {\n      target.dataset.initialized = \'true\';\n      return;\n    }\n    // generate interrupt response, if initiating resize\n    if (!isResizingRef.current) {\n      ViewportContextPropertiesRef.current.isResizing = isResizingRef.current = true;\n      // new object creation triggers a realtime interrupt message to cradle through context\n      ViewportContextPropertiesRef.current = Object.assign({}, ViewportContextPropertiesRef.current);\n      if (isMountedRef.current) setViewportState(\'resizing\');\n    }\n    // finalize resizing after timeout\n    clearTimeout(resizeTimeridRef.current);\n    resizeTimeridRef.current = setTimeout(function () {\n      isResizingRef.current = false;\n      if (isMountedRef.current) {\n        setViewportState(\'resized\');\n      }\n    }, VIEWPORT_RESIZE_TIMEOUT);\n  }, []);\n  // ----------------------------------[ calculate config values ]--------------------------------\n  // styles\n  var divlinerstyleRef = (0, react_1.useRef)(null);\n  // initialize with inherited styles\n  divlinerstyleRef.current = (0, react_1.useMemo)(function () {\n    return Object.assign(Object.assign({}, styles.viewport), {\n      position: \'absolute\',\n      inset: 0,\n      overflow: \'scroll\',\n      WebkitOverflowScrolling: \'touch\',\n      overflowAnchor: \'none\'\n    });\n  }, [styles.viewport]);\n  // update ViewportContextPropertiesRef; add viewport dimensions\n  ViewportContextPropertiesRef.current = (0, react_1.useMemo)(function () {\n    if (viewportState == \'setup\') return ViewportContextPropertiesRef.current;\n    var _viewportElementRef$c = viewportElementRef.current.getBoundingClientRect(),\n      top = _viewportElementRef$c.top,\n      right = _viewportElementRef$c.right,\n      bottom = _viewportElementRef$c.bottom,\n      left = _viewportElementRef$c.left;\n    var width = right - left;\n    var height = bottom - top;\n    // this is a dimension update procedure for resize. \n    // See also interrupthandler.tsx cradleIntersectionObserverCallback for cradle intersection update\n    var localViewportData = {\n      viewportDimensions: {\n        top: top,\n        right: right,\n        bottom: bottom,\n        left: left,\n        width: width,\n        height: height\n      },\n      elementRef: viewportElementRef,\n      isResizing: isResizingRef.current\n    };\n    // trigger context change with new object\n    var viewportdataobject = Object.assign(Object.assign({}, ViewportContextPropertiesRef.current), localViewportData);\n    return viewportdataobject;\n  }, [orientation, isResizingRef.current, viewportState]);\n  // --------------------[ state processing ]---------------------------\n  (0, react_1.useLayoutEffect)(function () {\n    switch (viewportState) {\n      case \'resized\':\n      case \'setup\':\n        {\n          setViewportState(\'ready\');\n          break;\n        }\n    }\n  }, [viewportState]);\n  // ----------------------[ render ]--------------------------------\n  return react_1["default"].createElement(exports.ViewportContext.Provider, {\n    value: ViewportContextPropertiesRef.current\n  }, react_1["default"].createElement("div", {\n    "data-type": \'viewport\',\n    "data-scrollerid": scrollerID,\n    style: divlinerstyleRef.current,\n    ref: viewportElementRef\n  }, viewportState != \'setup\' && children));\n}; // Viewport\nexports["default"] = Viewport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Viewport.tsx\n')},"./src/cellframe/Placeholder.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// Placeholder.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    The role of the default PlaceHolder is to hold the content display until the host content\n    is received. The placeholder presents a waiting message, or an error message if the load\n    of the host content failed.\n\n    The default placeholder can be replaced by a placeholder provided by the host.\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nvar Placeholder = function Placeholder(_ref) {\n  var index = _ref.index,\n    listsize = _ref.listsize,\n    message = _ref.message,\n    error = _ref.error,\n    userFrameStyles = _ref.userFrameStyles,\n    userLinerStyles = _ref.userLinerStyles,\n    userErrorFrameStyles = _ref.userErrorFrameStyles,\n    userErrorLinerStyles = _ref.userErrorLinerStyles;\n  var _ref2 = (0, react_1.useMemo)(function () {\n      var uFrameStyles = !error ? userFrameStyles : userErrorFrameStyles;\n      var uLinerStyles = !error ? userLinerStyles : userErrorLinerStyles;\n      var frameStyles = Object.assign(Object.assign({\n        border: \'2px solid black\',\n        backgroundColor: \'cyan\'\n      }, uFrameStyles), {\n        position: \'relative\',\n        boxSizing: \'border-box\',\n        height: \'100%\',\n        width: \'100%\',\n        overflow: \'hidden\'\n      });\n      var linerStyles = Object.assign({\n        position: \'absolute\',\n        top: 0,\n        left: 0,\n        padding: \'3px\',\n        margin: \'3px\',\n        fontSize: \'smaller\'\n      }, uLinerStyles);\n      return [frameStyles, linerStyles];\n    }, [error, userFrameStyles, userLinerStyles, userErrorFrameStyles, userErrorLinerStyles]),\n    _ref3 = _slicedToArray(_ref2, 2),\n    frameStyles = _ref3[0],\n    linerStyles = _ref3[1];\n  message = message !== null && message !== void 0 ? message : \'(loading...)\';\n  return react_1["default"].createElement("div", {\n    "data-type": \'placeholderframe\',\n    style: frameStyles\n  }, !error ? react_1["default"].createElement("div", {\n    "data-type": \'placeholderliner\',\n    style: linerStyles\n  }, index + 1, "/", listsize, " ", message) : react_1["default"].createElement("div", {\n    "data-type": \'placeholderliner\',\n    style: linerStyles\n  }, "item is not available (", error.message, ")"));\n};\nexports["default"] = Placeholder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cellframe/Placeholder.tsx\n')},"./src/cradle/ScrollTracker.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// scrolltracker.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    The role of ScrollTracker is to provide feedback to the user of the relative position in the\n    virtual list during repositiong.\n\n    ScrollTracker can be suppressed by the host (in favour of the host\'s own location feedback)\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nvar ScrollTracker = function ScrollTracker(_ref) {\n  var top = _ref.top,\n    left = _ref.left,\n    offset = _ref.offset,\n    listsize = _ref.listsize,\n    styles = _ref.styles;\n  var trackdata = "".concat(offset + 1, "/").concat(listsize);\n  var styleRef = (0, react_1.useRef)(Object.assign({\n    top: top + \'px\',\n    left: left + \'px\',\n    position: \'fixed\',\n    zIndex: 3,\n    backgroundColor: \'white\',\n    border: \'1px solid gray\',\n    borderRadius: \'10px\',\n    fontSize: \'smaller\',\n    padding: \'3px\'\n  }, styles.scrolltracker));\n  return react_1["default"].createElement("div", {\n    "data-name": \'scrolltracker\',\n    style: styleRef.current\n  }, trackdata);\n};\nexports["default"] = ScrollTracker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL1Njcm9sbFRyYWNrZXIudHN4IiwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7Ozs7O0FBT0EsSUFBQUEsT0FBQSxHQUFBQyxZQUFBLENBQUFDLG1CQUFBO0FBRUEsSUFBTUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFhQSxDQUFBQyxJQUFBLEVBQStDO0VBQUEsSUFBekNDLEdBQUcsR0FBQUQsSUFBQSxDQUFIQyxHQUFHO0lBQUVDLElBQUksR0FBQUYsSUFBQSxDQUFKRSxJQUFJO0lBQUVDLE1BQU0sR0FBQUgsSUFBQSxDQUFORyxNQUFNO0lBQUVDLFFBQVEsR0FBQUosSUFBQSxDQUFSSSxRQUFRO0lBQUVDLE1BQU0sR0FBQUwsSUFBQSxDQUFOSyxNQUFNO0VBRXhELElBQU1DLFNBQVMsTUFBQUMsTUFBQSxDQUFNSixNQUFNLEdBQUcsQ0FBQyxPQUFBSSxNQUFBLENBQUlILFFBQVEsQ0FBRTtFQUU3QyxJQUFNSSxRQUFRLEdBQUcsSUFBQVosT0FBQSxDQUFBYSxNQUFNLEVBQUFDLE1BQUEsQ0FBQUMsTUFBQTtJQUNuQlYsR0FBRyxFQUFFQSxHQUFHLEdBQUcsSUFBSTtJQUNmQyxJQUFJLEVBQUVBLElBQUksR0FBRyxJQUFJO0lBQ2pCVSxRQUFRLEVBQUMsT0FBTztJQUNoQkMsTUFBTSxFQUFDLENBQUM7SUFDUkMsZUFBZSxFQUFDLE9BQU87SUFDdkJDLE1BQU0sRUFBRSxnQkFBZ0I7SUFDeEJDLFlBQVksRUFBQyxNQUFNO0lBQ25CQyxRQUFRLEVBQUMsU0FBUztJQUNsQkMsT0FBTyxFQUFDO0VBQUssR0FDVmIsTUFBTSxDQUFDYyxhQUFhLEVBQ3pCO0VBRUYsT0FBT3ZCLE9BQUEsWUFBQXdCLGFBQUE7SUFBQSxhQUFpQixlQUFlO0lBQUNDLEtBQUssRUFBSWIsUUFBUSxDQUFDYztFQUFPLEdBQUloQixTQUFTLENBQU87QUFDekYsQ0FBQztBQUVEaUIsa0JBQUEsR0FBZXhCLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vc3JjL2NyYWRsZS9TY3JvbGxUcmFja2VyLnRzeD8wYjNjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNjcm9sbHRyYWNrZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMTktMjAyMyBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG4vKlxuICAgIFRoZSByb2xlIG9mIFNjcm9sbFRyYWNrZXIgaXMgdG8gcHJvdmlkZSBmZWVkYmFjayB0byB0aGUgdXNlciBvZiB0aGUgcmVsYXRpdmUgcG9zaXRpb24gaW4gdGhlXG4gICAgdmlydHVhbCBsaXN0IGR1cmluZyByZXBvc2l0aW9uZy5cblxuICAgIFNjcm9sbFRyYWNrZXIgY2FuIGJlIHN1cHByZXNzZWQgYnkgdGhlIGhvc3QgKGluIGZhdm91ciBvZiB0aGUgaG9zdCdzIG93biBsb2NhdGlvbiBmZWVkYmFjaylcbiovXG5cbmltcG9ydCBSZWFjdCwge3VzZVJlZn0gZnJvbSAncmVhY3QnXG5cbmNvbnN0IFNjcm9sbFRyYWNrZXIgPSAoeyB0b3AsIGxlZnQsIG9mZnNldCwgbGlzdHNpemUsIHN0eWxlcyB9KSA9PiB7XG5cbiAgICBjb25zdCB0cmFja2RhdGEgPSBgJHtvZmZzZXQgKyAxfS8ke2xpc3RzaXplfWBcblxuICAgIGNvbnN0IHN0eWxlUmVmID0gdXNlUmVmKHtcbiAgICAgICAgdG9wOiB0b3AgKyAncHgnLFxuICAgICAgICBsZWZ0OiBsZWZ0ICsgJ3B4JyxcbiAgICAgICAgcG9zaXRpb246J2ZpeGVkJyxcbiAgICAgICAgekluZGV4OjMsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjond2hpdGUnLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgZ3JheScsXG4gICAgICAgIGJvcmRlclJhZGl1czonMTBweCcsXG4gICAgICAgIGZvbnRTaXplOidzbWFsbGVyJyxcbiAgICAgICAgcGFkZGluZzonM3B4JyxcbiAgICAgICAgLi4uc3R5bGVzLnNjcm9sbHRyYWNrZXJcbiAgICB9KVxuXG4gICAgcmV0dXJuIDxkaXYgZGF0YS1uYW1lID0gJ3Njcm9sbHRyYWNrZXInIHN0eWxlID0ge3N0eWxlUmVmLmN1cnJlbnR9ID57dHJhY2tkYXRhfTwvZGl2PlxufVxuXG5leHBvcnQgZGVmYXVsdCBTY3JvbGxUcmFja2VyIl0sIm5hbWVzIjpbInJlYWN0XzEiLCJfX2ltcG9ydFN0YXIiLCJyZXF1aXJlIiwiU2Nyb2xsVHJhY2tlciIsIl9yZWYiLCJ0b3AiLCJsZWZ0Iiwib2Zmc2V0IiwibGlzdHNpemUiLCJzdHlsZXMiLCJ0cmFja2RhdGEiLCJjb25jYXQiLCJzdHlsZVJlZiIsInVzZVJlZiIsIk9iamVjdCIsImFzc2lnbiIsInBvc2l0aW9uIiwiekluZGV4IiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiYm9yZGVyUmFkaXVzIiwiZm9udFNpemUiLCJwYWRkaW5nIiwic2Nyb2xsdHJhY2tlciIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsImN1cnJlbnQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cradle/ScrollTracker.tsx\n')},"./src/cradle/contentfunctions.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\n// contentfunctions.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.deletePortals = exports.allocateContentList = exports.getCellFrameComponentList = exports.calculateShiftSpecs = exports.calculateShiftInstruction = exports.calculateContentListRequirements = void 0;\n/*\n    This module supports the contenthandler module. The functions in this module perform\n    the detailed calculations and processes required by the contenthandler.\n\n    calculateContentListRequirements is called by the contenthandler's setCradleContent function.\n\n    calculateShiftInstruction and calcContentShift are called by contentHandler's updateCradleContent\n    function.\n    \n    getCellFrameComponentList, allocateContentList, and deletePortals functions are shared by both.\n\n    createCellFrame is called internally by getCellFrameComponentList as needed.\n*/\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\nvar CellFrame_1 = __importDefault(__webpack_require__(/*! ../CellFrame */ \"./src/CellFrame.tsx\"));\nvar InfiniteGridScroller_1 = __webpack_require__(/*! ../InfiniteGridScroller */ \"./src/InfiniteGridScroller.tsx\");\n// ======================[ for setCradleContent ]===========================\nvar calculateContentListRequirements = function calculateContentListRequirements(_ref) {\n  var targetAxisReferenceIndex = _ref.targetAxisReferenceIndex,\n    baseRowLength = _ref.baseRowLength,\n    targetAxisViewportPixelOffset = _ref.targetAxisViewportPixelOffset,\n    cradleInheritedProperties = _ref.cradleInheritedProperties,\n    cradleInternalProperties = _ref.cradleInternalProperties;\n  var padding = cradleInheritedProperties.padding;\n  var crosscount = cradleInternalProperties.crosscount,\n    cradleRowcount = cradleInternalProperties.cradleRowcount,\n    runwayRowcount = cradleInternalProperties.runwayRowcount,\n    listRowcount = cradleInternalProperties.listRowcount,\n    listsize = cradleInternalProperties.listsize;\n  // align axis reference to first row item\n  targetAxisReferenceIndex = Math.min(targetAxisReferenceIndex, listsize - 1);\n  targetAxisReferenceIndex -= targetAxisReferenceIndex % crosscount;\n  // derive target row\n  var targetAxisRowOffset = Math.ceil(targetAxisReferenceIndex / crosscount);\n  // update will compensate if this is too high\n  var maxAxisRowOffset = Math.max(0, listRowcount - 1);\n  if (targetAxisRowOffset > maxAxisRowOffset) {\n    targetAxisRowOffset = maxAxisRowOffset;\n    targetAxisReferenceIndex = targetAxisRowOffset * crosscount;\n  }\n  // -----------------------[ calc cradleReferenceRow & Index ]------------------------\n  // leading edge\n  var targetCradleRowOffset = Math.max(0, targetAxisRowOffset - runwayRowcount);\n  // trailing edge\n  var targetCradleEndRowOffset = targetCradleRowOffset + (cradleRowcount - 1);\n  var listEndRowOffset = listRowcount - 1;\n  if (targetCradleEndRowOffset > listEndRowOffset) {\n    var diff = targetCradleEndRowOffset - listEndRowOffset;\n    targetCradleRowOffset -= diff;\n    targetCradleEndRowOffset -= diff;\n  }\n  var targetCradleReferenceIndex = targetCradleRowOffset * crosscount;\n  // ---------------------[ calc cradle content count ]---------------------\n  var newCradleContentCount = cradleRowcount * crosscount;\n  if (targetCradleEndRowOffset == listEndRowOffset) {\n    var endRowRemainderCount = listsize % crosscount;\n    if (endRowRemainderCount) {\n      newCradleContentCount -= crosscount - endRowRemainderCount;\n    }\n  }\n  // --------------------[ calc css positioning ]-----------------------\n  var targetScrollblockViewportPixelOffset = targetAxisRowOffset * baseRowLength + padding - targetAxisViewportPixelOffset;\n  // ----------------------[ return required values ]---------------------\n  return {\n    targetCradleReferenceIndex: targetCradleReferenceIndex,\n    targetAxisReferenceIndex: targetAxisReferenceIndex,\n    targetScrollblockViewportPixelOffset: targetScrollblockViewportPixelOffset,\n    newCradleContentCount: newCradleContentCount\n  };\n};\nexports.calculateContentListRequirements = calculateContentListRequirements;\n// ======================[ for updateCradleContent ]===========================\n/*\n    the two triggerlines must straddle the head of the viewport (top or left) so that\n    cradle motion can be detected. Motion is most often caused by scrolling, but\n    can also occur with change of size of cradle content rows.\n\n    calculateShiftInstruction determines whether the axis should be moved toward the head or tail\n        to restore the straddling position of the two trigger lines. Lots of relative motion.\n\n    'moveaxisheadward' (scrolling down or right) means moving the axis up or left, adjacent items down\n         or right to the tail, dropping trailing tail items, and adding leading head items as necessary\n         to maintain number of cradle rows of content constant.\n\n    'moveaxistailward' (scrolling up or left) means moving the axis down or right, adjacent items up\n         or left to the head, dropping trailing head items, and adding leading tail items as necessary\n         to maintain number of cradle rows of content constant.\n\n    'none' means no shift is required\n*/\nvar calculateShiftInstruction = function calculateShiftInstruction(_ref2) {\n  var orientation = _ref2.orientation,\n    triggerlineEntries = _ref2.triggerlineEntries,\n    triggerlineSpan = _ref2.triggerlineSpan,\n    scrollerID = _ref2.scrollerID,\n    isFirstRowTriggerConfig = _ref2.isFirstRowTriggerConfig,\n    viewportBoundingRect = _ref2.viewportBoundingRect,\n    triggerHistoryRef = _ref2.triggerHistoryRef;\n  var triggerData = {\n    headOffset: null,\n    tailOffset: null,\n    span: triggerlineSpan,\n    isFirstRowTriggerConfig: isFirstRowTriggerConfig\n  };\n  // most recent; either triggerline will do\n  var entry = triggerlineEntries[triggerlineEntries.length - 1]; //.at(-1) at not available in iOS 15\n  var referencename = entry.target.dataset.type;\n  entry.referencename = referencename;\n  var span = triggerlineSpan;\n  var intersectrootpos = orientation == 'vertical' ? Math.trunc(entry.rootBounds.y) : Math.trunc(entry.rootBounds.x);\n  // entry.rootBounds.y:\n  // entry.rootBounds.x\n  var boundingrootpos = orientation == 'vertical' ? Math.trunc(viewportBoundingRect.y) : Math.trunc(viewportBoundingRect.x);\n  // viewportBoundingRect.y:\n  // viewportBoundingRect.x\n  // this selection is redundant, but documents what's going on\n  var rootpos = intersectrootpos == boundingrootpos ? intersectrootpos : boundingrootpos; // we're in Safari, zoomed\n  var entrypos = orientation == 'vertical' ? Math.trunc(entry.boundingClientRect.y) : Math.trunc(entry.boundingClientRect.x);\n  // entry.boundingClientRect.y:\n  // entry.boundingClientRect.x\n  var viewportTriggerOffset = entrypos - rootpos;\n  if (referencename == 'headtrigger') {\n    triggerData.headOffset = viewportTriggerOffset;\n    triggerData.tailOffset = viewportTriggerOffset + span;\n  } else {\n    // tailtrigger\n    triggerData.headOffset = viewportTriggerOffset - span;\n    triggerData.tailOffset = viewportTriggerOffset;\n  }\n  var shiftinstruction;\n  var triggerHistory = triggerHistoryRef.current;\n  // since triggers are moved and can share the 0 (zero) offset, an infinite loop can occur\n  // between the head and tail triggers. The following short-circuits that.\n  // Obviously needs work to generalize...\n  if ((0, InfiniteGridScroller_1.isSafariIOS)() && (triggerData.headOffset == 0 || triggerData.tailOffset == 0) || !(0, InfiniteGridScroller_1.isSafariIOS)() && (triggerData.headOffset >= -1 && triggerData.headOffset <= 1 || triggerData.tailOffset >= -1 && triggerData.tailOffset <= 1)) {\n    // some browsers do an infinite loop with the same previousReferenceName;\n    // usually alternates\n    if (triggerHistory.previousReferenceName) {\n      triggerHistory.previousReferenceName = null;\n      shiftinstruction = 'none';\n    } else {\n      if (triggerData.headOffset >= -1 && triggerData.headOffset <= 1) {\n        // if (triggerData.headOffset == 0) {\n        triggerHistory.previousReferenceName = 'headtrigger';\n      } else {\n        triggerHistory.previousReferenceName = 'tailtrigger';\n      }\n    }\n  } else {\n    if (triggerHistory.previousReferenceName) {\n      triggerHistory.previousReferenceName = null;\n    }\n  }\n  if (shiftinstruction) {\n    // will be 'none'\n    return [shiftinstruction, 0]; //triggerViewportReferencePos]\n  }\n\n  if (isFirstRowTriggerConfig) {\n    if (triggerData.headOffset <= 0) {\n      shiftinstruction = 'moveaxistailward';\n    } else {\n      shiftinstruction = 'none';\n    }\n  } else {\n    if (triggerData.tailOffset <= 0) {\n      shiftinstruction = 'moveaxistailward';\n    } else if (triggerData.headOffset >= 0) {\n      shiftinstruction = 'moveaxisheadward';\n    } else {\n      shiftinstruction = 'none';\n    }\n  }\n  var triggerViewportReferencePos = shiftinstruction == 'moveaxistailward' ?\n  // block is scrolling up or left\n  triggerData.tailOffset :\n  // needs to move up or left toward head\n  triggerData.headOffset; // needs to move down or right toward tail\n  return [shiftinstruction, triggerViewportReferencePos];\n};\nexports.calculateShiftInstruction = calculateShiftInstruction;\n/*\n    The basic goal of calcContentShoft is to determine the number and direction of rows to shift between\n    the head and tail grids (which determines the new location of the axis), and also to\n    calculate the rolling addition and deletion of cradle content to accommodate the changes.\n\n    The number of rows to shift is determined by the pixel shift required to restore the\n    triggerlines to their straddle configuration around the head (top or left) of the viewport.\n\n    Adjustments are made to accommodate special requirements at the start and end of the virtual list.\n\n    DOM measurements are used where available (to accommodate variable dimension rows), and standard\n    units (cellHeight, cellWidth) used for estimates where necessary.\n*/\n// rowshift is at least 1 by the time this function is reached\n// ie. a shiftinstruction of 'moveaxisheadward' or 'moveaxistailward'\nvar calculateShiftSpecs = function calculateShiftSpecs(_ref3) {\n  var shiftinstruction = _ref3.shiftinstruction,\n    triggerViewportReferencePos = _ref3.triggerViewportReferencePos,\n    scrollPos = _ref3.scrollPos,\n    scrollblockElement = _ref3.scrollblockElement,\n    cradleInheritedProperties = _ref3.cradleInheritedProperties,\n    cradleInternalProperties = _ref3.cradleInternalProperties,\n    cradleContent = _ref3.cradleContent,\n    cradleElements = _ref3.cradleElements;\n  // ------------------------[ 1. initialize ]-----------------------\n  var _a, _b;\n  // configuration data\n  var gap = cradleInheritedProperties.gap,\n    padding = cradleInheritedProperties.padding,\n    orientation = cradleInheritedProperties.orientation,\n    cellHeight = cradleInheritedProperties.cellHeight,\n    cellWidth = cradleInheritedProperties.cellWidth,\n    layout = cradleInheritedProperties.layout;\n  // cradle elements\n  var axisElement = cradleElements.axisRef.current,\n    headGridElement = cradleElements.headRef.current,\n    tailGridElement = cradleElements.tailRef.current;\n  // cradle contents\n  var cradlecontentlist = cradleContent.cradleModelComponents,\n    tailcontentlist = cradleContent.tailModelComponents;\n  // more config data\n  var crosscount = cradleInternalProperties.crosscount,\n    cradleRowcount = cradleInternalProperties.cradleRowcount,\n    listsize = cradleInternalProperties.listsize,\n    listRowcount = cradleInternalProperties.listRowcount,\n    viewportRowcount = cradleInternalProperties.viewportRowcount,\n    runwayRowcount = cradleInternalProperties.runwayRowcount;\n  var previousCradleReferenceIndex = ((_a = cradlecontentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index) || 0,\n    previousCradleRowOffset = Math.ceil(previousCradleReferenceIndex / crosscount);\n  var previousAxisReferenceIndex = ((_b = tailcontentlist[0]) === null || _b === void 0 ? void 0 : _b.props.index) || 0,\n    previousAxisRowOffset = Math.ceil(previousAxisReferenceIndex / crosscount);\n  var listEndrowOffset = listRowcount - 1;\n  var baseRowLength = (orientation == 'vertical' ? cellHeight : cellWidth) + gap;\n  var spanRowPtr,\n    spanAxisPixelShift = 0,\n    // in relation to viewport head boundary\n    inProcessRowPtr = 0,\n    isListBoundary = false,\n    totalPixelShift,\n    finalVariableRowLength; // special case\n  // measure exising rows for variable length cells\n  if (layout == 'variable') {\n    var referenceGridElement =\n    // moving axis (and triggers) toward the reference grid element\n    shiftinstruction == 'moveaxistailward' ?\n    // scrolling up or left\n    tailGridElement : headGridElement;\n    var gridRowLengths = getGridRowLengths(referenceGridElement, orientation, crosscount, gap);\n    if (shiftinstruction == 'moveaxisheadward') {\n      // scrolling down or right; move triggerlines up or left\n      gridRowLengths.reverse(); // head grid row lengths listed from axis toward head\n    }\n\n    var gridRowAggregateSpans = getGridRowAggregateSpans(gridRowLengths); // count pixels where available\n    // ----------------------------[ 2. calculate base row shift ]--------------------------\n    // first try to find position based on known (instantiated) rows\n    if (shiftinstruction == 'moveaxistailward') {\n      // scroll up\n      // tail trigger needs to move down or right until position relative to viewport top or left is positive\n      spanRowPtr = gridRowAggregateSpans.findIndex(function (aggregatespan) {\n        return triggerViewportReferencePos + aggregatespan >= 0;\n      });\n    } else {\n      // 'moveaxisheadward', scrolldown\n      // head trigger needs to move up or left until position relative to viewport top or left is negative\n      spanRowPtr = gridRowAggregateSpans.findIndex(function (aggregatespan) {\n        return triggerViewportReferencePos - aggregatespan <= 0;\n      });\n    }\n    if (!(spanRowPtr == -1)) {\n      // found measureed row for shift\n      spanAxisPixelShift = shiftinstruction == 'moveaxistailward' ? gridRowAggregateSpans[spanRowPtr] :\n      // move axis toward tail from viewport boundary (positive)\n      -gridRowAggregateSpans[spanRowPtr]; // move axis toward head from viewport boundary (negative)\n    } else {\n      // either in boundary, or shy of target\n      isListBoundary = gridRowAggregateSpans.length == 0; // boundary at head of list\n      if (!isListBoundary) {\n        // interim working result\n        inProcessRowPtr = gridRowAggregateSpans.length - 1; // base: failed measured row ptr\n        totalPixelShift = gridRowAggregateSpans[inProcessRowPtr]; // set base of working overshoot\n        finalVariableRowLength = gridRowLengths.at(-1); // for oversize cell adjustment below\n      }\n    }\n  } else {\n    // layout == 'uniform'; use only defined lengths\n    spanRowPtr = -1; // \"not found\", ie not applicable\n    inProcessRowPtr = 0;\n    totalPixelShift = 0;\n  }\n  // uniform layout, or overshoot of instantiated rows; continue with virtual base rows\n  if (spanRowPtr == -1) {\n    if (!isListBoundary) {\n      if (shiftinstruction == 'moveaxistailward') {\n        // scrolling up/left\n        do {\n          totalPixelShift += baseRowLength;\n          inProcessRowPtr++;\n        } while (triggerViewportReferencePos + totalPixelShift < 0);\n        spanAxisPixelShift = totalPixelShift;\n      } else {\n        // moveaxisheadward; scrolling down/right\n        do {\n          totalPixelShift += baseRowLength;\n          inProcessRowPtr++;\n          if (previousAxisRowOffset - inProcessRowPtr == 0) {\n            // stop cycling at head limit\n            break;\n          }\n        } while (triggerViewportReferencePos - totalPixelShift > 0);\n        spanAxisPixelShift = -totalPixelShift;\n      }\n    }\n    // inProcessRowPtr is one greater than spanRowPtr with actual measurements above\n    // this makes them compativle for span conversion (next step)\n    spanRowPtr = inProcessRowPtr - 1;\n  }\n  var spanRowShift =\n  // pick up row shift with or without overshoot\n  shiftinstruction == 'moveaxistailward' ? spanRowPtr + 1 : -(spanRowPtr + 1);\n  // the following two values (axisReferenceRowShift & axisPixelShift), and no other calcs, \n  //     are carried forward in this function.\n  // for axisReferenceRowshift:\n  // negative for moving rows out of head into tail;\n  // positive for moving rows out of tail into head\n  var axisReferenceRowShift = spanRowShift,\n    axisPixelShift = spanAxisPixelShift;\n  // this can only happen with oversized cellLength (ie > viewportLength)\n  //     and only using measured length\n  // axis must be no farther than 1 back of the last row end position\n  if (previousAxisRowOffset + axisReferenceRowShift > listEndrowOffset) {\n    axisReferenceRowShift -= 1;\n    if (layout == 'variable') {\n      axisPixelShift -= finalVariableRowLength; //gridRowLengths.at(-1)\n    } else {\n      axisPixelShift -= baseRowLength;\n    }\n  }\n  // -----------[ 3. calculate current viewport axis offset ]-------------------\n  // gaps beyond rendered rows can be caused by rapid scrolling\n  var scrollblockAxisOffset = orientation == 'vertical' ? axisElement.offsetTop : axisElement.offsetLeft;\n  var scrollblockOffset =\n  // to capture current top/left adjustment to viewport for variable layout\n  orientation == 'vertical' ? scrollblockElement.offsetTop : scrollblockElement.offsetLeft;\n  // currentViewportAxisOffset will be negative (above viewport edge) for scroll block headward \n  //     and positive for scroll block tailward\n  // the pixel distance between the viewport frame and the axis, toward the head\n  var currentViewportAxisOffset = scrollblockAxisOffset + scrollblockOffset - scrollPos;\n  // -------------[ 4. calculate new axis pixel position ]------------------\n  var newAxisViewportPixelOffset = currentViewportAxisOffset + axisPixelShift;\n  // Note: sections 5, 6 and 7 deal entirely with row calculations; no pixels\n  // ------------[ 5. calc new cradle and axis reference row offsets ]-------------\n  // base value for cradle reference shift; may change if beyond list bounds\n  var cradleReferenceRowshift = axisReferenceRowShift;\n  // base values\n  var newCradleReferenceRowOffset = previousCradleRowOffset + cradleReferenceRowshift;\n  var newAxisReferenceRowOffset = previousAxisRowOffset + axisReferenceRowShift;\n  // --------[ 6. adjust cradle contents for start and end of list ]-------\n  // ...to maintain constant number of cradle rows\n  if (shiftinstruction == 'moveaxistailward') {\n    // scrolling up/left\n    // a. if scrolling the block headward near the start of the list, new cradle row offset and\n    // cradle row shift count has to be adjusted to accommodate the leading runway\n    // b. if scrolling the block headward (revealing tail of list), as the cradle last row offset \n    // approaches max listrow, new cradle offset and cradle row shift have to be adjusted to prevent \n    // shortening of cradle content.\n    // --- start of list adjustment\n    var targetCradleReferenceRowOffset = Math.max(0, newAxisReferenceRowOffset - runwayRowcount - 1); // extra row for visibility\n    var headrowDiff = newCradleReferenceRowOffset - targetCradleReferenceRowOffset;\n    if (headrowDiff > 0) {\n      newCradleReferenceRowOffset -= headrowDiff;\n      cradleReferenceRowshift -= headrowDiff;\n    }\n    // --- end of list adjustment: case of being in bounds of trailing runway (end of list)\n    var targetCradleEndrowOffset = newCradleReferenceRowOffset + (cradleRowcount - 1);\n    var tailrowdiff = Math.max(0, targetCradleEndrowOffset - listEndrowOffset);\n    if (tailrowdiff > 0) {\n      cradleReferenceRowshift -= tailrowdiff;\n      newCradleReferenceRowOffset -= tailrowdiff;\n    }\n  } else {\n    // shiftinstruction == 'moveaxisheadward'; scrolling down/right\n    // c. if scrolling the block down or right (toward revealing head of list), as the cradlerowoffset \n    // hits 0, cradle changes have to be adjusted to prevent shortening of cradle content\n    // d. if scrolling headward near the end of the list, cradle changes have to be adjusted to \n    // accomodate the trailing runway\n    // --- start of list adjustment\n    if (newCradleReferenceRowOffset < 0) {\n      cradleReferenceRowshift -= newCradleReferenceRowOffset;\n      newCradleReferenceRowOffset = 0;\n    }\n    if (layout == 'variable' && newAxisReferenceRowOffset == 0) {\n      newAxisViewportPixelOffset = padding;\n    }\n    // --- end of list adjustment; case of in bounds of trailing runway\n    var computedNextCradleEndrowOffset = previousCradleRowOffset + (cradleRowcount - 1) + cradleReferenceRowshift;\n    var _targetCradleEndrowOffset = Math.min(listEndrowOffset, newAxisReferenceRowOffset + (viewportRowcount - 1) + (runwayRowcount - 1));\n    var _tailrowdiff = Math.max(0, _targetCradleEndrowOffset - computedNextCradleEndrowOffset);\n    if (_tailrowdiff > 0) {\n      cradleReferenceRowshift += _tailrowdiff;\n      newCradleReferenceRowOffset += _tailrowdiff;\n    }\n  }\n  // ----------------------[ 7. map rows to item references ]----------------------\n  var newCradleReferenceIndex = newCradleReferenceRowOffset * crosscount;\n  var cradleReferenceItemShift = cradleReferenceRowshift * crosscount;\n  var newAxisReferenceIndex = newAxisReferenceRowOffset * crosscount;\n  var axisReferenceItemShift = axisReferenceRowShift * crosscount;\n  var newCradleContentCount = cradleRowcount * crosscount; // base count\n  var includesLastRow = newCradleReferenceRowOffset + cradleRowcount >= listRowcount;\n  if (includesLastRow) {\n    var partialspaces = listsize % crosscount;\n    var itemsShortfall = partialspaces == 0 ? 0 : crosscount - partialspaces;\n    newCradleContentCount -= itemsShortfall;\n  }\n  // create head and tail change counts\n  var changeOfCradleContentCount = cradlecontentlist.length - newCradleContentCount;\n  var listStartChangeCount = -cradleReferenceItemShift;\n  var listEndChangeCount = -listStartChangeCount - changeOfCradleContentCount;\n  // ---------------------[ 8. return required values ]-------------------\n  return {\n    // newCradleReferenceIndex, \n    cradleReferenceItemShift: cradleReferenceItemShift,\n    newAxisReferenceIndex: newAxisReferenceIndex,\n    axisReferenceItemShift: axisReferenceItemShift,\n    newAxisViewportPixelOffset: newAxisViewportPixelOffset,\n    newCradleContentCount: newCradleContentCount,\n    listStartChangeCount: listStartChangeCount,\n    listEndChangeCount: listEndChangeCount\n  };\n};\nexports.calculateShiftSpecs = calculateShiftSpecs;\n// supports calcContentShift above\nvar getGridRowLengths = function getGridRowLengths(grid, orientation, crosscount, gap) {\n  var rowLengths = [];\n  var elementList = grid.childNodes;\n  var elementPtr = 0;\n  var element = elementList[elementPtr];\n  while (element) {\n    var rowlength = (orientation == 'vertical' ? element.offsetHeight : element.offsetWidth) + gap;\n    rowLengths.push(rowlength);\n    elementPtr += crosscount;\n    element = elementList[elementPtr];\n  }\n  return rowLengths;\n};\n// supports calcContentShift above\nvar getGridRowAggregateSpans = function getGridRowAggregateSpans(rowLengths) {\n  var rowSpans = [];\n  var span = 0;\n  rowLengths.forEach(function (value) {\n    span += value;\n    rowSpans.push(span);\n  });\n  return rowSpans;\n};\n// =====================[ shared by both setCradleContent and updateCradleContent ]====================\n// update content\n// adds CellFrames at end of contentlist according to headindexcount and tailindexcount,\n// or if indexcount values are <0 removes them.\nvar getCellFrameComponentList = function getCellFrameComponentList(_ref4) {\n  var cradleInheritedProperties = _ref4.cradleInheritedProperties,\n    cradleInternalProperties = _ref4.cradleInternalProperties,\n    cacheAPI = _ref4.cacheAPI,\n    cradleContentCount = _ref4.cradleContentCount,\n    cradleReferenceIndex = _ref4.cradleReferenceIndex,\n    listStartChangeCount = _ref4.listStartChangeCount,\n    listEndChangeCount = _ref4.listEndChangeCount,\n    contentlist = _ref4.workingContentList,\n    instanceIdCounterRef = _ref4.instanceIdCounterRef,\n    styles = _ref4.styles,\n    placeholderMessages = _ref4.placeholderMessages;\n  var localContentlist = _toConsumableArray(contentlist);\n  var lastindexoffset = cradleReferenceIndex + localContentlist.length - 1;\n  var headContentlist = [],\n    tailContentlist = [];\n  var deletedtailitems = [],\n    deletedheaditems = [];\n  if (listStartChangeCount >= 0) {\n    // acquire new items\n    var referenceIndex = cradleReferenceIndex;\n    var changeCount = listStartChangeCount;\n    if (listStartChangeCount > cradleContentCount) {\n      referenceIndex = cradleReferenceIndex - (listStartChangeCount - cradleContentCount);\n      changeCount = cradleContentCount;\n    }\n    for (var newindex = referenceIndex - changeCount; newindex < referenceIndex; newindex++) {\n      headContentlist.push(createCellFrame({\n        index: newindex,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        instanceIdCounterRef: instanceIdCounterRef,\n        cacheAPI: cacheAPI,\n        placeholderFrameStyles: styles.placeholderframe,\n        placeholderLinerStyles: styles.placeholderliner,\n        placeholderErrorFrameStyles: styles.placeholdererrorframe,\n        placeholderErrorLinerStyles: styles.placeholdererrorliner,\n        placeholderMessages: placeholderMessages\n      }));\n    }\n  } else {\n    deletedheaditems = localContentlist.splice(0, -listStartChangeCount);\n  }\n  if (listEndChangeCount >= 0) {\n    // acquire new items\n    var _referenceIndex = lastindexoffset;\n    var _changeCount = listEndChangeCount;\n    if (listEndChangeCount > cradleContentCount) {\n      _referenceIndex = lastindexoffset + (listEndChangeCount - cradleContentCount);\n      _changeCount = cradleContentCount;\n    }\n    for (var _newindex = _referenceIndex + 1; _newindex < _referenceIndex + 1 + _changeCount; _newindex++) {\n      tailContentlist.push(createCellFrame({\n        index: _newindex,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        instanceIdCounterRef: instanceIdCounterRef,\n        cacheAPI: cacheAPI,\n        placeholderFrameStyles: styles.placeholderframe,\n        placeholderLinerStyles: styles.placeholderliner,\n        placeholderErrorFrameStyles: styles.placeholdererrorframe,\n        placeholderErrorLinerStyles: styles.placeholdererrorliner,\n        placeholderMessages: placeholderMessages\n      }));\n    }\n  } else {\n    deletedtailitems = localContentlist.splice(listEndChangeCount, -listEndChangeCount);\n  }\n  var deletedItems = [].concat(_toConsumableArray(deletedheaditems), _toConsumableArray(deletedtailitems));\n  var componentList = [].concat(headContentlist, _toConsumableArray(localContentlist), tailContentlist);\n  return [componentList, deletedItems];\n};\nexports.getCellFrameComponentList = getCellFrameComponentList;\n// Leading (head) all or partially hidden; tail, visible plus trailing hidden\nvar allocateContentList = function allocateContentList(_ref5) {\n  var contentlist = _ref5.contentlist,\n    axisReferenceIndex = _ref5.axisReferenceIndex,\n    layoutHandler = _ref5.layoutHandler;\n  var _a;\n  var triggercellIndex = layoutHandler.triggercellIndex;\n  var offsetindex = (_a = contentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index,\n    highindex = offsetindex + contentlist.length;\n  var headitemcount = axisReferenceIndex - offsetindex;\n  var targetTriggercellIndex = headitemcount == 0 ? axisReferenceIndex : axisReferenceIndex - 1;\n  layoutHandler.triggercellIsInTail = headitemcount == 0 ? true : false;\n  if (triggercellIndex !== undefined && offsetindex !== undefined) {\n    //&& \n    if (triggercellIndex >= offsetindex && triggercellIndex <= highindex) {\n      var _triggercellPtr = triggercellIndex - offsetindex;\n      var _triggercellComponent = contentlist[_triggercellPtr];\n      if (_triggercellComponent) {\n        // otherwise has been asynchronously cleared\n        contentlist[_triggercellPtr] = react_1[\"default\"].cloneElement(_triggercellComponent, {\n          isTriggercell: false\n        });\n      }\n    }\n  }\n  var triggercellPtr = targetTriggercellIndex - offsetindex;\n  var triggercellComponent = contentlist[triggercellPtr];\n  if (triggercellComponent) {\n    contentlist[triggercellPtr] = react_1[\"default\"].cloneElement(triggercellComponent, {\n      isTriggercell: true\n    });\n    layoutHandler.triggercellIndex = targetTriggercellIndex;\n  } else {\n    // defensive; shouldn't happen\n    console.log('FAILURE TO REGISTER TRIGGERCELL:');\n    console.log('axisReferenceIndex, triggercellIndex, offsetindex, highindex, headitemcount, targetTriggercellIndex', axisReferenceIndex, triggercellIndex, offsetindex, highindex, headitemcount, targetTriggercellIndex);\n    console.log('triggercellPtr, triggercellComponent, triggercellComponent?.props.isTriggecell, contentlist\\n', triggercellPtr, triggercellComponent, triggercellComponent === null || triggercellComponent === void 0 ? void 0 : triggercellComponent.props.isTriggecell, Object.assign({}, contentlist));\n  }\n  var headlist = contentlist.slice(0, headitemcount);\n  var taillist = contentlist.slice(headitemcount);\n  return [headlist, taillist];\n};\nexports.allocateContentList = allocateContentList;\nvar deletePortals = function deletePortals(cacheAPI, deleteList, deleteListCallback) {\n  var dlist = deleteList.map(function (item) {\n    return item.props.index;\n  });\n  cacheAPI.deletePortalByIndex(dlist, deleteListCallback);\n};\nexports.deletePortals = deletePortals;\n// =====================[ internal, acquire item ]======================\nvar createCellFrame = function createCellFrame(_ref6) {\n  var index = _ref6.index,\n    cradleInheritedProperties = _ref6.cradleInheritedProperties,\n    cradleInternalProperties = _ref6.cradleInternalProperties,\n    instanceIdCounterRef = _ref6.instanceIdCounterRef,\n    cacheAPI = _ref6.cacheAPI,\n    placeholderFrameStyles = _ref6.placeholderFrameStyles,\n    placeholderLinerStyles = _ref6.placeholderLinerStyles,\n    placeholderErrorFrameStyles = _ref6.placeholderErrorFrameStyles,\n    placeholderErrorLinerStyles = _ref6.placeholderErrorLinerStyles,\n    placeholderMessages = _ref6.placeholderMessages;\n  var instanceID = instanceIdCounterRef.current++;\n  var orientation = cradleInheritedProperties.orientation,\n    cellHeight = cradleInheritedProperties.cellHeight,\n    cellWidth = cradleInheritedProperties.cellWidth,\n    cellMinHeight = cradleInheritedProperties.cellMinHeight,\n    cellMinWidth = cradleInheritedProperties.cellMinWidth,\n    getItem = cradleInheritedProperties.getItem,\n    placeholder = cradleInheritedProperties.placeholder,\n    scrollerID = cradleInheritedProperties.scrollerID,\n    layout = cradleInheritedProperties.layout,\n    usePlaceholder = cradleInheritedProperties.usePlaceholder;\n  var listsize = cradleInternalProperties.listsize;\n  // get new or existing itemID\n  var itemID = cacheAPI.getNewOrExistingItemID(index);\n  return react_1[\"default\"].createElement(CellFrame_1[\"default\"], {\n    key: instanceID,\n    orientation: orientation,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    cellMinHeight: cellMinHeight,\n    cellMinWidth: cellMinWidth,\n    layout: layout,\n    index: index,\n    getItem: getItem,\n    listsize: listsize,\n    placeholder: placeholder,\n    itemID: itemID,\n    instanceID: instanceID,\n    scrollerID: scrollerID,\n    isTriggercell: false,\n    usePlaceholder: usePlaceholder,\n    placeholderFrameStyles: placeholderFrameStyles,\n    placeholderLinerStyles: placeholderLinerStyles,\n    placeholderErrorFrameStyles: placeholderErrorFrameStyles,\n    placeholderErrorLinerStyles: placeholderErrorLinerStyles,\n    placeholderMessages: placeholderMessages\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contentfunctions.tsx\n")},"./src/cradle/contenthandler.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// contenthandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    This module supports the setup, rollover and positioning of content in the Cradle.\n\n    There are three key functions in this module: setCradleContent, updateCradleContent, and\n    adjustScrollblockForVariability.\n\n    There are also a few functions which support synchronization of Cradle content with cache\n    content (see internal and external services below).\n\n    setCradleContent is called directly from Cradle (in the state manager), and instantiates new Cradle\n    content in response to the scroller setup, or changes to its configuration. setCradleContent\n    creates a list of Cradle content CellFrames, and allocates those to the two Cradle grids. This\n    process occurs in response to many state changes, such as finishreposition, pivot, a host scrollto\n    request, and more.\n\n    updateCradleContent rolls over the Cradle content in response to user scrolling. When scrolling\n    down (or right), content is removed from the Cradle tail and added to the Cradle head (thus moving the\n    Cradle axis), while new content is added to the tail. When scrolling up (or left), the reverse occurs.\n\n    adjustScrollblockForVariability reconfigures the scrollblock to accommodate variable sized grid rows.\n\n    The Cradle (through the contentfunctions module) delegates fetching content items to the CellFrame.\n\n    This module is supported primarily by the contentfunctions module.\n\n*/\nvar react_1 = __importDefault(__webpack_require__(/*! react */ "react"));\nvar contentfunctions_1 = __webpack_require__(/*! ./contentfunctions */ "./src/cradle/contentfunctions.tsx");\nvar InfiniteGridScroller_1 = __webpack_require__(/*! ../InfiniteGridScroller */ "./src/InfiniteGridScroller.tsx");\nvar ContentHandler = /*#__PURE__*/function () {\n  function ContentHandler(cradleParameters) {\n    var _this = this;\n    _classCallCheck(this, ContentHandler);\n    this.content = {\n      cradleModelComponents: null,\n      headModelComponents: null,\n      tailModelComponents: null,\n      // the following two only used in cradle for render\n      headDisplayComponents: [],\n      tailDisplayComponents: []\n    };\n    this.instanceIdCounterRef = {\n      current: 0\n    };\n    // Three main public methods - setCradleContent, updateCradleContent, and adjustScrollblockForVariability\n    // ==========================[ SET CONTENT ]===========================\n    // reset the cradle with new content, including allocation between head and tail parts of the cradle\n    // - called only from the Cradle state handler\n    this.updateListsize = function (newlistsize) {\n      if (newlistsize == 0) {\n        var cradleContent = _this.content;\n        _this.clearCradle();\n        cradleContent.headDisplayComponents = [];\n        cradleContent.tailDisplayComponents = [];\n      }\n      _this.cradleParameters.cradleInternalPropertiesRef.current.updateListsize(newlistsize);\n    };\n    this.setCradleContent = function (cradleState) {\n      // ------------------------------[ 1. initialize ]---------------------------\n      var cradleParameters = _this.cradleParameters;\n      var ViewportContextProperties = cradleParameters.ViewportContextPropertiesRef.current,\n        cradleInheritedProperties = cradleParameters.cradleInheritedPropertiesRef.current,\n        cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current,\n        cradleHandlers = cradleParameters.handlersRef.current;\n      var cacheAPI = cradleHandlers.cacheAPI,\n        layoutHandler = cradleHandlers.layoutHandler,\n        serviceHandler = cradleHandlers.serviceHandler,\n        scrollHandler = cradleHandlers.scrollHandler;\n      var cradlePositionData = layoutHandler.cradlePositionData;\n      var viewportElement = ViewportContextProperties.elementRef.current;\n      var requestedAxisReferenceIndex = cradlePositionData.targetAxisReferenceIndex;\n      var targetAxisViewportPixelOffset = cradlePositionData.targetAxisViewportPixelOffset;\n      var orientation = cradleInheritedProperties.orientation,\n        gap = cradleInheritedProperties.gap,\n        padding = cradleInheritedProperties.padding,\n        cellHeight = cradleInheritedProperties.cellHeight,\n        cellWidth = cradleInheritedProperties.cellWidth,\n        styles = cradleInheritedProperties.styles,\n        placeholderMessages = cradleInheritedProperties.placeholderMessages;\n      var crosscount = cradleInternalProperties.crosscount,\n        listsize = cradleInternalProperties.listsize,\n        listRowcount = cradleInternalProperties.listRowcount;\n      var workingRequestAxisReferenceIndex = Math.min(requestedAxisReferenceIndex, listsize - 1);\n      workingRequestAxisReferenceIndex -= workingRequestAxisReferenceIndex % crosscount;\n      // reposition at row boundary\n      if ([\'firstrender\', \'firstrenderfromcache\', \'finishreposition\', \'reconfigure\', \'scrollto\'].includes(cradleState)) {\n        targetAxisViewportPixelOffset = workingRequestAxisReferenceIndex == 0 ? padding : gap; // default\n      }\n\n      var workingContentList = [];\n      var cradleContent = _this.content;\n      // ----------------------[ 2. get content requirements ]----------------------\n      var baseRowLength = (orientation == \'vertical\' ? cellHeight : cellWidth) + gap;\n      // note that targetAxisReferenceIndex replaces requestedAxisReferenceIndex here\n      var _ref = (0, contentfunctions_1.calculateContentListRequirements)({\n          // pixel\n          baseRowLength: baseRowLength,\n          targetAxisViewportPixelOffset: targetAxisViewportPixelOffset,\n          // index\n          targetAxisReferenceIndex: workingRequestAxisReferenceIndex,\n          // resources\n          cradleInheritedProperties: cradleInheritedProperties,\n          cradleInternalProperties: cradleInternalProperties\n        }),\n        targetCradleReferenceIndex = _ref.targetCradleReferenceIndex,\n        targetAxisReferenceIndex = _ref.targetAxisReferenceIndex,\n        cradleContentCount = _ref.newCradleContentCount,\n        scrollblockViewportPixelOffset = _ref.targetScrollblockViewportPixelOffset;\n      // reset scrollblock Offset and length\n      var scrollblockElement = viewportElement.firstChild;\n      var baselength = listRowcount * baseRowLength - gap // final cell has no trailing gap\n      + padding * 2; // leading and trailing padding\n      if (cradleState == \'pivot\') {\n        if (orientation == \'vertical\') {\n          scrollblockElement.style.left = null;\n        } else {\n          scrollblockElement.style.top = null;\n        }\n      }\n      if (orientation == \'vertical\') {\n        scrollblockElement.style.top = null;\n        scrollblockElement.style.height = baselength + \'px\';\n      } else {\n        scrollblockElement.style.left = null;\n        scrollblockElement.style.width = baselength + \'px\';\n      }\n      var axisViewportPixelOffset = targetAxisViewportPixelOffset; // semantics\n      // ----------------------[ 3. get and config content ]----------------------\n      // returns content constrained by cradleRowcount\n      var _ref2 = (0, contentfunctions_1.getCellFrameComponentList)({\n          cacheAPI: cacheAPI,\n          cradleInheritedProperties: cradleInheritedProperties,\n          cradleInternalProperties: cradleInternalProperties,\n          cradleContentCount: cradleContentCount,\n          cradleReferenceIndex: targetCradleReferenceIndex,\n          listStartChangeCount: 0,\n          listEndChangeCount: cradleContentCount,\n          workingContentList: workingContentList,\n          instanceIdCounterRef: _this.instanceIdCounterRef,\n          styles: styles,\n          placeholderMessages: placeholderMessages\n        }),\n        _ref3 = _slicedToArray(_ref2, 1),\n        newcontentlist = _ref3[0];\n      var _ref4 = (0, contentfunctions_1.allocateContentList)({\n          contentlist: newcontentlist,\n          axisReferenceIndex: targetAxisReferenceIndex,\n          layoutHandler: layoutHandler\n        }),\n        _ref5 = _slicedToArray(_ref4, 2),\n        headcontentlist = _ref5[0],\n        tailcontentlist = _ref5[1];\n      cradleContent.cradleModelComponents = newcontentlist;\n      cradleContent.headModelComponents = headcontentlist;\n      cradleContent.tailModelComponents = tailcontentlist;\n      cradlePositionData.targetAxisReferenceIndex = targetAxisReferenceIndex;\n      cradlePositionData.targetAxisViewportPixelOffset = axisViewportPixelOffset;\n      if (serviceHandler.callbacks.referenceIndexCallback) {\n        var cstate = cradleState;\n        serviceHandler.callbacks.referenceIndexCallback(cradlePositionData.targetAxisReferenceIndex, \'setCradleContent\', cstate);\n      }\n      //  ----------------------[ 4. set CSS ]-----------------------\n      cradlePositionData.blockScrollPos = scrollblockViewportPixelOffset;\n      // avoid bogus call to updateCradleContent\n      scrollHandler.resetScrollData(scrollblockViewportPixelOffset);\n      viewportElement[cradlePositionData.blockScrollProperty] = cradlePositionData.blockScrollPos;\n      var cradleElements = layoutHandler.elements;\n      var axisElement = cradleElements.axisRef.current,\n        headElement = cradleElements.headRef.current;\n      var axisScrollblockPixelOffset = scrollblockViewportPixelOffset + axisViewportPixelOffset;\n      if (orientation == \'vertical\') {\n        var top = axisScrollblockPixelOffset;\n        axisElement.style.top = top + \'px\';\n        axisElement.style.left = \'auto\';\n        headElement.style.padding = headcontentlist.length ? "".concat(padding, "px ").concat(padding, "px ").concat(gap, "px ").concat(padding, "px") : "".concat(padding, "px ").concat(padding, "px 0px ").concat(padding, "px");\n      } else {\n        // orientation = \'horizontal\'\n        var left = axisScrollblockPixelOffset;\n        axisElement.style.top = \'auto\';\n        axisElement.style.left = left + \'px\';\n        headElement.style.padding = headcontentlist.length ? "".concat(padding, "px ").concat(gap, "px ").concat(padding, "px ").concat(padding, "px") : "".concat(padding, "px 0px ").concat(padding, "px ").concat(padding, "px");\n      }\n    };\n    // ==================[ UPDATE CONTENT through scroll ]========================\n    // updateCradleContent does not touch the viewport element\'s scroll position for the scrollblock\n    // instead it reconfigures elements within the cradle. It is called solely from\n    // axisTriggerlinesObserverCallback of interruptHandler.\n    // typically called for scroll action, but can also be called if the triggerLineCell changes\n    // size with variant layout.\n    this.updateCradleContent = function () {\n      // ----------------------[ 1. initialize ]-------------------------\n      var _a;\n      // handler support\n      var _this$cradleParameter = _this.cradleParameters.handlersRef.current,\n        cacheAPI = _this$cradleParameter.cacheAPI,\n        layoutHandler = _this$cradleParameter.layoutHandler,\n        stateHandler = _this$cradleParameter.stateHandler,\n        interruptHandler = _this$cradleParameter.interruptHandler,\n        serviceHandler = _this$cradleParameter.serviceHandler;\n      var shiftinstruction = interruptHandler.shiftinstruction,\n        triggerViewportReferencePos = interruptHandler.triggerViewportReferencePos;\n      var viewportElement = _this.cradleParameters.ViewportContextPropertiesRef.current.elementRef.current;\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n        cradleInternalProperties = _this.cradleParameters.cradleInternalPropertiesRef.current;\n      var orientation = cradleInheritedProperties.orientation,\n        cache = cradleInheritedProperties.cache,\n        styles = cradleInheritedProperties.styles,\n        placeholderMessages = cradleInheritedProperties.placeholderMessages,\n        layout = cradleInheritedProperties.layout,\n        cellHeight = cradleInheritedProperties.cellHeight,\n        cellWidth = cradleInheritedProperties.cellWidth,\n        padding = cradleInheritedProperties.padding,\n        gap = cradleInheritedProperties.gap;\n      var crosscount = cradleInternalProperties.crosscount;\n      var scrollPos = orientation == \'vertical\' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n      // cradle scaffold and user cells\n      var cradleElements = layoutHandler.elements;\n      var cradleContent = _this.content,\n        modelcontentlist = cradleContent.cradleModelComponents || [];\n      var oldCradleReferenceIndex = ((_a = modelcontentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index) || 0;\n      // --------------------------------[ 3. Calculate shifts ]-------------------------------\n      // cradle properties\n      var _ref6 = (0, contentfunctions_1.calculateShiftSpecs)({\n          shiftinstruction: shiftinstruction,\n          triggerViewportReferencePos: triggerViewportReferencePos,\n          scrollPos: scrollPos,\n          scrollblockElement: viewportElement.firstChild,\n          cradleInheritedProperties: cradleInheritedProperties,\n          cradleInternalProperties: cradleInternalProperties,\n          cradleContent: cradleContent,\n          cradleElements: cradleElements\n        }),\n        cradleItemShift = _ref6.cradleReferenceItemShift,\n        axisReferenceIndex = _ref6.newAxisReferenceIndex,\n        axisItemShift = _ref6.axisReferenceItemShift,\n        cradleContentCount = _ref6.newCradleContentCount,\n        listStartChangeCount = _ref6.listStartChangeCount,\n        listEndChangeCount = _ref6.listEndChangeCount,\n        newAxisViewportPixelOffset = _ref6.newAxisViewportPixelOffset;\n      var axisViewportPixelOffset = newAxisViewportPixelOffset;\n      var cradlePositionData = layoutHandler.cradlePositionData;\n      var isShift = !(axisItemShift == 0 && cradleItemShift == 0);\n      var axisElement = cradleElements.axisRef.current;\n      var headElement = cradleElements.headRef.current;\n      // the triggerlines will be moved, so disconnect them from their observer.\n      // they are reconnected with \'renderupdatedcontent\' state in cradle.tsx, or at \'finishupdateforvariability\'\n      //    for variable content\n      interruptHandler.triggerlinesIntersect.disconnect();\n      // abandon option; nothing to do but reposition\n      if (!isShift) {\n        // can happen first row; oversized last row\n        cradlePositionData.targetAxisViewportPixelOffset = axisViewportPixelOffset;\n        _this.applyStyling({\n          layout: layout,\n          orientation: orientation,\n          padding: padding,\n          gap: gap,\n          cellHeight: cellHeight,\n          cellWidth: cellWidth,\n          crosscount: crosscount,\n          axisReferenceIndex: axisReferenceIndex,\n          axisViewportPixelOffset: axisViewportPixelOffset,\n          scrollPos: scrollPos,\n          headcontent: cradleContent.headModelComponents,\n          axisElement: axisElement,\n          headElement: headElement\n        });\n        return;\n      }\n      // ----------------------------------[ 4. reconfigure cradle content ]--------------------------\n      // collect changed content\n      var updatedContentList,\n        deletedContentItems = [];\n      if (listStartChangeCount || listEndChangeCount) {\n        // if either is non-0 then modify content\n        var _ref7 = (0, contentfunctions_1.getCellFrameComponentList)({\n          cacheAPI: cacheAPI,\n          cradleInheritedProperties: cradleInheritedProperties,\n          cradleInternalProperties: cradleInternalProperties,\n          cradleContentCount: cradleContentCount,\n          workingContentList: modelcontentlist,\n          listStartChangeCount: listStartChangeCount,\n          listEndChangeCount: listEndChangeCount,\n          cradleReferenceIndex: oldCradleReferenceIndex,\n          instanceIdCounterRef: _this.instanceIdCounterRef,\n          styles: styles,\n          placeholderMessages: placeholderMessages\n        });\n        var _ref8 = _slicedToArray(_ref7, 2);\n        updatedContentList = _ref8[0];\n        deletedContentItems = _ref8[1];\n      } else {\n        updatedContentList = modelcontentlist;\n      }\n      if (deletedContentItems.length && cache == \'cradle\') {\n        var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n        var dListCallback;\n        if (deleteListCallback) {\n          dListCallback = function dListCallback(deleteList) {\n            deleteListCallback(\'pare cache to cradle\', deleteList);\n          };\n        }\n        (0, contentfunctions_1.deletePortals)(cacheAPI, deletedContentItems, dListCallback);\n      }\n      // ----------------------------------[ 5. allocate cradle content ]--------------------------\n      var _ref9 = (0, contentfunctions_1.allocateContentList)({\n          contentlist: updatedContentList,\n          axisReferenceIndex: axisReferenceIndex,\n          layoutHandler: layoutHandler\n        }),\n        _ref10 = _slicedToArray(_ref9, 2),\n        headcontent = _ref10[0],\n        tailcontent = _ref10[1];\n      cradleContent.cradleModelComponents = updatedContentList;\n      cradleContent.headModelComponents = headcontent;\n      cradleContent.tailModelComponents = tailcontent;\n      if (serviceHandler.callbacks.referenceIndexCallback) {\n        var cstate = stateHandler.cradleStateRef.current;\n        serviceHandler.callbacks.referenceIndexCallback(axisReferenceIndex, \'updateCradleContent\', cstate);\n      }\n      // -------------------------------[ 6. css changes ]-------------------------\n      cradlePositionData.targetAxisReferenceIndex = axisReferenceIndex;\n      cradlePositionData.targetAxisViewportPixelOffset = axisViewportPixelOffset;\n      if (isShift) cacheAPI.renderPortalLists();\n      _this.applyStyling({\n        layout: layout,\n        orientation: orientation,\n        padding: padding,\n        gap: gap,\n        cellHeight: cellHeight,\n        cellWidth: cellWidth,\n        crosscount: crosscount,\n        axisReferenceIndex: axisReferenceIndex,\n        axisViewportPixelOffset: axisViewportPixelOffset,\n        scrollPos: scrollPos,\n        headcontent: headcontent,\n        axisElement: axisElement,\n        headElement: headElement\n      });\n      // load new display data\n      cradleContent.headDisplayComponents = cradleContent.headModelComponents;\n      cradleContent.tailDisplayComponents = cradleContent.tailModelComponents;\n    };\n    // move the offset of the axis\n    this.applyStyling = function (_ref11) {\n      var layout = _ref11.layout,\n        orientation = _ref11.orientation,\n        padding = _ref11.padding,\n        gap = _ref11.gap,\n        cellHeight = _ref11.cellHeight,\n        cellWidth = _ref11.cellWidth,\n        crosscount = _ref11.crosscount,\n        axisReferenceIndex = _ref11.axisReferenceIndex,\n        axisViewportPixelOffset = _ref11.axisViewportPixelOffset,\n        scrollPos = _ref11.scrollPos,\n        headcontent = _ref11.headcontent,\n        axisElement = _ref11.axisElement,\n        headElement = _ref11.headElement;\n      if (layout == \'variable\') return;\n      // --------------\n      // Safari when zoomed drifts (calc precision one presumes). This is a hack to correct that.\n      var preAxisRows = Math.ceil(axisReferenceIndex / crosscount);\n      var baseCellLength = (orientation == \'vertical\' ? cellHeight : cellWidth) + gap;\n      var testScrollPos = baseCellLength * preAxisRows + padding - axisViewportPixelOffset;\n      var scrollDiff = testScrollPos - scrollPos;\n      if (scrollDiff) {\n        axisViewportPixelOffset += scrollDiff;\n      }\n      // --------------\n      var topPos, leftPos; // available for debug\n      if (orientation == \'vertical\') {\n        topPos = scrollPos + axisViewportPixelOffset;\n        axisElement.style.top = topPos + \'px\';\n        axisElement.style.left = \'auto\';\n        headElement.style.padding = headcontent.length ? "".concat(padding, "px ").concat(padding, "px ").concat(gap, "px ").concat(padding, "px") : "".concat(padding, "px ").concat(padding, "px 0px ").concat(padding, "px");\n      } else {\n        // \'horizontal\'\n        leftPos = scrollPos + axisViewportPixelOffset;\n        axisElement.style.top = \'auto\';\n        axisElement.style.left = leftPos + \'px\';\n        headElement.style.padding = headcontent.length ? "".concat(padding, "px ").concat(gap, "px ").concat(padding, "px ").concat(padding, "px") : "".concat(padding, "px 0px ").concat(padding, "px ").concat(padding, "px");\n      }\n    };\n    // ===================[ RECONFIGURE THE SCROLLBLOCK FOR VARIABLE CONTENT ]=======================\n    /*\n        blockScrollPos is the amount the scrollBlock is scrolled to reveal the centre of the Cradle\n            at the edge of the Viewport\n        \n        newAxisScrollblockOffset is the exact offset of blockScrollPos, plus the axisViewportOffset\n        \n        axisViewportOffset is the amount the axis is ahead of the Viewport edge\n        \n        the length of the Scrollblock is shortened by the amount the measured tail length differs from the\n            base tail length\n    \n        Called for variable layout only. All DOM elements should have been rendered at this point\n        sets CSS: scrollblockElement top and height (or left and width), and axisElement top (or left)\n        to get closer to natural proportions to minimize janky scroll thumb\n    */\n    this.adjustScrollblockForVariability = function (source) {\n      // ----------------------[ setup base values and references ]------------------------\n      // resources...\n      var cradleParameters = _this.cradleParameters,\n        cradleHandlers = cradleParameters.handlersRef.current,\n        ViewportContextProperties = cradleParameters.ViewportContextPropertiesRef.current,\n        cradleInheritedProperties = cradleParameters.cradleInheritedPropertiesRef.current,\n        cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n      var layoutHandler = cradleHandlers.layoutHandler,\n        scrollHandler = cradleHandlers.scrollHandler,\n        interruptHandler = cradleHandlers.interruptHandler;\n      var cradleElements = layoutHandler.elements,\n        cradlePositionData = layoutHandler.cradlePositionData;\n      // element references...\n      var viewportElement = ViewportContextProperties.elementRef.current,\n        scrollblockElement = viewportElement.firstChild,\n        headGridElement = cradleElements.headRef.current,\n        tailGridElement = cradleElements.tailRef.current,\n        axisElement = cradleElements.axisRef.current;\n      // current configurations...\n      var axisReferenceIndex = cradlePositionData.targetAxisReferenceIndex,\n        axisViewportOffset = cradlePositionData.targetAxisViewportPixelOffset;\n      var orientation = cradleInheritedProperties.orientation,\n        gap = cradleInheritedProperties.gap,\n        padding = cradleInheritedProperties.padding,\n        cellHeight = cradleInheritedProperties.cellHeight,\n        cellWidth = cradleInheritedProperties.cellWidth;\n      var crosscount = cradleInternalProperties.crosscount,\n        listRowcount = cradleInternalProperties.listRowcount;\n      // ------------------------[ precursor calculations ]------------------------\n      // rowcounts and row offsets for positioning\n      // listRowcount taken from internal properties above\n      var headRowCount = Math.ceil(headGridElement.childNodes.length / crosscount),\n        tailRowCount = Math.ceil(tailGridElement.childNodes.length / crosscount);\n      // reference rows - cradle first/last; axis; list end\n      var axisReferenceRow = Math.ceil(axisReferenceIndex / crosscount),\n        cradleReferenceRow = axisReferenceRow - headRowCount,\n        cradleLastRow = axisReferenceRow + (tailRowCount - 1),\n        listLastRow = listRowcount - 1;\n      var preCradleRowCount = cradleReferenceRow,\n        postCradleRowCount = listLastRow - cradleLastRow;\n      // base pixel values\n      var baseCellLength = (orientation == \'vertical\' ? cellHeight : cellWidth) + gap;\n      var measuredTailLength = orientation == \'vertical\' ? tailGridElement.offsetHeight : tailGridElement.offsetWidth;\n      var basePostCradlePixelLength = postCradleRowCount * baseCellLength;\n      var computedPostAxisPixelLength = basePostCradlePixelLength + measuredTailLength;\n      // base figures used for preAxis #s for compatibility with repositioning, which uses base figures\n      var basePreAxisPixelLength = (preCradleRowCount + headRowCount) * baseCellLength + padding;\n      // ------------------------[ layout adjustments ]----------------------\n      interruptHandler.signals.pauseCradleIntersectionObserver = true;\n      var computedScrollblockLength = basePreAxisPixelLength + computedPostAxisPixelLength;\n      var blockScrollPos = basePreAxisPixelLength - axisViewportOffset;\n      var newAxisScrollblockOffset = blockScrollPos + axisViewportOffset; // ie. basePreAxisPixelLength, but semantics\n      if (orientation == \'vertical\') {\n        axisElement.style.top = newAxisScrollblockOffset + \'px\';\n        scrollblockElement.style.height = computedScrollblockLength + \'px\';\n      } else {\n        // \'horizontal\'\n        axisElement.style.left = newAxisScrollblockOffset + \'px\';\n        scrollblockElement.style.width = computedScrollblockLength + \'px\';\n      }\n      // -----------------------[ scrollPos adjustment ]-------------------------\n      if (orientation == \'vertical\') {\n        headGridElement.style.padding = headRowCount ? "".concat(padding, "px ").concat(padding, "px ").concat(gap, "px ").concat(padding, "px") : "".concat(padding, "px ").concat(padding, "px 0px ").concat(padding, "px");\n      } else {\n        headGridElement.style.padding = headRowCount ? "".concat(padding, "px ").concat(gap, "px ").concat(padding, "px ").concat(padding, "px") : "".concat(padding, "px 0px ").concat(padding, "px ").concat(padding, "px");\n      }\n      if (!(0, InfiniteGridScroller_1.isSafariIOS)()) {\n        // adjust blockScrollPos directly - most browsers including Safari desktop\n        cradlePositionData.blockScrollPos = blockScrollPos;\n        viewportElement[cradlePositionData.blockScrollProperty] = blockScrollPos;\n        scrollHandler.resetScrollData(blockScrollPos);\n      } else {\n        // for Safari iOS\n        // temporarily adjust scrollblockElement offset; iOSonAfterScroll transfers shift to blockScrollPos\n        // - direct change of scrollTop/ScrollLeft in Safari iOS is ignored by the browser momentum engine\n        var startingScrollPos = orientation == \'vertical\' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n        var scrollDiff = blockScrollPos - startingScrollPos;\n        if (orientation == \'vertical\') {\n          scrollblockElement.style.top = -scrollDiff + \'px\';\n        } else {\n          scrollblockElement.style.left = -scrollDiff + \'px\';\n        }\n      }\n      // check for gotoIndex or resize overshoot\n      if (source == \'setcradle\' && !postCradleRowCount) {\n        var viewportLength = orientation == \'vertical\' ? viewportElement.offsetHeight : viewportElement.offsetWidth;\n        var alignedEndPosDiff = axisViewportOffset + measuredTailLength - viewportLength;\n        if (alignedEndPosDiff < 0) {\n          // fill the bottom of the viewport using scrollBy\n          var scrollByY = orientation == \'vertical\' ? alignedEndPosDiff : 0;\n          var scrollByX = orientation == \'vertical\' ? 0 : alignedEndPosDiff;\n          viewportElement.scrollBy(scrollByX, scrollByY);\n        }\n      }\n    };\n    // ========================= [ INTERNAL CONTENT MANAGEMENT SERVICES ]=====================\n    this.guardAgainstRunawayCaching = function () {\n      var _this$cradleParameter2 = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n        cacheMax = _this$cradleParameter2.cacheMax,\n        MAX_CACHE_OVER_RUN = _this$cradleParameter2.MAX_CACHE_OVER_RUN;\n      var cacheAPI = _this.cradleParameters.handlersRef.current.cacheAPI;\n      var modelComponentList = _this.content.cradleModelComponents;\n      if (cacheAPI.guardAgainstRunawayCaching(cacheMax, modelComponentList.length, MAX_CACHE_OVER_RUN)) {\n        _this.pareCacheToMax();\n      }\n    };\n    this.pareCacheToMax = function () {\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var cache = cradleInheritedProperties.cache,\n        scrollerID = cradleInheritedProperties.scrollerID;\n      if (cache == \'keepload\') {\n        var cradleHandlers = _this.cradleParameters.handlersRef.current;\n        var cacheAPI = cradleHandlers.cacheAPI,\n          serviceHandler = cradleHandlers.serviceHandler;\n        var modelIndexList = _this.getModelIndexList();\n        var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n        var dListCallback;\n        if (deleteListCallback) {\n          dListCallback = function dListCallback(deleteList) {\n            deleteListCallback(\'pare cache to cacheMax\', deleteList);\n          };\n        }\n        if (cacheAPI.pareCacheToMax(cradleInheritedProperties.cacheMax, modelIndexList, dListCallback)) {\n          cacheAPI.renderPortalLists();\n        }\n      }\n    };\n    // ==========================[ EXTERNAL SERVICE SUPPORT ]=======================\n    // supports clearCache\n    this.clearCradle = function () {\n      var cradleContent = _this.content;\n      // const { cacheAPI } = this.cradleParameters.handlersRef.current\n      cradleContent.cradleModelComponents = [];\n      cradleContent.headModelComponents = [];\n      cradleContent.tailModelComponents = [];\n    };\n    this.cradleParameters = cradleParameters;\n  }\n  // called from serviceHandler getCradleIndexMap\n  // also supports pareCacheToMax, matchCacheToCradle\n  _createClass(ContentHandler, [{\n    key: "getModelIndexList",\n    value: function getModelIndexList() {\n      var cradleModelComponents = this.content.cradleModelComponents;\n      if (!cradleModelComponents) {\n        return [];\n      } else {\n        return cradleModelComponents.map(function (item) {\n          return item.props.index;\n        });\n      }\n    }\n  }, {\n    key: "indexSpan",\n    get: function get() {\n      var cradleModelComponents = this.content.cradleModelComponents;\n      if (cradleModelComponents.length == 0) return [];\n      var lowIndex = cradleModelComponents[0].props.index;\n      var highIndex = lowIndex + (cradleModelComponents.length - 1);\n      return [lowIndex, highIndex];\n    }\n    // called from service handler\'s remapIndexes, as last step\n  }, {\n    key: "reconcileCellFrames",\n    value: function reconcileCellFrames(modifiedIndexesList) {\n      if (!modifiedIndexesList.length) return;\n      var cradleModelComponents = this.content.cradleModelComponents;\n      var cacheAPI = this.cradleParameters.handlersRef.current.cacheAPI;\n      // const { indexToItemIDMap } = cacheAPI.cacheProps\n      var indexToItemIDMap = cacheAPI.indexToItemIDMap;\n      function processComponentFn(component, i, array) {\n        var _component$props = component.props,\n          index = _component$props.index,\n          itemID = _component$props.itemID;\n        if (modifiedIndexesList.includes(index)) {\n          var newItemID = indexToItemIDMap.has(index) ? indexToItemIDMap.get(index) : cacheAPI.getNewItemID();\n          if (newItemID != itemID) {\n            // defensive; shouldn\'t happen\n            array[i] = react_1["default"].cloneElement(component, {\n              itemID: newItemID\n            });\n          }\n        }\n      }\n      cradleModelComponents.forEach(processComponentFn);\n      this.content.headModelComponents = cradleModelComponents.slice(0, this.content.headModelComponents.length);\n      this.content.tailModelComponents = cradleModelComponents.slice(this.content.headModelComponents.length);\n    }\n    // supports moveIndex and insertRemoveIndex, updates cradle contiguous items from startChangeIndex or start of cradle\n  }, {\n    key: "synchronizeCradleItemIDsToCache",\n    value: function synchronizeCradleItemIDsToCache(updatedIndexList) {\n      var isInsertRemove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var startChangeIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      // asssemble resources\n      var cacheAPI = this.cradleParameters.handlersRef.current.cacheAPI;\n      // const { indexToItemIDMap } = cacheAPI.cacheProps\n      var indexToItemIDMap = cacheAPI.indexToItemIDMap;\n      var cradleModelComponents = this.content.cradleModelComponents;\n      // assemble parameters\n      var indexSpan = this.indexSpan;\n      if (indexSpan.length == 0) return; // defensive; shouldn\'t be here\n      var _indexSpan = _slicedToArray(indexSpan, 2),\n        lowSpan = _indexSpan[0],\n        highSpan = _indexSpan[1];\n      var startIndex, endIndex;\n      if (isInsertRemove) {\n        if (startChangeIndex > highSpan) return;\n        startIndex = startChangeIndex;\n        endIndex = highSpan;\n      } else {\n        // move\n        if (updatedIndexList.length == 0) return;\n        startIndex = updatedIndexList[0];\n        endIndex = updatedIndexList.at(-1);\n      }\n      var updatedSpan = endIndex - startIndex + 1;\n      var firstIndex = startIndex;\n      if (firstIndex > highSpan) return;\n      if (firstIndex < lowSpan) firstIndex = lowSpan;\n      var lowPtr = firstIndex - lowSpan;\n      var highPtr = isInsertRemove ? cradleModelComponents.length - 1 : Math.min(cradleModelComponents.length - 1, lowPtr + updatedSpan - 1);\n      // function to update individual cradle components to cache changes\n      function processcomponentFn(component, componentptr, componentarray) {\n        var index = component.props.index;\n        var cacheItemID = indexToItemIDMap.get(index);\n        // if cache has no component for cradle item, then get one\n        if (cacheItemID === undefined) {\n          var newItemID = cacheAPI.getNewItemID();\n          componentarray[componentptr] = react_1["default"].cloneElement(component, {\n            itemID: newItemID\n          });\n          return;\n        } else {\n          // match cache itemID to cradle component itemID\n          var cradleItemID = component.props.itemID;\n          var updateptr = updatedIndexList.indexOf(index); // TODO verify need for updatelist\n          if (updateptr != -1) {\n            // update list confirms there is a cache item for this index\n            if (cacheItemID == cradleItemID) return;\n            componentarray[componentptr] = react_1["default"].cloneElement(component, {\n              itemID: cacheItemID\n            });\n          } else {\n            var _newItemID = cacheAPI.getNewItemID();\n            componentarray[componentptr] = react_1["default"].cloneElement(component, {\n              itemID: _newItemID\n            });\n          }\n        }\n      }\n      for (var ptr = lowPtr; ptr <= highPtr; ptr++) {\n        processcomponentFn(cradleModelComponents[ptr], ptr, cradleModelComponents);\n      }\n    }\n    // supports insertRemoveIndex\n  }, {\n    key: "createNewItemIDs",\n    value: function createNewItemIDs(newList) {\n      if (!newList.length) return;\n      var cacheAPI = this.cradleParameters.handlersRef.current.cacheAPI;\n      var cradleModelComponents = this.content.cradleModelComponents;\n      var indexSpan = this.indexSpan;\n      if (indexSpan.length == 0) return; // defensive\n      var _indexSpan2 = _slicedToArray(indexSpan, 2),\n        lowSpan = _indexSpan2[0],\n        highSpan = _indexSpan2[1];\n      function processcomponentFn(newlistindex) {\n        if (newlistindex < lowSpan || newlistindex > highSpan) return; // defensive\n        var cradlePtr = newlistindex - lowSpan;\n        var component = cradleModelComponents[cradlePtr];\n        var newItemID = cacheAPI.getNewItemID();\n        cradleModelComponents[cradlePtr] = react_1["default"].cloneElement(component, {\n          itemID: newItemID\n        });\n      }\n      // cradleModelComponents.forEach(processcomponentFn)\n      newList.forEach(processcomponentFn);\n    }\n  }]);\n  return ContentHandler;\n}();\nexports["default"] = ContentHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contenthandler.tsx\n')},"./src/cradle/interrupthandler.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\n// interrupthandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    This module holds the callbacks for the Cradle structure listeners:\n    - cradleIntersectionObserverCallback: responds to the move of both cradle grids outside viewport\n        this initiates the repositioning protocol\n    - axisTriggerlinesObserverCallback: responds to crossing of tailward or headward triggerlines\n        in relation to the viewport, and triggers rollover and re-allocation of cradle content\n\n    viewportResizing interrupts are handled by viewport\n*/\nvar contentfunctions_1 = __webpack_require__(/*! ./contentfunctions */ "./src/cradle/contentfunctions.tsx");\nvar InterruptHandler = /*#__PURE__*/_createClass(function InterruptHandler(cradleParameters) {\n  var _this = this;\n  _classCallCheck(this, InterruptHandler);\n  this.isHeadCradleInView = true;\n  this.isTailCradleInView = true;\n  this.axisTriggerlinesObserverCallback = function (entries) {\n    var _a;\n    if (_this.signals.pauseTriggerlinesObserver) {\n      return;\n    }\n    var testrootbounds = entries[0].rootBounds;\n    if (testrootbounds.width == 0 && testrootbounds.height == 0) {\n      // reparenting\n      return;\n    }\n    var _this$cradleParameter = _this.cradleParameters.handlersRef.current,\n      contentHandler = _this$cradleParameter.contentHandler,\n      stateHandler = _this$cradleParameter.stateHandler,\n      scrollHandler = _this$cradleParameter.scrollHandler,\n      layoutHandler = _this$cradleParameter.layoutHandler;\n    if (stateHandler.isMountedRef.current) {\n      var scrollData = scrollHandler.scrollData;\n      scrollData.previousupdate = scrollData.currentupdate;\n      scrollData.currentupdate = scrollData.current;\n      var viewportElement = _this.cradleParameters.ViewportContextPropertiesRef.current.elementRef.current;\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n        cradleInternalProperties = _this.cradleParameters.cradleInternalPropertiesRef.current;\n      var orientation = cradleInheritedProperties.orientation;\n      var triggerHistoryRef = cradleInternalProperties.triggerHistoryRef,\n        listsize = cradleInternalProperties.listsize,\n        crosscount = cradleInternalProperties.crosscount;\n      var scrollPos = orientation == \'vertical\' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n      var contentLength = orientation == \'vertical\' ? viewportElement.scrollHeight : viewportElement.scrollWidth;\n      var viewportLength = orientation == \'vertical\' ? viewportElement.offsetHeight : viewportElement.offsetWidth;\n      // for browser top or bottom bounce\n      // fractional pixels can cause this to fail, hence Math.floor)\n      if (scrollPos >= 0 || Math.floor(scrollPos + viewportLength) <= contentLength) {\n        var viewportBoundingRect = viewportElement.getBoundingClientRect();\n        var _ref = (0, contentfunctions_1.calculateShiftInstruction)({\n            scrollerID: cradleInheritedProperties.scrollerID,\n            orientation: orientation,\n            triggerlineEntries: entries,\n            triggerlineSpan: layoutHandler.triggerlineSpan,\n            isFirstRowTriggerConfig: layoutHandler.triggercellIsInTail,\n            viewportBoundingRect: viewportBoundingRect,\n            triggerHistoryRef: triggerHistoryRef\n          }),\n          _ref2 = _slicedToArray(_ref, 2),\n          shiftinstruction = _ref2[0],\n          triggerViewportReferencePos = _ref2[1];\n        if (shiftinstruction == \'moveaxistailward\') {\n          // filter out oversize last row\n          var lastListRowOffset = Math.ceil(listsize / crosscount) - 1;\n          var tailcontentlist = contentHandler.content.tailModelComponents;\n          var previousAxisReferenceIndex = ((_a = tailcontentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index) || 0;\n          var previousAxisRowOffset = Math.ceil(previousAxisReferenceIndex / crosscount);\n          if (lastListRowOffset == previousAxisRowOffset) return;\n        }\n        // none == nothing to do\n        if (shiftinstruction != \'none\') {\n          _this.shiftinstruction = shiftinstruction;\n          _this.triggerViewportReferencePos = triggerViewportReferencePos;\n          stateHandler.setCradleState(\'renderupdatedcontent\');\n        }\n      }\n    }\n  };\n  this.cradleIntersectionObserverCallback = function (entries) {\n    var signals = _this.signals;\n    var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n      stateHandler = _this$cradleParameter2.stateHandler,\n      serviceHandler = _this$cradleParameter2.serviceHandler,\n      scrollHandler = _this$cradleParameter2.scrollHandler,\n      layoutHandler = _this$cradleParameter2.layoutHandler;\n    if (signals.pauseCradleIntersectionObserver) {\n      return;\n    }\n    for (var i = 0; i < entries.length; i++) {\n      var entry = entries[i];\n      if (entry.target.dataset.type == \'head\') {\n        _this.isHeadCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n        ;\n      } else {\n        _this.isTailCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n        ;\n      }\n    }\n\n    _this.signals.repositioningRequired = !_this.isHeadCradleInView && !_this.isTailCradleInView;\n    var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n    if (_this.signals.repositioningRequired)\n      // start reposition if no other interrupts are underway\n      {\n        _this.isHeadCradleInView = true;\n        _this.isTailCradleInView = true;\n        var cradleState = stateHandler.cradleStateRef.current;\n        if (![\'repositioningRender\', \'repositioningContinuation\', \'finishreposition\', \'renderupdatedcontent\', \'finishupdatedcontent\', \'finishviewportresize\'].includes(cradleState) && !ViewportContextProperties.isResizing) {\n          var viewportElement = ViewportContextProperties.elementRef.current;\n          var _this$cradleParameter3 = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n            scrollerID = _this$cradleParameter3.scrollerID,\n            layout = _this$cradleParameter3.layout;\n          if (!viewportElement) {\n            console.log(\'SYSTEM: viewport element not set in cradleIntersectionObserverCallback\', scrollerID, ViewportContextProperties);\n            return;\n          }\n          // update dimensions with cradle intersection. See also dimension update in viewport.tsx for resize\n          // and getViewportDimensions in Cradle for width/height\n          var rect = viewportElement.getBoundingClientRect();\n          var top = rect.top,\n            right = rect.right,\n            bottom = rect.bottom,\n            left = rect.left;\n          var width = right - left,\n            height = bottom - top;\n          // update for scrolltracker\n          ViewportContextProperties.viewportDimensions = {\n            top: top,\n            right: right,\n            bottom: bottom,\n            left: left,\n            width: width,\n            height: height\n          };\n          var repositioningFlagCallback = serviceHandler.callbacks.repositioningFlagCallback;\n          repositioningFlagCallback && repositioningFlagCallback(true);\n          if (layout == \'variable\') {\n            // restore base config to scrollblock\n            layoutHandler.restoreBaseScrollblockConfig();\n            scrollHandler.calcImpliedRepositioningData(\'restoreBaseScrollblockConfig\');\n          }\n          _this.signals.pauseTriggerlinesObserver = true;\n          if (stateHandler.isMountedRef.current) stateHandler.setCradleState(\'startreposition\');\n        } else {\n          _this.signals.repositioningRequired = false;\n        }\n      }\n  };\n  this.cradleIntersect = {\n    observer: null,\n    callback: this.cradleIntersectionObserverCallback,\n    disconnected: true,\n    connectElements: function connectElements() {\n      if (!_this.cradleIntersect.disconnected) {\n        return;\n      }\n      var observer = _this.cradleIntersect.observer;\n      var cradleElements = _this.cradleParameters.handlersRef.current.layoutHandler.elements;\n      observer.observe(cradleElements.headRef.current);\n      observer.observe(cradleElements.tailRef.current);\n      _this.cradleIntersect.disconnected = false;\n    },\n    disconnect: function disconnect() {\n      _this.cradleIntersect.observer.disconnect();\n      _this.cradleIntersect.disconnected = true;\n    },\n    createObserver: function createObserver() {\n      var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n      _this.cradleIntersect.observer = new IntersectionObserver(_this.cradleIntersect.callback, {\n        root: ViewportContextProperties.elementRef.current,\n        threshold: 0\n      });\n      return _this.cradleIntersect.observer;\n    }\n  };\n  this.triggerlinesIntersect = {\n    observer: null,\n    callback: this.axisTriggerlinesObserverCallback,\n    disconnected: true,\n    connectElements: function connectElements() {\n      if (!_this.triggerlinesIntersect.disconnected) {\n        return;\n      }\n      var observer = _this.triggerlinesIntersect.observer;\n      var cradleElements = _this.cradleParameters.handlersRef.current.layoutHandler.elements;\n      if (cradleElements.triggercellTriggerlineHeadRef.current && cradleElements.triggercellTriggerlineTailRef.current) {\n        observer.observe(cradleElements.triggercellTriggerlineHeadRef.current);\n        observer.observe(cradleElements.triggercellTriggerlineTailRef.current);\n      }\n      _this.triggerlinesIntersect.disconnected = false;\n    },\n    disconnect: function disconnect() {\n      _this.triggerlinesIntersect.observer.disconnect();\n      _this.triggerlinesIntersect.disconnected = true;\n    },\n    createObserver: function createObserver() {\n      var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n      _this.triggerlinesIntersect.observer = new IntersectionObserver(_this.triggerlinesIntersect.callback, {\n        root: ViewportContextProperties.elementRef.current,\n        threshold: 0\n      });\n      return _this.triggerlinesIntersect.observer;\n    }\n  };\n  this.signals = {\n    repositioningRequired: false,\n    pauseTriggerlinesObserver: false,\n    pauseCradleIntersectionObserver: false,\n    pauseCradleResizeObserver: false,\n    pauseScrollingEffects: false\n  };\n  /*\n      invoked for\n      cradle:\n      - change into cache\n      - trigger cradleresizing\n      - trigger reconfiguration\n      - trigger pivot\n      servicehandler:\n      - call reload\n  */\n  this.pauseInterrupts = function () {\n    var signals = _this.signals;\n    signals.pauseTriggerlinesObserver = true;\n    signals.pauseCradleIntersectionObserver = true;\n    signals.pauseCradleResizeObserver = true;\n    signals.pauseScrollingEffects = true;\n  };\n  /*\n      invoked for\n      cradle:\n      - restoreinterrupts\n  */\n  this.restoreInterrupts = function () {\n    var signals = _this.signals;\n    signals.pauseTriggerlinesObserver = false;\n    signals.pauseCradleIntersectionObserver = false;\n    signals.pauseCradleResizeObserver = false;\n    signals.pauseScrollingEffects = false;\n  };\n  this.cradleParameters = cradleParameters;\n});\nexports["default"] = InterruptHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/interrupthandler.tsx\n')},"./src/cradle/layouthandler.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\n// layouthandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    This module holds references to\n    - the structural elements of the cradle\n    - the key control values of the cradle\n\n    The structural elements are the axis, head (grid), tail (grid),\n        and the head and tail triggerlines\n    The key control values are the blockScrollPos & blockXScrollPos (scrollTop or scrollLeft), the block scroll\n        property ("scrollTop" or "scrollLeft"), the targetAxisReferenceIndex (first index of the\n        tail block), and the targetAxisViewportPixelOffset (pixels offset from the edge of the\n        viewport)\n*/\nvar InfiniteGridScroller_1 = __webpack_require__(/*! ../InfiniteGridScroller */ "./src/InfiniteGridScroller.tsx");\nvar LayoutHandler = /*#__PURE__*/function () {\n  function LayoutHandler(cradleParameters) {\n    var _this = this;\n    _classCallCheck(this, LayoutHandler);\n    // cradlePositionData controls the relative positions of the scaffold elements\n    this.cradlePositionData = {\n      /*\n          "block" = cradleblock, which is the element that is scrolled\n               blockScrollPos is set by scrollHandler during and after scrolling,\n          and by setCradleContent in contentHandler, which repositions the cradle.\n               blockScrollPos is used by\n              - cradle initialization in response to reparenting interrupt\n              - setCradleContent\n           */\n      blockScrollPos: null,\n      blockXScrollPos: null,\n      /*\n          values can be "scrollTop" or "scrollLeft" (of the viewport element) depending on orientation\n               blockScrollProperty is set by the orientation reconfiguration effect in cradle module.\n               it is used where blockScrollPos is used above.\n      */\n      blockScrollProperty: null,\n      blockXScrollProperty: null,\n      /*\n          targetAxisReferenceIndex is set by\n              - setCradleContent\n              - updateCradleContent\n              - layoutHandler (initialization)\n              - scrollHandler (during and after scroll)\n              - host scrollToIndex call\n               targetAxisReferenceIndex is used by\n              - scrollTrackerArgs in cradle module\n              - requestedAxisReferenceIndex in setCradleContent\n      */\n      targetAxisReferenceIndex: null,\n      /*\n          targetAxisViewportPixelOffset is set by\n              - setCradleContent\n              - updateCradleContent\n              - layoutHandler (initialization)\n              - scrollHandler (during and after scroll)\n              - pivot effect (change of orientation) in cradle module\n               targetAxisViewportPixelOffset is used by\n              - previousAxisOffset in pivot effect\n              - setCradleContent\n           */\n      targetAxisViewportPixelOffset: null // pixels into the viewport\n    };\n    // called by interruptHandler\n    this.restoreBaseScrollblockConfig = function () {\n      var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n      var viewportElement = ViewportContextProperties.elementRef.current;\n      var scrollblockElement = viewportElement.firstChild;\n      var _this$cradleParameter = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n        orientation = _this$cradleParameter.orientation,\n        padding = _this$cradleParameter.padding,\n        gap = _this$cradleParameter.gap,\n        cellHeight = _this$cradleParameter.cellHeight,\n        cellWidth = _this$cradleParameter.cellWidth;\n      var _this$cradleParameter2 = _this.cradleParameters.cradleInternalPropertiesRef.current,\n        listRowcount = _this$cradleParameter2.listRowcount,\n        crosscount = _this$cradleParameter2.crosscount;\n      var _this$cradleParameter3 = _this.cradleParameters.handlersRef.current,\n        scrollHandler = _this$cradleParameter3.scrollHandler,\n        layoutHandler = _this$cradleParameter3.layoutHandler;\n      var cellLength = (orientation == \'vertical\' ? cellHeight : cellWidth) + gap;\n      var baselength = listRowcount * cellLength - gap // final cell has no trailing gap\n      + padding * 2; // leading and trailing padding\n      if (orientation == \'vertical\') {\n        scrollblockElement.style.top = null;\n        scrollblockElement.style.height = baselength + \'px\';\n      } else {\n        scrollblockElement.style.left = null;\n        scrollblockElement.style.width = baselength + \'px\';\n      }\n      var cradlePositionData = layoutHandler.cradlePositionData;\n      var axisReference = cradlePositionData.targetAxisReferenceIndex;\n      var rowOffset = Math.ceil(axisReference / crosscount);\n      var calculatedBlockScrollPos = rowOffset * cellLength + padding;\n      if ((0, InfiniteGridScroller_1.isSafariIOS)()) {\n        // scrollPos overwritten by Safari iOS momentum engine\n        var originalScrollPos = orientation == \'vertical\' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n        var scrollShift = calculatedBlockScrollPos - originalScrollPos;\n        if (orientation == \'vertical\') {\n          scrollblockElement.style.top = scrollShift;\n        } else {\n          scrollblockElement.style.left = scrollShift;\n        }\n      } else {\n        viewportElement[cradlePositionData.blockScrollProperty] = calculatedBlockScrollPos;\n      }\n      cradlePositionData.blockScrollPos = calculatedBlockScrollPos;\n      scrollHandler.resetScrollData(calculatedBlockScrollPos);\n    };\n    this.cradleParameters = cradleParameters;\n    var _cradleParameters$cra = cradleParameters.cradleInternalPropertiesRef.current.cradleElementsRef.current,\n      axisRef = _cradleParameters$cra.axisRef,\n      headRef = _cradleParameters$cra.headRef,\n      tailRef = _cradleParameters$cra.tailRef,\n      triggercellTriggerlineHeadRef = _cradleParameters$cra.triggercellTriggerlineHeadRef,\n      triggercellTriggerlineTailRef = _cradleParameters$cra.triggercellTriggerlineTailRef;\n    this.elements = {\n      axisRef: axisRef,\n      headRef: headRef,\n      tailRef: tailRef,\n      triggercellTriggerlineHeadRef: triggercellTriggerlineHeadRef,\n      triggercellTriggerlineTailRef: triggercellTriggerlineTailRef\n    };\n    var startingIndex = this.cradleParameters.cradleInheritedPropertiesRef.current.startingIndex;\n    var listsize = this.cradleParameters.cradleInternalPropertiesRef.current.listsize;\n    this.cradlePositionData.targetAxisReferenceIndex = Math.min(startingIndex, listsize - 1) || 0;\n    this.cradlePositionData.targetAxisViewportPixelOffset = 0;\n  }\n  _createClass(LayoutHandler, [{\n    key: "triggerlineSpan",\n    get: function get() {\n      var orientation = this.cradleParameters.cradleInheritedPropertiesRef.current.orientation;\n      var span = orientation == \'vertical\' ? this.elements.triggercellTriggerlineTailRef.current.offsetTop - this.elements.triggercellTriggerlineHeadRef.current.offsetTop :\n      // horizontal\n      this.elements.triggercellTriggerlineTailRef.current.offsetLeft - this.elements.triggercellTriggerlineHeadRef.current.offsetLeft;\n      return span;\n    }\n  }]);\n  return LayoutHandler;\n}();\nexports["default"] = LayoutHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/layouthandler.tsx\n')},"./src/cradle/scrollhandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval("\n\n// scrollhandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    This module holds the response to scrolling. It also triggers an onAfterScroll event (after a timeout)\n    It's main job is to maintain records of scrollPos, targetAxisReferenceIndex, and\n        targetAxisViewportPixelOffset\n*/\nvar ScrollHandler = /*#__PURE__*/_createClass(function ScrollHandler(cradleParameters) {\n  var _this = this;\n  _classCallCheck(this, ScrollHandler);\n  this._isIOSscrolling = false;\n  this.iOSonScroll = function () {\n    var signals = _this.cradleParameters.handlersRef.current.interruptHandler.signals;\n    if (signals.pauseScrollingEffects) {\n      return;\n    }\n    if (!_this._isIOSscrolling) {\n      _this._isIOSscrolling = true;\n      _this._onIOSonAfterScrollTimeout = 1000; // iOS sometimes likes to pause before commencing scrolling\n      clearTimeout(_this._onIOSonAfterScrollTimeout);\n      _this._iOSsetTimeoutTimerid = setTimeout(function () {\n        _this._onIOSonAfterScrollTimeout = 250; // back to more responsive once underway\n      }, 900);\n    }\n    var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n    var viewportElement = ViewportContextProperties.elementRef.current;\n    clearTimeout(_this._iOSscrolltimerid);\n    var orientation = _this.cradleParameters.cradleInheritedPropertiesRef.current.orientation;\n    var scrollblockElement = viewportElement.firstChild;\n    var scrollblockLength, viewportLength, blockScrollPos, scrollblockOffset;\n    if (orientation == 'vertical') {\n      scrollblockLength = viewportElement.scrollHeight;\n      viewportLength = viewportElement.offsetHeight;\n      blockScrollPos = viewportElement.scrollTop;\n      scrollblockOffset = scrollblockElement.offsetTop;\n    } else {\n      scrollblockLength = viewportElement.scrollWidth;\n      viewportLength = viewportElement.offsetWidth;\n      blockScrollPos = viewportElement.scrollLeft;\n      scrollblockOffset = scrollblockElement.offsetLeft;\n    }\n    if (blockScrollPos - scrollblockOffset < 0 ||\n    // overshoot start\n    scrollblockLength < blockScrollPos - scrollblockOffset + viewportLength) {\n      // overshoot end\n      _this.iOSonAfterScroll(); // immediate halt and adjust\n    } else {\n      _this._iOSscrolltimerid = setTimeout(function () {\n        _this.iOSonAfterScroll(); // deferred halt and adjust\n      }, _this._onIOSonAfterScrollTimeout);\n    }\n  };\n  this.iOSonAfterScroll = function () {\n    _this._isIOSscrolling = false;\n    var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n    var viewportElement = ViewportContextProperties.elementRef.current;\n    var scrollblockElement = viewportElement.firstChild;\n    var orientation = _this.cradleParameters.cradleInheritedPropertiesRef.current.orientation;\n    var scrollblockOffset = orientation == 'vertical' ? scrollblockElement.offsetTop : scrollblockElement.offsetLeft;\n    var blockScrollPos = orientation == 'vertical' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n    viewportElement.style.overflow = 'hidden';\n    if (orientation == 'vertical') {\n      viewportElement.scrollTop = blockScrollPos - scrollblockOffset;\n      scrollblockElement.style.top = null;\n    } else {\n      // orientation == horizontal\n      viewportElement.scrollLeft = blockScrollPos - scrollblockOffset;\n      scrollblockElement.style.left = null;\n    }\n    viewportElement.style.overflow = 'scroll';\n  };\n  this.scrollData = {\n    start: 0,\n    current: 0,\n    previous: 0,\n    previousupdate: 0,\n    currentupdate: 0\n  };\n  this._scrolltimerid = null;\n  this.isScrolling = false;\n  this.resetScrollData = function (scrollPosition) {\n    var scrollData = _this.scrollData;\n    scrollData.start = scrollData.current = scrollData.previous = scrollData.previousupdate = scrollData.currentupdate = scrollPosition;\n  };\n  this.onScroll = function (e) {\n    var _this$cradleParameter = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n      scrollerID = _this$cradleParameter.scrollerID,\n      ONAFTERSCROLL_TIMEOUT = _this$cradleParameter.ONAFTERSCROLL_TIMEOUT;\n    var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n    // const viewportElement = ViewportContextProperties.elementRef.current\n    var viewportElement = e.currentTarget;\n    var orientation = _this.cradleParameters.cradleInheritedPropertiesRef.current.orientation;\n    var scrollPositionCurrent = orientation == 'vertical' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n    var scrollXPositionCurrent = orientation == 'horizontal' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n    clearTimeout(_this._scrolltimerid);\n    if (viewportElement.clientWidth == 0 && viewportElement.clientHeight == 0) {\n      // in cache\n      return;\n    }\n    if (scrollPositionCurrent < 0) {\n      // for Safari\n      return;\n    }\n    var signals = _this.cradleParameters.handlersRef.current.interruptHandler.signals;\n    if (signals.pauseScrollingEffects) {\n      return;\n    }\n    if (!_this.isScrolling) {\n      _this.isScrolling = true;\n      _this.scrollData.start = scrollPositionCurrent;\n      _this.scrollData.currentupdate = scrollPositionCurrent;\n    }\n    var layoutHandler = _this.cradleParameters.handlersRef.current.layoutHandler;\n    var cradlePositionData = layoutHandler.cradlePositionData;\n    // keep up to date in case of reparenting interrupt\n    cradlePositionData.blockScrollPos = scrollPositionCurrent;\n    cradlePositionData.blockXScrollPos = scrollXPositionCurrent;\n    _this.scrollData.previous = _this.scrollData.current;\n    _this.scrollData.current = scrollPositionCurrent;\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler;\n    var cradleState = stateHandler.cradleStateRef.current;\n    // const { contentHandler, serviceHandler } = this.cradleParameters.handlersRef.current\n    if (!ViewportContextProperties.isResizing) {\n      if (cradleState == 'repositioningRender' || cradleState == 'repositioningContinuation') {\n        _this.calcImpliedRepositioningData('onScroll');\n        if (cradleState == 'repositioningRender') stateHandler.setCradleState('repositioningContinuation');\n      }\n    }\n    _this._scrolltimerid = setTimeout(function () {\n      _this.onAfterScroll();\n    }, ONAFTERSCROLL_TIMEOUT);\n    return false;\n  };\n  this.onAfterScroll = function () {\n    _this.isScrolling = false;\n    var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n      stateHandler = _this$cradleParameter2.stateHandler,\n      contentHandler = _this$cradleParameter2.contentHandler,\n      serviceHandler = _this$cradleParameter2.serviceHandler;\n    // const ViewportContextProperties = this.cradleParameters.ViewportContextPropertiesRef.current,\n    var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    var cradleState = stateHandler.cradleStateRef.current;\n    switch (cradleState) {\n      case 'repositioningRender':\n      case 'repositioningContinuation':\n        {\n          _this.updateBlockScrollPos();\n          var repositioningFlagCallback = serviceHandler.callbacks.repositioningFlagCallback;\n          repositioningFlagCallback && repositioningFlagCallback(false);\n          stateHandler.setCradleState('finishreposition');\n          break;\n        }\n      default:\n        {\n          if (_this.scrollData.start != _this.scrollData.current || _this.scrollData.current != _this.scrollData.previous) {\n            if (stateHandler.isMountedRef.current) {\n              _this.updateReferenceData();\n            }\n          }\n          break;\n        }\n    }\n    var cache = cradleInheritedProperties.cache;\n    if (cache == 'keepload') {\n      contentHandler.pareCacheToMax();\n    }\n  };\n  // after scroll, but not after repositioning\n  this.updateReferenceData = function () {\n    var _this$cradleParameter3 = _this.cradleParameters.handlersRef.current,\n      stateHandler = _this$cradleParameter3.stateHandler,\n      layoutHandler = _this$cradleParameter3.layoutHandler;\n    var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n      ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n    if (!stateHandler.isMountedRef.current) return;\n    var cradleElements = layoutHandler.elements;\n    var axisElement = cradleElements.axisRef.current,\n      viewportElement = ViewportContextProperties.elementRef.current,\n      scrollblockElement = viewportElement.firstChild;\n    var axisViewportPixelOffset;\n    if (cradleProps.orientation == 'vertical') {\n      axisViewportPixelOffset = axisElement.offsetTop + scrollblockElement.offsetTop - viewportElement.scrollTop;\n    } else {\n      axisViewportPixelOffset = axisElement.offsetLeft + scrollblockElement.offsetLeft - viewportElement.scrollLeft;\n    }\n    var cradlePositionData = layoutHandler.cradlePositionData;\n    cradlePositionData.targetAxisViewportPixelOffset = axisViewportPixelOffset;\n    if (!ViewportContextProperties.isResizing) {\n      _this.updateBlockScrollPos();\n    }\n  };\n  // called from finishreposition state change call above\n  // called from updateReferenceData\n  this.updateBlockScrollPos = function () {\n    var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n    var layoutHandler = _this.cradleParameters.handlersRef.current.layoutHandler;\n    var cradlePositionData = layoutHandler.cradlePositionData;\n    var viewportElement = ViewportContextProperties.elementRef.current;\n    if (!(viewportElement.clientWidth == 0 && viewportElement.clientHeight == 0)) {\n      // in cache\n      if (cradleProps.orientation == 'vertical') {\n        cradlePositionData.blockScrollPos = viewportElement.scrollTop;\n        cradlePositionData.blockXScrollPos = viewportElement.scrollLeft;\n      } else {\n        cradlePositionData.blockScrollPos = viewportElement.scrollLeft;\n        cradlePositionData.blockXScrollPos = viewportElement.scrollTop;\n      }\n    }\n  };\n  this.calcImpliedRepositioningData = function (source) {\n    var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current,\n      cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n      cradleConfig = _this.cradleParameters.cradleInternalPropertiesRef.current;\n    var viewportElement = ViewportContextProperties.elementRef.current,\n      scrollblockElement = viewportElement.firstChild;\n    var crosscount = cradleConfig.crosscount,\n      listsize = cradleConfig.listsize,\n      orientation = cradleProps.orientation;\n    var scrollPos, cellLength, scrollblockOffset;\n    if (orientation == 'vertical') {\n      scrollPos = viewportElement.scrollTop;\n      cellLength = cradleProps.cellHeight + cradleProps.gap;\n      scrollblockOffset = scrollblockElement.offsetTop;\n    } else {\n      scrollPos = viewportElement.scrollLeft;\n      cellLength = cradleProps.cellWidth + cradleProps.gap;\n      scrollblockOffset = scrollblockElement.offsetLeft;\n    }\n    var axisPixelOffset = cellLength - (scrollPos + scrollblockOffset) % cellLength;\n    if (axisPixelOffset == cellLength + cradleProps.padding) {\n      axisPixelOffset = 0;\n    }\n    var axisRowIndex = Math.ceil((scrollPos - cradleProps.padding) / cellLength);\n    var axisReferenceIndex = axisRowIndex * crosscount;\n    axisReferenceIndex = Math.min(axisReferenceIndex, listsize - 1);\n    var diff = axisReferenceIndex % crosscount;\n    axisReferenceIndex -= diff;\n    if (axisReferenceIndex == 0) axisPixelOffset = 0; // defensive\n    var cradlePositionData = _this.cradleParameters.handlersRef.current.layoutHandler.cradlePositionData;\n    cradlePositionData.targetAxisReferenceIndex = axisReferenceIndex;\n    cradlePositionData.targetAxisViewportPixelOffset = axisPixelOffset;\n  };\n  this.cradleParameters = cradleParameters;\n});\nexports[\"default\"] = ScrollHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/scrollhandler.tsx\n")},"./src/cradle/servicehandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval('\n\n// servicehandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    This module fields service requests from the host. There are two forms\n    - streaming from the scroller to the host\n    - function calls from the user to the scroller\n\n    For the list of data streams, see the constructor.\n\n    The function calls avaiable to the host are:\n\n        scrollToIndex,\n        reload,\n        setListsize,\n        clearCache,\n\n        getCacheIndexMap,\n        getCacheItemMap,\n        getCradleIndexMap,\n\n        insertIndex,\n        removeIndex,\n        moveIndex,\n        remapIndexes,\n    \n    The functions listed are defined in this module.\n\n    There are important supporting functions for these in cacheAPI and contentHandler. stateHandler is\n    often invoked by service functions to change Cradle state upon servicing requests.\n*/\nvar isBlank = function isBlank(value) {\n  var testvalue = value !== null && value !== void 0 ? value : \'\';\n  return testvalue === \'\';\n};\nvar isNumber = function isNumber(value) {\n  return !isNaN(Number(value)) && !isNaN(parseInt(value));\n};\nvar isInteger = function isInteger(value) {\n  var test = +value;\n  return isNumber(value) && Math.floor(test) == test;\n};\nvar minValue = function minValue(value, _minValue) {\n  if (!isInteger(value) || !isInteger(_minValue)) return false;\n  var testvalue = +value;\n  var testMinValue = +_minValue;\n  return testvalue >= testMinValue;\n};\nvar maxValue = function maxValue(value, _maxValue) {\n  if (!isInteger(value) || !isInteger(_maxValue)) return false;\n  var testvalue = +value;\n  var testMaxValue = +_maxValue;\n  return testvalue <= testMaxValue;\n};\nvar errorMessages = {\n  scrollToIndex: \'integer: required, greater than or equal to 0\',\n  setListsize: \'integer: required, greater than or equal to 0\',\n  insertFrom: \'insertFrom - integer: required, greater than or equal to 0\',\n  insertRange: \'insertRange - blank, or integer greater than or equal to the "from" index\',\n  removeFrom: \'removeFrom - integer: required, greater than or equal to 0\',\n  removeRange: \'removeRange - blank, or integer greater than or equal to the "from" index\',\n  moveFrom: \'moveFrom - integer: required, greater than or equal to 0\',\n  moveRange: \'moveRange - blank, or integer greater than or equal to the "from" index\',\n  moveTo: \'moveTo - integer: required, greater than or equal to 0\'\n};\nvar ServiceHandler = /*#__PURE__*/_createClass(function ServiceHandler(cradleParameters) {\n  var _this = this;\n  _classCallCheck(this, ServiceHandler);\n  // ========================[ GENERAL ]============================\n  this.reload = function () {\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler;\n    var interruptHandler = _this.cradleParameters.handlersRef.current.interruptHandler;\n    interruptHandler.pauseInterrupts();\n    stateHandler.setCradleState(\'reload\');\n  };\n  this.scrollToIndex = function (index) {\n    var isInvalid = !isInteger(index) || !minValue(index, 0);\n    index = +index;\n    if (isInvalid) {\n      console.log(\'RIGS ERROR scrollToIndex(index)):\', index, errorMessages.scrollToIndex);\n      return;\n    }\n    var signals = _this.cradleParameters.handlersRef.current.interruptHandler.signals;\n    var _this$cradleParameter = _this.cradleParameters.handlersRef.current,\n      layoutHandler = _this$cradleParameter.layoutHandler,\n      stateHandler = _this$cradleParameter.stateHandler;\n    signals.pauseScrollingEffects = true;\n    layoutHandler.cradlePositionData.targetAxisReferenceIndex = index;\n    stateHandler.setCradleState(\'scrollto\');\n  };\n  this.setListsize = function (newlistsize) {\n    var isInvalid = !isInteger(newlistsize) || !minValue(newlistsize, 0);\n    newlistsize = +newlistsize;\n    if (isInvalid) {\n      console.log(\'RIGS ERROR setListsize(newlistsize)\', newlistsize, errorMessages.setListsize);\n      return;\n    }\n    var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n      cacheAPI = _this$cradleParameter2.cacheAPI,\n      contentHandler = _this$cradleParameter2.contentHandler,\n      stateHandler = _this$cradleParameter2.stateHandler;\n    var _this$callbacks = _this.callbacks,\n      deleteListCallback = _this$callbacks.deleteListCallback,\n      changeListsizeCallback = _this$callbacks.changeListsizeCallback;\n    var currentlistsize = _this.cradleParameters.cradleInternalPropertiesRef.current.listsize;\n    var cache = _this.cradleParameters.cradleInheritedPropertiesRef.current.cache;\n    var dListCallback;\n    if (deleteListCallback) {\n      dListCallback = function dListCallback(deleteList) {\n        deleteListCallback(\'change list size intervention\', deleteList);\n      };\n    }\n    contentHandler.updateListsize(newlistsize);\n    cacheAPI.changeCacheListsize(newlistsize, dListCallback, changeListsizeCallback);\n    cacheAPI.renderPortalLists();\n    if (cache == \'preload\' && newlistsize > currentlistsize) {\n      stateHandler.setCradleState(\'startpreload\');\n    }\n  };\n  // ======================[ GET SNAPSHOTS ]========================\n  this.getCacheIndexMap = function () {\n    var cacheAPI = _this.cradleParameters.handlersRef.current.cacheAPI;\n    return cacheAPI.getCacheIndexMap();\n  };\n  this.getCacheItemMap = function () {\n    var cacheAPI = _this.cradleParameters.handlersRef.current.cacheAPI;\n    return cacheAPI.getCacheItemMap();\n  };\n  this.getCradleIndexMap = function () {\n    var _this$cradleParameter3 = _this.cradleParameters.handlersRef.current,\n      cacheAPI = _this$cradleParameter3.cacheAPI,\n      contentHandler = _this$cradleParameter3.contentHandler;\n    var modelIndexList = contentHandler.getModelIndexList();\n    return cacheAPI.getCradleIndexMap(modelIndexList);\n  };\n  // =================[ CACHE MANAGEMENT REQUESTS ]==================\n  this.clearCache = function () {\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler;\n    stateHandler.setCradleState(\'clearcache\');\n  };\n  // itemID set to null deletes the indexed item\n  // itemID set to undefined replaces the indexed item\n  // the main purpose is to allow itemsIDs to be remapped to new indexes\n  // operations are on existing cache items only\n  this.remapIndexes = function (changeMap) {\n    if (changeMap.size == 0) return []; // nothing to do\n    var _this$cradleParameter4 = _this.cradleParameters.handlersRef.current,\n      cacheAPI = _this$cradleParameter4.cacheAPI,\n      contentHandler = _this$cradleParameter4.contentHandler,\n      stateHandler = _this$cradleParameter4.stateHandler;\n    var itemMetadataMap = cacheAPI.itemMetadataMap,\n      indexToItemIDMap = cacheAPI.indexToItemIDMap,\n      itemSet = cacheAPI.itemSet;\n    var indexesToDeleteList = [];\n    var indexesToReplaceItemIDList = [];\n    var partitionItemsToReplaceList = [];\n    var changeIndexToItemIDMap = new Map();\n    var errorEntriesMap = new Map();\n    // =====================[ PREPARE ]======================\n    // -----------------------[ isolate indexes for which items should be replaced ]--------------\n    var workingChangeMap = new Map();\n    changeMap.forEach(function (itemID, index) {\n      if (itemID === undefined) {\n        if (indexToItemIDMap.has(index)) {\n          var cacheItemID = indexToItemIDMap.get(index);\n          indexesToReplaceItemIDList.push(index);\n          if (!(cacheItemID === undefined)) {\n            // ignore non-existent indexes\n            var _itemMetadataMap$get = itemMetadataMap.get(cacheItemID),\n              partitionID = _itemMetadataMap$get.partitionID;\n            partitionItemsToReplaceList.push({\n              partitionID: partitionID,\n              itemID: cacheItemID\n            });\n          }\n        } else {\n          errorEntriesMap.set(index, \'index to replace is not in cache\');\n        }\n      } else {\n        workingChangeMap.set(index, itemID);\n      }\n    });\n    indexesToReplaceItemIDList.forEach(function (index) {\n      indexToItemIDMap["delete"](index);\n    });\n    // ------------ filter out inoperable indexes and itemIDs ------------\n    var itemsToReplaceSet = new Set();\n    partitionItemsToReplaceList.forEach(function (obj) {\n      itemsToReplaceSet.add(obj.itemID);\n    });\n    // const itemsToReplaceList = Array.from(itemsToReplaceSet)\n    workingChangeMap.forEach(function (itemID, index) {\n      if (itemID === null || itemID === undefined) {\n        indexesToDeleteList.push(index);\n      } else {\n        if (typeof itemID == \'string\') {\n          errorEntriesMap.set(index, \'itemID is a string\');\n        } else if (!Number.isInteger(itemID)) {\n          errorEntriesMap.set(index, \'itemID is not an integer\');\n        } else if (!indexToItemIDMap.has(index)) {\n          errorEntriesMap.set(index, \'index not in cache\');\n        } else if (indexToItemIDMap.get(index) == itemID) {\n          errorEntriesMap.set(index, "target itemID ".concat(itemID, " has not changed"));\n        } else if (!itemMetadataMap.has(itemID) || itemsToReplaceSet.has(itemID)) {\n          errorEntriesMap.set(index, "target itemID ".concat(itemID, " not in cache, or has been removed"));\n        } else {\n          changeIndexToItemIDMap.set(index, itemID);\n        }\n      }\n    });\n    // -------------- filter out duplicate itemIDs ------------\n    var mapsize = changeIndexToItemIDMap.size;\n    var itemIDSet = new Set(changeIndexToItemIDMap.values());\n    var itemsetsize = itemIDSet.size;\n    if (mapsize != itemsetsize) {\n      // there must be duplicate itemIDs\n      var itemIDCountMap = new Map();\n      changeIndexToItemIDMap.forEach(function (itemID) {\n        if (!itemIDCountMap.has(itemID)) {\n          itemIDCountMap.set(itemID, 1);\n        } else {\n          var count = itemIDCountMap.get(itemID);\n          itemIDCountMap.set(itemID, ++count);\n        }\n      });\n      var duplicateItemsMap = new Map();\n      itemIDCountMap.forEach(function (count, itemID) {\n        if (count > 1) {\n          duplicateItemsMap.set(itemID, count);\n        }\n      });\n      var duplicatesToRemoveList = [];\n      changeIndexToItemIDMap.forEach(function (itemID, index) {\n        if (duplicateItemsMap.has(itemID)) {\n          duplicatesToRemoveList.push(index);\n        }\n      });\n      duplicatesToRemoveList.forEach(function (index) {\n        var itemID = changeIndexToItemIDMap.get(index);\n        var count = duplicateItemsMap.get(itemID);\n        errorEntriesMap.set(index, "target itemID ".concat(itemID, " has duplicates (").concat(count, ")"));\n        changeIndexToItemIDMap["delete"](index);\n      });\n    }\n    // ------------ capture map before changes ----------\n    // ... this map is used later to identify orphaned item and index cache records for deletion\n    // from the list of changes\n    // both sides of change map...\n    var originalMap = new Map(); // index => itemID; before change\n    changeIndexToItemIDMap.forEach(function (itemID, index) {\n      originalMap.set(index, indexToItemIDMap.get(index)); // index to be mapped\n      originalMap.set(itemMetadataMap.get(itemID).index, itemID); // target itemID\n    });\n    // ... and from the list of indexes to be deleted\n    indexesToDeleteList.forEach(function (index) {\n      originalMap.set(index, indexToItemIDMap.get(index));\n    });\n    // ======================[ CACHE OPERATIONS ]================\n    // --------------- delete listed indexes ---------\n    // for indexes set to null or undefined\n    // associated itemID\'s will be orphaned, but could be remapped.\n    // orphans are resolved below\n    if (indexesToDeleteList.length) {\n      indexesToDeleteList.forEach(function (index) {\n        indexToItemIDMap["delete"](index);\n      });\n    }\n    // ----------- apply filtered changes to cache index map and itemID map ----------\n    // at this point every remaining index listed will change its mapping\n    // const processedMap = new Map() // index => itemID; change has been applied\n    var processedIndexList = [];\n    // make changes\n    changeIndexToItemIDMap.forEach(function (itemID, index) {\n      indexToItemIDMap.set(index, itemID); // modiication applied, part 1\n      var itemdata = itemMetadataMap.get(itemID);\n      itemdata.index = index; // modification applied, part 2\n      // processedMap.set(index,itemID)\n      processedIndexList.push(index);\n    });\n    // -------------- look for and delete item and index orphans --------------------\n    // if the original item\'s index has not changed, then it has not been remapped, \n    //     it is orphaned, and the item is deleted\n    // if the item\'s index has changed, but the original item index map still points to the item,\n    //     then the index is orphaned (duplicate), and deleted\n    var deletedItemIDToIndexMap = new Map(); // index => itemID; orphaned index\n    var deletedIndexToItemIDMap = new Map();\n    var portalPartitionItemsForDeleteList = []; // hold deleted portals for deletion until after cradle synch\n    originalMap.forEach(function (originalItemID, originalItemIDIndex) {\n      var finalItemIDIndex = itemMetadataMap.get(originalItemID).index;\n      if (originalItemIDIndex == finalItemIDIndex) {\n        // not remapped, therefore orphaned\n        deletedItemIDToIndexMap.set(originalItemID, originalItemIDIndex);\n        var _itemMetadataMap$get2 = itemMetadataMap.get(originalItemID),\n          partitionID = _itemMetadataMap$get2.partitionID;\n        portalPartitionItemsForDeleteList.push({\n          itemID: originalItemID,\n          partitionID: partitionID\n        });\n        itemMetadataMap["delete"](originalItemID);\n        itemSet["delete"](originalItemID);\n      } else {\n        // remapped, check for orphaned index\n        if (indexToItemIDMap.has(originalItemIDIndex)) {\n          var finalItemID = indexToItemIDMap.get(originalItemIDIndex);\n          if (finalItemID == originalItemID) {\n            // the index has not been remapped, therefore orphaned\n            deletedIndexToItemIDMap.set(originalItemIDIndex, originalItemID);\n            indexToItemIDMap["delete"](originalItemIDIndex);\n          }\n        }\n      }\n    });\n    // refresh the changed cache\n    // cacheAPI.cacheProps.partitionModified = true\n    // cacheAPI.renderPortalLists()\n    // ------------- apply changes to extant cellFrames ------------\n    // these are used to reconcile cradle cellFrames, and also for return information\n    // const processedIndexList = Array.from(processedMap.keys())\n    var deletedOrphanedItemIndexList = Array.from(deletedItemIDToIndexMap.values());\n    var deletedOrphanedIndexList = Array.from(deletedIndexToItemIDMap.keys());\n    // for return information...\n    var deletedOrphanedItemIDList = Array.from(deletedItemIDToIndexMap.keys());\n    var modifiedIndexList = [].concat(processedIndexList, indexesToDeleteList, deletedOrphanedItemIndexList, deletedOrphanedIndexList);\n    modifiedIndexList = Array.from(new Set(modifiedIndexList.values())); // remove duplicates\n    contentHandler.createNewItemIDs(indexesToReplaceItemIDList);\n    contentHandler.reconcileCellFrames(modifiedIndexList);\n    modifiedIndexList = modifiedIndexList.concat(indexesToReplaceItemIDList);\n    cacheAPI.portalPartitionItemsForDeleteList = portalPartitionItemsForDeleteList.concat(partitionItemsToReplaceList);\n    stateHandler.setCradleState(\'applyremapchanges\');\n    // ---------- returns for user information --------------------\n    return [modifiedIndexList, processedIndexList, indexesToDeleteList, indexesToReplaceItemIDList, deletedOrphanedItemIDList, deletedOrphanedIndexList, errorEntriesMap, changeMap];\n  };\n  // move must be entirely within list bounds\n  // returns list of processed indexes\n  this.moveIndex = function (tolowindex, fromlowindex) {\n    var fromhighindex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    // ------------ confirm validity of arguments -------------\n    var isToindexInvalid = !isInteger(tolowindex) || !minValue(tolowindex, 0);\n    var isFromindexInvalid = !isInteger(fromlowindex) || !minValue(fromlowindex, 0);\n    var isHighrangeInvalid = false;\n    if (!isFromindexInvalid) {\n      if (!isBlank(fromhighindex)) {\n        isHighrangeInvalid = !minValue(fromhighindex, fromlowindex);\n      } else {\n        fromhighindex = fromlowindex;\n      }\n    }\n    tolowindex = +tolowindex;\n    fromlowindex = +fromlowindex;\n    fromhighindex = +fromhighindex;\n    // TODO return error array instead\n    if (isToindexInvalid || isFromindexInvalid || isHighrangeInvalid) {\n      console.log(\'RIGS ERROR moveIndex(toindex, fromindex, fromhighrange)\');\n      isToindexInvalid && console.log(tolowindex, errorMessages.moveTo);\n      isFromindexInvalid && console.log(fromlowindex, errorMessages.moveFrom);\n      isHighrangeInvalid && console.log(fromhighindex, errorMessages.moveRange);\n      return [];\n    }\n    tolowindex = Math.max(0, tolowindex);\n    fromlowindex = Math.max(0, fromlowindex);\n    fromhighindex = Math.max(0, fromhighindex);\n    var fromspan = fromhighindex - fromlowindex + 1;\n    var tohighindex = tolowindex + fromspan - 1;\n    // ------------- coerce parameters to list bounds ---------------\n    var listsize = _this.cradleParameters.cradleInternalPropertiesRef.current.listsize;\n    // keep within current list size\n    var listhighindex = listsize - 1;\n    if (tohighindex > listhighindex) {\n      var diff = tohighindex - listhighindex;\n      tohighindex = Math.max(0, tohighindex - diff);\n      tolowindex = Math.max(0, tolowindex - diff);\n    }\n    if (fromhighindex > listhighindex) {\n      var _diff = fromhighindex - listhighindex;\n      fromhighindex = Math.max(0, fromhighindex - _diff);\n      fromlowindex = Math.max(0, fromlowindex - _diff);\n    }\n    // ---------- constrain parameters --------------\n    // nothing to do; no displacement\n    if (fromlowindex == tolowindex) return [];\n    // ----------- perform cache and cradle operations -----------\n    var _this$cradleParameter5 = _this.cradleParameters.handlersRef.current,\n      cacheAPI = _this$cradleParameter5.cacheAPI,\n      contentHandler = _this$cradleParameter5.contentHandler,\n      stateHandler = _this$cradleParameter5.stateHandler;\n    var processedIndexList =\n    // both displaced and moved indexes\n    cacheAPI.moveIndex(tolowindex, fromlowindex, fromhighindex);\n    if (processedIndexList.length) {\n      contentHandler.synchronizeCradleItemIDsToCache(processedIndexList);\n      var content = contentHandler.content;\n      content.headModelComponents = content.cradleModelComponents.slice(0, content.headModelComponents.length);\n      content.tailModelComponents = content.cradleModelComponents.slice(content.headModelComponents.length);\n      stateHandler.setCradleState(\'applymovechanges\');\n    }\n    return processedIndexList;\n  };\n  this.insertIndex = function (index) {\n    var rangehighindex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var isIndexInvalid = !isInteger(index) || !minValue(index, 0);\n    var isHighrangeInvalid = false;\n    if (!isIndexInvalid) {\n      if (!isBlank(rangehighindex)) {\n        isHighrangeInvalid = !minValue(rangehighindex, index);\n      } else {\n        rangehighindex = index;\n      }\n    }\n    index = +index;\n    rangehighindex = +rangehighindex;\n    if (isIndexInvalid || isHighrangeInvalid) {\n      console.log(\'RIGS ERROR insertIndex(index, rangehighindex)\');\n      isIndexInvalid && console.log(index, errorMessages.insertFrom);\n      isHighrangeInvalid && console.log(rangehighindex, errorMessages.insertRange);\n      return null;\n    }\n    return _this.insertRemoveIndex(index, rangehighindex, +1);\n  };\n  this.removeIndex = function (index) {\n    var rangehighindex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var isIndexInvalid = !isInteger(index) || !minValue(index, 0);\n    var isHighrangeInvalid = false;\n    if (!isIndexInvalid) {\n      if (!isBlank(rangehighindex)) {\n        isHighrangeInvalid = !minValue(rangehighindex, index);\n      } else {\n        rangehighindex = index;\n      }\n    }\n    index = +index;\n    rangehighindex = +rangehighindex;\n    if (isIndexInvalid || isHighrangeInvalid) {\n      console.log(\'RIGS ERROR moveIndex(index, rangehighindex)\');\n      isIndexInvalid && console.log(index, errorMessages.removeFrom);\n      isHighrangeInvalid && console.log(rangehighindex, errorMessages.removeRange);\n      return null;\n    }\n    return _this.insertRemoveIndex(index, rangehighindex, -1);\n  };\n  // shared logic for insert and remove. Returns lists of indexes shifted, replaced, and removed\n  // this operation changes the listsize\n  this.insertRemoveIndex = function (index, rangehighindex, increment) {\n    // basic assertions\n    index = Math.max(0, index);\n    rangehighindex = Math.max(rangehighindex, index);\n    // ---------------- assemble resources --------------------\n    var _this$cradleParameter6 = _this.cradleParameters.handlersRef.current,\n      cacheAPI = _this$cradleParameter6.cacheAPI,\n      contentHandler = _this$cradleParameter6.contentHandler,\n      stateHandler = _this$cradleParameter6.stateHandler;\n    var cradleInternalProperties = _this.cradleParameters.cradleInternalPropertiesRef.current;\n    var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    // ------------------- process cache ----------------\n    var listsize = cradleInternalProperties.listsize;\n    if (listsize == 0) {\n      if (increment > 0) {\n        return _this.setListsize(rangehighindex - index + 1);\n      }\n      return [[], [], []];\n    }\n    var _cacheAPI$insertRemov = cacheAPI.insertRemoveIndex(index, rangehighindex, increment, listsize),\n      _cacheAPI$insertRemov2 = _slicedToArray(_cacheAPI$insertRemov, 6),\n      startChangeIndex = _cacheAPI$insertRemov2[0],\n      rangeincrement = _cacheAPI$insertRemov2[1],\n      shiftedList = _cacheAPI$insertRemov2[2],\n      removedList = _cacheAPI$insertRemov2[3],\n      replaceList = _cacheAPI$insertRemov2[4],\n      portalPartitionItemsForDeleteList = _cacheAPI$insertRemov2[5]; //, cradleIndexSpan)\n    if (rangeincrement === null) return [[], [], []]; // no action\n    // partitionItems to delete with followup state changes - must happen after cradle update\n    cacheAPI.portalPartitionItemsForDeleteList = portalPartitionItemsForDeleteList;\n    // ------------- synchronize cradle to cache changes -------------\n    // determine if cradle must be reset or simply adjusted\n    var changecount = rangeincrement; // semantics\n    var newlistsize = _this.newlistsize = listsize + changecount;\n    var viewportRowcount = cradleInternalProperties.viewportRowcount,\n      crosscount = cradleInternalProperties.crosscount;\n    var runwaySize = cradleInheritedProperties.runwaySize;\n    var calculatedCradleRowcount = viewportRowcount + runwaySize * 2;\n    var calculatedCradleItemcount = calculatedCradleRowcount * crosscount;\n    var indexSpan = contentHandler.indexSpan;\n    var _indexSpan = _slicedToArray(indexSpan, 2),\n      lowIndex = _indexSpan[0],\n      highIndex = _indexSpan[1];\n    var measuredCradleItemCount = indexSpan.length == 0 ? 0 : highIndex - lowIndex + 1;\n    var resetCradle = measuredCradleItemCount < calculatedCradleItemcount || contentHandler.indexSpan[1] >= newlistsize - 1;\n    if (!resetCradle) {\n      // synchronize cradle contents to changes\n      contentHandler.synchronizeCradleItemIDsToCache(shiftedList, increment, startChangeIndex); // non-zero communications isInsertRemove\n      // if (increment == +1) contentHandler.createNewItemIDs(replaceList)\n      var content = contentHandler.content;\n      // const requestedSet = cacheAPI.cacheProps.requestedSet\n      var requestedSet = cacheAPI.requestedSet;\n      var timeout = setInterval(function () {\n        if (!requestedSet.size) {\n          // finished collecting new cache entries\n          clearInterval(timeout);\n          content.headModelComponents = content.cradleModelComponents.slice(0, content.headModelComponents.length);\n          content.tailModelComponents = content.cradleModelComponents.slice(content.headModelComponents.length);\n          stateHandler.setCradleState(\'applyinsertremovechanges\');\n        }\n      }, 100);\n    } else {\n      // cradle to be completely reset if listsize change encroaches on cradle\n      stateHandler.setCradleState(\'channelcradleresetafterinsertremove\');\n    }\n    var replacedList = replaceList; // semantics\n    return [shiftedList, replacedList, removedList]; // inform caller\n  };\n\n  this.cradleParameters = cradleParameters;\n  // doing this explicitly here for documentation\n  var _cradleParameters$ext = cradleParameters.externalCallbacksRef.current,\n    referenceIndexCallback = _cradleParameters$ext.referenceIndexCallback,\n    preloadIndexCallback = _cradleParameters$ext.preloadIndexCallback,\n    deleteListCallback = _cradleParameters$ext.deleteListCallback,\n    changeListsizeCallback = _cradleParameters$ext.changeListsizeCallback,\n    itemExceptionCallback = _cradleParameters$ext.itemExceptionCallback,\n    repositioningFlagCallback = _cradleParameters$ext.repositioningFlagCallback,\n    repositioningIndexCallback = _cradleParameters$ext.repositioningIndexCallback;\n  var callbacks = {\n    referenceIndexCallback: referenceIndexCallback,\n    preloadIndexCallback: preloadIndexCallback,\n    deleteListCallback: deleteListCallback,\n    changeListsizeCallback: changeListsizeCallback,\n    itemExceptionCallback: itemExceptionCallback,\n    repositioningFlagCallback: repositioningFlagCallback,\n    repositioningIndexCallback: repositioningIndexCallback\n  };\n  this.callbacks = callbacks;\n});\nexports["default"] = ServiceHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/servicehandler.tsx\n')},"./src/cradle/statehandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval('\n\n// statehandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n   This module provides access to the cradle state and the state setting for other handlers.\n   It also provides access to the isMountedRef reference.\n*/\nvar StateHandler = /*#__PURE__*/_createClass(function StateHandler(cradleParameters) {\n  _classCallCheck(this, StateHandler);\n  this.cradleParameters = cradleParameters;\n  var internalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n  this.setCradleState = internalProperties.setCradleState;\n  this.cradleStateRef = internalProperties.cradleStateRef;\n  this.isMountedRef = internalProperties.isMountedRef;\n});\nexports["default"] = StateHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3N0YXRlaGFuZGxlci50c3giLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQUEsU0FBQUEsUUFBQUMsR0FBQSxzQ0FBQUQsT0FBQSx3QkFBQUUsTUFBQSx1QkFBQUEsTUFBQSxDQUFBQyxRQUFBLGFBQUFGLEdBQUEsa0JBQUFBLEdBQUEsZ0JBQUFBLEdBQUEsV0FBQUEsR0FBQSx5QkFBQUMsTUFBQSxJQUFBRCxHQUFBLENBQUFHLFdBQUEsS0FBQUYsTUFBQSxJQUFBRCxHQUFBLEtBQUFDLE1BQUEsQ0FBQUcsU0FBQSxxQkFBQUosR0FBQSxLQUFBRCxPQUFBLENBQUFDLEdBQUE7QUFBQSxTQUFBSyxrQkFBQUMsTUFBQSxFQUFBQyxLQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxLQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBRSxVQUFBLEdBQUFILEtBQUEsQ0FBQUMsQ0FBQSxHQUFBRSxVQUFBLENBQUFDLFVBQUEsR0FBQUQsVUFBQSxDQUFBQyxVQUFBLFdBQUFELFVBQUEsQ0FBQUUsWUFBQSx3QkFBQUYsVUFBQSxFQUFBQSxVQUFBLENBQUFHLFFBQUEsU0FBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFULE1BQUEsRUFBQVUsY0FBQSxDQUFBTixVQUFBLENBQUFPLEdBQUEsR0FBQVAsVUFBQTtBQUFBLFNBQUFRLGFBQUFDLFdBQUEsRUFBQUMsVUFBQSxFQUFBQyxXQUFBLFFBQUFELFVBQUEsRUFBQWYsaUJBQUEsQ0FBQWMsV0FBQSxDQUFBZixTQUFBLEVBQUFnQixVQUFBLE9BQUFDLFdBQUEsRUFBQWhCLGlCQUFBLENBQUFjLFdBQUEsRUFBQUUsV0FBQSxHQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUksV0FBQSxpQkFBQU4sUUFBQSxtQkFBQU0sV0FBQTtBQUFBLFNBQUFILGVBQUFNLEdBQUEsUUFBQUwsR0FBQSxHQUFBTSxZQUFBLENBQUFELEdBQUEsb0JBQUF2QixPQUFBLENBQUFrQixHQUFBLGlCQUFBQSxHQUFBLEdBQUFPLE1BQUEsQ0FBQVAsR0FBQTtBQUFBLFNBQUFNLGFBQUFFLEtBQUEsRUFBQUMsSUFBQSxRQUFBM0IsT0FBQSxDQUFBMEIsS0FBQSxrQkFBQUEsS0FBQSxrQkFBQUEsS0FBQSxNQUFBRSxJQUFBLEdBQUFGLEtBQUEsQ0FBQXhCLE1BQUEsQ0FBQTJCLFdBQUEsT0FBQUQsSUFBQSxLQUFBRSxTQUFBLFFBQUFDLEdBQUEsR0FBQUgsSUFBQSxDQUFBSSxJQUFBLENBQUFOLEtBQUEsRUFBQUMsSUFBQSxvQkFBQTNCLE9BQUEsQ0FBQStCLEdBQUEsdUJBQUFBLEdBQUEsWUFBQUUsU0FBQSw0REFBQU4sSUFBQSxnQkFBQUYsTUFBQSxHQUFBUyxNQUFBLEVBQUFSLEtBQUE7QUFBQSxTQUFBUyxnQkFBQUMsUUFBQSxFQUFBaEIsV0FBQSxVQUFBZ0IsUUFBQSxZQUFBaEIsV0FBQSxlQUFBYSxTQUFBOzs7O0FBRUE7Ozs7QUFBQSxJQUtxQkksWUFBWSxnQkFBQWxCLFlBQUEsQ0FFN0IsU0FBQWtCLGFBQVlDLGdCQUFnQjtFQUFBSCxlQUFBLE9BQUFFLFlBQUE7RUFFekIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR0EsZ0JBQWdCO0VBRXhDLElBQU1DLGtCQUFrQixHQUFHRCxnQkFBZ0IsQ0FBQ0UsMkJBQTJCLENBQUNDLE9BQU87RUFFL0UsSUFBSSxDQUFDQyxjQUFjLEdBQUdILGtCQUFrQixDQUFDRyxjQUFjO0VBQ3ZELElBQUksQ0FBQ0MsY0FBYyxHQUFHSixrQkFBa0IsQ0FBQ0ksY0FBYztFQUN2RCxJQUFJLENBQUNDLFlBQVksR0FBR0wsa0JBQWtCLENBQUNLLFlBQVk7QUFFdEQsQ0FBQztBQVpMQyxrQkFBQSxHQUFBUixZQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9jcmFkbGUvc3RhdGVoYW5kbGVyLnRzeD82Mzk1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0YXRlaGFuZGxlci50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAxOS0yMDIzIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbi8qXG4gICBUaGlzIG1vZHVsZSBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGNyYWRsZSBzdGF0ZSBhbmQgdGhlIHN0YXRlIHNldHRpbmcgZm9yIG90aGVyIGhhbmRsZXJzLlxuICAgSXQgYWxzbyBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGlzTW91bnRlZFJlZiByZWZlcmVuY2UuXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZUhhbmRsZXIge1xuXG4gICAgY29uc3RydWN0b3IoY3JhZGxlUGFyYW1ldGVycykge1xuXG4gICAgICAgdGhpcy5jcmFkbGVQYXJhbWV0ZXJzID0gY3JhZGxlUGFyYW1ldGVyc1xuXG4gICAgICAgY29uc3QgaW50ZXJuYWxQcm9wZXJ0aWVzID0gY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbnRlcm5hbFByb3BlcnRpZXNSZWYuY3VycmVudFxuXG4gICAgICAgdGhpcy5zZXRDcmFkbGVTdGF0ZSA9IGludGVybmFsUHJvcGVydGllcy5zZXRDcmFkbGVTdGF0ZVxuICAgICAgIHRoaXMuY3JhZGxlU3RhdGVSZWYgPSBpbnRlcm5hbFByb3BlcnRpZXMuY3JhZGxlU3RhdGVSZWZcbiAgICAgICB0aGlzLmlzTW91bnRlZFJlZiA9IGludGVybmFsUHJvcGVydGllcy5pc01vdW50ZWRSZWZcbiAgICAgICBcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyYWRsZVBhcmFtZXRlcnNcblxuICAgIHB1YmxpYyBjcmFkbGVTdGF0ZVJlZlxuICAgIHB1YmxpYyBzZXRDcmFkbGVTdGF0ZVxuICAgIHB1YmxpYyBpc01vdW50ZWRSZWZcblxufVxuIl0sIm5hbWVzIjpbIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiU3RhdGVIYW5kbGVyIiwiY3JhZGxlUGFyYW1ldGVycyIsImludGVybmFsUHJvcGVydGllcyIsImNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZiIsImN1cnJlbnQiLCJzZXRDcmFkbGVTdGF0ZSIsImNyYWRsZVN0YXRlUmVmIiwiaXNNb3VudGVkUmVmIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/cradle/statehandler.tsx\n')},"./src/cradle/styleshandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval("\n\n// styleshandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    This module provides the Cradle component with one key function: getCradleStyles.\n    It returns an array of style objects for\n        headstyles,\n        tailstyles,\n        axisstyles,\n        cradledividerstyles\n        triggercelltriggerlineheadstyles,\n        triggercelltriggerlinetailstyles,\n*/\nvar StylesHandler = /*#__PURE__*/_createClass(function StylesHandler(cradleParameters) {\n  var _this = this;\n  _classCallCheck(this, StylesHandler);\n  this.getCradleStyles = function (_ref) {\n    var orientation = _ref.orientation,\n      cellHeight = _ref.cellHeight,\n      cellWidth = _ref.cellWidth,\n      gap = _ref.gap,\n      padding = _ref.padding,\n      crosscount = _ref.crosscount,\n      userstyles = _ref.userstyles,\n      triggerlineOffset = _ref.triggerlineOffset,\n      layout = _ref.layout;\n    var headstyles = _this.getBaseHeadStyles(gap, padding, orientation, userstyles.cradle);\n    var tailstyles = _this.getBaseTailStyles(gap, padding, orientation, userstyles.cradle);\n    var axisstyles = _this.getAxisStyles(gap, padding, orientation);\n    var triggercelltriggerlineheadstyles = _this.getTriggercellTriggerlineHeadStyles(orientation, cellHeight, cellWidth, triggerlineOffset, gap);\n    var triggercelltriggerlinetailstyles = _this.getTriggercellTriggerlineTailStyles(orientation, cellHeight, cellWidth, triggerlineOffset, gap);\n    var cradledividerstyles = {\n      zIndex: 1,\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      boxShadow: '0 0 5px 3px red'\n    };\n    headstyles.gap = tailstyles.gap = gap + 'px';\n    // headstyles.padding set in contentHandler setCradleContent and updateCradleContent\n    if (orientation == 'vertical') {\n      // padding varies\n      tailstyles.padding = \"0 \".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px\");\n      // the following are identical for head and tail\n      headstyles.width = tailstyles.width = '100%';\n      headstyles.height = tailstyles.height = 'auto';\n      headstyles.gridTemplateRows = tailstyles.gridTemplateRows = null;\n      headstyles.gridTemplateColumns = tailstyles.gridTemplateColumns = \"repeat(\".concat(crosscount, \", minmax(\").concat(cellWidth, \"px, 1fr))\");\n      headstyles.gridAutoFlow = tailstyles.gridAutoFlow = 'row';\n      headstyles.gridAutoRows = tailstyles.gridAutoRows = layout == 'uniform' ? null : 'max-content';\n      headstyles.gridAutoColumns = tailstyles.gridAutoColumns = null;\n    } else {\n      // orientation == 'horizontal'\n      tailstyles.padding = \"\".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px 0\");\n      headstyles.width = tailstyles.width = 'auto';\n      headstyles.height = tailstyles.height = '100%';\n      headstyles.gridTemplateRows = tailstyles.gridTemplateRows = \"repeat(\".concat(crosscount, \", minmax(\").concat(cellHeight, \"px, 1fr))\");\n      headstyles.gridTemplateColumns = tailstyles.gridTemplateColumns = null;\n      headstyles.gridAutoFlow = tailstyles.gridAutoFlow = 'column';\n      headstyles.gridAutoRows = tailstyles.gridAutoRows = null;\n      headstyles.gridAutoColumns = tailstyles.gridAutoColumns = layout == 'uniform' ? null : 'max-content';\n    }\n    return [headstyles, tailstyles, axisstyles, cradledividerstyles, triggercelltriggerlineheadstyles, triggercelltriggerlinetailstyles];\n  };\n  // the top, right, bottom, left setting determine the direction of expansion of the grid block\n  this.getBaseHeadStyles = function (gap, padding, orientation, userheadstyles) {\n    var bottom, left, top, right;\n    if (orientation == 'vertical') {\n      bottom = 0;\n      left = null;\n      right = null;\n      top = null;\n    } else {\n      bottom = null;\n      left = null;\n      right = 0;\n      top = null;\n    }\n    return Object.assign(Object.assign({}, userheadstyles), {\n      position: 'absolute',\n      display: 'grid',\n      gridGap: gap + 'px',\n      padding: padding + 'px',\n      boxSizing: 'border-box',\n      bottom: bottom,\n      left: left,\n      right: right,\n      top: top\n    });\n  };\n  // the top, right, bottom, left setting determine the direction of expansion of the grid block\n  this.getBaseTailStyles = function (gap, padding, orientation, usertailstyles) {\n    var bottom, left, top, right;\n    if (orientation == 'vertical') {\n      bottom = null;\n      left = null;\n      right = null;\n      top = 0;\n    } else {\n      bottom = null;\n      left = 0;\n      right = null;\n      top = null;\n    }\n    return Object.assign(Object.assign({}, usertailstyles), {\n      position: 'absolute',\n      display: 'grid',\n      gridGap: gap + 'px',\n      padding: padding + 'px',\n      boxSizing: 'border-box',\n      top: top,\n      left: left,\n      right: right,\n      bottom: bottom\n    });\n  };\n  this.getAxisStyles = function (gap, padding, orientation) {\n    var top, left, width, height; // for axis\n    if (orientation == 'vertical') {\n      top = padding + 'px'; // default\n      left = 'auto';\n      width = '100%';\n      height = 0;\n    } else {\n      top = 'auto';\n      left = padding + 'px'; // default\n      width = 0;\n      height = '100%';\n    }\n    return {\n      position: 'relative',\n      top: top,\n      left: left,\n      width: width,\n      height: height\n    };\n  };\n  this.getTriggercellTriggerlineHeadStyles = function (orientation, cellHeight, cellWidth, triggerlineOffset, gap) {\n    var position = 'absolute';\n    var width, height, top, right, bottom, left;\n    if (orientation == 'vertical') {\n      width = '100%';\n      height = 0;\n      top = triggerlineOffset + 'px';\n      right = '0px';\n      bottom = null;\n      left = '0px';\n    } else {\n      width = 0;\n      height = '100%';\n      top = '0px';\n      right = null;\n      bottom = '0px';\n      left = triggerlineOffset + 'px';\n    }\n    return {\n      position: position,\n      width: width,\n      height: height,\n      top: top,\n      right: right,\n      bottom: bottom,\n      left: left\n    };\n  };\n  this.getTriggercellTriggerlineTailStyles = function (orientation, cellHeight, cellWidth, triggerlineOffset, gap) {\n    var position = 'absolute';\n    var width, height, top, right, bottom, left;\n    if (orientation == 'vertical') {\n      width = '100%';\n      height = 0;\n      top = null;\n      right = '0px';\n      bottom = -(triggerlineOffset + gap) + 'px';\n      left = '0px';\n    } else {\n      width = 0;\n      height = '100%';\n      top = '0px';\n      right = -(triggerlineOffset + gap) + 'px';\n      bottom = '0px';\n      left = null;\n    }\n    return {\n      position: position,\n      width: width,\n      height: height,\n      top: top,\n      right: right,\n      bottom: bottom,\n      left: left\n    };\n  };\n  this.cradleParameters = cradleParameters;\n});\nexports[\"default\"] = StylesHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/styleshandler.tsx\n")},"./src/portalcache/CachePartition.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// CellFrame.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nvar CachePartition = function CachePartition(_ref) {\n  var partitionProps = _ref.partitionProps,\n    partitionID = _ref.partitionID,\n    callback = _ref.callback;\n  var _ref2 = (0, react_1.useState)(0),\n    _ref3 = _slicedToArray(_ref2, 2),\n    portalListCounter = _ref3[0],\n    setPortalListCounter = _ref3[1];\n  var _ref4 = (0, react_1.useState)(\'setup\'),\n    _ref5 = _slicedToArray(_ref4, 2),\n    partitionState = _ref5[0],\n    setPartitionState = _ref5[1];\n  var counterRef = (0, react_1.useRef)(portalListCounter);\n  var isMountedRef = (0, react_1.useRef)(true);\n  var portalArrayRef = (0, react_1.useRef)(null);\n  var partitionMetadata = partitionProps.partitionMetadataMap.get(partitionID);\n  var forceUpdate = (0, react_1.useCallback)(function (portalRenderList) {\n    portalArrayRef.current = portalRenderList;\n    isMountedRef.current && setPortalListCounter(++counterRef.current); // force render\n  }, []);\n  (0, react_1.useEffect)(function () {\n    isMountedRef.current = true;\n    partitionMetadata.forceUpdate = forceUpdate;\n    callback();\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  (0, react_1.useEffect)(function () {\n    switch (partitionState) {\n      case \'setup\':\n        {\n          setPartitionState(\'ready\');\n          break;\n        }\n    }\n  }, [partitionState]);\n  return react_1["default"].createElement("div", {\n    key: partitionID,\n    "data-type": \'cachepartition\',\n    "data-partitionid": partitionID\n  }, portalArrayRef.current);\n};\nexports["default"] = CachePartition;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcG9ydGFsY2FjaGUvQ2FjaGVQYXJ0aXRpb24udHN4IiwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUFBLFNBQUFBLGVBQUFDLEdBQUEsRUFBQUMsQ0FBQSxXQUFBQyxlQUFBLENBQUFGLEdBQUEsS0FBQUcscUJBQUEsQ0FBQUgsR0FBQSxFQUFBQyxDQUFBLEtBQUFHLDJCQUFBLENBQUFKLEdBQUEsRUFBQUMsQ0FBQSxLQUFBSSxnQkFBQTtBQUFBLFNBQUFBLGlCQUFBLGNBQUFDLFNBQUE7QUFBQSxTQUFBRiw0QkFBQUcsQ0FBQSxFQUFBQyxNQUFBLFNBQUFELENBQUEscUJBQUFBLENBQUEsc0JBQUFFLGlCQUFBLENBQUFGLENBQUEsRUFBQUMsTUFBQSxPQUFBRSxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsU0FBQSxDQUFBQyxRQUFBLENBQUFDLElBQUEsQ0FBQVAsQ0FBQSxFQUFBUSxLQUFBLGFBQUFMLENBQUEsaUJBQUFILENBQUEsQ0FBQVMsV0FBQSxFQUFBTixDQUFBLEdBQUFILENBQUEsQ0FBQVMsV0FBQSxDQUFBQyxJQUFBLE1BQUFQLENBQUEsY0FBQUEsQ0FBQSxtQkFBQVEsS0FBQSxDQUFBQyxJQUFBLENBQUFaLENBQUEsT0FBQUcsQ0FBQSwrREFBQVUsSUFBQSxDQUFBVixDQUFBLFVBQUFELGlCQUFBLENBQUFGLENBQUEsRUFBQUMsTUFBQTtBQUFBLFNBQUFDLGtCQUFBVCxHQUFBLEVBQUFxQixHQUFBLFFBQUFBLEdBQUEsWUFBQUEsR0FBQSxHQUFBckIsR0FBQSxDQUFBc0IsTUFBQSxFQUFBRCxHQUFBLEdBQUFyQixHQUFBLENBQUFzQixNQUFBLFdBQUFyQixDQUFBLE1BQUFzQixJQUFBLE9BQUFMLEtBQUEsQ0FBQUcsR0FBQSxHQUFBcEIsQ0FBQSxHQUFBb0IsR0FBQSxFQUFBcEIsQ0FBQSxJQUFBc0IsSUFBQSxDQUFBdEIsQ0FBQSxJQUFBRCxHQUFBLENBQUFDLENBQUEsVUFBQXNCLElBQUE7QUFBQSxTQUFBcEIsc0JBQUFILEdBQUEsRUFBQUMsQ0FBQSxRQUFBdUIsRUFBQSxXQUFBeEIsR0FBQSxnQ0FBQXlCLE1BQUEsSUFBQXpCLEdBQUEsQ0FBQXlCLE1BQUEsQ0FBQUMsUUFBQSxLQUFBMUIsR0FBQSw0QkFBQXdCLEVBQUEsUUFBQUcsRUFBQSxFQUFBQyxFQUFBLEVBQUFDLEVBQUEsRUFBQUMsRUFBQSxFQUFBQyxJQUFBLE9BQUFDLEVBQUEsT0FBQUMsRUFBQSxpQkFBQUosRUFBQSxJQUFBTCxFQUFBLEdBQUFBLEVBQUEsQ0FBQVYsSUFBQSxDQUFBZCxHQUFBLEdBQUFrQyxJQUFBLFFBQUFqQyxDQUFBLFFBQUFVLE1BQUEsQ0FBQWEsRUFBQSxNQUFBQSxFQUFBLFVBQUFRLEVBQUEsdUJBQUFBLEVBQUEsSUFBQUwsRUFBQSxHQUFBRSxFQUFBLENBQUFmLElBQUEsQ0FBQVUsRUFBQSxHQUFBVyxJQUFBLE1BQUFKLElBQUEsQ0FBQUssSUFBQSxDQUFBVCxFQUFBLENBQUFVLEtBQUEsR0FBQU4sSUFBQSxDQUFBVCxNQUFBLEtBQUFyQixDQUFBLEdBQUErQixFQUFBLGlCQUFBTSxHQUFBLElBQUFMLEVBQUEsT0FBQUwsRUFBQSxHQUFBVSxHQUFBLHlCQUFBTixFQUFBLFlBQUFSLEVBQUEsZUFBQU0sRUFBQSxHQUFBTixFQUFBLGNBQUFiLE1BQUEsQ0FBQW1CLEVBQUEsTUFBQUEsRUFBQSwyQkFBQUcsRUFBQSxRQUFBTCxFQUFBLGFBQUFHLElBQUE7QUFBQSxTQUFBN0IsZ0JBQUFGLEdBQUEsUUFBQWtCLEtBQUEsQ0FBQXFCLE9BQUEsQ0FBQXZDLEdBQUEsVUFBQUEsR0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFBd0MsT0FBQSxHQUFBQyxZQUFBLENBQUFDLG1CQUFBO0FBRUEsSUFBTUMsY0FBYyxHQUFHLFNBQWpCQSxjQUFjQSxDQUFBQyxJQUFBLEVBQWlEO0VBQUEsSUFBM0NDLGNBQWMsR0FBQUQsSUFBQSxDQUFkQyxjQUFjO0lBQUVDLFdBQVcsR0FBQUYsSUFBQSxDQUFYRSxXQUFXO0lBQUVDLFFBQVEsR0FBQUgsSUFBQSxDQUFSRyxRQUFRO0VBRTNELElBQUFDLEtBQUEsR0FBa0QsSUFBQVIsT0FBQSxDQUFBUyxRQUFRLEVBQUMsQ0FBQyxDQUFDO0lBQUFDLEtBQUEsR0FBQW5ELGNBQUEsQ0FBQWlELEtBQUE7SUFBdERHLGlCQUFpQixHQUFBRCxLQUFBO0lBQUVFLG9CQUFvQixHQUFBRixLQUFBO0VBRTlDLElBQUFHLEtBQUEsR0FBNEMsSUFBQWIsT0FBQSxDQUFBUyxRQUFRLEVBQUMsT0FBTyxDQUFDO0lBQUFLLEtBQUEsR0FBQXZELGNBQUEsQ0FBQXNELEtBQUE7SUFBdERFLGNBQWMsR0FBQUQsS0FBQTtJQUFFRSxpQkFBaUIsR0FBQUYsS0FBQTtFQUV4QyxJQUFNRyxVQUFVLEdBQUcsSUFBQWpCLE9BQUEsQ0FBQWtCLE1BQU0sRUFBQ1AsaUJBQWlCLENBQUM7RUFFNUMsSUFBTVEsWUFBWSxHQUFHLElBQUFuQixPQUFBLENBQUFrQixNQUFNLEVBQUMsSUFBSSxDQUFDO0VBRWpDLElBQU1FLGNBQWMsR0FBRyxJQUFBcEIsT0FBQSxDQUFBa0IsTUFBTSxFQUFDLElBQUksQ0FBQztFQUVuQyxJQUFNRyxpQkFBaUIsR0FBR2hCLGNBQWMsQ0FBQ2lCLG9CQUFvQixDQUFDQyxHQUFHLENBQUNqQixXQUFXLENBQUM7RUFFOUUsSUFBTWtCLFdBQVcsR0FBRyxJQUFBeEIsT0FBQSxDQUFBeUIsV0FBVyxFQUFDLFVBQUNDLGdCQUFnQixFQUFJO0lBRWpETixjQUFjLENBQUNPLE9BQU8sR0FBR0QsZ0JBQWdCO0lBRXpDUCxZQUFZLENBQUNRLE9BQU8sSUFBSWYsb0JBQW9CLENBQUMsRUFBRUssVUFBVSxDQUFDVSxPQUFPLENBQUMsRUFBQztFQUV2RSxDQUFDLEVBQUMsRUFBRSxDQUFDO0VBRUwsSUFBQTNCLE9BQUEsQ0FBQTRCLFNBQVMsRUFBQyxZQUFJO0lBRVZULFlBQVksQ0FBQ1EsT0FBTyxHQUFHLElBQUk7SUFFM0JOLGlCQUFpQixDQUFDRyxXQUFXLEdBQUdBLFdBQVc7SUFFM0NqQixRQUFRLEVBQUU7SUFFVixPQUFPLFlBQUs7TUFFUlksWUFBWSxDQUFDUSxPQUFPLEdBQUcsS0FBSztJQUVoQyxDQUFDO0VBRUwsQ0FBQyxFQUFDLEVBQUUsQ0FBQztFQUVMLElBQUEzQixPQUFBLENBQUE0QixTQUFTLEVBQUMsWUFBSTtJQUVWLFFBQVFiLGNBQWM7TUFDbEIsS0FBSyxPQUFPO1FBQUU7VUFDVkMsaUJBQWlCLENBQUMsT0FBTyxDQUFDO1VBQzFCOzs7RUFJWixDQUFDLEVBQUMsQ0FBQ0QsY0FBYyxDQUFDLENBQUM7RUFFbkIsT0FBT2YsT0FBQSxZQUFBNkIsYUFBQTtJQUFLQyxHQUFHLEVBQUl4QixXQUFXO0lBQUEsYUFBYyxnQkFBZ0I7SUFBQSxvQkFBcUJBO0VBQVcsR0FDdkZjLGNBQWMsQ0FBQ08sT0FBTyxDQUNyQjtBQUVWLENBQUM7QUFFREksa0JBQUEsR0FBZTVCLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vc3JjL3BvcnRhbGNhY2hlL0NhY2hlUGFydGl0aW9uLnRzeD81OTQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENlbGxGcmFtZS50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAxOS0yMDIzIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbmltcG9ydCBSZWFjdCwge3VzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlQ2FsbGJhY2t9IGZyb20gJ3JlYWN0J1xuXG5jb25zdCBDYWNoZVBhcnRpdGlvbiA9ICh7IHBhcnRpdGlvblByb3BzLCBwYXJ0aXRpb25JRCwgY2FsbGJhY2sgfSkgPT4ge1xuXG4gICAgY29uc3QgW3BvcnRhbExpc3RDb3VudGVyLCBzZXRQb3J0YWxMaXN0Q291bnRlcl0gPSB1c2VTdGF0ZSgwKVxuXG4gICAgY29uc3QgW3BhcnRpdGlvblN0YXRlLCBzZXRQYXJ0aXRpb25TdGF0ZV0gPSB1c2VTdGF0ZSgnc2V0dXAnKVxuXG4gICAgY29uc3QgY291bnRlclJlZiA9IHVzZVJlZihwb3J0YWxMaXN0Q291bnRlcilcblxuICAgIGNvbnN0IGlzTW91bnRlZFJlZiA9IHVzZVJlZih0cnVlKVxuXG4gICAgY29uc3QgcG9ydGFsQXJyYXlSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIGNvbnN0IHBhcnRpdGlvbk1ldGFkYXRhID0gcGFydGl0aW9uUHJvcHMucGFydGl0aW9uTWV0YWRhdGFNYXAuZ2V0KHBhcnRpdGlvbklEKVxuXG4gICAgY29uc3QgZm9yY2VVcGRhdGUgPSB1c2VDYWxsYmFjaygocG9ydGFsUmVuZGVyTGlzdCkgPT4ge1xuXG4gICAgICAgIHBvcnRhbEFycmF5UmVmLmN1cnJlbnQgPSBwb3J0YWxSZW5kZXJMaXN0XG5cbiAgICAgICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgJiYgc2V0UG9ydGFsTGlzdENvdW50ZXIoKytjb3VudGVyUmVmLmN1cnJlbnQpIC8vIGZvcmNlIHJlbmRlclxuXG4gICAgfSxbXSlcblxuICAgIHVzZUVmZmVjdCgoKT0+e1xuXG4gICAgICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZVxuXG4gICAgICAgIHBhcnRpdGlvbk1ldGFkYXRhLmZvcmNlVXBkYXRlID0gZm9yY2VVcGRhdGVcblxuICAgICAgICBjYWxsYmFjaygpXG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcblxuICAgICAgICAgICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZVxuXG4gICAgICAgIH1cblxuICAgIH0sW10pIFxuXG4gICAgdXNlRWZmZWN0KCgpPT57XG5cbiAgICAgICAgc3dpdGNoIChwYXJ0aXRpb25TdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSAnc2V0dXAnOiB7XG4gICAgICAgICAgICAgICAgc2V0UGFydGl0aW9uU3RhdGUoJ3JlYWR5JylcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFtwYXJ0aXRpb25TdGF0ZV0pXG5cbiAgICByZXR1cm4gPGRpdiBrZXkgPSB7cGFydGl0aW9uSUR9IGRhdGEtdHlwZSA9ICdjYWNoZXBhcnRpdGlvbicgZGF0YS1wYXJ0aXRpb25pZCA9IHtwYXJ0aXRpb25JRH0+XG4gICAgICAgIHtwb3J0YWxBcnJheVJlZi5jdXJyZW50fVxuICAgIDwvZGl2PlxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENhY2hlUGFydGl0aW9uIl0sIm5hbWVzIjpbIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiaSIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJUeXBlRXJyb3IiLCJvIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJBcnJheSIsImZyb20iLCJ0ZXN0IiwibGVuIiwibGVuZ3RoIiwiYXJyMiIsIl9pIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX3giLCJfciIsIl9hcnIiLCJfbiIsIl9kIiwibmV4dCIsImRvbmUiLCJwdXNoIiwidmFsdWUiLCJlcnIiLCJpc0FycmF5IiwicmVhY3RfMSIsIl9faW1wb3J0U3RhciIsInJlcXVpcmUiLCJDYWNoZVBhcnRpdGlvbiIsIl9yZWYiLCJwYXJ0aXRpb25Qcm9wcyIsInBhcnRpdGlvbklEIiwiY2FsbGJhY2siLCJfcmVmMiIsInVzZVN0YXRlIiwiX3JlZjMiLCJwb3J0YWxMaXN0Q291bnRlciIsInNldFBvcnRhbExpc3RDb3VudGVyIiwiX3JlZjQiLCJfcmVmNSIsInBhcnRpdGlvblN0YXRlIiwic2V0UGFydGl0aW9uU3RhdGUiLCJjb3VudGVyUmVmIiwidXNlUmVmIiwiaXNNb3VudGVkUmVmIiwicG9ydGFsQXJyYXlSZWYiLCJwYXJ0aXRpb25NZXRhZGF0YSIsInBhcnRpdGlvbk1ldGFkYXRhTWFwIiwiZ2V0IiwiZm9yY2VVcGRhdGUiLCJ1c2VDYWxsYmFjayIsInBvcnRhbFJlbmRlckxpc3QiLCJjdXJyZW50IiwidXNlRWZmZWN0IiwiY3JlYXRlRWxlbWVudCIsImtleSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/portalcache/CachePartition.tsx\n')},"./src/portalcache/cacheAPI.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// cachehandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    This module manages the InfiniteGridScroller limited (sparse) cache. It also provides support for\n    services which allow the host to actively manage many aspects of the cache. See documentation\n    about the user functionsCallback callback for details. The cacheMax property allows for control of the\n    maximum device memory consumption of the cache.\n\n    The infinite grid scroller stores user cell content (components) in a central hidden cache,\n    from whence the components are pulled into the relevant CellFrames for display. The user components are\n    stored in React portals, with each portal instantiated in a container div (data-type = \'portalwrapper\').\n    These container divs are part of a standard React component list in the real DOM. The contained portals\n    themselves are not part of the real DOM, but are part of React\'s virtual DOM.\n\n    See https://reactjs.org/docs/portals.html for general information about React portals.\n    See https://www.npmjs.com/package/react-reverse-portal for the utility that InfiniteGridScroller\n    uses to manage portals.\n\n    This caching has many advantages, notably the ability to move cells back and forth between the\n    head and tail grids of the Cradle without losing state, and the ability to maintain state for\n    complex components which move beyond the scope of the content of the Cradle.\n\n    There is an important side effect to consider. Instantiated components which are removed from the real DOM\n    into the portal of the virtual DOM have their scroll positions, width, and height set to zero. Therefore if\n    components rely on these values for configuration, they must have a way of storing those values in state\n    (notably the Scroll Pos - scrollLeft or scrollTop), recognizing when the component comes out of the portal cache\n    into the real DOM (width and height are typically no longer both 0), and responding to change in\n    cache state appropriately.\n\n    Tips:\n        - your component is in cache when both width and height = 0\n        - your component is out of cache when both width and height are back to normal\n        - if you create an empty \'scrollerProperties\' property for your component, CellFrame will\n            set it to an object containing scrollerPropertiesRef and cellFramePropertiesRef\n        - if your component does not scroll, there should be no issues.\n\n*/\n/*\n\n    TODO\n\n    - modify clear cache for scroller selection\n\n*/\nvar react_1 = __importDefault(__webpack_require__(/*! react */ "react"));\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ "./node_modules/react-reverse-portal/dist/web/index.js");\nvar CachePartition_1 = __importDefault(__webpack_require__(/*! ./CachePartition */ "./src/portalcache/CachePartition.tsx"));\n// the cache itself is maintained in the root infinitegridscroller component\nvar CacheAPI = /*#__PURE__*/function () {\n  function CacheAPI(CACHE_PARTITION_SIZE) {\n    var _this = this;\n    _classCallCheck(this, CacheAPI);\n    this.globalItemID = 0;\n    this.globalPartitionID = 0;\n    this.itemMetadataMap = new Map();\n    this.scrollerDataMap = new Map();\n    this.partitionProps = {\n      partitionMetadataMap: new Map(),\n      partitionMap: new Map(),\n      partitionRenderList: null,\n      partitionRepoForceUpdate: null,\n      partitionModifiedSet: new Set(),\n      partitionPtr: null // active partition, for followup\n    };\n\n    this.getFacade = function (scrollerID) {\n      var facade = {\n        // get and set data\n        get indexToItemIDMap() {\n          return this.getIndexToItemIDMap();\n        },\n        getIndexToItemIDMap: function getIndexToItemIDMap() {\n          return _this.scrollerDataMap.get(scrollerID).indexToItemIDMap;\n        },\n        get itemSet() {\n          return this.getItemSet();\n        },\n        getItemSet: function getItemSet() {\n          return _this.scrollerDataMap.get(scrollerID).itemSet;\n        },\n        itemMetadataMap: _this.itemMetadataMap,\n        get requestedSet() {\n          return this.getRequestedSet();\n        },\n        getRequestedSet: function getRequestedSet() {\n          return _this.scrollerDataMap.get(scrollerID).requestedSet;\n        },\n        set partitionRepoForceUpdate(fn) {\n          this.setPartitionRepoForceUpdate(fn);\n        },\n        setPartitionRepoForceUpdate: function setPartitionRepoForceUpdate(fn) {\n          _this.partitionProps.partitionRepoForceUpdate = fn;\n        },\n        set cradleParameters(parms) {\n          this.setCradleParameters(parms);\n        },\n        setCradleParameters: function setCradleParameters(parms) {\n          _this.scrollerDataMap.get(scrollerID).cradleParameters = parms;\n        },\n        set portalPartitionItemsForDeleteList(list) {\n          this.setPortalPartitionItemsForDeleteList(list);\n        },\n        setPortalPartitionItemsForDeleteList: function setPortalPartitionItemsForDeleteList(list) {\n          _this.scrollerDataMap.get(scrollerID).portalPartitionItemsForDeleteList = list;\n        },\n        get instance() {\n          return this.getInstance();\n        },\n        getInstance: function getInstance() {\n          return _this;\n        },\n        // methods\n        unRegisterScroller: function unRegisterScroller(itemSet) {\n          return _this.unRegisterScroller(scrollerID, itemSet);\n        },\n        renderPartitionRepo: function renderPartitionRepo() {\n          return _this.renderPartitionRepo();\n        },\n        renderPortalLists: function renderPortalLists() {\n          return _this.renderPortalLists();\n        },\n        clearCache: function clearCache() {\n          return _this.clearCache(scrollerID);\n        },\n        changeCacheListsize: function changeCacheListsize(newlistsize, deleteListCallback, changeListsizeCallback) {\n          return _this.changeCacheListsize(scrollerID, newlistsize, deleteListCallback, changeListsizeCallback);\n        },\n        matchCacheToCradle: function matchCacheToCradle(cradleIndexList, deleteListCallback) {\n          return _this.matchCacheToCradle(scrollerID, cradleIndexList, deleteListCallback);\n        },\n        pareCacheToMax: function pareCacheToMax(cacheMax, cradleIndexList, deleteListCallback) {\n          return _this.pareCacheToMax(scrollerID, cacheMax, cradleIndexList, deleteListCallback);\n        },\n        guardAgainstRunawayCaching: function guardAgainstRunawayCaching(cacheMax, cradleListLength, MAX_CACHE_OVER_RUN) {\n          return _this.guardAgainstRunawayCaching(scrollerID, cacheMax, cradleListLength, MAX_CACHE_OVER_RUN);\n        },\n        preload: function preload(finalCallback, nullItemSetMaxListsize) {\n          return _this.preload(scrollerID, finalCallback, nullItemSetMaxListsize);\n        },\n        getCacheIndexMap: function getCacheIndexMap() {\n          return _this.getCacheIndexMap(scrollerID);\n        },\n        getCradleIndexMap: function getCradleIndexMap(cradleIndexList) {\n          return _this.getCradleIndexMap(scrollerID, cradleIndexList);\n        },\n        getCacheItemMap: function getCacheItemMap() {\n          return _this.getCacheItemMap(scrollerID);\n        },\n        moveIndex: function moveIndex(tolowindex, fromlowindex, fromhighindex) {\n          return _this.moveIndex(scrollerID, tolowindex, fromlowindex, fromhighindex);\n        },\n        insertRemoveIndex: function insertRemoveIndex(index, highrange, increment, listsize) {\n          return _this.insertRemoveIndex(scrollerID, index, highrange, increment, listsize);\n        },\n        registerPendingPortal: function registerPendingPortal(index) {\n          return _this.registerPendingPortal(scrollerID, index);\n        },\n        unregisterPendingPortal: function unregisterPendingPortal(index) {\n          return _this.unregisterPendingPortal(scrollerID, index);\n        },\n        getNewItemID: function getNewItemID() {\n          return _this.getNewItemID();\n        },\n        getNewOrExistingItemID: function getNewOrExistingItemID(index) {\n          return _this.getNewOrExistingItemID(scrollerID, index);\n        },\n        createPortal: function createPortal(component, index, itemID, scrollerProperties) {\n          var isPreload = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n          return _this.createPortal(scrollerID, component, index, itemID, scrollerProperties, isPreload = false);\n        },\n        deletePortalByIndex: function deletePortalByIndex(index, deleteListCallback) {\n          return _this.deletePortalByIndex(scrollerID, index, deleteListCallback);\n        },\n        applyPortalPartitionItemsForDeleteList: function applyPortalPartitionItemsForDeleteList() {\n          return _this.applyPortalPartitionItemsForDeleteList(scrollerID);\n        },\n        hasPortal: function hasPortal(itemID) {\n          return _this.hasPortal(itemID);\n        },\n        getPortalMetadata: function getPortalMetadata(itemID) {\n          return _this.getPortalMetadata(itemID);\n        }\n      };\n      return facade;\n    };\n    this.unRegisterScroller = function (scrollerID, itemSet) {\n      _this.scrollerDataMap["delete"](scrollerID);\n      itemSet.forEach(function (itemID) {\n        var _this$itemMetadataMap = _this.itemMetadataMap.get(itemID),\n          partitionID = _this$itemMetadataMap.partitionID;\n        _this.removePartitionPortal(partitionID, itemID);\n        _this.itemMetadataMap["delete"](itemID);\n      });\n      _this.renderPortalLists();\n    };\n    // updateListsize(listsize) causes an InfiniteGridScroller useState update\n    // of the listsize throughout\n    // updateListsize // function passed from InfiniteGridScroller\n    // ===========================[ CACHE PARTITION MANAGEMENT ]===============================\n    // partitions are added but not removed\n    this.renderPartitionRepo = function () {\n      _this.partitionProps.partitionRenderList = Array.from(_this.partitionProps.partitionMap.values());\n      _this.partitionProps.partitionRepoForceUpdate(_this.partitionProps.partitionRenderList);\n    };\n    this.addPartition = function () {\n      var partitionID = _this.globalPartitionID++;\n      _this.partitionProps.partitionMetadataMap.set(partitionID, {\n        portalMap: new Map(),\n        mapcount: 0,\n        portalRenderList: null,\n        modified: false,\n        forceUpdate: null,\n        partitionID: partitionID\n      });\n      var resolvefunc = {\n        current: null\n      };\n      var promise = new Promise(function (resolve) {\n        resolvefunc.current = resolve;\n      });\n      var callback = function callback() {\n        resolvefunc.current(partitionID);\n      };\n      _this.partitionProps.partitionMap.set(partitionID, react_1["default"].createElement(CachePartition_1["default"], {\n        key: partitionID,\n        partitionProps: _this.partitionProps,\n        partitionID: partitionID,\n        callback: callback\n      }));\n      _this.renderPartitionRepo();\n      return promise;\n    };\n    this.addPartitionPortal = function (partitionID, itemID, portal) {\n      var partitionMetadata = _this.partitionProps.partitionMetadataMap.get(partitionID);\n      partitionMetadata.portalMap.set(itemID, portal);\n      _this.partitionProps.partitionModifiedSet.add(partitionID);\n    };\n    this.removePartitionPortal = function (partitionID, itemID) {\n      var partitionMetadata = _this.partitionProps.partitionMetadataMap.get(partitionID);\n      partitionMetadata.portalMap["delete"](itemID);\n      partitionMetadata.mapcount -= 1;\n      _this.partitionProps.partitionModifiedSet.add(partitionID);\n    };\n    this.renderPartition = function (partitionID) {\n      var partitionMetadata = _this.partitionProps.partitionMetadataMap.get(partitionID);\n      if (!partitionMetadata) return;\n      partitionMetadata.portalRenderList = Array.from(partitionMetadata.portalMap.values());\n      // if forceUpdate has not yet been assigned, it is in the works from first call of partition\n      partitionMetadata.forceUpdate && partitionMetadata.forceUpdate(partitionMetadata.portalRenderList);\n    };\n    // set state of the CachePartition component of the scroller to trigger render\n    this.renderPortalLists = function () {\n      var partitionModifiedSet = _this.partitionProps.partitionModifiedSet;\n      if (partitionModifiedSet.size) {\n        partitionModifiedSet.forEach(function (partitionID) {\n          _this.renderPartition(partitionID);\n        });\n        _this.partitionProps.partitionModifiedSet.clear();\n      }\n    };\n    this.clearCache = function (scrollerID) {\n      var scrollerDataMap = _this.scrollerDataMap,\n        itemMetadataMap = _this.itemMetadataMap;\n      var datamap = scrollerDataMap.get(scrollerID);\n      var indexToItemIDMap = datamap.indexToItemIDMap,\n        itemSet = datamap.itemSet,\n        requestedSet = datamap.requestedSet;\n      if (scrollerDataMap.size == 1) {\n        // clear base data\n        itemMetadataMap.clear();\n        // clear cache partitions\n        _this.partitionProps.partitionMetadataMap.clear();\n        _this.partitionProps.partitionMap.clear();\n        _this.partitionProps.partitionRenderList = [];\n        _this.partitionProps.partitionModifiedSet.clear();\n        _this.partitionProps.partitionPtr = null;\n        _this.partitionProps.partitionRepoForceUpdate(null);\n      } else {\n        itemSet.forEach(function (itemID) {\n          var _itemMetadataMap$get = itemMetadataMap.get(itemID),\n            partitionID = _itemMetadataMap$get.partitionID;\n          _this.removePartitionPortal(partitionID, itemID);\n        });\n        _this.renderPortalLists();\n      }\n      indexToItemIDMap.clear();\n      itemSet.clear();\n      requestedSet.clear();\n    };\n    //===========================[ REPOSITORY AND LIST MANAGEMENT ]==================================\n    // ----------------------------[ basic operations ]--------------------------\n    // called from Cradle.nullItemSetMaxListsize, and serviceHandler.setListsize\n    this.changeCacheListsize = function (scrollerID, newlistsize, deleteListCallback, changeListsizeCallback) {\n      // match cache to newlistsize\n      var portalIndexMap = _this.scrollerDataMap.get(scrollerID).indexToItemIDMap;\n      var mapkeysList = Array.from(portalIndexMap.keys());\n      mapkeysList.sort(function (a, b) {\n        return a - b;\n      });\n      var highestindex = mapkeysList.at(-1);\n      if (highestindex > newlistsize - 1) {\n        // pare the cache\n        var parelist = mapkeysList.filter(function (index) {\n          return index > newlistsize - 1;\n        });\n        _this.deletePortalByIndex(scrollerID, parelist, deleteListCallback);\n      }\n      changeListsizeCallback && changeListsizeCallback(newlistsize);\n    };\n    // ----------------------[ cache size limit enforceent ]------------------\n    this.matchCacheToCradle = function (scrollerID, cradleIndexList, deleteListCallback) {\n      var mapkeys = Array.from(_this.scrollerDataMap.get(scrollerID).indexToItemIDMap.keys());\n      var delkeys = mapkeys.filter(function (key) {\n        return !cradleIndexList.includes(key);\n      });\n      if (delkeys.length) {\n        _this.deletePortalByIndex(scrollerID, delkeys, deleteListCallback);\n        return true;\n      } else {\n        return false;\n      }\n    };\n    this.pareCacheToMax = function (scrollerID, cacheMax, cradleIndexList, deleteListCallback) {\n      var modelLength = cradleIndexList.length;\n      // determine need for paring\n      if (!cacheMax || !modelLength) return false;\n      var max = Math.max(modelLength, cacheMax);\n      var portalIndexMap = _this.scrollerDataMap.get(scrollerID).indexToItemIDMap,\n        requestedSet = _this.scrollerDataMap.get(scrollerID).requestedSet;\n      if (portalIndexMap.size + requestedSet.size <= max) return false;\n      // sort the map keys\n      var mapkeyslist = Array.from(portalIndexMap.keys()),\n        requestedkeys = Array.from(requestedSet.keys());\n      var mapkeys = [].concat(mapkeyslist, requestedkeys);\n      mapkeys.sort(function (a, b) {\n        return a - b;\n      });\n      // get number to pare\n      var mapLength = mapkeys.length,\n        parecount = mapLength - max;\n      // distribute paring proportionally at front and back\n      var headindex = cradleIndexList[0],\n        tailindex = cradleIndexList[modelLength - 1],\n        headpos = mapkeys.indexOf(headindex),\n        tailpos = mapkeys.indexOf(tailindex);\n      var headroom = headpos,\n        tailroom = mapLength - (tailpos + 1),\n        pareroom = headroom + tailroom;\n      var headparecount = Math.floor(headroom / pareroom * parecount),\n        tailparecount = parecount - headparecount;\n      // collect indexes to pare\n      var headlist = mapkeys.slice(0, headparecount),\n        taillist = mapkeys.slice(mapLength - tailparecount);\n      var delList = [].concat(_toConsumableArray(headlist), _toConsumableArray(taillist));\n      _this.deletePortalByIndex(scrollerID, delList, deleteListCallback);\n      return true;\n    };\n    this.guardAgainstRunawayCaching = function (scrollerID, cacheMax, cradleListLength, MAX_CACHE_OVER_RUN) {\n      if (!cacheMax) return false;\n      var _this$scrollerDataMap = _this.scrollerDataMap.get(scrollerID),\n        indexToItemIDMap = _this$scrollerDataMap.indexToItemIDMap,\n        requestedSet = _this$scrollerDataMap.requestedSet;\n      var max = Math.max(cradleListLength, cacheMax);\n      if (indexToItemIDMap.size + requestedSet.size <= max * MAX_CACHE_OVER_RUN) {\n        return false;\n      } else {\n        return true;\n      }\n    };\n    // --------------------------------[ preload ]--------------------------------\n    this.preload = function (scrollerID, finalCallback, nullItemSetMaxListsize) {\n      var _this$scrollerDataMap2 = _this.scrollerDataMap.get(scrollerID),\n        cradleParameters = _this$scrollerDataMap2.cradleParameters;\n      var scrollerPropertiesRef = cradleParameters.scrollerPropertiesRef;\n      var _cradleParameters$han = cradleParameters.handlersRef.current,\n        stateHandler = _cradleParameters$han.stateHandler,\n        serviceHandler = _cradleParameters$han.serviceHandler,\n        cradleInheritedProperties = cradleParameters.cradleInheritedPropertiesRef.current,\n        cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n      var getItem = cradleInheritedProperties.getItem,\n        cacheMax = cradleInheritedProperties.cacheMax,\n        listsize = cradleInternalProperties.listsize;\n      var promises = [];\n      var cacheSize = cacheMax !== null && cacheMax !== void 0 ? cacheMax : 0;\n      cacheSize = Math.min(cacheSize, listsize);\n      var preloadsize = cacheSize ? cacheSize : listsize;\n      var breakloop = {\n        current: false\n      };\n      var maxListsizeInterrupt = function maxListsizeInterrupt(index) {\n        breakloop.current = true;\n        nullItemSetMaxListsize(index);\n      };\n      if (stateHandler.isMountedRef.current) {\n        var indexToItemIDMap = _this.scrollerDataMap.get(scrollerID).indexToItemIDMap;\n        var _serviceHandler$callb = serviceHandler.callbacks,\n          preloadIndexCallback = _serviceHandler$callb.preloadIndexCallback,\n          itemExceptionCallback = _serviceHandler$callb.itemExceptionCallback;\n        for (var index = 0; index < preloadsize; index++) {\n          preloadIndexCallback && preloadIndexCallback(index);\n          if (!indexToItemIDMap.has(index)) {\n            var promise = _this.preloadItem(scrollerID, index, getItem, scrollerPropertiesRef, itemExceptionCallback, maxListsizeInterrupt);\n            promises.push(promise);\n          }\n          if (breakloop.current) break;\n        }\n      }\n      Promise.allSettled(promises).then(function () {\n        _this.renderPortalLists();\n        finalCallback();\n      });\n    };\n    this.applyPortalPartitionItemsForDeleteList = function (scrollerID) {\n      var _this$scrollerDataMap3 = _this.scrollerDataMap.get(scrollerID),\n        portalPartitionItemsForDeleteList = _this$scrollerDataMap3.portalPartitionItemsForDeleteList;\n      if (portalPartitionItemsForDeleteList && portalPartitionItemsForDeleteList.length) {\n        var _iterator = _createForOfIteratorHelper(portalPartitionItemsForDeleteList),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n            _this.removePartitionPortal(item.partitionID, item.itemID);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        _this.scrollerDataMap.get(scrollerID).portalPartitionItemsForDeleteList = [];\n        _this.renderPortalLists();\n      }\n    };\n    this.CACHE_PARTITION_SIZE = CACHE_PARTITION_SIZE;\n  }\n  // ===========================[ Scroller Registration & Maintenance ]===============================\n  // the only member accessed directly. All other access is through the facade\n  _createClass(CacheAPI, [{\n    key: "registerScroller",\n    value: function registerScroller(scrollerID) {\n      this.scrollerDataMap.set(scrollerID, {\n        cradleParameters: null,\n        indexToItemIDMap: new Map(),\n        // some portals may have been requested by requestidlecallback, not yet created\n        itemSet: new Set(),\n        requestedSet: new Set(),\n        portalPartitionItemsForDeleteList: null\n      });\n      return this.getFacade(scrollerID);\n    }\n  }, {\n    key: "findPartitionWithRoom",\n    value: function findPartitionWithRoom() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var CACHE_PARTITION_SIZE, partitionMetadataMap, partitionPtr, partitionMetadata, _iterator2, _step2, _step2$value, partitionID, _partitionMetadata;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              CACHE_PARTITION_SIZE = this.CACHE_PARTITION_SIZE;\n              partitionMetadataMap = this.partitionProps.partitionMetadataMap;\n              partitionPtr = this.partitionProps.partitionPtr;\n              if (!(partitionPtr !== null)) {\n                _context.next = 8;\n                break;\n              }\n              partitionMetadata = partitionMetadataMap.get(partitionPtr);\n              if (!(partitionMetadata.mapcount < CACHE_PARTITION_SIZE)) {\n                _context.next = 8;\n                break;\n              }\n              partitionMetadata.mapcount += 1;\n              return _context.abrupt("return", partitionPtr);\n            case 8:\n              partitionPtr = null;\n              _iterator2 = _createForOfIteratorHelper(partitionMetadataMap);\n              _context.prev = 10;\n              _iterator2.s();\n            case 12:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 20;\n                break;\n              }\n              _step2$value = _slicedToArray(_step2.value, 2), partitionID = _step2$value[0], _partitionMetadata = _step2$value[1];\n              if (!(_partitionMetadata.mapcount < CACHE_PARTITION_SIZE)) {\n                _context.next = 18;\n                break;\n              }\n              _partitionMetadata.mapcount += 1;\n              partitionPtr = partitionID;\n              return _context.abrupt("break", 20);\n            case 18:\n              _context.next = 12;\n              break;\n            case 20:\n              _context.next = 25;\n              break;\n            case 22:\n              _context.prev = 22;\n              _context.t0 = _context["catch"](10);\n              _iterator2.e(_context.t0);\n            case 25:\n              _context.prev = 25;\n              _iterator2.f();\n              return _context.finish(25);\n            case 28:\n              if (!(partitionPtr === null)) {\n                _context.next = 34;\n                break;\n              }\n              _context.next = 31;\n              return this.addPartition();\n            case 31:\n              partitionPtr = _context.sent;\n              partitionMetadata = partitionMetadataMap.get(partitionPtr);\n              partitionMetadata.mapcount += 1;\n            case 34:\n              this.partitionProps.partitionPtr = partitionPtr;\n              return _context.abrupt("return", partitionPtr);\n            case 36:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this, [[10, 22, 25, 28]]);\n      }));\n    }\n    // =========================[ SNAPSHOTS ]=========================\n  }, {\n    key: "getCacheIndexMap",\n    value: function getCacheIndexMap(scrollerID) {\n      return new Map(this.scrollerDataMap.get(scrollerID).indexToItemIDMap);\n    }\n  }, {\n    key: "getCradleIndexMap",\n    value: function getCradleIndexMap(scrollerID, cradleIndexList) {\n      var cradleMap = new Map(),\n        _this$scrollerDataMap4 = this.scrollerDataMap.get(scrollerID),\n        indexToItemIDMap = _this$scrollerDataMap4.indexToItemIDMap;\n      var _iterator3 = _createForOfIteratorHelper(cradleIndexList),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var index = _step3.value;\n          cradleMap.set(index, indexToItemIDMap.get(index));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return cradleMap;\n    }\n  }, {\n    key: "getCacheItemMap",\n    value: function getCacheItemMap(scrollerID) {\n      var cachelist = new Map();\n      var _this$scrollerDataMap5 = this.scrollerDataMap.get(scrollerID),\n        itemSet = _this$scrollerDataMap5.itemSet;\n      var itemMetadataMap = this.itemMetadataMap;\n      // for (const [key, value] of this.itemMetadataMap) {\n      var _iterator4 = _createForOfIteratorHelper(itemSet),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var itemID = _step4.value;\n          var metadata = itemMetadataMap.get(itemID);\n          var index = metadata.index,\n            component = metadata.component;\n          cachelist.set(itemID, {\n            index: index,\n            component: component\n          });\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return cachelist;\n    }\n    // ==========================[ SERVICE SUPPORT ]=========================\n    // --------------------------[ move indexes ]-------------------------------\n    // move is coerced by servicehandler to be within current list bounds\n  }, {\n    key: "moveIndex",\n    value: function moveIndex(scrollerID, tolowindex, fromlowindex, fromhighindex) {\n      var indexToItemIDMap = this.scrollerDataMap.get(scrollerID).indexToItemIDMap;\n      var itemMetadataMap = this.itemMetadataMap;\n      // ----------- define parameters ---------------\n      var moveblocksize = fromhighindex - fromlowindex + 1,\n        moveincrement = tolowindex - fromlowindex,\n        tohighindex = tolowindex + (moveblocksize - 1);\n      var movedirection = moveincrement > 0 ?\n      // move block up in list\n      \'up\' :\n      // shift down, make room for shiftingindex above\n      \'down\'; // shift up, make room for shiftingindex below\n      // ------------ find bounds of from and to blocks in cache -------------\n      var orderedindexlist = Array.from(indexToItemIDMap.keys()).sort(function (a, b) {\n        return a - b;\n      });\n      var reverseorderedindexlist = orderedindexlist.slice().reverse();\n      var tolowindexptr = orderedindexlist.findIndex(function (value) {\n          return value >= tolowindex;\n        }),\n        fromlowindexptr = orderedindexlist.findIndex(function (value) {\n          return value >= fromlowindex;\n        });\n      var tohighindexptr = reverseorderedindexlist.findIndex(function (value) {\n          return value <= tohighindex;\n        }),\n        fromhighindexptr = reverseorderedindexlist.findIndex(function (value) {\n          return value <= fromhighindex;\n        });\n      // get required inverse\n      {\n        var cachelistcount = orderedindexlist.length;\n        if (tohighindexptr != -1) tohighindexptr = cachelistcount - 1 - tohighindexptr;\n        if (fromhighindexptr != -1) fromhighindexptr = cachelistcount - 1 - fromhighindexptr;\n      }\n      // ---------------- capture index data to move ----------------\n      var listtoprocessformove;\n      if (fromlowindexptr == -1 && fromhighindexptr == -1) {\n        // scope is out of view\n        listtoprocessformove = [];\n      } else if (fromhighindexptr == -1) {\n        // scope is partially in view\n        listtoprocessformove = orderedindexlist.slice(fromlowindexptr);\n      } else {\n        // scope is entirely in view\n        listtoprocessformove = orderedindexlist.slice(fromlowindexptr, fromhighindexptr + 1);\n      }\n      var processtomoveMap = new Map();\n      var capturemoveindexFn = function capturemoveindexFn(index) {\n        processtomoveMap.set(index, indexToItemIDMap.get(index));\n      };\n      listtoprocessformove.forEach(capturemoveindexFn);\n      // ------------- get list of indexes to shift out of the way ---------------\n      var listtoprocessfordisplace;\n      if (movedirection == \'down\') {\n        // block is moving down, shift is up; toindex < fromindex\n        if (tolowindexptr == -1 && fromlowindexptr == -1) {\n          listtoprocessfordisplace = [];\n        } else if (fromlowindexptr == -1) {\n          listtoprocessfordisplace = orderedindexlist.slice(tolowindexptr);\n        } else {\n          listtoprocessfordisplace = orderedindexlist.slice(tolowindexptr, fromlowindexptr);\n        }\n      } else {\n        // shiftdirection == -1; block is moving up, shift is down; fromindex < toindex\n        if (tohighindexptr == -1 && fromhighindexptr == -1) {\n          listtoprocessfordisplace = [];\n        } else if (tohighindexptr == -1) {\n          listtoprocessfordisplace = orderedindexlist.slice(fromhighindexptr + 1);\n        } else {\n          listtoprocessfordisplace = orderedindexlist.slice(fromhighindexptr + 1, tohighindexptr + 1);\n        }\n      }\n      if (movedirection == \'down\') listtoprocessfordisplace.reverse();\n      // -------------- move indexes out of the way --------------\n      var processeddisplaceList = [];\n      var processsdisplaceindexFn = function processsdisplaceindexFn(index) {\n        var itemID = indexToItemIDMap.get(index);\n        var newIndex = movedirection == \'up\' ? index - moveblocksize : index + moveblocksize;\n        indexToItemIDMap.set(newIndex, itemID);\n        itemMetadataMap.get(itemID).index = newIndex;\n        processeddisplaceList.push(newIndex);\n      };\n      listtoprocessfordisplace.forEach(processsdisplaceindexFn);\n      // ------------ replace shifted index space with moved indexes ----------\n      var processedmoveList = [];\n      var processmoveindexFn = function processmoveindexFn(itemID, index) {\n        var newIndex = index + moveincrement; // swap\n        indexToItemIDMap.set(newIndex, itemID);\n        itemMetadataMap.get(itemID).index = newIndex;\n        processedmoveList.push(newIndex);\n      };\n      processtomoveMap.forEach(processmoveindexFn);\n      // -----------return list of processed indexes to caller --------\n      // for synchrnization with cradle cellFrames\n      var processedIndexes = [].concat(processeddisplaceList, processedmoveList).sort(function (a, b) {\n        return a - b;\n      });\n      return processedIndexes;\n    }\n    // ----------------------------[ insert/remove indexes ]------------------------------\n    // insert or remove indexes: much of this deals with the fact that the cache is sparse.\n  }, {\n    key: "insertRemoveIndex",\n    value: function insertRemoveIndex(scrollerID, index, highrange, increment, listsize) {\n      // clarity\n      var isInserting = increment == 1;\n      var isRemoving = increment == -1;\n      var emptyreturn = [null, null, [], [], [], []]; // no action return value\n      // cache resources\n      var indexToItemIDMap = this.scrollerDataMap.get(scrollerID).indexToItemIDMap;\n      var itemMetadataMap = this.itemMetadataMap;\n      var orderedCacheIndexList = Array.from(indexToItemIDMap.keys()).sort(function (a, b) {\n        return a - b;\n      }); // ascending order\n      var itemSet = this.scrollerDataMap.get(scrollerID).itemSet;\n      // ---------- define contiguous range parameters; add sentinels ---------------\n      // high range is the highest index number of the insert/remove range\n      var highrangeindex = highrange;\n      var lowrangeindex = index; // semantics - name symmetry\n      if (isRemoving) {\n        // removal must be entirely within scope of the list\n        if (highrangeindex > listsize - 1) {\n          highrangeindex = listsize - 1;\n          if (highrangeindex < lowrangeindex) return emptyreturn;\n        }\n      } else {\n        // isInserting\n        // addition can at most start at the next lowrangeindex above the current list; aka append\n        if (lowrangeindex > listsize) {\n          var diff = lowrangeindex - listsize;\n          lowrangeindex -= diff;\n          highrangeindex -= diff;\n          // return emptyreturn\n        }\n      }\n      // rangecount is the absolute number in the insert/remove contiguous range\n      var rangecount = highrangeindex - lowrangeindex + 1;\n      // range increment adds sign to rangecount to indicate add/remove\n      var rangeincrement = rangecount * increment;\n      var startChangeIndex = increment == 1 ? lowrangeindex : highrangeindex + (rangeincrement + 1);\n      var toShiftStartIndex; // start of indexes to shift up (insert) or down (remove)\n      if (isInserting) {\n        toShiftStartIndex = lowrangeindex;\n      } else {\n        // isRemoving\n        toShiftStartIndex = highrangeindex + 1;\n      }\n      // ---------- define range boundaries within ordered cache index list ------------\n      // obtain starptr for indexes to shift\n      var toShiftStartCachePtr = orderedCacheIndexList.findIndex(function (value) {\n        return value >= toShiftStartIndex;\n      });\n      // obtain lowCacheRangePtr...\n      var lowCacheRangePtr = orderedCacheIndexList.findIndex(function (value) {\n        return value >= lowrangeindex && value <= highrangeindex;\n      });\n      // obtain highCacheRangePtr...\n      var reverseCacheIndexList = Array.from(orderedCacheIndexList).reverse();\n      var highCacheRangePtr = reverseCacheIndexList.findIndex(function (value) {\n        return value <= highrangeindex && value >= lowrangeindex;\n      });\n      // take inverse of highCacheRangePtr for non-reverse sort\n      if (highCacheRangePtr != -1) {\n        highCacheRangePtr = orderedCacheIndexList.length - 1 - highCacheRangePtr;\n        if (highCacheRangePtr < lowCacheRangePtr) highCacheRangePtr = -1;\n      }\n      // ----------- isolate index range list and shift list ------------\n      // cache inputs\n      var cacheRangeIndexesList,\n        // for either insert or remove\n        cacheToShiftIndexesList; // for either insert or remove\n      // get inputs\n      if (lowCacheRangePtr == -1) {\n        // core scope is out of view\n        cacheRangeIndexesList = [];\n        cacheToShiftIndexesList = [];\n      } else if (highCacheRangePtr == -1) {\n        // core scope is partially in view; lowCacheRangePtr is available\n        // all items above lowCacheRangePtr must have indexes reset\n        cacheRangeIndexesList = orderedCacheIndexList.slice(lowCacheRangePtr);\n        if (isInserting) {\n          cacheToShiftIndexesList = cacheRangeIndexesList.slice();\n        } else {\n          if (toShiftStartCachePtr == -1) {\n            cacheToShiftIndexesList = [];\n          } else {\n            cacheToShiftIndexesList = orderedCacheIndexList.slice(toShiftStartCachePtr);\n          }\n        }\n      } else {\n        // range fully in view\n        cacheRangeIndexesList = orderedCacheIndexList.slice(lowCacheRangePtr, highCacheRangePtr + 1);\n        if (isInserting) {\n          cacheToShiftIndexesList = orderedCacheIndexList.slice(toShiftStartCachePtr);\n        } else {\n          if (toShiftStartCachePtr == -1) {\n            cacheToShiftIndexesList = [];\n          } else {\n            cacheToShiftIndexesList = orderedCacheIndexList.slice(toShiftStartCachePtr);\n          }\n        }\n      }\n      // ----------- list cache indexes and items to replace or remove -----------\n      // cache outputs\n      // for insert, the range being inserted; for remove, any tail cradle items abandoned\n      var cacheIndexesToReplaceList = [],\n        // for insert, the range being inserted\n        cacheIndexesToRemoveList = [],\n        // for remove, the range being removed\n        cacheItemsToRemoveList = []; // for remove, derived from the previous\n      if (isInserting) {\n        cacheIndexesToReplaceList = cacheRangeIndexesList;\n      } else {\n        // isRemoving\n        cacheIndexesToRemoveList = cacheRangeIndexesList;\n        // get cacheItemsToRemoveList\n        var _iterator5 = _createForOfIteratorHelper(cacheIndexesToRemoveList),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _index = _step5.value;\n            cacheItemsToRemoveList.push(indexToItemIDMap.get(_index));\n            indexToItemIDMap["delete"](_index);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n      // ----------- conduct cache operations; capture list of shifted indexes ----------\n      // increment higher from top of list to preserve lower values for subsequent increment\n      if (isInserting) cacheToShiftIndexesList.reverse();\n      var cacheIndexesShiftedList = []; // track shifted indexes\n      var cacheIndexesTransferredSet = new Set(); // obtain list of orphaned indexes\n      // function modify index-to-itemid map, and metadata map, for index shifts\n      var processIndexFn = function processIndexFn(index) {\n        var itemID = indexToItemIDMap.get(index);\n        var newIndex = index + rangeincrement;\n        if (isRemoving) {\n          cacheIndexesTransferredSet.add(index);\n          cacheIndexesTransferredSet["delete"](newIndex);\n        }\n        indexToItemIDMap.set(newIndex, itemID);\n        itemMetadataMap.get(itemID).index = newIndex;\n        cacheIndexesShiftedList.push(newIndex);\n      };\n      // walk through items to shift\n      cacheToShiftIndexesList.forEach(processIndexFn);\n      // delete remaining indexes and items now duplicates; track portal data to remove after cradle updated\n      var portalPartitionItemsForDeleteList = []; // hold portals for deletion until after after cradle synch\n      var cacheIndexesRemovedList = [];\n      if (isInserting) {\n        var _iterator6 = _createForOfIteratorHelper(cacheIndexesToReplaceList),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var _index2 = _step6.value;\n            indexToItemIDMap["delete"](_index2);\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      } else {\n        // isRemoving\n        var _iterator7 = _createForOfIteratorHelper(cacheItemsToRemoveList),\n          _step7;\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var itemID = _step7.value;\n            var _itemMetadataMap$get2 = itemMetadataMap.get(itemID),\n              partitionID = _itemMetadataMap$get2.partitionID;\n            portalPartitionItemsForDeleteList.push({\n              itemID: itemID,\n              partitionID: partitionID\n            });\n            itemMetadataMap["delete"](itemID);\n            itemSet["delete"](itemID);\n          }\n          // abandoned indexes from remove process\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n        var orphanedIndexesTransferredList = Array.from(cacheIndexesTransferredSet);\n        for (var _i2 = 0, _orphanedIndexesTrans = orphanedIndexesTransferredList; _i2 < _orphanedIndexesTrans.length; _i2++) {\n          var _index3 = _orphanedIndexesTrans[_i2];\n          indexToItemIDMap["delete"](_index3);\n        }\n        cacheIndexesRemovedList = cacheIndexesToRemoveList.concat(orphanedIndexesTransferredList);\n      }\n      if (isInserting) cacheIndexesShiftedList.reverse(); // return to ascending order\n      // --------------- returns ---------------\n      // return values for caller to send to contenthandler for cradle synchronization\n      return [startChangeIndex, rangeincrement, cacheIndexesShiftedList, cacheIndexesRemovedList, cacheIndexesToReplaceList, portalPartitionItemsForDeleteList];\n    }\n    // ==========================[ INDIVIDUAL PORTAL MANAGEMENT ]============================\n    // used for size calculation in pareCacheToMax\n    // registers indexes when requested but before retrieved and entered into cache\n  }, {\n    key: "registerPendingPortal",\n    value: function registerPendingPortal(scrollerID, index) {\n      this.scrollerDataMap.get(scrollerID).requestedSet.add(index);\n    }\n  }, {\n    key: "unregisterPendingPortal",\n    value: function unregisterPendingPortal(scrollerID, index) {\n      var scrollerDataMap = this.scrollerDataMap.get(scrollerID);\n      if (scrollerDataMap) {\n        // otherwise scroller has been deleted\n        scrollerDataMap.requestedSet["delete"](index);\n      }\n    }\n  }, {\n    key: "getNewItemID",\n    value: function getNewItemID() {\n      return this.globalItemID++;\n    }\n    // get new or existing itemID for contentfunctions.createCellFrame\n  }, {\n    key: "getNewOrExistingItemID",\n    value: function getNewOrExistingItemID(scrollerID, index) {\n      var _this$scrollerDataMap6 = this.scrollerDataMap.get(scrollerID),\n        indexToItemIDMap = _this$scrollerDataMap6.indexToItemIDMap;\n      var itemID = indexToItemIDMap.has(index) ? indexToItemIDMap.get(index) : this.getNewItemID();\n      return itemID;\n    }\n    // create new portal\n  }, {\n    key: "createPortal",\n    value: function createPortal(scrollerID, component, index, itemID, scrollerProperties) {\n      var isPreload = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this$scrollerDataMap7, layout, cellHeight, cellWidth, orientation, portalNode, partitionID, portal, portalMetadata;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.unregisterPendingPortal(scrollerID, index);\n              _this$scrollerDataMap7 = this.scrollerDataMap.get(scrollerID).cradleParameters.cradleInheritedPropertiesRef.current, layout = _this$scrollerDataMap7.layout, cellHeight = _this$scrollerDataMap7.cellHeight, cellWidth = _this$scrollerDataMap7.cellWidth, orientation = _this$scrollerDataMap7.orientation;\n              portalNode = createPortalNode(index, itemID);\n              _context2.next = 5;\n              return this.findPartitionWithRoom();\n            case 5:\n              partitionID = _context2.sent;\n              portal = react_1["default"].createElement("div", {\n                "data-type": \'portalwrapper\',\n                key: itemID,\n                "data-itemid": itemID,\n                "data-index": index\n              }, react_1["default"].createElement(react_reverse_portal_1.InPortal, {\n                key: itemID,\n                node: portalNode\n              }, " ", component, " "));\n              this.addPartitionPortal(partitionID, itemID, portal);\n              portalMetadata = {\n                portalNode: portalNode,\n                index: index,\n                itemID: itemID,\n                scrollerID: scrollerID,\n                scrollerProperties: scrollerProperties,\n                component: component,\n                partitionID: partitionID\n              };\n              this.itemMetadataMap.set(itemID, portalMetadata);\n              this.scrollerDataMap.get(scrollerID).itemSet.add(itemID);\n              this.scrollerDataMap.get(scrollerID).indexToItemIDMap.set(index, itemID);\n              if (!isPreload) this.renderPortalLists();\n              return _context2.abrupt("return", portalMetadata);\n            case 14:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n    // used for preloading new item\n  }, {\n    key: "preloadItem",\n    value: function preloadItem(scrollerID, index, getItem, scrollerPropertiesRef, itemExceptionCallback, maxListsizeInterrupt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var itemID, returnvalue, usercontent, error, content, scrollerProperties;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              itemID = this.getNewItemID();\n              _context3.prev = 1;\n              _context3.next = 4;\n              return getItem(index, itemID);\n            case 4:\n              usercontent = _context3.sent;\n              if (usercontent === null) returnvalue = usercontent;\n              _context3.next = 12;\n              break;\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3["catch"](1);\n              returnvalue = usercontent = undefined;\n              error = _context3.t0;\n            case 12:\n              if (usercontent !== null && usercontent !== undefined) {\n                if (!react_1["default"].isValidElement(usercontent)) {\n                  returnvalue = usercontent;\n                  usercontent = undefined;\n                  error = new Error(\'invalid React element\');\n                }\n              }\n              if (!(usercontent !== null && usercontent !== undefined)) {\n                _context3.next = 20;\n                break;\n              }\n              scrollerProperties = {\n                scrollerPropertiesRef: scrollerPropertiesRef\n              };\n              if (usercontent.props.hasOwnProperty(\'scrollerProperties\')) {\n                content = react_1["default"].cloneElement(usercontent, {\n                  scrollerProperties: scrollerProperties\n                });\n              } else {\n                content = usercontent;\n              }\n              // const portalData = \n              _context3.next = 18;\n              return this.createPortal(scrollerID, content, index, itemID, scrollerProperties, true);\n            case 18:\n              _context3.next = 21;\n              break;\n            case 20:\n              if (usercontent === undefined) {\n                itemExceptionCallback && itemExceptionCallback(index, itemID, returnvalue, \'preload\', error);\n              } else {\n                // usercontent === null; last item in list\n                itemExceptionCallback && itemExceptionCallback(index, itemID, returnvalue, \'preload\', new Error(\'end of list\'));\n                maxListsizeInterrupt(index);\n              }\n            case 21:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[1, 8]]);\n      }));\n    }\n    // delete a portal list item\n    // accepts an array of indexes\n  }, {\n    key: "deletePortalByIndex",\n    value: function deletePortalByIndex(scrollerID, index, deleteListCallback) {\n      var indexArray = !Array.isArray(index) ? [index] : index;\n      var _this$scrollerDataMap8 = this.scrollerDataMap.get(scrollerID),\n        indexToItemIDMap = _this$scrollerDataMap8.indexToItemIDMap,\n        itemSet = _this$scrollerDataMap8.itemSet;\n      var itemMetadataMap = this.itemMetadataMap;\n      var removePartitionPortal = this.removePartitionPortal;\n      var deleteList = [];\n      var _iterator8 = _createForOfIteratorHelper(indexArray),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _index4 = _step8.value;\n          var itemID = indexToItemIDMap.get(_index4);\n          if (itemID === undefined) continue; // async mismatch\n          deleteList.push({\n            index: _index4,\n            itemID: itemID\n          });\n          var _itemMetadataMap$get3 = itemMetadataMap.get(itemID),\n            partitionID = _itemMetadataMap$get3.partitionID;\n          removePartitionPortal(partitionID, itemID);\n          itemMetadataMap["delete"](itemID);\n          itemSet["delete"](itemID);\n          indexToItemIDMap["delete"](_index4);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      deleteListCallback && deleteListCallback(deleteList);\n    }\n    // query existence of a portal list item\n  }, {\n    key: "hasPortal",\n    value: function hasPortal(itemID) {\n      return this.itemMetadataMap.has(itemID);\n    }\n  }, {\n    key: "getPortalMetadata",\n    value: function getPortalMetadata(itemID) {\n      if (this.hasPortal(itemID)) {\n        return this.itemMetadataMap.get(itemID);\n      }\n    }\n  }]);\n  return CacheAPI;\n}();\nexports["default"] = CacheAPI;\n// ==========================[ Utility function ]============================\n// get a react-reverse-portal InPortal component, with its metadata\n// with user content and container\n// see also some styles set in CellFrame\nvar createPortalNode = function createPortalNode(index, itemID) {\n  var portalNode = (0, react_reverse_portal_1.createHtmlPortalNode)();\n  var container = portalNode.element;\n  container.style.overflow = \'hidden\';\n  container.dataset.type = \'contentenvelope\';\n  container.dataset.index = index;\n  container.dataset.cacheitemid = itemID;\n  return portalNode;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/portalcache/cacheAPI.tsx\n')},"./node_modules/react-error-boundary/dist/react-error-boundary.esm.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorBoundary: () => (/* binding */ ErrorBoundary),\n/* harmony export */   ErrorBoundaryContext: () => (/* binding */ ErrorBoundaryContext),\n/* harmony export */   useErrorBoundary: () => (/* binding */ useErrorBoundary),\n/* harmony export */   withErrorBoundary: () => (/* binding */ withErrorBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\'use client\';\n\n\nconst ErrorBoundaryContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n\nconst initialState = {\n  didCatch: false,\n  error: null\n};\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  constructor(props) {\n    super(props);\n    this.resetErrorBoundary = this.resetErrorBoundary.bind(this);\n    this.state = initialState;\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      didCatch: true,\n      error\n    };\n  }\n  resetErrorBoundary() {\n    const {\n      error\n    } = this.state;\n    if (error !== null) {\n      var _this$props$onReset, _this$props;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {\n        args,\n        reason: "imperative-api"\n      });\n      this.setState(initialState);\n    }\n  }\n  componentDidCatch(error, info) {\n    var _this$props$onError, _this$props2;\n    (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      didCatch\n    } = this.state;\n    const {\n      resetKeys\n    } = this.props;\n\n    // There\'s an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,\n    // we\'d end up resetting the error boundary immediately.\n    // This would likely trigger a second error to be thrown.\n    // So we make sure that we don\'t check the resetKeys on the first call of cDU after the error is set.\n\n    if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {\n      var _this$props$onReset2, _this$props3;\n      (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {\n        next: resetKeys,\n        prev: prevProps.resetKeys,\n        reason: "keys"\n      });\n      this.setState(initialState);\n    }\n  }\n  render() {\n    const {\n      children,\n      fallbackRender,\n      FallbackComponent,\n      fallback\n    } = this.props;\n    const {\n      didCatch,\n      error\n    } = this.state;\n    let childToRender = children;\n    if (didCatch) {\n      const props = {\n        error,\n        resetErrorBoundary: this.resetErrorBoundary\n      };\n      if ((0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(fallback)) {\n        childToRender = fallback;\n      } else if (typeof fallbackRender === "function") {\n        childToRender = fallbackRender(props);\n      } else if (FallbackComponent) {\n        childToRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(FallbackComponent, props);\n      } else {\n        throw new Error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop");\n      }\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ErrorBoundaryContext.Provider, {\n      value: {\n        didCatch,\n        error,\n        resetErrorBoundary: this.resetErrorBoundary\n      }\n    }, childToRender);\n  }\n}\nfunction hasArrayChanged() {\n  let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]));\n}\n\nfunction assertErrorBoundaryContext(value) {\n  if (value == null || typeof value.didCatch !== "boolean" || typeof value.resetErrorBoundary !== "function") {\n    throw new Error("ErrorBoundaryContext not found");\n  }\n  return true;\n}\n\nfunction useErrorBoundary() {\n  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ErrorBoundaryContext);\n  assertErrorBoundaryContext(context);\n  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n    error: null,\n    hasError: false\n  });\n  const memoized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n    resetBoundary: () => {\n      context === null || context === void 0 ? void 0 : context.resetErrorBoundary();\n      setState({\n        error: null,\n        hasError: false\n      });\n    },\n    showBoundary: error => setState({\n      error,\n      hasError: true\n    })\n  }), [context === null || context === void 0 ? void 0 : context.resetErrorBoundary]);\n  if (state.hasError) {\n    throw state.error;\n  }\n  return memoized;\n}\n\nfunction withErrorBoundary(component, errorBoundaryProps) {\n  const Wrapped = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ErrorBoundary, errorBoundaryProps, (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(component, {\n    ...props,\n    ref\n  })));\n\n  // Format for display in DevTools\n  const name = component.displayName || component.name || "Unknown";\n  Wrapped.displayName = "withErrorBoundary(".concat(name, ")");\n  return Wrapped;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-error-boundary/dist/react-error-boundary.esm.js\n')},"./node_modules/react-reverse-portal/dist/web/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InPortal: () => (/* binding */ InPortal),\n/* harmony export */   OutPortal: () => (/* binding */ OutPortal),\n/* harmony export */   createHtmlPortalNode: () => (/* binding */ createHtmlPortalNode),\n/* harmony export */   createSvgPortalNode: () => (/* binding */ createSvgPortalNode)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "react-dom");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n// Internally, the portalNode must be for either HTML or SVG elements\nvar ELEMENT_TYPE_HTML = \'html\';\nvar ELEMENT_TYPE_SVG = \'svg\';\n// ReactDOM can handle several different namespaces, but they\'re not exported publicly\n// https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/DOMNamespaces.js#L8-L10\nvar SVG_NAMESPACE = \'http://www.w3.org/2000/svg\';\nvar validateElementType = function (domElement, elementType) {\n    if (elementType === ELEMENT_TYPE_HTML) {\n        return domElement instanceof HTMLElement;\n    }\n    if (elementType === ELEMENT_TYPE_SVG) {\n        return domElement instanceof SVGElement;\n    }\n    throw new Error("Unrecognized element type \\"" + elementType + "\\" for validateElementType.");\n};\n// This is the internal implementation: the public entry points set elementType to an appropriate value\nvar createPortalNode = function (elementType, options) {\n    var initialProps = {};\n    var parent;\n    var lastPlaceholder;\n    var element;\n    if (elementType === ELEMENT_TYPE_HTML) {\n        element = document.createElement(\'div\');\n    }\n    else if (elementType === ELEMENT_TYPE_SVG) {\n        element = document.createElementNS(SVG_NAMESPACE, \'g\');\n    }\n    else {\n        throw new Error("Invalid element type \\"" + elementType + "\\" for createPortalNode: must be \\"html\\" or \\"svg\\".");\n    }\n    if (options && typeof options === "object") {\n        for (var _i = 0, _a = Object.entries(options.attributes); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            element.setAttribute(key, value);\n        }\n    }\n    var portalNode = {\n        element: element,\n        elementType: elementType,\n        setPortalProps: function (props) {\n            initialProps = props;\n        },\n        getInitialPortalProps: function () {\n            return initialProps;\n        },\n        mount: function (newParent, newPlaceholder) {\n            if (newPlaceholder === lastPlaceholder) {\n                // Already mounted - noop.\n                return;\n            }\n            portalNode.unmount();\n            // To support SVG and other non-html elements, the portalNode\'s elementType needs to match\n            // the elementType it\'s being rendered into\n            if (newParent !== parent) {\n                if (!validateElementType(newParent, elementType)) {\n                    throw new Error("Invalid element type for portal: \\"" + elementType + "\\" portalNodes must be used with " + elementType + " elements, but OutPortal is within <" + newParent.tagName + ">.");\n                }\n            }\n            newParent.replaceChild(portalNode.element, newPlaceholder);\n            parent = newParent;\n            lastPlaceholder = newPlaceholder;\n        },\n        unmount: function (expectedPlaceholder) {\n            if (expectedPlaceholder && expectedPlaceholder !== lastPlaceholder) {\n                // Skip unmounts for placeholders that aren\'t currently mounted\n                // They will have been automatically unmounted already by a subsequent mount()\n                return;\n            }\n            if (parent && lastPlaceholder) {\n                parent.replaceChild(lastPlaceholder, portalNode.element);\n                parent = undefined;\n                lastPlaceholder = undefined;\n            }\n        }\n    };\n    return portalNode;\n};\nvar InPortal = /** @class */ (function (_super) {\n    __extends(InPortal, _super);\n    function InPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.addPropsChannel = function () {\n            Object.assign(_this.props.node, {\n                setPortalProps: function (props) {\n                    // Rerender the child node here if/when the out portal props change\n                    _this.setState({ nodeProps: props });\n                }\n            });\n        };\n        _this.state = {\n            nodeProps: _this.props.node.getInitialPortalProps(),\n        };\n        return _this;\n    }\n    InPortal.prototype.componentDidMount = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.componentDidUpdate = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, children = _a.children, node = _a.node;\n        return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, function (child) {\n            if (!react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child))\n                return child;\n            return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, _this.state.nodeProps);\n        }), node.element);\n    };\n    return InPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar OutPortal = /** @class */ (function (_super) {\n    __extends(OutPortal, _super);\n    function OutPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.placeholderNode = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        _this.passPropsThroughPortal();\n        return _this;\n    }\n    OutPortal.prototype.passPropsThroughPortal = function () {\n        var propsForTarget = Object.assign({}, this.props, { node: undefined });\n        this.props.node.setPortalProps(propsForTarget);\n    };\n    OutPortal.prototype.componentDidMount = function () {\n        var node = this.props.node;\n        this.currentPortalNode = node;\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentDidUpdate = function () {\n        // We re-mount on update, just in case we were unmounted (e.g. by\n        // a second OutPortal, which has now been removed)\n        var node = this.props.node;\n        // If we\'re switching portal nodes, we need to clean up the current one first.\n        if (this.currentPortalNode && node !== this.currentPortalNode) {\n            this.currentPortalNode.unmount(this.placeholderNode.current);\n            this.currentPortalNode.setPortalProps({});\n            this.currentPortalNode = node;\n        }\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentWillUnmount = function () {\n        var node = this.props.node;\n        node.unmount(this.placeholderNode.current);\n        node.setPortalProps({});\n    };\n    OutPortal.prototype.render = function () {\n        // Render a placeholder to the DOM, so we can get a reference into\n        // our location in the DOM, and swap it out for the portaled node.\n        // A <div> placeholder works fine even for SVG.\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { ref: this.placeholderNode });\n    };\n    return OutPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar createHtmlPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_HTML);\nvar createSvgPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_SVG);\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-reverse-portal/dist/web/index.js\n')},"./node_modules/requestidlecallback/index.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}(function(){\n\t'use strict';\n\tvar scheduleStart, throttleDelay, lazytimer, lazyraf;\n\tvar root = typeof window != 'undefined' ?\n\t\twindow :\n\t\ttypeof __webpack_require__.g != undefined ?\n\t\t\t__webpack_require__.g :\n\t\t\tthis || {};\n\tvar requestAnimationFrame = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;\n\tvar cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;\n\tvar tasks = [];\n\tvar runAttempts = 0;\n\tvar isRunning = false;\n\tvar remainingTime = 7;\n\tvar minThrottle = 35;\n\tvar throttle = 125;\n\tvar index = 0;\n\tvar taskStart = 0;\n\tvar tasklength = 0;\n\tvar IdleDeadline = {\n\t\tget didTimeout(){\n\t\t\treturn false;\n\t\t},\n\t\ttimeRemaining: function(){\n\t\t\tvar timeRemaining = remainingTime - (Date.now() - taskStart);\n\t\t\treturn timeRemaining < 0 ? 0 : timeRemaining;\n\t\t},\n\t};\n\tvar setInactive = debounce(function(){\n\t\tremainingTime = 22;\n\t\tthrottle = 66;\n\t\tminThrottle = 0;\n\t});\n\n\tfunction debounce(fn){\n\t\tvar id, timestamp;\n\t\tvar wait = 99;\n\t\tvar check = function(){\n\t\t\tvar last = (Date.now()) - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tid = setTimeout(check, wait - last);\n\t\t\t} else {\n\t\t\t\tid = null;\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\t\treturn function(){\n\t\t\ttimestamp = Date.now();\n\t\t\tif(!id){\n\t\t\t\tid = setTimeout(check, wait);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction abortRunning(){\n\t\tif(isRunning){\n\t\t\tif(lazyraf){\n\t\t\t\tcancelRequestAnimationFrame(lazyraf);\n\t\t\t}\n\t\t\tif(lazytimer){\n\t\t\t\tclearTimeout(lazytimer);\n\t\t\t}\n\t\t\tisRunning = false;\n\t\t}\n\t}\n\n\tfunction onInputorMutation(){\n\t\tif(throttle != 125){\n\t\t\tremainingTime = 7;\n\t\t\tthrottle = 125;\n\t\t\tminThrottle = 35;\n\n\t\t\tif(isRunning) {\n\t\t\t\tabortRunning();\n\t\t\t\tscheduleLazy();\n\t\t\t}\n\t\t}\n\t\tsetInactive();\n\t}\n\n\tfunction scheduleAfterRaf() {\n\t\tlazyraf = null;\n\t\tlazytimer = setTimeout(runTasks, 0);\n\t}\n\n\tfunction scheduleRaf(){\n\t\tlazytimer = null;\n\t\trequestAnimationFrame(scheduleAfterRaf);\n\t}\n\n\tfunction scheduleLazy(){\n\n\t\tif(isRunning){return;}\n\t\tthrottleDelay = throttle - (Date.now() - taskStart);\n\n\t\tscheduleStart = Date.now();\n\n\t\tisRunning = true;\n\n\t\tif(minThrottle && throttleDelay < minThrottle){\n\t\t\tthrottleDelay = minThrottle;\n\t\t}\n\n\t\tif(throttleDelay > 9){\n\t\t\tlazytimer = setTimeout(scheduleRaf, throttleDelay);\n\t\t} else {\n\t\t\tthrottleDelay = 0;\n\t\t\tscheduleRaf();\n\t\t}\n\t}\n\n\tfunction runTasks(){\n\t\tvar task, i, len;\n\t\tvar timeThreshold = remainingTime > 9 ?\n\t\t\t9 :\n\t\t\t1\n\t\t;\n\n\t\ttaskStart = Date.now();\n\t\tisRunning = false;\n\n\t\tlazytimer = null;\n\n\t\tif(runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart){\n\t\t\tfor(i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++){\n\t\t\t\ttask = tasks.shift();\n\t\t\t\ttasklength++;\n\t\t\t\tif(task){\n\t\t\t\t\ttask(IdleDeadline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(tasks.length){\n\t\t\tscheduleLazy();\n\t\t} else {\n\t\t\trunAttempts = 0;\n\t\t}\n\t}\n\n\tfunction requestIdleCallbackShim(task){\n\t\tindex++;\n\t\ttasks.push(task);\n\t\tscheduleLazy();\n\t\treturn index;\n\t}\n\n\tfunction cancelIdleCallbackShim(id){\n\t\tvar index = id - 1 - tasklength;\n\t\tif(tasks[index]){\n\t\t\ttasks[index] = null;\n\t\t}\n\t}\n\n\tif(!root.requestIdleCallback || !root.cancelIdleCallback){\n\t\troot.requestIdleCallback = requestIdleCallbackShim;\n\t\troot.cancelIdleCallback = cancelIdleCallbackShim;\n\n\t\tif(root.document && document.addEventListener){\n\t\t\troot.addEventListener('scroll', onInputorMutation, true);\n\t\t\troot.addEventListener('resize', onInputorMutation);\n\n\t\t\tdocument.addEventListener('focus', onInputorMutation, true);\n\t\t\tdocument.addEventListener('mouseover', onInputorMutation, true);\n\t\t\t['click', 'keypress', 'touchstart', 'mousedown'].forEach(function(name){\n\t\t\t\tdocument.addEventListener(name, onInputorMutation, {capture: true, passive: true});\n\t\t\t});\n\n\t\t\tif(root.MutationObserver){\n\t\t\t\tnew MutationObserver( onInputorMutation ).observe( document.documentElement, {childList: true, subtree: true, attributes: true} );\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\troot.requestIdleCallback(function(){}, {timeout: 0});\n\t\t} catch(e){\n\t\t\t(function(rIC){\n\t\t\t\tvar timeRemainingProto, timeRemaining;\n\t\t\t\troot.requestIdleCallback = function(fn, timeout){\n\t\t\t\t\tif(timeout && typeof timeout.timeout == 'number'){\n\t\t\t\t\t\treturn rIC(fn, timeout.timeout);\n\t\t\t\t\t}\n\t\t\t\t\treturn rIC(fn);\n\t\t\t\t};\n\t\t\t\tif(root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)){\n\t\t\t\t\ttimeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, 'timeRemaining');\n\t\t\t\t\tif(!timeRemaining || !timeRemaining.configurable || !timeRemaining.get){return;}\n\t\t\t\t\tObject.defineProperty(timeRemainingProto, 'timeRemaining', {\n\t\t\t\t\t\tvalue:  function(){\n\t\t\t\t\t\t\treturn timeRemaining.get.call(this);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(root.requestIdleCallback)\n\t\t}\n\t}\n\n\treturn {\n\t\trequest: requestIdleCallbackShim,\n\t\tcancel: cancelIdleCallbackShim,\n\t};\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/requestidlecallback/index.js\n")},react:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE_react__},"react-dom":Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE_react_dom__}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(B.exports,B,B.exports,__webpack_require__),B.exports}__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/InfiniteGridScroller.tsx");return __webpack_exports__})()));