/*! For license information please see build.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F(require("react"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","react-dom"],F):"object"==typeof exports?exports["react-infinite-grid-scroller"]=F(require("react"),require("react-dom")):Q["react-infinite-grid-scroller"]=F(Q.react,Q["react-dom"])}(self,((__WEBPACK_EXTERNAL_MODULE_react__,__WEBPACK_EXTERNAL_MODULE_react_dom__)=>(()=>{var __webpack_modules__={"./src/CellFrame.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// CellFrame.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return { value: void 0, done: !0 }; } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable || "" === iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } throw new TypeError(_typeof(iterable) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    The role of CellFrame is to fetch user content from the cache, or from the host (using getItem).\n    While an item is being fetched, CellFrame presents a placeholder (either the default or an\n    imported custom version). If there is an error in fetching content then the placeholder is used\n    to present the error to the user. If a new itemID is set by the parent (to synchronize with an altered\n    cache), then CellFrame replaces the old item with the new item.\n\n    getItem (which is a function provided by the host) can return one of several values:\n        - a React component\n        - a promise of a component\n        - null\n        - undefined\n    Anything else is treated as an error\n\n    if a promise is returned, then the promise returns a React component, null or undefined.\n\n    If a valid react component is returned from getItem, then it is instantiated in the cache, and rendered in the\n    CellFrame. If null is returned, then CellFrame sends a message to its scroller that the host has\n    indicated the the item being fetched instead represents the end of the list, and the listsize should\n    be adjusted accordingly. Any other value that is returned is treated as an error, and presented\n    as such to the user through the placeholder component.\n\n    getItem sends the index (logical index in the list) and a session itemID to the host, so that\n    the host can sync its own tracking with the scroller.\n\n    One CellFrame at a time is designated as the host of the two triggerLines with the isTriggerCell flag.\n    The triggerlines trigger an update of the Cradle through an IntersectionObserver.\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nvar requestidlecallback_1 = __webpack_require__(/*! requestidlecallback */ "./node_modules/requestidlecallback/index.js"); // polyfill if needed\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ "./node_modules/react-reverse-portal/dist/web/index.js"); // fetch from cache\nvar Placeholder_1 = __importDefault(__webpack_require__(/*! ./cellframe/Placeholder */ "./src/cellframe/Placeholder.tsx")); // default\nvar Cradle_1 = __webpack_require__(/*! ./Cradle */ "./src/Cradle.tsx");\nvar defaultPlaceholderMessages = {\n  loading: \'(loading...)\',\n  retrieving: \'(retrieving from cache)\',\n  "null": \'end of list\',\n  undefined: \'host returned "undefined"\',\n  invalid: \'invalid React element\'\n};\nvar CellFrame = function CellFrame(_ref) {\n  var orientation = _ref.orientation,\n    cellHeight = _ref.cellHeight,\n    cellWidth = _ref.cellWidth,\n    cellMinHeight = _ref.cellMinHeight,\n    cellMinWidth = _ref.cellMinWidth,\n    layout = _ref.layout,\n    getItem = _ref.getItem,\n    listsize = _ref.listsize,\n    placeholder = _ref.placeholder,\n    itemID = _ref.itemID,\n    index = _ref.index,\n    instanceID = _ref.instanceID,\n    scrollerID = _ref.scrollerID,\n    isTriggercell = _ref.isTriggercell,\n    placeholderFrameStyles = _ref.placeholderFrameStyles,\n    placeholderLinerStyles = _ref.placeholderLinerStyles,\n    placeholderErrorFrameStyles = _ref.placeholderErrorFrameStyles,\n    placeholderErrorLinerStyles = _ref.placeholderErrorLinerStyles,\n    placeholderMessages = _ref.placeholderMessages,\n    usePlaceholder = _ref.usePlaceholder,\n    gridstartstyle = _ref.gridstartstyle;\n  var coreConfigRef = (0, react_1.useRef)(null);\n  coreConfigRef.current = {\n    orientation: orientation,\n    layout: layout,\n    cellWidth: cellWidth,\n    cellHeight: cellHeight\n  };\n  // ----------------------[ setup ]----------------------\n  var cradleContext = (0, react_1.useContext)(Cradle_1.CradleContext);\n  var cacheAPI = cradleContext.cacheAPI,\n    scrollerPropertiesRef = cradleContext.scrollerPropertiesRef,\n    nullItemSetMaxListsize = cradleContext.nullItemSetMaxListsize,\n    itemExceptionCallback = cradleContext.itemExceptionCallback,\n    IDLECALLBACK_TIMEOUT = cradleContext.IDLECALLBACK_TIMEOUT,\n    triggercellTriggerlinesRef = cradleContext.triggercellTriggerlinesRef;\n  // style change generates state refresh\n  var stylesRef = (0, react_1.useRef)({});\n  var holderStylesRef = (0, react_1.useRef)({});\n  var placeholderMessagesRef = (0, react_1.useRef)(null);\n  placeholderMessagesRef.current = (0, react_1.useMemo)(function () {\n    var newMessages = Object.assign(Object.assign({}, defaultPlaceholderMessages), placeholderMessages);\n    return newMessages;\n  }, [placeholderMessages]);\n  // processing state\n  var _ref2 = (0, react_1.useState)(\'setup\'),\n    _ref3 = _slicedToArray(_ref2, 2),\n    frameState = _ref3[0],\n    setFrameState = _ref3[1];\n  var frameStateRef = (0, react_1.useRef)(null);\n  frameStateRef.current = frameState;\n  // DOM ref\n  var frameRef = (0, react_1.useRef)(null);\n  // to track unmount interrupt\n  var isMountedRef = (0, react_1.useRef)(true);\n  // cache data\n  var portalMetadataRef = (0, react_1.useRef)(null);\n  // the placeholder to use\n  var placeholderRef = (0, react_1.useRef)(null);\n  // the session itemID to use; could be updated by parent\n  var itemIDRef = (0, react_1.useRef)(null);\n  itemIDRef.current = itemID;\n  var cellFramePropertiesRef = (0, react_1.useRef)(null);\n  cellFramePropertiesRef.current = {\n    itemID: itemID,\n    index: index\n  };\n  // fetch error\n  var errorRef = (0, react_1.useRef)(false);\n  // placeholder message\n  var messageRef = (0, react_1.useRef)(null);\n  (0, react_1.useEffect)(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  // for unmount\n  (0, react_1.useEffect)(function () {\n    return function () {\n      cancelidlecallback(requestIdleCallbackIdRef.current);\n      cacheAPI.unregisterPendingPortal(index);\n    };\n  }, []);\n  // refresh content if itemID changes\n  (0, react_1.useLayoutEffect)(function () {\n    if (frameStateRef.current == \'setup\') return;\n    if (isMountedRef.current) setFrameState(\'getusercontent\');\n  }, [itemID]);\n  // ----------------- [ placeholder definition ] -------------------------\n  var customplaceholder = (0, react_1.useMemo)(function () {\n    if (!usePlaceholder) return null;\n    return placeholder ? react_1["default"].createElement(placeholder, {\n      index: index,\n      listsize: listsize,\n      message: messageRef.current,\n      error: errorRef.current\n    }) : null;\n  }, [index, placeholder, listsize, messageRef.current, errorRef.current, usePlaceholder]);\n  placeholderRef.current = (0, react_1.useMemo)(function () {\n    if (!usePlaceholder) return null;\n    var placeholder = customplaceholder ? customplaceholder : react_1["default"].createElement(Placeholder_1["default"], {\n      key: \'placeholder\',\n      index: index,\n      listsize: listsize,\n      message: messageRef.current,\n      error: errorRef.current,\n      userFrameStyles: placeholderFrameStyles,\n      userLinerStyles: placeholderLinerStyles,\n      userErrorFrameStyles: placeholderErrorFrameStyles,\n      userErrorLinerStyles: placeholderErrorLinerStyles\n    });\n    return placeholder;\n  }, [index, customplaceholder, listsize, messageRef.current, errorRef.current, usePlaceholder, placeholderFrameStyles, placeholderLinerStyles, placeholderErrorFrameStyles, placeholderErrorLinerStyles]);\n  // ---------------- [ requestidlecallback config ] ------------------------\n  var requestidlecallback =\n  // requestIdleCallback\n  window[\'requestIdleCallback\'] ? window[\'requestIdleCallback\'] : requestidlecallback_1.requestIdleCallback;\n  var cancelidlecallback =\n  // cancelIdleCallback\n  window[\'cancelIdleCallback\'] ? window[\'cancelIdleCallback\'] : requestidlecallback_1.cancelIdleCallback;\n  var requestIdleCallbackIdRef = (0, react_1.useRef)(null);\n  // --------------------[ processing ]-----------------\n  // set styles\n  (0, react_1.useEffect)(function () {\n    var newFrameStyles = getFrameStyles(orientation, cellHeight, cellWidth, cellMinHeight, cellMinWidth, layout, stylesRef.current);\n    if (gridstartstyle) {\n      newFrameStyles = Object.assign(Object.assign({}, newFrameStyles), gridstartstyle);\n    }\n    var newHolderStyles = getContentHolderStyles(layout, orientation, cellMinWidth, cellMinHeight);\n    if (isMountedRef.current) {\n      stylesRef.current = newFrameStyles;\n      holderStylesRef.current = newHolderStyles;\n    }\n  }, [orientation, cellHeight, cellWidth, cellMinHeight, cellMinWidth, layout, gridstartstyle]);\n  var portalNodeRef = (0, react_1.useRef)(null);\n  (0, react_1.useLayoutEffect)(function () {\n    switch (frameState) {\n      case \'setup\':\n        {\n          setFrameState(\'working\'); // \'getusercontent\' will be called\n          break;\n        }\n      case \'working\':\n        {\n          setFrameState(\'getusercontent\'); // delay paint while working\n          break;\n        }\n      case \'getusercontent\':\n        {\n          var _itemID = itemIDRef.current;\n          var cached = cacheAPI.hasPortal(_itemID);\n          var _coreConfigRef$curren = coreConfigRef.current,\n            _layout = _coreConfigRef$curren.layout,\n            _orientation = _coreConfigRef$curren.orientation,\n            _cellWidth = _coreConfigRef$curren.cellWidth,\n            _cellHeight = _coreConfigRef$curren.cellHeight;\n          if (cached) {\n            messageRef.current = placeholderMessagesRef.current.retrieving;\n            if (isMountedRef.current) {\n              // get cache data\n              portalMetadataRef.current = cacheAPI.getPortalMetadata(_itemID);\n              // update cell and scroller properties ref in case of switch in either\n              portalMetadataRef.current.scrollerProperties.cellFramePropertiesRef = cellFramePropertiesRef;\n              portalMetadataRef.current.scrollerProperties.scrollerPropertiesRef = scrollerPropertiesRef;\n              // get OutPortal node\n              portalNodeRef.current = portalMetadataRef.current.portalNode;\n              setContainerStyles(portalNodeRef.current.element, _layout, _orientation, _cellWidth, _cellHeight);\n              setFrameState(\'retrieved\');\n            }\n          } else {\n            messageRef.current = placeholderMessagesRef.current.loading;\n            // reserve space in the cache\n            cacheAPI.registerPendingPortal(index);\n            // enqueue the fetch\n            requestIdleCallbackIdRef.current = requestidlecallback(function () {\n              return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                var _a, _b, returnvalue, usercontent, error, isValidElement, content, scrollerProperties, addinCount, addinProps, retval;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      _context.next = 3;\n                      return getItem(index, _itemID);\n                    case 3:\n                      usercontent = _context.sent;\n                      if (usercontent === null) returnvalue = usercontent;\n                      if (usercontent === undefined) {\n                        error = new Error(placeholderMessagesRef.current.undefined);\n                      }\n                      _context.next = 12;\n                      break;\n                    case 8:\n                      _context.prev = 8;\n                      _context.t0 = _context["catch"](0);\n                      returnvalue = usercontent = undefined;\n                      error = _context.t0;\n                    case 12:\n                      // process the return value\n                      if (usercontent !== null && usercontent !== undefined) {\n                        isValidElement = react_1["default"].isValidElement(usercontent);\n                        if (!isValidElement) {\n                          returnvalue = usercontent;\n                          usercontent = undefined;\n                          error = new Error(placeholderMessagesRef.current.invalid);\n                        }\n                      }\n                      if (!isMountedRef.current) {\n                        _context.next = 30;\n                        break;\n                      }\n                      if (!(usercontent !== null && usercontent !== undefined)) {\n                        _context.next = 28;\n                        break;\n                      }\n                      // if usercontent is otherwise disallowed, let error handling deal with it.\n                      scrollerProperties = {\n                        cellFramePropertiesRef: cellFramePropertiesRef,\n                        scrollerPropertiesRef: scrollerPropertiesRef\n                      };\n                      addinCount = 0;\n                      addinProps = {};\n                      if ((_a = usercontent.props) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(\'scrollerProperties\')) {\n                        addinProps.scrollerProperties = scrollerProperties;\n                        addinCount++;\n                      }\n                      if ((_b = usercontent.props) === null || _b === void 0 ? void 0 : _b.hasOwnProperty(\'cacheAPI\')) {\n                        addinProps.cacheAPI = cacheAPI.instance;\n                        addinCount++;\n                      }\n                      if (addinCount) {\n                        content = react_1["default"].cloneElement(usercontent, addinProps);\n                      } else {\n                        content = usercontent;\n                      }\n                      _context.next = 23;\n                      return cacheAPI.createPortal(content, index, _itemID, scrollerProperties);\n                    case 23:\n                      retval = portalMetadataRef.current = _context.sent;\n                      if (retval) {\n                        portalNodeRef.current = portalMetadataRef.current.portalNode;\n                        setContainerStyles(portalNodeRef.current.element, _layout, _orientation, _cellWidth, _cellHeight);\n                      }\n                      isMountedRef.current && setFrameState(\'inserting\');\n                      _context.next = 30;\n                      break;\n                    case 28:\n                      // null or undefined; handle non-component value\n                      cacheAPI.unregisterPendingPortal(index); // create portal failed\n                      if (usercontent === null) {\n                        // truncate listsize at this index\n                        itemExceptionCallback && itemExceptionCallback(index, _itemID, returnvalue, \'cellFrame\', new Error(placeholderMessagesRef.current["null"]));\n                        nullItemSetMaxListsize(index);\n                      } else {\n                        // usercontent === undefined, meaning an error has occurred\n                        // change placeholder message to error message\n                        errorRef.current = error;\n                        // notify the host\n                        itemExceptionCallback && itemExceptionCallback(index, _itemID, returnvalue, \'cellFrame\', error);\n                        isMountedRef.current && setFrameState(\'error\');\n                      }\n                    case 30:\n                    case "end":\n                      return _context.stop();\n                  }\n                }, _callee, null, [[0, 8]]);\n              }));\n            }, {\n              timeout: IDLECALLBACK_TIMEOUT\n            });\n          }\n          break;\n        }\n      case \'inserting\':\n      case \'retrieved\':\n        {\n          setFrameState(\'ready\');\n          break;\n        }\n    }\n  }, [frameState]);\n  // Note: the contentholder type layer is included to provide an anchor for the triggerlines.\n  return react_1["default"].createElement("div", {\n    ref: frameRef,\n    "data-type": \'cellframe\',\n    "data-scrollerid": scrollerID,\n    "data-index": index,\n    "data-instanceid": instanceID,\n    style: stylesRef.current\n  }, frameState != \'setup\' ? react_1["default"].createElement("div", {\n    "data-type": \'contentholder\',\n    style: holderStylesRef.current\n  }, frameState != \'ready\' ? placeholderRef.current : react_1["default"].createElement(react_reverse_portal_1.OutPortal, {\n    key: \'portal\',\n    node: portalNodeRef.current\n  })) : react_1["default"].createElement("div", null), isTriggercell ? triggercellTriggerlinesRef.current : null);\n}; // CellFrame\nexports["default"] = CellFrame;\n// utilities\nvar getFrameStyles = function getFrameStyles(orientation, cellHeight, cellWidth, cellMinHeight, cellMinWidth, layout, styles) {\n  var styleset = Object.assign(Object.assign({}, styles), {\n    position: \'relative\',\n    overflow: \'visible\'\n  });\n  if (orientation === \'vertical\') {\n    styleset.width = null;\n    if (layout == \'uniform\') {\n      styleset.height = cellHeight + \'px\';\n      styleset.minHeight = null;\n      styleset.maxHeight = null;\n    } else {\n      // \'variable\'\n      styleset.height = null;\n      styleset.minHeight = cellMinHeight + \'px\';\n      styleset.maxHeight = cellHeight + \'px\';\n    }\n  } else {\n    // \'horizontal\'\n    styleset.height = null;\n    if (layout == \'uniform\') {\n      styleset.width = cellWidth + \'px\';\n      styleset.minWidth = null;\n      styleset.maxWidth = null;\n    } else {\n      // \'variable\'\n      styleset.width = null;\n      styleset.minWidth = cellMinWidth + \'px\';\n      styleset.maxWidth = cellWidth + \'px\';\n    }\n  }\n  return styleset;\n};\nvar getContentHolderStyles = function getContentHolderStyles(layout, orientation, cellMinWidth, cellMinHeight) {\n  var styles = {};\n  if (layout == \'uniform\') {\n    styles = {\n      inset: \'0px\',\n      position: \'absolute\',\n      height: null,\n      width: null,\n      minWidth: null,\n      minHeight: null\n    };\n  } else {\n    // variable\n    styles.inset = null;\n    styles.position = null;\n    if (orientation == \'vertical\') {\n      styles.width = \'100%\';\n      styles.height = null;\n      styles.minWidth = null;\n      styles.minHeight = cellMinHeight + \'px\';\n    } else {\n      styles.width = null;\n      styles.height = \'100%\';\n      styles.minWidth = cellMinWidth + \'px\';\n      styles.minHeight = null;\n    }\n  }\n  return styles;\n};\n// see also some base styles set in cacheAPI\nvar setContainerStyles = function setContainerStyles(container, layout, orientation, cellWidth, cellHeight) {\n  container.style.overflow = \'hidden\';\n  if (layout == \'uniform\') {\n    container.style.inset = \'0px\';\n    container.style.position = \'absolute\';\n    container.style.maxWidth = null;\n    container.style.maxHeight = null;\n    container.style.height = null;\n    container.style.width = null;\n  } else {\n    // variable\n    container.style.inset = null;\n    container.style.position = null;\n    if (orientation == \'vertical\') {\n      container.style.width = \'100%\';\n      container.style.height = null;\n      container.style.maxWidth = null;\n      container.style.maxHeight = cellHeight + \'px\';\n    } else {\n      container.style.width = null;\n      container.style.height = \'100%\';\n      container.style.maxWidth = cellWidth + \'px\';\n      container.style.maxHeight = null;\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LnRzeD9mMTcyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENlbGxGcmFtZS50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAxOS0yMDIzIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbi8qXG4gICAgVGhlIHJvbGUgb2YgQ2VsbEZyYW1lIGlzIHRvIGZldGNoIHVzZXIgY29udGVudCBmcm9tIHRoZSBjYWNoZSwgb3IgZnJvbSB0aGUgaG9zdCAodXNpbmcgZ2V0SXRlbSkuXG4gICAgV2hpbGUgYW4gaXRlbSBpcyBiZWluZyBmZXRjaGVkLCBDZWxsRnJhbWUgcHJlc2VudHMgYSBwbGFjZWhvbGRlciAoZWl0aGVyIHRoZSBkZWZhdWx0IG9yIGFuIFxuICAgIGltcG9ydGVkIGN1c3RvbSB2ZXJzaW9uKS4gSWYgdGhlcmUgaXMgYW4gZXJyb3IgaW4gZmV0Y2hpbmcgY29udGVudCB0aGVuIHRoZSBwbGFjZWhvbGRlciBpcyB1c2VkXG4gICAgdG8gcHJlc2VudCB0aGUgZXJyb3IgdG8gdGhlIHVzZXIuIElmIGEgbmV3IGl0ZW1JRCBpcyBzZXQgYnkgdGhlIHBhcmVudCAodG8gc3luY2hyb25pemUgd2l0aCBhbiBhbHRlcmVkXG4gICAgY2FjaGUpLCB0aGVuIENlbGxGcmFtZSByZXBsYWNlcyB0aGUgb2xkIGl0ZW0gd2l0aCB0aGUgbmV3IGl0ZW0uXG5cbiAgICBnZXRJdGVtICh3aGljaCBpcyBhIGZ1bmN0aW9uIHByb3ZpZGVkIGJ5IHRoZSBob3N0KSBjYW4gcmV0dXJuIG9uZSBvZiBzZXZlcmFsIHZhbHVlczpcbiAgICAgICAgLSBhIFJlYWN0IGNvbXBvbmVudFxuICAgICAgICAtIGEgcHJvbWlzZSBvZiBhIGNvbXBvbmVudFxuICAgICAgICAtIG51bGxcbiAgICAgICAgLSB1bmRlZmluZWRcbiAgICBBbnl0aGluZyBlbHNlIGlzIHRyZWF0ZWQgYXMgYW4gZXJyb3JcblxuICAgIGlmIGEgcHJvbWlzZSBpcyByZXR1cm5lZCwgdGhlbiB0aGUgcHJvbWlzZSByZXR1cm5zIGEgUmVhY3QgY29tcG9uZW50LCBudWxsIG9yIHVuZGVmaW5lZC5cblxuICAgIElmIGEgdmFsaWQgcmVhY3QgY29tcG9uZW50IGlzIHJldHVybmVkIGZyb20gZ2V0SXRlbSwgdGhlbiBpdCBpcyBpbnN0YW50aWF0ZWQgaW4gdGhlIGNhY2hlLCBhbmQgcmVuZGVyZWQgaW4gdGhlXG4gICAgQ2VsbEZyYW1lLiBJZiBudWxsIGlzIHJldHVybmVkLCB0aGVuIENlbGxGcmFtZSBzZW5kcyBhIG1lc3NhZ2UgdG8gaXRzIHNjcm9sbGVyIHRoYXQgdGhlIGhvc3QgaGFzIFxuICAgIGluZGljYXRlZCB0aGUgdGhlIGl0ZW0gYmVpbmcgZmV0Y2hlZCBpbnN0ZWFkIHJlcHJlc2VudHMgdGhlIGVuZCBvZiB0aGUgbGlzdCwgYW5kIHRoZSBsaXN0c2l6ZSBzaG91bGRcbiAgICBiZSBhZGp1c3RlZCBhY2NvcmRpbmdseS4gQW55IG90aGVyIHZhbHVlIHRoYXQgaXMgcmV0dXJuZWQgaXMgdHJlYXRlZCBhcyBhbiBlcnJvciwgYW5kIHByZXNlbnRlZFxuICAgIGFzIHN1Y2ggdG8gdGhlIHVzZXIgdGhyb3VnaCB0aGUgcGxhY2Vob2xkZXIgY29tcG9uZW50LlxuXG4gICAgZ2V0SXRlbSBzZW5kcyB0aGUgaW5kZXggKGxvZ2ljYWwgaW5kZXggaW4gdGhlIGxpc3QpIGFuZCBhIHNlc3Npb24gaXRlbUlEIHRvIHRoZSBob3N0LCBzbyB0aGF0XG4gICAgdGhlIGhvc3QgY2FuIHN5bmMgaXRzIG93biB0cmFja2luZyB3aXRoIHRoZSBzY3JvbGxlci5cblxuICAgIE9uZSBDZWxsRnJhbWUgYXQgYSB0aW1lIGlzIGRlc2lnbmF0ZWQgYXMgdGhlIGhvc3Qgb2YgdGhlIHR3byB0cmlnZ2VyTGluZXMgd2l0aCB0aGUgaXNUcmlnZ2VyQ2VsbCBmbGFnLiBcbiAgICBUaGUgdHJpZ2dlcmxpbmVzIHRyaWdnZXIgYW4gdXBkYXRlIG9mIHRoZSBDcmFkbGUgdGhyb3VnaCBhbiBJbnRlcnNlY3Rpb25PYnNlcnZlci5cbiovXG5cbmltcG9ydCBSZWFjdCwge1xuICAgIHVzZVJlZiwgXG4gICAgdXNlRWZmZWN0LCBcbiAgICB1c2VMYXlvdXRFZmZlY3QsIFxuICAgIHVzZVN0YXRlLCBcbiAgICB1c2VNZW1vLCBcbiAgICB1c2VDb250ZXh0IFxufSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHtyZXF1ZXN0SWRsZUNhbGxiYWNrLCBjYW5jZWxJZGxlQ2FsbGJhY2t9IGZyb20gJ3JlcXVlc3RpZGxlY2FsbGJhY2snIC8vIHBvbHlmaWxsIGlmIG5lZWRlZFxuXG5pbXBvcnQgeyBPdXRQb3J0YWwgfSBmcm9tICdyZWFjdC1yZXZlcnNlLXBvcnRhbCcgLy8gZmV0Y2ggZnJvbSBjYWNoZVxuXG5pbXBvcnQgUGxhY2Vob2xkZXIgZnJvbSAnLi9jZWxsZnJhbWUvUGxhY2Vob2xkZXInIC8vIGRlZmF1bHRcblxuaW1wb3J0IHsgQ3JhZGxlQ29udGV4dCB9IGZyb20gJy4vQ3JhZGxlJ1xuXG5jb25zdCBkZWZhdWx0UGxhY2Vob2xkZXJNZXNzYWdlcyA9IHtcbiAgICBsb2FkaW5nOicobG9hZGluZy4uLiknLFxuICAgIHJldHJpZXZpbmc6JyhyZXRyaWV2aW5nIGZyb20gY2FjaGUpJyxcbiAgICBudWxsOidlbmQgb2YgbGlzdCcsXG4gICAgdW5kZWZpbmVkOidob3N0IHJldHVybmVkIFwidW5kZWZpbmVkXCInLFxuICAgIGludmFsaWQ6J2ludmFsaWQgUmVhY3QgZWxlbWVudCcsXG59XG5cbmNvbnN0IENlbGxGcmFtZSA9ICh7XG4gICAgb3JpZW50YXRpb24sIFxuICAgIGNlbGxIZWlnaHQsIFxuICAgIGNlbGxXaWR0aCwgXG4gICAgY2VsbE1pbkhlaWdodCxcbiAgICBjZWxsTWluV2lkdGgsXG4gICAgbGF5b3V0LFxuICAgIGdldEl0ZW0sIC8vIGZ1bmN0aW9uIHByb3ZpZGVkIGJ5IGhvc3RcbiAgICBsaXN0c2l6ZSwgLy8gZm9yIGZlZWRiYWNrIGluIHBsYWNlaG9sZGVyXG4gICAgcGxhY2Vob2xkZXIsIC8vIG9wdGlvbmFsbHkgcHJvdmlkZWQgYnkgaG9zdFxuICAgIGl0ZW1JRCwgLy8gc2Vzc2lvbiBpdGVtSURcbiAgICBpbmRleCwgLy8gbG9naWNhbCBpbmRleCBpbiBpbmZpbml0ZSBsaXN0XG4gICAgaW5zdGFuY2VJRCwgLy8gQ2VsbEZyYW1lIHNlc3Npb24gSURcbiAgICBzY3JvbGxlcklELCAvLyBzY3JvbGxlciBJRCAoZm9yIGRlYnVnZ2luZylcbiAgICBpc1RyaWdnZXJjZWxsLFxuICAgIHBsYWNlaG9sZGVyRnJhbWVTdHlsZXMsXG4gICAgcGxhY2Vob2xkZXJMaW5lclN0eWxlcyxcbiAgICBwbGFjZWhvbGRlckVycm9yRnJhbWVTdHlsZXMsXG4gICAgcGxhY2Vob2xkZXJFcnJvckxpbmVyU3R5bGVzLFxuICAgIHBsYWNlaG9sZGVyTWVzc2FnZXMsXG4gICAgdXNlUGxhY2Vob2xkZXIsXG4gICAgZ3JpZHN0YXJ0c3R5bGUsXG59KSA9PiB7XG5cbiAgICBjb25zdCBjb3JlQ29uZmlnUmVmID0gdXNlUmVmKG51bGwpXG4gICAgY29yZUNvbmZpZ1JlZi5jdXJyZW50ID0ge1xuICAgICAgICBvcmllbnRhdGlvbixcbiAgICAgICAgbGF5b3V0LFxuICAgICAgICBjZWxsV2lkdGgsXG4gICAgICAgIGNlbGxIZWlnaHRcbiAgICB9XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBzZXR1cCBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgY29uc3QgY3JhZGxlQ29udGV4dCA9IHVzZUNvbnRleHQoQ3JhZGxlQ29udGV4dClcblxuICAgIGNvbnN0IHsgXG4gICAgICAgIGNhY2hlQVBJLCBcbiAgICAgICAgc2Nyb2xsZXJQcm9wZXJ0aWVzUmVmLCAvLyBmb3IgdGhlIHVzZXIgY29udGVudCwgaWYgcmVxdWVzdGVkXG4gICAgICAgIG51bGxJdGVtU2V0TWF4TGlzdHNpemUsIC8vIGZvciBpbnRlcm5hbCBub3RpZmljYXRpb24gb2YgZW5kLW9mLWxpc3RcbiAgICAgICAgaXRlbUV4Y2VwdGlvbkNhbGxiYWNrLCAvLyBmb3Igbm90aWZpY2F0aW9uIHRvIGhvc3Qgb2YgZXJyb3JcbiAgICAgICAgSURMRUNBTExCQUNLX1RJTUVPVVQsIC8vIHRvIG9wdGltaXplIHJlcXVlc3RJZGxlQ2FsbGJhY2tcbiAgICAgICAgdHJpZ2dlcmNlbGxUcmlnZ2VybGluZXNSZWYsXG4gICAgfSA9IGNyYWRsZUNvbnRleHRcbiAgICBcbiAgICAvLyBzdHlsZSBjaGFuZ2UgZ2VuZXJhdGVzIHN0YXRlIHJlZnJlc2hcbiAgICBjb25zdCBzdHlsZXNSZWYgPSB1c2VSZWYoe30pXG4gICAgY29uc3QgaG9sZGVyU3R5bGVzUmVmID0gdXNlUmVmKHt9KVxuXG4gICAgY29uc3QgcGxhY2Vob2xkZXJNZXNzYWdlc1JlZiA9IHVzZVJlZihudWxsKVxuXG4gICBwbGFjZWhvbGRlck1lc3NhZ2VzUmVmLmN1cnJlbnQgPSB1c2VNZW1vKCgpID0+IHtcblxuICAgICAgICBjb25zdCBuZXdNZXNzYWdlcyA9IHsuLi5kZWZhdWx0UGxhY2Vob2xkZXJNZXNzYWdlcywuLi5wbGFjZWhvbGRlck1lc3NhZ2VzfVxuXG4gICAgICAgIHJldHVybiBuZXdNZXNzYWdlc1xuXG4gICAgfSxbcGxhY2Vob2xkZXJNZXNzYWdlc10pXG5cbiAgICAvLyBwcm9jZXNzaW5nIHN0YXRlXG4gICAgY29uc3QgW2ZyYW1lU3RhdGUsIHNldEZyYW1lU3RhdGVdID0gdXNlU3RhdGUoJ3NldHVwJylcbiAgICBjb25zdCBmcmFtZVN0YXRlUmVmID0gdXNlUmVmKG51bGwpXG4gICAgZnJhbWVTdGF0ZVJlZi5jdXJyZW50ID0gZnJhbWVTdGF0ZVxuXG4gICAgLy8gRE9NIHJlZlxuICAgIGNvbnN0IGZyYW1lUmVmID0gdXNlUmVmKG51bGwpXG4gICAgLy8gdG8gdHJhY2sgdW5tb3VudCBpbnRlcnJ1cHRcbiAgICBjb25zdCBpc01vdW50ZWRSZWYgPSB1c2VSZWYodHJ1ZSlcbiAgICAvLyBjYWNoZSBkYXRhXG4gICAgY29uc3QgcG9ydGFsTWV0YWRhdGFSZWYgPSB1c2VSZWYobnVsbClcbiAgICAvLyB0aGUgcGxhY2Vob2xkZXIgdG8gdXNlXG4gICAgY29uc3QgcGxhY2Vob2xkZXJSZWYgPSB1c2VSZWYobnVsbClcbiAgICAvLyB0aGUgc2Vzc2lvbiBpdGVtSUQgdG8gdXNlOyBjb3VsZCBiZSB1cGRhdGVkIGJ5IHBhcmVudFxuICAgIGNvbnN0IGl0ZW1JRFJlZiA9IHVzZVJlZihudWxsKVxuICAgIGl0ZW1JRFJlZi5jdXJyZW50ID0gaXRlbUlEXG4gICAgY29uc3QgY2VsbEZyYW1lUHJvcGVydGllc1JlZiA9IHVzZVJlZihudWxsKVxuICAgIGNlbGxGcmFtZVByb3BlcnRpZXNSZWYuY3VycmVudCA9IHtcbiAgICAgICAgaXRlbUlELFxuICAgICAgICBpbmRleFxuICAgIH1cbiAgICAvLyBmZXRjaCBlcnJvclxuICAgIGNvbnN0IGVycm9yUmVmID0gdXNlUmVmKGZhbHNlKVxuICAgIC8vIHBsYWNlaG9sZGVyIG1lc3NhZ2VcbiAgICBjb25zdCBtZXNzYWdlUmVmID0gdXNlUmVmKG51bGwpXG5cbiAgICB1c2VFZmZlY3QoKCk9PntcblxuICAgICAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IHRydWVcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuXG4gICAgICAgICAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlXG5cbiAgICAgICAgfVxuXG4gICAgfSxbXSlcblxuICAgIC8vIGZvciB1bm1vdW50XG4gICAgdXNlRWZmZWN0KCgpPT57XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcblxuICAgICAgICAgICAgY2FuY2VsaWRsZWNhbGxiYWNrKHJlcXVlc3RJZGxlQ2FsbGJhY2tJZFJlZi5jdXJyZW50KVxuXG4gICAgICAgICAgICBjYWNoZUFQSS51bnJlZ2lzdGVyUGVuZGluZ1BvcnRhbChpbmRleClcblxuICAgICAgICB9XG5cbiAgICB9LFtdKVxuXG4gICAgLy8gcmVmcmVzaCBjb250ZW50IGlmIGl0ZW1JRCBjaGFuZ2VzXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpPT57XG5cbiAgICAgICAgaWYgKGZyYW1lU3RhdGVSZWYuY3VycmVudCA9PSAnc2V0dXAnKSByZXR1cm5cblxuICAgICAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHNldEZyYW1lU3RhdGUoJ2dldHVzZXJjb250ZW50JylcblxuICAgIH0sW2l0ZW1JRF0pXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLSBbIHBsYWNlaG9sZGVyIGRlZmluaXRpb24gXSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBjb25zdCBjdXN0b21wbGFjZWhvbGRlciA9IHVzZU1lbW8oKCkgPT4ge1xuXG4gICAgICAgIGlmICghdXNlUGxhY2Vob2xkZXIpIHJldHVybiBudWxsICAgICAgICBcblxuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXI/XG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KHBsYWNlaG9sZGVyLCBcbiAgICAgICAgICAgICAgICB7aW5kZXgsIGxpc3RzaXplLCBtZXNzYWdlOm1lc3NhZ2VSZWYuY3VycmVudCwgZXJyb3I6ZXJyb3JSZWYuY3VycmVudH0pOlxuICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgXG4gICAgfSxbXG4gICAgICAgIGluZGV4LCBcbiAgICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICAgIGxpc3RzaXplLCBcbiAgICAgICAgbWVzc2FnZVJlZi5jdXJyZW50LCBcbiAgICAgICAgZXJyb3JSZWYuY3VycmVudCwgXG4gICAgICAgIHVzZVBsYWNlaG9sZGVyXG4gICAgXSlcblxuICAgIHBsYWNlaG9sZGVyUmVmLmN1cnJlbnQgPSB1c2VNZW1vKCgpPT57XG5cbiAgICAgICAgaWYgKCF1c2VQbGFjZWhvbGRlcikgcmV0dXJuIG51bGxcblxuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IFxuICAgICAgICAgICAgY3VzdG9tcGxhY2Vob2xkZXI/XG4gICAgICAgICAgICAgICAgY3VzdG9tcGxhY2Vob2xkZXI6XG4gICAgICAgICAgICAgICAgPFBsYWNlaG9sZGVyIFxuICAgICAgICAgICAgICAgICAgICBrZXkgPSAncGxhY2Vob2xkZXInXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0geyBpbmRleCB9IFxuICAgICAgICAgICAgICAgICAgICBsaXN0c2l6ZSA9IHsgbGlzdHNpemUgfSBcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHsgbWVzc2FnZVJlZi5jdXJyZW50IH1cbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB7IGVycm9yUmVmLmN1cnJlbnQgfVxuICAgICAgICAgICAgICAgICAgICB1c2VyRnJhbWVTdHlsZXMgPSB7IHBsYWNlaG9sZGVyRnJhbWVTdHlsZXMgfVxuICAgICAgICAgICAgICAgICAgICB1c2VyTGluZXJTdHlsZXMgPSB7IHBsYWNlaG9sZGVyTGluZXJTdHlsZXMgfVxuICAgICAgICAgICAgICAgICAgICB1c2VyRXJyb3JGcmFtZVN0eWxlcyA9IHsgcGxhY2Vob2xkZXJFcnJvckZyYW1lU3R5bGVzIH1cbiAgICAgICAgICAgICAgICAgICAgdXNlckVycm9yTGluZXJTdHlsZXMgPSB7IHBsYWNlaG9sZGVyRXJyb3JMaW5lclN0eWxlcyB9XG4gICAgICAgICAgICAgICAgLz5cblxuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXJcblxuICAgIH0sIFtcbiAgICAgICAgaW5kZXgsIFxuICAgICAgICBjdXN0b21wbGFjZWhvbGRlciwgXG4gICAgICAgIGxpc3RzaXplLCBcbiAgICAgICAgbWVzc2FnZVJlZi5jdXJyZW50LCBcbiAgICAgICAgZXJyb3JSZWYuY3VycmVudCxcbiAgICAgICAgdXNlUGxhY2Vob2xkZXIsXG4gICAgICAgIHBsYWNlaG9sZGVyRnJhbWVTdHlsZXMsXG4gICAgICAgIHBsYWNlaG9sZGVyTGluZXJTdHlsZXMsXG4gICAgICAgIHBsYWNlaG9sZGVyRXJyb3JGcmFtZVN0eWxlcyxcbiAgICAgICAgcGxhY2Vob2xkZXJFcnJvckxpbmVyU3R5bGVzLFxuICAgIF0pXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tIFsgcmVxdWVzdGlkbGVjYWxsYmFjayBjb25maWcgXSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGNvbnN0IHJlcXVlc3RpZGxlY2FsbGJhY2sgPSAvLyByZXF1ZXN0SWRsZUNhbGxiYWNrXG4gICAgICAgIHdpbmRvd1sncmVxdWVzdElkbGVDYWxsYmFjayddP1xuICAgICAgICAgICAgd2luZG93WydyZXF1ZXN0SWRsZUNhbGxiYWNrJ106XG4gICAgICAgICAgICByZXF1ZXN0SWRsZUNhbGxiYWNrXG5cbiAgICBjb25zdCBjYW5jZWxpZGxlY2FsbGJhY2sgPSAvLyBjYW5jZWxJZGxlQ2FsbGJhY2tcbiAgICAgICAgd2luZG93WydjYW5jZWxJZGxlQ2FsbGJhY2snXT9cbiAgICAgICAgICAgIHdpbmRvd1snY2FuY2VsSWRsZUNhbGxiYWNrJ106XG4gICAgICAgICAgICBjYW5jZWxJZGxlQ2FsbGJhY2tcblxuICAgIGNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2tJZFJlZiA9IHVzZVJlZihudWxsKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1bIHByb2Nlc3NpbmcgXS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyBzZXQgc3R5bGVzXG4gICAgdXNlRWZmZWN0KCgpPT57XG5cbiAgICAgICAgbGV0IG5ld0ZyYW1lU3R5bGVzID0gZ2V0RnJhbWVTdHlsZXMoXG4gICAgICAgICAgICBvcmllbnRhdGlvbiwgY2VsbEhlaWdodCwgY2VsbFdpZHRoLCBjZWxsTWluSGVpZ2h0LCBjZWxsTWluV2lkdGgsIGxheW91dCwgc3R5bGVzUmVmLmN1cnJlbnQpXG5cbiAgICAgICAgaWYgKGdyaWRzdGFydHN0eWxlKSB7XG4gICAgICAgICAgICBuZXdGcmFtZVN0eWxlcyA9IHsuLi5uZXdGcmFtZVN0eWxlcywuLi5ncmlkc3RhcnRzdHlsZX1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgbmV3SG9sZGVyU3R5bGVzID0gZ2V0Q29udGVudEhvbGRlclN0eWxlcyhsYXlvdXQsIG9yaWVudGF0aW9uLCBjZWxsTWluV2lkdGgsIGNlbGxNaW5IZWlnaHQpXG5cbiAgICAgICAgaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50KSB7XG5cbiAgICAgICAgICAgIHN0eWxlc1JlZi5jdXJyZW50ID0gbmV3RnJhbWVTdHlsZXNcbiAgICAgICAgICAgIGhvbGRlclN0eWxlc1JlZi5jdXJyZW50ID0gbmV3SG9sZGVyU3R5bGVzXG5cbiAgICAgICAgfVxuXG4gICAgfSxbb3JpZW50YXRpb24sIGNlbGxIZWlnaHQsIGNlbGxXaWR0aCwgY2VsbE1pbkhlaWdodCwgY2VsbE1pbldpZHRoLCBsYXlvdXQsIGdyaWRzdGFydHN0eWxlXSkgXG5cbiAgICBjb25zdCBwb3J0YWxOb2RlUmVmID0gdXNlUmVmKG51bGwpXG5cbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuXG4gICAgICAgIHN3aXRjaCAoZnJhbWVTdGF0ZSkge1xuXG4gICAgICAgICAgICBjYXNlICdzZXR1cCc6IHtcblxuICAgICAgICAgICAgICAgIHNldEZyYW1lU3RhdGUoJ3dvcmtpbmcnKSAvLyAnZ2V0dXNlcmNvbnRlbnQnIHdpbGwgYmUgY2FsbGVkXG5cbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgJ3dvcmtpbmcnOiB7XG5cbiAgICAgICAgICAgICAgICBzZXRGcmFtZVN0YXRlKCdnZXR1c2VyY29udGVudCcpIC8vIGRlbGF5IHBhaW50IHdoaWxlIHdvcmtpbmdcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgJ2dldHVzZXJjb250ZW50Jzoge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbUlEID0gaXRlbUlEUmVmLmN1cnJlbnRcbiAgICAgICAgICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZUFQSS5oYXNQb3J0YWwoaXRlbUlEKVxuICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0LFxuICAgICAgICAgICAgICAgICAgICBvcmllbnRhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgY2VsbFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBjZWxsSGVpZ2h0LFxuICAgICAgICAgICAgICAgIH0gPSBjb3JlQ29uZmlnUmVmLmN1cnJlbnRcblxuICAgICAgICAgICAgICAgIGlmIChjYWNoZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlUmVmLmN1cnJlbnQgPSBwbGFjZWhvbGRlck1lc3NhZ2VzUmVmLmN1cnJlbnQucmV0cmlldmluZ1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01vdW50ZWRSZWYuY3VycmVudCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgY2FjaGUgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9ydGFsTWV0YWRhdGFSZWYuY3VycmVudCA9IGNhY2hlQVBJLmdldFBvcnRhbE1ldGFkYXRhKGl0ZW1JRClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBjZWxsIGFuZCBzY3JvbGxlciBwcm9wZXJ0aWVzIHJlZiBpbiBjYXNlIG9mIHN3aXRjaCBpbiBlaXRoZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnRhbE1ldGFkYXRhUmVmLmN1cnJlbnQuc2Nyb2xsZXJQcm9wZXJ0aWVzLmNlbGxGcmFtZVByb3BlcnRpZXNSZWYgPSBjZWxsRnJhbWVQcm9wZXJ0aWVzUmVmXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3J0YWxNZXRhZGF0YVJlZi5jdXJyZW50LnNjcm9sbGVyUHJvcGVydGllcy5zY3JvbGxlclByb3BlcnRpZXNSZWYgPSBzY3JvbGxlclByb3BlcnRpZXNSZWZcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldCBPdXRQb3J0YWwgbm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9ydGFsTm9kZVJlZi5jdXJyZW50ID0gcG9ydGFsTWV0YWRhdGFSZWYuY3VycmVudC5wb3J0YWxOb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDb250YWluZXJTdHlsZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9ydGFsTm9kZVJlZi5jdXJyZW50LmVsZW1lbnQsIGxheW91dCwgb3JpZW50YXRpb24sIGNlbGxXaWR0aCwgY2VsbEhlaWdodClcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RnJhbWVTdGF0ZSgncmV0cmlldmVkJylcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VSZWYuY3VycmVudCA9IHBsYWNlaG9sZGVyTWVzc2FnZXNSZWYuY3VycmVudC5sb2FkaW5nXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXJ2ZSBzcGFjZSBpbiB0aGUgY2FjaGVcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVBUEkucmVnaXN0ZXJQZW5kaW5nUG9ydGFsKGluZGV4KVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGVucXVldWUgdGhlIGZldGNoXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZGxlQ2FsbGJhY2tJZFJlZi5jdXJyZW50ID0gcmVxdWVzdGlkbGVjYWxsYmFjayhhc3luYyAoKT0+e1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmV0dXJudmFsdWUsIHVzZXJjb250ZW50LCBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvY2VzcyB0aGUgZmV0Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyY29udGVudCA9IGF3YWl0IGdldEl0ZW0oaW5kZXgsIGl0ZW1JRClcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyY29udGVudCA9PT0gbnVsbCkgcmV0dXJudmFsdWUgPSB1c2VyY29udGVudFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJjb250ZW50ID09PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihwbGFjZWhvbGRlck1lc3NhZ2VzUmVmLmN1cnJlbnQudW5kZWZpbmVkKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybnZhbHVlID0gdXNlcmNvbnRlbnQgPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGVcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvY2VzcyB0aGUgcmV0dXJuIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHVzZXJjb250ZW50ICE9PSBudWxsKSAmJiAodXNlcmNvbnRlbnQgIT09IHVuZGVmaW5lZCkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWRFbGVtZW50ID0gUmVhY3QuaXNWYWxpZEVsZW1lbnQodXNlcmNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybnZhbHVlID0gdXNlcmNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcmNvbnRlbnQgPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IocGxhY2Vob2xkZXJNZXNzYWdlc1JlZi5jdXJyZW50LmludmFsaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVwYXJlIHRoZSBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh1c2VyY29udGVudCAhPT0gbnVsbCkgJiYgKHVzZXJjb250ZW50ICE9PSB1bmRlZmluZWQpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdXNlcmNvbnRlbnQgaXMgb3RoZXJ3aXNlIGRpc2FsbG93ZWQsIGxldCBlcnJvciBoYW5kbGluZyBkZWFsIHdpdGggaXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250ZW50IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzY3JvbGxlclByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsRnJhbWVQcm9wZXJ0aWVzUmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsZXJQcm9wZXJ0aWVzUmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhZGRpbkNvdW50ID0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGRpblByb3BzOntzY3JvbGxlclByb3BlcnRpZXM/Ok9iamVjdCwgY2FjaGVBUEk/OkZ1bmN0aW9ufSA9IHt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyY29udGVudC5wcm9wcz8uaGFzT3duUHJvcGVydHkoJ3Njcm9sbGVyUHJvcGVydGllcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRpblByb3BzLnNjcm9sbGVyUHJvcGVydGllcyA9IHNjcm9sbGVyUHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkaW5Db3VudCsrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJjb250ZW50LnByb3BzPy5oYXNPd25Qcm9wZXJ0eSgnY2FjaGVBUEknKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkaW5Qcm9wcy5jYWNoZUFQSSA9IGNhY2hlQVBJLmluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRpbkNvdW50KytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRkaW5Db3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IFJlYWN0LmNsb25lRWxlbWVudCh1c2VyY29udGVudCwgYWRkaW5Qcm9wcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSB1c2VyY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0dmFsID0gcG9ydGFsTWV0YWRhdGFSZWYuY3VycmVudCA9IGF3YWl0IGNhY2hlQVBJLmNyZWF0ZVBvcnRhbChjb250ZW50LCBpbmRleCwgaXRlbUlELCBzY3JvbGxlclByb3BlcnRpZXMpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnRhbE5vZGVSZWYuY3VycmVudCA9IHBvcnRhbE1ldGFkYXRhUmVmLmN1cnJlbnQucG9ydGFsTm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q29udGFpbmVyU3R5bGVzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnRhbE5vZGVSZWYuY3VycmVudC5lbGVtZW50LCBsYXlvdXQsIG9yaWVudGF0aW9uLCBjZWxsV2lkdGgsIGNlbGxIZWlnaHQpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ICYmIHNldEZyYW1lU3RhdGUoJ2luc2VydGluZycpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBudWxsIG9yIHVuZGVmaW5lZDsgaGFuZGxlIG5vbi1jb21wb25lbnQgdmFsdWVcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZUFQSS51bnJlZ2lzdGVyUGVuZGluZ1BvcnRhbChpbmRleCkgLy8gY3JlYXRlIHBvcnRhbCBmYWlsZWRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlcmNvbnRlbnQgPT09IG51bGwpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJ1bmNhdGUgbGlzdHNpemUgYXQgdGhpcyBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUV4Y2VwdGlvbkNhbGxiYWNrICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1FeGNlcHRpb25DYWxsYmFjayhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgsIGl0ZW1JRCwgcmV0dXJudmFsdWUsICdjZWxsRnJhbWUnLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFcnJvcihwbGFjZWhvbGRlck1lc3NhZ2VzUmVmLmN1cnJlbnQubnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsSXRlbVNldE1heExpc3RzaXplKGluZGV4KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIHVzZXJjb250ZW50ID09PSB1bmRlZmluZWQsIG1lYW5pbmcgYW4gZXJyb3IgaGFzIG9jY3VycmVkXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoYW5nZSBwbGFjZWhvbGRlciBtZXNzYWdlIHRvIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yUmVmLmN1cnJlbnQgPSBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90aWZ5IHRoZSBob3N0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtRXhjZXB0aW9uQ2FsbGJhY2sgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUV4Y2VwdGlvbkNhbGxiYWNrKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCwgaXRlbUlELCByZXR1cm52YWx1ZSwgJ2NlbGxGcmFtZScsIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc01vdW50ZWRSZWYuY3VycmVudCAmJiBzZXRGcmFtZVN0YXRlKCdlcnJvcicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0se3RpbWVvdXQ6SURMRUNBTExCQUNLX1RJTUVPVVR9KVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSAnaW5zZXJ0aW5nJzpcbiAgICAgICAgICAgIGNhc2UgJ3JldHJpZXZlZCc6IHtcblxuICAgICAgICAgICAgICAgIHNldEZyYW1lU3RhdGUoJ3JlYWR5JylcblxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9LCBbZnJhbWVTdGF0ZV0pXG5cbiAgICAvLyBOb3RlOiB0aGUgY29udGVudGhvbGRlciB0eXBlIGxheWVyIGlzIGluY2x1ZGVkIHRvIHByb3ZpZGUgYW4gYW5jaG9yIGZvciB0aGUgdHJpZ2dlcmxpbmVzLlxuICAgIHJldHVybiA8ZGl2IFxuXG4gICAgICAgIHJlZiA9IHsgZnJhbWVSZWYgfSBcbiAgICAgICAgZGF0YS10eXBlID0gJ2NlbGxmcmFtZScgXG4gICAgICAgIGRhdGEtc2Nyb2xsZXJpZCA9IHsgc2Nyb2xsZXJJRCB9IFxuICAgICAgICBkYXRhLWluZGV4ID0geyBpbmRleCB9IFxuICAgICAgICBkYXRhLWluc3RhbmNlaWQgPSB7IGluc3RhbmNlSUQgfSBcbiAgICAgICAgc3R5bGUgPSB7IHN0eWxlc1JlZi5jdXJyZW50IH1cblxuICAgID5cblxuICAgICAgICB7KGZyYW1lU3RhdGUgIT0gJ3NldHVwJyk/XG4gICAgICAgICAgICAoPGRpdiBkYXRhLXR5cGUgPSAnY29udGVudGhvbGRlcicgc3R5bGUgPSB7aG9sZGVyU3R5bGVzUmVmLmN1cnJlbnR9PiBcbiAgICAgICAgICAgICAgICB7KChmcmFtZVN0YXRlICE9ICdyZWFkeScpP1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyUmVmLmN1cnJlbnQ6XG4gICAgICAgICAgICAgICAgPE91dFBvcnRhbCBrZXkgPSAncG9ydGFsJyBub2RlID0geyBwb3J0YWxOb2RlUmVmLmN1cnJlbnQgfS8+KX1cbiAgICAgICAgICAgIDwvZGl2Pik6PGRpdj48L2Rpdj59XG4gICAgICAgIHsoaXNUcmlnZ2VyY2VsbD9cbiAgICAgICAgICAgIHRyaWdnZXJjZWxsVHJpZ2dlcmxpbmVzUmVmLmN1cnJlbnQ6XG4gICAgICAgICAgICBudWxsKVxuICAgICAgICB9XG5cbiAgICA8L2Rpdj5cblxufSAvLyBDZWxsRnJhbWVcbmV4cG9ydCBkZWZhdWx0IENlbGxGcmFtZVxuXG4vLyB1dGlsaXRpZXNcbmNvbnN0IGdldEZyYW1lU3R5bGVzID0gXG4gICAgKG9yaWVudGF0aW9uLCBjZWxsSGVpZ2h0LCBjZWxsV2lkdGgsIGNlbGxNaW5IZWlnaHQsIGNlbGxNaW5XaWR0aCwgbGF5b3V0LCBzdHlsZXMpID0+IHtcblxuICAgIGNvbnN0IHN0eWxlc2V0ID0gey4uLnN0eWxlcyxwb3NpdGlvbjoncmVsYXRpdmUnLCBvdmVyZmxvdzondmlzaWJsZSd9XG5cbiAgICBpZiAob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcblxuICAgICAgICBzdHlsZXNldC53aWR0aCA9IG51bGxcbiAgICAgICAgaWYgKGxheW91dCA9PSAndW5pZm9ybScpIHtcblxuICAgICAgICAgICAgc3R5bGVzZXQuaGVpZ2h0ID0gY2VsbEhlaWdodCArICdweCdcbiAgICAgICAgICAgIHN0eWxlc2V0Lm1pbkhlaWdodCA9IG51bGxcbiAgICAgICAgICAgIHN0eWxlc2V0Lm1heEhlaWdodCA9IG51bGxcblxuICAgICAgICB9IGVsc2UgeyAvLyAndmFyaWFibGUnXG5cbiAgICAgICAgICAgIHN0eWxlc2V0LmhlaWdodCA9IG51bGxcbiAgICAgICAgICAgIHN0eWxlc2V0Lm1pbkhlaWdodCA9IGNlbGxNaW5IZWlnaHQgKyAncHgnXG4gICAgICAgICAgICBzdHlsZXNldC5tYXhIZWlnaHQgPSBjZWxsSGVpZ2h0ICsgJ3B4J1xuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfSBlbHNlIHsgLy8gJ2hvcml6b250YWwnXG5cbiAgICAgICAgc3R5bGVzZXQuaGVpZ2h0ID0gbnVsbFxuICAgICAgICBpZiAobGF5b3V0ID09ICd1bmlmb3JtJykge1xuXG4gICAgICAgICAgICBzdHlsZXNldC53aWR0aCA9IGNlbGxXaWR0aCArICdweCdcbiAgICAgICAgICAgIHN0eWxlc2V0Lm1pbldpZHRoID0gbnVsbFxuICAgICAgICAgICAgc3R5bGVzZXQubWF4V2lkdGggPSBudWxsXG5cbiAgICAgICAgfSBlbHNlIHsgLy8gJ3ZhcmlhYmxlJ1xuXG4gICAgICAgICAgICBzdHlsZXNldC53aWR0aCA9IG51bGxcbiAgICAgICAgICAgIHN0eWxlc2V0Lm1pbldpZHRoID0gY2VsbE1pbldpZHRoICsgJ3B4J1xuICAgICAgICAgICAgc3R5bGVzZXQubWF4V2lkdGggPSBjZWxsV2lkdGggKyAncHgnXG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlc2V0XG5cbn1cblxuY29uc3QgZ2V0Q29udGVudEhvbGRlclN0eWxlcyA9IChsYXlvdXQsb3JpZW50YXRpb24sY2VsbE1pbldpZHRoLCBjZWxsTWluSGVpZ2h0ICkgPT4ge1xuICAgIGxldCBzdHlsZXM6UmVhY3QuQ1NTUHJvcGVydGllcyA9IHt9XG4gICAgaWYgKGxheW91dCA9PSAndW5pZm9ybScpIHtcbiAgICAgICAgc3R5bGVzID0ge1xuICAgICAgICAgICAgaW5zZXQ6JzBweCcsXG4gICAgICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxuICAgICAgICAgICAgaGVpZ2h0Om51bGwsXG4gICAgICAgICAgICB3aWR0aDpudWxsLFxuICAgICAgICAgICAgbWluV2lkdGg6bnVsbCxcbiAgICAgICAgICAgIG1pbkhlaWdodDpudWxsLFxuICAgICAgICB9XG4gICAgfSBlbHNlIHsgLy8gdmFyaWFibGVcbiAgICAgICAgc3R5bGVzLmluc2V0ID0gbnVsbFxuICAgICAgICBzdHlsZXMucG9zaXRpb24gPSBudWxsXG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICBzdHlsZXMud2lkdGggPSAnMTAwJSdcbiAgICAgICAgICAgIHN0eWxlcy5oZWlnaHQgPSBudWxsXG4gICAgICAgICAgICBzdHlsZXMubWluV2lkdGggPSBudWxsXG4gICAgICAgICAgICBzdHlsZXMubWluSGVpZ2h0ID0gY2VsbE1pbkhlaWdodCArICdweCdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0eWxlcy53aWR0aCA9IG51bGxcbiAgICAgICAgICAgIHN0eWxlcy5oZWlnaHQgPSAnMTAwJSdcbiAgICAgICAgICAgIHN0eWxlcy5taW5XaWR0aCA9IGNlbGxNaW5XaWR0aCArICdweCdcbiAgICAgICAgICAgIHN0eWxlcy5taW5IZWlnaHQgPSBudWxsXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlc1xufVxuXG4vLyBzZWUgYWxzbyBzb21lIGJhc2Ugc3R5bGVzIHNldCBpbiBjYWNoZUFQSVxuY29uc3Qgc2V0Q29udGFpbmVyU3R5bGVzID0gKGNvbnRhaW5lciwgbGF5b3V0LCBvcmllbnRhdGlvbiwgY2VsbFdpZHRoLCBjZWxsSGVpZ2h0KSA9PiB7XG5cbiAgICBjb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJ1xuXG4gICAgaWYgKGxheW91dCA9PSAndW5pZm9ybScpIHtcblxuICAgICAgICBjb250YWluZXIuc3R5bGUuaW5zZXQgPSAnMHB4JyBcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xuICAgICAgICBjb250YWluZXIuc3R5bGUubWF4V2lkdGggPSBudWxsXG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5tYXhIZWlnaHQgPSBudWxsXG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBudWxsXG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS53aWR0aCA9IG51bGxcblxuICAgIH0gZWxzZSB7IC8vIHZhcmlhYmxlXG5cbiAgICAgICAgY29udGFpbmVyLnN0eWxlLmluc2V0ID0gbnVsbCBcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gbnVsbFxuXG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS53aWR0aCA9ICcxMDAlJ1xuICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IG51bGxcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5tYXhXaWR0aCA9IG51bGxcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5tYXhIZWlnaHQgPSBjZWxsSGVpZ2h0ICsgJ3B4J1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS53aWR0aCA9IG51bGxcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnMTAwJSdcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5tYXhXaWR0aCA9IGNlbGxXaWR0aCArICdweCdcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5tYXhIZWlnaHQgPSBudWxsXG5cbiAgICAgICAgfVxuXG4gICAgfVxufVxuXG4iXSwibmFtZXMiOlsiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwiZXhwb3J0cyIsIk9wIiwiT2JqZWN0IiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsImRlc2MiLCJ2YWx1ZSIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVyciIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJmbiIsImFyZyIsInR5cGUiLCJjYWxsIiwiQ29udGludWVTZW50aW5lbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIm1ldGhvZCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVjb3JkIiwicmVzdWx0IiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJlcnJvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwic3RhdGUiLCJFcnJvciIsImRvbmUiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwibWV0aG9kTmFtZSIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImxlbmd0aCIsImkiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwiaXRlciIsImtleXMiLCJ2YWwiLCJvYmplY3QiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwiX2NhdGNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIm8iLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsIm4iLCJ0b1N0cmluZyIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJsZW4iLCJhcnIyIiwiX2kiLCJfcyIsIl9lIiwiX3giLCJfciIsIl9hcnIiLCJfbiIsIl9kIiwiaXNBcnJheSIsInJlYWN0XzEiLCJfX2ltcG9ydFN0YXIiLCJyZXF1aXJlIiwicmVxdWVzdGlkbGVjYWxsYmFja18xIiwicmVhY3RfcmV2ZXJzZV9wb3J0YWxfMSIsIlBsYWNlaG9sZGVyXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJDcmFkbGVfMSIsImRlZmF1bHRQbGFjZWhvbGRlck1lc3NhZ2VzIiwibG9hZGluZyIsInJldHJpZXZpbmciLCJpbnZhbGlkIiwiQ2VsbEZyYW1lIiwiX3JlZiIsIm9yaWVudGF0aW9uIiwiY2VsbEhlaWdodCIsImNlbGxXaWR0aCIsImNlbGxNaW5IZWlnaHQiLCJjZWxsTWluV2lkdGgiLCJsYXlvdXQiLCJnZXRJdGVtIiwibGlzdHNpemUiLCJwbGFjZWhvbGRlciIsIml0ZW1JRCIsImluZGV4IiwiaW5zdGFuY2VJRCIsInNjcm9sbGVySUQiLCJpc1RyaWdnZXJjZWxsIiwicGxhY2Vob2xkZXJGcmFtZVN0eWxlcyIsInBsYWNlaG9sZGVyTGluZXJTdHlsZXMiLCJwbGFjZWhvbGRlckVycm9yRnJhbWVTdHlsZXMiLCJwbGFjZWhvbGRlckVycm9yTGluZXJTdHlsZXMiLCJwbGFjZWhvbGRlck1lc3NhZ2VzIiwidXNlUGxhY2Vob2xkZXIiLCJncmlkc3RhcnRzdHlsZSIsImNvcmVDb25maWdSZWYiLCJ1c2VSZWYiLCJjdXJyZW50IiwiY3JhZGxlQ29udGV4dCIsInVzZUNvbnRleHQiLCJDcmFkbGVDb250ZXh0IiwiY2FjaGVBUEkiLCJzY3JvbGxlclByb3BlcnRpZXNSZWYiLCJudWxsSXRlbVNldE1heExpc3RzaXplIiwiaXRlbUV4Y2VwdGlvbkNhbGxiYWNrIiwiSURMRUNBTExCQUNLX1RJTUVPVVQiLCJ0cmlnZ2VyY2VsbFRyaWdnZXJsaW5lc1JlZiIsInN0eWxlc1JlZiIsImhvbGRlclN0eWxlc1JlZiIsInBsYWNlaG9sZGVyTWVzc2FnZXNSZWYiLCJ1c2VNZW1vIiwibmV3TWVzc2FnZXMiLCJhc3NpZ24iLCJfcmVmMiIsInVzZVN0YXRlIiwiX3JlZjMiLCJmcmFtZVN0YXRlIiwic2V0RnJhbWVTdGF0ZSIsImZyYW1lU3RhdGVSZWYiLCJmcmFtZVJlZiIsImlzTW91bnRlZFJlZiIsInBvcnRhbE1ldGFkYXRhUmVmIiwicGxhY2Vob2xkZXJSZWYiLCJpdGVtSURSZWYiLCJjZWxsRnJhbWVQcm9wZXJ0aWVzUmVmIiwiZXJyb3JSZWYiLCJtZXNzYWdlUmVmIiwidXNlRWZmZWN0IiwiY2FuY2VsaWRsZWNhbGxiYWNrIiwicmVxdWVzdElkbGVDYWxsYmFja0lkUmVmIiwidW5yZWdpc3RlclBlbmRpbmdQb3J0YWwiLCJ1c2VMYXlvdXRFZmZlY3QiLCJjdXN0b21wbGFjZWhvbGRlciIsImNyZWF0ZUVsZW1lbnQiLCJtZXNzYWdlIiwidXNlckZyYW1lU3R5bGVzIiwidXNlckxpbmVyU3R5bGVzIiwidXNlckVycm9yRnJhbWVTdHlsZXMiLCJ1c2VyRXJyb3JMaW5lclN0eWxlcyIsInJlcXVlc3RpZGxlY2FsbGJhY2siLCJ3aW5kb3ciLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwibmV3RnJhbWVTdHlsZXMiLCJnZXRGcmFtZVN0eWxlcyIsIm5ld0hvbGRlclN0eWxlcyIsImdldENvbnRlbnRIb2xkZXJTdHlsZXMiLCJwb3J0YWxOb2RlUmVmIiwiY2FjaGVkIiwiaGFzUG9ydGFsIiwiX2NvcmVDb25maWdSZWYkY3VycmVuIiwiZ2V0UG9ydGFsTWV0YWRhdGEiLCJzY3JvbGxlclByb3BlcnRpZXMiLCJwb3J0YWxOb2RlIiwic2V0Q29udGFpbmVyU3R5bGVzIiwiZWxlbWVudCIsInJlZ2lzdGVyUGVuZGluZ1BvcnRhbCIsIl9fYXdhaXRlciIsIl9jYWxsZWUiLCJfYSIsIl9iIiwicmV0dXJudmFsdWUiLCJ1c2VyY29udGVudCIsImlzVmFsaWRFbGVtZW50IiwiY29udGVudCIsImFkZGluQ291bnQiLCJhZGRpblByb3BzIiwicmV0dmFsIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInQwIiwicHJvcHMiLCJpbnN0YW5jZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZVBvcnRhbCIsInRpbWVvdXQiLCJyZWYiLCJzdHlsZSIsIk91dFBvcnRhbCIsIm5vZGUiLCJzdHlsZXMiLCJzdHlsZXNldCIsInBvc2l0aW9uIiwib3ZlcmZsb3ciLCJ3aWR0aCIsImhlaWdodCIsIm1pbkhlaWdodCIsIm1heEhlaWdodCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJpbnNldCIsImNvbnRhaW5lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/CellFrame.tsx\n')},"./src/Cradle.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\n// Cradle.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CradleContext = void 0;\n/*\n    The Cradle does the bulk of the work for the infinite grid scroller. It does so with the help of\n    eight process handlers (class instances), and one main sub-component - the CellFrame.\n\n    Cradle's main responsibility is to manage the ~35 state changes of the system.\n\n    The illusion of infinite content is maintained by synchronizing changes in cradle content with the\n    Cradle location inside the Scrollblock, such that as the Scrollblock is moved, the cradle moves\n    oppositely to stay visible within the Viewport.\n\n    The Scrollblock is sized to approximate the list being viewed, so as to have a scroll thumb size\n    and position which realistically reflects the size of the list being shown.\n\n    The position of the cradle is controlled by an 'axis' which is a 0px height/width div\n    (along the medial - ScrollBlock can be vertical or horizontal). The purpose of the axis is to\n    act as a 'fold', above which cradle content expands 'headwards' (up or left) in the Cradle, and\n    below which the cradle content expands 'tailwards' (down or right). The Cradle content is held in\n    two CSS grids (children of the axis): one above or left (the 'head' grid), and one below or right,\n    of the position of the axis (the 'tail' grid).\n\n    The axis is kept near the leading (headward) edge of the visible cell rows of the Viewport\n\n    Technically, there are several key reference points tracked by the Cradle. These are:\n        - targetAxisReferencePosition is the virtual 0-based position of the item controlling the location\n          of the axis.\n        - The axisReferenceIndex is inferred from the targetAxisReferencePosition, by adding the virtual index\n            range low index to the targetAxisReferencePosition.\n            The axisReferenceIndex is also used to allocate items above (lower index value) and below\n            (same or higher index value) the axis fold. The axisReferenceIndex is the first item in the\n            tail section of the Cradle.\n        - (cradleReferenceIndex is inferred from the axisReferenceIndex, and is the virtual index of\n            the item defining the leading bound of the cradle content. The cradleReferenceIndex is usually\n            the first item in the head section of the Cradle, unless the cradle shows the very top of the\n            list, in which case the cradleReferenceIndex is the same as the AxisReferenceIndex)\n        - axisViewportPixelOffset (pixels that place the axis in relation to the viewport's leading edge)\n        - the blockScrollPos, which is the amount of scroll (Viewport scrollTop or scrollLeft) of the\n            ScrollBlock\n    \n    Overscroll handling (repositioning):\n        Owing to the potential rapidity of scrolling, which in the case of large lists and heavy content\n        can be too fast for the system to keep up, there is an overscroll protocol called 'repositioning'.\n\n        If the overscroll is such that the cradle (including its two content grids) has entirely passed\n        out of the viewport, then the Cradle component is replaced by a ScrollTracker (or by null if\n        the host takes responsibility for feedback). The ScrollTracker displays to the user the relative\n        location in the virtual list at the edge of the viewport during repositioning. When the scrolling\n        stops Cradle recreates the cradle content, according to the final position of the repositioning\n        process.\n\n    Cradle changes are activated by interrupts:\n    - scrolling\n    - resizing of the viewport\n    - IntersectionObserver callbacks:\n        - cradle/viewport intersection for repositioning when the cradle races out of scope\n        - two 'triggerline'/viewport intersections which trigger rolling of content\n            - rolling content triggers re-allocation of content between cradle head and tail grids\n    - pivot - change of orientation\n    - host changes of configuration specs through property changes or direct service calls\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\nvar Viewport_1 = __webpack_require__(/*! ./Viewport */ \"./src/Viewport.tsx\");\n// support code; process handlers\nvar scrollhandler_1 = __importDefault(__webpack_require__(/*! ./cradle/scrollhandler */ \"./src/cradle/scrollhandler.tsx\"));\nvar statehandler_1 = __importDefault(__webpack_require__(/*! ./cradle/statehandler */ \"./src/cradle/statehandler.tsx\"));\nvar contenthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/contenthandler */ \"./src/cradle/contenthandler.tsx\"));\nvar layouthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/layouthandler */ \"./src/cradle/layouthandler.tsx\"));\nvar interrupthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/interrupthandler */ \"./src/cradle/interrupthandler.tsx\"));\nvar servicehandler_1 = __importDefault(__webpack_require__(/*! ./cradle/servicehandler */ \"./src/cradle/servicehandler.tsx\"));\nvar styleshandler_1 = __importDefault(__webpack_require__(/*! ./cradle/styleshandler */ \"./src/cradle/styleshandler.tsx\"));\n// cacheAPI is imported as a property; instantiated at the root\nvar InfiniteGridScroller_1 = __webpack_require__(/*! ./InfiniteGridScroller */ \"./src/InfiniteGridScroller.tsx\");\n// for children\nexports.CradleContext = react_1[\"default\"].createContext(null);\n// component\nvar Cradle = function Cradle(_ref) {\n  var gridSpecs = _ref.gridSpecs,\n    runwaySize = _ref.runwaySize,\n    virtualListSpecs = _ref.virtualListSpecs,\n    setVirtualListSize = _ref.setVirtualListSize,\n    setVirtualListRange = _ref.setVirtualListRange,\n    startingIndex = _ref.startingIndex,\n    getItem = _ref.getItem,\n    placeholder = _ref.placeholder,\n    placeholderMessages = _ref.placeholderMessages,\n    userCallbacks = _ref.userCallbacks,\n    styles = _ref.styles,\n    triggerlineOffset = _ref.triggerlineOffset,\n    cache = _ref.cache,\n    cacheMax = _ref.cacheMax,\n    scrollerID = _ref.scrollerID,\n    cacheAPI = _ref.cacheAPI,\n    usePlaceholder = _ref.usePlaceholder,\n    useScrollTracker = _ref.useScrollTracker,\n    showAxis = _ref.showAxis,\n    ONAFTERSCROLL_TIMEOUT = _ref.ONAFTERSCROLL_TIMEOUT,\n    IDLECALLBACK_TIMEOUT = _ref.IDLECALLBACK_TIMEOUT,\n    MAX_CACHE_OVER_RUN = _ref.MAX_CACHE_OVER_RUN,\n    VARIABLE_MEASUREMENTS_TIMEOUT = _ref.VARIABLE_MEASUREMENTS_TIMEOUT,\n    scrollerProperties = _ref.scrollerProperties;\n  var listsize = virtualListSpecs.size,\n    lowindex = virtualListSpecs.lowindex,\n    highindex = virtualListSpecs.highindex;\n  // ========================[ DATA SETUP ]========================\n  // unpack gridSpecs\n  var orientation = gridSpecs.orientation,\n    gap = gridSpecs.gap,\n    padding = gridSpecs.padding,\n    cellHeight = gridSpecs.cellHeight,\n    cellWidth = gridSpecs.cellWidth,\n    cellMinHeight = gridSpecs.cellMinHeight,\n    cellMinWidth = gridSpecs.cellMinWidth,\n    layout = gridSpecs.layout;\n  // get viewport context\n  var ViewportContextProperties = (0, react_1.useContext)(Viewport_1.ViewportContext);\n  var ViewportContextPropertiesRef = (0, react_1.useRef)(null);\n  ViewportContextPropertiesRef.current = ViewportContextProperties; // for closures\n  // flags\n  var isMountedRef = (0, react_1.useRef)(true),\n    isCachedRef = (0, react_1.useRef)(false),\n    wasCachedRef = (0, react_1.useRef)(false),\n    hasBeenRenderedRef = (0, react_1.useRef)(false),\n    // trigger control\n    triggerHistoryRef = (0, react_1.useRef)({\n      previousReferenceName: null\n    });\n  //  viewport dimensions and cached state\n  var getViewportDimensions = function getViewportDimensions() {\n    var viewportElement = ViewportContextProperties.elementRef.current;\n    return {\n      width: viewportElement.offsetWidth,\n      height: viewportElement.offsetHeight\n    };\n  };\n  var _getViewportDimension = getViewportDimensions(),\n    viewportheight = _getViewportDimension.height,\n    viewportwidth = _getViewportDimension.width; // viewportDimensions\n  // cache test\n  // zero width and height means the component must be in portal (cache) state\n  var isInPortal = viewportwidth == 0 && viewportheight == 0,\n    isCacheChange = isInPortal != isCachedRef.current;\n  if (isCacheChange) {\n    wasCachedRef.current = isCachedRef.current;\n    isCachedRef.current = isInPortal;\n  }\n  // cradle state\n  var _ref2 = (0, react_1.useState)('setup'),\n    _ref3 = _slicedToArray(_ref2, 2),\n    cradleState = _ref3[0],\n    setCradleState = _ref3[1];\n  var cradleStateRef = (0, react_1.useRef)(null); // access by closures\n  cradleStateRef.current = cradleState;\n  // if (!scrollerProperties) { // root scroller\n  // console.log('--\x3e cradleState','-'+scrollerID+'-', cradleState)\n  // console.log('-- index','~'+scrollerProperties?.cellFramePropertiesRef.current.index+'~')\n  // console.log('-- itemID','+'+scrollerProperties?.cellFramePropertiesRef.current.itemID+'+')\n  // }\n  // cradle scaffold element refs\n  var headCradleElementRef = (0, react_1.useRef)(null),\n    tailCradleElementRef = (0, react_1.useRef)(null),\n    axisCradleElementRef = (0, react_1.useRef)(null),\n    triggercellTriggerlineHeadElementRef = (0, react_1.useRef)(null),\n    triggercellTriggerlineTailElementRef = (0, react_1.useRef)(null),\n    // layout bundle\n    cradleElementsRef = (0, react_1.useRef)({\n      headRef: headCradleElementRef,\n      tailRef: tailCradleElementRef,\n      axisRef: axisCradleElementRef,\n      triggercellTriggerlineHeadRef: triggercellTriggerlineHeadElementRef,\n      triggercellTriggerlineTailRef: triggercellTriggerlineTailElementRef\n    });\n  // ------------------------[ calculated properties ]------------------------\n  // configuration calculations\n  // crosscount (also calculated by Scrollblock for deriving Scrollblock length)\n  var crosscount = (0, react_1.useMemo)(function () {\n    if (isCachedRef.current) return 0;\n    var viewportcrosslength = orientation == 'vertical' ? viewportwidth : viewportheight;\n    // cross length of viewport (gap to match crossLength)\n    var viewportcrosslengthforcalc = viewportcrosslength - padding * 2 + gap;\n    var cellcrosslength = (orientation == 'vertical' ? cellWidth : cellHeight) + gap;\n    var cellcrosslengthforcalc = Math.min(cellcrosslength, viewportcrosslengthforcalc); // result cannot be less than 1\n    var crosscount = Math.floor(viewportcrosslengthforcalc / cellcrosslengthforcalc);\n    return crosscount;\n  }, [orientation, gap, padding, cellWidth, cellHeight, viewportheight, viewportwidth]);\n  var _ref4 = (0, react_1.useMemo)(function () {\n      if (listsize == 0) {\n        return [undefined, undefined];\n      }\n      // add position adjustment for 0\n      var endadjustment = highindex < 0 ? -1 : 1;\n      // get initial values\n      var baserowblanks = Math.abs(lowindex) % crosscount;\n      var endrowblanks = (Math.abs(highindex) + endadjustment) % crosscount;\n      // take inverse depending on direction\n      if (lowindex < 0) {\n        baserowblanks = baserowblanks == 0 ? 0 : crosscount - baserowblanks;\n      }\n      if (highindex >= 0) {\n        endrowblanks = endrowblanks == 0 ? 0 : crosscount - endrowblanks;\n      }\n      return [baserowblanks, endrowblanks];\n    }, [crosscount, listsize, lowindex, highindex]),\n    _ref5 = _slicedToArray(_ref4, 2),\n    baserowblanks = _ref5[0],\n    endrowblanks = _ref5[1];\n  // various row counts\n  var _ref6 = (0, react_1.useMemo)(function () {\n      var viewportLength = orientation == 'vertical' ? viewportheight : viewportwidth;\n      var baseRowLength;\n      if (layout == 'uniform') {\n        if (orientation == 'vertical') {\n          baseRowLength = cellHeight;\n        } else {\n          baseRowLength = cellWidth;\n        }\n      } else {\n        // layout == 'variable'\n        if (orientation == 'vertical') {\n          baseRowLength = cellMinHeight;\n        } else {\n          baseRowLength = cellMinWidth;\n        }\n      }\n      baseRowLength += gap;\n      var viewportRowcount = Math.ceil(viewportLength / baseRowLength);\n      var listRowcount = listsize == 0 ? 0 : Math.ceil((listsize + baserowblanks + endrowblanks) / crosscount);\n      var calculatedCradleRowcount = viewportRowcount + runwaySize * 2;\n      var cradleRowcount = Math.min(listRowcount, calculatedCradleRowcount);\n      var runwayRowcount;\n      if (cradleRowcount == calculatedCradleRowcount) {\n        runwayRowcount = runwaySize;\n      } else {\n        // cradleRowcount is less than calculatedCradleRowCount\n        var diff = calculatedCradleRowcount - cradleRowcount;\n        runwayRowcount = runwaySize - Math.floor(diff / 2);\n        runwayRowcount = Math.max(0, runwayRowcount);\n      }\n      var itemcount = cradleRowcount * crosscount;\n      if (itemcount > listsize) {\n        itemcount = listsize;\n        cradleRowcount = Math.ceil((itemcount + baserowblanks + endrowblanks) / crosscount);\n      }\n      return [cradleRowcount, viewportRowcount, listRowcount, runwayRowcount];\n    }, [orientation, gap,\n    // padding,\n    cellWidth, cellHeight, cellMinWidth, cellMinHeight, viewportheight, viewportwidth, listsize, baserowblanks, endrowblanks, runwaySize, crosscount, layout]),\n    _ref7 = _slicedToArray(_ref6, 4),\n    cradleRowcount = _ref7[0],\n    viewportRowcount = _ref7[1],\n    listRowcount = _ref7[2],\n    runwayRowcount = _ref7[3];\n  var rangerowshift = (0, react_1.useMemo)(function () {\n    return listsize == 0 ? undefined : Math.floor(lowindex / crosscount);\n  }, [crosscount, lowindex, listsize]);\n  var virtualListProps = Object.assign(Object.assign({}, virtualListSpecs), {\n    baserowblanks: baserowblanks,\n    endrowblanks: endrowblanks,\n    crosscount: crosscount,\n    rowcount: listRowcount,\n    rowshift: rangerowshift\n  });\n  var cradleContentPropsRef = (0, react_1.useRef)({\n    cradleRowcount: cradleRowcount,\n    viewportRowcount: viewportRowcount,\n    runwayRowcount: runwayRowcount,\n    SOL: undefined,\n    EOL: undefined,\n    lowindex: undefined,\n    highindex: undefined,\n    size: 0\n  });\n  var cradleContentProps = cradleContentPropsRef.current;\n  Object.assign(cradleContentProps, {\n    cradleRowcount: cradleRowcount,\n    viewportRowcount: viewportRowcount,\n    runwayRowcount: runwayRowcount\n  });\n  // ----------------------[ callbacks ]----------------------------\n  // host callbacks, upacked by serviceHandler\n  var externalCallbacksRef = (0, react_1.useRef)({\n    referenceIndexCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.referenceIndexCallback,\n    repositioningFlagCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.repositioningFlagCallback,\n    repositioningIndexCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.repositioningIndexCallback,\n    preloadIndexCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.preloadIndexCallback,\n    deleteListCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.deleteListCallback,\n    changeListSizeCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.changeListSizeCallback,\n    changeListRangeCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.changeListRangeCallback,\n    itemExceptionCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.itemExceptionCallback\n  });\n  // -----------------[ bundle properties for handlers ]-------------------\n  // bundle all cradle props to pass to handlers - ultimately cradleParametersRef\n  var cradleInheritedPropertiesRef = (0, react_1.useRef)(null); // access by closures and support callbacks\n  // up to date values\n  cradleInheritedPropertiesRef.current = {\n    // gridSpecs\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    layout: layout,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    cellMinHeight: cellMinHeight,\n    cellMinWidth: cellMinWidth,\n    // ...rest\n    cache: cache,\n    cacheMax: cacheMax,\n    startingIndex: startingIndex,\n    runwaySize: runwaySize,\n    getItem: getItem,\n    placeholder: placeholder,\n    placeholderMessages: placeholderMessages,\n    usePlaceholder: usePlaceholder,\n    triggerlineOffset: triggerlineOffset,\n    scrollerID: scrollerID,\n    // objects\n    userCallbacks: userCallbacks,\n    styles: styles,\n    cacheAPI: cacheAPI,\n    // control values\n    ONAFTERSCROLL_TIMEOUT: ONAFTERSCROLL_TIMEOUT,\n    MAX_CACHE_OVER_RUN: MAX_CACHE_OVER_RUN,\n    scrollerProperties: scrollerProperties\n  };\n  var scrollerPropertiesRef = (0, react_1.useRef)(null);\n  // passed to cellFrame content (user content) if requested\n  scrollerPropertiesRef.current = {\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    layout: layout,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    cellMinHeight: cellMinHeight,\n    cellMinWidth: cellMinWidth,\n    virtualListProps: virtualListProps,\n    cradleContentProps: cradleContentProps,\n    cache: cache,\n    cacheMax: cacheMax,\n    startingIndex: startingIndex,\n    scrollerID: scrollerID\n  };\n  // configuration properties to share with handlers\n  var cradleInternalPropertiesRef = (0, react_1.useRef)(null);\n  cradleInternalPropertiesRef.current = {\n    // updated values\n    virtualListProps: virtualListProps,\n    setVirtualListSize: setVirtualListSize,\n    setVirtualListRange: setVirtualListRange,\n    cradleContentProps: cradleContentPropsRef.current,\n    // the following values are maintained elsewhere\n    isMountedRef: isMountedRef,\n    cradleElementsRef: cradleElementsRef,\n    isCachedRef: isCachedRef,\n    wasCachedRef: wasCachedRef,\n    triggerHistoryRef: triggerHistoryRef,\n    // for stateHandler\n    cradleStateRef: cradleStateRef,\n    setCradleState: setCradleState\n  };\n  // placeholder in cradleParameters to make available individual handlers\n  var handlersRef = (0, react_1.useRef)(null);\n  // cradle parameters MASTER BUNDLE\n  var cradleParameters = {\n    handlersRef: handlersRef,\n    ViewportContextPropertiesRef: ViewportContextPropertiesRef,\n    cradleInheritedPropertiesRef: cradleInheritedPropertiesRef,\n    scrollerPropertiesRef: scrollerPropertiesRef,\n    cradleInternalPropertiesRef: cradleInternalPropertiesRef,\n    externalCallbacksRef: externalCallbacksRef\n  };\n  var cradleParametersRef = (0, react_1.useRef)(null);\n  cradleParametersRef.current = cradleParameters;\n  // ongoing source of handlers - note all Handlers are given all parameters (cradleParameters)\n  if (!handlersRef.current) {\n    handlersRef.current = getCradleHandlers(cradleParameters);\n  }\n  // make handlers directly available to cradle code below\n  var _handlersRef$current = handlersRef.current,\n    interruptHandler = _handlersRef$current.interruptHandler,\n    scrollHandler = _handlersRef$current.scrollHandler,\n    contentHandler = _handlersRef$current.contentHandler,\n    layoutHandler = _handlersRef$current.layoutHandler,\n    serviceHandler = _handlersRef$current.serviceHandler,\n    stylesHandler = _handlersRef$current.stylesHandler;\n  // =======================[ INTERCEPT CACHING STATE CHANGE ]=========================\n  /*\n      Intercept change in caching status:\n      when a component is cached in a portal (in the React virtual DOM), including the transition of\n      being moved from one cellFrame to another when crossing the Cradle axis,\n      the scrollPos (scrollLeft or scrollTop) is reset to 0 (zero). When the scroller is\n      moved to a cellFrame, this code triggers restoration the scrollPos (see case 'parentingtransition'\n      in the state management section below).\n  \n      This supports InfiniteGridScroller components to be cached as content.\n  \n      The restore scrollPos action must be the first priority to hide these scrollPos adjustments\n      from the user.\n  */\n  var restoreScrollPos = function restoreScrollPos() {\n    var cradlePositionData = layoutHandler.cradlePositionData;\n    var blockScrollPos = cradlePositionData.blockScrollPos;\n    var blockXScrollPos = cradlePositionData.blockXScrollPos;\n    if (blockScrollPos !== null) {\n      var viewportElement = ViewportContextPropertiesRef.current.elementRef.current;\n      viewportElement[cradlePositionData.blockScrollProperty] = blockScrollPos;\n      viewportElement[cradlePositionData.blockXScrollProperty] = blockXScrollPos;\n    }\n  };\n  if (isCacheChange && !isCachedRef.current) {\n    restoreScrollPos();\n  }\n  // change state for entering or leaving cache\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return; // nothing to do\n    if (isCachedRef.current && !wasCachedRef.current) {\n      // into cache\n      setCradleState('cached');\n    } else if (!isCachedRef.current && wasCachedRef.current) {\n      // out of cache\n      wasCachedRef.current = false;\n      if (hasBeenRenderedRef.current) {\n        setCradleState('rerenderfromcache');\n      } else {\n        setCradleState('firstrenderfromcache');\n      }\n    }\n  }, [isCachedRef.current, wasCachedRef.current]);\n  // ===================[ INITIALIZATION effects ]=========================\n  // initialization effects are independent of caching\n  // clear mounted flag on unmount\n  (0, react_1.useEffect)(function () {\n    isMountedRef.current = true;\n    // unmount\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  //send call-in functions to host\n  (0, react_1.useEffect)(function () {\n    if (!userCallbacks.functionsCallback) return;\n    var scrollToIndex = serviceHandler.scrollToIndex,\n      reload = serviceHandler.reload,\n      setListsize = serviceHandler.setListsize,\n      setListSize = serviceHandler.setListSize,\n      setListRange = serviceHandler.setListRange,\n      prependIndexCount = serviceHandler.prependIndexCount,\n      appendIndexCount = serviceHandler.appendIndexCount,\n      clearCache = serviceHandler.clearCache,\n      getCacheIndexMap = serviceHandler.getCacheIndexMap,\n      getCacheItemMap = serviceHandler.getCacheItemMap,\n      getCradleIndexMap = serviceHandler.getCradleIndexMap,\n      getPropertiesSnapshot = serviceHandler.getPropertiesSnapshot,\n      remapIndexes = serviceHandler.remapIndexes,\n      moveIndex = serviceHandler.moveIndex,\n      insertIndex = serviceHandler.insertIndex,\n      removeIndex = serviceHandler.removeIndex;\n    var functions = {\n      scrollToIndex: scrollToIndex,\n      reload: reload,\n      setListsize: setListsize,\n      setListSize: setListSize,\n      setListRange: setListRange,\n      prependIndexCount: prependIndexCount,\n      appendIndexCount: appendIndexCount,\n      clearCache: clearCache,\n      getCacheIndexMap: getCacheIndexMap,\n      getCacheItemMap: getCacheItemMap,\n      getCradleIndexMap: getCradleIndexMap,\n      getPropertiesSnapshot: getPropertiesSnapshot,\n      remapIndexes: remapIndexes,\n      moveIndex: moveIndex,\n      insertIndex: insertIndex,\n      removeIndex: removeIndex\n    };\n    userCallbacks.functionsCallback(functions);\n  }, []);\n  // initialize window scroll listeners\n  (0, react_1.useEffect)(function () {\n    var viewportElement = ViewportContextPropertiesRef.current.elementRef.current;\n    viewportElement.addEventListener('scroll', scrollHandler.onScroll);\n    return function () {\n      viewportElement && viewportElement.removeEventListener('scroll', scrollHandler.onScroll);\n    };\n  }, []);\n  // iOS Safari requires special handling - it ignores assignments to scrollLeft/scrollTop during scrolling\n  (0, react_1.useEffect)(function () {\n    var layout = cradleInheritedPropertiesRef.current.layout;\n    if (!(0, InfiniteGridScroller_1.isSafariIOS)() || layout == 'uniform') return;\n    var viewportElement = ViewportContextPropertiesRef.current.elementRef.current;\n    viewportElement.addEventListener('scroll', scrollHandler.iOSonScroll);\n    return function () {\n      viewportElement && viewportElement.removeEventListener('scroll', scrollHandler.iOSonScroll);\n    };\n  }, []);\n  // observer support\n  /*\n      There are two interection observers: one for the two cradle grids, and another for triggerlines;\n          both against the viewport.\n  */\n  (0, react_1.useEffect)(function () {\n    var cradleIntersect = interruptHandler.cradleIntersect,\n      triggerlinesIntersect = interruptHandler.triggerlinesIntersect;\n    // intersection observer for cradle body\n    // this sets up an IntersectionObserver of the cradle against the viewport. When the\n    // cradle goes out of the observer scope, the 'repositioningRender' cradle state is triggered.\n    var cradleintersectobserver = cradleIntersect.createObserver();\n    cradleIntersect.connectElements();\n    // triggerobserver triggers cradle content updates \n    //     when triggerlines pass the edge of the viewport\n    // defer connectElements until triggercell triggerlines have been assigned\n    var triggerobserver = triggerlinesIntersect.createObserver();\n    return function () {\n      cradleintersectobserver.disconnect();\n      triggerobserver.disconnect();\n    };\n  }, []);\n  // =====================[ RECONFIGURATION effects ]======================\n  // change listsize, caching, resize (UI resize of the viewport), reconfigure, or pivot\n  // inernal callback: the new list size will always be less than current listsize\n  // invoked if getItem returns null\n  var nullItemSetMaxListsize = (0, react_1.useCallback)(function (maxListsize) {\n    var listsize = cradleInternalPropertiesRef.current.virtualListProps.size;\n    if (maxListsize < listsize) {\n      var _serviceHandler$callb = serviceHandler.callbacks,\n        deleteListCallback = _serviceHandler$callb.deleteListCallback,\n        changeListSizeCallback = _serviceHandler$callb.changeListSizeCallback;\n      var dListCallback;\n      if (deleteListCallback) {\n        dListCallback = function dListCallback(deleteList) {\n          deleteListCallback('getItem returned null', deleteList);\n        };\n      }\n      contentHandler.updateVirtualListSize(maxListsize);\n      cacheAPI.changeCacheListSize(maxListsize, dListCallback, changeListSizeCallback);\n    }\n  }, []);\n  // caching change\n  (0, react_1.useEffect)(function () {\n    if (cache == 'preload') {\n      setCradleState('startpreload');\n      return;\n    }\n    if (cradleStateRef.current == 'setup') return;\n    switch (cache) {\n      case 'keepload':\n        {\n          var modelIndexList = contentHandler.getModelIndexList();\n          var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n          var dListCallback;\n          if (deleteListCallback) {\n            dListCallback = function dListCallback(deleteList) {\n              deleteListCallback('pare cache to cacheMax', deleteList);\n            };\n          }\n          var _cacheMax = cradleParameters.cradleInheritedPropertiesRef.current.cacheMax;\n          if (cacheAPI.pareCacheToMax(_cacheMax, modelIndexList, dListCallback)) {\n            cacheAPI.renderPortalLists();\n          }\n          setCradleState('changecaching');\n          break;\n        }\n      case 'cradle':\n        {\n          var _modelIndexList = contentHandler.getModelIndexList();\n          var _deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n          var _dListCallback;\n          if (_deleteListCallback) {\n            _dListCallback = function _dListCallback(deleteList) {\n              _deleteListCallback('match cache to cradle', deleteList);\n            };\n          }\n          if (cacheAPI.matchCacheToCradle(_modelIndexList, _dListCallback)) {\n            cacheAPI.renderPortalLists();\n          }\n          setCradleState('changecaching');\n          break;\n        }\n    }\n  }, [cache, cacheMax]);\n  // trigger viewportresizing response based on viewport state\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    // movement to and from cache is independent of ui viewportresizing\n    if (isCachedRef.current || wasCachedRef.current) {\n      return;\n    }\n    if (ViewportContextPropertiesRef.current.isResizing && cradleStateRef.current != 'viewportresizing') {\n      interruptHandler.pauseInterrupts();\n      setCradleState('viewportresizing');\n    }\n    // complete viewportresizing mode\n    if (!ViewportContextPropertiesRef.current.isResizing && cradleStateRef.current == 'viewportresizing') {\n      setCradleState('finishviewportresize');\n    }\n  }, [ViewportContextPropertiesRef.current.isResizing]);\n  // reconfigure for changed size parameters\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    if (isCachedRef.current) return;\n    interruptHandler.pauseInterrupts();\n    setCradleState('reconfigure');\n  }, [cellHeight, cellWidth, gap, padding, triggerlineOffset, layout, runwaySize]);\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    if (isCachedRef.current) return; // TODO: ??\n    interruptHandler.pauseInterrupts();\n    setCradleState('reconfigureforlistrange');\n  }, [lowindex, highindex]);\n  // a new getItem function implies the need to reload\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    interruptHandler.pauseInterrupts();\n    setCradleState('reload');\n  }, [getItem]);\n  // pivot triggered on change of orientation\n  (0, react_1.useEffect)(function () {\n    layoutHandler.cradlePositionData.blockScrollProperty = orientation == \"vertical\" ? \"scrollTop\" : \"scrollLeft\";\n    layoutHandler.cradlePositionData.blockXScrollProperty = orientation == \"horizontal\" ? \"scrollTop\" : \"scrollLeft\";\n    if (cradleStateRef.current == 'setup') {\n      layoutHandler.cradlePositionData.blockScrollPos = 0;\n      layoutHandler.cradlePositionData.blockXScrollPos = 0;\n      return;\n    }\n    interruptHandler.pauseInterrupts();\n    // interruptHandler.triggerlinesIntersect.disconnect()\n    if (isCachedRef.current) {\n      // cacheAPI.measureMemory('pivot cached')\n      // interruptHandler.pauseInterrupts() // suppress triggerline callbacks; will render for first render from cache\n      // setCradleState('cached')\n      hasBeenRenderedRef.current = false;\n      return;\n    }\n    // cacheAPI.measureMemory('pivot')\n    var _cradleInheritedPrope = cradleInheritedPropertiesRef.current,\n      layout = _cradleInheritedPrope.layout,\n      gap = _cradleInheritedPrope.gap;\n    var cradlePositionData = layoutHandler.cradlePositionData;\n    if (layout == 'uniform') {\n      var _cradleInheritedPrope2 = cradleInheritedPropertiesRef.current,\n        _cellWidth = _cradleInheritedPrope2.cellWidth,\n        _cellHeight = _cradleInheritedPrope2.cellHeight,\n        _gap = _cradleInheritedPrope2.gap;\n      // get previous ratio\n      var previousCellPixelLength = (orientation == 'vertical' ? _cellWidth : _cellHeight) + _gap;\n      var previousAxisOffset = layoutHandler.cradlePositionData.targetAxisViewportPixelOffset;\n      var previousratio = previousAxisOffset / previousCellPixelLength;\n      var pivotCellPixelLength = (orientation == 'vertical' ? _cellHeight : _cellWidth) + _gap;\n      var pivotAxisOffset = previousratio * pivotCellPixelLength;\n      cradlePositionData.targetAxisViewportPixelOffset = Math.round(pivotAxisOffset);\n    } else {\n      cradlePositionData.targetAxisViewportPixelOffset = gap;\n    }\n    setCradleState('pivot');\n  }, [orientation]);\n  // =====================[ STYLES ]===========================\n  // styles for the six scaffold components\n  var _ref8 = (0, react_1.useMemo)(function () {\n      return stylesHandler.getCradleStyles({\n        orientation: orientation,\n        cellHeight: cellHeight,\n        cellWidth: cellWidth,\n        cellMinHeight: cellMinHeight,\n        cellMinWidth: cellMinWidth,\n        gap: gap,\n        padding: padding,\n        viewportheight: viewportheight,\n        viewportwidth: viewportwidth,\n        crosscount: crosscount,\n        userstyles: styles,\n        triggerlineOffset: triggerlineOffset,\n        layout: layout\n      });\n    }, [orientation, cellHeight, cellWidth, cellMinHeight, cellMinWidth, gap, padding, viewportheight, viewportwidth, crosscount, styles, triggerlineOffset, layout]),\n    _ref9 = _slicedToArray(_ref8, 6),\n    cradleHeadStyle = _ref9[0],\n    cradleTailStyle = _ref9[1],\n    cradleAxisStyle = _ref9[2],\n    cradleDividerStyle = _ref9[3],\n    triggercellTriggerlineHeadStyle = _ref9[4],\n    triggercellTriggerlineTailStyle = _ref9[5];\n  // =====================[ STATE MANAGEMENT ]==========================\n  // this is the core state engine (about 32 states), using named states\n  // useLayoutEffect for suppressing flashes\n  (0, react_1.useLayoutEffect)(function () {\n    switch (cradleState) {\n      // --------------[ precursors to setCradleContent ]---------------\n      // these are all workflow related, but\n      // resize could be asynchronous when rotating phone during scroll intertia\n      case 'setup':\n        {\n          // cycle to allow for ref assignments\n          if (cradleInheritedPropertiesRef.current.cache != 'preload') {\n            if (isCachedRef.current) {\n              setCradleState('cached');\n            } else {\n              setCradleState('firstrender'); // load grid\n            }\n          }\n\n          break;\n        }\n      case 'viewportresizing':\n        {\n          // no-op, wait for resizing to end\n          break;\n        }\n      case 'startpreload':\n        {\n          var finalCallback = function finalCallback() {\n            var modelIndexList = contentHandler.getModelIndexList();\n            var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n            var dListCallback;\n            if (deleteListCallback) {\n              dListCallback = function dListCallback(deleteList) {\n                deleteListCallback('pare cache to cacheMax', deleteList);\n              };\n            }\n            if (cacheAPI.pareCacheToMax(cacheMax, modelIndexList, dListCallback)) {\n              cacheAPI.renderPortalLists();\n            }\n            if (!isCachedRef.current) {\n              setCradleState('finishpreload');\n            } else {\n              setCradleState('cached');\n            }\n          };\n          cacheAPI.preload(finalCallback, nullItemSetMaxListsize);\n          break;\n        }\n      case 'cached':\n        {\n          if (!wasCachedRef.current && !isCachedRef.current) {\n            if (hasBeenRenderedRef.current) {\n              setCradleState('rerenderfromcache');\n            } else {\n              setCradleState('firstrenderfromcache');\n            }\n          } // else wait for reparenting\n          break;\n        }\n      case 'startreposition':\n        {\n          var signals = interruptHandler.signals;\n          signals.pauseTriggerlinesObserver = true;\n          // avoid recursive cradle intersection interrupts\n          signals.pauseCradleIntersectionObserver = true;\n          signals.repositioningRequired = false; // because now underway\n          if (scrollHandler.isScrolling) {\n            var _cradleInternalProper = cradleInternalPropertiesRef.current.virtualListProps,\n              _lowindex = _cradleInternalProper.lowindex,\n              _listsize = _cradleInternalProper.size;\n            ViewportContextPropertiesRef.current.scrollTrackerAPIRef.current.startReposition(layoutHandler.cradlePositionData.targetAxisReferencePosition, _lowindex, _listsize);\n            setCradleState('repositioningRender'); // toggles with repositioningContinuation\n          } else {\n            setCradleState('finishreposition');\n          }\n          break;\n        }\n      // -------------------[ setCradleContent ]------------------\n      /*\n          the following 12 cradle states all resolve with\n          a chain starting with setCradleContent,\n          continuing with 'preparerender', and ending with\n          'restoreinterrupts', with a detour for variable layout\n          to reconfigure the scrollblock\n      */\n      case 'firstrender':\n      case 'firstrenderfromcache':\n      case 'rerenderfromcache':\n      case 'scrollto':\n      case 'changecaching':\n      case 'finishpreload':\n      case 'finishreposition':\n      case 'finishviewportresize':\n      case 'pivot':\n      case 'reconfigure':\n      case 'reconfigureforlistrange':\n      case 'reload':\n        {\n          if (!isMountedRef.current) return; // possible async latency with nested scrollers\n          // interruptHandler.triggerlinesIntersect.disconnect()\n          // interruptHandler.cradleIntersect.disconnect()\n          if (isCachedRef.current) {\n            setCradleState('cached');\n            break;\n          }\n          var _cradleContent = contentHandler.content;\n          _cradleContent.headModelComponents = [];\n          _cradleContent.tailModelComponents = [];\n          var _layout = cradleInheritedPropertiesRef.current.layout;\n          interruptHandler.triggerlinesIntersect.disconnect();\n          interruptHandler.cradleIntersect.disconnect();\n          if (_layout == 'variable') {\n            // restore base config to scrollblock\n            // already done for reposition\n            cradleState != 'finishreposition' && layoutHandler.restoreBaseScrollblockConfig();\n          }\n          if (cradleState == 'reload') {\n            cacheAPI.clearCache();\n          }\n          if (cradleState == 'finishreposition') {\n            ViewportContextPropertiesRef.current.scrollTrackerAPIRef.current.finishReposition();\n            scrollHandler.calcImpliedRepositioningData('finishreposition');\n          }\n          var _listsize2 = cradleInternalPropertiesRef.current.virtualListProps.size;\n          // set data\n          if (_listsize2) contentHandler.setCradleContent(cradleState);\n          if (cradleState != 'finishpreload') {\n            hasBeenRenderedRef.current = true;\n          }\n          // synchronize cache if necessary\n          var _cache = cradleInheritedPropertiesRef.current.cache;\n          if (_cache == 'cradle') {\n            var modelIndexList = contentHandler.getModelIndexList();\n            var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n            var dListCallback;\n            if (deleteListCallback) {\n              dListCallback = function dListCallback(deleteList) {\n                deleteListCallback('match cache to cradle', deleteList);\n              };\n            }\n            if (cacheAPI.matchCacheToCradle(modelIndexList, dListCallback)) {\n              cacheAPI.renderPortalLists();\n            }\n          }\n          // prepare the cycle for preparerender\n          _cradleContent.headDisplayComponents = _cradleContent.headModelComponents;\n          _cradleContent.tailDisplayComponents = _cradleContent.tailModelComponents;\n          // update virtual DOM\n          if (_layout == 'uniform') {\n            setCradleState('preparerender');\n          } else {\n            setCradleState('refreshDOMsetforvariability');\n          }\n          break;\n        }\n      case 'preparerender':\n        {\n          // cycle for DOM update\n          // triggerlines will have been assigned to a new triggerCell by now.\n          // connectElements was delayed for a cycle to render triggercell triggerlines\n          interruptHandler.triggerlinesIntersect.connectElements();\n          interruptHandler.cradleIntersect.connectElements();\n          setCradleState('restoreinterrupts'); // to restore interrupts\n          break;\n        }\n      case 'restoreinterrupts':\n        {\n          // normalize\n          interruptHandler.restoreInterrupts();\n          setCradleState('ready');\n          break;\n        }\n      // ----------------------[ followup from axisTriggerlinesObserverCallback ]------------\n      // scroll effects\n      // renderupdatedcontent is called from interruptHandler.axisTriggerlinesObserverCallback. \n      // it is required to integrate changed DOM configurations before 'ready' is displayed\n      case 'renderupdatedcontent':\n        {\n          // cycle for DOM update\n          // if (isCachedRef.current) return // DEBUG!!\n          contentHandler.updateCradleContent();\n          setCradleState('finishupdatedcontent');\n          break;\n        }\n      case 'finishupdatedcontent':\n        {\n          // cycle for DOM update\n          // synchronize cache\n          var _cache2 = cradleInternalPropertiesRef.current.cache;\n          if (_cache2 == 'keepload') {\n            contentHandler.guardAgainstRunawayCaching();\n          }\n          // cacheAPI.measureMemory('finish update')\n          var _layout2 = cradleInheritedPropertiesRef.current.layout;\n          if (_layout2 == 'uniform') {\n            interruptHandler.triggerlinesIntersect.connectElements();\n            setCradleState('ready');\n          } else {\n            // 'variable' content requiring reconfiguration\n            setCradleState('refreshDOMupdateforvariability');\n          }\n          break;\n        }\n      // ---------------------[ adjust scrollblock for set variable content ]--------------\n      case 'refreshDOMsetforvariability':\n        {\n          setCradleState('preparesetforvariability');\n          break;\n        }\n      case 'preparesetforvariability':\n        {\n          setTimeout(function () {\n            if (isMountedRef.current) {\n              contentHandler.adjustScrollblockForVariability('setcradle');\n              setCradleState('finishsetforvariability');\n            }\n          }, VARIABLE_MEASUREMENTS_TIMEOUT);\n          break;\n        }\n      case 'finishsetforvariability':\n        {\n          setCradleState('preparerender');\n          break;\n        }\n      // ------------------------[ adjust scrollblock for update variable content ]--------------\n      case 'refreshDOMupdateforvariability':\n        {\n          // extra cycle to allow for DOM synchronizion with grid changes\n          setCradleState('adjustupdateforvariability');\n          break;\n        }\n      case 'adjustupdateforvariability':\n        {\n          setTimeout(function () {\n            contentHandler.adjustScrollblockForVariability('updatecradle');\n            setCradleState('finishupdateforvariability');\n          }, 0);\n          break;\n        }\n      case 'finishupdateforvariability':\n        {\n          // re-activate triggers; triggerlines will have been assigned to a new triggerCell by now.\n          interruptHandler.triggerlinesIntersect.connectElements();\n          interruptHandler.signals.pauseCradleIntersectionObserver = false;\n          setCradleState('ready');\n          break;\n        }\n      // ----------------[ user requests ]-------------\n      case 'channelcradleresetafterinsertremove':\n        {\n          cacheAPI.applyPortalPartitionItemsForDeleteList();\n          setCradleState('changelistsizeafterinsertremove');\n          break;\n        }\n      // support for various host service requests; syncs cradle content with cache changes\n      case 'applyinsertremovechanges':\n      case 'applyremapchanges':\n      case 'applymovechanges':\n        {\n          cradleContent.headDisplayComponents = cradleContent.headModelComponents;\n          cradleContent.tailDisplayComponents = cradleContent.tailModelComponents;\n          cacheAPI.applyPortalPartitionItemsForDeleteList();\n          if (cradleState == 'applyinsertremovechanges') {\n            setCradleState('changelistsizeafterinsertremove');\n          } else {\n            setCradleState('ready');\n          }\n          break;\n        }\n      case 'changelistsizeafterinsertremove':\n        {\n          var newlistsize = serviceHandler.newListSize;\n          serviceHandler.newListSize = null;\n          setCradleState('ready');\n          // service handler called because this is a followon of a user intervention\n          serviceHandler.setListSize(newlistsize);\n          break;\n        }\n      case 'clearcache':\n        {\n          contentHandler.clearCradle();\n          cradleContent.headDisplayComponents = [];\n          cradleContent.tailDisplayComponents = [];\n          cacheAPI.clearCache();\n          setCradleState('ready');\n          break;\n        }\n    }\n  }, [cradleState]);\n  // standard rendering states (2 states)\n  (0, react_1.useEffect)(function () {\n    switch (cradleState) {\n      // repositioningRender and repositioningContinuation are toggled to generate continuous \n      // repositioning renders\n      case 'repositioningRender':\n        // no-op\n        break;\n      case 'ready':\n        // no-op\n        break;\n    }\n  }, [cradleState]);\n  // ==========================[ RENDER ]===========================\n  var scrollAxisReferencePosition = layoutHandler.cradlePositionData.targetAxisReferencePosition;\n  var scrollAxisReferenceIndex = scrollAxisReferencePosition + lowindex;\n  var scrollIndexRef = (0, react_1.useRef)(scrollAxisReferencePosition);\n  var cradleContent = contentHandler.content;\n  var triggercellTriggerlinesRef = (0, react_1.useRef)(null);\n  triggercellTriggerlinesRef.current = (0, react_1.useMemo)(function () {\n    return [react_1[\"default\"].createElement(\"div\", {\n      key: 'head',\n      \"data-type\": 'headtrigger',\n      style: triggercellTriggerlineHeadStyle,\n      ref: triggercellTriggerlineHeadElementRef\n    }), react_1[\"default\"].createElement(\"div\", {\n      key: 'tail',\n      \"data-type\": 'tailtrigger',\n      style: triggercellTriggerlineTailStyle,\n      ref: triggercellTriggerlineTailElementRef\n    })];\n  }, [triggercellTriggerlineHeadStyle, triggercellTriggerlineTailStyle]);\n  var contextvalueRef = (0, react_1.useRef)({\n    scrollerPropertiesRef: scrollerPropertiesRef,\n    cacheAPI: cacheAPI,\n    nullItemSetMaxListsize: nullItemSetMaxListsize,\n    itemExceptionCallback: serviceHandler.callbacks.itemExceptionCallback,\n    IDLECALLBACK_TIMEOUT: IDLECALLBACK_TIMEOUT,\n    triggercellTriggerlinesRef: triggercellTriggerlinesRef\n  });\n  // display the cradle components, the ScrollTracker, or null\n  return react_1[\"default\"].createElement(exports.CradleContext.Provider, {\n    value: contextvalueRef.current\n  }, cradleState == 'repositioningRender' ? null : react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-axis',\n    style: cradleAxisStyle,\n    ref: axisCradleElementRef\n  }, showAxis ?\n  // for debug\n  react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-divider',\n    style: cradleDividerStyle\n  }) : null, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'head',\n    ref: headCradleElementRef,\n    style: cradleHeadStyle\n  }, cradleState != 'setup' ? cradleContent.headDisplayComponents : null), react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'tail',\n    ref: tailCradleElementRef,\n    style: cradleTailStyle\n  }, cradleState != 'setup' ? cradleContent.tailDisplayComponents : null)));\n}; // Cradle\nexports[\"default\"] = Cradle;\n// utility\nvar getCradleHandlers = function getCradleHandlers(cradleParameters) {\n  var createHandler = function createHandler(handler) {\n    return new handler(cradleParameters);\n  };\n  var cacheAPI = cradleParameters.cradleInheritedPropertiesRef.current.cacheAPI;\n  cacheAPI.cradleParameters = cradleParameters;\n  return {\n    cacheAPI: cacheAPI,\n    interruptHandler: createHandler(interrupthandler_1[\"default\"]),\n    scrollHandler: createHandler(scrollhandler_1[\"default\"]),\n    stateHandler: createHandler(statehandler_1[\"default\"]),\n    contentHandler: createHandler(contenthandler_1[\"default\"]),\n    layoutHandler: createHandler(layouthandler_1[\"default\"]),\n    serviceHandler: createHandler(servicehandler_1[\"default\"]),\n    stylesHandler: createHandler(styleshandler_1[\"default\"])\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Cradle.tsx\n")},"./src/InfiniteGridScroller.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// InfiniteGridScroller.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.isSafariIOS = void 0;\n/*\n    react-infinite-grid-scroller = RIGS\n\n    The job of InfiniteGridScroller is to pass parameters to dependents.\n    Viewport contains the Scrollblock, which is full size for listsize of given cell height/width.\n    Scrollblock in turn contains the Cradle - a component that contains CellFrames, which contain\n    displayed user content (items) or transitional placeholders.\n\n    Host content is instantiated in a cache of React portals (via cacheAPI). Content is then\n    portal\'d to CellFrames. The cache can be configured to hold more items than the Cradle (limited by\n    device memory). Caching allows host content to maintain state.\n\n    Scrollblock represents the entirety of the list (and is sized accordingly). It is the component that is scrolled.\n\n    Cradle contains the list items, and is \'virtualized\' -- it appears as though it scrolls through a filled\n    scrollblock, but in fact it is only slightly larger than the viewport. Content is rotated in and out of the\n    cradle through the cache.\n    \n    Individual host items are framed by CellFrame, which are managed by Cradle.\n\n    Overall the InfiniteGridScroller as a package manages the asynchronous interactions of the\n    components of the mechanism. Most of the work occurs in the Cradle component.\n\n    The RIGS liner (the top level Viewport element) is set with \'display:absolute\' and \'inset:0\', so the user\n    containing block should be styled accordingly.\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\n// defensive\nvar react_error_boundary_1 = __webpack_require__(/*! react-error-boundary */ "./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js"); // www.npmjs.com/package/react-error-boundary\nvar isSafariIOS = function isSafariIOS() {\n  var is_ios = /iP(ad|od|hone)/i.test(window.navigator.userAgent),\n    is_safari = !!navigator.userAgent.match(/Version\\/[\\d\\.]+.*Safari/);\n  return is_ios && is_safari;\n};\nexports.isSafariIOS = isSafariIOS;\n// based on module template\nfunction ErrorFallback(_ref) {\n  var error = _ref.error,\n    resetErrorBoundary = _ref.resetErrorBoundary;\n  return react_1["default"].createElement("div", {\n    role: "alert",\n    style: {\n      margin: \'3px\'\n    }\n  }, react_1["default"].createElement("p", null, "Something went wrong inside react-infinite-grid-scroller. See the console for details."), react_1["default"].createElement("p", null, "Click to cancel the error and try to continue."), react_1["default"].createElement("button", {\n    style: {\n      border: \'1px solid black\',\n      margin: \'3px\',\n      padding: \'3px\'\n    },\n    onClick: resetErrorBoundary\n  }, "Cancel error"));\n}\n// scroller components\nvar Viewport_1 = __importDefault(__webpack_require__(/*! ./Viewport */ "./src/Viewport.tsx"));\nvar Scrollblock_1 = __importDefault(__webpack_require__(/*! ./Scrollblock */ "./src/Scrollblock.tsx"));\nvar Cradle_1 = __importDefault(__webpack_require__(/*! ./Cradle */ "./src/Cradle.tsx"));\n// loaded here to minimize redundant renders in Cradle\nvar PortalCache_1 = __importDefault(__webpack_require__(/*! ./PortalCache */ "./src/PortalCache.tsx"));\n// -------------------[ global session ID generator ]----------------\nvar globalScrollerID = 0;\n// ===================================[ INITIALIZE ]===========================\nvar InfiniteGridScroller = function InfiniteGridScroller(props) {\n  // state\n  var _ref2 = (0, react_1.useState)(\'setup\'),\n    _ref3 = _slicedToArray(_ref2, 2),\n    scrollerState = _ref3[0],\n    setScrollerState = _ref3[1]; // setup, setlistprops, ready\n  // ------------------[ normalize properties ]--------------------\n  var cellHeight = props.cellHeight,\n    cellWidth = props.cellWidth,\n    _props$startingListSi = props.startingListSize,\n    startingListSize = _props$startingListSi === void 0 ? 0 : _props$startingListSi,\n    _props$startingListRa = props.startingListRange,\n    startingListRange = _props$startingListRa === void 0 ? [] : _props$startingListRa,\n    getItem = props.getItem,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? \'vertical\' : _props$orientation,\n    _props$gap = props.gap,\n    gap = _props$gap === void 0 ? 0 : _props$gap,\n    _props$padding = props.padding,\n    padding = _props$padding === void 0 ? 0 : _props$padding,\n    _props$layout = props.layout,\n    layout = _props$layout === void 0 ? \'uniform\' : _props$layout,\n    _props$cellMinHeight = props.cellMinHeight,\n    cellMinHeight = _props$cellMinHeight === void 0 ? 25 : _props$cellMinHeight,\n    _props$cellMinWidth = props.cellMinWidth,\n    cellMinWidth = _props$cellMinWidth === void 0 ? 25 : _props$cellMinWidth,\n    _props$runwaySize = props.runwaySize,\n    runwaySize = _props$runwaySize === void 0 ? 3 : _props$runwaySize,\n    _props$startingIndex = props.startingIndex,\n    startingIndex = _props$startingIndex === void 0 ? 0 : _props$startingIndex,\n    _props$cache = props.cache,\n    cache = _props$cache === void 0 ? \'cradle\' : _props$cache,\n    _props$cacheMax = props.cacheMax,\n    cacheMax = _props$cacheMax === void 0 ? null : _props$cacheMax,\n    placeholder = props.placeholder,\n    _props$usePlaceholder = props.usePlaceholder,\n    usePlaceholder = _props$usePlaceholder === void 0 ? true : _props$usePlaceholder,\n    _props$useScrollTrack = props.useScrollTracker,\n    useScrollTracker = _props$useScrollTrack === void 0 ? true : _props$useScrollTrack,\n    _props$styles = props.styles,\n    styles = _props$styles === void 0 ? {} : _props$styles,\n    _props$placeholderMes = props.placeholderMessages,\n    placeholderMessages = _props$placeholderMes === void 0 ? {} : _props$placeholderMes,\n    _props$callbacks = props.callbacks,\n    callbacks = _props$callbacks === void 0 ? {} : _props$callbacks,\n    _props$technical = props.technical,\n    technical = _props$technical === void 0 ? {} : _props$technical,\n    _props$cacheAPI = props.cacheAPI,\n    cacheAPI = _props$cacheAPI === void 0 ? null : _props$cacheAPI,\n    dragdropProperties = props.dragdropProperties,\n    scrollerProperties = props.scrollerProperties;\n  var isMinimalPropsFail = false;\n  if (!(cellWidth && cellHeight && getItem)) {\n    console.log(\'RIGS: cellWidth, cellHeight, and getItem are required\');\n    isMinimalPropsFail = true;\n  }\n  // ---------------------[ Data setup ]----------------------\n  var originalValues = {\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    cellMinHeight: cellMinHeight,\n    cellMinWidth: cellMinWidth,\n    gap: gap,\n    padding: padding,\n    startingIndex: startingIndex,\n    startingListSize: startingListSize,\n    runwaySize: runwaySize,\n    cacheMax: cacheMax\n  };\n  // avoid null/undefined\n  styles = styles !== null && styles !== void 0 ? styles : {};\n  callbacks = callbacks !== null && callbacks !== void 0 ? callbacks : {};\n  technical = technical !== null && technical !== void 0 ? technical : {};\n  startingIndex = startingIndex !== null && startingIndex !== void 0 ? startingIndex : 0;\n  startingListSize = startingListSize !== null && startingListSize !== void 0 ? startingListSize : 0;\n  runwaySize = runwaySize !== null && runwaySize !== void 0 ? runwaySize : 3;\n  usePlaceholder = usePlaceholder !== null && usePlaceholder !== void 0 ? usePlaceholder : true;\n  useScrollTracker = useScrollTracker !== null && useScrollTracker !== void 0 ? useScrollTracker : true;\n  cellMinHeight = cellMinHeight !== null && cellMinHeight !== void 0 ? cellMinHeight : 0;\n  cellMinWidth = cellMinWidth !== null && cellMinWidth !== void 0 ? cellMinWidth : 0;\n  cacheMax = cacheMax !== null && cacheMax !== void 0 ? cacheMax : 0;\n  cellHeight = +cellHeight;\n  cellWidth = +cellWidth;\n  cellMinHeight = +cellMinHeight;\n  cellMinWidth = +cellMinWidth;\n  gap = +gap;\n  padding = +padding;\n  startingIndex = +startingIndex;\n  startingListSize = +startingListSize;\n  runwaySize = +runwaySize;\n  cacheMax = +cacheMax;\n  var verifiedValues = {\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    cellMinHeight: cellMinHeight,\n    cellMinWidth: cellMinWidth,\n    gap: gap,\n    padding: padding,\n    startingIndex: startingIndex,\n    startingListSize: startingListSize,\n    runwaySize: runwaySize,\n    cacheMax: cacheMax\n  };\n  cellMinHeight = Math.max(cellMinHeight, 25);\n  cellMinWidth = Math.max(cellMinWidth, 25);\n  cellMinHeight = Math.min(cellHeight, cellMinHeight);\n  cellMinWidth = Math.min(cellWidth, cellMinWidth);\n  // prop constraints - non-negative values\n  runwaySize = Math.max(1, runwaySize); // runwaysize must be at least 1\n  startingListSize = Math.max(0, startingListSize);\n  startingIndex = Math.max(0, startingIndex);\n  // package\n  var problems = 0;\n  for (var prop in verifiedValues) {\n    if (isNaN(verifiedValues[prop])) {\n      problems++;\n    }\n  }\n  if (problems) {\n    console.error(\'Error: invalid number - compare originalValues and verifiedValues\', originalValues, verifiedValues);\n  }\n  // rationalize startingListsize and startingListRange\n  if (!problems && scrollerState == \'setup\') {\n    var goodrange = true;\n    if (!startingListRange || !Array.isArray(startingListRange) || !(startingListRange.length == 2 || startingListRange.length == 0)) {\n      goodrange = false;\n    }\n    if (goodrange) {\n      if (startingListRange.length == 0) {\n        startingListSize = 0;\n      } else {\n        var _startingListRange = startingListRange,\n          _startingListRange2 = _slicedToArray(_startingListRange, 2),\n          lowindex = _startingListRange2[0],\n          highindex = _startingListRange2[1];\n        lowindex = +lowindex;\n        highindex = +highindex;\n        if (isNaN(lowindex) || isNaN(highindex)) {\n          goodrange = false;\n        } else if (lowindex > highindex) {\n          goodrange = false;\n        }\n        if (goodrange) {\n          startingListSize = highindex - lowindex + 1;\n        }\n      }\n    }\n    if (!goodrange) {\n      if (startingListSize && !isNaN(startingListSize)) {\n        startingListRange = [0, startingListSize - 1];\n      } else {\n        startingListRange = [];\n        startingListSize = 0;\n      }\n    }\n  }\n  // enums\n  if (![\'horizontal\', \'vertical\'].includes(orientation)) {\n    orientation = \'vertical\';\n  }\n  if (![\'preload\', \'keepload\', \'cradle\'].includes(cache)) {\n    cache = \'cradle\';\n  }\n  if (![\'uniform\', \'variable\'].includes(layout)) {\n    layout = \'uniform\';\n  }\n  var gridSpecs = {\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    cellMinHeight: cellMinHeight,\n    cellMinWidth: cellMinWidth,\n    layout: layout\n  };\n  var gridSpecsRef = (0, react_1.useRef)(gridSpecs);\n  // system\n  var stylesRef = (0, react_1.useRef)(styles);\n  var callbacksRef = (0, react_1.useRef)(callbacks);\n  var placeholderMessagesRef = (0, react_1.useRef)(placeholderMessages);\n  var _technical = technical,\n    showAxis = _technical.showAxis,\n    triggerlineOffset = _technical.triggerlineOffset,\n    VIEWPORT_RESIZE_TIMEOUT = _technical.VIEWPORT_RESIZE_TIMEOUT,\n    ONAFTERSCROLL_TIMEOUT = _technical.ONAFTERSCROLL_TIMEOUT,\n    IDLECALLBACK_TIMEOUT = _technical.IDLECALLBACK_TIMEOUT,\n    VARIABLE_MEASUREMENTS_TIMEOUT = _technical.VARIABLE_MEASUREMENTS_TIMEOUT,\n    MAX_CACHE_OVER_RUN = _technical.MAX_CACHE_OVER_RUN,\n    CACHE_PARTITION_SIZE = _technical.CACHE_PARTITION_SIZE;\n  VIEWPORT_RESIZE_TIMEOUT = VIEWPORT_RESIZE_TIMEOUT !== null && VIEWPORT_RESIZE_TIMEOUT !== void 0 ? VIEWPORT_RESIZE_TIMEOUT : 250;\n  ONAFTERSCROLL_TIMEOUT = ONAFTERSCROLL_TIMEOUT !== null && ONAFTERSCROLL_TIMEOUT !== void 0 ? ONAFTERSCROLL_TIMEOUT : 100;\n  IDLECALLBACK_TIMEOUT = IDLECALLBACK_TIMEOUT !== null && IDLECALLBACK_TIMEOUT !== void 0 ? IDLECALLBACK_TIMEOUT : 250;\n  VARIABLE_MEASUREMENTS_TIMEOUT = VARIABLE_MEASUREMENTS_TIMEOUT !== null && VARIABLE_MEASUREMENTS_TIMEOUT !== void 0 ? VARIABLE_MEASUREMENTS_TIMEOUT : 250;\n  MAX_CACHE_OVER_RUN = MAX_CACHE_OVER_RUN !== null && MAX_CACHE_OVER_RUN !== void 0 ? MAX_CACHE_OVER_RUN : 1.5;\n  CACHE_PARTITION_SIZE = CACHE_PARTITION_SIZE !== null && CACHE_PARTITION_SIZE !== void 0 ? CACHE_PARTITION_SIZE : 30;\n  if (typeof showAxis != \'boolean\') showAxis = false;\n  triggerlineOffset = triggerlineOffset !== null && triggerlineOffset !== void 0 ? triggerlineOffset : 10;\n  if (typeof usePlaceholder != \'boolean\') usePlaceholder = true;\n  if (typeof useScrollTracker != \'boolean\') useScrollTracker = true;\n  // for mount version\n  var scrollerSessionIDRef = (0, react_1.useRef)(null);\n  var scrollerID = scrollerSessionIDRef.current;\n  // for children\n  var cacheAPIRef = (0, react_1.useRef)(cacheAPI);\n  var updateFunctionRef = (0, react_1.useRef)(null);\n  var listsizeRef = (0, react_1.useRef)(startingListSize);\n  var listRangeRef = (0, react_1.useRef)(startingListRange);\n  var listsize = listsizeRef.current;\n  var listrange = listRangeRef.current;\n  var _listrange = _slicedToArray(listrange, 2),\n    lowlistrange = _listrange[0],\n    highlistrange = _listrange[1]; // ranges undefined if listrange length is 0\n  var virtualListSpecs = {\n    size: listsize,\n    range: listrange,\n    lowindex: lowlistrange,\n    highindex: highlistrange\n  };\n  var virtualListSpecsRef = (0, react_1.useRef)(virtualListSpecs);\n  if (!compareProps(virtualListSpecs, virtualListSpecsRef.current)) {\n    virtualListSpecsRef.current = virtualListSpecs;\n  }\n  // tests for React with Object.is for changed properties; avoid re-renders with no change\n  if (!compareProps(gridSpecs, gridSpecsRef.current)) {\n    gridSpecsRef.current = gridSpecs;\n  }\n  if (!compareProps(styles, stylesRef.current)) {\n    stylesRef.current = styles;\n  }\n  if (!compareProps(callbacks, callbacksRef.current)) {\n    callbacksRef.current = callbacks;\n  }\n  if (!compareProps(placeholderMessages, placeholderMessagesRef.current)) {\n    placeholderMessagesRef.current = placeholderMessages;\n  }\n  // -------------------------[ Initialization ]-------------------------------\n  var getCacheAPI = function getCacheAPI(cacheAPI) {\n    cacheAPIRef.current = cacheAPI;\n  };\n  var getUpdateFunction = function getUpdateFunction(fn) {\n    updateFunctionRef.current = fn;\n  };\n  var useLocalCache = !cacheAPI;\n  var isMountedRef = (0, react_1.useRef)(true);\n  (0, react_1.useEffect)(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  (0, react_1.useEffect)(function () {\n    if (scrollerSessionIDRef.current === null) {\n      // defend against React.StrictMode double run\n      scrollerSessionIDRef.current = globalScrollerID++;\n    }\n  }, []);\n  var setVirtualListRange = (0, react_1.useCallback)(function (listrange) {\n    var listsize;\n    if (listrange.length == 0) {\n      listsize = 0;\n    } else {\n      var _listrange2 = _slicedToArray(listrange, 2),\n        lowrange = _listrange2[0],\n        highrange = _listrange2[1];\n      listsize = highrange - lowrange + 1;\n    }\n    listsizeRef.current = listsize;\n    listRangeRef.current = listrange;\n    // inform the user\n    callbacksRef.current.changeListRangeCallback && callbacksRef.current.changeListRangeCallback(listrange);\n    setScrollerState(\'setlistprops\');\n  }, []);\n  // called when getItem returns null, or direct call from user (see serviceHandler)\n  var setVirtualListSize = (0, react_1.useCallback)(function (listsize) {\n    var listrange = listRangeRef.current;\n    if (listsize == 0) {\n      listrange = [];\n    } else {\n      if (listrange.length == 0) {\n        listrange = [0, listsize - 1];\n      } else {\n        var _listRangeRef$current = _slicedToArray(listRangeRef.current, 2),\n          _lowindex = _listRangeRef$current[0],\n          _highindex = _listRangeRef$current[1];\n        listrange = [_lowindex, _lowindex + listsize - 1];\n      }\n    }\n    listsizeRef.current = listsize;\n    listRangeRef.current = listrange;\n    // inform the user\n    callbacksRef.current.changeListSizeCallback && callbacksRef.current.changeListSizeCallback(listsize);\n    setScrollerState(\'setlistprops\');\n  }, []);\n  // ---------------------[ State handling ]------------------------\n  var itemSetRef = (0, react_1.useRef)(null);\n  (0, react_1.useEffect)(function () {\n    switch (scrollerState) {\n      case \'setup\':\n        // replace cacheAPI with facade which includes hidden scrollerID\n        cacheAPIRef.current = cacheAPIRef.current.registerScroller(scrollerSessionIDRef.current);\n        itemSetRef.current = cacheAPIRef.current.itemSet; // for unmount unRegisterScroller\n        if (updateFunctionRef.current) {\n          // obtained from PortalCache\n          cacheAPIRef.current.partitionRepoForceUpdate = updateFunctionRef.current;\n        }\n      case \'setlistprops\':\n        setScrollerState(\'ready\');\n    }\n    return function () {\n      if (!isMountedRef.current) {\n        cacheAPIRef.current.unRegisterScroller(itemSetRef.current);\n      }\n    };\n  }, [scrollerState]);\n  // --------------------[ Render ]---------------------\n  if (problems || isMinimalPropsFail) {\n    return react_1["default"].createElement("div", null, "error: see console.");\n  }\n  // component calls are deferred by scrollerState to give cacheAPI a chance to initialize\n  return react_1["default"].createElement(react_error_boundary_1.ErrorBoundary, {\n    FallbackComponent: ErrorFallback,\n    // elaboration TBD\n    onReset: function onReset() {},\n    onError: function onError() {}\n  }, scrollerState != \'setup\' && react_1["default"].createElement(Viewport_1["default"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    scrollerID: scrollerID,\n    VIEWPORT_RESIZE_TIMEOUT: VIEWPORT_RESIZE_TIMEOUT,\n    useScrollTracker: useScrollTracker\n  }, react_1["default"].createElement(Scrollblock_1["default"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    virtualListSpecs: virtualListSpecsRef.current,\n    scrollerID: scrollerID\n  }, react_1["default"].createElement(Cradle_1["default"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    virtualListSpecs: virtualListSpecsRef.current,\n    setVirtualListSize: setVirtualListSize,\n    setVirtualListRange: setVirtualListRange,\n    cache: cache,\n    cacheMax: cacheMax,\n    userCallbacks: callbacksRef.current,\n    startingIndex: startingIndex,\n    getItem: getItem,\n    placeholder: placeholder,\n    placeholderMessages: placeholderMessagesRef.current,\n    runwaySize: runwaySize,\n    triggerlineOffset: triggerlineOffset,\n    scrollerProperties: scrollerProperties,\n    cacheAPI: cacheAPIRef.current,\n    usePlaceholder: usePlaceholder,\n    useScrollTracker: useScrollTracker,\n    showAxis: showAxis,\n    ONAFTERSCROLL_TIMEOUT: ONAFTERSCROLL_TIMEOUT,\n    IDLECALLBACK_TIMEOUT: IDLECALLBACK_TIMEOUT,\n    MAX_CACHE_OVER_RUN: MAX_CACHE_OVER_RUN,\n    VARIABLE_MEASUREMENTS_TIMEOUT: VARIABLE_MEASUREMENTS_TIMEOUT,\n    scrollerID: scrollerID\n  }))), react_1["default"].createElement("div", null, useLocalCache && react_1["default"].createElement("div", {\n    "data-type": \'cacheroot\',\n    style: cacherootstyle\n  }, react_1["default"].createElement(PortalCache_1["default"], {\n    getCacheAPI: getCacheAPI,\n    getUpdateFunction: getUpdateFunction,\n    CACHE_PARTITION_SIZE: CACHE_PARTITION_SIZE\n  }))));\n};\nexports["default"] = InfiniteGridScroller;\n// ----------------------------[ Support ]------------------------------\nvar cacherootstyle = {\n  display: \'none\'\n}; // as React.CSSProperties // static, out of view \n// utility\nfunction compareProps(obj1, obj2) {\n  if (!obj1 || !obj2) return false;\n  var keys = Object.keys(obj1);\n  for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {\n    var key = _keys[_i2];\n    if (!Object.is(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FBRyxHQUFBRCxLQUFBLENBQUFELEdBQUE7SUFDVixJQUFJLENBQUMzTCxNQUFNLENBQUM4TCxFQUFFLENBQUNOLElBQUksQ0FBQ0ssR0FBRyxDQUFDLEVBQUNKLElBQUksQ0FBQ0ksR0FBRyxDQUFDLENBQUMsRUFBRTtNQUNqQyxPQUFPLEtBQUs7OztFQUdwQixPQUFPLElBQUk7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvSW5maW5pdGVHcmlkU2Nyb2xsZXIudHN4PzdmNmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW5maW5pdGVHcmlkU2Nyb2xsZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMTktMjAyMyBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG4vKlxuICAgIHJlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIgPSBSSUdTXG5cbiAgICBUaGUgam9iIG9mIEluZmluaXRlR3JpZFNjcm9sbGVyIGlzIHRvIHBhc3MgcGFyYW1ldGVycyB0byBkZXBlbmRlbnRzLlxuICAgIFZpZXdwb3J0IGNvbnRhaW5zIHRoZSBTY3JvbGxibG9jaywgd2hpY2ggaXMgZnVsbCBzaXplIGZvciBsaXN0c2l6ZSBvZiBnaXZlbiBjZWxsIGhlaWdodC93aWR0aC5cbiAgICBTY3JvbGxibG9jayBpbiB0dXJuIGNvbnRhaW5zIHRoZSBDcmFkbGUgLSBhIGNvbXBvbmVudCB0aGF0IGNvbnRhaW5zIENlbGxGcmFtZXMsIHdoaWNoIGNvbnRhaW4gXG4gICAgZGlzcGxheWVkIHVzZXIgY29udGVudCAoaXRlbXMpIG9yIHRyYW5zaXRpb25hbCBwbGFjZWhvbGRlcnMuIFxuXG4gICAgSG9zdCBjb250ZW50IGlzIGluc3RhbnRpYXRlZCBpbiBhIGNhY2hlIG9mIFJlYWN0IHBvcnRhbHMgKHZpYSBjYWNoZUFQSSkuIENvbnRlbnQgaXMgdGhlbiBcbiAgICBwb3J0YWwnZCB0byBDZWxsRnJhbWVzLiBUaGUgY2FjaGUgY2FuIGJlIGNvbmZpZ3VyZWQgdG8gaG9sZCBtb3JlIGl0ZW1zIHRoYW4gdGhlIENyYWRsZSAobGltaXRlZCBieSBcbiAgICBkZXZpY2UgbWVtb3J5KS4gQ2FjaGluZyBhbGxvd3MgaG9zdCBjb250ZW50IHRvIG1haW50YWluIHN0YXRlLlxuXG4gICAgU2Nyb2xsYmxvY2sgcmVwcmVzZW50cyB0aGUgZW50aXJldHkgb2YgdGhlIGxpc3QgKGFuZCBpcyBzaXplZCBhY2NvcmRpbmdseSkuIEl0IGlzIHRoZSBjb21wb25lbnQgdGhhdCBpcyBzY3JvbGxlZC5cblxuICAgIENyYWRsZSBjb250YWlucyB0aGUgbGlzdCBpdGVtcywgYW5kIGlzICd2aXJ0dWFsaXplZCcgLS0gaXQgYXBwZWFycyBhcyB0aG91Z2ggaXQgc2Nyb2xscyB0aHJvdWdoIGEgZmlsbGVkIFxuICAgIHNjcm9sbGJsb2NrLCBidXQgaW4gZmFjdCBpdCBpcyBvbmx5IHNsaWdodGx5IGxhcmdlciB0aGFuIHRoZSB2aWV3cG9ydC4gQ29udGVudCBpcyByb3RhdGVkIGluIGFuZCBvdXQgb2YgdGhlIFxuICAgIGNyYWRsZSB0aHJvdWdoIHRoZSBjYWNoZS5cbiAgICBcbiAgICBJbmRpdmlkdWFsIGhvc3QgaXRlbXMgYXJlIGZyYW1lZCBieSBDZWxsRnJhbWUsIHdoaWNoIGFyZSBtYW5hZ2VkIGJ5IENyYWRsZS5cblxuICAgIE92ZXJhbGwgdGhlIEluZmluaXRlR3JpZFNjcm9sbGVyIGFzIGEgcGFja2FnZSBtYW5hZ2VzIHRoZSBhc3luY2hyb25vdXMgaW50ZXJhY3Rpb25zIG9mIHRoZSBcbiAgICBjb21wb25lbnRzIG9mIHRoZSBtZWNoYW5pc20uIE1vc3Qgb2YgdGhlIHdvcmsgb2NjdXJzIGluIHRoZSBDcmFkbGUgY29tcG9uZW50LlxuXG4gICAgVGhlIFJJR1MgbGluZXIgKHRoZSB0b3AgbGV2ZWwgVmlld3BvcnQgZWxlbWVudCkgaXMgc2V0IHdpdGggJ2Rpc3BsYXk6YWJzb2x1dGUnIGFuZCAnaW5zZXQ6MCcsIHNvIHRoZSB1c2VyIFxuICAgIGNvbnRhaW5pbmcgYmxvY2sgc2hvdWxkIGJlIHN0eWxlZCBhY2NvcmRpbmdseS5cbiovXG5cbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnXG5cbi8vIGRlZmVuc2l2ZVxuaW1wb3J0IHsgRXJyb3JCb3VuZGFyeSB9IGZyb20gJ3JlYWN0LWVycm9yLWJvdW5kYXJ5JyAvLyB3d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtZXJyb3ItYm91bmRhcnlcblxuZXhwb3J0IGNvbnN0IGlzU2FmYXJpSU9TID0gKCkgPT4ge1xuICAgIGNvbnN0XG4gICAgICAgIGlzX2lvcyA9IC9pUChhZHxvZHxob25lKS9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpLFxuICAgICAgICBpc19zYWZhcmkgPSAhIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1ZlcnNpb25cXC9bXFxkXFwuXSsuKlNhZmFyaS8pXG4gICAgcmV0dXJuICggaXNfaW9zICYmIGlzX3NhZmFyaSApIFxufVxuXG4vLyBiYXNlZCBvbiBtb2R1bGUgdGVtcGxhdGVcbmZ1bmN0aW9uIEVycm9yRmFsbGJhY2soe2Vycm9yLCByZXNldEVycm9yQm91bmRhcnl9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiByb2xlPVwiYWxlcnRcIiBzdHlsZSA9IHt7bWFyZ2luOiczcHgnfX0+XG4gICAgICA8cD5Tb21ldGhpbmcgd2VudCB3cm9uZyBpbnNpZGUgcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci4gU2VlIHRoZSBjb25zb2xlIGZvciBkZXRhaWxzLjwvcD5cbiAgICAgIDxwPkNsaWNrIHRvIGNhbmNlbCB0aGUgZXJyb3IgYW5kIHRyeSB0byBjb250aW51ZS48L3A+XG4gICAgICA8YnV0dG9uIFxuICAgICAgICAgIHN0eWxlID0ge3tib3JkZXI6JzFweCBzb2xpZCBibGFjaycsIG1hcmdpbjonM3B4JywgcGFkZGluZzonM3B4J319IFxuICAgICAgICAgIG9uQ2xpY2sgPSB7IHJlc2V0RXJyb3JCb3VuZGFyeSB9XG4gICAgICA+XG4gICAgICAgICAgQ2FuY2VsIGVycm9yXG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG4vLyBzY3JvbGxlciBjb21wb25lbnRzXG5pbXBvcnQgVmlld3BvcnQgZnJvbSAnLi9WaWV3cG9ydCdcbmltcG9ydCBTY3JvbGxibG9jayBmcm9tICcuL1Njcm9sbGJsb2NrJ1xuaW1wb3J0IENyYWRsZSBmcm9tICcuL0NyYWRsZSdcblxuLy8gbG9hZGVkIGhlcmUgdG8gbWluaW1pemUgcmVkdW5kYW50IHJlbmRlcnMgaW4gQ3JhZGxlXG5pbXBvcnQgUG9ydGFsQ2FjaGUgZnJvbSAnLi9Qb3J0YWxDYWNoZSdcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVsgZ2xvYmFsIHNlc3Npb24gSUQgZ2VuZXJhdG9yIF0tLS0tLS0tLS0tLS0tLS0tXG5cbmxldCBnbG9iYWxTY3JvbGxlcklEID0gMFxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVsgSU5JVElBTElaRSBdPT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmNvbnN0IEluZmluaXRlR3JpZFNjcm9sbGVyID0gKHByb3BzKSA9PiB7XG5cbiAgICAvLyBzdGF0ZVxuICAgIGNvbnN0IFtzY3JvbGxlclN0YXRlLCBzZXRTY3JvbGxlclN0YXRlXSA9IHVzZVN0YXRlKCdzZXR1cCcpIC8vIHNldHVwLCBzZXRsaXN0cHJvcHMsIHJlYWR5XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1bIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzIF0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgbGV0IHsgXG5cbiAgICAgICAgLy8gcmVxdWlyZWRcbiAgICAgICAgY2VsbEhlaWdodCwgLy8gcmVxdWlyZWQuIHRoZSBvdXRlciBwaXhlbCBoZWlnaHQgLSBsaXRlcmFsIGZvciB2ZXJ0aWNhbDsgYXBwcm94aW1hdGUgZm9yIGhvcml6b250YWxcbiAgICAgICAgICAgIC8vIG1heCBmb3IgdmFyaWFibGUgbGF5b3V0XG4gICAgICAgIGNlbGxXaWR0aCwgLy8gcmVxdWlyZWQuIHRoZSBvdXRlciBwaXhlbCB3aWR0aCAtIGxpdGVyYWwgZm9yIGhvcml6b250YWw7IGFwcHJveGltYXRlIGZvciB2ZXJ0aWNhbFxuICAgICAgICAgICAgLy8gbWF4IGZvciB2YXJpYWJsZSBsYXlvdXRcbiAgICAgICAgc3RhcnRpbmdMaXN0U2l6ZSA9IDAsIC8vIHRoZSBzdGFyZ2luZyBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIHZpcnR1YWwgbGlzdC4gY2FuIGJlIGNoYW5nZWRcbiAgICAgICAgc3RhcnRpbmdMaXN0UmFuZ2UgPSBbXSwgLy8gc3VwZXJjZWRlcyBzdGFydGluZ0xpc3RTaXplIGlmIHByZXNlbnRcbiAgICAgICAgZ2V0SXRlbSwgLy8gcmVxdWlyZWQuIGZ1bmN0aW9uIHByb3ZpZGVkIGJ5IGhvc3QgLSBwYXJhbWV0ZXJzIHNldCBieSBzeXN0ZW0gYXJlIGluZGV4IG51bWJlclxuICAgICAgICAgICAgLy8gYW5kIHNlc3Npb24gaXRlbUlEIGZvciB0cmFja2luZyBhbmQgbWF0Y2hpbmc7IFxuICAgICAgICAgICAgLy8gcmV0dXJuIHZhbHVlIGlzIGhvc3Qtc2VsZWN0ZWQgY29tcG9uZW50IG9yIHByb21pc2Ugb2YgYSBjb21wb25lbnQsIG9yIG51bGwgb3IgdW5kZWZpbmVkXG5cbiAgICAgICAgLy8gZ3JpZCBzcGVjczpcbiAgICAgICAgb3JpZW50YXRpb24gPSAndmVydGljYWwnLCAvLyB2ZXJ0aWNhbCBvciBob3Jpem9udGFsXG4gICAgICAgIGdhcCA9IDAsIC8vIHNwYWNlIGJldHdlZW4gZ3JpZCBjZWxscywgbm90IGluY2x1ZGluZyB0aGUgbGVhZGluZyBhbmQgdHJhaWxpbmcgcGFkZGluZ1xuICAgICAgICBwYWRkaW5nID0gMCwgLy8gdGhlIGJvcmRlciBzcGFjZSBiZXR3ZWVuIHRoZSBpdGVtcyBhbmQgdGhlIHZpZXdwb3J0LCBhcHBsaWVkIHRvIHRoZSBjcmFkbGVcbiAgICAgICAgbGF5b3V0ID0gJ3VuaWZvcm0nLCAvLyB1bmlmb3JtLCB2YXJpYWJsZVxuICAgICAgICBjZWxsTWluSGVpZ2h0ID0gMjUsIC8vIGZvciBsYXlvdXQgPT0gJ3ZhcmlhYmxlJyAmJiBvcmllbnRhdGlvbiA9PSAndmVydGljYWwnXG4gICAgICAgIGNlbGxNaW5XaWR0aCA9IDI1LCAvLyBmb3IgbGF5b3V0ID09ICd2YXJpYWJsZScgJiYgb3JpZW50YXRpb24gPT0gJ2hvcml6b250YWwnXG5cbiAgICAgICAgLy8gc2Nyb2xsZXIgc3BlY3M6XG4gICAgICAgIHJ1bndheVNpemUgPSAzLCAvLyB0aGUgbnVtYmVyIG9mIHJvd3Mgb3V0c2lkZSB0aGUgdmlldyBvZiBlYWNoIHNpZGUgb2YgdGhlIHZpZXdwb3J0IFxuICAgICAgICAgICAgLy8gLS0gZ2l2ZXMgdGltZSB0byBhc3NlbWJsZSBjZWxsRnJhbWVzIGJlZm9yZSBkaXNwbGF5XG4gICAgICAgIHN0YXJ0aW5nSW5kZXggPSAwLCAvLyB0aGUgc3RhcnRpbmcgaW5kZXggb2YgdGhlIGxpc3QsIHdoZW4gZmlyc3QgbG9hZGVkXG5cbiAgICAgICAgLy8gc3lzdGVtIHNwZWNzOlxuICAgICAgICBjYWNoZSA9ICdjcmFkbGUnLCAvLyBcInByZWxvYWRcIiwgXCJrZWVwbG9hZFwiIG9yIFwiY3JhZGxlXCJcbiAgICAgICAgY2FjaGVNYXggPSBudWxsLCAvLyBhbHdheXMgbWluaW11bSBjcmFkbGUgY29udGVudCBzaXplOyBmYWxzZXkgbWVhbnMgbGltaXRlZCBieSBsaXN0c2l6ZVxuICAgICAgICBwbGFjZWhvbGRlciwgLy8gb3B0aW9uYWwuIGEgc3BhcnNlIGNvbXBvbmVudCB0byBzdGFuZCBpbiBmb3IgY29udGVudCB1bnRpbCB0aGUgY29udGVudCBhcnJpdmVzOyBcbiAgICAgICAgICAgIC8vIHJlcGxhY2VzIGRlZmF1bHQgcGxhY2Vob2xkZXIgaWYgcHJlc2VudFxuICAgICAgICB1c2VQbGFjZWhvbGRlciA9IHRydWUsIC8vIG5vIHBsYWNlaG9sZGVyIHJlbmRlcmVkIGlmIGZhbHNlXG4gICAgICAgIHVzZVNjcm9sbFRyYWNrZXIgPSB0cnVlLCAvLyB0aGUgaW50ZXJuYWwgY29tcG9uZW50IHRvIGdpdmUgZmVlZGJhY2sgZm9yIHJlcG9zaXRpb25pbmdcblxuICAgICAgICAvLyBhZHZhbmNlZCBvYmplY3RzXG4gICAgICAgIHN0eWxlcyA9IHt9LCAvLyBvcHRpb25hbC4gcGFzc2l2ZSBzdHlsZSBvdmVyLXJpZGVzIChlZy4gY29sb3IsIG9wYWNpdHkpOyBoYXMgXG4gICAgICAgICAgICAvLyBwcm9wZXJ0aWVzIHZpZXdwb3J0LCBzY3JvbGxibG9jaywgY3JhZGxlLCBzY3JvbGx0cmFja2VyLCBwbGFjZWhvbGRlcmZyYW1lLCBcbiAgICAgICAgICAgIC8vIHBsYWNlaG9sZGVyZXJyb3JmcmFtZSwgcGxhY2Vob2xkZXJsaW5lciBvciBwbGFjZWhvbGRlcmVycm9ybGluZXIuIERvIG5vdCBtYWtlIHN0cnVjdHVyYWwgY2hhbmdlcyFcbiAgICAgICAgcGxhY2Vob2xkZXJNZXNzYWdlcyA9IHt9LCAvLyBtZXNzYWdlcyBwcmVzZW50ZWQgYnkgZGVmYXVsdCBwbGFjZWhvbGRlci4gU2VlIGRvY3VtZW50YXRpb25cbiAgICAgICAgY2FsbGJhY2tzID0ge30sIC8vIG9wdGlvbmFsLiBjbG9zdXJlcyB0byBnZXQgZGlyZWN0IGluZm9ybWF0aW9uIHN0cmVhbXMgb2Ygc29tZSBjb21wb25lbnQgdXRpbGl0ZXNcbiAgICAgICAgICAgIC8vIGNhbiBjb250YWluIGZ1bmN0aW9uc0NhbGxiYWNrLCB3aGljaCBwcm92aWRlcyBhY2Nlc3MgdG8gaW50ZXJuYWwgc2Nyb2xsZXIgZnVuY3Rpb25zIFxuICAgICAgICAgICAgLy8obW9zdGx5IGNhY2hlIG1hbmFnZW1lbnQpXG4gICAgICAgIHRlY2huaWNhbCA9IHt9LCAvLyBvcHRpb25hbC4gdGVjaG5pY2FsIHNldHRpbmdzIGxpa2UgVklFV1BPUlRfUkVTSVpFX1RJTUVPVVRcbiAgICAgICAgY2FjaGVBUEkgPSBudWxsLFxuICAgICAgICBkcmFnZHJvcFByb3BlcnRpZXMsIC8vIHBsYWNlaG9sZGVyIVxuXG4gICAgICAgIC8vIGluZm9ybWF0aW9uIGZvciBob3N0IGNlbGwgY29udGVudFxuICAgICAgICBzY3JvbGxlclByb3BlcnRpZXMsIC8vIHJlcXVpcmVkIGZvciBlbWJlZGRlZCBzY3JvbGxlcjsgc2hhcmVzIHNjcm9sbGVyIHNldHRpbmdzIHdpdGggY29udGVudFxuXG4gICAgfSA9IHByb3BzXG5cbiAgICBsZXQgaXNNaW5pbWFsUHJvcHNGYWlsID0gZmFsc2VcbiAgICBpZiAoIShjZWxsV2lkdGggJiYgY2VsbEhlaWdodCAmJiBnZXRJdGVtICkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1JJR1M6IGNlbGxXaWR0aCwgY2VsbEhlaWdodCwgYW5kIGdldEl0ZW0gYXJlIHJlcXVpcmVkJylcbiAgICAgICAgaXNNaW5pbWFsUHJvcHNGYWlsID0gdHJ1ZVxuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgRGF0YSBzZXR1cCBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgY29uc3Qgb3JpZ2luYWxWYWx1ZXMgPSB7XG4gICAgICAgIGNlbGxIZWlnaHQsXG4gICAgICAgIGNlbGxXaWR0aCxcbiAgICAgICAgY2VsbE1pbkhlaWdodCxcbiAgICAgICAgY2VsbE1pbldpZHRoLFxuICAgICAgICBnYXAsXG4gICAgICAgIHBhZGRpbmcsXG4gICAgICAgIHN0YXJ0aW5nSW5kZXgsXG4gICAgICAgIHN0YXJ0aW5nTGlzdFNpemUsXG4gICAgICAgIHJ1bndheVNpemUsXG4gICAgICAgIGNhY2hlTWF4LFxuICAgIH1cblxuICAgIC8vIGF2b2lkIG51bGwvdW5kZWZpbmVkXG4gICAgc3R5bGVzID0gc3R5bGVzID8/IHt9XG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzID8/IHt9XG4gICAgdGVjaG5pY2FsID0gdGVjaG5pY2FsID8/IHt9XG4gICAgc3RhcnRpbmdJbmRleCA9IHN0YXJ0aW5nSW5kZXggPz8gMFxuICAgIHN0YXJ0aW5nTGlzdFNpemUgPSBzdGFydGluZ0xpc3RTaXplID8/IDBcbiAgICBydW53YXlTaXplID0gcnVud2F5U2l6ZSA/PyAzXG4gICAgdXNlUGxhY2Vob2xkZXIgPSB1c2VQbGFjZWhvbGRlciA/PyB0cnVlXG4gICAgdXNlU2Nyb2xsVHJhY2tlciA9IHVzZVNjcm9sbFRyYWNrZXIgPz8gdHJ1ZVxuICAgIGNlbGxNaW5IZWlnaHQgPSBjZWxsTWluSGVpZ2h0ID8/IDBcbiAgICBjZWxsTWluV2lkdGggPSBjZWxsTWluV2lkdGggPz8gMFxuICAgIGNhY2hlTWF4ID0gY2FjaGVNYXggPz8gMFxuXG4gICAgY2VsbEhlaWdodCA9ICtjZWxsSGVpZ2h0XG4gICAgY2VsbFdpZHRoID0gK2NlbGxXaWR0aFxuICAgIGNlbGxNaW5IZWlnaHQgPSArY2VsbE1pbkhlaWdodFxuICAgIGNlbGxNaW5XaWR0aCA9ICtjZWxsTWluV2lkdGhcbiAgICBnYXAgPSArZ2FwXG4gICAgcGFkZGluZyA9ICtwYWRkaW5nXG4gICAgc3RhcnRpbmdJbmRleCA9ICtzdGFydGluZ0luZGV4XG4gICAgc3RhcnRpbmdMaXN0U2l6ZSA9ICtzdGFydGluZ0xpc3RTaXplXG4gICAgcnVud2F5U2l6ZSA9ICtydW53YXlTaXplXG4gICAgY2FjaGVNYXggPSArY2FjaGVNYXhcblxuICAgIGNvbnN0IHZlcmlmaWVkVmFsdWVzID0ge1xuICAgICAgICBjZWxsSGVpZ2h0LFxuICAgICAgICBjZWxsV2lkdGgsXG4gICAgICAgIGNlbGxNaW5IZWlnaHQsXG4gICAgICAgIGNlbGxNaW5XaWR0aCxcbiAgICAgICAgZ2FwLFxuICAgICAgICBwYWRkaW5nLFxuICAgICAgICBzdGFydGluZ0luZGV4LFxuICAgICAgICBzdGFydGluZ0xpc3RTaXplLFxuICAgICAgICBydW53YXlTaXplLFxuICAgICAgICBjYWNoZU1heCwgICAgICAgIFxuICAgIH1cblxuICAgIGNlbGxNaW5IZWlnaHQgPSBNYXRoLm1heChjZWxsTWluSGVpZ2h0LCAyNSlcbiAgICBjZWxsTWluV2lkdGggPSBNYXRoLm1heChjZWxsTWluV2lkdGgsIDI1KVxuICAgIGNlbGxNaW5IZWlnaHQgPSBNYXRoLm1pbihjZWxsSGVpZ2h0LCBjZWxsTWluSGVpZ2h0KVxuICAgIGNlbGxNaW5XaWR0aCA9IE1hdGgubWluKGNlbGxXaWR0aCwgY2VsbE1pbldpZHRoKVxuXG4gICAgLy8gcHJvcCBjb25zdHJhaW50cyAtIG5vbi1uZWdhdGl2ZSB2YWx1ZXNcbiAgICBydW53YXlTaXplID0gTWF0aC5tYXgoMSxydW53YXlTaXplKSAvLyBydW53YXlzaXplIG11c3QgYmUgYXQgbGVhc3QgMVxuICAgIHN0YXJ0aW5nTGlzdFNpemUgPSBNYXRoLm1heCgwLHN0YXJ0aW5nTGlzdFNpemUpXG4gICAgc3RhcnRpbmdJbmRleCA9IE1hdGgubWF4KDAsc3RhcnRpbmdJbmRleClcblxuICAgIC8vIHBhY2thZ2VcbiAgICBsZXQgcHJvYmxlbXMgPSAwXG4gICAgZm9yIChjb25zdCBwcm9wIGluIHZlcmlmaWVkVmFsdWVzKSB7XG4gICAgICAgIGlmIChpc05hTih2ZXJpZmllZFZhbHVlc1twcm9wXSkpIHtcbiAgICAgICAgICAgIHByb2JsZW1zKytcbiAgICAgICAgfSBcbiAgICB9XG5cbiAgICBpZiAocHJvYmxlbXMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6IGludmFsaWQgbnVtYmVyIC0gY29tcGFyZSBvcmlnaW5hbFZhbHVlcyBhbmQgdmVyaWZpZWRWYWx1ZXMnLCBcbiAgICAgICAgICAgIG9yaWdpbmFsVmFsdWVzLCB2ZXJpZmllZFZhbHVlcylcbiAgICB9XG5cbiAgICAvLyByYXRpb25hbGl6ZSBzdGFydGluZ0xpc3RzaXplIGFuZCBzdGFydGluZ0xpc3RSYW5nZVxuICAgIGlmICghcHJvYmxlbXMgJiYgc2Nyb2xsZXJTdGF0ZSA9PSAnc2V0dXAnKSB7XG5cbiAgICAgICAgbGV0IGdvb2RyYW5nZSA9IHRydWVcbiAgICAgICAgaWYgKCFzdGFydGluZ0xpc3RSYW5nZSB8fCBcbiAgICAgICAgICAgICFBcnJheS5pc0FycmF5KHN0YXJ0aW5nTGlzdFJhbmdlKSB8fCBcbiAgICAgICAgICAgICEoKHN0YXJ0aW5nTGlzdFJhbmdlLmxlbmd0aCA9PSAyKSB8fCAoc3RhcnRpbmdMaXN0UmFuZ2UubGVuZ3RoID09IDApKSkge1xuICAgICAgICAgICAgZ29vZHJhbmdlID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ29vZHJhbmdlKSB7XG4gICAgICAgICAgICBpZiAoc3RhcnRpbmdMaXN0UmFuZ2UubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICBzdGFydGluZ0xpc3RTaXplID0gMFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgW2xvd2luZGV4LGhpZ2hpbmRleF0gPSBzdGFydGluZ0xpc3RSYW5nZVxuICAgICAgICAgICAgICAgIGxvd2luZGV4ID0gK2xvd2luZGV4XG4gICAgICAgICAgICAgICAgaGlnaGluZGV4ID0gK2hpZ2hpbmRleFxuICAgICAgICAgICAgICAgIGlmIChpc05hTihsb3dpbmRleCkgfHwgaXNOYU4oaGlnaGluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICBnb29kcmFuZ2UgPSBmYWxzZVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG93aW5kZXggPiBoaWdoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ29vZHJhbmdlID0gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdvb2RyYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydGluZ0xpc3RTaXplID0gaGlnaGluZGV4IC0gbG93aW5kZXggKyAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZ29vZHJhbmdlKSB7XG4gICAgICAgICAgICBpZiAoc3RhcnRpbmdMaXN0U2l6ZSAmJiAoIWlzTmFOKHN0YXJ0aW5nTGlzdFNpemUpKSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0aW5nTGlzdFJhbmdlID0gWzAsc3RhcnRpbmdMaXN0U2l6ZSAtIDFdXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXJ0aW5nTGlzdFJhbmdlID0gW11cbiAgICAgICAgICAgICAgICBzdGFydGluZ0xpc3RTaXplID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZW51bXNcbiAgICBpZiAoIVsnaG9yaXpvbnRhbCcsJ3ZlcnRpY2FsJ10uaW5jbHVkZXMob3JpZW50YXRpb24pKSB7IFxuICAgICAgICBvcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCdcbiAgICB9XG4gICAgaWYgKCFbJ3ByZWxvYWQnLCdrZWVwbG9hZCcsJ2NyYWRsZSddLmluY2x1ZGVzKGNhY2hlKSkge1xuICAgICAgICBjYWNoZSA9ICdjcmFkbGUnXG4gICAgfVxuICAgIGlmICghWyd1bmlmb3JtJywgJ3ZhcmlhYmxlJ10uaW5jbHVkZXMobGF5b3V0KSkge1xuICAgICAgICBsYXlvdXQgPSAndW5pZm9ybSdcbiAgICB9XG5cbiAgICBjb25zdCBncmlkU3BlY3MgPSB7XG4gICAgICAgIG9yaWVudGF0aW9uLFxuICAgICAgICBnYXAsXG4gICAgICAgIHBhZGRpbmcsXG4gICAgICAgIGNlbGxIZWlnaHQsXG4gICAgICAgIGNlbGxXaWR0aCxcbiAgICAgICAgY2VsbE1pbkhlaWdodCxcbiAgICAgICAgY2VsbE1pbldpZHRoLFxuICAgICAgICBsYXlvdXQsXG4gICAgfVxuXG4gICAgY29uc3QgZ3JpZFNwZWNzUmVmID0gdXNlUmVmKGdyaWRTcGVjcylcblxuICAgIC8vIHN5c3RlbVxuICAgIGNvbnN0IHN0eWxlc1JlZiA9IHVzZVJlZihzdHlsZXMpXG4gICAgY29uc3QgY2FsbGJhY2tzUmVmID0gdXNlUmVmKGNhbGxiYWNrcylcbiAgICBjb25zdCBwbGFjZWhvbGRlck1lc3NhZ2VzUmVmID0gdXNlUmVmKHBsYWNlaG9sZGVyTWVzc2FnZXMpXG5cbiAgICBsZXQge1xuXG4gICAgICAgIHNob3dBeGlzLCAvLyBib29sZWFuOyBheGlzIGNhbiBiZSBtYWRlIHZpc2libGUgZm9yIGRlYnVnXG4gICAgICAgIHRyaWdnZXJsaW5lT2Zmc2V0LCAvLyBkaXN0YW5jZSBmcm9tIGNlbGwgaGVhZCBvciB0YWlsIGZvciBjb250ZW50IHNoaWZ0cyBhYm92ZS9iZWxvdyBheGlzXG4gICAgICAgIC8vIHRpbWVvdXRzXG4gICAgICAgIFZJRVdQT1JUX1JFU0laRV9USU1FT1VULFxuICAgICAgICBPTkFGVEVSU0NST0xMX1RJTUVPVVQsXG4gICAgICAgIElETEVDQUxMQkFDS19USU1FT1VULFxuICAgICAgICBWQVJJQUJMRV9NRUFTVVJFTUVOVFNfVElNRU9VVCxcbiAgICAgICAgLy8gcmF0aW9zOlxuICAgICAgICBNQVhfQ0FDSEVfT1ZFUl9SVU4sIC8vIG1heCBzdHJlYW1pbmcgb3Zlci1ydW4gYXMgcmF0aW8gdG8gY2FjaGVNYXhcbiAgICAgICAgQ0FDSEVfUEFSVElUSU9OX1NJWkUsIFxuXG4gICAgfSA9IHRlY2huaWNhbFxuXG4gICAgVklFV1BPUlRfUkVTSVpFX1RJTUVPVVQgPSBWSUVXUE9SVF9SRVNJWkVfVElNRU9VVCA/PyAyNTBcbiAgICBPTkFGVEVSU0NST0xMX1RJTUVPVVQgPSBPTkFGVEVSU0NST0xMX1RJTUVPVVQgPz8gMTAwXG4gICAgSURMRUNBTExCQUNLX1RJTUVPVVQgPSBJRExFQ0FMTEJBQ0tfVElNRU9VVCA/PyAyNTBcbiAgICBWQVJJQUJMRV9NRUFTVVJFTUVOVFNfVElNRU9VVCA9IFZBUklBQkxFX01FQVNVUkVNRU5UU19USU1FT1VUID8/IDI1MFxuICAgIFxuICAgIE1BWF9DQUNIRV9PVkVSX1JVTiA9IE1BWF9DQUNIRV9PVkVSX1JVTiA/PyAxLjVcbiAgICBDQUNIRV9QQVJUSVRJT05fU0laRSA9IENBQ0hFX1BBUlRJVElPTl9TSVpFID8/IDMwXG5cbiAgICBpZiAodHlwZW9mIHNob3dBeGlzICE9ICdib29sZWFuJykgc2hvd0F4aXMgPSBmYWxzZVxuXG4gICAgdHJpZ2dlcmxpbmVPZmZzZXQgPSB0cmlnZ2VybGluZU9mZnNldCA/PyAxMFxuXG4gICAgaWYgKHR5cGVvZiB1c2VQbGFjZWhvbGRlciAhPSAnYm9vbGVhbicpIHVzZVBsYWNlaG9sZGVyID0gdHJ1ZVxuICAgIGlmICh0eXBlb2YgdXNlU2Nyb2xsVHJhY2tlciAhPSAnYm9vbGVhbicpIHVzZVNjcm9sbFRyYWNrZXIgPSB0cnVlXG5cbiAgICAvLyBmb3IgbW91bnQgdmVyc2lvblxuICAgIGNvbnN0IHNjcm9sbGVyU2Vzc2lvbklEUmVmID0gdXNlUmVmKG51bGwpXG4gICAgY29uc3Qgc2Nyb2xsZXJJRCA9IHNjcm9sbGVyU2Vzc2lvbklEUmVmLmN1cnJlbnRcblxuICAgIC8vIGZvciBjaGlsZHJlblxuICAgIGNvbnN0IGNhY2hlQVBJUmVmID0gdXNlUmVmKGNhY2hlQVBJKVxuXG4gICAgY29uc3QgdXBkYXRlRnVuY3Rpb25SZWYgPSB1c2VSZWYobnVsbClcblxuICAgIGNvbnN0IGxpc3RzaXplUmVmID0gdXNlUmVmKHN0YXJ0aW5nTGlzdFNpemUpXG4gICAgY29uc3QgbGlzdFJhbmdlUmVmID0gdXNlUmVmKHN0YXJ0aW5nTGlzdFJhbmdlKVxuXG4gICAgY29uc3QgbGlzdHNpemUgPSBsaXN0c2l6ZVJlZi5jdXJyZW50XG4gICAgY29uc3QgbGlzdHJhbmdlID0gbGlzdFJhbmdlUmVmLmN1cnJlbnRcbiAgICBjb25zdCBbbG93bGlzdHJhbmdlLCBoaWdobGlzdHJhbmdlXSA9IGxpc3RyYW5nZSAvLyByYW5nZXMgdW5kZWZpbmVkIGlmIGxpc3RyYW5nZSBsZW5ndGggaXMgMFxuXG4gICAgY29uc3QgdmlydHVhbExpc3RTcGVjcyA9IHtcbiAgICAgICAgc2l6ZTpsaXN0c2l6ZSxcbiAgICAgICAgcmFuZ2U6bGlzdHJhbmdlLFxuICAgICAgICBsb3dpbmRleDpsb3dsaXN0cmFuZ2UsXG4gICAgICAgIGhpZ2hpbmRleDpoaWdobGlzdHJhbmdlLFxuICAgIH1cblxuICAgIGNvbnN0IHZpcnR1YWxMaXN0U3BlY3NSZWYgPSB1c2VSZWYodmlydHVhbExpc3RTcGVjcylcblxuICAgIGlmICghY29tcGFyZVByb3BzKHZpcnR1YWxMaXN0U3BlY3MsIHZpcnR1YWxMaXN0U3BlY3NSZWYuY3VycmVudCkpIHtcbiAgICAgICAgdmlydHVhbExpc3RTcGVjc1JlZi5jdXJyZW50ID0gdmlydHVhbExpc3RTcGVjc1xuICAgIH1cblxuICAgIC8vIHRlc3RzIGZvciBSZWFjdCB3aXRoIE9iamVjdC5pcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzOyBhdm9pZCByZS1yZW5kZXJzIHdpdGggbm8gY2hhbmdlXG4gICAgaWYgKCFjb21wYXJlUHJvcHMoZ3JpZFNwZWNzLCBncmlkU3BlY3NSZWYuY3VycmVudCkpIHtcbiAgICAgICAgZ3JpZFNwZWNzUmVmLmN1cnJlbnQgPSBncmlkU3BlY3NcbiAgICB9XG5cbiAgICBpZiAoIWNvbXBhcmVQcm9wcyhzdHlsZXMsIHN0eWxlc1JlZi5jdXJyZW50KSkge1xuICAgICAgICBzdHlsZXNSZWYuY3VycmVudCA9IHN0eWxlc1xuICAgIH1cbiAgICBpZiAoIWNvbXBhcmVQcm9wcyhjYWxsYmFja3MsIGNhbGxiYWNrc1JlZi5jdXJyZW50KSkge1xuICAgICAgICBjYWxsYmFja3NSZWYuY3VycmVudCA9IGNhbGxiYWNrc1xuICAgIH1cbiAgICBpZiAoIWNvbXBhcmVQcm9wcyhwbGFjZWhvbGRlck1lc3NhZ2VzLCBwbGFjZWhvbGRlck1lc3NhZ2VzUmVmLmN1cnJlbnQpKSB7XG4gICAgICAgIHBsYWNlaG9sZGVyTWVzc2FnZXNSZWYuY3VycmVudCA9IHBsYWNlaG9sZGVyTWVzc2FnZXNcbiAgICB9XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBJbml0aWFsaXphdGlvbiBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgY29uc3QgZ2V0Q2FjaGVBUEkgPSAoY2FjaGVBUEkpID0+IHtcblxuICAgICAgICBjYWNoZUFQSVJlZi5jdXJyZW50ID0gY2FjaGVBUElcblxuICAgIH1cblxuICAgIGNvbnN0IGdldFVwZGF0ZUZ1bmN0aW9uID0gKGZuKSA9PiB7XG5cbiAgICAgICAgdXBkYXRlRnVuY3Rpb25SZWYuY3VycmVudCA9IGZuXG5cbiAgICB9XG5cbiAgICBjb25zdCB1c2VMb2NhbENhY2hlID0gIWNhY2hlQVBJXG5cbiAgICBjb25zdCBpc01vdW50ZWRSZWYgPSB1c2VSZWYodHJ1ZSlcblxuICAgIHVzZUVmZmVjdCgoKT0+e1xuXG4gICAgICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG5cbiAgICAgICAgICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2VcblxuICAgICAgICB9XG5cbiAgICB9LFtdKVxuXG4gICAgdXNlRWZmZWN0ICgoKSA9PiB7XG5cbiAgICAgICAgaWYgKHNjcm9sbGVyU2Vzc2lvbklEUmVmLmN1cnJlbnQgPT09IG51bGwpIHsgLy8gZGVmZW5kIGFnYWluc3QgUmVhY3QuU3RyaWN0TW9kZSBkb3VibGUgcnVuXG4gICAgICAgICAgICBzY3JvbGxlclNlc3Npb25JRFJlZi5jdXJyZW50ID0gZ2xvYmFsU2Nyb2xsZXJJRCsrXG4gICAgICAgIH1cblxuICAgIH0sW10pO1xuXG4gICAgY29uc3Qgc2V0VmlydHVhbExpc3RSYW5nZSA9IHVzZUNhbGxiYWNrKChsaXN0cmFuZ2UpID0+e1xuXG4gICAgICAgIGxldCBsaXN0c2l6ZVxuICAgICAgICBpZiAobGlzdHJhbmdlLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBsaXN0c2l6ZSA9IDBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IFtsb3dyYW5nZSwgaGlnaHJhbmdlXSA9IGxpc3RyYW5nZVxuICAgICAgICAgICAgbGlzdHNpemUgPSBoaWdocmFuZ2UgLSBsb3dyYW5nZSArIDFcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3RzaXplUmVmLmN1cnJlbnQgPSBsaXN0c2l6ZVxuICAgICAgICBsaXN0UmFuZ2VSZWYuY3VycmVudCA9IGxpc3RyYW5nZVxuXG4gICAgICAgIC8vIGluZm9ybSB0aGUgdXNlclxuICAgICAgICBjYWxsYmFja3NSZWYuY3VycmVudC5jaGFuZ2VMaXN0UmFuZ2VDYWxsYmFjayAmJiBcbiAgICAgICAgICAgIGNhbGxiYWNrc1JlZi5jdXJyZW50LmNoYW5nZUxpc3RSYW5nZUNhbGxiYWNrKGxpc3RyYW5nZSlcblxuICAgICAgICBzZXRTY3JvbGxlclN0YXRlKCdzZXRsaXN0cHJvcHMnKVxuXG4gICAgfSxbXSlcblxuICAgIC8vIGNhbGxlZCB3aGVuIGdldEl0ZW0gcmV0dXJucyBudWxsLCBvciBkaXJlY3QgY2FsbCBmcm9tIHVzZXIgKHNlZSBzZXJ2aWNlSGFuZGxlcilcbiAgICBjb25zdCBzZXRWaXJ0dWFsTGlzdFNpemUgPSB1c2VDYWxsYmFjaygobGlzdHNpemUpID0+e1xuXG4gICAgICAgIGxldCBsaXN0cmFuZ2UgPSBsaXN0UmFuZ2VSZWYuY3VycmVudFxuICAgICAgICBpZiAobGlzdHNpemUgPT0gMCkge1xuICAgICAgICAgICAgbGlzdHJhbmdlID0gW11cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsaXN0cmFuZ2UubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICBsaXN0cmFuZ2UgPSBbMCxsaXN0c2l6ZSAtIDFdXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtsb3dpbmRleCxoaWdoaW5kZXhdID0gbGlzdFJhbmdlUmVmLmN1cnJlbnRcbiAgICAgICAgICAgICAgICBsaXN0cmFuZ2UgPSBbbG93aW5kZXgsbG93aW5kZXggKyBsaXN0c2l6ZSAtIDFdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0c2l6ZVJlZi5jdXJyZW50ID0gbGlzdHNpemVcbiAgICAgICAgbGlzdFJhbmdlUmVmLmN1cnJlbnQgPSBsaXN0cmFuZ2VcblxuICAgICAgICAvLyBpbmZvcm0gdGhlIHVzZXJcbiAgICAgICAgY2FsbGJhY2tzUmVmLmN1cnJlbnQuY2hhbmdlTGlzdFNpemVDYWxsYmFjayAmJiBcbiAgICAgICAgICAgIGNhbGxiYWNrc1JlZi5jdXJyZW50LmNoYW5nZUxpc3RTaXplQ2FsbGJhY2sobGlzdHNpemUpXG5cbiAgICAgICAgc2V0U2Nyb2xsZXJTdGF0ZSgnc2V0bGlzdHByb3BzJylcblxuICAgIH0sW10pXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1bIFN0YXRlIGhhbmRsaW5nIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGNvbnN0IGl0ZW1TZXRSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG5cbiAgICAgICAgc3dpdGNoIChzY3JvbGxlclN0YXRlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3NldHVwJzpcbiAgICAgICAgICAgICAgICAvLyByZXBsYWNlIGNhY2hlQVBJIHdpdGggZmFjYWRlIHdoaWNoIGluY2x1ZGVzIGhpZGRlbiBzY3JvbGxlcklEXG4gICAgICAgICAgICAgICAgY2FjaGVBUElSZWYuY3VycmVudCA9IGNhY2hlQVBJUmVmLmN1cnJlbnQucmVnaXN0ZXJTY3JvbGxlcihzY3JvbGxlclNlc3Npb25JRFJlZi5jdXJyZW50KVxuICAgICAgICAgICAgICAgIGl0ZW1TZXRSZWYuY3VycmVudCA9IGNhY2hlQVBJUmVmLmN1cnJlbnQuaXRlbVNldCAvLyBmb3IgdW5tb3VudCB1blJlZ2lzdGVyU2Nyb2xsZXJcblxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVGdW5jdGlvblJlZi5jdXJyZW50KSB7IC8vIG9idGFpbmVkIGZyb20gUG9ydGFsQ2FjaGVcblxuICAgICAgICAgICAgICAgICAgICBjYWNoZUFQSVJlZi5jdXJyZW50LnBhcnRpdGlvblJlcG9Gb3JjZVVwZGF0ZSA9IHVwZGF0ZUZ1bmN0aW9uUmVmLmN1cnJlbnRcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSAnc2V0bGlzdHByb3BzJzpcbiAgICAgICAgICAgICAgICBzZXRTY3JvbGxlclN0YXRlKCdyZWFkeScpXG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG5cbiAgICAgICAgICAgIGlmICghaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcblxuICAgICAgICAgICAgICAgIGNhY2hlQVBJUmVmLmN1cnJlbnQudW5SZWdpc3RlclNjcm9sbGVyKGl0ZW1TZXRSZWYuY3VycmVudClcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH0sW3Njcm9sbGVyU3RhdGVdKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1bIFJlbmRlciBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBpZiAocHJvYmxlbXMgfHwgaXNNaW5pbWFsUHJvcHNGYWlsKSB7XG4gICAgICAgIHJldHVybiA8ZGl2PmVycm9yOiBzZWUgY29uc29sZS48L2Rpdj4gICAgICAgIFxuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudCBjYWxscyBhcmUgZGVmZXJyZWQgYnkgc2Nyb2xsZXJTdGF0ZSB0byBnaXZlIGNhY2hlQVBJIGEgY2hhbmNlIHRvIGluaXRpYWxpemVcbiAgICByZXR1cm4gPEVycm9yQm91bmRhcnlcbiAgICAgICAgRmFsbGJhY2tDb21wb25lbnQ9IHsgRXJyb3JGYWxsYmFjayB9XG4gICAgICAgIC8vIGVsYWJvcmF0aW9uIFRCRFxuICAgICAgICBvblJlc2V0ID0geyAoKSA9PiB7fSB9XG4gICAgICAgIG9uRXJyb3IgPSB7ICgpID0+IHt9IH1cbiAgICAgICAgLy8gb25FcnJvciA9IHsoZXJyb3I6IEVycm9yLCBpbmZvOiB7Y29tcG9uZW50U3RhY2s6IHN0cmluZ30pID0+IHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCdyZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyIGNhcHR1cmVkIGVycm9yJywgZXJyb3IpXG4gICAgICAgIC8vIH19XG4gICAgPlxuXG4gICAgICAgIHsoc2Nyb2xsZXJTdGF0ZSAhPSAnc2V0dXAnKSAmJiA8Vmlld3BvcnRcblxuICAgICAgICAgICAgZ3JpZFNwZWNzID0geyBncmlkU3BlY3NSZWYuY3VycmVudCB9XG4gICAgICAgICAgICBzdHlsZXMgPSB7IHN0eWxlc1JlZi5jdXJyZW50IH1cbiAgICAgICAgICAgIHNjcm9sbGVySUQgPSB7IHNjcm9sbGVySUQgfVxuICAgICAgICAgICAgVklFV1BPUlRfUkVTSVpFX1RJTUVPVVQgPSB7IFZJRVdQT1JUX1JFU0laRV9USU1FT1VUIH1cbiAgICAgICAgICAgIHVzZVNjcm9sbFRyYWNrZXIgPSB7IHVzZVNjcm9sbFRyYWNrZXIgfVxuXG4gICAgICAgID5cbiAgICAgICAgXG4gICAgICAgICAgICB7PFNjcm9sbGJsb2NrXG5cbiAgICAgICAgICAgICAgICBncmlkU3BlY3MgPSB7IGdyaWRTcGVjc1JlZi5jdXJyZW50IH1cbiAgICAgICAgICAgICAgICBzdHlsZXMgPSB7IHN0eWxlc1JlZi5jdXJyZW50IH1cbiAgICAgICAgICAgICAgICB2aXJ0dWFsTGlzdFNwZWNzID0ge3ZpcnR1YWxMaXN0U3BlY3NSZWYuY3VycmVudH1cbiAgICAgICAgICAgICAgICBzY3JvbGxlcklEID0geyBzY3JvbGxlcklEIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8Q3JhZGxlIFxuXG4gICAgICAgICAgICAgICAgICAgIGdyaWRTcGVjcyA9IHsgZ3JpZFNwZWNzUmVmLmN1cnJlbnQgfVxuICAgICAgICAgICAgICAgICAgICBzdHlsZXMgPSB7IHN0eWxlc1JlZi5jdXJyZW50IH1cbiAgICAgICAgICAgICAgICAgICAgdmlydHVhbExpc3RTcGVjcyA9IHt2aXJ0dWFsTGlzdFNwZWNzUmVmLmN1cnJlbnR9XG4gICAgICAgICAgICAgICAgICAgIHNldFZpcnR1YWxMaXN0U2l6ZSA9IHsgc2V0VmlydHVhbExpc3RTaXplIH1cbiAgICAgICAgICAgICAgICAgICAgc2V0VmlydHVhbExpc3RSYW5nZSA9IHsgc2V0VmlydHVhbExpc3RSYW5nZSB9XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlID0geyBjYWNoZSB9XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlTWF4ID0geyBjYWNoZU1heCB9XG4gICAgICAgICAgICAgICAgICAgIHVzZXJDYWxsYmFja3MgPSB7IGNhbGxiYWNrc1JlZi5jdXJyZW50IH1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRpbmdJbmRleCA9IHsgc3RhcnRpbmdJbmRleCB9XG4gICAgICAgICAgICAgICAgICAgIGdldEl0ZW0gPSB7IGdldEl0ZW0gfVxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlciA9IHsgcGxhY2Vob2xkZXIgfVxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlck1lc3NhZ2VzID0geyBwbGFjZWhvbGRlck1lc3NhZ2VzUmVmLmN1cnJlbnQgfVxuICAgICAgICAgICAgICAgICAgICBydW53YXlTaXplID0geyBydW53YXlTaXplIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcmxpbmVPZmZzZXQgPSB7IHRyaWdnZXJsaW5lT2Zmc2V0IH1cbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsZXJQcm9wZXJ0aWVzID0geyBzY3JvbGxlclByb3BlcnRpZXMgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlQVBJID0geyBjYWNoZUFQSVJlZi5jdXJyZW50IH1cbiAgICAgICAgICAgICAgICAgICAgdXNlUGxhY2Vob2xkZXIgPSB7IHVzZVBsYWNlaG9sZGVyIH1cbiAgICAgICAgICAgICAgICAgICAgdXNlU2Nyb2xsVHJhY2tlciA9IHsgdXNlU2Nyb2xsVHJhY2tlciB9XG4gICAgICAgICAgICAgICAgICAgIHNob3dBeGlzID0geyBzaG93QXhpcyB9XG4gICAgICAgICAgICAgICAgICAgIE9OQUZURVJTQ1JPTExfVElNRU9VVCA9IHsgT05BRlRFUlNDUk9MTF9USU1FT1VUIH1cbiAgICAgICAgICAgICAgICAgICAgSURMRUNBTExCQUNLX1RJTUVPVVQgPSB7IElETEVDQUxMQkFDS19USU1FT1VUIH1cbiAgICAgICAgICAgICAgICAgICAgTUFYX0NBQ0hFX09WRVJfUlVOID0geyBNQVhfQ0FDSEVfT1ZFUl9SVU4gfVxuICAgICAgICAgICAgICAgICAgICBWQVJJQUJMRV9NRUFTVVJFTUVOVFNfVElNRU9VVCA9IHsgVkFSSUFCTEVfTUVBU1VSRU1FTlRTX1RJTUVPVVQgfVxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxlcklEID0geyBzY3JvbGxlcklEIH1cblxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L1Njcm9sbGJsb2NrPn1cbiAgICAgICAgPC9WaWV3cG9ydD59XG4gICAgICAgIDxkaXY+XG4gICAgICAgIHt1c2VMb2NhbENhY2hlICYmIDxkaXYgZGF0YS10eXBlID0gJ2NhY2hlcm9vdCcgc3R5bGUgPSB7IGNhY2hlcm9vdHN0eWxlIH0+XG4gICAgICAgICAgICA8UG9ydGFsQ2FjaGUgXG5cbiAgICAgICAgICAgICAgICBnZXRDYWNoZUFQSSA9IHsgZ2V0Q2FjaGVBUEkgfSBcbiAgICAgICAgICAgICAgICBnZXRVcGRhdGVGdW5jdGlvbiA9IHsgZ2V0VXBkYXRlRnVuY3Rpb24gfVxuICAgICAgICAgICAgICAgIENBQ0hFX1BBUlRJVElPTl9TSVpFID0geyBDQUNIRV9QQVJUSVRJT05fU0laRSB9IC8+XG5cbiAgICAgICAgPC9kaXY+fVxuICAgICAgICA8L2Rpdj5cbiAgICA8L0Vycm9yQm91bmRhcnk+XG59XG5cbmV4cG9ydCBkZWZhdWx0IEluZmluaXRlR3JpZFNjcm9sbGVyXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIFN1cHBvcnQgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjYWNoZXJvb3RzdHlsZSA9IHtkaXNwbGF5Oidub25lJ30vLyBhcyBSZWFjdC5DU1NQcm9wZXJ0aWVzIC8vIHN0YXRpYywgb3V0IG9mIHZpZXcgXG5cbi8vIHV0aWxpdHlcbmZ1bmN0aW9uIGNvbXBhcmVQcm9wcyAob2JqMSxvYmoyKSB7XG4gICAgaWYgKCFvYmoxIHx8ICFvYmoyKSByZXR1cm4gZmFsc2VcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqMSlcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIGlmICghT2JqZWN0LmlzKG9iajFba2V5XSxvYmoyW2tleV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxufVxuIl0sIm5hbWVzIjpbIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiaSIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJUeXBlRXJyb3IiLCJvIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJBcnJheSIsImZyb20iLCJ0ZXN0IiwibGVuIiwibGVuZ3RoIiwiYXJyMiIsIl9pIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX3giLCJfciIsIl9hcnIiLCJfbiIsIl9kIiwibmV4dCIsImRvbmUiLCJwdXNoIiwidmFsdWUiLCJlcnIiLCJpc0FycmF5IiwicmVhY3RfMSIsIl9faW1wb3J0U3RhciIsInJlcXVpcmUiLCJyZWFjdF9lcnJvcl9ib3VuZGFyeV8xIiwiaXNTYWZhcmlJT1MiLCJpc19pb3MiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc19zYWZhcmkiLCJtYXRjaCIsImV4cG9ydHMiLCJFcnJvckZhbGxiYWNrIiwiX3JlZiIsImVycm9yIiwicmVzZXRFcnJvckJvdW5kYXJ5IiwiY3JlYXRlRWxlbWVudCIsInJvbGUiLCJzdHlsZSIsIm1hcmdpbiIsImJvcmRlciIsInBhZGRpbmciLCJvbkNsaWNrIiwiVmlld3BvcnRfMSIsIl9faW1wb3J0RGVmYXVsdCIsIlNjcm9sbGJsb2NrXzEiLCJDcmFkbGVfMSIsIlBvcnRhbENhY2hlXzEiLCJnbG9iYWxTY3JvbGxlcklEIiwiSW5maW5pdGVHcmlkU2Nyb2xsZXIiLCJwcm9wcyIsIl9yZWYyIiwidXNlU3RhdGUiLCJfcmVmMyIsInNjcm9sbGVyU3RhdGUiLCJzZXRTY3JvbGxlclN0YXRlIiwiY2VsbEhlaWdodCIsImNlbGxXaWR0aCIsIl9wcm9wcyRzdGFydGluZ0xpc3RTaSIsInN0YXJ0aW5nTGlzdFNpemUiLCJfcHJvcHMkc3RhcnRpbmdMaXN0UmEiLCJzdGFydGluZ0xpc3RSYW5nZSIsImdldEl0ZW0iLCJfcHJvcHMkb3JpZW50YXRpb24iLCJvcmllbnRhdGlvbiIsIl9wcm9wcyRnYXAiLCJnYXAiLCJfcHJvcHMkcGFkZGluZyIsIl9wcm9wcyRsYXlvdXQiLCJsYXlvdXQiLCJfcHJvcHMkY2VsbE1pbkhlaWdodCIsImNlbGxNaW5IZWlnaHQiLCJfcHJvcHMkY2VsbE1pbldpZHRoIiwiY2VsbE1pbldpZHRoIiwiX3Byb3BzJHJ1bndheVNpemUiLCJydW53YXlTaXplIiwiX3Byb3BzJHN0YXJ0aW5nSW5kZXgiLCJzdGFydGluZ0luZGV4IiwiX3Byb3BzJGNhY2hlIiwiY2FjaGUiLCJfcHJvcHMkY2FjaGVNYXgiLCJjYWNoZU1heCIsInBsYWNlaG9sZGVyIiwiX3Byb3BzJHVzZVBsYWNlaG9sZGVyIiwidXNlUGxhY2Vob2xkZXIiLCJfcHJvcHMkdXNlU2Nyb2xsVHJhY2siLCJ1c2VTY3JvbGxUcmFja2VyIiwiX3Byb3BzJHN0eWxlcyIsInN0eWxlcyIsIl9wcm9wcyRwbGFjZWhvbGRlck1lcyIsInBsYWNlaG9sZGVyTWVzc2FnZXMiLCJfcHJvcHMkY2FsbGJhY2tzIiwiY2FsbGJhY2tzIiwiX3Byb3BzJHRlY2huaWNhbCIsInRlY2huaWNhbCIsIl9wcm9wcyRjYWNoZUFQSSIsImNhY2hlQVBJIiwiZHJhZ2Ryb3BQcm9wZXJ0aWVzIiwic2Nyb2xsZXJQcm9wZXJ0aWVzIiwiaXNNaW5pbWFsUHJvcHNGYWlsIiwiY29uc29sZSIsImxvZyIsIm9yaWdpbmFsVmFsdWVzIiwidmVyaWZpZWRWYWx1ZXMiLCJNYXRoIiwibWF4IiwibWluIiwicHJvYmxlbXMiLCJwcm9wIiwiaXNOYU4iLCJnb29kcmFuZ2UiLCJfc3RhcnRpbmdMaXN0UmFuZ2UiLCJfc3RhcnRpbmdMaXN0UmFuZ2UyIiwibG93aW5kZXgiLCJoaWdoaW5kZXgiLCJpbmNsdWRlcyIsImdyaWRTcGVjcyIsImdyaWRTcGVjc1JlZiIsInVzZVJlZiIsInN0eWxlc1JlZiIsImNhbGxiYWNrc1JlZiIsInBsYWNlaG9sZGVyTWVzc2FnZXNSZWYiLCJfdGVjaG5pY2FsIiwic2hvd0F4aXMiLCJ0cmlnZ2VybGluZU9mZnNldCIsIlZJRVdQT1JUX1JFU0laRV9USU1FT1VUIiwiT05BRlRFUlNDUk9MTF9USU1FT1VUIiwiSURMRUNBTExCQUNLX1RJTUVPVVQiLCJWQVJJQUJMRV9NRUFTVVJFTUVOVFNfVElNRU9VVCIsIk1BWF9DQUNIRV9PVkVSX1JVTiIsIkNBQ0hFX1BBUlRJVElPTl9TSVpFIiwic2Nyb2xsZXJTZXNzaW9uSURSZWYiLCJzY3JvbGxlcklEIiwiY3VycmVudCIsImNhY2hlQVBJUmVmIiwidXBkYXRlRnVuY3Rpb25SZWYiLCJsaXN0c2l6ZVJlZiIsImxpc3RSYW5nZVJlZiIsImxpc3RzaXplIiwibGlzdHJhbmdlIiwiX2xpc3RyYW5nZSIsImxvd2xpc3RyYW5nZSIsImhpZ2hsaXN0cmFuZ2UiLCJ2aXJ0dWFsTGlzdFNwZWNzIiwic2l6ZSIsInJhbmdlIiwidmlydHVhbExpc3RTcGVjc1JlZiIsImNvbXBhcmVQcm9wcyIsImdldENhY2hlQVBJIiwiZ2V0VXBkYXRlRnVuY3Rpb24iLCJmbiIsInVzZUxvY2FsQ2FjaGUiLCJpc01vdW50ZWRSZWYiLCJ1c2VFZmZlY3QiLCJzZXRWaXJ0dWFsTGlzdFJhbmdlIiwidXNlQ2FsbGJhY2siLCJfbGlzdHJhbmdlMiIsImxvd3JhbmdlIiwiaGlnaHJhbmdlIiwiY2hhbmdlTGlzdFJhbmdlQ2FsbGJhY2siLCJzZXRWaXJ0dWFsTGlzdFNpemUiLCJfbGlzdFJhbmdlUmVmJGN1cnJlbnQiLCJjaGFuZ2VMaXN0U2l6ZUNhbGxiYWNrIiwiaXRlbVNldFJlZiIsInJlZ2lzdGVyU2Nyb2xsZXIiLCJpdGVtU2V0IiwicGFydGl0aW9uUmVwb0ZvcmNlVXBkYXRlIiwidW5SZWdpc3RlclNjcm9sbGVyIiwiRXJyb3JCb3VuZGFyeSIsIkZhbGxiYWNrQ29tcG9uZW50Iiwib25SZXNldCIsIm9uRXJyb3IiLCJ1c2VyQ2FsbGJhY2tzIiwiY2FjaGVyb290c3R5bGUiLCJkaXNwbGF5Iiwib2JqMSIsIm9iajIiLCJrZXlzIiwiX2kyIiwiX2tleXMiLCJrZXkiLCJpcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/InfiniteGridScroller.tsx\n')},"./src/PortalCache.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// PortalCache.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    The role of PortalCache is to hold the React portals in a cache.\n    The portals are actually held in an extendible series of CachePartition components, as controlled by cacheAPI.\n    Portals only exist in the React virtual DOM.\n    The cache can be shared among InfiniteGridScroller components.\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nvar cacheAPI_1 = __importDefault(__webpack_require__(/*! ./portalcache/cacheAPI */ "./src/portalcache/cacheAPI.tsx"));\nvar PortalCache = function PortalCache(_ref) {\n  var CACHE_PARTITION_SIZE = _ref.CACHE_PARTITION_SIZE,\n    getCacheAPI = _ref.getCacheAPI,\n    getUpdateFunction = _ref.getUpdateFunction;\n  var cacheAPIRef = (0, react_1.useRef)(null);\n  var partitionArrayRef = (0, react_1.useRef)(null);\n  var partitionRepoForceUpdate = (0, react_1.useCallback)(function (partitionRenderList) {\n    partitionArrayRef.current = partitionRenderList;\n    isMountedRef.current && setPortalCacheCounter(++counterRef.current); // force render\n  }, []);\n  (0, react_1.useEffect)(function () {\n    if (cacheAPIRef.current) return;\n    var cacheAPI = new cacheAPI_1["default"](CACHE_PARTITION_SIZE);\n    cacheAPIRef.current = cacheAPI;\n    getCacheAPI(cacheAPI);\n    getUpdateFunction(partitionRepoForceUpdate);\n  }, []);\n  var _ref2 = (0, react_1.useState)(0),\n    _ref3 = _slicedToArray(_ref2, 2),\n    portalCacheCounter = _ref3[0],\n    setPortalCacheCounter = _ref3[1];\n  var counterRef = (0, react_1.useRef)(portalCacheCounter);\n  var _ref4 = (0, react_1.useState)(\'setup\'),\n    _ref5 = _slicedToArray(_ref4, 2),\n    masterState = _ref5[0],\n    setMasterState = _ref5[1];\n  var isMountedRef = (0, react_1.useRef)(true);\n  (0, react_1.useEffect)(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  (0, react_1.useEffect)(function () {\n    switch (masterState) {\n      case \'setup\':\n        {\n          setMasterState(\'ready\');\n        }\n    }\n  }, [masterState]);\n  return react_1["default"].createElement("div", {\n    "data-type": \'portal-master\'\n  }, partitionArrayRef.current);\n};\nexports["default"] = PortalCache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/PortalCache.tsx\n')},"./src/Scrollblock.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// Scrollblock.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n\n    The scrollblock provides the scrollable element (scrolled by Viewport) of the infinite grid scroller.\n    It is sized according to the given cell size and row counts, adjusted for variable cradle content.\n    Its only state change is change of styles.\n\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nvar Viewport_1 = __webpack_require__(/*! ./Viewport */ "./src/Viewport.tsx");\nvar Scrollblock = function Scrollblock(_ref) {\n  var children = _ref.children,\n    virtualListSpecs = _ref.virtualListSpecs,\n    gridSpecs = _ref.gridSpecs,\n    styles = _ref.styles,\n    scrollerID = _ref.scrollerID;\n  var orientation = gridSpecs.orientation,\n    gap = gridSpecs.gap,\n    padding = gridSpecs.padding,\n    cellHeight = gridSpecs.cellHeight,\n    cellWidth = gridSpecs.cellWidth;\n  var listsize = virtualListSpecs.size;\n  // -------------------------[ context and state ]-------------------------\n  var ViewportContextProperties = (0, react_1.useContext)(Viewport_1.ViewportContext);\n  var _ref2 = (0, react_1.useState)(\'setup\'),\n    _ref3 = _slicedToArray(_ref2, 2),\n    blockState = _ref3[0],\n    setBlockState = _ref3[1]; // to trigger render\n  // -----------------------------------[ data heap ]-------------------------\n  var baseScrollBlockLengthRef = (0, react_1.useRef)(null);\n  // just for init\n  var linerStyle = (0, react_1.useMemo)(function () {\n    return Object.assign(Object.assign({}, styles.scrollblock), {\n      position: \'relative\'\n    });\n  }, []);\n  var divlinerstyleRef = (0, react_1.useRef)(linerStyle);\n  var getViewportDimensions = function getViewportDimensions() {\n    var viewportElement = ViewportContextProperties.elementRef.current;\n    return {\n      width: viewportElement.offsetWidth,\n      height: viewportElement.offsetHeight\n    };\n  };\n  var _getViewportDimension = getViewportDimensions(),\n    height = _getViewportDimension.height,\n    width = _getViewportDimension.width; // viewportDimensions\n  // const { width, height } = ViewportContextProperties.viewportDimensions\n  // reconfigure\n  (0, react_1.useLayoutEffect)(function () {\n    updateBaseBlockLength({\n      orientation: orientation,\n      viewportheight: height,\n      viewportwidth: width,\n      listsize: listsize,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding\n    });\n    divlinerstyleRef.current = updateScrollblockStyles(orientation, divlinerstyleRef, baseScrollBlockLengthRef, cellWidth, cellHeight, padding);\n    setBlockState(\'update\');\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]);\n  var updateBaseBlockLength = (0, react_1.useCallback)(function (layoutspecs) {\n    var basescrollblocklength = calcBaseScrollblockLength(layoutspecs);\n    baseScrollBlockLengthRef.current = basescrollblocklength;\n  }, []);\n  (0, react_1.useLayoutEffect)(function () {\n    switch (blockState) {\n      case \'setup\':\n      case \'update\':\n        {\n          setBlockState(\'ready\');\n        }\n    }\n  }, [blockState]);\n  return react_1["default"].createElement("div", {\n    "data-type": \'scrollblock\',\n    style: divlinerstyleRef.current\n  }, children);\n}; // Scrollblock\nexports["default"] = Scrollblock;\n// any of the parameters can affect the length\nvar calcBaseScrollblockLength = function calcBaseScrollblockLength(_ref4) {\n  var orientation = _ref4.orientation,\n    viewportheight = _ref4.viewportheight,\n    viewportwidth = _ref4.viewportwidth,\n    listsize = _ref4.listsize,\n    cellHeight = _ref4.cellHeight,\n    cellWidth = _ref4.cellWidth,\n    gap = _ref4.gap,\n    padding = _ref4.padding;\n  // ---------------[ calculate crosscount ]------------------\n  //crosscount is also calculated by Cradle\n  var crosslength;\n  var cellLength;\n  var viewportcrosslength;\n  if (orientation == \'vertical\') {\n    crosslength = cellWidth + gap;\n    cellLength = cellHeight + gap;\n    viewportcrosslength = viewportwidth;\n  } else {\n    // \'horizontal\'\n    crosslength = cellHeight + gap;\n    cellLength = cellWidth + gap;\n    viewportcrosslength = viewportheight;\n  }\n  // adjustments to viewportcrosslength\n  viewportcrosslength -= padding * 2;\n  viewportcrosslength += gap; // to match crossLength\n  if (viewportcrosslength < crosslength) viewportcrosslength = crosslength; // must be at least one\n  var crosscount = Math.floor(viewportcrosslength / crosslength);\n  // -------------------[ calculate scrollblock length ]-----------------\n  var listrowcount = Math.ceil(listsize / crosscount);\n  var baselength = listrowcount * cellLength - (listrowcount > 0 ? gap :\n  // final cell has no trailing gap\n  0) + padding * 2; // leading and trailing padding\n  return baselength;\n};\nvar updateScrollblockStyles = function updateScrollblockStyles(orientation, stylesRef, baseScrollblocklengthRef, cellWidth, cellHeight, padding) {\n  var localstyles = Object.assign({}, stylesRef.current); // new object\n  var height, width, minHeight, minWidth;\n  if (orientation == \'vertical\') {\n    height = baseScrollblocklengthRef.current + \'px\';\n    width = \'100%\';\n    minWidth = cellWidth + padding * 2 + \'px\';\n    minHeight = null;\n  } else {\n    // orientation == \'horizontal\'\n    height = \'100%\';\n    width = baseScrollblocklengthRef.current + \'px\';\n    minHeight = cellHeight + padding * 2 + \'px\';\n    minWidth = null;\n  }\n  localstyles.height = height;\n  localstyles.width = width;\n  localstyles.minHeight = minHeight;\n  localstyles.minWidth = minWidth;\n  return localstyles;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0lBQ2QrQixRQUFRLEdBQUl0RCxTQUFTLEdBQUlGLE9BQU8sR0FBRyxDQUFFLEdBQUksSUFBSTtJQUM3Q3VELFNBQVMsR0FBRyxJQUFJO0dBQ25CLE1BQU07SUFBRTtJQUNMNUIsTUFBTSxHQUFHLE1BQU07SUFDZkYsS0FBSyxHQUFHNEIsd0JBQXdCLENBQUM3QixPQUFPLEdBQUcsSUFBSTtJQUMvQytCLFNBQVMsR0FBSXRELFVBQVUsR0FBSUQsT0FBTyxHQUFHLENBQUUsR0FBSSxJQUFJO0lBQy9Dd0QsUUFBUSxHQUFHLElBQUk7O0VBRW5CRixXQUFXLENBQUMzQixNQUFNLEdBQUdBLE1BQU07RUFDM0IyQixXQUFXLENBQUM3QixLQUFLLEdBQUdBLEtBQUs7RUFDekI2QixXQUFXLENBQUNDLFNBQVMsR0FBR0EsU0FBUztFQUNqQ0QsV0FBVyxDQUFDRSxRQUFRLEdBQUdBLFFBQVE7RUFFL0IsT0FBT0YsV0FBVztBQUV0QixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9TY3JvbGxibG9jay50c3g/M2I2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTY3JvbGxibG9jay50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAxOS0yMDIzIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbi8qXG5cbiAgICBUaGUgc2Nyb2xsYmxvY2sgcHJvdmlkZXMgdGhlIHNjcm9sbGFibGUgZWxlbWVudCAoc2Nyb2xsZWQgYnkgVmlld3BvcnQpIG9mIHRoZSBpbmZpbml0ZSBncmlkIHNjcm9sbGVyLlxuICAgIEl0IGlzIHNpemVkIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gY2VsbCBzaXplIGFuZCByb3cgY291bnRzLCBhZGp1c3RlZCBmb3IgdmFyaWFibGUgY3JhZGxlIGNvbnRlbnQuXG4gICAgSXRzIG9ubHkgc3RhdGUgY2hhbmdlIGlzIGNoYW5nZSBvZiBzdHlsZXMuXG5cbiovXG5cbmltcG9ydCBSZWFjdCwge3VzZUNvbnRleHQsIHVzZVJlZiwgdXNlQ2FsbGJhY2ssIHVzZUxheW91dEVmZmVjdCwgdXNlU3RhdGUsIHVzZU1lbW99IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBWaWV3cG9ydENvbnRleHQgfSBmcm9tICcuL1ZpZXdwb3J0J1xuXG5jb25zdCBTY3JvbGxibG9jayA9ICh7XG4gICAgY2hpbGRyZW4sXG4gICAgdmlydHVhbExpc3RTcGVjcyxcbiAgICBncmlkU3BlY3MsIFxuICAgIHN0eWxlcyxcbiAgICBzY3JvbGxlcklELFxufSkgPT4ge1xuXG4gICAgY29uc3Qge1xuXG4gICAgICAgIG9yaWVudGF0aW9uLFxuICAgICAgICBnYXAsXG4gICAgICAgIHBhZGRpbmcsXG4gICAgICAgIGNlbGxIZWlnaHQsXG4gICAgICAgIGNlbGxXaWR0aCxcbiAgICAgICAgXG4gICAgfSA9IGdyaWRTcGVjc1xuXG4gICAgY29uc3QgeyBzaXplOmxpc3RzaXplIH0gPSB2aXJ0dWFsTGlzdFNwZWNzXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBjb250ZXh0IGFuZCBzdGF0ZSBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgY29uc3QgVmlld3BvcnRDb250ZXh0UHJvcGVydGllcyA9IHVzZUNvbnRleHQoVmlld3BvcnRDb250ZXh0KVxuXG4gICAgY29uc3QgW2Jsb2NrU3RhdGUsc2V0QmxvY2tTdGF0ZV0gPSB1c2VTdGF0ZSgnc2V0dXAnKSAvLyB0byB0cmlnZ2VyIHJlbmRlclxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIGRhdGEgaGVhcCBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgY29uc3QgYmFzZVNjcm9sbEJsb2NrTGVuZ3RoUmVmID0gdXNlUmVmKG51bGwpXG5cbiAgICAvLyBqdXN0IGZvciBpbml0XG4gICAgY29uc3QgbGluZXJTdHlsZSA9IHVzZU1lbW8oKCkgPT57XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN0eWxlcy5zY3JvbGxibG9jayxcbiAgICAgICAgICAgIHBvc2l0aW9uOidyZWxhdGl2ZScsXG4gICAgICAgIH1cblxuICAgIH0sIFtdKVxuXG4gICAgY29uc3QgZGl2bGluZXJzdHlsZVJlZiA9IHVzZVJlZihsaW5lclN0eWxlKVxuXG4gICAgY29uc3QgZ2V0Vmlld3BvcnREaW1lbnNpb25zID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB2aWV3cG9ydEVsZW1lbnQgPSBWaWV3cG9ydENvbnRleHRQcm9wZXJ0aWVzLmVsZW1lbnRSZWYuY3VycmVudFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2lkdGg6dmlld3BvcnRFbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OnZpZXdwb3J0RWxlbWVudC5vZmZzZXRIZWlnaHRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHsgaGVpZ2h0LHdpZHRoIH0gPSBnZXRWaWV3cG9ydERpbWVuc2lvbnMoKSAvLyB2aWV3cG9ydERpbWVuc2lvbnNcblxuICAgIC8vIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gVmlld3BvcnRDb250ZXh0UHJvcGVydGllcy52aWV3cG9ydERpbWVuc2lvbnNcbiAgICBcbiAgICAvLyByZWNvbmZpZ3VyZVxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG5cbiAgICAgICAgdXBkYXRlQmFzZUJsb2NrTGVuZ3RoKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uLFxuICAgICAgICAgICAgICAgIHZpZXdwb3J0aGVpZ2h0OmhlaWdodCxcbiAgICAgICAgICAgICAgICB2aWV3cG9ydHdpZHRoOndpZHRoLFxuICAgICAgICAgICAgICAgIGxpc3RzaXplLFxuICAgICAgICAgICAgICAgIGNlbGxIZWlnaHQsXG4gICAgICAgICAgICAgICAgY2VsbFdpZHRoLFxuICAgICAgICAgICAgICAgIGdhcCxcbiAgICAgICAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGRpdmxpbmVyc3R5bGVSZWYuY3VycmVudCA9IFxuICAgICAgICAgICAgdXBkYXRlU2Nyb2xsYmxvY2tTdHlsZXMoXG4gICAgICAgICAgICAgICAgb3JpZW50YXRpb24sXG4gICAgICAgICAgICAgICAgZGl2bGluZXJzdHlsZVJlZixcbiAgICAgICAgICAgICAgICBiYXNlU2Nyb2xsQmxvY2tMZW5ndGhSZWYsXG4gICAgICAgICAgICAgICAgY2VsbFdpZHRoLFxuICAgICAgICAgICAgICAgIGNlbGxIZWlnaHQsXG4gICAgICAgICAgICAgICAgcGFkZGluZ1xuICAgICAgICAgICAgKVxuICAgICAgICBzZXRCbG9ja1N0YXRlKCd1cGRhdGUnKVxuXG4gICAgfSxbXG4gICAgICAgIG9yaWVudGF0aW9uLFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIHdpZHRoLFxuICAgICAgICBsaXN0c2l6ZSxcbiAgICAgICAgY2VsbEhlaWdodCxcbiAgICAgICAgY2VsbFdpZHRoLFxuICAgICAgICBnYXAsXG4gICAgICAgIHBhZGRpbmcsXG4gICAgXSlcblxuICAgIGNvbnN0IHVwZGF0ZUJhc2VCbG9ja0xlbmd0aCA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAobGF5b3V0c3BlY3MpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgYmFzZXNjcm9sbGJsb2NrbGVuZ3RoID0gY2FsY0Jhc2VTY3JvbGxibG9ja0xlbmd0aChsYXlvdXRzcGVjcylcblxuICAgICAgICAgICAgYmFzZVNjcm9sbEJsb2NrTGVuZ3RoUmVmLmN1cnJlbnQgPSBiYXNlc2Nyb2xsYmxvY2tsZW5ndGhcblxuICAgICAgICB9LFtdXG4gICAgKVxuXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpPT57XG5cbiAgICAgICAgc3dpdGNoIChibG9ja1N0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdzZXR1cCc6XG4gICAgICAgICAgICBjYXNlICd1cGRhdGUnOiB7XG4gICAgICAgICAgICAgICAgc2V0QmxvY2tTdGF0ZSgncmVhZHknKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFtibG9ja1N0YXRlXSlcblxuICAgIHJldHVybiA8ZGl2IGRhdGEtdHlwZSA9ICdzY3JvbGxibG9jaycgc3R5bGU9e2RpdmxpbmVyc3R5bGVSZWYuY3VycmVudH0+e2NoaWxkcmVufTwvZGl2PlxuXG59IC8vIFNjcm9sbGJsb2NrXG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbGJsb2NrXG5cbi8vIGFueSBvZiB0aGUgcGFyYW1ldGVycyBjYW4gYWZmZWN0IHRoZSBsZW5ndGhcbmNvbnN0IGNhbGNCYXNlU2Nyb2xsYmxvY2tMZW5ndGggPSAoe1xuICAgICAgICBvcmllbnRhdGlvbixcbiAgICAgICAgdmlld3BvcnRoZWlnaHQsXG4gICAgICAgIHZpZXdwb3J0d2lkdGgsXG4gICAgICAgIGxpc3RzaXplLFxuICAgICAgICBjZWxsSGVpZ2h0LFxuICAgICAgICBjZWxsV2lkdGgsXG4gICAgICAgIGdhcCxcbiAgICAgICAgcGFkZGluZyxcbiAgICB9KSA9PiB7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS1bIGNhbGN1bGF0ZSBjcm9zc2NvdW50IF0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL2Nyb3NzY291bnQgaXMgYWxzbyBjYWxjdWxhdGVkIGJ5IENyYWRsZVxuXG4gICAgbGV0IGNyb3NzbGVuZ3RoXG4gICAgbGV0IGNlbGxMZW5ndGhcbiAgICBsZXQgdmlld3BvcnRjcm9zc2xlbmd0aFxuICAgIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG5cbiAgICAgICAgY3Jvc3NsZW5ndGggPSBjZWxsV2lkdGggKyBnYXBcbiAgICAgICAgY2VsbExlbmd0aCA9IGNlbGxIZWlnaHQgKyBnYXBcbiAgICAgICAgdmlld3BvcnRjcm9zc2xlbmd0aCA9IHZpZXdwb3J0d2lkdGggXG5cbiAgICB9IGVsc2UgeyAvLyAnaG9yaXpvbnRhbCdcblxuICAgICAgICBjcm9zc2xlbmd0aCA9IGNlbGxIZWlnaHQgKyBnYXBcbiAgICAgICAgY2VsbExlbmd0aCA9IGNlbGxXaWR0aCArIGdhcFxuICAgICAgICB2aWV3cG9ydGNyb3NzbGVuZ3RoID0gdmlld3BvcnRoZWlnaHRcblxuICAgIH1cblxuICAgIC8vIGFkanVzdG1lbnRzIHRvIHZpZXdwb3J0Y3Jvc3NsZW5ndGhcbiAgICB2aWV3cG9ydGNyb3NzbGVuZ3RoIC09IChwYWRkaW5nICogMilcbiAgICB2aWV3cG9ydGNyb3NzbGVuZ3RoICs9IGdhcCAvLyB0byBtYXRjaCBjcm9zc0xlbmd0aFxuXG4gICAgaWYgKHZpZXdwb3J0Y3Jvc3NsZW5ndGggPCBjcm9zc2xlbmd0aCkgdmlld3BvcnRjcm9zc2xlbmd0aCA9IGNyb3NzbGVuZ3RoIC8vIG11c3QgYmUgYXQgbGVhc3Qgb25lXG5cbiAgICBjb25zdCBjcm9zc2NvdW50ID0gTWF0aC5mbG9vcih2aWV3cG9ydGNyb3NzbGVuZ3RoL2Nyb3NzbGVuZ3RoKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVsgY2FsY3VsYXRlIHNjcm9sbGJsb2NrIGxlbmd0aCBdLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGNvbnN0IGxpc3Ryb3djb3VudCA9IE1hdGguY2VpbChsaXN0c2l6ZS9jcm9zc2NvdW50KVxuXG4gICAgY29uc3QgYmFzZWxlbmd0aCA9IChsaXN0cm93Y291bnQgKiBjZWxsTGVuZ3RoKSAtIFxuICAgICAgICAoKGxpc3Ryb3djb3VudCA+IDApP1xuICAgICAgICAgICAgZ2FwOiAvLyBmaW5hbCBjZWxsIGhhcyBubyB0cmFpbGluZyBnYXBcbiAgICAgICAgICAgIDApIFxuICAgICAgICArIChwYWRkaW5nICogMikgLy8gbGVhZGluZyBhbmQgdHJhaWxpbmcgcGFkZGluZ1xuXG4gICAgcmV0dXJuIGJhc2VsZW5ndGhcblxufVxuXG5jb25zdCB1cGRhdGVTY3JvbGxibG9ja1N0eWxlcyA9IChcbiAgICBvcmllbnRhdGlvbiwgc3R5bGVzUmVmLCBiYXNlU2Nyb2xsYmxvY2tsZW5ndGhSZWYsIGNlbGxXaWR0aCwgY2VsbEhlaWdodCwgcGFkZGluZykgPT4ge1xuXG4gICAgY29uc3QgbG9jYWxzdHlsZXMgPSB7Li4uc3R5bGVzUmVmLmN1cnJlbnR9IC8vIG5ldyBvYmplY3RcbiAgICBsZXQgaGVpZ2h0LCB3aWR0aCwgbWluSGVpZ2h0LCBtaW5XaWR0aFxuICAgIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG4gICAgICAgIGhlaWdodCA9IGJhc2VTY3JvbGxibG9ja2xlbmd0aFJlZi5jdXJyZW50ICsgJ3B4J1xuICAgICAgICB3aWR0aCA9ICcxMDAlJ1xuICAgICAgICBtaW5XaWR0aCA9IChjZWxsV2lkdGggKyAocGFkZGluZyAqIDIpKSArICdweCdcbiAgICAgICAgbWluSGVpZ2h0ID0gbnVsbFxuICAgIH0gZWxzZSB7IC8vIG9yaWVudGF0aW9uID09ICdob3Jpem9udGFsJ1xuICAgICAgICBoZWlnaHQgPSAnMTAwJSdcbiAgICAgICAgd2lkdGggPSBiYXNlU2Nyb2xsYmxvY2tsZW5ndGhSZWYuY3VycmVudCArICdweCdcbiAgICAgICAgbWluSGVpZ2h0ID0gKGNlbGxIZWlnaHQgKyAocGFkZGluZyAqIDIpKSArICdweCdcbiAgICAgICAgbWluV2lkdGggPSBudWxsXG4gICAgfVxuICAgIGxvY2Fsc3R5bGVzLmhlaWdodCA9IGhlaWdodFxuICAgIGxvY2Fsc3R5bGVzLndpZHRoID0gd2lkdGhcbiAgICBsb2NhbHN0eWxlcy5taW5IZWlnaHQgPSBtaW5IZWlnaHRcbiAgICBsb2NhbHN0eWxlcy5taW5XaWR0aCA9IG1pbldpZHRoXG5cbiAgICByZXR1cm4gbG9jYWxzdHlsZXNcblxufVxuIl0sIm5hbWVzIjpbIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiaSIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJUeXBlRXJyb3IiLCJvIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJBcnJheSIsImZyb20iLCJ0ZXN0IiwibGVuIiwibGVuZ3RoIiwiYXJyMiIsIl9pIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX3giLCJfciIsIl9hcnIiLCJfbiIsIl9kIiwibmV4dCIsImRvbmUiLCJwdXNoIiwidmFsdWUiLCJlcnIiLCJpc0FycmF5IiwicmVhY3RfMSIsIl9faW1wb3J0U3RhciIsInJlcXVpcmUiLCJWaWV3cG9ydF8xIiwiU2Nyb2xsYmxvY2siLCJfcmVmIiwiY2hpbGRyZW4iLCJ2aXJ0dWFsTGlzdFNwZWNzIiwiZ3JpZFNwZWNzIiwic3R5bGVzIiwic2Nyb2xsZXJJRCIsIm9yaWVudGF0aW9uIiwiZ2FwIiwicGFkZGluZyIsImNlbGxIZWlnaHQiLCJjZWxsV2lkdGgiLCJsaXN0c2l6ZSIsInNpemUiLCJWaWV3cG9ydENvbnRleHRQcm9wZXJ0aWVzIiwidXNlQ29udGV4dCIsIlZpZXdwb3J0Q29udGV4dCIsIl9yZWYyIiwidXNlU3RhdGUiLCJfcmVmMyIsImJsb2NrU3RhdGUiLCJzZXRCbG9ja1N0YXRlIiwiYmFzZVNjcm9sbEJsb2NrTGVuZ3RoUmVmIiwidXNlUmVmIiwibGluZXJTdHlsZSIsInVzZU1lbW8iLCJhc3NpZ24iLCJzY3JvbGxibG9jayIsInBvc2l0aW9uIiwiZGl2bGluZXJzdHlsZVJlZiIsImdldFZpZXdwb3J0RGltZW5zaW9ucyIsInZpZXdwb3J0RWxlbWVudCIsImVsZW1lbnRSZWYiLCJjdXJyZW50Iiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsImhlaWdodCIsIm9mZnNldEhlaWdodCIsIl9nZXRWaWV3cG9ydERpbWVuc2lvbiIsInVzZUxheW91dEVmZmVjdCIsInVwZGF0ZUJhc2VCbG9ja0xlbmd0aCIsInZpZXdwb3J0aGVpZ2h0Iiwidmlld3BvcnR3aWR0aCIsInVwZGF0ZVNjcm9sbGJsb2NrU3R5bGVzIiwidXNlQ2FsbGJhY2siLCJsYXlvdXRzcGVjcyIsImJhc2VzY3JvbGxibG9ja2xlbmd0aCIsImNhbGNCYXNlU2Nyb2xsYmxvY2tMZW5ndGgiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJleHBvcnRzIiwiX3JlZjQiLCJjcm9zc2xlbmd0aCIsImNlbGxMZW5ndGgiLCJ2aWV3cG9ydGNyb3NzbGVuZ3RoIiwiY3Jvc3Njb3VudCIsIk1hdGgiLCJmbG9vciIsImxpc3Ryb3djb3VudCIsImNlaWwiLCJiYXNlbGVuZ3RoIiwic3R5bGVzUmVmIiwiYmFzZVNjcm9sbGJsb2NrbGVuZ3RoUmVmIiwibG9jYWxzdHlsZXMiLCJtaW5IZWlnaHQiLCJtaW5XaWR0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Scrollblock.tsx\n')},"./src/Viewport.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// Viewport.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ViewportContext = void 0;\n/*\n    The role of viewport is to provide viewport data to its children (Scrollblock and Cradle) through the\n    ViewportContext object, and act as the visible screen portal of the list being shown.\n    If Viewport is resized, it notifies the Cradle to reconfigure.\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\n// popup position tracker for repositioning\nvar ScrollTracker_1 = __importDefault(__webpack_require__(/*! ./cradle/ScrollTracker */ "./src/cradle/ScrollTracker.tsx"));\nexports.ViewportContext = react_1["default"].createContext(null); // for children\nvar Viewport = function Viewport(_ref) {\n  var children = _ref.children,\n    gridSpecs = _ref.gridSpecs,\n    styles = _ref.styles,\n    scrollerID = _ref.scrollerID,\n    VIEWPORT_RESIZE_TIMEOUT = _ref.VIEWPORT_RESIZE_TIMEOUT,\n    useScrollTracker = _ref.useScrollTracker;\n  // -----------------------[ initialize ]------------------\n  var orientation = gridSpecs.orientation;\n  var _ref2 = (0, react_1.useState)(\'setup\'),\n    _ref3 = _slicedToArray(_ref2, 2),\n    viewportState = _ref3[0],\n    setViewportState = _ref3[1]; // setup, resizing, resized, ready\n  var viewportStateRef = (0, react_1.useRef)(null); // for useCallback -> resizeCallback scope\n  viewportStateRef.current = viewportState;\n  var isMountedRef = (0, react_1.useRef)(true);\n  var viewportElementRef = (0, react_1.useRef)(null);\n  var scrollTrackerAPIRef = (0, react_1.useRef)(null);\n  // ViewportContextPropertiesRef is passed as a resizing interrupt (through context) to children\n  var ViewportContextPropertiesRef = (0, react_1.useRef)({\n    isResizing: false,\n    // viewportDimensions:null,\n    elementRef: null,\n    scrollTrackerAPIRef: scrollTrackerAPIRef\n  });\n  // mark as unmounted\n  (0, react_1.useEffect)(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  // --------------------[ viewport resizer interrupt ]-----------------------\n  var resizeTimeridRef = (0, react_1.useRef)(null);\n  var isResizingRef = (0, react_1.useRef)(false);\n  var resizeObserverRef = (0, react_1.useRef)(null);\n  // set up resizeObserver\n  (0, react_1.useEffect)(function () {\n    // initialize\n    resizeObserverRef.current = new ResizeObserver(resizeCallback);\n    resizeObserverRef.current.observe(viewportElementRef.current);\n    // unmount\n    return function () {\n      resizeObserverRef.current.disconnect();\n    };\n  }, []);\n  // used by resizeObserver; generates interrupt\n  var resizeCallback = (0, react_1.useCallback)(function (entries) {\n    if (viewportStateRef.current == \'setup\') return;\n    var target = entries[0].target;\n    // no need to trigger interrupt on first resize notification\n    if (!target.dataset.initialized) {\n      target.dataset.initialized = \'true\';\n      return;\n    }\n    // generate interrupt response, if initiating resize\n    if (!isResizingRef.current) {\n      ViewportContextPropertiesRef.current.isResizing = isResizingRef.current = true;\n      // new object creation triggers a realtime interrupt message to cradle through context\n      ViewportContextPropertiesRef.current = Object.assign({}, ViewportContextPropertiesRef.current);\n      if (isMountedRef.current) setViewportState(\'resizing\');\n    }\n    // finalize resizing after timeout\n    clearTimeout(resizeTimeridRef.current);\n    resizeTimeridRef.current = setTimeout(function () {\n      isResizingRef.current = false;\n      if (isMountedRef.current) {\n        setViewportState(\'resized\');\n      }\n    }, VIEWPORT_RESIZE_TIMEOUT);\n  }, []);\n  // ----------------------------------[ calculate config values ]--------------------------------\n  // styles\n  var divlinerstyleRef = (0, react_1.useRef)(null);\n  // initialize with inherited styles\n  divlinerstyleRef.current = (0, react_1.useMemo)(function () {\n    return Object.assign(Object.assign({}, styles.viewport), {\n      position: \'absolute\',\n      inset: 0,\n      overflow: \'scroll\',\n      WebkitOverflowScrolling: \'touch\',\n      overflowAnchor: \'none\'\n    });\n  }, [styles.viewport]);\n  var divtrackerstyleRef = (0, react_1.useRef)(null);\n  // initialize with inherited styles\n  divtrackerstyleRef.current = (0, react_1.useMemo)(function () {\n    return {\n      // ...styles.viewport,\n      position: \'absolute\',\n      top: 0,\n      left: 0\n    };\n  }, [styles.viewport]);\n  // update ViewportContextPropertiesRef\n  ViewportContextPropertiesRef.current = (0, react_1.useMemo)(function () {\n    if (viewportState == \'setup\') return ViewportContextPropertiesRef.current;\n    var localViewportData = {\n      elementRef: viewportElementRef,\n      isResizing: isResizingRef.current\n    };\n    // trigger context change with new object\n    var viewportdataobject = Object.assign(Object.assign({}, ViewportContextPropertiesRef.current), localViewportData);\n    return viewportdataobject;\n  }, [orientation, isResizingRef.current, viewportState]);\n  // --------------------[ state processing ]---------------------------\n  (0, react_1.useLayoutEffect)(function () {\n    switch (viewportState) {\n      case \'resized\':\n      case \'setup\':\n        {\n          setViewportState(\'ready\');\n          break;\n        }\n    }\n  }, [viewportState]);\n  // ----------------------[ render ]--------------------------------\n  return react_1["default"].createElement(exports.ViewportContext.Provider, {\n    value: ViewportContextPropertiesRef.current\n  }, react_1["default"].createElement("div", {\n    "data-type": \'viewport\',\n    "data-scrollerid": scrollerID,\n    style: divlinerstyleRef.current,\n    ref: viewportElementRef\n  }, viewportState != \'setup\' && children), useScrollTracker && react_1["default"].createElement(ScrollTracker_1["default"], {\n    scrollTrackerAPIRef: scrollTrackerAPIRef,\n    styles: styles.scrolltracker\n  }));\n}; // Viewport\nexports["default"] = Viewport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0FBQSxZQUFBNkQsYUFBQTtJQUFBLGFBQ2dCLFVBQVU7SUFBQSxtQkFDRmhELFVBQVU7SUFDOUJrRCxLQUFLLEVBQUtoQixnQkFBZ0IsQ0FBQ3ZCLE9BQU87SUFDbEN3QyxHQUFHLEVBQUt0QztFQUFrQixHQUV2Qk4sYUFBYSxJQUFJLE9BQU8sSUFBS1YsUUFBUSxDQUN0QyxFQUNMSyxnQkFBZ0IsSUFBSWYsT0FBQSxZQUFBNkQsYUFBQSxDQUFDMUQsZUFBQSxXQUFhO0lBQy9Cd0IsbUJBQW1CLEVBQUlBLG1CQUFtQjtJQUMxQ2YsTUFBTSxFQUFLQSxNQUFNLENBQUNxRDtFQUFhLEVBQ2pDLENBQ3FCO0FBRS9CLENBQUMsRUFBQztBQUVGNUQsa0JBQUEsR0FBZUcsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvVmlld3BvcnQudHN4P2M4MjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVmlld3BvcnQudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMTktMjAyMyBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG4vKlxuICAgIFRoZSByb2xlIG9mIHZpZXdwb3J0IGlzIHRvIHByb3ZpZGUgdmlld3BvcnQgZGF0YSB0byBpdHMgY2hpbGRyZW4gKFNjcm9sbGJsb2NrIGFuZCBDcmFkbGUpIHRocm91Z2ggdGhlXG4gICAgVmlld3BvcnRDb250ZXh0IG9iamVjdCwgYW5kIGFjdCBhcyB0aGUgdmlzaWJsZSBzY3JlZW4gcG9ydGFsIG9mIHRoZSBsaXN0IGJlaW5nIHNob3duLlxuICAgIElmIFZpZXdwb3J0IGlzIHJlc2l6ZWQsIGl0IG5vdGlmaWVzIHRoZSBDcmFkbGUgdG8gcmVjb25maWd1cmUuXG4qL1xuXG5pbXBvcnQgUmVhY3QsIHtcblxuICAgIHVzZVN0YXRlLCBcbiAgICB1c2VSZWYsIFxuICAgIHVzZUVmZmVjdCwgXG4gICAgdXNlTGF5b3V0RWZmZWN0LCBcbiAgICB1c2VNZW1vLCBcbiAgICB1c2VDYWxsYmFjaywgXG5cbn0gZnJvbSAncmVhY3QnXG5cbi8vIHBvcHVwIHBvc2l0aW9uIHRyYWNrZXIgZm9yIHJlcG9zaXRpb25pbmdcbmltcG9ydCBTY3JvbGxUcmFja2VyIGZyb20gJy4vY3JhZGxlL1Njcm9sbFRyYWNrZXInXG5cbmV4cG9ydCBjb25zdCBWaWV3cG9ydENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpIC8vIGZvciBjaGlsZHJlblxuXG5jb25zdCBWaWV3cG9ydCA9ICh7XG5cbiAgICBjaGlsZHJlbiwgXG4gICAgZ3JpZFNwZWNzLFxuICAgIHN0eWxlcyxcbiAgICBzY3JvbGxlcklELFxuICAgIFZJRVdQT1JUX1JFU0laRV9USU1FT1VULFxuICAgIHVzZVNjcm9sbFRyYWNrZXIsXG4gICAgXG59KSA9PiB7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgaW5pdGlhbGl6ZSBdLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBjb25zdCB7XG5cbiAgICAgICAgb3JpZW50YXRpb24sXG5cbiAgICB9ID0gZ3JpZFNwZWNzXG5cbiAgICBjb25zdCBbdmlld3BvcnRTdGF0ZSxzZXRWaWV3cG9ydFN0YXRlXSA9IHVzZVN0YXRlKCdzZXR1cCcpIC8vIHNldHVwLCByZXNpemluZywgcmVzaXplZCwgcmVhZHlcblxuICAgIGNvbnN0IHZpZXdwb3J0U3RhdGVSZWYgPSB1c2VSZWYobnVsbCkgLy8gZm9yIHVzZUNhbGxiYWNrIC0+IHJlc2l6ZUNhbGxiYWNrIHNjb3BlXG4gICAgdmlld3BvcnRTdGF0ZVJlZi5jdXJyZW50ID0gdmlld3BvcnRTdGF0ZVxuXG4gICAgY29uc3QgaXNNb3VudGVkUmVmID0gdXNlUmVmKHRydWUpXG5cbiAgICBjb25zdCB2aWV3cG9ydEVsZW1lbnRSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIGNvbnN0IHNjcm9sbFRyYWNrZXJBUElSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIC8vIFZpZXdwb3J0Q29udGV4dFByb3BlcnRpZXNSZWYgaXMgcGFzc2VkIGFzIGEgcmVzaXppbmcgaW50ZXJydXB0ICh0aHJvdWdoIGNvbnRleHQpIHRvIGNoaWxkcmVuXG4gICAgY29uc3QgVmlld3BvcnRDb250ZXh0UHJvcGVydGllc1JlZiA9IHVzZVJlZihcbiAgICAgICAge1xuXG4gICAgICAgICAgICBpc1Jlc2l6aW5nOmZhbHNlLCBcbiAgICAgICAgICAgIC8vIHZpZXdwb3J0RGltZW5zaW9uczpudWxsLFxuICAgICAgICAgICAgZWxlbWVudFJlZjpudWxsLFxuICAgICAgICAgICAgc2Nyb2xsVHJhY2tlckFQSVJlZixcblxuICAgICAgICB9XG4gICAgKVxuXG4gICAgLy8gbWFyayBhcyB1bm1vdW50ZWRcbiAgICB1c2VFZmZlY3QoKCkgPT57XG5cbiAgICAgICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSB0cnVlXG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcblxuICAgICAgICAgICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZVxuXG4gICAgICAgIH1cbiAgICB9LFtdKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1bIHZpZXdwb3J0IHJlc2l6ZXIgaW50ZXJydXB0IF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgY29uc3QgcmVzaXplVGltZXJpZFJlZiA9IHVzZVJlZihudWxsKVxuICAgIGNvbnN0IGlzUmVzaXppbmdSZWYgPSB1c2VSZWYoZmFsc2UpXG4gICAgY29uc3QgcmVzaXplT2JzZXJ2ZXJSZWYgPSB1c2VSZWYobnVsbCk7ICAgIFxuXG4gICAgLy8gc2V0IHVwIHJlc2l6ZU9ic2VydmVyXG4gICAgdXNlRWZmZWN0KCgpPT57XG5cbiAgICAgICAgLy8gaW5pdGlhbGl6ZVxuICAgICAgICByZXNpemVPYnNlcnZlclJlZi5jdXJyZW50ID0gbmV3IFJlc2l6ZU9ic2VydmVyKHJlc2l6ZUNhbGxiYWNrKVxuICAgICAgICByZXNpemVPYnNlcnZlclJlZi5jdXJyZW50Lm9ic2VydmUodmlld3BvcnRFbGVtZW50UmVmLmN1cnJlbnQpXG5cbiAgICAgICAgLy8gdW5tb3VudFxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuXG4gICAgICAgICAgICByZXNpemVPYnNlcnZlclJlZi5jdXJyZW50LmRpc2Nvbm5lY3QoKVxuXG4gICAgICAgIH1cblxuICAgIH0sW10pXG5cbiAgICAvLyB1c2VkIGJ5IHJlc2l6ZU9ic2VydmVyOyBnZW5lcmF0ZXMgaW50ZXJydXB0XG4gICAgY29uc3QgcmVzaXplQ2FsbGJhY2sgPSB1c2VDYWxsYmFjaygoZW50cmllcyk9PntcblxuICAgICAgICBpZiAodmlld3BvcnRTdGF0ZVJlZi5jdXJyZW50ID09ICdzZXR1cCcpIHJldHVyblxuXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGVudHJpZXNbMF0udGFyZ2V0XG5cbiAgICAgICAgLy8gbm8gbmVlZCB0byB0cmlnZ2VyIGludGVycnVwdCBvbiBmaXJzdCByZXNpemUgbm90aWZpY2F0aW9uXG4gICAgICAgIGlmICghdGFyZ2V0LmRhdGFzZXQuaW5pdGlhbGl6ZWQpIHtcblxuICAgICAgICAgICAgdGFyZ2V0LmRhdGFzZXQuaW5pdGlhbGl6ZWQgPSAndHJ1ZSdcblxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgaW50ZXJydXB0IHJlc3BvbnNlLCBpZiBpbml0aWF0aW5nIHJlc2l6ZVxuICAgICAgICBpZiAoIWlzUmVzaXppbmdSZWYuY3VycmVudCkge1xuXG4gICAgICAgICAgICBWaWV3cG9ydENvbnRleHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQuaXNSZXNpemluZyA9IGlzUmVzaXppbmdSZWYuY3VycmVudCA9IHRydWUgXG5cbiAgICAgICAgICAgIC8vIG5ldyBvYmplY3QgY3JlYXRpb24gdHJpZ2dlcnMgYSByZWFsdGltZSBpbnRlcnJ1cHQgbWVzc2FnZSB0byBjcmFkbGUgdGhyb3VnaCBjb250ZXh0XG4gICAgICAgICAgICBWaWV3cG9ydENvbnRleHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQgPSB7Li4uVmlld3BvcnRDb250ZXh0UHJvcGVydGllc1JlZi5jdXJyZW50fVxuXG4gICAgICAgICAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHNldFZpZXdwb3J0U3RhdGUoJ3Jlc2l6aW5nJylcblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmluYWxpemUgcmVzaXppbmcgYWZ0ZXIgdGltZW91dFxuICAgICAgICBjbGVhclRpbWVvdXQocmVzaXplVGltZXJpZFJlZi5jdXJyZW50KVxuICAgICAgICByZXNpemVUaW1lcmlkUmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblxuICAgICAgICAgICAgaXNSZXNpemluZ1JlZi5jdXJyZW50ID0gZmFsc2VcbiAgICAgICAgICAgIGlmIChpc01vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHNldFZpZXdwb3J0U3RhdGUoJ3Jlc2l6ZWQnKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sVklFV1BPUlRfUkVTSVpFX1RJTUVPVVQpXG5cbiAgICB9LFtdKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgY2FsY3VsYXRlIGNvbmZpZyB2YWx1ZXMgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyBzdHlsZXNcbiAgICBjb25zdCBkaXZsaW5lcnN0eWxlUmVmID0gdXNlUmVmKG51bGwpXG5cbiAgICAvLyBpbml0aWFsaXplIHdpdGggaW5oZXJpdGVkIHN0eWxlc1xuICAgIGRpdmxpbmVyc3R5bGVSZWYuY3VycmVudCA9IHVzZU1lbW8oKCkgPT4ge1xuXG4gICAgICAgIHJldHVybiB7XG5cbiAgICAgICAgICAgIC4uLnN0eWxlcy52aWV3cG9ydCxcbiAgICAgICAgICAgIHBvc2l0aW9uOidhYnNvbHV0ZScsXG4gICAgICAgICAgICBpbnNldDowLFxuICAgICAgICAgICAgb3ZlcmZsb3c6J3Njcm9sbCcsLy8nYXV0bycsICdzY3JvbGwnIGZvciBpT1MgU2FmYXJpXG4gICAgICAgICAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJywvLyBmb3IgaU9TIFNhZmFyaVxuICAgICAgICAgICAgb3ZlcmZsb3dBbmNob3I6J25vbmUnLCAvLyBjcnVjaWFsIVxuICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgIH0sW3N0eWxlcy52aWV3cG9ydF0pXG5cbiAgICBjb25zdCBkaXZ0cmFja2Vyc3R5bGVSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIC8vIGluaXRpYWxpemUgd2l0aCBpbmhlcml0ZWQgc3R5bGVzXG4gICAgZGl2dHJhY2tlcnN0eWxlUmVmLmN1cnJlbnQgPSB1c2VNZW1vKCgpID0+IHtcblxuICAgICAgICByZXR1cm4ge1xuXG4gICAgICAgICAgICAvLyAuLi5zdHlsZXMudmlld3BvcnQsXG4gICAgICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOjAsXG4gICAgICAgICAgICBsZWZ0OjBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICB9LFtzdHlsZXMudmlld3BvcnRdKVxuXG4gICAgLy8gdXBkYXRlIFZpZXdwb3J0Q29udGV4dFByb3BlcnRpZXNSZWZcbiAgICBWaWV3cG9ydENvbnRleHRQcm9wZXJ0aWVzUmVmLmN1cnJlbnQgPSB1c2VNZW1vKCgpID0+IHtcblxuICAgICAgICBpZiAodmlld3BvcnRTdGF0ZSA9PSAnc2V0dXAnKSByZXR1cm4gVmlld3BvcnRDb250ZXh0UHJvcGVydGllc1JlZi5jdXJyZW50XG5cbiAgICAgICAgY29uc3QgbG9jYWxWaWV3cG9ydERhdGEgPSB7XG4gICAgICAgICAgICBlbGVtZW50UmVmOnZpZXdwb3J0RWxlbWVudFJlZixcbiAgICAgICAgICAgIGlzUmVzaXppbmc6aXNSZXNpemluZ1JlZi5jdXJyZW50LFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdHJpZ2dlciBjb250ZXh0IGNoYW5nZSB3aXRoIG5ldyBvYmplY3RcbiAgICAgICAgY29uc3Qgdmlld3BvcnRkYXRhb2JqZWN0ID0gey4uLlZpZXdwb3J0Q29udGV4dFByb3BlcnRpZXNSZWYuY3VycmVudCwgLi4ubG9jYWxWaWV3cG9ydERhdGF9XG5cbiAgICAgICAgcmV0dXJuICB2aWV3cG9ydGRhdGFvYmplY3RcblxuICAgIH0sW29yaWVudGF0aW9uLCBpc1Jlc2l6aW5nUmVmLmN1cnJlbnQsIHZpZXdwb3J0U3RhdGVdKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1bIHN0YXRlIHByb2Nlc3NpbmcgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFxuICAgIHVzZUxheW91dEVmZmVjdCgoKT0+e1xuICAgICAgICBzd2l0Y2ggKHZpZXdwb3J0U3RhdGUpIHtcblxuICAgICAgICAgICAgY2FzZSAncmVzaXplZCc6XG4gICAgICAgICAgICBjYXNlICdzZXR1cCc6IHtcbiAgICAgICAgICAgICAgICBzZXRWaWV3cG9ydFN0YXRlKCdyZWFkeScpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfSxbdmlld3BvcnRTdGF0ZV0pXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyByZW5kZXIgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICByZXR1cm4gPFZpZXdwb3J0Q29udGV4dC5Qcm92aWRlciB2YWx1ZSA9IHsgVmlld3BvcnRDb250ZXh0UHJvcGVydGllc1JlZi5jdXJyZW50IH0+XG4gICAgICAgIDxkaXYgXG4gICAgICAgICAgICBkYXRhLXR5cGUgPSAndmlld3BvcnQnXG4gICAgICAgICAgICBkYXRhLXNjcm9sbGVyaWQgPSB7IHNjcm9sbGVySUQgfVxuICAgICAgICAgICAgc3R5bGUgPSB7IGRpdmxpbmVyc3R5bGVSZWYuY3VycmVudCB9XG4gICAgICAgICAgICByZWYgPSB7IHZpZXdwb3J0RWxlbWVudFJlZiB9XG4gICAgICAgID5cbiAgICAgICAgICAgIHsgKHZpZXdwb3J0U3RhdGUgIT0gJ3NldHVwJykgJiYgY2hpbGRyZW4gfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge3VzZVNjcm9sbFRyYWNrZXIgJiYgPFNjcm9sbFRyYWNrZXIgXG4gICAgICAgICAgICBzY3JvbGxUcmFja2VyQVBJUmVmID0ge3Njcm9sbFRyYWNrZXJBUElSZWZ9XG4gICAgICAgICAgICBzdHlsZXMgPSB7IHN0eWxlcy5zY3JvbGx0cmFja2VyIH1cbiAgICAgICAgLz59XG4gICAgPC9WaWV3cG9ydENvbnRleHQuUHJvdmlkZXI+XG4gICAgXG59IC8vIFZpZXdwb3J0XG5cbmV4cG9ydCBkZWZhdWx0IFZpZXdwb3J0XG4iXSwibmFtZXMiOlsiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJpIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIlR5cGVFcnJvciIsIm8iLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJsZW4iLCJsZW5ndGgiLCJhcnIyIiwiX2kiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9zIiwiX2UiLCJfeCIsIl9yIiwiX2FyciIsIl9uIiwiX2QiLCJuZXh0IiwiZG9uZSIsInB1c2giLCJ2YWx1ZSIsImVyciIsImlzQXJyYXkiLCJyZWFjdF8xIiwiX19pbXBvcnRTdGFyIiwicmVxdWlyZSIsIlNjcm9sbFRyYWNrZXJfMSIsIl9faW1wb3J0RGVmYXVsdCIsImV4cG9ydHMiLCJWaWV3cG9ydENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiVmlld3BvcnQiLCJfcmVmIiwiY2hpbGRyZW4iLCJncmlkU3BlY3MiLCJzdHlsZXMiLCJzY3JvbGxlcklEIiwiVklFV1BPUlRfUkVTSVpFX1RJTUVPVVQiLCJ1c2VTY3JvbGxUcmFja2VyIiwib3JpZW50YXRpb24iLCJfcmVmMiIsInVzZVN0YXRlIiwiX3JlZjMiLCJ2aWV3cG9ydFN0YXRlIiwic2V0Vmlld3BvcnRTdGF0ZSIsInZpZXdwb3J0U3RhdGVSZWYiLCJ1c2VSZWYiLCJjdXJyZW50IiwiaXNNb3VudGVkUmVmIiwidmlld3BvcnRFbGVtZW50UmVmIiwic2Nyb2xsVHJhY2tlckFQSVJlZiIsIlZpZXdwb3J0Q29udGV4dFByb3BlcnRpZXNSZWYiLCJpc1Jlc2l6aW5nIiwiZWxlbWVudFJlZiIsInVzZUVmZmVjdCIsInJlc2l6ZVRpbWVyaWRSZWYiLCJpc1Jlc2l6aW5nUmVmIiwicmVzaXplT2JzZXJ2ZXJSZWYiLCJSZXNpemVPYnNlcnZlciIsInJlc2l6ZUNhbGxiYWNrIiwib2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJ1c2VDYWxsYmFjayIsImVudHJpZXMiLCJ0YXJnZXQiLCJkYXRhc2V0IiwiaW5pdGlhbGl6ZWQiLCJhc3NpZ24iLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZGl2bGluZXJzdHlsZVJlZiIsInVzZU1lbW8iLCJ2aWV3cG9ydCIsInBvc2l0aW9uIiwiaW5zZXQiLCJvdmVyZmxvdyIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwib3ZlcmZsb3dBbmNob3IiLCJkaXZ0cmFja2Vyc3R5bGVSZWYiLCJ0b3AiLCJsZWZ0IiwibG9jYWxWaWV3cG9ydERhdGEiLCJ2aWV3cG9ydGRhdGFvYmplY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJzdHlsZSIsInJlZiIsInNjcm9sbHRyYWNrZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Viewport.tsx\n')},"./src/cellframe/Placeholder.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// Placeholder.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    The role of the default PlaceHolder is to hold the content display until the host content\n    is received. The placeholder presents a waiting message, or an error message if the load\n    of the host content failed.\n\n    The default placeholder can be replaced by a placeholder provided by the host.\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nvar Placeholder = function Placeholder(_ref) {\n  var index = _ref.index,\n    listsize = _ref.listsize,\n    message = _ref.message,\n    error = _ref.error,\n    userFrameStyles = _ref.userFrameStyles,\n    userLinerStyles = _ref.userLinerStyles,\n    userErrorFrameStyles = _ref.userErrorFrameStyles,\n    userErrorLinerStyles = _ref.userErrorLinerStyles;\n  var _ref2 = (0, react_1.useMemo)(function () {\n      var uFrameStyles = !error ? userFrameStyles : userErrorFrameStyles;\n      var uLinerStyles = !error ? userLinerStyles : userErrorLinerStyles;\n      var frameStyles = Object.assign(Object.assign({\n        border: \'2px solid black\',\n        backgroundColor: \'cyan\'\n      }, uFrameStyles), {\n        position: \'relative\',\n        boxSizing: \'border-box\',\n        height: \'100%\',\n        width: \'100%\',\n        overflow: \'hidden\'\n      });\n      var linerStyles = Object.assign({\n        position: \'absolute\',\n        top: 0,\n        left: 0,\n        padding: \'3px\',\n        margin: \'3px\',\n        fontSize: \'smaller\'\n      }, uLinerStyles);\n      return [frameStyles, linerStyles];\n    }, [error, userFrameStyles, userLinerStyles, userErrorFrameStyles, userErrorLinerStyles]),\n    _ref3 = _slicedToArray(_ref2, 2),\n    frameStyles = _ref3[0],\n    linerStyles = _ref3[1];\n  message = message !== null && message !== void 0 ? message : \'(loading...)\';\n  return react_1["default"].createElement("div", {\n    "data-type": \'placeholderframe\',\n    style: frameStyles\n  }, !error ? react_1["default"].createElement("div", {\n    "data-type": \'placeholderliner\',\n    style: linerStyles\n  }, index + 1, "/", listsize, " ", message) : react_1["default"].createElement("div", {\n    "data-type": \'placeholderliner\',\n    style: linerStyles\n  }, "item is not available (", error.message, ")"));\n};\nexports["default"] = Placeholder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cellframe/Placeholder.tsx\n')},"./src/cradle/ScrollTracker.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// ScrollTracker.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    The role of ScrollTracker is to provide feedback to the user of the relative position in the\n    virtual list during repositiong.\n\n    ScrollTracker can be suppressed by the host (in favour of the host\'s own location feedback)\n*/\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nvar ScrollTracker = function ScrollTracker(_ref) {\n  var scrollTrackerAPIRef = _ref.scrollTrackerAPIRef,\n    styles = _ref.styles;\n  var _ref2 = (0, react_1.useState)(null),\n    _ref3 = _slicedToArray(_ref2, 2),\n    index = _ref3[0],\n    setIndex = _ref3[1];\n  var indexRef = (0, react_1.useRef)(null);\n  indexRef.current = index;\n  var lowindexRef = (0, react_1.useRef)(null);\n  var listsizeRef = (0, react_1.useRef)(null);\n  var tracktext = "".concat(index, " (").concat(index - lowindexRef.current + 1, "/").concat(listsizeRef.current, ")");\n  var stylesRef = (0, react_1.useRef)(Object.assign({\n    top: \'3px\',\n    left: \'3px\',\n    position: \'absolute\',\n    zIndex: 3,\n    backgroundColor: \'white\',\n    border: \'1px solid gray\',\n    borderRadius: \'10px\',\n    fontSize: \'smaller\',\n    padding: \'3px\',\n    visibility: \'hidden\'\n  }, styles));\n  (0, react_1.useEffect)(function () {\n    scrollTrackerAPIRef.current = {\n      startReposition: startReposition,\n      updateReposition: updateReposition,\n      finishReposition: finishReposition\n    };\n  }, []);\n  var startReposition = (0, react_1.useCallback)(function (position, lowindex, listsize) {\n    setIndex(position + lowindex);\n    lowindexRef.current = lowindex;\n    listsizeRef.current = listsize;\n    stylesRef.current = Object.assign(Object.assign({}, stylesRef.current), {\n      visibility: \'visible\'\n    });\n  }, []);\n  var updateReposition = (0, react_1.useCallback)(function (position) {\n    var currentindex = position + lowindexRef.current;\n    indexRef.current != currentindex && setIndex(currentindex);\n  }, []);\n  var finishReposition = (0, react_1.useCallback)(function () {\n    stylesRef.current = Object.assign(Object.assign({}, stylesRef.current), {\n      visibility: \'hidden\'\n    });\n    setIndex(null);\n  }, []);\n  return react_1["default"].createElement("div", {\n    "data-name": \'scrolltracker\',\n    style: stylesRef.current\n  }, tracktext);\n};\nexports["default"] = ScrollTracker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/ScrollTracker.tsx\n')},"./src/cradle/contentfunctions.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\n// contentfunctions.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.deletePortals = exports.allocateContentList = exports.getCellFrameComponentList = exports.calculateShiftSpecs = exports.generateShiftInstruction = exports.calculateContentListRequirements = void 0;\n/*\n    This module supports the contenthandler module. The functions in this module perform\n    the detailed calculations and processes required by the contenthandler.\n\n    calculateContentListRequirements is called by the contenthandler's setCradleContent function.\n\n    generateShiftInstruction and calcContentShift are called by contentHandler's updateCradleContent\n    function.\n    \n    getCellFrameComponentList, allocateContentList, and deletePortals functions are shared by both.\n\n    createCellFrame is called internally by getCellFrameComponentList as needed.\n*/\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\nvar CellFrame_1 = __importDefault(__webpack_require__(/*! ../CellFrame */ \"./src/CellFrame.tsx\"));\nvar InfiniteGridScroller_1 = __webpack_require__(/*! ../InfiniteGridScroller */ \"./src/InfiniteGridScroller.tsx\");\n// ======================[ for setCradleContent ]===========================\nvar calculateContentListRequirements = function calculateContentListRequirements(_ref) {\n  var targetAxisReferenceIndex = _ref.targetAxisReferenceIndex,\n    baseRowPixelLength = _ref.baseRowPixelLength,\n    targetAxisViewportPixelOffset = _ref.targetAxisViewportPixelOffset,\n    cradleInheritedProperties = _ref.cradleInheritedProperties,\n    cradleInternalProperties = _ref.cradleInternalProperties;\n  var padding = cradleInheritedProperties.padding,\n    cradleContentProps = cradleInternalProperties.cradleContentProps,\n    virtualListProps = cradleInternalProperties.virtualListProps,\n    cradleRowcount = cradleContentProps.cradleRowcount,\n    runwayRowcount = cradleContentProps.runwayRowcount,\n    listlowindex = virtualListProps.lowindex,\n    listhighindex = virtualListProps.highindex,\n    crosscount = virtualListProps.crosscount,\n    listRowcount = virtualListProps.rowcount,\n    baserowblanks = virtualListProps.baserowblanks,\n    endrowblanks = virtualListProps.endrowblanks,\n    rangerowshift = virtualListProps.rowshift;\n\n  // align axis reference to list scope\n  targetAxisReferenceIndex = Math.min(targetAxisReferenceIndex, listhighindex);\n  targetAxisReferenceIndex = Math.max(targetAxisReferenceIndex, listlowindex);\n  // derive target row\n  var targetAxisReferenceRow = Math.floor(targetAxisReferenceIndex / crosscount);\n  // -----------------------[ calc cradleReferenceRow & Index ]------------------------\n  // leading edge\n  var targetCradleReferenceRow = Math.max(rangerowshift, targetAxisReferenceRow - runwayRowcount);\n  // trailing edge\n  var targetCradleEndRow = targetCradleReferenceRow + (cradleRowcount - 1);\n  var listEndRowOffset = listRowcount - 1 + rangerowshift;\n  if (targetCradleEndRow > listEndRowOffset) {\n    var diff = targetCradleEndRow - listEndRowOffset;\n    targetCradleReferenceRow -= diff;\n    targetCradleEndRow -= diff;\n  }\n  var targetCradleReferenceIndex = targetCradleReferenceRow * crosscount;\n  targetCradleReferenceIndex = Math.max(targetCradleReferenceIndex, listlowindex);\n  // ---------------------[ calc cradle content count ]---------------------\n  var newCradleContentCount = cradleRowcount * crosscount;\n  if (targetCradleEndRow == listEndRowOffset) {\n    if (endrowblanks) {\n      newCradleContentCount -= endrowblanks; // endRowRemainderCount)\n    }\n  }\n\n  if (targetCradleReferenceRow == rangerowshift) {\n    // first row\n    if (baserowblanks) {\n      newCradleContentCount -= baserowblanks;\n    }\n  }\n  // --------------------[ calc css positioning ]-----------------------\n  var targetScrollblockViewportPixelOffset = (targetAxisReferenceRow - rangerowshift) * baseRowPixelLength + padding - targetAxisViewportPixelOffset;\n  // ----------------------[ return required values ]---------------------\n  return {\n    targetCradleReferenceIndex: targetCradleReferenceIndex,\n    targetAxisReferenceIndex: targetAxisReferenceIndex,\n    targetScrollblockViewportPixelOffset: targetScrollblockViewportPixelOffset,\n    newCradleContentCount: newCradleContentCount\n  };\n};\nexports.calculateContentListRequirements = calculateContentListRequirements;\n// ======================[ for updateCradleContent ]===========================\n/*\n    the two triggerlines must straddle the head of the viewport (top or left) so that\n    cradle motion can be detected. Motion is most often caused by scrolling, but\n    can also occur with change of size of cradle content rows.\n\n    generateShiftInstruction determines whether the axis should be moved toward the head or tail\n        to restore the straddling position of the two trigger lines. Lots of relative motion.\n\n    'moveaxisheadward' (scrolling down or right) means moving the axis up or left, adjacent items down\n         or right to the tail, dropping trailing tail items, and adding leading head items as necessary\n         to maintain number of cradle rows of content constant.\n\n    'moveaxistailward' (scrolling up or left) means moving the axis down or right, adjacent items up\n         or left to the head, dropping trailing head items, and adding leading tail items as necessary\n         to maintain number of cradle rows of content constant.\n\n    'none' means no shift is required\n*/\nvar generateShiftInstruction = function generateShiftInstruction(_ref2) {\n  var orientation = _ref2.orientation,\n    triggerlineEntries = _ref2.triggerlineEntries,\n    triggerlineSpan = _ref2.triggerlineSpan,\n    scrollerID = _ref2.scrollerID,\n    isFirstRowTriggerConfig = _ref2.isFirstRowTriggerConfig,\n    viewportBoundingRect = _ref2.viewportBoundingRect,\n    triggerHistoryRef = _ref2.triggerHistoryRef;\n  var triggerData = {\n    headOffset: null,\n    tailOffset: null,\n    span: triggerlineSpan,\n    isFirstRowTriggerConfig: isFirstRowTriggerConfig\n  };\n  // most recent; either triggerline will do\n  var entry = triggerlineEntries[triggerlineEntries.length - 1],\n    //.at(-1) at not available in iOS 15\n    referencename = entry.target.dataset.type;\n  entry.referencename = referencename; // for debug\n  var span = triggerlineSpan;\n  var intersectrootpos = orientation == 'vertical' ? Math.trunc(entry.rootBounds.y) : Math.trunc(entry.rootBounds.x);\n  var boundingrootpos = orientation == 'vertical' ? Math.trunc(viewportBoundingRect.y) : Math.trunc(viewportBoundingRect.x);\n  // this selection is redundant, but documents what's going on\n  var rootpos = intersectrootpos == boundingrootpos ? intersectrootpos : boundingrootpos; // we're in Safari, zoomed\n  var entrypos = orientation == 'vertical' ? Math.trunc(entry.boundingClientRect.y) : Math.trunc(entry.boundingClientRect.x);\n  var viewportTriggerOffset = entrypos - rootpos;\n  if (referencename == 'headtrigger') {\n    triggerData.headOffset = viewportTriggerOffset;\n    triggerData.tailOffset = viewportTriggerOffset + span;\n  } else {\n    // tailtrigger\n    triggerData.headOffset = viewportTriggerOffset - span;\n    triggerData.tailOffset = viewportTriggerOffset;\n  }\n  var shiftinstruction;\n  var triggerHistory = triggerHistoryRef.current;\n  // since triggers are moved and can share the 0 (zero) offset, an infinite loop can occur\n  // between the head and tail triggers. The following short-circuits that.\n  // Obviously needs work to generalize...\n  if ((0, InfiniteGridScroller_1.isSafariIOS)() && (triggerData.headOffset == 0 || triggerData.tailOffset == 0) || !(0, InfiniteGridScroller_1.isSafariIOS)() && (triggerData.headOffset >= -1 && triggerData.headOffset <= 1 || triggerData.tailOffset >= -1 && triggerData.tailOffset <= 1)) {\n    // some browsers do an infinite loop with the same previousReferenceName;\n    // usually alternates\n    if (triggerHistory.previousReferenceName) {\n      triggerHistory.previousReferenceName = null;\n      shiftinstruction = 'none';\n    } else {\n      if (triggerData.headOffset >= -1 && triggerData.headOffset <= 1) {\n        triggerHistory.previousReferenceName = 'headtrigger';\n      } else {\n        triggerHistory.previousReferenceName = 'tailtrigger';\n      }\n    }\n  } else {\n    if (triggerHistory.previousReferenceName) {\n      triggerHistory.previousReferenceName = null;\n    }\n  }\n  if (shiftinstruction) {\n    // will be 'none'\n    return [shiftinstruction, 0];\n  }\n  if (isFirstRowTriggerConfig) {\n    if (triggerData.headOffset <= 0) {\n      shiftinstruction = 'moveaxistailward';\n    } else {\n      shiftinstruction = 'none';\n    }\n  } else {\n    if (triggerData.tailOffset <= 0) {\n      shiftinstruction = 'moveaxistailward';\n    } else if (triggerData.headOffset >= 0) {\n      shiftinstruction = 'moveaxisheadward';\n    } else {\n      shiftinstruction = 'none';\n    }\n  }\n  var triggerViewportReferencePixelPos = shiftinstruction == 'moveaxistailward' ?\n  // block is scrolling up or left\n  triggerData.tailOffset :\n  // needs to move up or left toward head\n  triggerData.headOffset; // needs to move down or right toward tail\n  return [shiftinstruction, triggerViewportReferencePixelPos];\n};\nexports.generateShiftInstruction = generateShiftInstruction;\n/*\n    The basic goal of calculateShiftSpecs is to determine the number and direction of rows to shift between\n    the head and tail grids (which determines the new location of the axis), and also to\n    calculate the rolling addition and deletion of cradle content to accommodate the changes.\n\n    The number of rows to shift is determined by the pixel shift required to restore the\n    triggerlines to their straddle configuration around the head (top or left) of the viewport.\n\n    Adjustments are made to accommodate special requirements at the start and end of the virtual list.\n\n    DOM measurements are used where available (to accommodate variable dimension rows), and standard\n    units (cellHeight, cellWidth) used for estimates where necessary.\n*/\n// rowshift is at least 1 by the time this function is reached\n// ie. a shiftinstruction of 'moveaxisheadward' or 'moveaxistailward'\nvar calculateShiftSpecs = function calculateShiftSpecs(_ref3) {\n  var shiftinstruction = _ref3.shiftinstruction,\n    triggerViewportReferencePixelPos = _ref3.triggerViewportReferencePixelPos,\n    scrollPos = _ref3.scrollPos,\n    scrollblockElement = _ref3.scrollblockElement,\n    cradleInheritedProperties = _ref3.cradleInheritedProperties,\n    cradleContentProps = _ref3.cradleContentProps,\n    virtualListProps = _ref3.virtualListProps,\n    cradleContent = _ref3.cradleContent,\n    cradleElements = _ref3.cradleElements;\n  // ------------------------[ 1. initialize ]-----------------------\n  var _a, _b;\n  // cradle elements\n  var axisElement = cradleElements.axisRef.current,\n    headGridElement = cradleElements.headRef.current,\n    tailGridElement = cradleElements.tailRef.current,\n    gap = cradleInheritedProperties.gap,\n    padding = cradleInheritedProperties.padding,\n    orientation = cradleInheritedProperties.orientation,\n    cellHeight = cradleInheritedProperties.cellHeight,\n    cellWidth = cradleInheritedProperties.cellWidth,\n    layout = cradleInheritedProperties.layout,\n    scrollerID = cradleInheritedProperties.scrollerID,\n    cradlecontentlist = cradleContent.cradleModelComponents,\n    tailcontentlist = cradleContent.tailModelComponents,\n    cradleRowcount = cradleContentProps.cradleRowcount,\n    viewportRowcount = cradleContentProps.viewportRowcount,\n    runwayRowcount = cradleContentProps.runwayRowcount,\n    crosscount = virtualListProps.crosscount,\n    listRowcount = virtualListProps.rowcount,\n    listsize = virtualListProps.size,\n    listlowindex = virtualListProps.lowindex,\n    baserowblanks = virtualListProps.baserowblanks,\n    endrowblanks = virtualListProps.endrowblanks,\n    rangerowshift = virtualListProps.rowshift;\n\n  // normalize\n  var previousCradleReferenceIndex = ((_a = cradlecontentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index) || 0;\n  var previousCradleReferenceRow = Math.floor(previousCradleReferenceIndex / crosscount);\n  var previousAxisReferenceIndex = ((_b = tailcontentlist[0]) === null || _b === void 0 ? void 0 : _b.props.index) || 0;\n  var previousAxisReferenceRow = Math.floor(previousAxisReferenceIndex / crosscount);\n  var listEndRow = listRowcount - 1 + rangerowshift;\n  var baseRowPixelLength = (orientation == 'vertical' ? cellHeight : cellWidth) + gap;\n  var foundGridSpanRowShiftIncrement,\n    gridSpanAxisPixelShift = 0,\n    // in relation to viewport head boundary\n    byPixelMeasureGridRowShiftCount = 0,\n    isListBoundary = false,\n    totalPixelShift,\n    finalVariableRowLength; // special case\n  // ----------------------------[ 2. calculate base row shift ]--------------------------\n  // measure exising variable rows for pixel length\n  if (layout == 'variable') {\n    var engagedGridElement =\n    // moving axis (and triggers) toward the reference grid element\n    shiftinstruction == 'moveaxistailward' ?\n    // scrolling up or left\n    tailGridElement : headGridElement;\n    var gridRowPixelLengthsList = getGridRowLengths(engagedGridElement, orientation, crosscount, gap);\n    if (shiftinstruction == 'moveaxisheadward') {\n      // scrolling down or right; move triggerlines up or left\n      gridRowPixelLengthsList.reverse(); // head grid row lengths listed from axis toward head\n    }\n\n    var gridRowCumulativePixelLengthsList = getGridRowAggregateSpans(gridRowPixelLengthsList); // count pixels where available\n    // first try to find position based on known (instantiated) rows\n    if (shiftinstruction == 'moveaxistailward') {\n      // scroll up\n      // tail trigger needs to move down or right until position relative to viewport top or left is positive\n      foundGridSpanRowShiftIncrement = gridRowCumulativePixelLengthsList.findIndex(function (cumulativepixellength) {\n        return triggerViewportReferencePixelPos + cumulativepixellength >= 0;\n      });\n    } else {\n      // 'moveaxisheadward', scrolldown\n      // head trigger needs to move up or left until position relative to viewport top or left is negative\n      foundGridSpanRowShiftIncrement = gridRowCumulativePixelLengthsList.findIndex(function (cumulativepixellength) {\n        return triggerViewportReferencePixelPos - cumulativepixellength <= 0;\n      });\n    }\n    if (foundGridSpanRowShiftIncrement != -1) {\n      // found measureed row for shift\n      gridSpanAxisPixelShift = shiftinstruction == 'moveaxistailward' ? gridRowCumulativePixelLengthsList[foundGridSpanRowShiftIncrement] :\n      // move axis toward tail from viewport boundary (positive)\n      -gridRowCumulativePixelLengthsList[foundGridSpanRowShiftIncrement]; // move axis toward head from viewport boundary (negative)\n    } else {\n      // no foundGridSpanRowShiftIncrement; either in boundary, or shy of target\n      isListBoundary = gridRowCumulativePixelLengthsList.length == 0; // boundary at head of list\n      if (!isListBoundary) {\n        // interim working result\n        byPixelMeasureGridRowShiftCount = gridRowCumulativePixelLengthsList.length - 1; // base: failed measured row ptr\n        totalPixelShift = gridRowCumulativePixelLengthsList[byPixelMeasureGridRowShiftCount]; // set base of working overshoot\n        finalVariableRowLength = gridRowPixelLengthsList.at(-1); // for oversize cell adjustment below\n      } else {\n        // else if isListBoundary row and pixel shifts remain at default of 0 each\n        byPixelMeasureGridRowShiftCount = 0;\n        totalPixelShift = 0;\n      }\n    }\n  } else {\n    // layout == 'uniform'; use only defined lengths\n    foundGridSpanRowShiftIncrement = -1; // \"not found\", ie not applicable\n    // these are the defaults\n    byPixelMeasureGridRowShiftCount = 0;\n    totalPixelShift = 0;\n  }\n  // uniform layout, or overshoot of instantiated rows; continue with virtual base rows\n  if (foundGridSpanRowShiftIncrement == -1) {\n    if (!isListBoundary) {\n      if (shiftinstruction == 'moveaxistailward') {\n        // scrolling up/left\n        do {\n          totalPixelShift += baseRowPixelLength;\n          byPixelMeasureGridRowShiftCount++;\n        } while (triggerViewportReferencePixelPos + totalPixelShift < 0);\n        gridSpanAxisPixelShift = totalPixelShift;\n      } else {\n        // moveaxisheadward; scrolling down/right\n        do {\n          totalPixelShift += baseRowPixelLength;\n          byPixelMeasureGridRowShiftCount++;\n          if (previousAxisReferenceRow - rangerowshift - byPixelMeasureGridRowShiftCount == 0) {\n            // stop cycling at head limit\n            break;\n          }\n        } while (triggerViewportReferencePixelPos - totalPixelShift > 0);\n        gridSpanAxisPixelShift = -totalPixelShift;\n      }\n    }\n    // byPixelMeasureGridRowCount is one greater than foundGridSpanRowIncrement with actual measurements above\n    // this -1 makes them compatible for span conversion (next step)\n    foundGridSpanRowShiftIncrement = byPixelMeasureGridRowShiftCount - 1;\n  }\n  var gridSpanRowShift =\n  // pick up row shift with or without overshoot\n  shiftinstruction == 'moveaxistailward' ? foundGridSpanRowShiftIncrement + 1 : -(foundGridSpanRowShiftIncrement + 1);\n  // the following two values (axisReferenceRowShift & axisPixelShift), and no other calcs, \n  //     are carried forward in this function.\n  // for axisReferenceRowshift:\n  // negative for moving rows out of head into tail;\n  // positive for moving rows out of tail into head\n  var axisReferenceRowShift = gridSpanRowShift,\n    axisPixelShift = gridSpanAxisPixelShift;\n  // this can only happen with oversized cellLength (ie > viewportLength)\n  //     and only using measured length\n  // axis must be no farther than 1 back of the last row end position\n  if (previousAxisReferenceRow + axisReferenceRowShift > listEndRow) {\n    axisReferenceRowShift -= 1;\n    if (layout == 'variable') {\n      axisPixelShift -= finalVariableRowLength;\n    } else {\n      axisPixelShift -= baseRowPixelLength;\n    }\n  }\n  // -----------[ 3. calculate current viewport axis pixel offset ]-------------------\n  // gaps beyond rendered rows can be caused by rapid scrolling\n  var scrollblockAxisPixelOffset = orientation == 'vertical' ? axisElement.offsetTop : axisElement.offsetLeft;\n  var scrollblockPixelOffset =\n  // to capture current top/left adjustment to viewport for variable layout\n  orientation == 'vertical' ? scrollblockElement.offsetTop : scrollblockElement.offsetLeft;\n  // currentViewportAxisOffset will be negative (above viewport edge) for scroll block headward \n  //     and positive for scroll block tailward\n  // the pixel distance between the viewport frame and the axis, toward the head\n  var currentViewportAxisPixelOffset = scrollblockAxisPixelOffset + scrollblockPixelOffset - scrollPos;\n  // -------------[ 4. calculate new axis pixel position ]------------------\n  var newAxisViewportPixelOffset = currentViewportAxisPixelOffset + axisPixelShift;\n  // Note: sections 5, 6 and 7 deal entirely with row calculations; no pixels\n  // ------------[ 5. calc new cradle and axis reference row offsets ]-------------\n  // base value for cradle reference shift; may change if beyond list bounds\n  var cradleReferenceRowshift = axisReferenceRowShift;\n  // base values\n  var newCradleReferenceRow = previousCradleReferenceRow + cradleReferenceRowshift;\n  var newAxisReferenceRow = previousAxisReferenceRow + axisReferenceRowShift;\n  // --------[ 6. adjust cradle contents for start and end of list ]-------\n  // ...to maintain constant number of cradle rows\n  if (shiftinstruction == 'moveaxistailward') {\n    // scrolling up/left\n    // a. if scrolling the block headward near the start of the list, new cradle row offset and\n    // cradle row shift count has to be adjusted to accommodate the leading runway\n    // b. if scrolling the block headward (revealing tail of list), as the cradle last row offset \n    // approaches max listrow, new cradle offset and cradle row shift have to be adjusted to prevent \n    // shortening of cradle content.\n    // --- start of list adjustment\n    var targetCradleReferenceRow = Math.max(rangerowshift, newAxisReferenceRow - runwayRowcount - 1); // extra row for visibility\n    var headrowDiff = newCradleReferenceRow - targetCradleReferenceRow;\n    if (headrowDiff > 0) {\n      newCradleReferenceRow -= headrowDiff;\n      cradleReferenceRowshift -= headrowDiff;\n    }\n    // --- end of list adjustment: case of being in bounds of trailing runway (end of list)\n    var targetCradleEndrow = newCradleReferenceRow + (cradleRowcount - 1);\n    var tailrowdiff = targetCradleEndrow - listEndRow;\n    if (tailrowdiff > 0) {\n      cradleReferenceRowshift -= tailrowdiff;\n      newCradleReferenceRow -= tailrowdiff;\n    }\n  } else {\n    // shiftinstruction == 'moveaxisheadward'; scrolling down/right\n    // c. if scrolling the block down or right (toward revealing head of list), as the cradlerowoffset \n    // hits 0, cradle changes have to be adjusted to prevent shortening of cradle content\n    // d. if scrolling headward near the end of the list, cradle changes have to be adjusted to \n    // accomodate the trailing runway\n    // --- start of list adjustment\n    if (newCradleReferenceRow < rangerowshift) {\n      var diff = rangerowshift - newCradleReferenceRow;\n      cradleReferenceRowshift += diff;\n      newCradleReferenceRow += diff;\n    }\n    if (layout == 'variable' && newAxisReferenceRow == rangerowshift) {\n      // start of list\n      newAxisViewportPixelOffset = padding;\n    }\n    // --- end of list adjustment; case of in bounds of trailing runway\n    var computedNextCradleEndRow = previousCradleReferenceRow + (cradleRowcount - 1) + cradleReferenceRowshift;\n    var targetCradleEndRow = newAxisReferenceRow + (viewportRowcount - 1) + (runwayRowcount - 1);\n    var _tailrowdiff = computedNextCradleEndRow - targetCradleEndRow;\n    if (_tailrowdiff < 0) {\n      _tailrowdiff = Math.max(_tailrowdiff, cradleReferenceRowshift);\n      cradleReferenceRowshift -= _tailrowdiff;\n      newCradleReferenceRow -= _tailrowdiff;\n    }\n  }\n  // ----------------------[ 7. map rows to item references ]----------------------\n  var newCradleReferenceIndex = Math.max(listlowindex, newCradleReferenceRow * crosscount);\n  var cradleReferenceItemShift = newCradleReferenceIndex - previousCradleReferenceIndex;\n  var newAxisReferenceIndex = Math.max(listlowindex, newAxisReferenceRow * crosscount);\n  var axisReferenceItemShift = newAxisReferenceIndex - previousAxisReferenceIndex;\n  var newCradleContentCount = cradleRowcount * crosscount; // base count\n  var includesLastRow = newCradleReferenceRow + cradleRowcount - rangerowshift >= listRowcount;\n  var includesFirstRow = newCradleReferenceRow == rangerowshift;\n  if (includesLastRow) {\n    newCradleContentCount -= endrowblanks;\n  }\n  if (includesFirstRow) {\n    newCradleContentCount -= baserowblanks;\n  }\n  // create head and tail change counts\n  var changeOfCradleContentCount = cradlecontentlist.length - newCradleContentCount;\n  var listStartChangeCount = -cradleReferenceItemShift;\n  var listEndChangeCount = -listStartChangeCount - changeOfCradleContentCount;\n  // ---------------------[ 8. return required values ]-------------------\n  return {\n    // newCradleReferenceIndex, \n    cradleReferenceItemShift: cradleReferenceItemShift,\n    newAxisReferenceIndex: newAxisReferenceIndex,\n    axisReferenceItemShift: axisReferenceItemShift,\n    newAxisViewportPixelOffset: newAxisViewportPixelOffset,\n    newCradleContentCount: newCradleContentCount,\n    listStartChangeCount: listStartChangeCount,\n    listEndChangeCount: listEndChangeCount\n  };\n};\nexports.calculateShiftSpecs = calculateShiftSpecs;\n// supports calcContentShift above\nvar getGridRowLengths = function getGridRowLengths(grid, orientation, crosscount, gap) {\n  var rowLengths = [];\n  var elementList = grid.childNodes;\n  var elementPtr = 0;\n  var element = elementList[elementPtr];\n  while (element) {\n    var rowlength = (orientation == 'vertical' ? element.offsetHeight : element.offsetWidth) + gap;\n    rowLengths.push(rowlength);\n    elementPtr += crosscount;\n    element = elementList[elementPtr];\n  }\n  return rowLengths;\n};\n// supports calcContentShift above\nvar getGridRowAggregateSpans = function getGridRowAggregateSpans(rowLengths) {\n  var rowSpans = [];\n  var span = 0;\n  rowLengths.forEach(function (value) {\n    span += value;\n    rowSpans.push(span);\n  });\n  return rowSpans;\n};\n// =====================[ shared by both setCradleContent and updateCradleContent ]====================\n// update content\n// adds CellFrames at end of contentlist according to headindexcount and tailindexcount,\n// or if indexcount values are <0 removes them.\nvar getCellFrameComponentList = function getCellFrameComponentList(_ref4) {\n  var cradleInheritedProperties = _ref4.cradleInheritedProperties,\n    cradleInternalProperties = _ref4.cradleInternalProperties,\n    cacheAPI = _ref4.cacheAPI,\n    cradleContentCount = _ref4.cradleContentCount,\n    cradleReferenceIndex = _ref4.cradleReferenceIndex,\n    listStartChangeCount = _ref4.listStartChangeCount,\n    listEndChangeCount = _ref4.listEndChangeCount,\n    contentlist = _ref4.workingContentList,\n    instanceIdCounterRef = _ref4.instanceIdCounterRef,\n    styles = _ref4.styles,\n    placeholderMessages = _ref4.placeholderMessages;\n  var localContentlist = _toConsumableArray(contentlist);\n  var lastindexoffset = cradleReferenceIndex + localContentlist.length - 1;\n  var headContentlist = [],\n    tailContentlist = [];\n  var deletedtailitems = [],\n    deletedheaditems = [];\n  if (listStartChangeCount >= 0) {\n    // acquire new items\n    var referenceIndex = cradleReferenceIndex;\n    var changeCount = listStartChangeCount;\n    if (listStartChangeCount > cradleContentCount) {\n      referenceIndex = cradleReferenceIndex - (listStartChangeCount - cradleContentCount);\n      changeCount = cradleContentCount;\n    }\n    for (var newindex = referenceIndex - changeCount; newindex < referenceIndex; newindex++) {\n      headContentlist.push(createCellFrame({\n        index: newindex,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        instanceIdCounterRef: instanceIdCounterRef,\n        cacheAPI: cacheAPI,\n        placeholderFrameStyles: styles.placeholderframe,\n        placeholderLinerStyles: styles.placeholderliner,\n        placeholderErrorFrameStyles: styles.placeholdererrorframe,\n        placeholderErrorLinerStyles: styles.placeholdererrorliner,\n        placeholderMessages: placeholderMessages\n      }));\n    }\n  } else {\n    deletedheaditems = localContentlist.splice(0, -listStartChangeCount);\n  }\n  if (listEndChangeCount >= 0) {\n    // acquire new items\n    var _referenceIndex = lastindexoffset;\n    var _changeCount = listEndChangeCount;\n    if (listEndChangeCount > cradleContentCount) {\n      _referenceIndex = lastindexoffset + (listEndChangeCount - cradleContentCount);\n      _changeCount = cradleContentCount;\n    }\n    for (var _newindex = _referenceIndex + 1; _newindex < _referenceIndex + 1 + _changeCount; _newindex++) {\n      tailContentlist.push(createCellFrame({\n        index: _newindex,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        instanceIdCounterRef: instanceIdCounterRef,\n        cacheAPI: cacheAPI,\n        placeholderFrameStyles: styles.placeholderframe,\n        placeholderLinerStyles: styles.placeholderliner,\n        placeholderErrorFrameStyles: styles.placeholdererrorframe,\n        placeholderErrorLinerStyles: styles.placeholdererrorliner,\n        placeholderMessages: placeholderMessages\n      }));\n    }\n  } else {\n    deletedtailitems = localContentlist.splice(listEndChangeCount, -listEndChangeCount);\n  }\n  var deletedItems = [].concat(_toConsumableArray(deletedheaditems), _toConsumableArray(deletedtailitems));\n  var componentList = [].concat(headContentlist, _toConsumableArray(localContentlist), tailContentlist);\n  return [componentList, deletedItems];\n};\nexports.getCellFrameComponentList = getCellFrameComponentList;\n// Leading (head) all or partially hidden; tail, visible plus trailing hidden\nvar allocateContentList = function allocateContentList(_ref5) {\n  var contentlist = _ref5.contentlist,\n    axisReferenceIndex = _ref5.axisReferenceIndex,\n    layoutHandler = _ref5.layoutHandler;\n  var _a;\n  var triggercellIndex = layoutHandler.triggercellIndex;\n  var lowcontentindex = (_a = contentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index,\n    highcontentindex = lowcontentindex + contentlist.length;\n  var headitemcount = axisReferenceIndex - lowcontentindex;\n  var targetTriggercellIndex = headitemcount == 0 ? axisReferenceIndex : axisReferenceIndex - 1;\n  layoutHandler.triggercellIsInTail = headitemcount == 0 ? true : false;\n  if (triggercellIndex !== undefined && lowcontentindex !== undefined) {\n    //&& \n    if (triggercellIndex >= lowcontentindex && triggercellIndex <= highcontentindex) {\n      var _triggercellPtr = triggercellIndex - lowcontentindex;\n      var _triggercellComponent = contentlist[_triggercellPtr];\n      if (_triggercellComponent) {\n        // otherwise has been asynchronously cleared\n        contentlist[_triggercellPtr] = react_1[\"default\"].cloneElement(_triggercellComponent, {\n          isTriggercell: false\n        });\n      }\n    }\n  }\n  var triggercellPtr = targetTriggercellIndex - lowcontentindex;\n  var triggercellComponent = contentlist[triggercellPtr];\n  if (triggercellComponent) {\n    contentlist[triggercellPtr] = react_1[\"default\"].cloneElement(triggercellComponent, {\n      isTriggercell: true\n    });\n    layoutHandler.triggercellIndex = targetTriggercellIndex;\n  } else {\n    // defensive; shouldn't happen\n    console.log('FAILURE TO REGISTER TRIGGERCELL:scrollerID', '-' + layoutHandler.scrollerID + '-');\n    console.log('axisReferenceIndex, triggercellIndex, lowcontentindex, highcontentindex, headitemcount, targetTriggercellIndex\\n', axisReferenceIndex, triggercellIndex, lowcontentindex, highcontentindex, headitemcount, targetTriggercellIndex);\n    console.log('triggercellPtr, triggercellComponent, triggercellComponent?.props.isTriggecell, contentlist\\n', triggercellPtr, triggercellComponent, triggercellComponent === null || triggercellComponent === void 0 ? void 0 : triggercellComponent.props.isTriggecell, Object.assign({}, contentlist));\n  }\n  var headlist = contentlist.slice(0, headitemcount);\n  var taillist = contentlist.slice(headitemcount);\n  return [headlist, taillist];\n};\nexports.allocateContentList = allocateContentList;\nvar deletePortals = function deletePortals(cacheAPI, deleteList, deleteListCallback) {\n  var dlist = deleteList.map(function (item) {\n    return item.props.index;\n  });\n  cacheAPI.deletePortalByIndex(dlist, deleteListCallback);\n};\nexports.deletePortals = deletePortals;\n// =====================[ internal, acquire item ]======================\nvar createCellFrame = function createCellFrame(_ref6) {\n  var index = _ref6.index,\n    cradleInheritedProperties = _ref6.cradleInheritedProperties,\n    cradleInternalProperties = _ref6.cradleInternalProperties,\n    instanceIdCounterRef = _ref6.instanceIdCounterRef,\n    cacheAPI = _ref6.cacheAPI,\n    placeholderFrameStyles = _ref6.placeholderFrameStyles,\n    placeholderLinerStyles = _ref6.placeholderLinerStyles,\n    placeholderErrorFrameStyles = _ref6.placeholderErrorFrameStyles,\n    placeholderErrorLinerStyles = _ref6.placeholderErrorLinerStyles,\n    placeholderMessages = _ref6.placeholderMessages;\n  var instanceID = instanceIdCounterRef.current++;\n  var orientation = cradleInheritedProperties.orientation,\n    cellHeight = cradleInheritedProperties.cellHeight,\n    cellWidth = cradleInheritedProperties.cellWidth,\n    cellMinHeight = cradleInheritedProperties.cellMinHeight,\n    cellMinWidth = cradleInheritedProperties.cellMinWidth,\n    getItem = cradleInheritedProperties.getItem,\n    placeholder = cradleInheritedProperties.placeholder,\n    scrollerID = cradleInheritedProperties.scrollerID,\n    layout = cradleInheritedProperties.layout,\n    usePlaceholder = cradleInheritedProperties.usePlaceholder;\n  var listsize = cradleInternalProperties.virtualListProps.size;\n  // get new or existing itemID\n  var itemID = cacheAPI.getNewOrExistingItemID(index);\n  return react_1[\"default\"].createElement(CellFrame_1[\"default\"], {\n    key: instanceID,\n    orientation: orientation,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    cellMinHeight: cellMinHeight,\n    cellMinWidth: cellMinWidth,\n    layout: layout,\n    index: index,\n    getItem: getItem,\n    listsize: listsize,\n    placeholder: placeholder,\n    itemID: itemID,\n    instanceID: instanceID,\n    scrollerID: scrollerID,\n    isTriggercell: false,\n    usePlaceholder: usePlaceholder,\n    placeholderFrameStyles: placeholderFrameStyles,\n    placeholderLinerStyles: placeholderLinerStyles,\n    placeholderErrorFrameStyles: placeholderErrorFrameStyles,\n    placeholderErrorLinerStyles: placeholderErrorLinerStyles,\n    placeholderMessages: placeholderMessages,\n    gridstartstyle: null\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contentfunctions.tsx\n")},"./src/cradle/contenthandler.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// contenthandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    This module supports the setup, rollover and positioning of content in the Cradle.\n\n    There are three key functions in this module: setCradleContent, updateCradleContent, and\n    adjustScrollblockForVariability.\n\n    There are also a few functions which support synchronization of Cradle content with cache\n    content (see internal and external services below).\n\n    setCradleContent is called directly from Cradle (in the state manager), and instantiates new Cradle\n    content in response to the scroller setup, or changes to its configuration. setCradleContent\n    creates a list of Cradle content CellFrames, and allocates those to the two Cradle grids. This\n    process occurs in response to many state changes, such as finishreposition, pivot, a host scrollto\n    request, and more.\n\n    updateCradleContent rolls over the Cradle content in response to user scrolling. When scrolling\n    down (or right), content is removed from the Cradle tail and added to the Cradle head (thus moving the\n    Cradle axis), while new content is added to the tail. When scrolling up (or left), the reverse occurs.\n\n    adjustScrollblockForVariability reconfigures the scrollblock to accommodate variable sized grid rows.\n\n    The Cradle (through the contentfunctions module) delegates fetching content items to the CellFrame.\n\n    This module is supported primarily by the contentfunctions module.\n\n*/\nvar react_1 = __importDefault(__webpack_require__(/*! react */ "react"));\nvar contentfunctions_1 = __webpack_require__(/*! ./contentfunctions */ "./src/cradle/contentfunctions.tsx");\nvar InfiniteGridScroller_1 = __webpack_require__(/*! ../InfiniteGridScroller */ "./src/InfiniteGridScroller.tsx");\nvar ContentHandler = /*#__PURE__*/function () {\n  function ContentHandler(cradleParameters) {\n    var _this = this;\n    _classCallCheck(this, ContentHandler);\n    this.content = {\n      cradleModelComponents: null,\n      headModelComponents: null,\n      tailModelComponents: null,\n      // the following two only used in cradle for render\n      headDisplayComponents: [],\n      tailDisplayComponents: []\n    };\n    this.instanceIdCounterRef = {\n      current: 0\n    };\n    // =============================[ UPDATE VIRTUAL LIST SIZE OR RANGE ]==========================\n    // these are utilities\n    // reset the cradle with new content, including allocation between head and tail parts of the cradle\n    // - called only from the Cradle state handler\n    this.updateVirtualListSize = function (newlistsize) {\n      var cradleParameters = _this.cradleParameters;\n      var cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n      var cradleHandlers = cradleParameters.handlersRef.current;\n      var cradleContentProps = cradleInternalProperties.cradleContentProps,\n        setVirtualListSize = cradleInternalProperties.setVirtualListSize;\n      if (newlistsize == 0) {\n        var cradleContent = _this.content,\n          layoutHandler = cradleHandlers.layoutHandler,\n          cradlePositionData = layoutHandler.cradlePositionData;\n        _this.clearCradle();\n        cradleContent.headDisplayComponents = [];\n        cradleContent.tailDisplayComponents = [];\n        Object.assign(cradleContentProps, {\n          SOL: undefined,\n          EOL: undefined,\n          highindex: undefined,\n          lowindex: undefined,\n          axisReferenceIndex: undefined,\n          size: 0\n        });\n        cradlePositionData.targetAxisReferencePosition = 0;\n        cradlePositionData.targetAxisViewportPixelOffset = 0;\n      }\n      setVirtualListSize(newlistsize);\n    };\n    this.updateVirtualListRange = function (newlistrange) {\n      var cradleParameters = _this.cradleParameters,\n        cradleHandlers = cradleParameters.handlersRef.current,\n        layoutHandler = cradleHandlers.layoutHandler,\n        _this$cradleParameter = _this.cradleParameters.cradleInternalPropertiesRef.current,\n        setVirtualListRange = _this$cradleParameter.setVirtualListRange,\n        virtualListProps = _this$cradleParameter.virtualListProps,\n        cradleContentProps = _this$cradleParameter.cradleContentProps,\n        cradlePositionData = layoutHandler.cradlePositionData;\n      var newlistsize;\n      if (newlistrange.length == 0) {\n        newlistsize = 0;\n        cradlePositionData.targetAxisReferencePosition = 0;\n        cradlePositionData.targetAxisViewportPixelOffset = 0;\n      } else {\n        var _newlistrange = _slicedToArray(newlistrange, 2),\n          newlowindex = _newlistrange[0],\n          newhighindex = _newlistrange[1];\n        if (virtualListProps.range.length) {\n          var previouslowindex = virtualListProps.lowindex;\n          var lowindexchange = newlowindex - previouslowindex;\n          cradlePositionData.targetAxisReferencePosition -= lowindexchange;\n        }\n        newlistsize = newhighindex - newlowindex + 1;\n      }\n      if (newlistsize == 0) {\n        var cradleContent = _this.content;\n        _this.clearCradle();\n        cradleContent.headDisplayComponents = [];\n        cradleContent.tailDisplayComponents = [];\n        Object.assign(cradleContentProps, {\n          SOL: undefined,\n          EOL: undefined,\n          highindex: undefined,\n          lowindex: undefined,\n          axisReferenceIndex: undefined,\n          size: 0\n        });\n      }\n      setVirtualListRange(newlistrange);\n    };\n    // Three main public methods - setCradleContent, updateCradleContent, and adjustScrollblockForVariability\n    // ==========================[ SET CONTENT ]===========================\n    this.setCradleContent = function (cradleState) {\n      // ------------------------------[ 1. initialize ]---------------------------\n      var cradleParameters = _this.cradleParameters,\n        ViewportContextProperties = cradleParameters.ViewportContextPropertiesRef.current,\n        cradleHandlers = cradleParameters.handlersRef.current,\n        cradleInheritedProperties = cradleParameters.cradleInheritedPropertiesRef.current,\n        cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current,\n        viewportElement = ViewportContextProperties.elementRef.current,\n        cacheAPI = cradleHandlers.cacheAPI,\n        layoutHandler = cradleHandlers.layoutHandler,\n        serviceHandler = cradleHandlers.serviceHandler,\n        scrollHandler = cradleHandlers.scrollHandler,\n        cradlePositionData = layoutHandler.cradlePositionData,\n        requestedAxisReferencePosition = cradlePositionData.targetAxisReferencePosition,\n        orientation = cradleInheritedProperties.orientation,\n        gap = cradleInheritedProperties.gap,\n        padding = cradleInheritedProperties.padding,\n        cellHeight = cradleInheritedProperties.cellHeight,\n        cellWidth = cradleInheritedProperties.cellWidth,\n        styles = cradleInheritedProperties.styles,\n        placeholderMessages = cradleInheritedProperties.placeholderMessages,\n        scrollerID = cradleInheritedProperties.scrollerID,\n        virtualListProps = cradleInternalProperties.virtualListProps,\n        cradleContentProps = cradleInternalProperties.cradleContentProps,\n        listlowindex = virtualListProps.lowindex,\n        listsize = virtualListProps.size,\n        crosscount = virtualListProps.crosscount,\n        listRowcount = virtualListProps.rowcount,\n        baserowblanks = virtualListProps.baserowblanks;\n      var cradleContent = _this.content;\n      var targetAxisViewportPixelOffset = cradlePositionData.targetAxisViewportPixelOffset;\n      // ----------------------[ 2. normalize data ]--------------------------\n      // in bounds\n      var workingAxisReferencePosition = Math.min(requestedAxisReferencePosition, listsize - 1);\n      workingAxisReferencePosition = Math.max(workingAxisReferencePosition, 0);\n      // shifted by virtual list low range\n      var workingAxisReferenceIndex = workingAxisReferencePosition + listlowindex;\n      // calculate axis reference base index\n      workingAxisReferenceIndex -= workingAxisReferenceIndex < 0 ? workingAxisReferenceIndex % crosscount ? crosscount - Math.abs(workingAxisReferenceIndex % crosscount) : 0 : workingAxisReferenceIndex % crosscount;\n      // reposition at row boundary\n      if ([\'firstrender\', \'firstrenderfromcache\', \'finishreposition\', \'reconfigure\', \'scrollto\'].includes(cradleState)) {\n        targetAxisViewportPixelOffset = workingAxisReferenceIndex == listlowindex ? padding : gap; // default\n      }\n\n      var workingContentList = [];\n      // ----------------------[ 3. get content requirements ]----------------------\n      var baseRowPixelLength = (orientation == \'vertical\' ? cellHeight : cellWidth) + gap;\n      var _ref = (0, contentfunctions_1.calculateContentListRequirements)({\n          // pixel\n          baseRowPixelLength: baseRowPixelLength,\n          targetAxisViewportPixelOffset: targetAxisViewportPixelOffset,\n          // index\n          targetAxisReferenceIndex: workingAxisReferenceIndex,\n          // resources\n          cradleInheritedProperties: cradleInheritedProperties,\n          cradleInternalProperties: cradleInternalProperties\n        }),\n        targetCradleReferenceIndex = _ref.targetCradleReferenceIndex,\n        targetAxisReferenceIndex = _ref.targetAxisReferenceIndex,\n        cradleContentCount = _ref.newCradleContentCount,\n        scrollblockViewportPixelOffset = _ref.targetScrollblockViewportPixelOffset;\n      var axisViewportPixelOffset = targetAxisViewportPixelOffset; // semantics\n      // ----------------------[ 4. get and config content ]----------------------\n      // returns content constrained by cradleRowcount\n      var _ref2 = (0, contentfunctions_1.getCellFrameComponentList)({\n          cacheAPI: cacheAPI,\n          cradleInheritedProperties: cradleInheritedProperties,\n          cradleInternalProperties: cradleInternalProperties,\n          cradleContentCount: cradleContentCount,\n          cradleReferenceIndex: targetCradleReferenceIndex,\n          listStartChangeCount: 0,\n          listEndChangeCount: cradleContentCount,\n          workingContentList: workingContentList,\n          instanceIdCounterRef: _this.instanceIdCounterRef,\n          styles: styles,\n          placeholderMessages: placeholderMessages\n        }),\n        _ref3 = _slicedToArray(_ref2, 1),\n        newcontentlist = _ref3[0];\n      // update cradleContentProps from newcontentlist\n      cradleContentProps.size = newcontentlist.length;\n      if (cradleContentProps.size) {\n        var lowindex = newcontentlist[0].props.index,\n          highindex = lowindex + cradleContentProps.size - 1;\n        Object.assign(cradleContentProps, {\n          lowindex: lowindex,\n          highindex: highindex,\n          axisReferenceIndex: targetAxisReferenceIndex,\n          SOL: virtualListProps.lowindex == lowindex,\n          EOL: virtualListProps.highindex == highindex\n        });\n      } else {\n        Object.assign(cradleContentProps, {\n          lowindex: undefined,\n          highindex: undefined,\n          axisReferenceIndex: undefined,\n          SOL: undefined,\n          EOL: undefined\n        });\n      }\n      // set or cancel first row offset if within cradle\n      var gridstart;\n      if (cradleContentProps.SOL === true && !(virtualListProps.baserowblanks === undefined || virtualListProps.baserowblanks === 0)) {\n        gridstart = "".concat(virtualListProps.baserowblanks + 1);\n      } else {\n        gridstart = \'unset\';\n      }\n      var firstcomponent = newcontentlist[0];\n      if (!firstcomponent) return; // possible child dismounts with nested scrollers\n      var gridstartstyle;\n      if (orientation == \'vertical\') {\n        gridstartstyle = {\n          gridColumnStart: gridstart\n        };\n      } else {\n        gridstartstyle = {\n          gridRowStart: gridstart\n        };\n      }\n      var revisedcomponent = react_1["default"].cloneElement(firstcomponent, {\n        gridstartstyle: gridstartstyle\n      });\n      newcontentlist[0] = revisedcomponent;\n      var _ref4 = (0, contentfunctions_1.allocateContentList)({\n          contentlist: newcontentlist,\n          axisReferenceIndex: targetAxisReferenceIndex,\n          layoutHandler: layoutHandler\n          // listlowindex,\n        }),\n        _ref5 = _slicedToArray(_ref4, 2),\n        headcontentlist = _ref5[0],\n        tailcontentlist = _ref5[1];\n      cradleContent.cradleModelComponents = newcontentlist;\n      cradleContent.headModelComponents = headcontentlist;\n      cradleContent.tailModelComponents = tailcontentlist;\n      cradlePositionData.targetAxisReferencePosition = targetAxisReferenceIndex - listlowindex;\n      cradlePositionData.targetAxisViewportPixelOffset = axisViewportPixelOffset;\n      if (serviceHandler.callbacks.referenceIndexCallback) {\n        var cstate = cradleState;\n        serviceHandler.callbacks.referenceIndexCallback(targetAxisReferenceIndex, \'setCradleContent\', cstate);\n      }\n      //  ----------------------[ 5. set CSS ]-----------------------\n      // reset scrollblock Offset and length\n      var scrollblockElement = viewportElement.firstChild;\n      var blockbaselength = listRowcount * baseRowPixelLength - gap // final cell has no trailing gap\n      + padding * 2; // leading and trailing padding\n      if (cradleState == \'pivot\') {\n        if (orientation == \'vertical\') {\n          scrollblockElement.style.left = null;\n        } else {\n          scrollblockElement.style.top = null;\n        }\n      }\n      if (orientation == \'vertical\') {\n        scrollblockElement.style.top = null;\n        scrollblockElement.style.height = blockbaselength + \'px\';\n      } else {\n        scrollblockElement.style.left = null;\n        scrollblockElement.style.width = blockbaselength + \'px\';\n      }\n      cradlePositionData.blockScrollPos = scrollblockViewportPixelOffset;\n      // avoid bogus call to updateCradleContent\n      scrollHandler.resetScrollData(scrollblockViewportPixelOffset);\n      viewportElement[cradlePositionData.blockScrollProperty] = cradlePositionData.blockScrollPos;\n      var cradleElements = layoutHandler.elements;\n      var axisElement = cradleElements.axisRef.current,\n        headElement = cradleElements.headRef.current;\n      var axisScrollblockPixelOffset = scrollblockViewportPixelOffset + axisViewportPixelOffset;\n      if (orientation == \'vertical\') {\n        var top = axisScrollblockPixelOffset;\n        axisElement.style.top = top + \'px\';\n        axisElement.style.left = \'auto\';\n        headElement.style.padding = headcontentlist.length ? "".concat(padding, "px ").concat(padding, "px ").concat(gap, "px ").concat(padding, "px") : "".concat(padding, "px ").concat(padding, "px 0px ").concat(padding, "px");\n      } else {\n        // orientation = \'horizontal\'\n        var left = axisScrollblockPixelOffset;\n        axisElement.style.top = \'auto\';\n        axisElement.style.left = left + \'px\';\n        headElement.style.padding = headcontentlist.length ? "".concat(padding, "px ").concat(gap, "px ").concat(padding, "px ").concat(padding, "px") : "".concat(padding, "px 0px ").concat(padding, "px ").concat(padding, "px");\n      }\n    };\n    // ==================[ UPDATE CONTENT through scroll ]========================\n    // updateCradleContent does not touch the viewport element\'s scroll position for the scrollblock\n    // instead it reconfigures elements within the cradle. It is called solely from\n    // axisTriggerlinesObserverCallback of interruptHandler.\n    // typically called for scroll action, but can also be called if the triggerLineCell changes\n    // size with variant layout.\n    this.updateCradleContent = function () {\n      // ----------------------[ 1. initialize ]-------------------------\n      var _a;\n      var cradleParameters = _this.cradleParameters,\n        cradleContent = _this.content,\n        viewportElement = cradleParameters.ViewportContextPropertiesRef.current.elementRef.current,\n        cradleInheritedProperties = cradleParameters.cradleInheritedPropertiesRef.current,\n        cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current,\n        cradleHandlers = cradleParameters.handlersRef.current,\n        cacheAPI = cradleHandlers.cacheAPI,\n        layoutHandler = cradleHandlers.layoutHandler,\n        stateHandler = cradleHandlers.stateHandler,\n        interruptHandler = cradleHandlers.interruptHandler,\n        serviceHandler = cradleHandlers.serviceHandler,\n        shiftinstruction = interruptHandler.shiftinstruction,\n        triggerViewportReferencePixelPos = interruptHandler.triggerViewportReferencePixelPos,\n        cradleElements = layoutHandler.elements,\n        cradlePositionData = layoutHandler.cradlePositionData,\n        orientation = cradleInheritedProperties.orientation,\n        cache = cradleInheritedProperties.cache,\n        styles = cradleInheritedProperties.styles,\n        placeholderMessages = cradleInheritedProperties.placeholderMessages,\n        layout = cradleInheritedProperties.layout,\n        cellHeight = cradleInheritedProperties.cellHeight,\n        cellWidth = cradleInheritedProperties.cellWidth,\n        padding = cradleInheritedProperties.padding,\n        gap = cradleInheritedProperties.gap,\n        scrollerID = cradleInheritedProperties.scrollerID,\n        virtualListProps = cradleInternalProperties.virtualListProps,\n        cradleContentProps = cradleInternalProperties.cradleContentProps,\n        crosscount = virtualListProps.crosscount,\n        listlowindex = virtualListProps.lowindex;\n      // if (interruptHandler.signals.repositioningRequired) return\n      // new vars\n      var scrollPos = orientation == \'vertical\' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n      var modelcontentlist = cradleContent.cradleModelComponents || [];\n      var previousCradleReferenceIndex = ((_a = modelcontentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index) || 0;\n      // --------------------------------[ 3. Calculate shifts ]-------------------------------\n      // cradle properties\n      var _ref6 = (0, contentfunctions_1.calculateShiftSpecs)({\n          shiftinstruction: shiftinstruction,\n          triggerViewportReferencePixelPos: triggerViewportReferencePixelPos,\n          scrollPos: scrollPos,\n          scrollblockElement: viewportElement.firstChild,\n          cradleInheritedProperties: cradleInheritedProperties,\n          cradleContentProps: cradleContentProps,\n          virtualListProps: virtualListProps,\n          cradleContent: cradleContent,\n          cradleElements: cradleElements\n        }),\n        cradleItemShift = _ref6.cradleReferenceItemShift,\n        axisReferenceIndex = _ref6.newAxisReferenceIndex,\n        axisItemShift = _ref6.axisReferenceItemShift,\n        cradleContentCount = _ref6.newCradleContentCount,\n        listStartChangeCount = _ref6.listStartChangeCount,\n        listEndChangeCount = _ref6.listEndChangeCount,\n        newAxisViewportPixelOffset = _ref6.newAxisViewportPixelOffset;\n      var axisViewportPixelOffset = newAxisViewportPixelOffset;\n      var isShift = !(axisItemShift == 0 && cradleItemShift == 0);\n      var axisElement = cradleElements.axisRef.current;\n      var headElement = cradleElements.headRef.current;\n      // the triggerlines will be moved, so disconnect them from their observer.\n      // they are reconnected with \'renderupdatedcontent\' state in cradle.tsx, or at \'finishupdateforvariability\'\n      //    for variable content\n      interruptHandler.triggerlinesIntersect.disconnect();\n      // abandon option; nothing to do but reposition\n      if (!isShift) {\n        // can happen first row; oversized last row\n        cradlePositionData.targetAxisViewportPixelOffset = axisViewportPixelOffset;\n        _this.applyStyling({\n          layout: layout,\n          orientation: orientation,\n          padding: padding,\n          gap: gap,\n          cellHeight: cellHeight,\n          cellWidth: cellWidth,\n          crosscount: crosscount,\n          axisReferenceIndex: axisReferenceIndex,\n          axisViewportPixelOffset: axisViewportPixelOffset,\n          scrollPos: scrollPos,\n          headcontent: cradleContent.headModelComponents,\n          axisElement: axisElement,\n          headElement: headElement,\n          listlowindex: listlowindex\n        });\n        return;\n      }\n      // ----------------------------------[ 4. reconfigure cradle content ]--------------------------\n      // collect changed content\n      var updatedContentList,\n        deletedContentItems = [];\n      if (listStartChangeCount || listEndChangeCount) {\n        // if either is non-0 then modify content\n        var _ref7 = (0, contentfunctions_1.getCellFrameComponentList)({\n          cacheAPI: cacheAPI,\n          cradleInheritedProperties: cradleInheritedProperties,\n          cradleInternalProperties: cradleInternalProperties,\n          cradleContentCount: cradleContentCount,\n          workingContentList: modelcontentlist,\n          listStartChangeCount: listStartChangeCount,\n          listEndChangeCount: listEndChangeCount,\n          cradleReferenceIndex: previousCradleReferenceIndex,\n          instanceIdCounterRef: _this.instanceIdCounterRef,\n          styles: styles,\n          placeholderMessages: placeholderMessages\n        });\n        var _ref8 = _slicedToArray(_ref7, 2);\n        updatedContentList = _ref8[0];\n        deletedContentItems = _ref8[1];\n        cradleContentProps.size = updatedContentList.length;\n        if (cradleContentProps.size) {\n          var lowindex = updatedContentList[0].props.index,\n            highindex = lowindex + cradleContentProps.size - 1;\n          Object.assign(cradleContentProps, {\n            lowindex: lowindex,\n            highindex: highindex,\n            axisReferenceIndex: axisReferenceIndex,\n            SOL: virtualListProps.lowindex == lowindex,\n            EOL: virtualListProps.highindex == highindex\n          });\n        } else {\n          Object.assign(cradleContentProps, {\n            lowindex: undefined,\n            highindex: undefined,\n            axisReferenceIndex: undefined,\n            SOL: undefined,\n            EOL: undefined\n          });\n        }\n        var gridstart;\n        if (cradleContentProps.SOL === true && !(virtualListProps.baserowblanks === undefined || virtualListProps.baserowblanks === 0)) {\n          gridstart = "".concat(virtualListProps.baserowblanks + 1);\n        } else {\n          gridstart = \'unset\';\n        }\n        var firstcomponent = updatedContentList[0];\n        var gridstartstyle;\n        if (orientation == \'vertical\') {\n          gridstartstyle = {\n            gridColumnStart: gridstart\n          };\n        } else {\n          gridstartstyle = {\n            gridRowStart: gridstart\n          };\n        }\n        var revisedcomponent = react_1["default"].cloneElement(firstcomponent, {\n          gridstartstyle: gridstartstyle\n        });\n        updatedContentList[0] = revisedcomponent;\n      } else {\n        updatedContentList = modelcontentlist;\n        Object.assign(cradleContentProps, {\n          axisReferenceIndex: axisReferenceIndex\n        });\n      }\n      if (deletedContentItems.length && cache == \'cradle\') {\n        var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n        var dListCallback;\n        if (deleteListCallback) {\n          dListCallback = function dListCallback(deleteList) {\n            deleteListCallback(\'pare cache to cradle\', deleteList);\n          };\n        }\n        (0, contentfunctions_1.deletePortals)(cacheAPI, deletedContentItems, dListCallback);\n      }\n      // ----------------------------------[ 5. allocate cradle content ]--------------------------\n      var _ref9 = (0, contentfunctions_1.allocateContentList)({\n          contentlist: updatedContentList,\n          axisReferenceIndex: axisReferenceIndex,\n          layoutHandler: layoutHandler\n          // listlowindex,\n        }),\n        _ref10 = _slicedToArray(_ref9, 2),\n        headcontent = _ref10[0],\n        tailcontent = _ref10[1];\n      cradleContent.cradleModelComponents = updatedContentList;\n      cradleContent.headModelComponents = headcontent;\n      cradleContent.tailModelComponents = tailcontent;\n      if (serviceHandler.callbacks.referenceIndexCallback) {\n        var cstate = stateHandler.cradleStateRef.current;\n        serviceHandler.callbacks.referenceIndexCallback(axisReferenceIndex, \'updateCradleContent\', cstate);\n      }\n      // -------------------------------[ 6. css changes ]-------------------------\n      cradlePositionData.targetAxisReferencePosition = axisReferenceIndex - listlowindex;\n      cradlePositionData.targetAxisViewportPixelOffset = axisViewportPixelOffset;\n      if (isShift) cacheAPI.renderPortalLists();\n      _this.applyStyling({\n        layout: layout,\n        orientation: orientation,\n        padding: padding,\n        gap: gap,\n        cellHeight: cellHeight,\n        cellWidth: cellWidth,\n        crosscount: crosscount,\n        axisReferenceIndex: axisReferenceIndex,\n        axisViewportPixelOffset: axisViewportPixelOffset,\n        scrollPos: scrollPos,\n        headcontent: headcontent,\n        axisElement: axisElement,\n        headElement: headElement,\n        listlowindex: listlowindex\n      });\n      // load new display data\n      cradleContent.headDisplayComponents = cradleContent.headModelComponents;\n      cradleContent.tailDisplayComponents = cradleContent.tailModelComponents;\n    };\n    // move the offset of the axis\n    this.applyStyling = function (_ref11) {\n      var layout = _ref11.layout,\n        orientation = _ref11.orientation,\n        padding = _ref11.padding,\n        gap = _ref11.gap,\n        cellHeight = _ref11.cellHeight,\n        cellWidth = _ref11.cellWidth,\n        crosscount = _ref11.crosscount,\n        axisReferenceIndex = _ref11.axisReferenceIndex,\n        axisViewportPixelOffset = _ref11.axisViewportPixelOffset,\n        scrollPos = _ref11.scrollPos,\n        headcontent = _ref11.headcontent,\n        axisElement = _ref11.axisElement,\n        headElement = _ref11.headElement,\n        listlowindex = _ref11.listlowindex;\n      if (layout == \'variable\') return; // there\'s a separate routine for variable adjustments and css\n      // --------------\n      // Safari when zoomed drifts (calc precision one presumes). This is a hack to correct that.\n      var preAxisVirtualRows = Math.ceil((axisReferenceIndex - listlowindex) / crosscount);\n      var baseCellLength = (orientation == \'vertical\' ? cellHeight : cellWidth) + gap;\n      var testScrollPos = baseCellLength * preAxisVirtualRows + padding - axisViewportPixelOffset;\n      var scrollDiff = testScrollPos - scrollPos;\n      if (scrollDiff) {\n        axisViewportPixelOffset += scrollDiff;\n      }\n      var topAxisPos, leftAxisPos; // available for debug\n      if (orientation == \'vertical\') {\n        topAxisPos = scrollPos + axisViewportPixelOffset;\n        axisElement.style.top = topAxisPos + \'px\';\n        axisElement.style.left = \'auto\';\n        headElement.style.padding = headcontent.length ? "".concat(padding, "px ").concat(padding, "px ").concat(gap, "px ").concat(padding, "px") : "".concat(padding, "px ").concat(padding, "px 0px ").concat(padding, "px");\n      } else {\n        // \'horizontal\'\n        leftAxisPos = scrollPos + axisViewportPixelOffset;\n        axisElement.style.top = \'auto\';\n        axisElement.style.left = leftAxisPos + \'px\';\n        headElement.style.padding = headcontent.length ? "".concat(padding, "px ").concat(gap, "px ").concat(padding, "px ").concat(padding, "px") : "".concat(padding, "px 0px ").concat(padding, "px ").concat(padding, "px");\n      }\n    };\n    // ===================[ RECONFIGURE THE SCROLLBLOCK FOR VARIABLE CONTENT ]=======================\n    /*\n        blockScrollPos is the amount the scrollBlock is scrolled to reveal the centre of the Cradle\n            at the edge of the Viewport\n        \n        newAxisScrollblockOffset is the exact offset of blockScrollPos, plus the axisViewportOffset\n        \n        axisViewportOffset is the amount the axis is ahead of the Viewport edge\n        \n        the length of the Scrollblock is shortened by the amount the measured tail length differs from the\n            base tail length\n    \n        Called for variable layout only. All DOM elements should have been rendered at this point\n        sets CSS: scrollblockElement top and height (or left and width), and axisElement top (or left)\n        to get closer to natural proportions to minimize janky scroll thumb\n    */\n    this.adjustScrollblockForVariability = function (source) {\n      // ----------------------[ setup base values and references ]------------------------\n      // resources...\n      var cradleParameters = _this.cradleParameters,\n        cradleHandlers = cradleParameters.handlersRef.current,\n        ViewportContextProperties = cradleParameters.ViewportContextPropertiesRef.current,\n        cradleInheritedProperties = cradleParameters.cradleInheritedPropertiesRef.current,\n        cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current,\n        layoutHandler = cradleHandlers.layoutHandler,\n        scrollHandler = cradleHandlers.scrollHandler,\n        interruptHandler = cradleHandlers.interruptHandler,\n        cradleElements = layoutHandler.elements,\n        cradlePositionData = layoutHandler.cradlePositionData,\n        axisReferencePosition = cradlePositionData.targetAxisReferencePosition,\n        axisViewportPixelOffset = cradlePositionData.targetAxisViewportPixelOffset,\n        viewportElement = ViewportContextProperties.elementRef.current,\n        scrollblockElement = viewportElement.firstChild,\n        headGridElement = cradleElements.headRef.current,\n        tailGridElement = cradleElements.tailRef.current,\n        axisElement = cradleElements.axisRef.current,\n        orientation = cradleInheritedProperties.orientation,\n        gap = cradleInheritedProperties.gap,\n        padding = cradleInheritedProperties.padding,\n        cellHeight = cradleInheritedProperties.cellHeight,\n        cellWidth = cradleInheritedProperties.cellWidth,\n        virtualListProps = cradleInternalProperties.virtualListProps,\n        cradleContentProps = cradleInternalProperties.cradleContentProps,\n        crosscount = virtualListProps.crosscount,\n        listRowcount = virtualListProps.rowcount,\n        listlowindex = virtualListProps.lowindex,\n        listrowshift = virtualListProps.rowshift;\n\n      // ------------------------[ calculations ]------------------------\n      var axisReferenceIndex = axisReferencePosition + listlowindex;\n      // rowcounts and row offsets for positioning\n      // listRowcount taken from internal properties above\n      var headRowCount = Math.ceil(headGridElement.childNodes.length / crosscount),\n        tailRowCount = Math.ceil(tailGridElement.childNodes.length / crosscount);\n      // reference rows - cradle first/last; axis; list end\n      var axisReferenceRow = Math.floor(axisReferenceIndex / crosscount);\n      var cradleReferenceRow = axisReferenceRow - headRowCount,\n        cradleLastRow = axisReferenceRow + (tailRowCount - 1),\n        listLastRow = listRowcount - 1 + listrowshift;\n      var preCradleRowCount = cradleReferenceRow - listrowshift,\n        postCradleRowCount = listLastRow - cradleLastRow;\n      // base pixel values\n      var baseCellLength = (orientation == \'vertical\' ? cellHeight : cellWidth) + gap;\n      var measuredTailPixelLength = orientation == \'vertical\' ? tailGridElement.offsetHeight : tailGridElement.offsetWidth;\n      var basePostCradlePixelLength = postCradleRowCount * baseCellLength;\n      var computedPostAxisPixelLength = basePostCradlePixelLength + measuredTailPixelLength;\n      // base figures used for preAxis #s for compatibility with repositioning, which uses base figures\n      var basePreAxisPixelLength = (preCradleRowCount + headRowCount) * baseCellLength + padding;\n      // ------------------------[ layout adjustments ]----------------------\n      interruptHandler.signals.pauseCradleIntersectionObserver = true;\n      var computedScrollblockPixelLength = basePreAxisPixelLength + computedPostAxisPixelLength;\n      var blockScrollPos = basePreAxisPixelLength - axisViewportPixelOffset;\n      var newAxisScrollblockPixelOffset = blockScrollPos + axisViewportPixelOffset; // ie. basePreAxisPixelLength, but semantics\n      if (orientation == \'vertical\') {\n        axisElement.style.top = newAxisScrollblockPixelOffset + \'px\';\n        scrollblockElement.style.height = computedScrollblockPixelLength + \'px\';\n      } else {\n        // \'horizontal\'\n        axisElement.style.left = newAxisScrollblockPixelOffset + \'px\';\n        scrollblockElement.style.width = computedScrollblockPixelLength + \'px\';\n      }\n      // -----------------------[ scrollPos adjustment ]-------------------------\n      if (orientation == \'vertical\') {\n        headGridElement.style.padding = headRowCount ? "".concat(padding, "px ").concat(padding, "px ").concat(gap, "px ").concat(padding, "px") : "".concat(padding, "px ").concat(padding, "px 0px ").concat(padding, "px");\n      } else {\n        headGridElement.style.padding = headRowCount ? "".concat(padding, "px ").concat(gap, "px ").concat(padding, "px ").concat(padding, "px") : "".concat(padding, "px 0px ").concat(padding, "px ").concat(padding, "px");\n      }\n      if (!(0, InfiniteGridScroller_1.isSafariIOS)()) {\n        // adjust blockScrollPos directly - most browsers including Safari desktop\n        cradlePositionData.blockScrollPos = blockScrollPos;\n        viewportElement[cradlePositionData.blockScrollProperty] = blockScrollPos;\n        scrollHandler.resetScrollData(blockScrollPos);\n      } else {\n        // for Safari iOS\n        // temporarily adjust scrollblockElement offset; iOSonAfterScroll transfers shift to blockScrollPos\n        // - direct change of scrollTop/ScrollLeft in Safari iOS is ignored by the browser momentum engine\n        var startingScrollPos = orientation == \'vertical\' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n        var scrollDiff = blockScrollPos - startingScrollPos;\n        if (orientation == \'vertical\') {\n          scrollblockElement.style.top = -scrollDiff + \'px\';\n        } else {\n          scrollblockElement.style.left = -scrollDiff + \'px\';\n        }\n      }\n      // check for gotoIndex or resize overshoot\n      if (source == \'setcradle\' && !postCradleRowCount) {\n        var viewportPixelLength = orientation == \'vertical\' ? viewportElement.offsetHeight : viewportElement.offsetWidth;\n        var alignedEndPosDiff = axisViewportPixelOffset + measuredTailPixelLength - viewportPixelLength;\n        if (alignedEndPosDiff < 0) {\n          // fill the bottom of the viewport using scrollBy\n          var scrollByY = orientation == \'vertical\' ? alignedEndPosDiff : 0;\n          var scrollByX = orientation == \'vertical\' ? 0 : alignedEndPosDiff;\n          viewportElement.scrollBy(scrollByX, scrollByY);\n        }\n      }\n    };\n    // ========================= [ INTERNAL CONTENT MANAGEMENT SERVICES ]=====================\n    this.guardAgainstRunawayCaching = function () {\n      var _this$cradleParameter2 = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n        cacheMax = _this$cradleParameter2.cacheMax,\n        MAX_CACHE_OVER_RUN = _this$cradleParameter2.MAX_CACHE_OVER_RUN;\n      var cacheAPI = _this.cradleParameters.handlersRef.current.cacheAPI;\n      var modelComponentList = _this.content.cradleModelComponents;\n      if (cacheAPI.guardAgainstRunawayCaching(cacheMax, modelComponentList.length, MAX_CACHE_OVER_RUN)) {\n        _this.pareCacheToMax();\n      }\n    };\n    this.pareCacheToMax = function () {\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var cache = cradleInheritedProperties.cache,\n        scrollerID = cradleInheritedProperties.scrollerID;\n      if (cache == \'keepload\') {\n        var cradleHandlers = _this.cradleParameters.handlersRef.current;\n        var cacheAPI = cradleHandlers.cacheAPI,\n          serviceHandler = cradleHandlers.serviceHandler;\n        var modelIndexList = _this.getModelIndexList();\n        var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n        var dListCallback;\n        if (deleteListCallback) {\n          dListCallback = function dListCallback(deleteList) {\n            deleteListCallback(\'pare cache to cacheMax\', deleteList);\n          };\n        }\n        if (cacheAPI.pareCacheToMax(cradleInheritedProperties.cacheMax, modelIndexList, dListCallback)) {\n          cacheAPI.renderPortalLists();\n        }\n      }\n    };\n    // ==========================[ EXTERNAL SERVICE SUPPORT ]=======================\n    // supports clearCache\n    this.clearCradle = function () {\n      var cradleContent = _this.content;\n      // const { cacheAPI } = this.cradleParameters.handlersRef.current\n      cradleContent.cradleModelComponents = [];\n      cradleContent.headModelComponents = [];\n      cradleContent.tailModelComponents = [];\n    };\n    this.cradleParameters = cradleParameters;\n  }\n  // called from serviceHandler getCradleIndexMap\n  // also supports pareCacheToMax, matchCacheToCradle\n  _createClass(ContentHandler, [{\n    key: "getModelIndexList",\n    value: function getModelIndexList() {\n      var cradleModelComponents = this.content.cradleModelComponents;\n      if (!cradleModelComponents) {\n        return [];\n      } else {\n        return cradleModelComponents.map(function (item) {\n          return item.props.index;\n        });\n      }\n    }\n    // supports moveIndex and insertRemoveIndex, \n    // updates cradle contiguous items from startChangeIndex or start of cradle\n  }, {\n    key: "synchronizeCradleItemIDsToCache",\n    value: function synchronizeCradleItemIDsToCache(updatedIndexList) {\n      var isInsertRemove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var startChangeIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      // asssemble resources\n      var cacheAPI = this.cradleParameters.handlersRef.current.cacheAPI;\n      // const { indexToItemIDMap } = cacheAPI.cacheProps\n      var indexToItemIDMap = cacheAPI.indexToItemIDMap;\n      var cradleModelComponents = this.content.cradleModelComponents;\n      var cradleContentProps = this.cradleParameters.cradleInternalPropertiesRef.current.cradleContentProps;\n      if (cradleContentProps.size == 0) return;\n      var lowSpan = cradleContentProps.lowindex,\n        highSpan = cradleContentProps.highindex;\n      var startIndex, endIndex;\n      if (isInsertRemove) {\n        if (startChangeIndex > highSpan) return;\n        startIndex = startChangeIndex;\n        endIndex = highSpan;\n      } else {\n        // move\n        if (updatedIndexList.length == 0) return;\n        startIndex = updatedIndexList[0];\n        endIndex = updatedIndexList.at(-1);\n      }\n      var updatedSpan = endIndex - startIndex + 1;\n      var firstIndex = startIndex;\n      if (firstIndex > highSpan) return;\n      if (firstIndex < lowSpan) firstIndex = lowSpan;\n      var lowPtr = firstIndex - lowSpan;\n      var highPtr = isInsertRemove ? cradleModelComponents.length - 1 : Math.min(cradleModelComponents.length - 1, lowPtr + updatedSpan - 1);\n      // function to update individual cradle components to cache changes\n      function processcomponentFn(component, componentptr, componentarray) {\n        var index = component.props.index;\n        var cacheItemID = indexToItemIDMap.get(index);\n        // if cache has no component for cradle item, then get one\n        if (cacheItemID === undefined) {\n          var newItemID = cacheAPI.getNewItemID();\n          componentarray[componentptr] = react_1["default"].cloneElement(component, {\n            itemID: newItemID\n          });\n          return;\n        } else {\n          // match cache itemID to cradle component itemID\n          var cradleItemID = component.props.itemID;\n          var updateptr = updatedIndexList.indexOf(index); // TODO verify need for updatelist\n          if (updateptr != -1) {\n            // update list confirms there is a cache item for this index\n            if (cacheItemID == cradleItemID) return;\n            componentarray[componentptr] = react_1["default"].cloneElement(component, {\n              itemID: cacheItemID\n            });\n          } else {\n            var _newItemID = cacheAPI.getNewItemID();\n            componentarray[componentptr] = react_1["default"].cloneElement(component, {\n              itemID: _newItemID\n            });\n          }\n        }\n      }\n      for (var ptr = lowPtr; ptr <= highPtr; ptr++) {\n        processcomponentFn(cradleModelComponents[ptr], ptr, cradleModelComponents);\n      }\n    }\n    // supports remapIndexes\n  }, {\n    key: "createNewItemIDs",\n    value: function createNewItemIDs(newList) {\n      if (!newList.length) return;\n      var cacheAPI = this.cradleParameters.handlersRef.current.cacheAPI;\n      var cradleModelComponents = this.content.cradleModelComponents;\n      var cradleContentProps = this.cradleParameters.cradleInternalPropertiesRef.current.cradleContentProps;\n      if (cradleContentProps.size == 0) return;\n      var lowSpan = cradleContentProps.lowindex,\n        highSpan = cradleContentProps.highindex;\n      function processcomponentFn(newlistindex) {\n        if (newlistindex < lowSpan || newlistindex > highSpan) return; // defensive\n        var cradlePtr = newlistindex - lowSpan;\n        var component = cradleModelComponents[cradlePtr];\n        var newItemID = cacheAPI.getNewItemID();\n        cradleModelComponents[cradlePtr] = react_1["default"].cloneElement(component, {\n          itemID: newItemID\n        });\n      }\n      newList.forEach(processcomponentFn);\n    }\n    // called from service handler\'s remapIndexes, as last step\n  }, {\n    key: "reconcileCellFrames",\n    value: function reconcileCellFrames(modifiedIndexesList) {\n      if (!modifiedIndexesList.length) return;\n      var cradleModelComponents = this.content.cradleModelComponents;\n      var cacheAPI = this.cradleParameters.handlersRef.current.cacheAPI;\n      var indexToItemIDMap = cacheAPI.indexToItemIDMap;\n      function processComponentFn(component, i, array) {\n        var _component$props = component.props,\n          index = _component$props.index,\n          itemID = _component$props.itemID;\n        if (modifiedIndexesList.includes(index)) {\n          var newItemID = indexToItemIDMap.has(index) ? indexToItemIDMap.get(index) : cacheAPI.getNewItemID();\n          if (newItemID != itemID) {\n            // defensive; shouldn\'t happen\n            array[i] = react_1["default"].cloneElement(component, {\n              itemID: newItemID\n            });\n          }\n        }\n      }\n      cradleModelComponents.forEach(processComponentFn);\n      this.content.headModelComponents = cradleModelComponents.slice(0, this.content.headModelComponents.length);\n      this.content.tailModelComponents = cradleModelComponents.slice(this.content.headModelComponents.length);\n    }\n  }]);\n  return ContentHandler;\n}();\nexports["default"] = ContentHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contenthandler.tsx\n')},"./src/cradle/interrupthandler.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\n// interrupthandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    This module holds the callbacks for the Cradle structure listeners:\n    - cradleIntersectionObserverCallback: responds to the move of both cradle grids outside viewport\n        this initiates the repositioning protocol\n    - axisTriggerlinesObserverCallback: responds to crossing of tailward or headward triggerlines\n        in relation to the viewport, and triggers rollover and re-allocation of cradle content\n\n    viewportResizing interrupts are handled by viewport\n*/\nvar contentfunctions_1 = __webpack_require__(/*! ./contentfunctions */ "./src/cradle/contentfunctions.tsx");\nvar InterruptHandler = /*#__PURE__*/_createClass(function InterruptHandler(cradleParameters) {\n  var _this = this;\n  _classCallCheck(this, InterruptHandler);\n  this.isHeadCradleInView = true;\n  this.isTailCradleInView = true;\n  this.axisTriggerlinesObserverCallback = function (entries) {\n    var _a;\n    if (_this.signals.pauseTriggerlinesObserver) {\n      return;\n    }\n    var viewportElement = _this.cradleParameters.ViewportContextPropertiesRef.current.elementRef.current;\n    var viewportBoundingRect = viewportElement.getBoundingClientRect();\n    if (viewportBoundingRect.width == 0 && viewportBoundingRect.height == 0) {\n      // reparenting or pivoting\n      return;\n    }\n    var _this$cradleParameter = _this.cradleParameters.handlersRef.current,\n      contentHandler = _this$cradleParameter.contentHandler,\n      stateHandler = _this$cradleParameter.stateHandler,\n      scrollHandler = _this$cradleParameter.scrollHandler,\n      layoutHandler = _this$cradleParameter.layoutHandler;\n    if (stateHandler.isMountedRef.current) {\n      var scrollData = scrollHandler.scrollData;\n      scrollData.previousupdate = scrollData.currentupdate;\n      scrollData.currentupdate = scrollData.current;\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n        cradleInternalProperties = _this.cradleParameters.cradleInternalPropertiesRef.current;\n      var orientation = cradleInheritedProperties.orientation;\n      var triggerHistoryRef = cradleInternalProperties.triggerHistoryRef,\n        virtualListProps = cradleInternalProperties.virtualListProps,\n        crosscount = virtualListProps.crosscount,\n        listsize = virtualListProps.size,\n        rowshift = virtualListProps.rowshift;\n      var scrollPos = orientation == \'vertical\' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n      var contentLength = orientation == \'vertical\' ? viewportElement.scrollHeight : viewportElement.scrollWidth;\n      var viewportLength = orientation == \'vertical\' ? viewportElement.offsetHeight : viewportElement.offsetWidth;\n      // for browser top or bottom bounce\n      // fractional pixels can cause this to fail, hence Math.floor)\n      if (scrollPos >= 0 || Math.floor(scrollPos + viewportLength) <= contentLength) {\n        // const viewportBoundingRect = viewportElement.getBoundingClientRect()\n        var _ref = (0, contentfunctions_1.generateShiftInstruction)({\n            scrollerID: cradleInheritedProperties.scrollerID,\n            orientation: orientation,\n            triggerlineEntries: entries,\n            triggerlineSpan: layoutHandler.triggerlineSpan,\n            isFirstRowTriggerConfig: layoutHandler.triggercellIsInTail,\n            viewportBoundingRect: viewportBoundingRect,\n            triggerHistoryRef: triggerHistoryRef\n          }),\n          _ref2 = _slicedToArray(_ref, 2),\n          shiftinstruction = _ref2[0],\n          triggerViewportReferencePixelPos = _ref2[1];\n        if (shiftinstruction == \'moveaxistailward\') {\n          // filter out oversize last row\n          var lastListRowOffset = Math.ceil(listsize / crosscount) - 1 + rowshift;\n          var tailcontentlist = contentHandler.content.tailModelComponents;\n          var previousAxisReferenceIndex = ((_a = tailcontentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index) || 0;\n          var previousAxisRowOffset = Math.ceil(previousAxisReferenceIndex / crosscount);\n          if (lastListRowOffset == previousAxisRowOffset) return;\n        }\n        // none == nothing to do\n        if (shiftinstruction != \'none\') {\n          _this.shiftinstruction = shiftinstruction;\n          _this.triggerViewportReferencePixelPos = triggerViewportReferencePixelPos;\n          stateHandler.setCradleState(\'renderupdatedcontent\');\n        }\n      }\n    }\n  };\n  this.cradleIntersectionObserverCallback = function (entries) {\n    var signals = _this.signals;\n    var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n      stateHandler = _this$cradleParameter2.stateHandler,\n      serviceHandler = _this$cradleParameter2.serviceHandler,\n      scrollHandler = _this$cradleParameter2.scrollHandler,\n      layoutHandler = _this$cradleParameter2.layoutHandler;\n    if (signals.pauseCradleIntersectionObserver) {\n      _this.isHeadCradleInView = _this.isTailCradleInView = true; // experimental\n      return;\n    }\n    var _this$cradleParameter3 = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n      scrollerID = _this$cradleParameter3.scrollerID,\n      layout = _this$cradleParameter3.layout;\n    for (var i = 0; i < entries.length; i++) {\n      var entry = entries[i];\n      if (entry.target.dataset.type == \'head\') {\n        _this.isHeadCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n        ;\n      } else {\n        _this.isTailCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n        ;\n      }\n    }\n\n    _this.signals.repositioningRequired = !_this.isHeadCradleInView && !_this.isTailCradleInView;\n    var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n    if (_this.signals.repositioningRequired)\n      // start reposition if no other interrupts are underway\n      {\n        _this.isHeadCradleInView = _this.isTailCradleInView = true;\n        var cradleState = stateHandler.cradleStateRef.current;\n        if (![\'repositioningRender\', \'finishreposition\', \'renderupdatedcontent\', \'finishupdatedcontent\', \'finishviewportresize\'].includes(cradleState) && !ViewportContextProperties.isResizing) {\n          var viewportElement = ViewportContextProperties.elementRef.current;\n          if (!viewportElement) {\n            // defensive; shouldn\'t happen\n            console.log(\'SYSTEM: viewport element not set in cradleIntersectionObserverCallback (scrollerID)\', scrollerID, ViewportContextProperties);\n            return;\n          }\n          var repositioningFlagCallback = serviceHandler.callbacks.repositioningFlagCallback;\n          repositioningFlagCallback && repositioningFlagCallback(true);\n          if (layout == \'variable\') {\n            // restore base config to scrollblock\n            layoutHandler.restoreBaseScrollblockConfig();\n            scrollHandler.calcImpliedRepositioningData(\'restoreBaseScrollblockConfig\');\n          }\n          _this.signals.pauseTriggerlinesObserver = true;\n          if (stateHandler.isMountedRef.current) {\n            stateHandler.setCradleState(\'startreposition\');\n          }\n        } else {\n          _this.signals.repositioningRequired = false;\n        }\n      }\n  };\n  this.cradleIntersect = {\n    observer: null,\n    callback: this.cradleIntersectionObserverCallback,\n    disconnected: true,\n    connectElements: function connectElements() {\n      if (!_this.cradleIntersect.disconnected) {\n        return;\n      }\n      var observer = _this.cradleIntersect.observer;\n      var cradleElements = _this.cradleParameters.handlersRef.current.layoutHandler.elements;\n      observer.observe(cradleElements.headRef.current);\n      observer.observe(cradleElements.tailRef.current);\n      _this.cradleIntersect.disconnected = false;\n    },\n    disconnect: function disconnect() {\n      _this.cradleIntersect.observer.disconnect();\n      _this.cradleIntersect.disconnected = true;\n    },\n    createObserver: function createObserver() {\n      var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n      _this.cradleIntersect.observer = new IntersectionObserver(_this.cradleIntersect.callback, {\n        root: ViewportContextProperties.elementRef.current,\n        threshold: 0\n      });\n      return _this.cradleIntersect.observer;\n    }\n  };\n  this.triggerlinesIntersect = {\n    observer: null,\n    callback: this.axisTriggerlinesObserverCallback,\n    disconnected: true,\n    connectElements: function connectElements() {\n      if (!_this.triggerlinesIntersect.disconnected) {\n        return;\n      }\n      var observer = _this.triggerlinesIntersect.observer;\n      var cradleElements = _this.cradleParameters.handlersRef.current.layoutHandler.elements;\n      if (cradleElements.triggercellTriggerlineHeadRef.current && cradleElements.triggercellTriggerlineTailRef.current) {\n        observer.observe(cradleElements.triggercellTriggerlineHeadRef.current);\n        observer.observe(cradleElements.triggercellTriggerlineTailRef.current);\n      }\n      _this.triggerlinesIntersect.disconnected = false;\n    },\n    disconnect: function disconnect() {\n      _this.triggerlinesIntersect.observer.disconnect();\n      _this.triggerlinesIntersect.disconnected = true;\n    },\n    createObserver: function createObserver() {\n      var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n      _this.triggerlinesIntersect.observer = new IntersectionObserver(_this.triggerlinesIntersect.callback, {\n        root: ViewportContextProperties.elementRef.current,\n        threshold: 0\n      });\n      return _this.triggerlinesIntersect.observer;\n    }\n  };\n  this.signals = {\n    repositioningRequired: false,\n    pauseTriggerlinesObserver: false,\n    pauseCradleIntersectionObserver: false,\n    pauseCradleResizeObserver: false,\n    pauseScrollingEffects: false\n  };\n  /*\n      invoked for\n      cradle:\n      - change into cache\n      - trigger cradleresizing\n      - trigger reconfiguration\n      - trigger pivot\n      servicehandler:\n      - call reload\n  */\n  this.pauseInterrupts = function () {\n    var signals = _this.signals;\n    signals.pauseTriggerlinesObserver = true;\n    signals.pauseCradleIntersectionObserver = true;\n    signals.pauseCradleResizeObserver = true;\n    signals.pauseScrollingEffects = true;\n  };\n  /*\n      invoked for\n      cradle:\n      - restoreinterrupts\n  */\n  this.restoreInterrupts = function () {\n    var signals = _this.signals;\n    signals.pauseTriggerlinesObserver = false;\n    signals.pauseCradleIntersectionObserver = false;\n    signals.pauseCradleResizeObserver = false;\n    signals.pauseScrollingEffects = false;\n  };\n  this.cradleParameters = cradleParameters;\n});\nexports["default"] = InterruptHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/interrupthandler.tsx\n')},"./src/cradle/layouthandler.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\n// layouthandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    This module holds references to\n    - the structural elements of the cradle\n    - the key control values of the cradle\n\n    The structural elements are the axis, head (grid), tail (grid),\n        and the head and tail triggerlines\n    The key control values are the blockScrollPos & blockXScrollPos (scrollTop or scrollLeft), the block scroll\n        property ("scrollTop" or "scrollLeft"), the targetAxisReferencePosition (first index of the\n        tail block), and the targetAxisViewportPixelOffset (pixels offset from the edge of the\n        viewport)\n*/\nvar InfiniteGridScroller_1 = __webpack_require__(/*! ../InfiniteGridScroller */ "./src/InfiniteGridScroller.tsx");\nvar LayoutHandler = /*#__PURE__*/function () {\n  function LayoutHandler(cradleParameters) {\n    var _this = this;\n    _classCallCheck(this, LayoutHandler);\n    // cradlePositionData controls the relative positions of the scaffold elements\n    this.cradlePositionData = {\n      /*\n          "block" = cradleblock, which is the element that is scrolled\n               blockScrollPos is set by scrollHandler during and after scrolling,\n          and by setCradleContent in contentHandler, which repositions the cradle.\n               blockScrollPos is used by\n              - cradle initialization in response to reparenting interrupt\n              - setCradleContent\n           */\n      blockScrollPos: null,\n      blockXScrollPos: null,\n      /*\n          values can be "scrollTop" or "scrollLeft" (of the viewport element) depending on orientation\n               blockScrollProperty is set by the orientation reconfiguration effect in cradle module.\n               it is used where blockScrollPos is used above.\n      */\n      blockScrollProperty: null,\n      blockXScrollProperty: null,\n      /*\n          targetAxisReferencePosition is set by\n              - setCradleContent\n              - updateCradleContent\n              - layoutHandler (initialization)\n              - scrollHandler (during and after scroll)\n              - host scrollToIndex call\n               targetAxisReferencePosition is used by\n              - scrollTrackerArgs in cradle module\n              - requestedAxisReferenceIndex in setCradleContent\n      */\n      targetAxisReferencePosition: null,\n      /*\n          targetAxisViewportPixelOffset is set by\n              - setCradleContent\n              - updateCradleContent\n              - layoutHandler (initialization)\n              - scrollHandler (during and after scroll)\n              - pivot effect (change of orientation) in cradle module\n               targetAxisViewportPixelOffset is used by\n              - previousAxisOffset in pivot effect\n              - setCradleContent\n           */\n      targetAxisViewportPixelOffset: null // pixels into the viewport\n    };\n    // called by interruptHandler\n    this.restoreBaseScrollblockConfig = function () {\n      var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n      var viewportElement = ViewportContextProperties.elementRef.current;\n      var scrollblockElement = viewportElement.firstChild;\n      var _this$cradleParameter = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n        orientation = _this$cradleParameter.orientation,\n        padding = _this$cradleParameter.padding,\n        gap = _this$cradleParameter.gap,\n        cellHeight = _this$cradleParameter.cellHeight,\n        cellWidth = _this$cradleParameter.cellWidth;\n      var _this$cradleParameter2 = _this.cradleParameters.cradleInternalPropertiesRef.current.virtualListProps,\n        listRowcount = _this$cradleParameter2.rowcount,\n        crosscount = _this$cradleParameter2.crosscount;\n      var _this$cradleParameter3 = _this.cradleParameters.handlersRef.current,\n        scrollHandler = _this$cradleParameter3.scrollHandler,\n        layoutHandler = _this$cradleParameter3.layoutHandler;\n      var cellLength = (orientation == \'vertical\' ? cellHeight : cellWidth) + gap;\n      var baselength = listRowcount * cellLength - gap // final cell has no trailing gap\n      + padding * 2; // leading and trailing padding\n      if (orientation == \'vertical\') {\n        scrollblockElement.style.top = null;\n        scrollblockElement.style.height = baselength + \'px\';\n      } else {\n        scrollblockElement.style.left = null;\n        scrollblockElement.style.width = baselength + \'px\';\n      }\n      var cradlePositionData = layoutHandler.cradlePositionData;\n      var axisReferencePosition = cradlePositionData.targetAxisReferencePosition;\n      var rowReferencePosition = Math.ceil(axisReferencePosition / crosscount);\n      var calculatedBlockScrollPos = rowReferencePosition * cellLength + padding;\n      if ((0, InfiniteGridScroller_1.isSafariIOS)()) {\n        // scrollPos overwritten by Safari iOS momentum engine\n        var originalScrollPos = orientation == \'vertical\' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n        var scrollShift = calculatedBlockScrollPos - originalScrollPos;\n        if (orientation == \'vertical\') {\n          scrollblockElement.style.top = scrollShift;\n        } else {\n          scrollblockElement.style.left = scrollShift;\n        }\n      } else {\n        viewportElement[cradlePositionData.blockScrollProperty] = calculatedBlockScrollPos;\n      }\n      cradlePositionData.blockScrollPos = calculatedBlockScrollPos;\n      scrollHandler.resetScrollData(calculatedBlockScrollPos);\n    };\n    this.cradleParameters = cradleParameters;\n    var _cradleParameters$cra = cradleParameters.cradleInternalPropertiesRef.current.cradleElementsRef.current,\n      axisRef = _cradleParameters$cra.axisRef,\n      headRef = _cradleParameters$cra.headRef,\n      tailRef = _cradleParameters$cra.tailRef,\n      triggercellTriggerlineHeadRef = _cradleParameters$cra.triggercellTriggerlineHeadRef,\n      triggercellTriggerlineTailRef = _cradleParameters$cra.triggercellTriggerlineTailRef;\n    this.elements = {\n      axisRef: axisRef,\n      headRef: headRef,\n      tailRef: tailRef,\n      triggercellTriggerlineHeadRef: triggercellTriggerlineHeadRef,\n      triggercellTriggerlineTailRef: triggercellTriggerlineTailRef\n    };\n    var startingIndex = this.cradleParameters.cradleInheritedPropertiesRef.current.startingIndex;\n    var virtualListProps = this.cradleParameters.cradleInternalPropertiesRef.current.virtualListProps;\n    var listsize = virtualListProps.size,\n      lowindex = virtualListProps.lowindex,\n      highindex = virtualListProps.highindex;\n    if (listsize) {\n      startingIndex = Math.max(startingIndex, lowindex);\n      startingIndex = Math.min(startingIndex, highindex);\n      this.cradlePositionData.targetAxisReferencePosition = startingIndex - lowindex;\n    } else {\n      this.cradlePositionData.targetAxisReferencePosition = 0;\n    }\n    this.cradlePositionData.targetAxisViewportPixelOffset = 0;\n  }\n  _createClass(LayoutHandler, [{\n    key: "scrollerID",\n    get: function get() {\n      return this.cradleParameters.cradleInheritedPropertiesRef.current.scrollerID;\n    }\n  }, {\n    key: "triggerlineSpan",\n    get: function get() {\n      var orientation = this.cradleParameters.cradleInheritedPropertiesRef.current.orientation;\n      var span = orientation == \'vertical\' ? this.elements.triggercellTriggerlineTailRef.current.offsetTop - this.elements.triggercellTriggerlineHeadRef.current.offsetTop :\n      // horizontal\n      this.elements.triggercellTriggerlineTailRef.current.offsetLeft - this.elements.triggercellTriggerlineHeadRef.current.offsetLeft;\n      return span;\n    }\n  }]);\n  return LayoutHandler;\n}();\nexports["default"] = LayoutHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/layouthandler.tsx\n')},"./src/cradle/scrollhandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval("\n\n// scrollhandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    This module holds the response to scrolling. It also triggers an onAfterScroll event (after a timeout)\n    It's main job is to maintain records of scrollPos, targetAxisReferencePosition, and\n        targetAxisViewportPixelOffset\n*/\nvar ScrollHandler = /*#__PURE__*/_createClass(function ScrollHandler(cradleParameters) {\n  var _this = this;\n  _classCallCheck(this, ScrollHandler);\n  this._isIOSscrolling = false;\n  this.iOSonScroll = function () {\n    var signals = _this.cradleParameters.handlersRef.current.interruptHandler.signals;\n    if (signals.pauseScrollingEffects) {\n      return;\n    }\n    if (!_this._isIOSscrolling) {\n      _this._isIOSscrolling = true;\n      _this._onIOSonAfterScrollTimeout = 1000; // iOS sometimes likes to pause before commencing scrolling\n      clearTimeout(_this._onIOSonAfterScrollTimeout);\n      _this._iOSsetTimeoutTimerid = setTimeout(function () {\n        _this._onIOSonAfterScrollTimeout = 250; // back to more responsive once underway\n      }, 900);\n    }\n    var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n    var viewportElement = ViewportContextProperties.elementRef.current;\n    clearTimeout(_this._iOSscrolltimerid);\n    var orientation = _this.cradleParameters.cradleInheritedPropertiesRef.current.orientation;\n    var scrollblockElement = viewportElement.firstChild;\n    var scrollblockLength, viewportLength, blockScrollPos, scrollblockOffset;\n    if (orientation == 'vertical') {\n      scrollblockLength = viewportElement.scrollHeight;\n      viewportLength = viewportElement.offsetHeight;\n      blockScrollPos = viewportElement.scrollTop;\n      scrollblockOffset = scrollblockElement.offsetTop;\n    } else {\n      scrollblockLength = viewportElement.scrollWidth;\n      viewportLength = viewportElement.offsetWidth;\n      blockScrollPos = viewportElement.scrollLeft;\n      scrollblockOffset = scrollblockElement.offsetLeft;\n    }\n    if (blockScrollPos - scrollblockOffset < 0 ||\n    // overshoot start\n    scrollblockLength < blockScrollPos - scrollblockOffset + viewportLength) {\n      // overshoot end\n      _this.iOSonAfterScroll(); // immediate halt and adjust\n    } else {\n      _this._iOSscrolltimerid = setTimeout(function () {\n        _this.iOSonAfterScroll(); // deferred halt and adjust\n      }, _this._onIOSonAfterScrollTimeout);\n    }\n  };\n  this.iOSonAfterScroll = function () {\n    _this._isIOSscrolling = false;\n    var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n    var viewportElement = ViewportContextProperties.elementRef.current;\n    var scrollblockElement = viewportElement.firstChild;\n    var orientation = _this.cradleParameters.cradleInheritedPropertiesRef.current.orientation;\n    var scrollblockOffset = orientation == 'vertical' ? scrollblockElement.offsetTop : scrollblockElement.offsetLeft;\n    var blockScrollPos = orientation == 'vertical' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n    viewportElement.style.overflow = 'hidden';\n    if (orientation == 'vertical') {\n      viewportElement.scrollTop = blockScrollPos - scrollblockOffset;\n      scrollblockElement.style.top = null;\n    } else {\n      // orientation == horizontal\n      viewportElement.scrollLeft = blockScrollPos - scrollblockOffset;\n      scrollblockElement.style.left = null;\n    }\n    viewportElement.style.overflow = 'scroll';\n  };\n  this.scrollData = {\n    start: 0,\n    current: 0,\n    previous: 0,\n    previousupdate: 0,\n    currentupdate: 0\n  };\n  this._scrolltimerid = null;\n  this.isScrolling = false;\n  this.resetScrollData = function (scrollPosition) {\n    var scrollData = _this.scrollData;\n    scrollData.start = scrollData.current = scrollData.previous = scrollData.previousupdate = scrollData.currentupdate = scrollPosition;\n  };\n  this.onScroll = function (e) {\n    var _this$cradleParameter = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n      scrollerID = _this$cradleParameter.scrollerID,\n      ONAFTERSCROLL_TIMEOUT = _this$cradleParameter.ONAFTERSCROLL_TIMEOUT;\n    var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n    // const viewportElement = ViewportContextProperties.elementRef.current\n    var viewportElement = e.currentTarget;\n    var orientation = _this.cradleParameters.cradleInheritedPropertiesRef.current.orientation;\n    var scrollPositionCurrent = orientation == 'vertical' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n    var scrollXPositionCurrent = orientation == 'horizontal' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n    clearTimeout(_this._scrolltimerid);\n    if (viewportElement.clientWidth == 0 && viewportElement.clientHeight == 0) {\n      // in cache\n      return;\n    }\n    if (scrollPositionCurrent < 0) {\n      // for Safari\n      return;\n    }\n    var signals = _this.cradleParameters.handlersRef.current.interruptHandler.signals;\n    if (signals.pauseScrollingEffects) {\n      return;\n    }\n    if (!_this.isScrolling) {\n      _this.isScrolling = true;\n      _this.scrollData.start = scrollPositionCurrent;\n      _this.scrollData.currentupdate = scrollPositionCurrent;\n    }\n    var layoutHandler = _this.cradleParameters.handlersRef.current.layoutHandler;\n    var cradlePositionData = layoutHandler.cradlePositionData;\n    // keep up to date in case of reparenting interrupt\n    cradlePositionData.blockScrollPos = scrollPositionCurrent;\n    cradlePositionData.blockXScrollPos = scrollXPositionCurrent;\n    _this.scrollData.previous = _this.scrollData.current;\n    _this.scrollData.current = scrollPositionCurrent;\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler;\n    var cradleState = stateHandler.cradleStateRef.current;\n    // const { contentHandler, serviceHandler } = this.cradleParameters.handlersRef.current\n    if (!ViewportContextProperties.isResizing) {\n      if (cradleState == 'repositioningRender') {\n        _this.calcImpliedRepositioningData('onScroll');\n      }\n    }\n    _this._scrolltimerid = setTimeout(function () {\n      _this.onAfterScroll();\n    }, ONAFTERSCROLL_TIMEOUT);\n    return false;\n  };\n  this.onAfterScroll = function () {\n    _this.isScrolling = false;\n    var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n      stateHandler = _this$cradleParameter2.stateHandler,\n      contentHandler = _this$cradleParameter2.contentHandler,\n      serviceHandler = _this$cradleParameter2.serviceHandler;\n    // const ViewportContextProperties = this.cradleParameters.ViewportContextPropertiesRef.current,\n    var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    var cradleState = stateHandler.cradleStateRef.current;\n    switch (cradleState) {\n      case 'repositioningRender':\n        // case 'repositioningContinuation':\n        {\n          _this.updateBlockScrollPos();\n          var repositioningFlagCallback = serviceHandler.callbacks.repositioningFlagCallback;\n          repositioningFlagCallback && repositioningFlagCallback(false);\n          stateHandler.setCradleState('finishreposition');\n          break;\n        }\n      default:\n        {\n          if (_this.scrollData.start != _this.scrollData.current || _this.scrollData.current != _this.scrollData.previous) {\n            if (stateHandler.isMountedRef.current) {\n              _this.updateReferenceData();\n            }\n          }\n          break;\n        }\n    }\n    var cache = cradleInheritedProperties.cache;\n    if (cache == 'keepload') {\n      contentHandler.pareCacheToMax();\n    }\n  };\n  // after scroll, but not after repositioning\n  this.updateReferenceData = function () {\n    var _this$cradleParameter3 = _this.cradleParameters.handlersRef.current,\n      stateHandler = _this$cradleParameter3.stateHandler,\n      layoutHandler = _this$cradleParameter3.layoutHandler;\n    var cradleSpecs = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n      ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n    if (!stateHandler.isMountedRef.current) return;\n    var cradleElements = layoutHandler.elements;\n    var axisElement = cradleElements.axisRef.current,\n      viewportElement = ViewportContextProperties.elementRef.current,\n      scrollblockElement = viewportElement.firstChild;\n    var axisViewportPixelOffset;\n    if (cradleSpecs.orientation == 'vertical') {\n      axisViewportPixelOffset = axisElement.offsetTop + scrollblockElement.offsetTop - viewportElement.scrollTop;\n    } else {\n      axisViewportPixelOffset = axisElement.offsetLeft + scrollblockElement.offsetLeft - viewportElement.scrollLeft;\n    }\n    var cradlePositionData = layoutHandler.cradlePositionData;\n    cradlePositionData.targetAxisViewportPixelOffset = axisViewportPixelOffset;\n    if (!ViewportContextProperties.isResizing) {\n      _this.updateBlockScrollPos();\n    }\n  };\n  // called from finishreposition state change call above\n  // called from updateReferenceData\n  this.updateBlockScrollPos = function () {\n    var cradleSpecs = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current;\n    var layoutHandler = _this.cradleParameters.handlersRef.current.layoutHandler;\n    var cradlePositionData = layoutHandler.cradlePositionData;\n    var viewportElement = ViewportContextProperties.elementRef.current;\n    if (!(viewportElement.clientWidth == 0 && viewportElement.clientHeight == 0)) {\n      // in cache\n      if (cradleSpecs.orientation == 'vertical') {\n        cradlePositionData.blockScrollPos = viewportElement.scrollTop;\n        cradlePositionData.blockXScrollPos = viewportElement.scrollLeft;\n      } else {\n        cradlePositionData.blockScrollPos = viewportElement.scrollLeft;\n        cradlePositionData.blockXScrollPos = viewportElement.scrollTop;\n      }\n    }\n  };\n  // TODO update scrollTracker is in use\n  this.calcImpliedRepositioningData = function (source) {\n    var ViewportContextProperties = _this.cradleParameters.ViewportContextPropertiesRef.current,\n      cradleSpecs = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n      virtualListProps = _this.cradleParameters.cradleInternalPropertiesRef.current.virtualListProps;\n    var viewportElement = ViewportContextProperties.elementRef.current,\n      scrollblockElement = viewportElement.firstChild;\n    var orientation = cradleSpecs.orientation;\n    var crosscount = virtualListProps.crosscount,\n      listsize = virtualListProps.size;\n    var scrollPos, cellLength, scrollblockOffset;\n    if (orientation == 'vertical') {\n      scrollPos = viewportElement.scrollTop;\n      cellLength = cradleSpecs.cellHeight + cradleSpecs.gap;\n      scrollblockOffset = scrollblockElement.offsetTop;\n    } else {\n      scrollPos = viewportElement.scrollLeft;\n      cellLength = cradleSpecs.cellWidth + cradleSpecs.gap;\n      scrollblockOffset = scrollblockElement.offsetLeft;\n    }\n    var axisPixelOffset = cellLength - (scrollPos + scrollblockOffset) % cellLength;\n    if (axisPixelOffset == cellLength + cradleSpecs.padding) {\n      axisPixelOffset = 0;\n    }\n    var axisRowPosition = Math.ceil((scrollPos - cradleSpecs.padding) / cellLength);\n    var axisReferencePosition = axisRowPosition * crosscount;\n    axisReferencePosition = Math.min(axisReferencePosition, listsize - 1);\n    var diff = axisReferencePosition % crosscount;\n    axisReferencePosition -= diff;\n    if (axisReferencePosition == 0) axisPixelOffset = 0; // defensive\n    var cradlePositionData = _this.cradleParameters.handlersRef.current.layoutHandler.cradlePositionData;\n    cradlePositionData.targetAxisReferencePosition = axisReferencePosition;\n    cradlePositionData.targetAxisViewportPixelOffset = axisPixelOffset;\n    source == 'onScroll' && ViewportContextProperties.scrollTrackerAPIRef.current.updateReposition(axisReferencePosition);\n  };\n  this.cradleParameters = cradleParameters;\n});\nexports[\"default\"] = ScrollHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/scrollhandler.tsx\n")},"./src/cradle/servicehandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval('\n\n// servicehandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    This module fields service requests from the host. There are two forms\n    - streaming from the scroller to the host\n    - function calls from the user to the scroller\n\n    For the list of data streams, see the constructor.\n\n    The function calls avaiable to the host are:\n\n        scrollToIndex,\n        reload,\n        setListsize, *deprectated* for proper camel case\n        setListSize,\n        setListRange,\n        prependIndexCount,\n        appendIndexCount,\n        clearCache,\n\n        getCacheIndexMap,\n        getCacheItemMap,\n        getCradleIndexMap,\n        getPropertiesSnapshot,\n\n        insertIndex,\n        removeIndex,\n        moveIndex,\n        remapIndexes,\n    \n    The functions listed are defined in this module.\n\n    There are important supporting functions for these in cacheAPI and contentHandler. stateHandler is\n    often invoked by service functions to change Cradle state upon servicing requests.\n*/\nvar isBlank = function isBlank(value) {\n  var testvalue = value !== null && value !== void 0 ? value : \'\';\n  return testvalue === \'\';\n};\nvar isNumber = function isNumber(value) {\n  return !isNaN(Number(value)) && !isNaN(parseInt(value));\n};\nvar isInteger = function isInteger(value) {\n  var test = +value;\n  return isNumber(value) && Math.floor(test) == test;\n};\nvar isValueGreaterThanOrEqualToMinValue = function isValueGreaterThanOrEqualToMinValue(compareValue, minValue) {\n  if (!isInteger(compareValue) || !isInteger(minValue)) return false;\n  var testvalue = +compareValue;\n  var testMinValue = +minValue;\n  return testvalue >= testMinValue;\n};\nvar isValueLessThanToOrEqualToMaxValue = function isValueLessThanToOrEqualToMaxValue(compareValue, maxValue) {\n  if (!isInteger(compareValue) || !isInteger(maxValue)) return false;\n  var testvalue = +compareValue;\n  var testMaxValue = +maxValue;\n  return testvalue <= testMaxValue;\n};\nvar errorMessages = {\n  scrollToIndex: \'integer: required, greater than or equal to low index\',\n  setListSize: \'integer: required, greater than or equal to 0\',\n  setListRange: \'array[lowindex,highindex]: required, both integers, highindex greater than or equal to lowindex\',\n  insertFrom: \'insertFrom - integer: required, greater than or equal to low index\',\n  insertRange: \'insertRange - blank, or integer greater than or equal to the "from" index\',\n  removeFrom: \'removeFrom - integer: required, greater than or equal to low index\',\n  removeRange: \'removeRange - blank, or integer greater than or equal to the "from" index\',\n  moveFrom: \'moveFrom - integer: required, greater than or equal to low index\',\n  moveRange: \'moveRange - blank, or integer greater than or equal to the "from" index\',\n  moveTo: \'moveTo - integer: required, greater than or equal to low index\'\n};\nvar ServiceHandler = /*#__PURE__*/_createClass(function ServiceHandler(cradleParameters) {\n  var _this = this;\n  _classCallCheck(this, ServiceHandler);\n  // ========================[ GENERAL ]============================\n  this.reload = function () {\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler;\n    var interruptHandler = _this.cradleParameters.handlersRef.current.interruptHandler;\n    interruptHandler.pauseInterrupts();\n    stateHandler.setCradleState(\'reload\');\n  };\n  this.scrollToIndex = function (index) {\n    var cradleParameters = _this.cradleParameters,\n      cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current,\n      virtualListProps = cradleInternalProperties.virtualListProps,\n      lowindex = virtualListProps.lowindex,\n      size = virtualListProps.size;\n    if (!size) return;\n    var isInvalid = !isInteger(index); //|| \n    if (!isInvalid) {\n      if (!isValueGreaterThanOrEqualToMinValue(index, lowindex)) {\n        index = lowindex;\n      }\n    }\n    index = +index;\n    if (isInvalid) {\n      console.log(\'RIGS ERROR scrollToIndex(index)):\', index, errorMessages.scrollToIndex);\n      return;\n    }\n    var handlers = cradleParameters.handlersRef.current,\n      interruptHandler = handlers.interruptHandler,\n      layoutHandler = handlers.layoutHandler,\n      stateHandler = handlers.stateHandler,\n      signals = interruptHandler.signals;\n    signals.pauseScrollingEffects = true;\n    layoutHandler.cradlePositionData.targetAxisReferencePosition = index - lowindex;\n    stateHandler.setCradleState(\'scrollto\');\n  };\n  // deprecated (camel case)\n  this.setListsize = function (newlistsize) {\n    _this.setListSize(newlistsize);\n  };\n  this.setListSize = function (newlistsize) {\n    newlistsize = +newlistsize;\n    var isInvalid = !isInteger(newlistsize) || !isValueGreaterThanOrEqualToMinValue(newlistsize, 0);\n    if (isInvalid) {\n      console.log(\'RIGS ERROR setListSize(newlistsize)\', newlistsize, errorMessages.setListSize);\n      return;\n    }\n    var _this$cradleParameter = _this.cradleParameters.handlersRef.current,\n      cacheAPI = _this$cradleParameter.cacheAPI,\n      contentHandler = _this$cradleParameter.contentHandler,\n      stateHandler = _this$cradleParameter.stateHandler,\n      deleteListCallback = _this.callbacks.deleteListCallback,\n      currentlistsize = _this.cradleParameters.cradleInternalPropertiesRef.current.virtualListProps.size,\n      cache = _this.cradleParameters.cradleInheritedPropertiesRef.current.cache;\n    var dListCallback;\n    if (deleteListCallback) {\n      dListCallback = function dListCallback(deleteList) {\n        deleteListCallback(\'change list size intervention\', deleteList);\n      };\n    }\n    contentHandler.updateVirtualListSize(newlistsize);\n    cacheAPI.changeCacheListSize(newlistsize, dListCallback);\n    cacheAPI.renderPortalLists();\n    if (cache == \'preload\' && newlistsize > currentlistsize) {\n      stateHandler.setCradleState(\'startpreload\');\n    }\n  };\n  this.setListRange = function (newlistrange) {\n    var isInvalid = !Array.isArray(newlistrange);\n    if (!isInvalid) {\n      isInvalid = !(newlistrange.length == 0 || newlistrange.length == 2);\n      if (!isInvalid && newlistrange.length == 2) {\n        var _newlistrange = newlistrange,\n          _newlistrange2 = _slicedToArray(_newlistrange, 2),\n          lowindex = _newlistrange2[0],\n          highindex = _newlistrange2[1];\n        lowindex = +lowindex;\n        highindex = +highindex;\n        isInvalid = !isInteger(lowindex) || !isInteger(highindex) || !isValueGreaterThanOrEqualToMinValue(highindex, lowindex);\n        if (!isInvalid) newlistrange = [lowindex, highindex];\n      }\n    }\n    if (isInvalid) {\n      console.log(\'RIGS ERROR setListRange(newlistrange)\', newlistrange, errorMessages.setListRange);\n      return;\n    }\n    var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n      cacheAPI = _this$cradleParameter2.cacheAPI,\n      contentHandler = _this$cradleParameter2.contentHandler,\n      stateHandler = _this$cradleParameter2.stateHandler,\n      deleteListCallback = _this.callbacks.deleteListCallback,\n      currentlistrange = _this.cradleParameters.cradleInternalPropertiesRef.current.virtualListProps.range,\n      cache = _this.cradleParameters.cradleInheritedPropertiesRef.current.cache;\n    var dListCallback;\n    if (deleteListCallback) {\n      dListCallback = function dListCallback(deleteList) {\n        deleteListCallback(\'change list range intervention\', deleteList);\n      };\n    }\n    contentHandler.updateVirtualListRange(newlistrange);\n    cacheAPI.changeCacheListRange(newlistrange, dListCallback);\n    cacheAPI.renderPortalLists();\n    if (cache == \'preload\' && newlistrange.length == 2 && (newlistrange[0] < currentlistrange[0] || newlistrange[1] > currentlistrange[1])) {\n      stateHandler.setCradleState(\'startpreload\');\n    }\n  };\n  this.prependIndexCount = function (prependCount) {\n    prependCount = +prependCount;\n    var isInvalid = !isInteger(prependCount) || !isValueGreaterThanOrEqualToMinValue(prependCount, 0);\n    if (isInvalid) {\n      console.log(\'RIGS ERROR, prependIndexCount must be an integer >= 0\');\n      return;\n    }\n    var virtualListProps = _this.cradleParameters.cradleInternalPropertiesRef.current.virtualListProps;\n    var _virtualListProps$ran = _slicedToArray(virtualListProps.range, 2),\n      lowindex = _virtualListProps$ran[0],\n      highindex = _virtualListProps$ran[1];\n    var size = virtualListProps.size;\n    var newlistrange;\n    if (size) {\n      newlistrange = [lowindex - prependCount, highindex];\n    } else {\n      newlistrange = [-prependCount + 1, 0];\n    }\n    _this.setListRange(newlistrange);\n  };\n  this.appendIndexCount = function (appendCount) {\n    appendCount = +appendCount;\n    var isInvalid = !isInteger(appendCount) || !isValueGreaterThanOrEqualToMinValue(appendCount, 0);\n    if (isInvalid) {\n      console.log(\'RIGS ERROR, appendIndexCount must be an integer >= 0\');\n      return;\n    }\n    var virtualListProps = _this.cradleParameters.cradleInternalPropertiesRef.current.virtualListProps;\n    var _virtualListProps$ran2 = _slicedToArray(virtualListProps.range, 2),\n      lowindex = _virtualListProps$ran2[0],\n      highindex = _virtualListProps$ran2[1];\n    var size = virtualListProps.size;\n    var newlistrange;\n    if (size) {\n      newlistrange = [lowindex, highindex + appendCount];\n    } else {\n      newlistrange = [0, appendCount - 1];\n    }\n    _this.setListRange(newlistrange);\n  };\n  // ======================[ GET SNAPSHOTS ]========================\n  this.getCacheIndexMap = function () {\n    var cacheAPI = _this.cradleParameters.handlersRef.current.cacheAPI;\n    return cacheAPI.getCacheIndexMap();\n  };\n  this.getCacheItemMap = function () {\n    var cacheAPI = _this.cradleParameters.handlersRef.current.cacheAPI;\n    return cacheAPI.getCacheItemMap();\n  };\n  this.getCradleIndexMap = function () {\n    var _this$cradleParameter3 = _this.cradleParameters.handlersRef.current,\n      cacheAPI = _this$cradleParameter3.cacheAPI,\n      contentHandler = _this$cradleParameter3.contentHandler;\n    var modelIndexList = contentHandler.getModelIndexList();\n    return cacheAPI.getCradleIndexMap(modelIndexList);\n  };\n  this.getPropertiesSnapshot = function () {\n    var props = Object.assign({}, _this.cradleParameters.scrollerPropertiesRef.current);\n    props.virtualListProps = Object.assign({}, props.virtualListProps);\n    props.cradleContentProps = Object.assign({}, props.cradleContentProps);\n    return props;\n  };\n  // =================[ CACHE MANAGEMENT REQUESTS ]==================\n  this.clearCache = function () {\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler;\n    stateHandler.setCradleState(\'clearcache\');\n  };\n  // itemID set to null deletes the indexed item\n  // itemID set to undefined replaces the indexed item\n  // the main purpose is to allow itemsIDs to be remapped to new indexes\n  // operations are on existing cache items only\n  this.remapIndexes = function (changeMap) {\n    if (changeMap.size == 0) return []; // nothing to do\n    var _this$cradleParameter4 = _this.cradleParameters.handlersRef.current,\n      cacheAPI = _this$cradleParameter4.cacheAPI,\n      contentHandler = _this$cradleParameter4.contentHandler,\n      stateHandler = _this$cradleParameter4.stateHandler;\n    var itemMetadataMap = cacheAPI.itemMetadataMap,\n      indexToItemIDMap = cacheAPI.indexToItemIDMap,\n      itemSet = cacheAPI.itemSet;\n    var indexesToDeleteList = [];\n    var indexesToReplaceItemIDList = [];\n    var partitionItemsToReplaceList = [];\n    var changeIndexToItemIDMap = new Map();\n    var errorEntriesMap = new Map();\n    // =====================[ PREPARE ]======================\n    // -----------------------[ isolate indexes for which items should be replaced ]--------------\n    var workingChangeMap = new Map();\n    changeMap.forEach(function (itemID, index) {\n      if (itemID === undefined) {\n        if (indexToItemIDMap.has(index)) {\n          var cacheItemID = indexToItemIDMap.get(index);\n          indexesToReplaceItemIDList.push(index);\n          if (!(cacheItemID === undefined)) {\n            // ignore non-existent indexes\n            var _itemMetadataMap$get = itemMetadataMap.get(cacheItemID),\n              partitionID = _itemMetadataMap$get.partitionID;\n            partitionItemsToReplaceList.push({\n              partitionID: partitionID,\n              itemID: cacheItemID\n            });\n          }\n        } else {\n          errorEntriesMap.set(index, \'index to replace is not in cache\');\n        }\n      } else {\n        workingChangeMap.set(index, itemID);\n      }\n    });\n    indexesToReplaceItemIDList.forEach(function (index) {\n      indexToItemIDMap["delete"](index);\n    });\n    // ------------ filter out inoperable indexes and itemIDs ------------\n    var itemsToReplaceSet = new Set();\n    partitionItemsToReplaceList.forEach(function (obj) {\n      itemsToReplaceSet.add(obj.itemID);\n    });\n    // const itemsToReplaceList = Array.from(itemsToReplaceSet)\n    workingChangeMap.forEach(function (itemID, index) {\n      if (itemID === null || itemID === undefined) {\n        indexesToDeleteList.push(index);\n      } else {\n        if (typeof itemID == \'string\') {\n          errorEntriesMap.set(index, \'itemID is a string\');\n        } else if (!Number.isInteger(itemID)) {\n          errorEntriesMap.set(index, \'itemID is not an integer\');\n        } else if (!indexToItemIDMap.has(index)) {\n          errorEntriesMap.set(index, \'index not in cache\');\n        } else if (indexToItemIDMap.get(index) == itemID) {\n          errorEntriesMap.set(index, "target itemID ".concat(itemID, " has not changed"));\n        } else if (!itemMetadataMap.has(itemID) || itemsToReplaceSet.has(itemID)) {\n          errorEntriesMap.set(index, "target itemID ".concat(itemID, " not in cache, or has been removed"));\n        } else {\n          changeIndexToItemIDMap.set(index, itemID);\n        }\n      }\n    });\n    // -------------- filter out duplicate itemIDs ------------\n    var mapsize = changeIndexToItemIDMap.size;\n    var itemIDSet = new Set(changeIndexToItemIDMap.values());\n    var itemsetsize = itemIDSet.size;\n    if (mapsize != itemsetsize) {\n      // there must be duplicate itemIDs\n      var itemIDCountMap = new Map();\n      changeIndexToItemIDMap.forEach(function (itemID) {\n        if (!itemIDCountMap.has(itemID)) {\n          itemIDCountMap.set(itemID, 1);\n        } else {\n          var count = itemIDCountMap.get(itemID);\n          itemIDCountMap.set(itemID, ++count);\n        }\n      });\n      var duplicateItemsMap = new Map();\n      itemIDCountMap.forEach(function (count, itemID) {\n        if (count > 1) {\n          duplicateItemsMap.set(itemID, count);\n        }\n      });\n      var duplicatesToRemoveList = [];\n      changeIndexToItemIDMap.forEach(function (itemID, index) {\n        if (duplicateItemsMap.has(itemID)) {\n          duplicatesToRemoveList.push(index);\n        }\n      });\n      duplicatesToRemoveList.forEach(function (index) {\n        var itemID = changeIndexToItemIDMap.get(index);\n        var count = duplicateItemsMap.get(itemID);\n        errorEntriesMap.set(index, "target itemID ".concat(itemID, " has duplicates (").concat(count, ")"));\n        changeIndexToItemIDMap["delete"](index);\n      });\n    }\n    // ------------ capture map before changes ----------\n    // ... this map is used later to identify orphaned item and index cache records for deletion\n    // from the list of changes\n    // both sides of change map...\n    var originalMap = new Map(); // index => itemID; before change\n    changeIndexToItemIDMap.forEach(function (itemID, index) {\n      originalMap.set(index, indexToItemIDMap.get(index)); // index to be mapped\n      originalMap.set(itemMetadataMap.get(itemID).index, itemID); // target itemID\n    });\n    // ... and from the list of indexes to be deleted\n    indexesToDeleteList.forEach(function (index) {\n      originalMap.set(index, indexToItemIDMap.get(index));\n    });\n    // ======================[ CACHE OPERATIONS ]================\n    // --------------- delete listed indexes ---------\n    // for indexes set to null or undefined\n    // associated itemID\'s will be orphaned, but could be remapped.\n    // orphans are resolved below\n    if (indexesToDeleteList.length) {\n      indexesToDeleteList.forEach(function (index) {\n        indexToItemIDMap["delete"](index);\n      });\n    }\n    // ----------- apply filtered changes to cache index map and itemID map ----------\n    // at this point every remaining index listed will change its mapping\n    // const processedMap = new Map() // index => itemID; change has been applied\n    var processedIndexList = [];\n    // make changes\n    changeIndexToItemIDMap.forEach(function (itemID, index) {\n      indexToItemIDMap.set(index, itemID); // modiication applied, part 1\n      var itemdata = itemMetadataMap.get(itemID);\n      itemdata.index = index; // modification applied, part 2\n      // processedMap.set(index,itemID)\n      processedIndexList.push(index);\n    });\n    // -------------- look for and delete item and index orphans --------------------\n    // if the original item\'s index has not changed, then it has not been remapped, \n    //     it is orphaned, and the item is deleted\n    // if the item\'s index has changed, but the original item index map still points to the item,\n    //     then the index is orphaned (duplicate), and deleted\n    var deletedItemIDToIndexMap = new Map(); // index => itemID; orphaned index\n    var deletedIndexToItemIDMap = new Map();\n    var portalPartitionItemsForDeleteList = []; // hold deleted portals for deletion until after cradle synch\n    originalMap.forEach(function (originalItemID, originalItemIDIndex) {\n      var finalItemIDIndex = itemMetadataMap.get(originalItemID).index;\n      if (originalItemIDIndex == finalItemIDIndex) {\n        // not remapped, therefore orphaned\n        deletedItemIDToIndexMap.set(originalItemID, originalItemIDIndex);\n        var _itemMetadataMap$get2 = itemMetadataMap.get(originalItemID),\n          partitionID = _itemMetadataMap$get2.partitionID;\n        portalPartitionItemsForDeleteList.push({\n          itemID: originalItemID,\n          partitionID: partitionID\n        });\n        itemMetadataMap["delete"](originalItemID);\n        itemSet["delete"](originalItemID);\n      } else {\n        // remapped, check for orphaned index\n        if (indexToItemIDMap.has(originalItemIDIndex)) {\n          var finalItemID = indexToItemIDMap.get(originalItemIDIndex);\n          if (finalItemID == originalItemID) {\n            // the index has not been remapped, therefore orphaned\n            deletedIndexToItemIDMap.set(originalItemIDIndex, originalItemID);\n            indexToItemIDMap["delete"](originalItemIDIndex);\n          }\n        }\n      }\n    });\n    // ------------- apply changes to extant cellFrames ------------\n    // these are used to reconcile cradle cellFrames, and also for return information\n    // const processedIndexList = Array.from(processedMap.keys())\n    var deletedOrphanedItemIndexList = Array.from(deletedItemIDToIndexMap.values());\n    var deletedOrphanedIndexList = Array.from(deletedIndexToItemIDMap.keys());\n    // for return information...\n    var deletedOrphanedItemIDList = Array.from(deletedItemIDToIndexMap.keys());\n    var modifiedIndexList = [].concat(processedIndexList, indexesToDeleteList, deletedOrphanedItemIndexList, deletedOrphanedIndexList);\n    modifiedIndexList = Array.from(new Set(modifiedIndexList.values())); // remove duplicates\n    contentHandler.createNewItemIDs(indexesToReplaceItemIDList);\n    contentHandler.reconcileCellFrames(modifiedIndexList);\n    modifiedIndexList = modifiedIndexList.concat(indexesToReplaceItemIDList);\n    cacheAPI.portalPartitionItemsForDeleteList = portalPartitionItemsForDeleteList.concat(partitionItemsToReplaceList);\n    stateHandler.setCradleState(\'applyremapchanges\');\n    // ---------- returns for user information --------------------\n    return [modifiedIndexList, processedIndexList, indexesToDeleteList, indexesToReplaceItemIDList, deletedOrphanedItemIDList, deletedOrphanedIndexList, errorEntriesMap, changeMap];\n  };\n  // move must be entirely within list bounds\n  // returns list of processed indexes\n  this.moveIndex = function (tolowindex, fromlowindex) {\n    var fromhighindex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var cradleParameters = _this.cradleParameters,\n      cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current,\n      virtualListProps = cradleInternalProperties.virtualListProps,\n      listlowindex = virtualListProps.lowindex,\n      size = virtualListProps.size;\n    if (!size) return;\n    // ------------ confirm validity of arguments -------------\n    var isToindexInvalid = !isInteger(tolowindex) || !isValueGreaterThanOrEqualToMinValue(tolowindex, listlowindex);\n    var isFromindexInvalid = !isInteger(fromlowindex) || !isValueGreaterThanOrEqualToMinValue(fromlowindex, listlowindex);\n    var isHighrangeInvalid = false;\n    if (!isFromindexInvalid) {\n      if (!isBlank(fromhighindex)) {\n        isHighrangeInvalid = !isValueGreaterThanOrEqualToMinValue(fromhighindex, fromlowindex);\n      } else {\n        fromhighindex = fromlowindex;\n      }\n    }\n    tolowindex = +tolowindex;\n    fromlowindex = +fromlowindex;\n    fromhighindex = +fromhighindex;\n    // TODO return error array instead\n    if (isToindexInvalid || isFromindexInvalid || isHighrangeInvalid) {\n      console.log(\'RIGS ERROR moveIndex(toindex, fromindex, fromhighrange)\');\n      isToindexInvalid && console.log(tolowindex, errorMessages.moveTo);\n      isFromindexInvalid && console.log(fromlowindex, errorMessages.moveFrom);\n      isHighrangeInvalid && console.log(fromhighindex, errorMessages.moveRange);\n      return [];\n    }\n    tolowindex = Math.max(listlowindex, tolowindex);\n    fromlowindex = Math.max(listlowindex, fromlowindex);\n    fromhighindex = Math.max(listlowindex, fromhighindex);\n    var fromspan = fromhighindex - fromlowindex + 1;\n    var tohighindex = tolowindex + fromspan - 1;\n    // ------------- coerce parameters to list bounds ---------------\n    var listsize = _this.cradleParameters.cradleInternalPropertiesRef.current.virtualListProps.size;\n    // keep within current list size\n    var listhighindex = listsize - 1;\n    if (tohighindex > listhighindex) {\n      var diff = tohighindex - listhighindex;\n      tohighindex = Math.max(listlowindex, tohighindex - diff);\n      tolowindex = Math.max(listlowindex, tolowindex - diff);\n    }\n    if (fromhighindex > listhighindex) {\n      var _diff = fromhighindex - listhighindex;\n      fromhighindex = Math.max(listlowindex, fromhighindex - _diff);\n      fromlowindex = Math.max(listlowindex, fromlowindex - _diff);\n    }\n    // ---------- constrain parameters --------------\n    // nothing to do; no displacement\n    if (fromlowindex == tolowindex) return [];\n    // ----------- perform cache and cradle operations -----------\n    var _this$cradleParameter5 = _this.cradleParameters.handlersRef.current,\n      cacheAPI = _this$cradleParameter5.cacheAPI,\n      contentHandler = _this$cradleParameter5.contentHandler,\n      stateHandler = _this$cradleParameter5.stateHandler;\n    var processedIndexList =\n    // both displaced and moved indexes\n    cacheAPI.moveIndex(tolowindex, fromlowindex, fromhighindex);\n    if (processedIndexList.length) {\n      contentHandler.synchronizeCradleItemIDsToCache(processedIndexList);\n      var content = contentHandler.content;\n      content.headModelComponents = content.cradleModelComponents.slice(0, content.headModelComponents.length);\n      content.tailModelComponents = content.cradleModelComponents.slice(content.headModelComponents.length);\n      stateHandler.setCradleState(\'applymovechanges\');\n    }\n    return processedIndexList;\n  };\n  this.insertIndex = function (index) {\n    var rangehighindex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var cradleParameters = _this.cradleParameters,\n      cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current,\n      virtualListProps = cradleInternalProperties.virtualListProps,\n      listlowindex = virtualListProps.lowindex,\n      size = virtualListProps.size;\n    var isIndexInvalid = !isInteger(index);\n    if (!isIndexInvalid) {\n      if (size) {\n        isIndexInvalid = !isValueGreaterThanOrEqualToMinValue(index, listlowindex);\n      } else {\n        isIndexInvalid = false;\n      }\n    }\n    var isHighrangeInvalid = false;\n    if (!isIndexInvalid) {\n      if (!isBlank(rangehighindex)) {\n        isHighrangeInvalid = !isValueGreaterThanOrEqualToMinValue(rangehighindex, index);\n      } else {\n        rangehighindex = index;\n      }\n    }\n    index = +index;\n    rangehighindex = +rangehighindex;\n    if (isIndexInvalid || isHighrangeInvalid) {\n      console.log(\'RIGS ERROR insertIndex(index, rangehighindex)\');\n      isIndexInvalid && console.log(index, errorMessages.insertFrom);\n      isHighrangeInvalid && console.log(rangehighindex, errorMessages.insertRange);\n      return null;\n    }\n    return _this.insertRemoveIndex(index, rangehighindex, +1);\n  };\n  this.removeIndex = function (index) {\n    var rangehighindex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var cradleParameters = _this.cradleParameters,\n      cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current,\n      virtualListProps = cradleInternalProperties.virtualListProps,\n      listlowindex = virtualListProps.lowindex,\n      size = virtualListProps.size;\n    if (!size) return;\n    var isIndexInvalid = !isInteger(index) || !isValueGreaterThanOrEqualToMinValue(index, listlowindex);\n    var isHighrangeInvalid = false;\n    if (!isIndexInvalid) {\n      if (!isBlank(rangehighindex)) {\n        isHighrangeInvalid = !isValueGreaterThanOrEqualToMinValue(rangehighindex, index);\n      } else {\n        rangehighindex = index;\n      }\n    }\n    index = +index;\n    rangehighindex = +rangehighindex;\n    if (isIndexInvalid || isHighrangeInvalid) {\n      console.log(\'RIGS ERROR moveIndex(index, rangehighindex)\');\n      isIndexInvalid && console.log(index, errorMessages.removeFrom);\n      isHighrangeInvalid && console.log(rangehighindex, errorMessages.removeRange);\n      return null;\n    }\n    return _this.insertRemoveIndex(index, rangehighindex, -1);\n  };\n  // shared logic for insert and remove. Returns lists of indexes shifted, replaced, and removed\n  // this operation changes the listsize\n  this.insertRemoveIndex = function (index, rangehighindex, increment) {\n    var cradleParameters = _this.cradleParameters,\n      _this$cradleParameter6 = _this.cradleParameters.handlersRef.current,\n      cacheAPI = _this$cradleParameter6.cacheAPI,\n      contentHandler = _this$cradleParameter6.contentHandler,\n      stateHandler = _this$cradleParameter6.stateHandler,\n      cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current,\n      cradleContentProps = cradleInternalProperties.cradleContentProps,\n      virtualListProps = cradleInternalProperties.virtualListProps,\n      listlowindex = virtualListProps.lowindex,\n      crosscount = virtualListProps.crosscount,\n      listsize = virtualListProps.size,\n      lowCradleIndex = cradleContentProps.lowindex,\n      highCradleIndex = cradleContentProps.highindex,\n      cradleSize = cradleContentProps.size,\n      runwaySize = cradleContentProps.runwayRowcount,\n      viewportRowcount = cradleContentProps.viewportRowcount;\n    // basic assertions\n    if (listsize) index = Math.max(listlowindex, index);\n    // if (!rangehighindex) rangehighindex = index\n    // rangehighindex = Math.max(rangehighindex, index)\n    // ------------------- process cache ----------------\n    if (listsize == 0) {\n      if (increment > 0) {\n        _this.setListRange([index, rangehighindex]);\n        var _replaceList = [];\n        for (var i = index; i <= rangehighindex; i++) {\n          _replaceList.push(i);\n        }\n        return [[], _replaceList, []];\n      } else {\n        return [[], [], []];\n      }\n    }\n    var _cacheAPI$insertRemov = cacheAPI.insertRemoveIndex(index, rangehighindex, increment, listsize),\n      _cacheAPI$insertRemov2 = _slicedToArray(_cacheAPI$insertRemov, 6),\n      startChangeIndex = _cacheAPI$insertRemov2[0],\n      rangeincrement = _cacheAPI$insertRemov2[1],\n      shiftedList = _cacheAPI$insertRemov2[2],\n      removedList = _cacheAPI$insertRemov2[3],\n      replaceList = _cacheAPI$insertRemov2[4],\n      portalPartitionItemsForDeleteList = _cacheAPI$insertRemov2[5];\n    if (rangeincrement === null) return [[], [], []]; // no action\n    // partitionItems to delete with followup state changes - must happen after cradle update\n    cacheAPI.portalPartitionItemsForDeleteList = portalPartitionItemsForDeleteList;\n    // ------------- synchronize cradle to cache changes -------------\n    // determine if cradle must be reset or simply adjusted\n    var changecount = rangeincrement,\n      // semantics\n      newlistsize = _this.newListSize = listsize + changecount,\n      calculatedCradleRowcount = viewportRowcount + runwaySize * 2,\n      calculatedCradleItemcount = calculatedCradleRowcount * crosscount,\n      measuredCradleItemCount = cradleSize == 0 ? 0 : highCradleIndex - lowCradleIndex + 1,\n      resetCradle = measuredCradleItemCount < calculatedCradleItemcount || highCradleIndex >= newlistsize - 1;\n    if (!resetCradle) {\n      // synchronize cradle contents to changes\n      contentHandler.synchronizeCradleItemIDsToCache(shiftedList, increment, startChangeIndex); // non-zero communications isInsertRemove\n      var content = contentHandler.content;\n      // const requestedSet = cacheAPI.cacheProps.requestedSet\n      var requestedSet = cacheAPI.requestedSet;\n      var timeout = setInterval(function () {\n        if (!requestedSet.size) {\n          // finished collecting new cache entries\n          clearInterval(timeout);\n          content.headModelComponents = content.cradleModelComponents.slice(0, content.headModelComponents.length);\n          content.tailModelComponents = content.cradleModelComponents.slice(content.headModelComponents.length);\n          stateHandler.setCradleState(\'applyinsertremovechanges\');\n        }\n      }, 100);\n    } else {\n      // cradle to be completely reset if listsize change encroaches on cradle\n      stateHandler.setCradleState(\'channelcradleresetafterinsertremove\');\n    }\n    var replacedList = replaceList; // semantics\n    return [shiftedList, replacedList, removedList]; // inform caller\n  };\n\n  this.cradleParameters = cradleParameters;\n  // doing this explicitly here for documentation\n  var _cradleParameters$ext = cradleParameters.externalCallbacksRef.current,\n    referenceIndexCallback = _cradleParameters$ext.referenceIndexCallback,\n    preloadIndexCallback = _cradleParameters$ext.preloadIndexCallback,\n    deleteListCallback = _cradleParameters$ext.deleteListCallback,\n    changeListSizeCallback = _cradleParameters$ext.changeListSizeCallback,\n    changeListRangeCallback = _cradleParameters$ext.changeListRangeCallback,\n    itemExceptionCallback = _cradleParameters$ext.itemExceptionCallback,\n    repositioningFlagCallback = _cradleParameters$ext.repositioningFlagCallback,\n    repositioningIndexCallback = _cradleParameters$ext.repositioningIndexCallback,\n    callbacks = {\n      referenceIndexCallback: referenceIndexCallback,\n      preloadIndexCallback: preloadIndexCallback,\n      deleteListCallback: deleteListCallback,\n      changeListSizeCallback: changeListSizeCallback,\n      changeListRangeCallback: changeListRangeCallback,\n      itemExceptionCallback: itemExceptionCallback,\n      repositioningFlagCallback: repositioningFlagCallback,\n      repositioningIndexCallback: repositioningIndexCallback\n    };\n  this.callbacks = callbacks;\n});\nexports["default"] = ServiceHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/servicehandler.tsx\n')},"./src/cradle/statehandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval('\n\n// statehandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n   This module provides access to the cradle state and the state setting for other handlers.\n   It also provides access to the isMountedRef reference.\n*/\nvar StateHandler = /*#__PURE__*/_createClass(function StateHandler(cradleParameters) {\n  _classCallCheck(this, StateHandler);\n  this.cradleParameters = cradleParameters;\n  var internalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n  this.setCradleState = internalProperties.setCradleState;\n  this.cradleStateRef = internalProperties.cradleStateRef;\n  this.isMountedRef = internalProperties.isMountedRef;\n});\nexports["default"] = StateHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3N0YXRlaGFuZGxlci50c3giLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQUEsU0FBQUEsUUFBQUMsR0FBQSxzQ0FBQUQsT0FBQSx3QkFBQUUsTUFBQSx1QkFBQUEsTUFBQSxDQUFBQyxRQUFBLGFBQUFGLEdBQUEsa0JBQUFBLEdBQUEsZ0JBQUFBLEdBQUEsV0FBQUEsR0FBQSx5QkFBQUMsTUFBQSxJQUFBRCxHQUFBLENBQUFHLFdBQUEsS0FBQUYsTUFBQSxJQUFBRCxHQUFBLEtBQUFDLE1BQUEsQ0FBQUcsU0FBQSxxQkFBQUosR0FBQSxLQUFBRCxPQUFBLENBQUFDLEdBQUE7QUFBQSxTQUFBSyxrQkFBQUMsTUFBQSxFQUFBQyxLQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxLQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBRSxVQUFBLEdBQUFILEtBQUEsQ0FBQUMsQ0FBQSxHQUFBRSxVQUFBLENBQUFDLFVBQUEsR0FBQUQsVUFBQSxDQUFBQyxVQUFBLFdBQUFELFVBQUEsQ0FBQUUsWUFBQSx3QkFBQUYsVUFBQSxFQUFBQSxVQUFBLENBQUFHLFFBQUEsU0FBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFULE1BQUEsRUFBQVUsY0FBQSxDQUFBTixVQUFBLENBQUFPLEdBQUEsR0FBQVAsVUFBQTtBQUFBLFNBQUFRLGFBQUFDLFdBQUEsRUFBQUMsVUFBQSxFQUFBQyxXQUFBLFFBQUFELFVBQUEsRUFBQWYsaUJBQUEsQ0FBQWMsV0FBQSxDQUFBZixTQUFBLEVBQUFnQixVQUFBLE9BQUFDLFdBQUEsRUFBQWhCLGlCQUFBLENBQUFjLFdBQUEsRUFBQUUsV0FBQSxHQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUksV0FBQSxpQkFBQU4sUUFBQSxtQkFBQU0sV0FBQTtBQUFBLFNBQUFILGVBQUFNLEdBQUEsUUFBQUwsR0FBQSxHQUFBTSxZQUFBLENBQUFELEdBQUEsb0JBQUF2QixPQUFBLENBQUFrQixHQUFBLGlCQUFBQSxHQUFBLEdBQUFPLE1BQUEsQ0FBQVAsR0FBQTtBQUFBLFNBQUFNLGFBQUFFLEtBQUEsRUFBQUMsSUFBQSxRQUFBM0IsT0FBQSxDQUFBMEIsS0FBQSxrQkFBQUEsS0FBQSxrQkFBQUEsS0FBQSxNQUFBRSxJQUFBLEdBQUFGLEtBQUEsQ0FBQXhCLE1BQUEsQ0FBQTJCLFdBQUEsT0FBQUQsSUFBQSxLQUFBRSxTQUFBLFFBQUFDLEdBQUEsR0FBQUgsSUFBQSxDQUFBSSxJQUFBLENBQUFOLEtBQUEsRUFBQUMsSUFBQSxvQkFBQTNCLE9BQUEsQ0FBQStCLEdBQUEsdUJBQUFBLEdBQUEsWUFBQUUsU0FBQSw0REFBQU4sSUFBQSxnQkFBQUYsTUFBQSxHQUFBUyxNQUFBLEVBQUFSLEtBQUE7QUFBQSxTQUFBUyxnQkFBQUMsUUFBQSxFQUFBaEIsV0FBQSxVQUFBZ0IsUUFBQSxZQUFBaEIsV0FBQSxlQUFBYSxTQUFBOzs7O0FBRUE7Ozs7QUFBQSxJQUtxQkksWUFBWSxnQkFBQWxCLFlBQUEsQ0FFN0IsU0FBQWtCLGFBQVlDLGdCQUFnQjtFQUFBSCxlQUFBLE9BQUFFLFlBQUE7RUFFekIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR0EsZ0JBQWdCO0VBRXhDLElBQU1DLGtCQUFrQixHQUFHRCxnQkFBZ0IsQ0FBQ0UsMkJBQTJCLENBQUNDLE9BQU87RUFFL0UsSUFBSSxDQUFDQyxjQUFjLEdBQUdILGtCQUFrQixDQUFDRyxjQUFjO0VBQ3ZELElBQUksQ0FBQ0MsY0FBYyxHQUFHSixrQkFBa0IsQ0FBQ0ksY0FBYztFQUN2RCxJQUFJLENBQUNDLFlBQVksR0FBR0wsa0JBQWtCLENBQUNLLFlBQVk7QUFFdEQsQ0FBQztBQVpMQyxrQkFBQSxHQUFBUixZQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9jcmFkbGUvc3RhdGVoYW5kbGVyLnRzeD82Mzk1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0YXRlaGFuZGxlci50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAxOS0yMDIzIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbi8qXG4gICBUaGlzIG1vZHVsZSBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGNyYWRsZSBzdGF0ZSBhbmQgdGhlIHN0YXRlIHNldHRpbmcgZm9yIG90aGVyIGhhbmRsZXJzLlxuICAgSXQgYWxzbyBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGlzTW91bnRlZFJlZiByZWZlcmVuY2UuXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZUhhbmRsZXIge1xuXG4gICAgY29uc3RydWN0b3IoY3JhZGxlUGFyYW1ldGVycykge1xuXG4gICAgICAgdGhpcy5jcmFkbGVQYXJhbWV0ZXJzID0gY3JhZGxlUGFyYW1ldGVyc1xuXG4gICAgICAgY29uc3QgaW50ZXJuYWxQcm9wZXJ0aWVzID0gY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbnRlcm5hbFByb3BlcnRpZXNSZWYuY3VycmVudFxuXG4gICAgICAgdGhpcy5zZXRDcmFkbGVTdGF0ZSA9IGludGVybmFsUHJvcGVydGllcy5zZXRDcmFkbGVTdGF0ZVxuICAgICAgIHRoaXMuY3JhZGxlU3RhdGVSZWYgPSBpbnRlcm5hbFByb3BlcnRpZXMuY3JhZGxlU3RhdGVSZWZcbiAgICAgICB0aGlzLmlzTW91bnRlZFJlZiA9IGludGVybmFsUHJvcGVydGllcy5pc01vdW50ZWRSZWZcbiAgICAgICBcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyYWRsZVBhcmFtZXRlcnNcblxuICAgIHB1YmxpYyBjcmFkbGVTdGF0ZVJlZlxuICAgIHB1YmxpYyBzZXRDcmFkbGVTdGF0ZVxuICAgIHB1YmxpYyBpc01vdW50ZWRSZWZcblxufVxuIl0sIm5hbWVzIjpbIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiU3RhdGVIYW5kbGVyIiwiY3JhZGxlUGFyYW1ldGVycyIsImludGVybmFsUHJvcGVydGllcyIsImNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZiIsImN1cnJlbnQiLCJzZXRDcmFkbGVTdGF0ZSIsImNyYWRsZVN0YXRlUmVmIiwiaXNNb3VudGVkUmVmIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/cradle/statehandler.tsx\n')},"./src/cradle/styleshandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval("\n\n// styleshandler.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    This module provides the Cradle component with one key public function: getCradleStyles.\n    It returns an array of style objects for\n        headstyles,\n        tailstyles,\n        axisstyles,\n        cradledividerstyles\n        triggercelltriggerlineheadstyles,\n        triggercelltriggerlinetailstyles,\n*/\nvar StylesHandler = /*#__PURE__*/_createClass(function StylesHandler(cradleParameters) {\n  var _this = this;\n  _classCallCheck(this, StylesHandler);\n  this.getCradleStyles = function (_ref) {\n    var orientation = _ref.orientation,\n      cellHeight = _ref.cellHeight,\n      cellWidth = _ref.cellWidth,\n      gap = _ref.gap,\n      padding = _ref.padding,\n      crosscount = _ref.crosscount,\n      userstyles = _ref.userstyles,\n      triggerlineOffset = _ref.triggerlineOffset,\n      layout = _ref.layout;\n    var headstyles = _this.getBaseHeadStyles(gap, padding, orientation, userstyles.cradle);\n    var tailstyles = _this.getBaseTailStyles(gap, padding, orientation, userstyles.cradle);\n    var axisstyles = _this.getAxisStyles(gap, padding, orientation);\n    var triggercelltriggerlineheadstyles = _this.getTriggercellTriggerlineHeadStyles(orientation, cellHeight, cellWidth, triggerlineOffset, gap);\n    var triggercelltriggerlinetailstyles = _this.getTriggercellTriggerlineTailStyles(orientation, cellHeight, cellWidth, triggerlineOffset, gap);\n    var cradledividerstyles = {\n      zIndex: 1,\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      boxShadow: '0 0 5px 3px red'\n    };\n    headstyles.gap = tailstyles.gap = gap + 'px';\n    // headstyles.padding set in contentHandler setCradleContent and updateCradleContent\n    if (orientation == 'vertical') {\n      // padding varies\n      tailstyles.padding = \"0 \".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px\");\n      // the following are identical for head and tail\n      headstyles.width = tailstyles.width = '100%';\n      headstyles.height = tailstyles.height = 'auto';\n      headstyles.gridTemplateRows = tailstyles.gridTemplateRows = null;\n      headstyles.gridTemplateColumns = tailstyles.gridTemplateColumns = \"repeat(\".concat(crosscount, \", minmax(\").concat(cellWidth, \"px, 1fr))\");\n      headstyles.gridAutoFlow = tailstyles.gridAutoFlow = 'row';\n      headstyles.gridAutoRows = tailstyles.gridAutoRows = layout == 'uniform' ? null : 'max-content';\n      headstyles.gridAutoColumns = tailstyles.gridAutoColumns = null;\n    } else {\n      // orientation == 'horizontal'\n      tailstyles.padding = \"\".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px 0\");\n      headstyles.width = tailstyles.width = 'auto';\n      headstyles.height = tailstyles.height = '100%';\n      headstyles.gridTemplateRows = tailstyles.gridTemplateRows = \"repeat(\".concat(crosscount, \", minmax(\").concat(cellHeight, \"px, 1fr))\");\n      headstyles.gridTemplateColumns = tailstyles.gridTemplateColumns = null;\n      headstyles.gridAutoFlow = tailstyles.gridAutoFlow = 'column';\n      headstyles.gridAutoRows = tailstyles.gridAutoRows = null;\n      headstyles.gridAutoColumns = tailstyles.gridAutoColumns = layout == 'uniform' ? null : 'max-content';\n    }\n    return [headstyles, tailstyles, axisstyles, cradledividerstyles, triggercelltriggerlineheadstyles, triggercelltriggerlinetailstyles];\n  };\n  // the top, right, bottom, left setting determine the direction of expansion of the grid block\n  this.getBaseHeadStyles = function (gap, padding, orientation, userheadstyles) {\n    var bottom, left, top, right;\n    if (orientation == 'vertical') {\n      bottom = 0;\n      left = null;\n      right = null;\n      top = null;\n    } else {\n      bottom = null;\n      left = null;\n      right = 0;\n      top = null;\n    }\n    return Object.assign(Object.assign({}, userheadstyles), {\n      position: 'absolute',\n      display: 'grid',\n      gridGap: gap + 'px',\n      padding: padding + 'px',\n      boxSizing: 'border-box',\n      bottom: bottom,\n      left: left,\n      right: right,\n      top: top\n    });\n  };\n  // the top, right, bottom, left setting determine the direction of expansion of the grid block\n  this.getBaseTailStyles = function (gap, padding, orientation, usertailstyles) {\n    var bottom, left, top, right;\n    if (orientation == 'vertical') {\n      bottom = null;\n      left = null;\n      right = null;\n      top = 0;\n    } else {\n      bottom = null;\n      left = 0;\n      right = null;\n      top = null;\n    }\n    return Object.assign(Object.assign({}, usertailstyles), {\n      position: 'absolute',\n      display: 'grid',\n      gridGap: gap + 'px',\n      padding: padding + 'px',\n      boxSizing: 'border-box',\n      top: top,\n      left: left,\n      right: right,\n      bottom: bottom\n    });\n  };\n  this.getAxisStyles = function (gap, padding, orientation) {\n    var top, left, width, height; // for axis\n    if (orientation == 'vertical') {\n      top = padding + 'px'; // default\n      left = 'auto';\n      width = '100%';\n      height = 0;\n    } else {\n      top = 'auto';\n      left = padding + 'px'; // default\n      width = 0;\n      height = '100%';\n    }\n    return {\n      position: 'relative',\n      top: top,\n      left: left,\n      width: width,\n      height: height\n    };\n  };\n  this.getTriggercellTriggerlineHeadStyles = function (orientation, cellHeight, cellWidth, triggerlineOffset, gap) {\n    var position = 'absolute';\n    var width, height, top, right, bottom, left;\n    if (orientation == 'vertical') {\n      width = '100%';\n      height = 0;\n      top = triggerlineOffset + 'px';\n      right = '0px';\n      bottom = null;\n      left = '0px';\n    } else {\n      width = 0;\n      height = '100%';\n      top = '0px';\n      right = null;\n      bottom = '0px';\n      left = triggerlineOffset + 'px';\n    }\n    return {\n      position: position,\n      width: width,\n      height: height,\n      top: top,\n      right: right,\n      bottom: bottom,\n      left: left\n    };\n  };\n  this.getTriggercellTriggerlineTailStyles = function (orientation, cellHeight, cellWidth, triggerlineOffset, gap) {\n    var position = 'absolute';\n    var width, height, top, right, bottom, left;\n    if (orientation == 'vertical') {\n      width = '100%';\n      height = 0;\n      top = null;\n      right = '0px';\n      bottom = -(triggerlineOffset + gap) + 'px';\n      left = '0px';\n    } else {\n      width = 0;\n      height = '100%';\n      top = '0px';\n      right = -(triggerlineOffset + gap) + 'px';\n      bottom = '0px';\n      left = null;\n    }\n    return {\n      position: position,\n      width: width,\n      height: height,\n      top: top,\n      right: right,\n      bottom: bottom,\n      left: left\n    };\n  };\n  this.cradleParameters = cradleParameters;\n});\nexports[\"default\"] = StylesHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/styleshandler.tsx\n")},"./src/portalcache/CachePartition.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// CachePartition.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\nvar CachePartition = function CachePartition(_ref) {\n  var partitionProps = _ref.partitionProps,\n    partitionID = _ref.partitionID,\n    callback = _ref.callback;\n  var _ref2 = (0, react_1.useState)(0),\n    _ref3 = _slicedToArray(_ref2, 2),\n    portalListCounter = _ref3[0],\n    setPortalListCounter = _ref3[1];\n  var _ref4 = (0, react_1.useState)(\'setup\'),\n    _ref5 = _slicedToArray(_ref4, 2),\n    partitionState = _ref5[0],\n    setPartitionState = _ref5[1];\n  var counterRef = (0, react_1.useRef)(portalListCounter);\n  var isMountedRef = (0, react_1.useRef)(true);\n  var portalArrayRef = (0, react_1.useRef)(null);\n  var partitionMetadata = partitionProps.partitionMetadataMap.get(partitionID);\n  var forceUpdate = (0, react_1.useCallback)(function (portalRenderList) {\n    portalArrayRef.current = portalRenderList;\n    isMountedRef.current && setPortalListCounter(++counterRef.current); // force render\n  }, []);\n  (0, react_1.useEffect)(function () {\n    isMountedRef.current = true;\n    partitionMetadata.forceUpdate = forceUpdate;\n    callback();\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  (0, react_1.useEffect)(function () {\n    switch (partitionState) {\n      case \'setup\':\n        {\n          setPartitionState(\'ready\');\n          break;\n        }\n    }\n  }, [partitionState]);\n  return react_1["default"].createElement("div", {\n    key: partitionID,\n    "data-type": \'cachepartition\',\n    "data-partitionid": partitionID\n  }, portalArrayRef.current);\n};\nexports["default"] = CachePartition;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VixPQUFPLFlBQUs7TUFFUlksWUFBWSxDQUFDUSxPQUFPLEdBQUcsS0FBSztJQUVoQyxDQUFDO0VBRUwsQ0FBQyxFQUFDLEVBQUUsQ0FBQztFQUVMLElBQUEzQixPQUFBLENBQUE0QixTQUFTLEVBQUMsWUFBSTtJQUVWLFFBQVFiLGNBQWM7TUFDbEIsS0FBSyxPQUFPO1FBQUU7VUFDVkMsaUJBQWlCLENBQUMsT0FBTyxDQUFDO1VBQzFCOzs7RUFJWixDQUFDLEVBQUMsQ0FBQ0QsY0FBYyxDQUFDLENBQUM7RUFFbkIsT0FBT2YsT0FBQSxZQUFBNkIsYUFBQTtJQUFLQyxHQUFHLEVBQUl4QixXQUFXO0lBQUEsYUFBYyxnQkFBZ0I7SUFBQSxvQkFBcUJBO0VBQVcsR0FDdkZjLGNBQWMsQ0FBQ08sT0FBTyxDQUNyQjtBQUVWLENBQUM7QUFFREksa0JBQUEsR0FBZTVCLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vc3JjL3BvcnRhbGNhY2hlL0NhY2hlUGFydGl0aW9uLnRzeD81OTQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENhY2hlUGFydGl0aW9uLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDE5LTIwMjMgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VDYWxsYmFja30gZnJvbSAncmVhY3QnXG5cbmNvbnN0IENhY2hlUGFydGl0aW9uID0gKHsgcGFydGl0aW9uUHJvcHMsIHBhcnRpdGlvbklELCBjYWxsYmFjayB9KSA9PiB7XG5cbiAgICBjb25zdCBbcG9ydGFsTGlzdENvdW50ZXIsIHNldFBvcnRhbExpc3RDb3VudGVyXSA9IHVzZVN0YXRlKDApXG5cbiAgICBjb25zdCBbcGFydGl0aW9uU3RhdGUsIHNldFBhcnRpdGlvblN0YXRlXSA9IHVzZVN0YXRlKCdzZXR1cCcpXG5cbiAgICBjb25zdCBjb3VudGVyUmVmID0gdXNlUmVmKHBvcnRhbExpc3RDb3VudGVyKVxuXG4gICAgY29uc3QgaXNNb3VudGVkUmVmID0gdXNlUmVmKHRydWUpXG5cbiAgICBjb25zdCBwb3J0YWxBcnJheVJlZiA9IHVzZVJlZihudWxsKVxuXG4gICAgY29uc3QgcGFydGl0aW9uTWV0YWRhdGEgPSBwYXJ0aXRpb25Qcm9wcy5wYXJ0aXRpb25NZXRhZGF0YU1hcC5nZXQocGFydGl0aW9uSUQpXG5cbiAgICBjb25zdCBmb3JjZVVwZGF0ZSA9IHVzZUNhbGxiYWNrKChwb3J0YWxSZW5kZXJMaXN0KSA9PiB7XG5cbiAgICAgICAgcG9ydGFsQXJyYXlSZWYuY3VycmVudCA9IHBvcnRhbFJlbmRlckxpc3RcblxuICAgICAgICBpc01vdW50ZWRSZWYuY3VycmVudCAmJiBzZXRQb3J0YWxMaXN0Q291bnRlcigrK2NvdW50ZXJSZWYuY3VycmVudCkgLy8gZm9yY2UgcmVuZGVyXG5cbiAgICB9LFtdKVxuXG4gICAgdXNlRWZmZWN0KCgpPT57XG5cbiAgICAgICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSB0cnVlXG5cbiAgICAgICAgcGFydGl0aW9uTWV0YWRhdGEuZm9yY2VVcGRhdGUgPSBmb3JjZVVwZGF0ZVxuXG4gICAgICAgIGNhbGxiYWNrKClcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuXG4gICAgICAgICAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlXG5cbiAgICAgICAgfVxuXG4gICAgfSxbXSkgXG5cbiAgICB1c2VFZmZlY3QoKCk9PntcblxuICAgICAgICBzd2l0Y2ggKHBhcnRpdGlvblN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdzZXR1cCc6IHtcbiAgICAgICAgICAgICAgICBzZXRQYXJ0aXRpb25TdGF0ZSgncmVhZHknKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH0sW3BhcnRpdGlvblN0YXRlXSlcblxuICAgIHJldHVybiA8ZGl2IGtleSA9IHtwYXJ0aXRpb25JRH0gZGF0YS10eXBlID0gJ2NhY2hlcGFydGl0aW9uJyBkYXRhLXBhcnRpdGlvbmlkID0ge3BhcnRpdGlvbklEfT5cbiAgICAgICAge3BvcnRhbEFycmF5UmVmLmN1cnJlbnR9XG4gICAgPC9kaXY+XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FjaGVQYXJ0aXRpb24iXSwibmFtZXMiOlsiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJpIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIlR5cGVFcnJvciIsIm8iLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJsZW4iLCJsZW5ndGgiLCJhcnIyIiwiX2kiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9zIiwiX2UiLCJfeCIsIl9yIiwiX2FyciIsIl9uIiwiX2QiLCJuZXh0IiwiZG9uZSIsInB1c2giLCJ2YWx1ZSIsImVyciIsImlzQXJyYXkiLCJyZWFjdF8xIiwiX19pbXBvcnRTdGFyIiwicmVxdWlyZSIsIkNhY2hlUGFydGl0aW9uIiwiX3JlZiIsInBhcnRpdGlvblByb3BzIiwicGFydGl0aW9uSUQiLCJjYWxsYmFjayIsIl9yZWYyIiwidXNlU3RhdGUiLCJfcmVmMyIsInBvcnRhbExpc3RDb3VudGVyIiwic2V0UG9ydGFsTGlzdENvdW50ZXIiLCJfcmVmNCIsIl9yZWY1IiwicGFydGl0aW9uU3RhdGUiLCJzZXRQYXJ0aXRpb25TdGF0ZSIsImNvdW50ZXJSZWYiLCJ1c2VSZWYiLCJpc01vdW50ZWRSZWYiLCJwb3J0YWxBcnJheVJlZiIsInBhcnRpdGlvbk1ldGFkYXRhIiwicGFydGl0aW9uTWV0YWRhdGFNYXAiLCJnZXQiLCJmb3JjZVVwZGF0ZSIsInVzZUNhbGxiYWNrIiwicG9ydGFsUmVuZGVyTGlzdCIsImN1cnJlbnQiLCJ1c2VFZmZlY3QiLCJjcmVhdGVFbGVtZW50Iiwia2V5IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/portalcache/CachePartition.tsx\n')},"./src/portalcache/cacheAPI.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\n// cacheAPI.tsx\n// copyright (c) 2019-2023 Henrik Bechmann, Toronto, Licence: MIT\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return { value: void 0, done: !0 }; } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable || "" === iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } throw new TypeError(_typeof(iterable) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    This module manages the InfiniteGridScroller limited (sparse) cache. It also provides support for\n    services which allow the host to actively manage many aspects of the cache. See documentation\n    about the user functionsCallback callback for details. The cacheMax property allows for control of the\n    maximum device memory consumption of the cache.\n\n    The infinite grid scroller stores user cell content (components) in a central hidden cache,\n    from whence the components are pulled into the relevant CellFrames for display. The user components are\n    stored in React portals, with each portal instantiated in a container div (data-type = \'portalwrapper\').\n    These container divs are part of a standard React component list in the real DOM. The contained portals\n    themselves are not part of the real DOM, but are part of React\'s virtual DOM.\n\n    See https://reactjs.org/docs/portals.html for general information about React portals.\n    See https://www.npmjs.com/package/react-reverse-portal for the utility that InfiniteGridScroller\n    uses to manage portals.\n\n    This caching has many advantages, notably the ability to move cells back and forth between the\n    head and tail grids of the Cradle without losing state, and the ability to maintain state for\n    complex components which move beyond the scope of the content of the Cradle.\n\n    There is an important side effect to consider. Instantiated components which are removed from the real DOM\n    into the portal of the virtual DOM have their scroll positions, width, and height set to zero. Therefore if\n    components rely on these values for configuration, they must have a way of storing those values in state\n    (notably the Scroll Pos - scrollLeft or scrollTop), recognizing when the component comes out of the portal cache\n    into the real DOM (width and height are typically no longer both 0), and responding to change in\n    cache state appropriately.\n\n    Tips:\n        - your component is in cache when both width and height = 0\n        - your component is out of cache when both width and height are back to normal\n        - if you create an empty \'scrollerProperties\' property for your component, CellFrame will\n            set it to an object containing scrollerPropertiesRef and cellFramePropertiesRef\n        - if your component does not scroll, there should be no issues.\n\n*/\nvar react_1 = __importDefault(__webpack_require__(/*! react */ "react"));\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ "./node_modules/react-reverse-portal/dist/web/index.js");\nvar CachePartition_1 = __importDefault(__webpack_require__(/*! ./CachePartition */ "./src/portalcache/CachePartition.tsx"));\n// the cache itself is maintained in the root infinitegridscroller component\nvar CacheAPI = /*#__PURE__*/function () {\n  function CacheAPI(CACHE_PARTITION_SIZE) {\n    var _this = this;\n    _classCallCheck(this, CacheAPI);\n    this.globalItemID = 0;\n    this.globalPartitionID = 0;\n    this.itemMetadataMap = new Map();\n    this.scrollerDataMap = new Map();\n    this.partitionProps = {\n      partitionMetadataMap: new Map(),\n      partitionMap: new Map(),\n      partitionRenderList: null,\n      partitionRepoForceUpdate: null,\n      partitionModifiedSet: new Set(),\n      partitionPtr: null // active partition, for followup\n    };\n    // a facade is used to accommodate access by multiple RIGS scrollers\n    this.getFacade = function (scrollerID) {\n      var facade = {\n        // measureMemory:(source) => {\n        //     this.measureMemory(source, scrollerID)\n        // },\n        // get and set data\n        get indexToItemIDMap() {\n          return this.getIndexToItemIDMap();\n        },\n        getIndexToItemIDMap: function getIndexToItemIDMap() {\n          return _this.scrollerDataMap.get(scrollerID).indexToItemIDMap;\n        },\n        get itemSet() {\n          return this.getItemSet();\n        },\n        getItemSet: function getItemSet() {\n          return _this.scrollerDataMap.get(scrollerID).itemSet;\n        },\n        itemMetadataMap: _this.itemMetadataMap,\n        get requestedSet() {\n          return this.getRequestedSet();\n        },\n        getRequestedSet: function getRequestedSet() {\n          return _this.scrollerDataMap.get(scrollerID).requestedSet;\n        },\n        set partitionRepoForceUpdate(fn) {\n          this.setPartitionRepoForceUpdate(fn);\n        },\n        setPartitionRepoForceUpdate: function setPartitionRepoForceUpdate(fn) {\n          _this.partitionProps.partitionRepoForceUpdate = fn;\n        },\n        set cradleParameters(parms) {\n          this.setCradleParameters(parms);\n        },\n        setCradleParameters: function setCradleParameters(parms) {\n          _this.scrollerDataMap.get(scrollerID).cradleParameters = parms;\n        },\n        set portalPartitionItemsForDeleteList(list) {\n          this.setPortalPartitionItemsForDeleteList(list);\n        },\n        setPortalPartitionItemsForDeleteList: function setPortalPartitionItemsForDeleteList(list) {\n          _this.scrollerDataMap.get(scrollerID).portalPartitionItemsForDeleteList = list;\n        },\n        get instance() {\n          return this.getInstance();\n        },\n        getInstance: function getInstance() {\n          return _this;\n        },\n        // methods\n        unRegisterScroller: function unRegisterScroller(itemSet) {\n          return _this.unRegisterScroller(scrollerID, itemSet);\n        },\n        renderPartitionRepo: function renderPartitionRepo() {\n          return _this.renderPartitionRepo();\n        },\n        renderPortalLists: function renderPortalLists() {\n          return _this.renderPortalLists();\n        },\n        clearCache: function clearCache() {\n          return _this.clearCache(scrollerID);\n        },\n        changeCacheListSize: function changeCacheListSize(newlistsize, deleteListCallback) {\n          return _this.changeCacheListSize(scrollerID, newlistsize, deleteListCallback);\n        },\n        changeCacheListRange: function changeCacheListRange(newlistrange, deleteListCallback) {\n          return _this.changeCacheListRange(scrollerID, newlistrange, deleteListCallback);\n        },\n        matchCacheToCradle: function matchCacheToCradle(cradleIndexList, deleteListCallback) {\n          return _this.matchCacheToCradle(scrollerID, cradleIndexList, deleteListCallback);\n        },\n        pareCacheToMax: function pareCacheToMax(cacheMax, cradleIndexList, deleteListCallback) {\n          return _this.pareCacheToMax(scrollerID, cacheMax, cradleIndexList, deleteListCallback);\n        },\n        guardAgainstRunawayCaching: function guardAgainstRunawayCaching(cacheMax, cradleListLength, MAX_CACHE_OVER_RUN) {\n          return _this.guardAgainstRunawayCaching(scrollerID, cacheMax, cradleListLength, MAX_CACHE_OVER_RUN);\n        },\n        preload: function preload(finalCallback, nullItemSetMaxListsize) {\n          return _this.preload(scrollerID, finalCallback, nullItemSetMaxListsize);\n        },\n        getCacheIndexMap: function getCacheIndexMap() {\n          return _this.getCacheIndexMap(scrollerID);\n        },\n        getCradleIndexMap: function getCradleIndexMap(cradleIndexList) {\n          return _this.getCradleIndexMap(scrollerID, cradleIndexList);\n        },\n        getCacheItemMap: function getCacheItemMap() {\n          return _this.getCacheItemMap(scrollerID);\n        },\n        moveIndex: function moveIndex(tolowindex, fromlowindex, fromhighindex) {\n          return _this.moveIndex(scrollerID, tolowindex, fromlowindex, fromhighindex);\n        },\n        insertRemoveIndex: function insertRemoveIndex(index, highrange, increment, listsize) {\n          return _this.insertRemoveIndex(scrollerID, index, highrange, increment, listsize);\n        },\n        registerPendingPortal: function registerPendingPortal(index) {\n          return _this.registerPendingPortal(scrollerID, index);\n        },\n        unregisterPendingPortal: function unregisterPendingPortal(index) {\n          return _this.unregisterPendingPortal(scrollerID, index);\n        },\n        getNewItemID: function getNewItemID() {\n          return _this.getNewItemID();\n        },\n        getNewOrExistingItemID: function getNewOrExistingItemID(index) {\n          return _this.getNewOrExistingItemID(scrollerID, index);\n        },\n        createPortal: function createPortal(component, index, itemID, scrollerProperties) {\n          var isPreload = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n          return _this.createPortal(scrollerID, component, index, itemID, scrollerProperties, isPreload = false);\n        },\n        deletePortalByIndex: function deletePortalByIndex(index, deleteListCallback) {\n          return _this.deletePortalByIndex(scrollerID, index, deleteListCallback);\n        },\n        applyPortalPartitionItemsForDeleteList: function applyPortalPartitionItemsForDeleteList() {\n          return _this.applyPortalPartitionItemsForDeleteList(scrollerID);\n        },\n        hasPortal: function hasPortal(itemID) {\n          return _this.hasPortal(itemID);\n        },\n        getPortalMetadata: function getPortalMetadata(itemID) {\n          return _this.getPortalMetadata(itemID);\n        }\n      };\n      return facade;\n    };\n    this.unRegisterScroller = function (scrollerID, itemSet) {\n      var scrollerDataMap = _this.scrollerDataMap,\n        itemMetadataMap = _this.itemMetadataMap;\n      if (scrollerDataMap.size == 1) return; // already getting dismantled; avoid conflict\n      scrollerDataMap["delete"](scrollerID);\n      itemSet.forEach(function (itemID) {\n        var _itemMetadataMap$get = itemMetadataMap.get(itemID),\n          partitionID = _itemMetadataMap$get.partitionID;\n        _this.removePartitionPortal(partitionID, itemID);\n        itemMetadataMap["delete"](itemID);\n      });\n      _this.renderPortalLists();\n      // this.measureMemory(\'UNREGISTER\', scrollerID)\n    };\n    // ===========================[ CACHE PARTITION MANAGEMENT ]===============================\n    // partitions are added but not removed\n    this.renderPartitionRepo = function () {\n      _this.partitionProps.partitionRenderList = Array.from(_this.partitionProps.partitionMap.values());\n      _this.partitionProps.partitionRepoForceUpdate(_this.partitionProps.partitionRenderList);\n    };\n    this.addPartition = function () {\n      var partitionID = _this.globalPartitionID++;\n      _this.partitionProps.partitionMetadataMap.set(partitionID, {\n        portalMap: new Map(),\n        mapcount: 0,\n        portalRenderList: null,\n        modified: false,\n        forceUpdate: null,\n        partitionID: partitionID\n      });\n      var resolvefunc = {\n        current: null\n      };\n      var promise = new Promise(function (resolve) {\n        resolvefunc.current = resolve;\n      });\n      var callback = function callback() {\n        resolvefunc.current(partitionID);\n      };\n      _this.partitionProps.partitionMap.set(partitionID, react_1["default"].createElement(CachePartition_1["default"], {\n        key: partitionID,\n        partitionProps: _this.partitionProps,\n        partitionID: partitionID,\n        callback: callback\n      }));\n      _this.renderPartitionRepo();\n      return promise;\n    };\n    this.addPartitionPortal = function (partitionID, itemID, portal) {\n      var partitionMetadata = _this.partitionProps.partitionMetadataMap.get(partitionID);\n      partitionMetadata.portalMap.set(itemID, portal);\n      _this.partitionProps.partitionModifiedSet.add(partitionID);\n    };\n    this.removePartitionPortal = function (partitionID, itemID) {\n      var partitionMetadata = _this.partitionProps.partitionMetadataMap.get(partitionID);\n      partitionMetadata.portalMap["delete"](itemID);\n      partitionMetadata.mapcount -= 1;\n      _this.partitionProps.partitionModifiedSet.add(partitionID);\n    };\n    this.renderPartition = function (partitionID) {\n      var partitionMetadata = _this.partitionProps.partitionMetadataMap.get(partitionID);\n      if (!partitionMetadata) return;\n      partitionMetadata.portalRenderList = Array.from(partitionMetadata.portalMap.values());\n      // if forceUpdate has not yet been assigned, it is in the works from first call of partition\n      partitionMetadata.forceUpdate && partitionMetadata.forceUpdate(partitionMetadata.portalRenderList);\n    };\n    // set state of the CachePartition component of the scroller to trigger render\n    this.renderPortalLists = function () {\n      var partitionModifiedSet = _this.partitionProps.partitionModifiedSet;\n      if (partitionModifiedSet.size) {\n        partitionModifiedSet.forEach(function (partitionID) {\n          _this.renderPartition(partitionID);\n        });\n        _this.partitionProps.partitionModifiedSet.clear();\n      }\n    };\n    this.clearCache = function (scrollerID) {\n      var scrollerDataMap = _this.scrollerDataMap,\n        itemMetadataMap = _this.itemMetadataMap;\n      var datamap = scrollerDataMap.get(scrollerID);\n      var indexToItemIDMap = datamap.indexToItemIDMap,\n        itemSet = datamap.itemSet,\n        requestedSet = datamap.requestedSet;\n      if (scrollerDataMap.size == 1) {\n        // clear base data\n        itemMetadataMap.clear();\n        // clear cache partitions\n        _this.partitionProps.partitionMetadataMap.clear();\n        _this.partitionProps.partitionMap.clear();\n        _this.partitionProps.partitionRenderList = [];\n        _this.partitionProps.partitionModifiedSet.clear();\n        _this.partitionProps.partitionPtr = null;\n        _this.partitionProps.partitionRepoForceUpdate(null);\n      } else {\n        itemSet.forEach(function (itemID) {\n          var _itemMetadataMap$get2 = itemMetadataMap.get(itemID),\n            partitionID = _itemMetadataMap$get2.partitionID;\n          _this.removePartitionPortal(partitionID, itemID);\n        });\n        _this.renderPortalLists();\n      }\n      indexToItemIDMap.clear();\n      itemSet.clear();\n      requestedSet.clear();\n    };\n    //===========================[ REPOSITORY AND LIST MANAGEMENT ]==================================\n    // ----------------------------[ basic operations ]--------------------------\n    // called from Cradle.nullItemSetMaxListsize, and serviceHandler.setListSize\n    this.changeCacheListSize = function (scrollerID, newlistsize, deleteListCallback) {\n      if (newlistsize.length == 0) {\n        _this.clearCache(scrollerID);\n        return;\n      }\n      // match cache to newlistsize\n      var portalIndexMap = _this.scrollerDataMap.get(scrollerID).indexToItemIDMap;\n      var mapkeysList = Array.from(portalIndexMap.keys());\n      mapkeysList.sort(function (a, b) {\n        return a - b;\n      }); // ascending\n      var _this$scrollerDataMap = _this.scrollerDataMap.get(scrollerID),\n        cradleParameters = _this$scrollerDataMap.cradleParameters;\n      var virtualListProps = cradleParameters.cradleInternalPropertiesRef.current.virtualListProps;\n      var lowindex = virtualListProps.lowindex;\n      var highestindex = mapkeysList.at(-1);\n      if (highestindex > newlistsize + lowindex - 1) {\n        // pare the cache\n        var parelist = mapkeysList.filter(function (index) {\n          var comparehighindex = newlistsize + lowindex - 1;\n          return index > comparehighindex;\n        });\n        _this.deletePortalByIndex(scrollerID, parelist, deleteListCallback);\n      }\n    };\n    this.changeCacheListRange = function (scrollerID, newlistrange, deleteListCallback) {\n      if (newlistrange.length == 0) {\n        _this.clearCache(scrollerID);\n        return;\n      }\n      // match cache to newlistsize\n      var portalIndexMap = _this.scrollerDataMap.get(scrollerID).indexToItemIDMap;\n      var mapkeysList = Array.from(portalIndexMap.keys());\n      mapkeysList.sort(function (a, b) {\n        return a - b;\n      }); // ascending\n      var _this$scrollerDataMap2 = _this.scrollerDataMap.get(scrollerID),\n        cradleParameters = _this$scrollerDataMap2.cradleParameters;\n      var virtualListProps = cradleParameters.cradleInternalPropertiesRef.current.virtualListProps;\n      var lowcurrentindex = virtualListProps.lowcurrentindex,\n        highcurrentindex = virtualListProps.highcurrentindex;\n      var _newlistrange = _slicedToArray(newlistrange, 2),\n        lownewindex = _newlistrange[0],\n        highnewindex = _newlistrange[1];\n      var highestindex = mapkeysList.at(-1);\n      var lowestindex = mapkeysList.at(0);\n      if (highestindex > highnewindex) {\n        // pare the cache\n        var compareindex = highnewindex;\n        var parelist = mapkeysList.filter(function (index) {\n          return index > compareindex;\n        });\n        _this.deletePortalByIndex(scrollerID, parelist, deleteListCallback);\n      }\n      if (lowestindex < lownewindex) {\n        // pare the cache\n        var _compareindex = lownewindex;\n        var _parelist = mapkeysList.filter(function (index) {\n          return index < _compareindex;\n        });\n        _this.deletePortalByIndex(scrollerID, _parelist, deleteListCallback);\n      }\n    };\n    // ----------------------[ cache size limit enforceent ]------------------\n    this.matchCacheToCradle = function (scrollerID, cradleIndexList, deleteListCallback) {\n      var mapkeys = Array.from(_this.scrollerDataMap.get(scrollerID).indexToItemIDMap.keys());\n      var delkeys = mapkeys.filter(function (key) {\n        return !cradleIndexList.includes(key);\n      });\n      if (delkeys.length) {\n        _this.deletePortalByIndex(scrollerID, delkeys, deleteListCallback);\n        return true;\n      } else {\n        return false;\n      }\n    };\n    this.pareCacheToMax = function (scrollerID, cacheMax, cradleIndexList, deleteListCallback) {\n      var modelLength = cradleIndexList.length;\n      // determine need for paring\n      if (!cacheMax || !modelLength) return false;\n      var max = Math.max(modelLength, cacheMax);\n      var portalIndexMap = _this.scrollerDataMap.get(scrollerID).indexToItemIDMap,\n        requestedSet = _this.scrollerDataMap.get(scrollerID).requestedSet;\n      if (portalIndexMap.size + requestedSet.size <= max) return false;\n      // sort the map keys\n      var mapkeyslist = Array.from(portalIndexMap.keys()),\n        requestedkeys = Array.from(requestedSet.keys());\n      var mapkeys = [].concat(mapkeyslist, requestedkeys);\n      mapkeys.sort(function (a, b) {\n        return a - b;\n      });\n      // get number to pare\n      var mapLength = mapkeys.length,\n        parecount = mapLength - max;\n      // distribute paring proportionally at front and back\n      var headindex = cradleIndexList[0],\n        tailindex = cradleIndexList[modelLength - 1],\n        headpos = mapkeys.indexOf(headindex),\n        tailpos = mapkeys.indexOf(tailindex);\n      var headroom = headpos,\n        tailroom = mapLength - (tailpos + 1),\n        pareroom = headroom + tailroom;\n      var headparecount = Math.floor(headroom / pareroom * parecount),\n        tailparecount = parecount - headparecount;\n      // collect indexes to pare\n      var headlist = mapkeys.slice(0, headparecount),\n        taillist = mapkeys.slice(mapLength - tailparecount);\n      var delList = [].concat(_toConsumableArray(headlist), _toConsumableArray(taillist));\n      _this.deletePortalByIndex(scrollerID, delList, deleteListCallback);\n      return true;\n    };\n    this.guardAgainstRunawayCaching = function (scrollerID, cacheMax, cradleListLength, MAX_CACHE_OVER_RUN) {\n      if (!cacheMax) return false;\n      var _this$scrollerDataMap3 = _this.scrollerDataMap.get(scrollerID),\n        indexToItemIDMap = _this$scrollerDataMap3.indexToItemIDMap,\n        requestedSet = _this$scrollerDataMap3.requestedSet;\n      var max = Math.max(cradleListLength, cacheMax);\n      if (indexToItemIDMap.size + requestedSet.size <= max * MAX_CACHE_OVER_RUN) {\n        return false;\n      } else {\n        return true;\n      }\n    };\n    // --------------------------------[ preload ]--------------------------------\n    this.preload = function (scrollerID, finalCallback, nullItemSetMaxListsize) {\n      var _this$scrollerDataMap4 = _this.scrollerDataMap.get(scrollerID),\n        cradleParameters = _this$scrollerDataMap4.cradleParameters;\n      var scrollerPropertiesRef = cradleParameters.scrollerPropertiesRef;\n      var _cradleParameters$han = cradleParameters.handlersRef.current,\n        stateHandler = _cradleParameters$han.stateHandler,\n        serviceHandler = _cradleParameters$han.serviceHandler,\n        cradleInheritedProperties = cradleParameters.cradleInheritedPropertiesRef.current,\n        cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n      var getItem = cradleInheritedProperties.getItem,\n        cacheMax = cradleInheritedProperties.cacheMax,\n        _cradleInternalProper = cradleInternalProperties.virtualListProps,\n        listsize = _cradleInternalProper.size,\n        lowindex = _cradleInternalProper.lowindex,\n        highindex = _cradleInternalProper.highindex;\n      var promises = [];\n      var cacheSize = cacheMax !== null && cacheMax !== void 0 ? cacheMax : 0;\n      cacheSize = Math.min(cacheSize, listsize);\n      var preloadsize = cacheSize ? cacheSize : listsize;\n      var breakloop = {\n        current: false\n      };\n      var maxListsizeInterrupt = function maxListsizeInterrupt(index) {\n        breakloop.current = true;\n        nullItemSetMaxListsize(index);\n      };\n      if (stateHandler.isMountedRef.current) {\n        var indexToItemIDMap = _this.scrollerDataMap.get(scrollerID).indexToItemIDMap;\n        var _serviceHandler$callb = serviceHandler.callbacks,\n          preloadIndexCallback = _serviceHandler$callb.preloadIndexCallback,\n          itemExceptionCallback = _serviceHandler$callb.itemExceptionCallback;\n        for (var index = lowindex; index <= highindex; index++) {\n          preloadIndexCallback && preloadIndexCallback(index);\n          if (!indexToItemIDMap.has(index)) {\n            var promise = _this.preloadItem(scrollerID, index, getItem, scrollerPropertiesRef, itemExceptionCallback, maxListsizeInterrupt);\n            promises.push(promise);\n          }\n          if (breakloop.current) break;\n        }\n      }\n      Promise.allSettled(promises).then(function () {\n        _this.renderPortalLists();\n        finalCallback();\n      });\n    };\n    this.applyPortalPartitionItemsForDeleteList = function (scrollerID) {\n      var _this$scrollerDataMap5 = _this.scrollerDataMap.get(scrollerID),\n        portalPartitionItemsForDeleteList = _this$scrollerDataMap5.portalPartitionItemsForDeleteList;\n      if (portalPartitionItemsForDeleteList && portalPartitionItemsForDeleteList.length) {\n        var _iterator = _createForOfIteratorHelper(portalPartitionItemsForDeleteList),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n            _this.removePartitionPortal(item.partitionID, item.itemID);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        _this.scrollerDataMap.get(scrollerID).portalPartitionItemsForDeleteList = [];\n        _this.renderPortalLists();\n      }\n    };\n    this.CACHE_PARTITION_SIZE = CACHE_PARTITION_SIZE;\n  }\n  // public measureMemory(source, scrollerID) {\n  //   console.log(\'usedJSHeapSize\',\'-\'+scrollerID+\'-\',source, performance[\'memory\'][\'usedJSHeapSize\'])\n  // }\n  // ===========================[ Scroller Registration & Maintenance ]===============================\n  // the only member accessed directly. All other access is through the facade\n  _createClass(CacheAPI, [{\n    key: "registerScroller",\n    value: function registerScroller(scrollerID) {\n      this.scrollerDataMap.set(scrollerID, {\n        cradleParameters: null,\n        indexToItemIDMap: new Map(),\n        // some portals may have been requested by requestidlecallback, not yet created\n        itemSet: new Set(),\n        requestedSet: new Set(),\n        portalPartitionItemsForDeleteList: null\n      });\n      // this.measureMemory(\'REGISTER\', scrollerID)\n      return this.getFacade(scrollerID);\n    }\n  }, {\n    key: "findPartitionWithRoom",\n    value: function findPartitionWithRoom() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var CACHE_PARTITION_SIZE, partitionMetadataMap, partitionPtr, partitionMetadata, _iterator2, _step2, _step2$value, partitionID, _partitionMetadata;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              CACHE_PARTITION_SIZE = this.CACHE_PARTITION_SIZE;\n              partitionMetadataMap = this.partitionProps.partitionMetadataMap;\n              partitionPtr = this.partitionProps.partitionPtr;\n              if (!(partitionPtr !== null)) {\n                _context.next = 8;\n                break;\n              }\n              partitionMetadata = partitionMetadataMap.get(partitionPtr);\n              if (!(partitionMetadata.mapcount < CACHE_PARTITION_SIZE)) {\n                _context.next = 8;\n                break;\n              }\n              partitionMetadata.mapcount += 1;\n              return _context.abrupt("return", partitionPtr);\n            case 8:\n              partitionPtr = null;\n              _iterator2 = _createForOfIteratorHelper(partitionMetadataMap);\n              _context.prev = 10;\n              _iterator2.s();\n            case 12:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 20;\n                break;\n              }\n              _step2$value = _slicedToArray(_step2.value, 2), partitionID = _step2$value[0], _partitionMetadata = _step2$value[1];\n              if (!(_partitionMetadata.mapcount < CACHE_PARTITION_SIZE)) {\n                _context.next = 18;\n                break;\n              }\n              _partitionMetadata.mapcount += 1;\n              partitionPtr = partitionID;\n              return _context.abrupt("break", 20);\n            case 18:\n              _context.next = 12;\n              break;\n            case 20:\n              _context.next = 25;\n              break;\n            case 22:\n              _context.prev = 22;\n              _context.t0 = _context["catch"](10);\n              _iterator2.e(_context.t0);\n            case 25:\n              _context.prev = 25;\n              _iterator2.f();\n              return _context.finish(25);\n            case 28:\n              if (!(partitionPtr === null)) {\n                _context.next = 34;\n                break;\n              }\n              _context.next = 31;\n              return this.addPartition();\n            case 31:\n              partitionPtr = _context.sent;\n              partitionMetadata = partitionMetadataMap.get(partitionPtr);\n              partitionMetadata.mapcount += 1;\n            case 34:\n              this.partitionProps.partitionPtr = partitionPtr;\n              return _context.abrupt("return", partitionPtr);\n            case 36:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this, [[10, 22, 25, 28]]);\n      }));\n    }\n    // =========================[ SNAPSHOTS ]=========================\n  }, {\n    key: "getCacheIndexMap",\n    value: function getCacheIndexMap(scrollerID) {\n      return new Map(this.scrollerDataMap.get(scrollerID).indexToItemIDMap);\n    }\n  }, {\n    key: "getCradleIndexMap",\n    value: function getCradleIndexMap(scrollerID, cradleIndexList) {\n      var cradleMap = new Map(),\n        _this$scrollerDataMap6 = this.scrollerDataMap.get(scrollerID),\n        indexToItemIDMap = _this$scrollerDataMap6.indexToItemIDMap;\n      var _iterator3 = _createForOfIteratorHelper(cradleIndexList),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var index = _step3.value;\n          cradleMap.set(index, indexToItemIDMap.get(index));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return cradleMap;\n    }\n  }, {\n    key: "getCacheItemMap",\n    value: function getCacheItemMap(scrollerID) {\n      var cachelist = new Map();\n      var _this$scrollerDataMap7 = this.scrollerDataMap.get(scrollerID),\n        itemSet = _this$scrollerDataMap7.itemSet;\n      var itemMetadataMap = this.itemMetadataMap;\n      // for (const [key, value] of this.itemMetadataMap) {\n      var _iterator4 = _createForOfIteratorHelper(itemSet),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var itemID = _step4.value;\n          var metadata = itemMetadataMap.get(itemID);\n          var index = metadata.index,\n            component = metadata.component;\n          cachelist.set(itemID, {\n            index: index,\n            component: component\n          });\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return cachelist;\n    }\n    // ==========================[ SERVICE SUPPORT ]=========================\n    // --------------------------[ move indexes ]-------------------------------\n    // move is coerced by servicehandler to be within current list bounds\n  }, {\n    key: "moveIndex",\n    value: function moveIndex(scrollerID, tolowindex, fromlowindex, fromhighindex) {\n      var indexToItemIDMap = this.scrollerDataMap.get(scrollerID).indexToItemIDMap;\n      var itemMetadataMap = this.itemMetadataMap;\n      // ----------- define parameters ---------------\n      var moveblocksize = fromhighindex - fromlowindex + 1,\n        moveincrement = tolowindex - fromlowindex,\n        tohighindex = tolowindex + (moveblocksize - 1);\n      var movedirection = moveincrement > 0 ?\n      // move block up in list\n      \'up\' :\n      // shift down, make room for shiftingindex above\n      \'down\'; // shift up, make room for shiftingindex below\n      // ------------ find bounds of from and to blocks in cache -------------\n      var orderedindexlist = Array.from(indexToItemIDMap.keys()).sort(function (a, b) {\n        return a - b;\n      });\n      var reverseorderedindexlist = orderedindexlist.slice().reverse();\n      var tolowindexptr = orderedindexlist.findIndex(function (value) {\n          return value >= tolowindex;\n        }),\n        fromlowindexptr = orderedindexlist.findIndex(function (value) {\n          return value >= fromlowindex;\n        });\n      var tohighindexptr = reverseorderedindexlist.findIndex(function (value) {\n          return value <= tohighindex;\n        }),\n        fromhighindexptr = reverseorderedindexlist.findIndex(function (value) {\n          return value <= fromhighindex;\n        });\n      // get required inverse\n      {\n        var cachelistcount = orderedindexlist.length;\n        if (tohighindexptr != -1) tohighindexptr = cachelistcount - 1 - tohighindexptr;\n        if (fromhighindexptr != -1) fromhighindexptr = cachelistcount - 1 - fromhighindexptr;\n      }\n      // ---------------- capture index data to move ----------------\n      var listtoprocessformove;\n      if (fromlowindexptr == -1 && fromhighindexptr == -1) {\n        // scope is out of view\n        listtoprocessformove = [];\n      } else if (fromhighindexptr == -1) {\n        // scope is partially in view\n        listtoprocessformove = orderedindexlist.slice(fromlowindexptr);\n      } else {\n        // scope is entirely in view\n        listtoprocessformove = orderedindexlist.slice(fromlowindexptr, fromhighindexptr + 1);\n      }\n      var processtomoveMap = new Map();\n      var capturemoveindexFn = function capturemoveindexFn(index) {\n        processtomoveMap.set(index, indexToItemIDMap.get(index));\n      };\n      listtoprocessformove.forEach(capturemoveindexFn);\n      // ------------- get list of indexes to shift out of the way ---------------\n      var listtoprocessfordisplace;\n      if (movedirection == \'down\') {\n        // block is moving down, shift is up; toindex < fromindex\n        if (tolowindexptr == -1 && fromlowindexptr == -1) {\n          listtoprocessfordisplace = [];\n        } else if (fromlowindexptr == -1) {\n          listtoprocessfordisplace = orderedindexlist.slice(tolowindexptr);\n        } else {\n          listtoprocessfordisplace = orderedindexlist.slice(tolowindexptr, fromlowindexptr);\n        }\n      } else {\n        // shiftdirection == -1; block is moving up, shift is down; fromindex < toindex\n        if (tohighindexptr == -1 && fromhighindexptr == -1) {\n          listtoprocessfordisplace = [];\n        } else if (tohighindexptr == -1) {\n          listtoprocessfordisplace = orderedindexlist.slice(fromhighindexptr + 1);\n        } else {\n          listtoprocessfordisplace = orderedindexlist.slice(fromhighindexptr + 1, tohighindexptr + 1);\n        }\n      }\n      if (movedirection == \'down\') listtoprocessfordisplace.reverse();\n      // -------------- move indexes out of the way --------------\n      var processeddisplaceList = [];\n      var processsdisplaceindexFn = function processsdisplaceindexFn(index) {\n        var itemID = indexToItemIDMap.get(index);\n        var newIndex = movedirection == \'up\' ? index - moveblocksize : index + moveblocksize;\n        indexToItemIDMap.set(newIndex, itemID);\n        itemMetadataMap.get(itemID).index = newIndex;\n        processeddisplaceList.push(newIndex);\n      };\n      listtoprocessfordisplace.forEach(processsdisplaceindexFn);\n      // ------------ replace shifted index space with moved indexes ----------\n      var processedmoveList = [];\n      var processmoveindexFn = function processmoveindexFn(itemID, index) {\n        var newIndex = index + moveincrement; // swap\n        indexToItemIDMap.set(newIndex, itemID);\n        itemMetadataMap.get(itemID).index = newIndex;\n        processedmoveList.push(newIndex);\n      };\n      processtomoveMap.forEach(processmoveindexFn);\n      // -----------return list of processed indexes to caller --------\n      // for synchrnization with cradle cellFrames\n      var processedIndexes = [].concat(processeddisplaceList, processedmoveList).sort(function (a, b) {\n        return a - b;\n      });\n      return processedIndexes;\n    }\n    // ----------------------------[ insert/remove indexes ]------------------------------\n    // insert or remove indexes: much of this deals with the fact that the cache is sparse.\n  }, {\n    key: "insertRemoveIndex",\n    value: function insertRemoveIndex(scrollerID, index, highrange, increment, listsize) {\n      // clarity\n      var isInserting = increment == 1;\n      var isRemoving = increment == -1;\n      var emptyreturn = [null, null, [], [], [], []]; // no action return value\n      // cache resources\n      var indexToItemIDMap = this.scrollerDataMap.get(scrollerID).indexToItemIDMap;\n      var itemMetadataMap = this.itemMetadataMap;\n      var orderedCacheIndexList = Array.from(indexToItemIDMap.keys()).sort(function (a, b) {\n        return a - b;\n      }); // ascending order\n      var itemSet = this.scrollerDataMap.get(scrollerID).itemSet;\n      // ---------- define contiguous range parameters; add sentinels ---------------\n      // high range is the highest index number of the insert/remove range\n      var highrangeindex = highrange;\n      var lowrangeindex = index; // semantics - name symmetry\n      if (isRemoving) {\n        // removal must be entirely within scope of the list\n        if (highrangeindex > listsize - 1) {\n          highrangeindex = listsize - 1;\n          if (highrangeindex < lowrangeindex) return emptyreturn;\n        }\n      } else {\n        // isInserting\n        // addition can at most start at the next lowrangeindex above the current list; aka append\n        if (lowrangeindex > listsize) {\n          var diff = lowrangeindex - listsize;\n          lowrangeindex -= diff;\n          highrangeindex -= diff;\n        }\n      }\n      // rangecount is the absolute number in the insert/remove contiguous range\n      var rangecount = highrangeindex - lowrangeindex + 1;\n      // range increment adds sign to rangecount to indicate add/remove\n      var rangeincrement = rangecount * increment;\n      var startChangeIndex = increment == 1 ? lowrangeindex : highrangeindex + (rangeincrement + 1);\n      var toShiftStartIndex; // start of indexes to shift up (insert) or down (remove)\n      if (isInserting) {\n        toShiftStartIndex = lowrangeindex;\n      } else {\n        // isRemoving\n        toShiftStartIndex = highrangeindex + 1;\n      }\n      // ---------- define range boundaries within ordered cache index list ------------\n      // obtain starptr for indexes to shift\n      var toShiftStartCachePtr = orderedCacheIndexList.findIndex(function (value) {\n        return value >= toShiftStartIndex;\n      });\n      // obtain lowCacheRangePtr...\n      var lowCacheRangePtr = orderedCacheIndexList.findIndex(function (value) {\n        return value >= lowrangeindex && value <= highrangeindex;\n      });\n      // obtain highCacheRangePtr...\n      var reverseCacheIndexList = Array.from(orderedCacheIndexList).reverse();\n      var highCacheRangePtr = reverseCacheIndexList.findIndex(function (value) {\n        return value <= highrangeindex && value >= lowrangeindex;\n      });\n      // take inverse of highCacheRangePtr for non-reverse sort\n      if (highCacheRangePtr != -1) {\n        highCacheRangePtr = orderedCacheIndexList.length - 1 - highCacheRangePtr;\n        if (highCacheRangePtr < lowCacheRangePtr) highCacheRangePtr = -1;\n      }\n      // ----------- isolate index range list and shift list ------------\n      // cache inputs\n      var cacheRangeIndexesList,\n        // for either insert or remove\n        cacheToShiftIndexesList; // for either insert or remove\n      // get inputs\n      if (lowCacheRangePtr == -1) {\n        // core scope is out of view\n        cacheRangeIndexesList = [];\n        cacheToShiftIndexesList = [];\n      } else if (highCacheRangePtr == -1) {\n        // core scope is partially in view; lowCacheRangePtr is available\n        // all items above lowCacheRangePtr must have indexes reset\n        cacheRangeIndexesList = orderedCacheIndexList.slice(lowCacheRangePtr);\n        if (isInserting) {\n          cacheToShiftIndexesList = cacheRangeIndexesList.slice();\n        } else {\n          if (toShiftStartCachePtr == -1) {\n            cacheToShiftIndexesList = [];\n          } else {\n            cacheToShiftIndexesList = orderedCacheIndexList.slice(toShiftStartCachePtr);\n          }\n        }\n      } else {\n        // range fully in view\n        cacheRangeIndexesList = orderedCacheIndexList.slice(lowCacheRangePtr, highCacheRangePtr + 1);\n        if (isInserting) {\n          cacheToShiftIndexesList = orderedCacheIndexList.slice(toShiftStartCachePtr);\n        } else {\n          if (toShiftStartCachePtr == -1) {\n            cacheToShiftIndexesList = [];\n          } else {\n            cacheToShiftIndexesList = orderedCacheIndexList.slice(toShiftStartCachePtr);\n          }\n        }\n      }\n      // ----------- list cache indexes and items to replace or remove -----------\n      // cache outputs\n      // for insert, the range being inserted; for remove, any tail cradle items abandoned\n      var cacheIndexesToReplaceList = [],\n        // for insert, the range being inserted\n        cacheIndexesToRemoveList = [],\n        // for remove, the range being removed\n        cacheItemsToRemoveList = []; // for remove, derived from the previous\n      if (isInserting) {\n        cacheIndexesToReplaceList = cacheRangeIndexesList;\n      } else {\n        // isRemoving\n        cacheIndexesToRemoveList = cacheRangeIndexesList;\n        // get cacheItemsToRemoveList\n        var _iterator5 = _createForOfIteratorHelper(cacheIndexesToRemoveList),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _index = _step5.value;\n            cacheItemsToRemoveList.push(indexToItemIDMap.get(_index));\n            indexToItemIDMap["delete"](_index);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n      // ----------- conduct cache operations; capture list of shifted indexes ----------\n      // increment higher from top of list to preserve lower values for subsequent increment\n      if (isInserting) cacheToShiftIndexesList.reverse();\n      var cacheIndexesShiftedList = []; // track shifted indexes\n      var cacheIndexesTransferredSet = new Set(); // obtain list of orphaned indexes\n      // function modify index-to-itemid map, and metadata map, for index shifts\n      var processIndexFn = function processIndexFn(index) {\n        var itemID = indexToItemIDMap.get(index);\n        var newIndex = index + rangeincrement;\n        if (isRemoving) {\n          cacheIndexesTransferredSet.add(index);\n          cacheIndexesTransferredSet["delete"](newIndex);\n        }\n        indexToItemIDMap.set(newIndex, itemID);\n        itemMetadataMap.get(itemID).index = newIndex;\n        cacheIndexesShiftedList.push(newIndex);\n      };\n      // walk through items to shift\n      cacheToShiftIndexesList.forEach(processIndexFn);\n      // delete remaining indexes and items now duplicates; track portal data to remove after cradle updated\n      var portalPartitionItemsForDeleteList = []; // hold portals for deletion until after after cradle synch\n      var cacheIndexesRemovedList = [];\n      if (isInserting) {\n        var _iterator6 = _createForOfIteratorHelper(cacheIndexesToReplaceList),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var _index2 = _step6.value;\n            indexToItemIDMap["delete"](_index2);\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      } else {\n        // isRemoving\n        var _iterator7 = _createForOfIteratorHelper(cacheItemsToRemoveList),\n          _step7;\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var itemID = _step7.value;\n            var _itemMetadataMap$get3 = itemMetadataMap.get(itemID),\n              partitionID = _itemMetadataMap$get3.partitionID;\n            portalPartitionItemsForDeleteList.push({\n              itemID: itemID,\n              partitionID: partitionID\n            });\n            itemMetadataMap["delete"](itemID);\n            itemSet["delete"](itemID);\n          }\n          // abandoned indexes from remove process\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n        var orphanedIndexesTransferredList = Array.from(cacheIndexesTransferredSet);\n        for (var _i2 = 0, _orphanedIndexesTrans = orphanedIndexesTransferredList; _i2 < _orphanedIndexesTrans.length; _i2++) {\n          var _index3 = _orphanedIndexesTrans[_i2];\n          indexToItemIDMap["delete"](_index3);\n        }\n        cacheIndexesRemovedList = cacheIndexesToRemoveList.concat(orphanedIndexesTransferredList);\n      }\n      if (isInserting) cacheIndexesShiftedList.reverse(); // return to ascending order\n      // --------------- returns ---------------\n      // return values for caller to send to contenthandler for cradle synchronization\n      return [startChangeIndex, rangeincrement, cacheIndexesShiftedList, cacheIndexesRemovedList, cacheIndexesToReplaceList, portalPartitionItemsForDeleteList];\n    }\n    // ==========================[ INDIVIDUAL PORTAL MANAGEMENT ]============================\n    // used for size calculation in pareCacheToMax\n    // registers indexes when requested but before retrieved and entered into cache\n  }, {\n    key: "registerPendingPortal",\n    value: function registerPendingPortal(scrollerID, index) {\n      this.scrollerDataMap.get(scrollerID).requestedSet.add(index);\n    }\n  }, {\n    key: "unregisterPendingPortal",\n    value: function unregisterPendingPortal(scrollerID, index) {\n      var scrollerDataMap = this.scrollerDataMap.get(scrollerID);\n      if (scrollerDataMap) {\n        // otherwise scroller has been deleted\n        scrollerDataMap.requestedSet["delete"](index);\n      }\n    }\n  }, {\n    key: "getNewItemID",\n    value: function getNewItemID() {\n      return this.globalItemID++;\n    }\n    // get new or existing itemID for contentfunctions.createCellFrame\n  }, {\n    key: "getNewOrExistingItemID",\n    value: function getNewOrExistingItemID(scrollerID, index) {\n      var _this$scrollerDataMap8 = this.scrollerDataMap.get(scrollerID),\n        indexToItemIDMap = _this$scrollerDataMap8.indexToItemIDMap;\n      var itemID = indexToItemIDMap.has(index) ? indexToItemIDMap.get(index) : this.getNewItemID();\n      return itemID;\n    }\n    // create new portal\n  }, {\n    key: "createPortal",\n    value: function createPortal(scrollerID, component, index, itemID, scrollerProperties) {\n      var isPreload = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var scrollerDataMap, _this$scrollerDataMap9, layout, cellHeight, cellWidth, orientation, portalNode, partitionID, portal, portalMetadata;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.unregisterPendingPortal(scrollerID, index);\n              scrollerDataMap = this.scrollerDataMap.get(scrollerID);\n              if (scrollerDataMap) {\n                _context2.next = 4;\n                break;\n              }\n              return _context2.abrupt("return", null);\n            case 4:\n              _this$scrollerDataMap9 = this.scrollerDataMap.get(scrollerID).cradleParameters.cradleInheritedPropertiesRef.current, layout = _this$scrollerDataMap9.layout, cellHeight = _this$scrollerDataMap9.cellHeight, cellWidth = _this$scrollerDataMap9.cellWidth, orientation = _this$scrollerDataMap9.orientation;\n              portalNode = createPortalNode(index, itemID);\n              _context2.next = 8;\n              return this.findPartitionWithRoom();\n            case 8:\n              partitionID = _context2.sent;\n              portal = react_1["default"].createElement("div", {\n                "data-type": \'portalwrapper\',\n                key: itemID,\n                "data-itemid": itemID,\n                "data-index": index\n              }, react_1["default"].createElement(react_reverse_portal_1.InPortal, {\n                key: itemID,\n                node: portalNode\n              }, " ", component, " "));\n              this.addPartitionPortal(partitionID, itemID, portal);\n              portalMetadata = {\n                portalNode: portalNode,\n                index: index,\n                itemID: itemID,\n                scrollerID: scrollerID,\n                scrollerProperties: scrollerProperties,\n                component: component,\n                partitionID: partitionID\n              };\n              this.itemMetadataMap.set(itemID, portalMetadata);\n              scrollerDataMap.itemSet.add(itemID);\n              scrollerDataMap.indexToItemIDMap.set(index, itemID);\n              if (!isPreload) this.renderPortalLists();\n              return _context2.abrupt("return", portalMetadata);\n            case 17:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n    // used for preloading new item\n  }, {\n    key: "preloadItem",\n    value: function preloadItem(scrollerID, index, getItem, scrollerPropertiesRef, itemExceptionCallback, maxListsizeInterrupt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var itemID, returnvalue, usercontent, error, content, scrollerProperties;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              itemID = this.getNewItemID();\n              _context3.prev = 1;\n              _context3.next = 4;\n              return getItem(index, itemID);\n            case 4:\n              usercontent = _context3.sent;\n              if (usercontent === null) returnvalue = usercontent;\n              _context3.next = 12;\n              break;\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3["catch"](1);\n              returnvalue = usercontent = undefined;\n              error = _context3.t0;\n            case 12:\n              if (usercontent !== null && usercontent !== undefined) {\n                if (!react_1["default"].isValidElement(usercontent)) {\n                  returnvalue = usercontent;\n                  usercontent = undefined;\n                  error = new Error(\'invalid React element\');\n                }\n              }\n              if (!(usercontent !== null && usercontent !== undefined)) {\n                _context3.next = 20;\n                break;\n              }\n              scrollerProperties = {\n                scrollerPropertiesRef: scrollerPropertiesRef,\n                cellFramePropertiesRef: {\n                  current: {\n                    index: index,\n                    itemID: itemID\n                  }\n                }\n              };\n              if (usercontent.props.hasOwnProperty(\'scrollerProperties\')) {\n                content = react_1["default"].cloneElement(usercontent, {\n                  scrollerProperties: scrollerProperties\n                });\n              } else {\n                content = usercontent;\n              }\n              // const portalData = \n              _context3.next = 18;\n              return this.createPortal(scrollerID, content, index, itemID, scrollerProperties, true);\n            case 18:\n              _context3.next = 21;\n              break;\n            case 20:\n              if (usercontent === undefined) {\n                itemExceptionCallback && itemExceptionCallback(index, itemID, returnvalue, \'preload\', error);\n              } else {\n                // usercontent === null; last item in list\n                itemExceptionCallback && itemExceptionCallback(index, itemID, returnvalue, \'preload\', new Error(\'end of list\'));\n                maxListsizeInterrupt(index);\n              }\n            case 21:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[1, 8]]);\n      }));\n    }\n    // delete a portal list item\n    // accepts an array of indexes\n  }, {\n    key: "deletePortalByIndex",\n    value: function deletePortalByIndex(scrollerID, index, deleteListCallback) {\n      var indexArray = !Array.isArray(index) ? [index] : index;\n      var _this$scrollerDataMap10 = this.scrollerDataMap.get(scrollerID),\n        indexToItemIDMap = _this$scrollerDataMap10.indexToItemIDMap,\n        itemSet = _this$scrollerDataMap10.itemSet;\n      var itemMetadataMap = this.itemMetadataMap;\n      var removePartitionPortal = this.removePartitionPortal;\n      var deleteList = [];\n      var _iterator8 = _createForOfIteratorHelper(indexArray),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _index4 = _step8.value;\n          var itemID = indexToItemIDMap.get(_index4);\n          if (itemID === undefined) continue; // async mismatch\n          deleteList.push({\n            index: _index4,\n            itemID: itemID\n          });\n          var _itemMetadataMap$get4 = itemMetadataMap.get(itemID),\n            partitionID = _itemMetadataMap$get4.partitionID;\n          removePartitionPortal(partitionID, itemID);\n          itemMetadataMap["delete"](itemID);\n          itemSet["delete"](itemID);\n          indexToItemIDMap["delete"](_index4);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      deleteListCallback && deleteListCallback(deleteList);\n    }\n    // query existence of a portal list item\n  }, {\n    key: "hasPortal",\n    value: function hasPortal(itemID) {\n      return this.itemMetadataMap.has(itemID);\n    }\n  }, {\n    key: "getPortalMetadata",\n    value: function getPortalMetadata(itemID) {\n      if (this.hasPortal(itemID)) {\n        return this.itemMetadataMap.get(itemID);\n      }\n    }\n  }]);\n  return CacheAPI;\n}();\nexports["default"] = CacheAPI;\n// ==========================[ Utility function ]============================\n// get a react-reverse-portal InPortal component, with its metadata\n// with user content and container\n// see also some styles set in CellFrame\nvar createPortalNode = function createPortalNode(index, itemID) {\n  var portalNode = (0, react_reverse_portal_1.createHtmlPortalNode)();\n  var container = portalNode.element;\n  container.style.overflow = \'hidden\';\n  container.dataset.type = \'contentenvelope\';\n  container.dataset.index = index;\n  container.dataset.cacheitemid = itemID;\n  return portalNode;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/portalcache/cacheAPI.tsx\n')},"./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorBoundary: () => (/* binding */ ErrorBoundary),\n/* harmony export */   ErrorBoundaryContext: () => (/* binding */ ErrorBoundaryContext),\n/* harmony export */   useErrorBoundary: () => (/* binding */ useErrorBoundary),\n/* harmony export */   withErrorBoundary: () => (/* binding */ withErrorBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\'use client\';\n\n\nconst ErrorBoundaryContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n\nconst initialState = {\n  didCatch: false,\n  error: null\n};\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  constructor(props) {\n    super(props);\n    this.resetErrorBoundary = this.resetErrorBoundary.bind(this);\n    this.state = initialState;\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      didCatch: true,\n      error\n    };\n  }\n  resetErrorBoundary() {\n    const {\n      error\n    } = this.state;\n    if (error !== null) {\n      var _this$props$onReset, _this$props;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {\n        args,\n        reason: "imperative-api"\n      });\n      this.setState(initialState);\n    }\n  }\n  componentDidCatch(error, info) {\n    var _this$props$onError, _this$props2;\n    (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      didCatch\n    } = this.state;\n    const {\n      resetKeys\n    } = this.props;\n\n    // There\'s an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,\n    // we\'d end up resetting the error boundary immediately.\n    // This would likely trigger a second error to be thrown.\n    // So we make sure that we don\'t check the resetKeys on the first call of cDU after the error is set.\n\n    if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {\n      var _this$props$onReset2, _this$props3;\n      (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {\n        next: resetKeys,\n        prev: prevProps.resetKeys,\n        reason: "keys"\n      });\n      this.setState(initialState);\n    }\n  }\n  render() {\n    const {\n      children,\n      fallbackRender,\n      FallbackComponent,\n      fallback\n    } = this.props;\n    const {\n      didCatch,\n      error\n    } = this.state;\n    let childToRender = children;\n    if (didCatch) {\n      const props = {\n        error,\n        resetErrorBoundary: this.resetErrorBoundary\n      };\n      if ((0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(fallback)) {\n        childToRender = fallback;\n      } else if (typeof fallbackRender === "function") {\n        childToRender = fallbackRender(props);\n      } else if (FallbackComponent) {\n        childToRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(FallbackComponent, props);\n      } else {\n        {\n          console.error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop");\n        }\n        throw error;\n      }\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ErrorBoundaryContext.Provider, {\n      value: {\n        didCatch,\n        error,\n        resetErrorBoundary: this.resetErrorBoundary\n      }\n    }, childToRender);\n  }\n}\nfunction hasArrayChanged() {\n  let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]));\n}\n\nfunction assertErrorBoundaryContext(value) {\n  if (value == null || typeof value.didCatch !== "boolean" || typeof value.resetErrorBoundary !== "function") {\n    throw new Error("ErrorBoundaryContext not found");\n  }\n  return true;\n}\n\nfunction useErrorBoundary() {\n  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ErrorBoundaryContext);\n  assertErrorBoundaryContext(context);\n  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n    error: null,\n    hasError: false\n  });\n  const memoized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n    resetBoundary: () => {\n      context === null || context === void 0 ? void 0 : context.resetErrorBoundary();\n      setState({\n        error: null,\n        hasError: false\n      });\n    },\n    showBoundary: error => setState({\n      error,\n      hasError: true\n    })\n  }), [context === null || context === void 0 ? void 0 : context.resetErrorBoundary]);\n  if (state.hasError) {\n    throw state.error;\n  }\n  return memoized;\n}\n\nfunction withErrorBoundary(component, errorBoundaryProps) {\n  const Wrapped = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ErrorBoundary, errorBoundaryProps, (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(component, {\n    ...props,\n    ref\n  })));\n\n  // Format for display in DevTools\n  const name = component.displayName || component.name || "Unknown";\n  Wrapped.displayName = "withErrorBoundary(".concat(name, ")");\n  return Wrapped;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js\n')},"./node_modules/react-reverse-portal/dist/web/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InPortal: () => (/* binding */ InPortal),\n/* harmony export */   OutPortal: () => (/* binding */ OutPortal),\n/* harmony export */   createHtmlPortalNode: () => (/* binding */ createHtmlPortalNode),\n/* harmony export */   createSvgPortalNode: () => (/* binding */ createSvgPortalNode)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "react-dom");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n// Internally, the portalNode must be for either HTML or SVG elements\nvar ELEMENT_TYPE_HTML = \'html\';\nvar ELEMENT_TYPE_SVG = \'svg\';\n// ReactDOM can handle several different namespaces, but they\'re not exported publicly\n// https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/DOMNamespaces.js#L8-L10\nvar SVG_NAMESPACE = \'http://www.w3.org/2000/svg\';\nvar validateElementType = function (domElement, elementType) {\n    if (elementType === ELEMENT_TYPE_HTML) {\n        return domElement instanceof HTMLElement;\n    }\n    if (elementType === ELEMENT_TYPE_SVG) {\n        return domElement instanceof SVGElement;\n    }\n    throw new Error("Unrecognized element type \\"" + elementType + "\\" for validateElementType.");\n};\n// This is the internal implementation: the public entry points set elementType to an appropriate value\nvar createPortalNode = function (elementType, options) {\n    var initialProps = {};\n    var parent;\n    var lastPlaceholder;\n    var element;\n    if (elementType === ELEMENT_TYPE_HTML) {\n        element = document.createElement(\'div\');\n    }\n    else if (elementType === ELEMENT_TYPE_SVG) {\n        element = document.createElementNS(SVG_NAMESPACE, \'g\');\n    }\n    else {\n        throw new Error("Invalid element type \\"" + elementType + "\\" for createPortalNode: must be \\"html\\" or \\"svg\\".");\n    }\n    if (options && typeof options === "object") {\n        for (var _i = 0, _a = Object.entries(options.attributes); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            element.setAttribute(key, value);\n        }\n    }\n    var portalNode = {\n        element: element,\n        elementType: elementType,\n        setPortalProps: function (props) {\n            initialProps = props;\n        },\n        getInitialPortalProps: function () {\n            return initialProps;\n        },\n        mount: function (newParent, newPlaceholder) {\n            if (newPlaceholder === lastPlaceholder) {\n                // Already mounted - noop.\n                return;\n            }\n            portalNode.unmount();\n            // To support SVG and other non-html elements, the portalNode\'s elementType needs to match\n            // the elementType it\'s being rendered into\n            if (newParent !== parent) {\n                if (!validateElementType(newParent, elementType)) {\n                    throw new Error("Invalid element type for portal: \\"" + elementType + "\\" portalNodes must be used with " + elementType + " elements, but OutPortal is within <" + newParent.tagName + ">.");\n                }\n            }\n            newParent.replaceChild(portalNode.element, newPlaceholder);\n            parent = newParent;\n            lastPlaceholder = newPlaceholder;\n        },\n        unmount: function (expectedPlaceholder) {\n            if (expectedPlaceholder && expectedPlaceholder !== lastPlaceholder) {\n                // Skip unmounts for placeholders that aren\'t currently mounted\n                // They will have been automatically unmounted already by a subsequent mount()\n                return;\n            }\n            if (parent && lastPlaceholder) {\n                parent.replaceChild(lastPlaceholder, portalNode.element);\n                parent = undefined;\n                lastPlaceholder = undefined;\n            }\n        }\n    };\n    return portalNode;\n};\nvar InPortal = /** @class */ (function (_super) {\n    __extends(InPortal, _super);\n    function InPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.addPropsChannel = function () {\n            Object.assign(_this.props.node, {\n                setPortalProps: function (props) {\n                    // Rerender the child node here if/when the out portal props change\n                    _this.setState({ nodeProps: props });\n                }\n            });\n        };\n        _this.state = {\n            nodeProps: _this.props.node.getInitialPortalProps(),\n        };\n        return _this;\n    }\n    InPortal.prototype.componentDidMount = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.componentDidUpdate = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, children = _a.children, node = _a.node;\n        return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, function (child) {\n            if (!react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child))\n                return child;\n            return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, _this.state.nodeProps);\n        }), node.element);\n    };\n    return InPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar OutPortal = /** @class */ (function (_super) {\n    __extends(OutPortal, _super);\n    function OutPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.placeholderNode = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        _this.passPropsThroughPortal();\n        return _this;\n    }\n    OutPortal.prototype.passPropsThroughPortal = function () {\n        var propsForTarget = Object.assign({}, this.props, { node: undefined });\n        this.props.node.setPortalProps(propsForTarget);\n    };\n    OutPortal.prototype.componentDidMount = function () {\n        var node = this.props.node;\n        this.currentPortalNode = node;\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentDidUpdate = function () {\n        // We re-mount on update, just in case we were unmounted (e.g. by\n        // a second OutPortal, which has now been removed)\n        var node = this.props.node;\n        // If we\'re switching portal nodes, we need to clean up the current one first.\n        if (this.currentPortalNode && node !== this.currentPortalNode) {\n            this.currentPortalNode.unmount(this.placeholderNode.current);\n            this.currentPortalNode.setPortalProps({});\n            this.currentPortalNode = node;\n        }\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentWillUnmount = function () {\n        var node = this.props.node;\n        node.unmount(this.placeholderNode.current);\n        node.setPortalProps({});\n    };\n    OutPortal.prototype.render = function () {\n        // Render a placeholder to the DOM, so we can get a reference into\n        // our location in the DOM, and swap it out for the portaled node.\n        // A <div> placeholder works fine even for SVG.\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { ref: this.placeholderNode });\n    };\n    return OutPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar createHtmlPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_HTML);\nvar createSvgPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_SVG);\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-reverse-portal/dist/web/index.js\n')},"./node_modules/requestidlecallback/index.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}(function(){\n\t'use strict';\n\tvar scheduleStart, throttleDelay, lazytimer, lazyraf;\n\tvar root = typeof window != 'undefined' ?\n\t\twindow :\n\t\ttypeof __webpack_require__.g != undefined ?\n\t\t\t__webpack_require__.g :\n\t\t\tthis || {};\n\tvar requestAnimationFrame = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;\n\tvar cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;\n\tvar tasks = [];\n\tvar runAttempts = 0;\n\tvar isRunning = false;\n\tvar remainingTime = 7;\n\tvar minThrottle = 35;\n\tvar throttle = 125;\n\tvar index = 0;\n\tvar taskStart = 0;\n\tvar tasklength = 0;\n\tvar IdleDeadline = {\n\t\tget didTimeout(){\n\t\t\treturn false;\n\t\t},\n\t\ttimeRemaining: function(){\n\t\t\tvar timeRemaining = remainingTime - (Date.now() - taskStart);\n\t\t\treturn timeRemaining < 0 ? 0 : timeRemaining;\n\t\t},\n\t};\n\tvar setInactive = debounce(function(){\n\t\tremainingTime = 22;\n\t\tthrottle = 66;\n\t\tminThrottle = 0;\n\t});\n\n\tfunction debounce(fn){\n\t\tvar id, timestamp;\n\t\tvar wait = 99;\n\t\tvar check = function(){\n\t\t\tvar last = (Date.now()) - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tid = setTimeout(check, wait - last);\n\t\t\t} else {\n\t\t\t\tid = null;\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\t\treturn function(){\n\t\t\ttimestamp = Date.now();\n\t\t\tif(!id){\n\t\t\t\tid = setTimeout(check, wait);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction abortRunning(){\n\t\tif(isRunning){\n\t\t\tif(lazyraf){\n\t\t\t\tcancelRequestAnimationFrame(lazyraf);\n\t\t\t}\n\t\t\tif(lazytimer){\n\t\t\t\tclearTimeout(lazytimer);\n\t\t\t}\n\t\t\tisRunning = false;\n\t\t}\n\t}\n\n\tfunction onInputorMutation(){\n\t\tif(throttle != 125){\n\t\t\tremainingTime = 7;\n\t\t\tthrottle = 125;\n\t\t\tminThrottle = 35;\n\n\t\t\tif(isRunning) {\n\t\t\t\tabortRunning();\n\t\t\t\tscheduleLazy();\n\t\t\t}\n\t\t}\n\t\tsetInactive();\n\t}\n\n\tfunction scheduleAfterRaf() {\n\t\tlazyraf = null;\n\t\tlazytimer = setTimeout(runTasks, 0);\n\t}\n\n\tfunction scheduleRaf(){\n\t\tlazytimer = null;\n\t\trequestAnimationFrame(scheduleAfterRaf);\n\t}\n\n\tfunction scheduleLazy(){\n\n\t\tif(isRunning){return;}\n\t\tthrottleDelay = throttle - (Date.now() - taskStart);\n\n\t\tscheduleStart = Date.now();\n\n\t\tisRunning = true;\n\n\t\tif(minThrottle && throttleDelay < minThrottle){\n\t\t\tthrottleDelay = minThrottle;\n\t\t}\n\n\t\tif(throttleDelay > 9){\n\t\t\tlazytimer = setTimeout(scheduleRaf, throttleDelay);\n\t\t} else {\n\t\t\tthrottleDelay = 0;\n\t\t\tscheduleRaf();\n\t\t}\n\t}\n\n\tfunction runTasks(){\n\t\tvar task, i, len;\n\t\tvar timeThreshold = remainingTime > 9 ?\n\t\t\t9 :\n\t\t\t1\n\t\t;\n\n\t\ttaskStart = Date.now();\n\t\tisRunning = false;\n\n\t\tlazytimer = null;\n\n\t\tif(runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart){\n\t\t\tfor(i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++){\n\t\t\t\ttask = tasks.shift();\n\t\t\t\ttasklength++;\n\t\t\t\tif(task){\n\t\t\t\t\ttask(IdleDeadline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(tasks.length){\n\t\t\tscheduleLazy();\n\t\t} else {\n\t\t\trunAttempts = 0;\n\t\t}\n\t}\n\n\tfunction requestIdleCallbackShim(task){\n\t\tindex++;\n\t\ttasks.push(task);\n\t\tscheduleLazy();\n\t\treturn index;\n\t}\n\n\tfunction cancelIdleCallbackShim(id){\n\t\tvar index = id - 1 - tasklength;\n\t\tif(tasks[index]){\n\t\t\ttasks[index] = null;\n\t\t}\n\t}\n\n\tif(!root.requestIdleCallback || !root.cancelIdleCallback){\n\t\troot.requestIdleCallback = requestIdleCallbackShim;\n\t\troot.cancelIdleCallback = cancelIdleCallbackShim;\n\n\t\tif(root.document && document.addEventListener){\n\t\t\troot.addEventListener('scroll', onInputorMutation, true);\n\t\t\troot.addEventListener('resize', onInputorMutation);\n\n\t\t\tdocument.addEventListener('focus', onInputorMutation, true);\n\t\t\tdocument.addEventListener('mouseover', onInputorMutation, true);\n\t\t\t['click', 'keypress', 'touchstart', 'mousedown'].forEach(function(name){\n\t\t\t\tdocument.addEventListener(name, onInputorMutation, {capture: true, passive: true});\n\t\t\t});\n\n\t\t\tif(root.MutationObserver){\n\t\t\t\tnew MutationObserver( onInputorMutation ).observe( document.documentElement, {childList: true, subtree: true, attributes: true} );\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\troot.requestIdleCallback(function(){}, {timeout: 0});\n\t\t} catch(e){\n\t\t\t(function(rIC){\n\t\t\t\tvar timeRemainingProto, timeRemaining;\n\t\t\t\troot.requestIdleCallback = function(fn, timeout){\n\t\t\t\t\tif(timeout && typeof timeout.timeout == 'number'){\n\t\t\t\t\t\treturn rIC(fn, timeout.timeout);\n\t\t\t\t\t}\n\t\t\t\t\treturn rIC(fn);\n\t\t\t\t};\n\t\t\t\tif(root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)){\n\t\t\t\t\ttimeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, 'timeRemaining');\n\t\t\t\t\tif(!timeRemaining || !timeRemaining.configurable || !timeRemaining.get){return;}\n\t\t\t\t\tObject.defineProperty(timeRemainingProto, 'timeRemaining', {\n\t\t\t\t\t\tvalue:  function(){\n\t\t\t\t\t\t\treturn timeRemaining.get.call(this);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(root.requestIdleCallback)\n\t\t}\n\t}\n\n\treturn {\n\t\trequest: requestIdleCallbackShim,\n\t\tcancel: cancelIdleCallbackShim,\n\t};\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/requestidlecallback/index.js\n")},react:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE_react__},"react-dom":Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE_react_dom__}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(B.exports,B,B.exports,__webpack_require__),B.exports}__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/InfiniteGridScroller.tsx");return __webpack_exports__})()));