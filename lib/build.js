/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["react-infinite-grid-scroller"] = factory(require("react"), require("react-dom"));
	else
		root["react-infinite-grid-scroller"] = factory(root["react"], root["react-dom"]);
})(self, (__WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOMRectReadOnly\": () => (/* binding */ DOMRectReadOnly)\n/* harmony export */ });\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n\nvar DOMRectReadOnly = (function () {\n    function DOMRectReadOnly(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.top = this.y;\n        this.left = this.x;\n        this.bottom = this.top + this.height;\n        this.right = this.left + this.width;\n        return (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_0__.freeze)(this);\n    }\n    DOMRectReadOnly.prototype.toJSON = function () {\n        var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n        return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };\n    };\n    DOMRectReadOnly.fromRect = function (rectangle) {\n        return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n    };\n    return DOMRectReadOnly;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL0RPTVJlY3RSZWFkT25seS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscURBQU07QUFDckI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQzBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvRE9NUmVjdFJlYWRPbmx5LmpzP2ZkZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJlZXplIH0gZnJvbSAnLi91dGlscy9mcmVlemUnO1xudmFyIERPTVJlY3RSZWFkT25seSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRE9NUmVjdFJlYWRPbmx5KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy50b3AgPSB0aGlzLnk7XG4gICAgICAgIHRoaXMubGVmdCA9IHRoaXMueDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLnRvcCArIHRoaXMuaGVpZ2h0O1xuICAgICAgICB0aGlzLnJpZ2h0ID0gdGhpcy5sZWZ0ICsgdGhpcy53aWR0aDtcbiAgICAgICAgcmV0dXJuIGZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgRE9NUmVjdFJlYWRPbmx5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHggPSBfYS54LCB5ID0gX2EueSwgdG9wID0gX2EudG9wLCByaWdodCA9IF9hLnJpZ2h0LCBib3R0b20gPSBfYS5ib3R0b20sIGxlZnQgPSBfYS5sZWZ0LCB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XG4gICAgICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHRvcDogdG9wLCByaWdodDogcmlnaHQsIGJvdHRvbTogYm90dG9tLCBsZWZ0OiBsZWZ0LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG4gICAgfTtcbiAgICBET01SZWN0UmVhZE9ubHkuZnJvbVJlY3QgPSBmdW5jdGlvbiAocmVjdGFuZ2xlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRE9NUmVjdFJlYWRPbmx5KHJlY3RhbmdsZS54LCByZWN0YW5nbGUueSwgcmVjdGFuZ2xlLndpZHRoLCByZWN0YW5nbGUuaGVpZ2h0KTtcbiAgICB9O1xuICAgIHJldHVybiBET01SZWN0UmVhZE9ubHk7XG59KCkpO1xuZXhwb3J0IHsgRE9NUmVjdFJlYWRPbmx5IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObservation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObservation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObservation\": () => (/* binding */ ResizeObservation)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResizeObserverBoxOptions */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\");\n/* harmony import */ var _algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./algorithms/calculateBoxSize */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\n\n\nvar skipNotifyOnElement = function (target) {\n    return !(0,_utils_element__WEBPACK_IMPORTED_MODULE_2__.isSVG)(target)\n        && !(0,_utils_element__WEBPACK_IMPORTED_MODULE_2__.isReplacedElement)(target)\n        && getComputedStyle(target).display === 'inline';\n};\nvar ResizeObservation = (function () {\n    function ResizeObservation(target, observedBox) {\n        this.target = target;\n        this.observedBox = observedBox || _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.CONTENT_BOX;\n        this.lastReportedSize = {\n            inlineSize: 0,\n            blockSize: 0\n        };\n    }\n    ResizeObservation.prototype.isActive = function () {\n        var size = (0,_algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_1__.calculateBoxSize)(this.target, this.observedBox, true);\n        if (skipNotifyOnElement(this.target)) {\n            this.lastReportedSize = size;\n        }\n        if (this.lastReportedSize.inlineSize !== size.inlineSize\n            || this.lastReportedSize.blockSize !== size.blockSize) {\n            return true;\n        }\n        return false;\n    };\n    return ResizeObservation;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmF0aW9uLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0U7QUFDTDtBQUNOO0FBQzNEO0FBQ0EsWUFBWSxxREFBSztBQUNqQixZQUFZLGlFQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDJGQUFvQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOEVBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUM0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmF0aW9uLmpzPzQ0YzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zIH0gZnJvbSAnLi9SZXNpemVPYnNlcnZlckJveE9wdGlvbnMnO1xuaW1wb3J0IHsgY2FsY3VsYXRlQm94U2l6ZSB9IGZyb20gJy4vYWxnb3JpdGhtcy9jYWxjdWxhdGVCb3hTaXplJztcbmltcG9ydCB7IGlzU1ZHLCBpc1JlcGxhY2VkRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvZWxlbWVudCc7XG52YXIgc2tpcE5vdGlmeU9uRWxlbWVudCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICByZXR1cm4gIWlzU1ZHKHRhcmdldClcbiAgICAgICAgJiYgIWlzUmVwbGFjZWRFbGVtZW50KHRhcmdldClcbiAgICAgICAgJiYgZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmRpc3BsYXkgPT09ICdpbmxpbmUnO1xufTtcbnZhciBSZXNpemVPYnNlcnZhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0LCBvYnNlcnZlZEJveCkge1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5vYnNlcnZlZEJveCA9IG9ic2VydmVkQm94IHx8IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5DT05URU5UX0JPWDtcbiAgICAgICAgdGhpcy5sYXN0UmVwb3J0ZWRTaXplID0ge1xuICAgICAgICAgICAgaW5saW5lU2l6ZTogMCxcbiAgICAgICAgICAgIGJsb2NrU2l6ZTogMFxuICAgICAgICB9O1xuICAgIH1cbiAgICBSZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuaXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzaXplID0gY2FsY3VsYXRlQm94U2l6ZSh0aGlzLnRhcmdldCwgdGhpcy5vYnNlcnZlZEJveCwgdHJ1ZSk7XG4gICAgICAgIGlmIChza2lwTm90aWZ5T25FbGVtZW50KHRoaXMudGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0UmVwb3J0ZWRTaXplID0gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYXN0UmVwb3J0ZWRTaXplLmlubGluZVNpemUgIT09IHNpemUuaW5saW5lU2l6ZVxuICAgICAgICAgICAgfHwgdGhpcy5sYXN0UmVwb3J0ZWRTaXplLmJsb2NrU2l6ZSAhPT0gc2l6ZS5ibG9ja1NpemUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBSZXNpemVPYnNlcnZhdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZhdGlvbiB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObservation.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserver.js":
/*!********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserver.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserver\": () => (/* binding */ ResizeObserver)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResizeObserverController */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\n\nvar ResizeObserver = (function () {\n    function ResizeObserver(callback) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (typeof callback !== 'function') {\n            throw new TypeError(\"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.connect(this, callback);\n    }\n    ResizeObserver.prototype.observe = function (target, options) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (!(0,_utils_element__WEBPACK_IMPORTED_MODULE_1__.isElement)(target)) {\n            throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.observe(this, target, options);\n    };\n    ResizeObserver.prototype.unobserve = function (target) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (!(0,_utils_element__WEBPACK_IMPORTED_MODULE_1__.isElement)(target)) {\n            throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.unobserve(this, target);\n    };\n    ResizeObserver.prototype.disconnect = function () {\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.disconnect(this);\n    };\n    ResizeObserver.toString = function () {\n        return 'function ResizeObserver () { [polyfill code] }';\n    };\n    return ResizeObserver;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRTtBQUMxQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1RkFBZ0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEseURBQVM7QUFDdEI7QUFDQTtBQUNBLFFBQVEsdUZBQWdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlEQUFTO0FBQ3RCO0FBQ0E7QUFDQSxRQUFRLHlGQUFrQztBQUMxQztBQUNBO0FBQ0EsUUFBUSwwRkFBbUM7QUFDM0M7QUFDQTtBQUNBLDZDQUE2QyxpQkFBaUI7QUFDOUQ7QUFDQTtBQUNBLENBQUM7QUFDeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9SZXNpemVPYnNlcnZlci5qcz9kMDIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlciB9IGZyb20gJy4vUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyJztcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvZWxlbWVudCc7XG52YXIgUmVzaXplT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUmVzaXplT2JzZXJ2ZXInOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdSZXNpemVPYnNlcnZlcic6IFRoZSBjYWxsYmFjayBwcm92aWRlZCBhcyBwYXJhbWV0ZXIgMSBpcyBub3QgYSBmdW5jdGlvbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmNvbm5lY3QodGhpcywgY2FsbGJhY2spO1xuICAgIH1cbiAgICBSZXNpemVPYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnb2JzZXJ2ZScgb24gJ1Jlc2l6ZU9ic2VydmVyJzogMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ29ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IHBhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlICdFbGVtZW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5vYnNlcnZlKHRoaXMsIHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBSZXNpemVPYnNlcnZlci5wcm90b3R5cGUudW5vYnNlcnZlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd1bm9ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd1bm9ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IHBhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlICdFbGVtZW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci51bm9ic2VydmUodGhpcywgdGFyZ2V0KTtcbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuZGlzY29ubmVjdCh0aGlzKTtcbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ2Z1bmN0aW9uIFJlc2l6ZU9ic2VydmVyICgpIHsgW3BvbHlmaWxsIGNvZGVdIH0nO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyO1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserver.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverBoxOptions\": () => (/* binding */ ResizeObserverBoxOptions)\n/* harmony export */ });\nvar ResizeObserverBoxOptions;\n(function (ResizeObserverBoxOptions) {\n    ResizeObserverBoxOptions[\"BORDER_BOX\"] = \"border-box\";\n    ResizeObserverBoxOptions[\"CONTENT_BOX\"] = \"content-box\";\n    ResizeObserverBoxOptions[\"DEVICE_PIXEL_CONTENT_BOX\"] = \"device-pixel-content-box\";\n})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNERBQTREO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zLmpzP2U1NTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucztcbihmdW5jdGlvbiAoUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zKSB7XG4gICAgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zW1wiQk9SREVSX0JPWFwiXSA9IFwiYm9yZGVyLWJveFwiO1xuICAgIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9uc1tcIkNPTlRFTlRfQk9YXCJdID0gXCJjb250ZW50LWJveFwiO1xuICAgIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9uc1tcIkRFVklDRV9QSVhFTF9DT05URU5UX0JPWFwiXSA9IFwiZGV2aWNlLXBpeGVsLWNvbnRlbnQtYm94XCI7XG59KShSZXNpemVPYnNlcnZlckJveE9wdGlvbnMgfHwgKFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyA9IHt9KSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverController\": () => (/* binding */ ResizeObserverController)\n/* harmony export */ });\n/* harmony import */ var _utils_scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/scheduler */ \"./node_modules/@juggle/resize-observer/lib/utils/scheduler.js\");\n/* harmony import */ var _ResizeObservation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ResizeObservation */ \"./node_modules/@juggle/resize-observer/lib/ResizeObservation.js\");\n/* harmony import */ var _ResizeObserverDetail__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ResizeObserverDetail */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js\");\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n\n\n\n\nvar observerMap = new WeakMap();\nvar getObservationIndex = function (observationTargets, target) {\n    for (var i = 0; i < observationTargets.length; i += 1) {\n        if (observationTargets[i].target === target) {\n            return i;\n        }\n    }\n    return -1;\n};\nvar ResizeObserverController = (function () {\n    function ResizeObserverController() {\n    }\n    ResizeObserverController.connect = function (resizeObserver, callback) {\n        var detail = new _ResizeObserverDetail__WEBPACK_IMPORTED_MODULE_2__.ResizeObserverDetail(resizeObserver, callback);\n        observerMap.set(resizeObserver, detail);\n    };\n    ResizeObserverController.observe = function (resizeObserver, target, options) {\n        var detail = observerMap.get(resizeObserver);\n        var firstObservation = detail.observationTargets.length === 0;\n        if (getObservationIndex(detail.observationTargets, target) < 0) {\n            firstObservation && _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.push(detail);\n            detail.observationTargets.push(new _ResizeObservation__WEBPACK_IMPORTED_MODULE_1__.ResizeObservation(target, options && options.box));\n            (0,_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.updateCount)(1);\n            _utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.scheduler.schedule();\n        }\n    };\n    ResizeObserverController.unobserve = function (resizeObserver, target) {\n        var detail = observerMap.get(resizeObserver);\n        var index = getObservationIndex(detail.observationTargets, target);\n        var lastObservation = detail.observationTargets.length === 1;\n        if (index >= 0) {\n            lastObservation && _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.splice(_utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.indexOf(detail), 1);\n            detail.observationTargets.splice(index, 1);\n            (0,_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.updateCount)(-1);\n        }\n    };\n    ResizeObserverController.disconnect = function (resizeObserver) {\n        var _this = this;\n        var detail = observerMap.get(resizeObserver);\n        detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });\n        detail.activeTargets.splice(0, detail.activeTargets.length);\n    };\n    return ResizeObserverController;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRDtBQUNIO0FBQ007QUFDSjtBQUMxRDtBQUNBO0FBQ0Esb0JBQW9CLCtCQUErQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1RUFBb0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdFQUFvQjtBQUNwRCwrQ0FBK0MsaUVBQWlCO0FBQ2hFLFlBQVksNkRBQVc7QUFDdkIsWUFBWSxnRUFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMEVBQXNCLENBQUMsMkVBQXVCO0FBQzdFO0FBQ0EsWUFBWSw2REFBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLG9EQUFvRDtBQUN0SDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ21DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmpzP2YzNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NoZWR1bGVyLCB1cGRhdGVDb3VudCB9IGZyb20gJy4vdXRpbHMvc2NoZWR1bGVyJztcbmltcG9ydCB7IFJlc2l6ZU9ic2VydmF0aW9uIH0gZnJvbSAnLi9SZXNpemVPYnNlcnZhdGlvbic7XG5pbXBvcnQgeyBSZXNpemVPYnNlcnZlckRldGFpbCB9IGZyb20gJy4vUmVzaXplT2JzZXJ2ZXJEZXRhaWwnO1xuaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi91dGlscy9yZXNpemVPYnNlcnZlcnMnO1xudmFyIG9ic2VydmVyTWFwID0gbmV3IFdlYWtNYXAoKTtcbnZhciBnZXRPYnNlcnZhdGlvbkluZGV4ID0gZnVuY3Rpb24gKG9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYnNlcnZhdGlvblRhcmdldHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKG9ic2VydmF0aW9uVGFyZ2V0c1tpXS50YXJnZXQgPT09IHRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufTtcbnZhciBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcigpIHtcbiAgICB9XG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmNvbm5lY3QgPSBmdW5jdGlvbiAocmVzaXplT2JzZXJ2ZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkZXRhaWwgPSBuZXcgUmVzaXplT2JzZXJ2ZXJEZXRhaWwocmVzaXplT2JzZXJ2ZXIsIGNhbGxiYWNrKTtcbiAgICAgICAgb2JzZXJ2ZXJNYXAuc2V0KHJlc2l6ZU9ic2VydmVyLCBkZXRhaWwpO1xuICAgIH07XG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLm9ic2VydmUgPSBmdW5jdGlvbiAocmVzaXplT2JzZXJ2ZXIsIHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgZGV0YWlsID0gb2JzZXJ2ZXJNYXAuZ2V0KHJlc2l6ZU9ic2VydmVyKTtcbiAgICAgICAgdmFyIGZpcnN0T2JzZXJ2YXRpb24gPSBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgaWYgKGdldE9ic2VydmF0aW9uSW5kZXgoZGV0YWlsLm9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KSA8IDApIHtcbiAgICAgICAgICAgIGZpcnN0T2JzZXJ2YXRpb24gJiYgcmVzaXplT2JzZXJ2ZXJzLnB1c2goZGV0YWlsKTtcbiAgICAgICAgICAgIGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMucHVzaChuZXcgUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0LCBvcHRpb25zICYmIG9wdGlvbnMuYm94KSk7XG4gICAgICAgICAgICB1cGRhdGVDb3VudCgxKTtcbiAgICAgICAgICAgIHNjaGVkdWxlci5zY2hlZHVsZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIudW5vYnNlcnZlID0gZnVuY3Rpb24gKHJlc2l6ZU9ic2VydmVyLCB0YXJnZXQpIHtcbiAgICAgICAgdmFyIGRldGFpbCA9IG9ic2VydmVyTWFwLmdldChyZXNpemVPYnNlcnZlcik7XG4gICAgICAgIHZhciBpbmRleCA9IGdldE9ic2VydmF0aW9uSW5kZXgoZGV0YWlsLm9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGxhc3RPYnNlcnZhdGlvbiA9IGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMubGVuZ3RoID09PSAxO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgbGFzdE9ic2VydmF0aW9uICYmIHJlc2l6ZU9ic2VydmVycy5zcGxpY2UocmVzaXplT2JzZXJ2ZXJzLmluZGV4T2YoZGV0YWlsKSwgMSk7XG4gICAgICAgICAgICBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB1cGRhdGVDb3VudCgtMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKHJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBkZXRhaWwgPSBvYnNlcnZlck1hcC5nZXQocmVzaXplT2JzZXJ2ZXIpO1xuICAgICAgICBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAob3QpIHsgcmV0dXJuIF90aGlzLnVub2JzZXJ2ZShyZXNpemVPYnNlcnZlciwgb3QudGFyZ2V0KTsgfSk7XG4gICAgICAgIGRldGFpbC5hY3RpdmVUYXJnZXRzLnNwbGljZSgwLCBkZXRhaWwuYWN0aXZlVGFyZ2V0cy5sZW5ndGgpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcjtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverDetail\": () => (/* binding */ ResizeObserverDetail)\n/* harmony export */ });\nvar ResizeObserverDetail = (function () {\n    function ResizeObserverDetail(resizeObserver, callback) {\n        this.activeTargets = [];\n        this.skippedTargets = [];\n        this.observationTargets = [];\n        this.observer = resizeObserver;\n        this.callback = callback;\n    }\n    return ResizeObserverDetail;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRGV0YWlsLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQytCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJEZXRhaWwuanM/NzgxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUmVzaXplT2JzZXJ2ZXJEZXRhaWwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyRGV0YWlsKHJlc2l6ZU9ic2VydmVyLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmFjdGl2ZVRhcmdldHMgPSBbXTtcbiAgICAgICAgdGhpcy5za2lwcGVkVGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLm9ic2VydmF0aW9uVGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLm9ic2VydmVyID0gcmVzaXplT2JzZXJ2ZXI7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyRGV0YWlsO1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyRGV0YWlsIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverEntry\": () => (/* binding */ ResizeObserverEntry)\n/* harmony export */ });\n/* harmony import */ var _algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/calculateBoxSize */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\");\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n\n\nvar ResizeObserverEntry = (function () {\n    function ResizeObserverEntry(target) {\n        var boxes = (0,_algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_0__.calculateBoxSizes)(target);\n        this.target = target;\n        this.contentRect = boxes.contentRect;\n        this.borderBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.borderBoxSize]);\n        this.contentBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.contentBoxSize]);\n        this.devicePixelContentBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.devicePixelContentBoxSize]);\n    }\n    return ResizeObserverEntry;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRW50cnkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtFO0FBQzFCO0FBQ3hDO0FBQ0E7QUFDQSxvQkFBb0IsK0VBQWlCO0FBQ3JDO0FBQ0E7QUFDQSw2QkFBNkIscURBQU07QUFDbkMsOEJBQThCLHFEQUFNO0FBQ3BDLHlDQUF5QyxxREFBTTtBQUMvQztBQUNBO0FBQ0EsQ0FBQztBQUM4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRW50cnkuanM/NDFlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxjdWxhdGVCb3hTaXplcyB9IGZyb20gJy4vYWxnb3JpdGhtcy9jYWxjdWxhdGVCb3hTaXplJztcbmltcG9ydCB7IGZyZWV6ZSB9IGZyb20gJy4vdXRpbHMvZnJlZXplJztcbnZhciBSZXNpemVPYnNlcnZlckVudHJ5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlckVudHJ5KHRhcmdldCkge1xuICAgICAgICB2YXIgYm94ZXMgPSBjYWxjdWxhdGVCb3hTaXplcyh0YXJnZXQpO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5jb250ZW50UmVjdCA9IGJveGVzLmNvbnRlbnRSZWN0O1xuICAgICAgICB0aGlzLmJvcmRlckJveFNpemUgPSBmcmVlemUoW2JveGVzLmJvcmRlckJveFNpemVdKTtcbiAgICAgICAgdGhpcy5jb250ZW50Qm94U2l6ZSA9IGZyZWV6ZShbYm94ZXMuY29udGVudEJveFNpemVdKTtcbiAgICAgICAgdGhpcy5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplID0gZnJlZXplKFtib3hlcy5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplXSk7XG4gICAgfVxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlckVudHJ5O1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyRW50cnkgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js":
/*!************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserverSize\": () => (/* binding */ ResizeObserverSize)\n/* harmony export */ });\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n\nvar ResizeObserverSize = (function () {\n    function ResizeObserverSize(inlineSize, blockSize) {\n        this.inlineSize = inlineSize;\n        this.blockSize = blockSize;\n        (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_0__.freeze)(this);\n    }\n    return ResizeObserverSize;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyU2l6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEscURBQU07QUFDZDtBQUNBO0FBQ0EsQ0FBQztBQUM2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyU2l6ZS5qcz9jNjU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyZWV6ZSB9IGZyb20gJy4vdXRpbHMvZnJlZXplJztcbnZhciBSZXNpemVPYnNlcnZlclNpemUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyU2l6ZShpbmxpbmVTaXplLCBibG9ja1NpemUpIHtcbiAgICAgICAgdGhpcy5pbmxpbmVTaXplID0gaW5saW5lU2l6ZTtcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSBibG9ja1NpemU7XG4gICAgICAgIGZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyU2l6ZTtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlclNpemUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"broadcastActiveObservations\": () => (/* binding */ broadcastActiveObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n/* harmony import */ var _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverEntry */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\");\n/* harmony import */ var _calculateDepthForNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculateDepthForNode */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\");\n/* harmony import */ var _calculateBoxSize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./calculateBoxSize */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\");\n\n\n\n\nvar broadcastActiveObservations = function () {\n    var shallowestDepth = Infinity;\n    var callbacks = [];\n    _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.forEach(function processObserver(ro) {\n        if (ro.activeTargets.length === 0) {\n            return;\n        }\n        var entries = [];\n        ro.activeTargets.forEach(function processTarget(ot) {\n            var entry = new _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverEntry(ot.target);\n            var targetDepth = (0,_calculateDepthForNode__WEBPACK_IMPORTED_MODULE_2__.calculateDepthForNode)(ot.target);\n            entries.push(entry);\n            ot.lastReportedSize = (0,_calculateBoxSize__WEBPACK_IMPORTED_MODULE_3__.calculateBoxSize)(ot.target, ot.observedBox);\n            if (targetDepth < shallowestDepth) {\n                shallowestDepth = targetDepth;\n            }\n        });\n        callbacks.push(function resizeObserverCallback() {\n            ro.callback.call(ro.observer, entries, ro.observer);\n        });\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n    });\n    for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n        var callback = callbacks_1[_i];\n        callback();\n    }\n    return shallowestDepth;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJEO0FBQ0U7QUFDRztBQUNWO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLElBQUksMkVBQXVCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIscUVBQW1CO0FBQy9DLDhCQUE4Qiw2RUFBcUI7QUFDbkQ7QUFDQSxrQ0FBa0MsbUVBQWdCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLDhDQUE4Qyx5QkFBeUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zLmpzP2NhYjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbmltcG9ydCB7IFJlc2l6ZU9ic2VydmVyRW50cnkgfSBmcm9tICcuLi9SZXNpemVPYnNlcnZlckVudHJ5JztcbmltcG9ydCB7IGNhbGN1bGF0ZURlcHRoRm9yTm9kZSB9IGZyb20gJy4vY2FsY3VsYXRlRGVwdGhGb3JOb2RlJztcbmltcG9ydCB7IGNhbGN1bGF0ZUJveFNpemUgfSBmcm9tICcuL2NhbGN1bGF0ZUJveFNpemUnO1xudmFyIGJyb2FkY2FzdEFjdGl2ZU9ic2VydmF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2hhbGxvd2VzdERlcHRoID0gSW5maW5pdHk7XG4gICAgdmFyIGNhbGxiYWNrcyA9IFtdO1xuICAgIHJlc2l6ZU9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIHByb2Nlc3NPYnNlcnZlcihybykge1xuICAgICAgICBpZiAocm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgICAgICByby5hY3RpdmVUYXJnZXRzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc1RhcmdldChvdCkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob3QudGFyZ2V0KTtcbiAgICAgICAgICAgIHZhciB0YXJnZXREZXB0aCA9IGNhbGN1bGF0ZURlcHRoRm9yTm9kZShvdC50YXJnZXQpO1xuICAgICAgICAgICAgZW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIG90Lmxhc3RSZXBvcnRlZFNpemUgPSBjYWxjdWxhdGVCb3hTaXplKG90LnRhcmdldCwgb3Qub2JzZXJ2ZWRCb3gpO1xuICAgICAgICAgICAgaWYgKHRhcmdldERlcHRoIDwgc2hhbGxvd2VzdERlcHRoKSB7XG4gICAgICAgICAgICAgICAgc2hhbGxvd2VzdERlcHRoID0gdGFyZ2V0RGVwdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiByZXNpemVPYnNlcnZlckNhbGxiYWNrKCkge1xuICAgICAgICAgICAgcm8uY2FsbGJhY2suY2FsbChyby5vYnNlcnZlciwgZW50cmllcywgcm8ub2JzZXJ2ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcm8uYWN0aXZlVGFyZ2V0cy5zcGxpY2UoMCwgcm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGgpO1xuICAgIH0pO1xuICAgIGZvciAodmFyIF9pID0gMCwgY2FsbGJhY2tzXzEgPSBjYWxsYmFja3M7IF9pIDwgY2FsbGJhY2tzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc18xW19pXTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYWxsb3dlc3REZXB0aDtcbn07XG5leHBvcnQgeyBicm9hZGNhc3RBY3RpdmVPYnNlcnZhdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateBoxSize\": () => (/* binding */ calculateBoxSize),\n/* harmony export */   \"calculateBoxSizes\": () => (/* binding */ calculateBoxSizes)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ResizeObserverBoxOptions */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\");\n/* harmony import */ var _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverSize */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\");\n/* harmony import */ var _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../DOMRectReadOnly */ \"./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/freeze */ \"./node_modules/@juggle/resize-observer/lib/utils/freeze.js\");\n/* harmony import */ var _utils_global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/global */ \"./node_modules/@juggle/resize-observer/lib/utils/global.js\");\n\n\n\n\n\n\nvar cache = new WeakMap();\nvar scrollRegexp = /auto|scroll/;\nvar verticalRegexp = /^tb|vertical/;\nvar IE = (/msie|trident/i).test(_utils_global__WEBPACK_IMPORTED_MODULE_5__.global.navigator && _utils_global__WEBPACK_IMPORTED_MODULE_5__.global.navigator.userAgent);\nvar parseDimension = function (pixel) { return parseFloat(pixel || '0'); };\nvar size = function (inlineSize, blockSize, switchSizes) {\n    if (inlineSize === void 0) { inlineSize = 0; }\n    if (blockSize === void 0) { blockSize = 0; }\n    if (switchSizes === void 0) { switchSizes = false; }\n    return new _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);\n};\nvar zeroBoxes = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_4__.freeze)({\n    devicePixelContentBoxSize: size(),\n    borderBoxSize: size(),\n    contentBoxSize: size(),\n    contentRect: new _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__.DOMRectReadOnly(0, 0, 0, 0)\n});\nvar calculateBoxSizes = function (target, forceRecalculation) {\n    if (forceRecalculation === void 0) { forceRecalculation = false; }\n    if (cache.has(target) && !forceRecalculation) {\n        return cache.get(target);\n    }\n    if ((0,_utils_element__WEBPACK_IMPORTED_MODULE_3__.isHidden)(target)) {\n        cache.set(target, zeroBoxes);\n        return zeroBoxes;\n    }\n    var cs = getComputedStyle(target);\n    var svg = (0,_utils_element__WEBPACK_IMPORTED_MODULE_3__.isSVG)(target) && target.ownerSVGElement && target.getBBox();\n    var removePadding = !IE && cs.boxSizing === 'border-box';\n    var switchSizes = verticalRegexp.test(cs.writingMode || '');\n    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n    var horizontalPadding = paddingLeft + paddingRight;\n    var verticalPadding = paddingTop + paddingBottom;\n    var horizontalBorderArea = borderLeft + borderRight;\n    var verticalBorderArea = borderTop + borderBottom;\n    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n    var boxes = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_4__.freeze)({\n        devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),\n        borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n        contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n        contentRect: new _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__.DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n    });\n    cache.set(target, boxes);\n    return boxes;\n};\nvar calculateBoxSize = function (target, observedBox, forceRecalculation) {\n    var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;\n    switch (observedBox) {\n        case _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:\n            return devicePixelContentBoxSize;\n        case _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.BORDER_BOX:\n            return borderBoxSize;\n        default:\n            return contentBoxSize;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlQm94U2l6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF1RTtBQUNaO0FBQ047QUFDRjtBQUNWO0FBQ0E7QUFDekM7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDJEQUFnQixJQUFJLHFFQUEwQjtBQUM5RSx3Q0FBd0M7QUFDeEM7QUFDQSxpQ0FBaUM7QUFDakMsZ0NBQWdDO0FBQ2hDLGtDQUFrQztBQUNsQyxlQUFlLG1FQUFrQjtBQUNqQztBQUNBLGdCQUFnQixxREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkRBQWU7QUFDcEMsQ0FBQztBQUNEO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0RBQVE7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHFEQUFLO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNkRBQWU7QUFDeEMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsd0dBQWlEO0FBQzlEO0FBQ0EsYUFBYSwwRkFBbUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlQm94U2l6ZS5qcz8xMDZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyB9IGZyb20gJy4uL1Jlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyc7XG5pbXBvcnQgeyBSZXNpemVPYnNlcnZlclNpemUgfSBmcm9tICcuLi9SZXNpemVPYnNlcnZlclNpemUnO1xuaW1wb3J0IHsgRE9NUmVjdFJlYWRPbmx5IH0gZnJvbSAnLi4vRE9NUmVjdFJlYWRPbmx5JztcbmltcG9ydCB7IGlzU1ZHLCBpc0hpZGRlbiB9IGZyb20gJy4uL3V0aWxzL2VsZW1lbnQnO1xuaW1wb3J0IHsgZnJlZXplIH0gZnJvbSAnLi4vdXRpbHMvZnJlZXplJztcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gJy4uL3V0aWxzL2dsb2JhbCc7XG52YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xudmFyIHNjcm9sbFJlZ2V4cCA9IC9hdXRvfHNjcm9sbC87XG52YXIgdmVydGljYWxSZWdleHAgPSAvXnRifHZlcnRpY2FsLztcbnZhciBJRSA9ICgvbXNpZXx0cmlkZW50L2kpLnRlc3QoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG52YXIgcGFyc2VEaW1lbnNpb24gPSBmdW5jdGlvbiAocGl4ZWwpIHsgcmV0dXJuIHBhcnNlRmxvYXQocGl4ZWwgfHwgJzAnKTsgfTtcbnZhciBzaXplID0gZnVuY3Rpb24gKGlubGluZVNpemUsIGJsb2NrU2l6ZSwgc3dpdGNoU2l6ZXMpIHtcbiAgICBpZiAoaW5saW5lU2l6ZSA9PT0gdm9pZCAwKSB7IGlubGluZVNpemUgPSAwOyB9XG4gICAgaWYgKGJsb2NrU2l6ZSA9PT0gdm9pZCAwKSB7IGJsb2NrU2l6ZSA9IDA7IH1cbiAgICBpZiAoc3dpdGNoU2l6ZXMgPT09IHZvaWQgMCkgeyBzd2l0Y2hTaXplcyA9IGZhbHNlOyB9XG4gICAgcmV0dXJuIG5ldyBSZXNpemVPYnNlcnZlclNpemUoKHN3aXRjaFNpemVzID8gYmxvY2tTaXplIDogaW5saW5lU2l6ZSkgfHwgMCwgKHN3aXRjaFNpemVzID8gaW5saW5lU2l6ZSA6IGJsb2NrU2l6ZSkgfHwgMCk7XG59O1xudmFyIHplcm9Cb3hlcyA9IGZyZWV6ZSh7XG4gICAgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTogc2l6ZSgpLFxuICAgIGJvcmRlckJveFNpemU6IHNpemUoKSxcbiAgICBjb250ZW50Qm94U2l6ZTogc2l6ZSgpLFxuICAgIGNvbnRlbnRSZWN0OiBuZXcgRE9NUmVjdFJlYWRPbmx5KDAsIDAsIDAsIDApXG59KTtcbnZhciBjYWxjdWxhdGVCb3hTaXplcyA9IGZ1bmN0aW9uICh0YXJnZXQsIGZvcmNlUmVjYWxjdWxhdGlvbikge1xuICAgIGlmIChmb3JjZVJlY2FsY3VsYXRpb24gPT09IHZvaWQgMCkgeyBmb3JjZVJlY2FsY3VsYXRpb24gPSBmYWxzZTsgfVxuICAgIGlmIChjYWNoZS5oYXModGFyZ2V0KSAmJiAhZm9yY2VSZWNhbGN1bGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5nZXQodGFyZ2V0KTtcbiAgICB9XG4gICAgaWYgKGlzSGlkZGVuKHRhcmdldCkpIHtcbiAgICAgICAgY2FjaGUuc2V0KHRhcmdldCwgemVyb0JveGVzKTtcbiAgICAgICAgcmV0dXJuIHplcm9Cb3hlcztcbiAgICB9XG4gICAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICAgIHZhciBzdmcgPSBpc1NWRyh0YXJnZXQpICYmIHRhcmdldC5vd25lclNWR0VsZW1lbnQgJiYgdGFyZ2V0LmdldEJCb3goKTtcbiAgICB2YXIgcmVtb3ZlUGFkZGluZyA9ICFJRSAmJiBjcy5ib3hTaXppbmcgPT09ICdib3JkZXItYm94JztcbiAgICB2YXIgc3dpdGNoU2l6ZXMgPSB2ZXJ0aWNhbFJlZ2V4cC50ZXN0KGNzLndyaXRpbmdNb2RlIHx8ICcnKTtcbiAgICB2YXIgY2FuU2Nyb2xsVmVydGljYWxseSA9ICFzdmcgJiYgc2Nyb2xsUmVnZXhwLnRlc3QoY3Mub3ZlcmZsb3dZIHx8ICcnKTtcbiAgICB2YXIgY2FuU2Nyb2xsSG9yaXpvbnRhbGx5ID0gIXN2ZyAmJiBzY3JvbGxSZWdleHAudGVzdChjcy5vdmVyZmxvd1ggfHwgJycpO1xuICAgIHZhciBwYWRkaW5nVG9wID0gc3ZnID8gMCA6IHBhcnNlRGltZW5zaW9uKGNzLnBhZGRpbmdUb3ApO1xuICAgIHZhciBwYWRkaW5nUmlnaHQgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ1JpZ2h0KTtcbiAgICB2YXIgcGFkZGluZ0JvdHRvbSA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5wYWRkaW5nQm90dG9tKTtcbiAgICB2YXIgcGFkZGluZ0xlZnQgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ0xlZnQpO1xuICAgIHZhciBib3JkZXJUb3AgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MuYm9yZGVyVG9wV2lkdGgpO1xuICAgIHZhciBib3JkZXJSaWdodCA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5ib3JkZXJSaWdodFdpZHRoKTtcbiAgICB2YXIgYm9yZGVyQm90dG9tID0gc3ZnID8gMCA6IHBhcnNlRGltZW5zaW9uKGNzLmJvcmRlckJvdHRvbVdpZHRoKTtcbiAgICB2YXIgYm9yZGVyTGVmdCA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5ib3JkZXJMZWZ0V2lkdGgpO1xuICAgIHZhciBob3Jpem9udGFsUGFkZGluZyA9IHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0O1xuICAgIHZhciB2ZXJ0aWNhbFBhZGRpbmcgPSBwYWRkaW5nVG9wICsgcGFkZGluZ0JvdHRvbTtcbiAgICB2YXIgaG9yaXpvbnRhbEJvcmRlckFyZWEgPSBib3JkZXJMZWZ0ICsgYm9yZGVyUmlnaHQ7XG4gICAgdmFyIHZlcnRpY2FsQm9yZGVyQXJlYSA9IGJvcmRlclRvcCArIGJvcmRlckJvdHRvbTtcbiAgICB2YXIgaG9yaXpvbnRhbFNjcm9sbGJhclRoaWNrbmVzcyA9ICFjYW5TY3JvbGxIb3Jpem9udGFsbHkgPyAwIDogdGFyZ2V0Lm9mZnNldEhlaWdodCAtIHZlcnRpY2FsQm9yZGVyQXJlYSAtIHRhcmdldC5jbGllbnRIZWlnaHQ7XG4gICAgdmFyIHZlcnRpY2FsU2Nyb2xsYmFyVGhpY2tuZXNzID0gIWNhblNjcm9sbFZlcnRpY2FsbHkgPyAwIDogdGFyZ2V0Lm9mZnNldFdpZHRoIC0gaG9yaXpvbnRhbEJvcmRlckFyZWEgLSB0YXJnZXQuY2xpZW50V2lkdGg7XG4gICAgdmFyIHdpZHRoUmVkdWN0aW9uID0gcmVtb3ZlUGFkZGluZyA/IGhvcml6b250YWxQYWRkaW5nICsgaG9yaXpvbnRhbEJvcmRlckFyZWEgOiAwO1xuICAgIHZhciBoZWlnaHRSZWR1Y3Rpb24gPSByZW1vdmVQYWRkaW5nID8gdmVydGljYWxQYWRkaW5nICsgdmVydGljYWxCb3JkZXJBcmVhIDogMDtcbiAgICB2YXIgY29udGVudFdpZHRoID0gc3ZnID8gc3ZnLndpZHRoIDogcGFyc2VEaW1lbnNpb24oY3Mud2lkdGgpIC0gd2lkdGhSZWR1Y3Rpb24gLSB2ZXJ0aWNhbFNjcm9sbGJhclRoaWNrbmVzcztcbiAgICB2YXIgY29udGVudEhlaWdodCA9IHN2ZyA/IHN2Zy5oZWlnaHQgOiBwYXJzZURpbWVuc2lvbihjcy5oZWlnaHQpIC0gaGVpZ2h0UmVkdWN0aW9uIC0gaG9yaXpvbnRhbFNjcm9sbGJhclRoaWNrbmVzcztcbiAgICB2YXIgYm9yZGVyQm94V2lkdGggPSBjb250ZW50V2lkdGggKyBob3Jpem9udGFsUGFkZGluZyArIHZlcnRpY2FsU2Nyb2xsYmFyVGhpY2tuZXNzICsgaG9yaXpvbnRhbEJvcmRlckFyZWE7XG4gICAgdmFyIGJvcmRlckJveEhlaWdodCA9IGNvbnRlbnRIZWlnaHQgKyB2ZXJ0aWNhbFBhZGRpbmcgKyBob3Jpem9udGFsU2Nyb2xsYmFyVGhpY2tuZXNzICsgdmVydGljYWxCb3JkZXJBcmVhO1xuICAgIHZhciBib3hlcyA9IGZyZWV6ZSh7XG4gICAgICAgIGRldmljZVBpeGVsQ29udGVudEJveFNpemU6IHNpemUoTWF0aC5yb3VuZChjb250ZW50V2lkdGggKiBkZXZpY2VQaXhlbFJhdGlvKSwgTWF0aC5yb3VuZChjb250ZW50SGVpZ2h0ICogZGV2aWNlUGl4ZWxSYXRpbyksIHN3aXRjaFNpemVzKSxcbiAgICAgICAgYm9yZGVyQm94U2l6ZTogc2l6ZShib3JkZXJCb3hXaWR0aCwgYm9yZGVyQm94SGVpZ2h0LCBzd2l0Y2hTaXplcyksXG4gICAgICAgIGNvbnRlbnRCb3hTaXplOiBzaXplKGNvbnRlbnRXaWR0aCwgY29udGVudEhlaWdodCwgc3dpdGNoU2l6ZXMpLFxuICAgICAgICBjb250ZW50UmVjdDogbmV3IERPTVJlY3RSZWFkT25seShwYWRkaW5nTGVmdCwgcGFkZGluZ1RvcCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0KVxuICAgIH0pO1xuICAgIGNhY2hlLnNldCh0YXJnZXQsIGJveGVzKTtcbiAgICByZXR1cm4gYm94ZXM7XG59O1xudmFyIGNhbGN1bGF0ZUJveFNpemUgPSBmdW5jdGlvbiAodGFyZ2V0LCBvYnNlcnZlZEJveCwgZm9yY2VSZWNhbGN1bGF0aW9uKSB7XG4gICAgdmFyIF9hID0gY2FsY3VsYXRlQm94U2l6ZXModGFyZ2V0LCBmb3JjZVJlY2FsY3VsYXRpb24pLCBib3JkZXJCb3hTaXplID0gX2EuYm9yZGVyQm94U2l6ZSwgY29udGVudEJveFNpemUgPSBfYS5jb250ZW50Qm94U2l6ZSwgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZSA9IF9hLmRldmljZVBpeGVsQ29udGVudEJveFNpemU7XG4gICAgc3dpdGNoIChvYnNlcnZlZEJveCkge1xuICAgICAgICBjYXNlIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5ERVZJQ0VfUElYRUxfQ09OVEVOVF9CT1g6XG4gICAgICAgICAgICByZXR1cm4gZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTtcbiAgICAgICAgY2FzZSBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMuQk9SREVSX0JPWDpcbiAgICAgICAgICAgIHJldHVybiBib3JkZXJCb3hTaXplO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRCb3hTaXplO1xuICAgIH1cbn07XG5leHBvcnQgeyBjYWxjdWxhdGVCb3hTaXplLCBjYWxjdWxhdGVCb3hTaXplcyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateDepthForNode\": () => (/* binding */ calculateDepthForNode)\n/* harmony export */ });\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\nvar calculateDepthForNode = function (node) {\n    if ((0,_utils_element__WEBPACK_IMPORTED_MODULE_0__.isHidden)(node)) {\n        return Infinity;\n    }\n    var depth = 0;\n    var parent = node.parentNode;\n    while (parent) {\n        depth += 1;\n        parent = parent.parentNode;\n    }\n    return depth;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlRGVwdGhGb3JOb2RlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDO0FBQ0EsUUFBUSx3REFBUTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlRGVwdGhGb3JOb2RlLmpzP2M5MzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNIaWRkZW4gfSBmcm9tICcuLi91dGlscy9lbGVtZW50JztcbnZhciBjYWxjdWxhdGVEZXB0aEZvck5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChpc0hpZGRlbihub2RlKSkge1xuICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIGRlcHRoICs9IDE7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZGVwdGg7XG59O1xuZXhwb3J0IHsgY2FsY3VsYXRlRGVwdGhGb3JOb2RlIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deliverResizeLoopError\": () => (/* binding */ deliverResizeLoopError)\n/* harmony export */ });\nvar msg = 'ResizeObserver loop completed with undelivered notifications.';\nvar deliverResizeLoopError = function () {\n    var event;\n    if (typeof ErrorEvent === 'function') {\n        event = new ErrorEvent('error', {\n            message: msg\n        });\n    }\n    else {\n        event = document.createEvent('Event');\n        event.initEvent('error', false, false);\n        event.message = msg;\n    }\n    window.dispatchEvent(event);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvZGVsaXZlclJlc2l6ZUxvb3BFcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9hbGdvcml0aG1zL2RlbGl2ZXJSZXNpemVMb29wRXJyb3IuanM/YzJlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbXNnID0gJ1Jlc2l6ZU9ic2VydmVyIGxvb3AgY29tcGxldGVkIHdpdGggdW5kZWxpdmVyZWQgbm90aWZpY2F0aW9ucy4nO1xudmFyIGRlbGl2ZXJSZXNpemVMb29wRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV2ZW50O1xuICAgIGlmICh0eXBlb2YgRXJyb3JFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBldmVudCA9IG5ldyBFcnJvckV2ZW50KCdlcnJvcicsIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1zZ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICAgIGV2ZW50LmluaXRFdmVudCgnZXJyb3InLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBldmVudC5tZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG59O1xuZXhwb3J0IHsgZGVsaXZlclJlc2l6ZUxvb3BFcnJvciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gatherActiveObservationsAtDepth\": () => (/* binding */ gatherActiveObservationsAtDepth)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n/* harmony import */ var _calculateDepthForNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calculateDepthForNode */ \"./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\");\n\n\nvar gatherActiveObservationsAtDepth = function (depth) {\n    _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.forEach(function processObserver(ro) {\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n        ro.skippedTargets.splice(0, ro.skippedTargets.length);\n        ro.observationTargets.forEach(function processTarget(ot) {\n            if (ot.isActive()) {\n                if ((0,_calculateDepthForNode__WEBPACK_IMPORTED_MODULE_1__.calculateDepthForNode)(ot.target) > depth) {\n                    ro.activeTargets.push(ot);\n                }\n                else {\n                    ro.skippedTargets.push(ot);\n                }\n            }\n        });\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkQ7QUFDSztBQUNoRTtBQUNBLElBQUksMkVBQXVCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDZFQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQzJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvYWxnb3JpdGhtcy9nYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoLmpzPzQ1YjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbmltcG9ydCB7IGNhbGN1bGF0ZURlcHRoRm9yTm9kZSB9IGZyb20gJy4vY2FsY3VsYXRlRGVwdGhGb3JOb2RlJztcbnZhciBnYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoID0gZnVuY3Rpb24gKGRlcHRoKSB7XG4gICAgcmVzaXplT2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc09ic2VydmVyKHJvKSB7XG4gICAgICAgIHJvLmFjdGl2ZVRhcmdldHMuc3BsaWNlKDAsIHJvLmFjdGl2ZVRhcmdldHMubGVuZ3RoKTtcbiAgICAgICAgcm8uc2tpcHBlZFRhcmdldHMuc3BsaWNlKDAsIHJvLnNraXBwZWRUYXJnZXRzLmxlbmd0aCk7XG4gICAgICAgIHJvLm9ic2VydmF0aW9uVGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uIHByb2Nlc3NUYXJnZXQob3QpIHtcbiAgICAgICAgICAgIGlmIChvdC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGN1bGF0ZURlcHRoRm9yTm9kZShvdC50YXJnZXQpID4gZGVwdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcm8uYWN0aXZlVGFyZ2V0cy5wdXNoKG90KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJvLnNraXBwZWRUYXJnZXRzLnB1c2gob3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0IHsgZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hasActiveObservations\": () => (/* binding */ hasActiveObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n\nvar hasActiveObservations = function () {\n    return _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzQWN0aXZlT2JzZXJ2YXRpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJEO0FBQzNEO0FBQ0EsV0FBVyx3RUFBb0IsaUJBQWlCLHFDQUFxQztBQUNyRjtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzQWN0aXZlT2JzZXJ2YXRpb25zLmpzP2RkYTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbnZhciBoYXNBY3RpdmVPYnNlcnZhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlc2l6ZU9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChybykgeyByZXR1cm4gcm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGggPiAwOyB9KTtcbn07XG5leHBvcnQgeyBoYXNBY3RpdmVPYnNlcnZhdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hasSkippedObservations\": () => (/* binding */ hasSkippedObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ \"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\");\n\nvar hasSkippedObservations = function () {\n    return _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzU2tpcHBlZE9ic2VydmF0aW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyRDtBQUMzRDtBQUNBLFdBQVcsd0VBQW9CLGlCQUFpQixzQ0FBc0M7QUFDdEY7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9hbGdvcml0aG1zL2hhc1NraXBwZWRPYnNlcnZhdGlvbnMuanM/YzEwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNpemVPYnNlcnZlcnMgfSBmcm9tICcuLi91dGlscy9yZXNpemVPYnNlcnZlcnMnO1xudmFyIGhhc1NraXBwZWRPYnNlcnZhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlc2l6ZU9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChybykgeyByZXR1cm4gcm8uc2tpcHBlZFRhcmdldHMubGVuZ3RoID4gMDsgfSk7XG59O1xuZXhwb3J0IHsgaGFzU2tpcHBlZE9ic2VydmF0aW9ucyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserver\": () => (/* reexport safe */ _ResizeObserver__WEBPACK_IMPORTED_MODULE_0__.ResizeObserver),\n/* harmony export */   \"ResizeObserverEntry\": () => (/* reexport safe */ _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverEntry),\n/* harmony export */   \"ResizeObserverSize\": () => (/* reexport safe */ _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_2__.ResizeObserverSize)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ResizeObserver */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserver.js\");\n/* harmony import */ var _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverEntry */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\");\n/* harmony import */ var _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ResizeObserverSize */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2V4cG9ydHMvcmVzaXplLW9ic2VydmVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFtRDtBQUNVO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9leHBvcnRzL3Jlc2l6ZS1vYnNlcnZlci5qcz8xZDFmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyIH0gZnJvbSAnLi4vUmVzaXplT2JzZXJ2ZXInO1xuZXhwb3J0IHsgUmVzaXplT2JzZXJ2ZXJFbnRyeSB9IGZyb20gJy4uL1Jlc2l6ZU9ic2VydmVyRW50cnknO1xuZXhwb3J0IHsgUmVzaXplT2JzZXJ2ZXJTaXplIH0gZnJvbSAnLi4vUmVzaXplT2JzZXJ2ZXJTaXplJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/element.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isElement\": () => (/* binding */ isElement),\n/* harmony export */   \"isHidden\": () => (/* binding */ isHidden),\n/* harmony export */   \"isReplacedElement\": () => (/* binding */ isReplacedElement),\n/* harmony export */   \"isSVG\": () => (/* binding */ isSVG)\n/* harmony export */ });\nvar isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };\nvar isHidden = function (target) {\n    if (isSVG(target)) {\n        var _a = target.getBBox(), width = _a.width, height = _a.height;\n        return !width && !height;\n    }\n    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;\n    return !(offsetWidth || offsetHeight || target.getClientRects().length);\n};\nvar isElement = function (obj) {\n    var _a, _b;\n    if (obj instanceof Element) {\n        return true;\n    }\n    var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;\n    return !!(scope && obj instanceof scope.Element);\n};\nvar isReplacedElement = function (target) {\n    switch (target.tagName) {\n        case 'INPUT':\n            if (target.type !== 'image') {\n                break;\n            }\n        case 'VIDEO':\n        case 'AUDIO':\n        case 'EMBED':\n        case 'OBJECT':\n        case 'CANVAS':\n        case 'IFRAME':\n        case 'IMG':\n            return true;\n    }\n    return false;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2VsZW1lbnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDeUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9lbGVtZW50LmpzPzNjZDUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzU1ZHID0gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCAmJiAnZ2V0QkJveCcgaW4gdGFyZ2V0OyB9O1xudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGlmIChpc1NWRyh0YXJnZXQpKSB7XG4gICAgICAgIHZhciBfYSA9IHRhcmdldC5nZXRCQm94KCksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcbiAgICAgICAgcmV0dXJuICF3aWR0aCAmJiAhaGVpZ2h0O1xuICAgIH1cbiAgICB2YXIgX2IgPSB0YXJnZXQsIG9mZnNldFdpZHRoID0gX2Iub2Zmc2V0V2lkdGgsIG9mZnNldEhlaWdodCA9IF9iLm9mZnNldEhlaWdodDtcbiAgICByZXR1cm4gIShvZmZzZXRXaWR0aCB8fCBvZmZzZXRIZWlnaHQgfHwgdGFyZ2V0LmdldENsaWVudFJlY3RzKCkubGVuZ3RoKTtcbn07XG52YXIgaXNFbGVtZW50ID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBzY29wZSA9IChfYiA9IChfYSA9IG9iaikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm93bmVyRG9jdW1lbnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5kZWZhdWx0VmlldztcbiAgICByZXR1cm4gISEoc2NvcGUgJiYgb2JqIGluc3RhbmNlb2Ygc2NvcGUuRWxlbWVudCk7XG59O1xudmFyIGlzUmVwbGFjZWRFbGVtZW50ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHN3aXRjaCAodGFyZ2V0LnRhZ05hbWUpIHtcbiAgICAgICAgY2FzZSAnSU5QVVQnOlxuICAgICAgICAgICAgaWYgKHRhcmdldC50eXBlICE9PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1ZJREVPJzpcbiAgICAgICAgY2FzZSAnQVVESU8nOlxuICAgICAgICBjYXNlICdFTUJFRCc6XG4gICAgICAgIGNhc2UgJ09CSkVDVCc6XG4gICAgICAgIGNhc2UgJ0NBTlZBUyc6XG4gICAgICAgIGNhc2UgJ0lGUkFNRSc6XG4gICAgICAgIGNhc2UgJ0lNRyc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydCB7IGlzU1ZHLCBpc0hpZGRlbiwgaXNFbGVtZW50LCBpc1JlcGxhY2VkRWxlbWVudCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/element.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js":
/*!******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/freeze.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"freeze\": () => (/* binding */ freeze)\n/* harmony export */ });\nvar freeze = function (obj) { return Object.freeze(obj); };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2ZyZWV6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvZnJlZXplLmpzP2ZjZjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBmcmVlemUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBPYmplY3QuZnJlZXplKG9iaik7IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/freeze.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/global.js":
/*!******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/global.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"global\": () => (/* binding */ global)\n/* harmony export */ });\nvar global = typeof window !== 'undefined' ? window : {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2dsb2JhbC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9nbG9iYWwuanM/Y2I3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIGdsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/global.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/process.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/process.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"process\": () => (/* binding */ process)\n/* harmony export */ });\n/* harmony import */ var _algorithms_hasActiveObservations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../algorithms/hasActiveObservations */ \"./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js\");\n/* harmony import */ var _algorithms_hasSkippedObservations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../algorithms/hasSkippedObservations */ \"./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js\");\n/* harmony import */ var _algorithms_deliverResizeLoopError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../algorithms/deliverResizeLoopError */ \"./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js\");\n/* harmony import */ var _algorithms_broadcastActiveObservations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../algorithms/broadcastActiveObservations */ \"./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js\");\n/* harmony import */ var _algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../algorithms/gatherActiveObservationsAtDepth */ \"./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js\");\n\n\n\n\n\nvar process = function () {\n    var depth = 0;\n    (0,_algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__.gatherActiveObservationsAtDepth)(depth);\n    while ((0,_algorithms_hasActiveObservations__WEBPACK_IMPORTED_MODULE_0__.hasActiveObservations)()) {\n        depth = (0,_algorithms_broadcastActiveObservations__WEBPACK_IMPORTED_MODULE_3__.broadcastActiveObservations)();\n        (0,_algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__.gatherActiveObservationsAtDepth)(depth);\n    }\n    if ((0,_algorithms_hasSkippedObservations__WEBPACK_IMPORTED_MODULE_1__.hasSkippedObservations)()) {\n        (0,_algorithms_deliverResizeLoopError__WEBPACK_IMPORTED_MODULE_2__.deliverResizeLoopError)();\n    }\n    return depth > 0;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3Byb2Nlc3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTRFO0FBQ0U7QUFDQTtBQUNVO0FBQ1E7QUFDaEc7QUFDQTtBQUNBLElBQUksNEdBQStCO0FBQ25DLFdBQVcsd0ZBQXFCO0FBQ2hDLGdCQUFnQixvR0FBMkI7QUFDM0MsUUFBUSw0R0FBK0I7QUFDdkM7QUFDQSxRQUFRLDBGQUFzQjtBQUM5QixRQUFRLDBGQUFzQjtBQUM5QjtBQUNBO0FBQ0E7QUFDbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9wcm9jZXNzLmpzP2Q0YzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzQWN0aXZlT2JzZXJ2YXRpb25zIH0gZnJvbSAnLi4vYWxnb3JpdGhtcy9oYXNBY3RpdmVPYnNlcnZhdGlvbnMnO1xuaW1wb3J0IHsgaGFzU2tpcHBlZE9ic2VydmF0aW9ucyB9IGZyb20gJy4uL2FsZ29yaXRobXMvaGFzU2tpcHBlZE9ic2VydmF0aW9ucyc7XG5pbXBvcnQgeyBkZWxpdmVyUmVzaXplTG9vcEVycm9yIH0gZnJvbSAnLi4vYWxnb3JpdGhtcy9kZWxpdmVyUmVzaXplTG9vcEVycm9yJztcbmltcG9ydCB7IGJyb2FkY2FzdEFjdGl2ZU9ic2VydmF0aW9ucyB9IGZyb20gJy4uL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zJztcbmltcG9ydCB7IGdhdGhlckFjdGl2ZU9ic2VydmF0aW9uc0F0RGVwdGggfSBmcm9tICcuLi9hbGdvcml0aG1zL2dhdGhlckFjdGl2ZU9ic2VydmF0aW9uc0F0RGVwdGgnO1xudmFyIHByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlcHRoID0gMDtcbiAgICBnYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoKGRlcHRoKTtcbiAgICB3aGlsZSAoaGFzQWN0aXZlT2JzZXJ2YXRpb25zKCkpIHtcbiAgICAgICAgZGVwdGggPSBicm9hZGNhc3RBY3RpdmVPYnNlcnZhdGlvbnMoKTtcbiAgICAgICAgZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aChkZXB0aCk7XG4gICAgfVxuICAgIGlmIChoYXNTa2lwcGVkT2JzZXJ2YXRpb25zKCkpIHtcbiAgICAgICAgZGVsaXZlclJlc2l6ZUxvb3BFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gZGVwdGggPiAwO1xufTtcbmV4cG9ydCB7IHByb2Nlc3MgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/process.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"queueMicroTask\": () => (/* binding */ queueMicroTask)\n/* harmony export */ });\nvar trigger;\nvar callbacks = [];\nvar notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };\nvar queueMicroTask = function (callback) {\n    if (!trigger) {\n        var toggle_1 = 0;\n        var el_1 = document.createTextNode('');\n        var config = { characterData: true };\n        new MutationObserver(function () { return notify(); }).observe(el_1, config);\n        trigger = function () { el_1.textContent = \"\" + (toggle_1 ? toggle_1-- : toggle_1++); };\n    }\n    callbacks.push(callback);\n    trigger();\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3F1ZXVlTWljcm9UYXNrLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsMkJBQTJCLG1EQUFtRCxjQUFjO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLDJDQUEyQyxrQkFBa0I7QUFDN0QsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQzBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvcXVldWVNaWNyb1Rhc2suanM/YTk5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdHJpZ2dlcjtcbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFja3Muc3BsaWNlKDApLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IHJldHVybiBjYigpOyB9KTsgfTtcbnZhciBxdWV1ZU1pY3JvVGFzayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGlmICghdHJpZ2dlcikge1xuICAgICAgICB2YXIgdG9nZ2xlXzEgPSAwO1xuICAgICAgICB2YXIgZWxfMSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgdmFyIGNvbmZpZyA9IHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9O1xuICAgICAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7IHJldHVybiBub3RpZnkoKTsgfSkub2JzZXJ2ZShlbF8xLCBjb25maWcpO1xuICAgICAgICB0cmlnZ2VyID0gZnVuY3Rpb24gKCkgeyBlbF8xLnRleHRDb250ZW50ID0gXCJcIiArICh0b2dnbGVfMSA/IHRvZ2dsZV8xLS0gOiB0b2dnbGVfMSsrKTsgfTtcbiAgICB9XG4gICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHRyaWdnZXIoKTtcbn07XG5leHBvcnQgeyBxdWV1ZU1pY3JvVGFzayB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"queueResizeObserver\": () => (/* binding */ queueResizeObserver)\n/* harmony export */ });\n/* harmony import */ var _queueMicroTask__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queueMicroTask */ \"./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js\");\n\nvar queueResizeObserver = function (cb) {\n    (0,_queueMicroTask__WEBPACK_IMPORTED_MODULE_0__.queueMicroTask)(function ResizeObserver() {\n        requestAnimationFrame(cb);\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3F1ZXVlUmVzaXplT2JzZXJ2ZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0Q7QUFDbEQ7QUFDQSxJQUFJLCtEQUFjO0FBQ2xCO0FBQ0EsS0FBSztBQUNMO0FBQytCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvcXVldWVSZXNpemVPYnNlcnZlci5qcz9hMzY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHF1ZXVlTWljcm9UYXNrIH0gZnJvbSAnLi9xdWV1ZU1pY3JvVGFzayc7XG52YXIgcXVldWVSZXNpemVPYnNlcnZlciA9IGZ1bmN0aW9uIChjYikge1xuICAgIHF1ZXVlTWljcm9UYXNrKGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpO1xuICAgIH0pO1xufTtcbmV4cG9ydCB7IHF1ZXVlUmVzaXplT2JzZXJ2ZXIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resizeObservers\": () => (/* binding */ resizeObservers)\n/* harmony export */ });\nvar resizeObservers = [];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3Jlc2l6ZU9ic2VydmVycy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9yZXNpemVPYnNlcnZlcnMuanM/YThlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVzaXplT2JzZXJ2ZXJzID0gW107XG5leHBvcnQgeyByZXNpemVPYnNlcnZlcnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\n");

/***/ }),

/***/ "./node_modules/@juggle/resize-observer/lib/utils/scheduler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@juggle/resize-observer/lib/utils/scheduler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"scheduler\": () => (/* binding */ scheduler),\n/* harmony export */   \"updateCount\": () => (/* binding */ updateCount)\n/* harmony export */ });\n/* harmony import */ var _process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process */ \"./node_modules/@juggle/resize-observer/lib/utils/process.js\");\n/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ \"./node_modules/@juggle/resize-observer/lib/utils/global.js\");\n/* harmony import */ var _queueResizeObserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queueResizeObserver */ \"./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js\");\n\n\n\nvar watching = 0;\nvar isWatching = function () { return !!watching; };\nvar CATCH_PERIOD = 250;\nvar observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\nvar events = [\n    'resize',\n    'load',\n    'transitionend',\n    'animationend',\n    'animationstart',\n    'animationiteration',\n    'keyup',\n    'keydown',\n    'mouseup',\n    'mousedown',\n    'mouseover',\n    'mouseout',\n    'blur',\n    'focus'\n];\nvar time = function (timeout) {\n    if (timeout === void 0) { timeout = 0; }\n    return Date.now() + timeout;\n};\nvar scheduled = false;\nvar Scheduler = (function () {\n    function Scheduler() {\n        var _this = this;\n        this.stopped = true;\n        this.listener = function () { return _this.schedule(); };\n    }\n    Scheduler.prototype.run = function (timeout) {\n        var _this = this;\n        if (timeout === void 0) { timeout = CATCH_PERIOD; }\n        if (scheduled) {\n            return;\n        }\n        scheduled = true;\n        var until = time(timeout);\n        (0,_queueResizeObserver__WEBPACK_IMPORTED_MODULE_2__.queueResizeObserver)(function () {\n            var elementsHaveResized = false;\n            try {\n                elementsHaveResized = (0,_process__WEBPACK_IMPORTED_MODULE_0__.process)();\n            }\n            finally {\n                scheduled = false;\n                timeout = until - time();\n                if (!isWatching()) {\n                    return;\n                }\n                if (elementsHaveResized) {\n                    _this.run(1000);\n                }\n                else if (timeout > 0) {\n                    _this.run(timeout);\n                }\n                else {\n                    _this.start();\n                }\n            }\n        });\n    };\n    Scheduler.prototype.schedule = function () {\n        this.stop();\n        this.run();\n    };\n    Scheduler.prototype.observe = function () {\n        var _this = this;\n        var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };\n        document.body ? cb() : _global__WEBPACK_IMPORTED_MODULE_1__.global.addEventListener('DOMContentLoaded', cb);\n    };\n    Scheduler.prototype.start = function () {\n        var _this = this;\n        if (this.stopped) {\n            this.stopped = false;\n            this.observer = new MutationObserver(this.listener);\n            this.observe();\n            events.forEach(function (name) { return _global__WEBPACK_IMPORTED_MODULE_1__.global.addEventListener(name, _this.listener, true); });\n        }\n    };\n    Scheduler.prototype.stop = function () {\n        var _this = this;\n        if (!this.stopped) {\n            this.observer && this.observer.disconnect();\n            events.forEach(function (name) { return _global__WEBPACK_IMPORTED_MODULE_1__.global.removeEventListener(name, _this.listener, true); });\n            this.stopped = true;\n        }\n    };\n    return Scheduler;\n}());\nvar scheduler = new Scheduler();\nvar updateCount = function (n) {\n    !watching && n > 0 && scheduler.start();\n    watching += n;\n    !watching && scheduler.stop();\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3NjaGVkdWxlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvQztBQUNGO0FBQzBCO0FBQzVEO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlFQUFtQjtBQUMzQjtBQUNBO0FBQ0Esc0NBQXNDLGlEQUFPO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsK0JBQStCLDREQUF1QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxPQUFPLDREQUF1QiwrQkFBK0I7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLE9BQU8sK0RBQTBCLCtCQUErQjtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9zY2hlZHVsZXIuanM/YjAwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9jZXNzIH0gZnJvbSAnLi9wcm9jZXNzJztcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gJy4vZ2xvYmFsJztcbmltcG9ydCB7IHF1ZXVlUmVzaXplT2JzZXJ2ZXIgfSBmcm9tICcuL3F1ZXVlUmVzaXplT2JzZXJ2ZXInO1xudmFyIHdhdGNoaW5nID0gMDtcbnZhciBpc1dhdGNoaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gISF3YXRjaGluZzsgfTtcbnZhciBDQVRDSF9QRVJJT0QgPSAyNTA7XG52YXIgb2JzZXJ2ZXJDb25maWcgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoYXJhY3RlckRhdGE6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9O1xudmFyIGV2ZW50cyA9IFtcbiAgICAncmVzaXplJyxcbiAgICAnbG9hZCcsXG4gICAgJ3RyYW5zaXRpb25lbmQnLFxuICAgICdhbmltYXRpb25lbmQnLFxuICAgICdhbmltYXRpb25zdGFydCcsXG4gICAgJ2FuaW1hdGlvbml0ZXJhdGlvbicsXG4gICAgJ2tleXVwJyxcbiAgICAna2V5ZG93bicsXG4gICAgJ21vdXNldXAnLFxuICAgICdtb3VzZWRvd24nLFxuICAgICdtb3VzZW92ZXInLFxuICAgICdtb3VzZW91dCcsXG4gICAgJ2JsdXInLFxuICAgICdmb2N1cydcbl07XG52YXIgdGltZSA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgaWYgKHRpbWVvdXQgPT09IHZvaWQgMCkgeyB0aW1lb3V0ID0gMDsgfVxuICAgIHJldHVybiBEYXRlLm5vdygpICsgdGltZW91dDtcbn07XG52YXIgc2NoZWR1bGVkID0gZmFsc2U7XG52YXIgU2NoZWR1bGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zY2hlZHVsZSgpOyB9O1xuICAgIH1cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aW1lb3V0ID09PSB2b2lkIDApIHsgdGltZW91dCA9IENBVENIX1BFUklPRDsgfVxuICAgICAgICBpZiAoc2NoZWR1bGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHVudGlsID0gdGltZSh0aW1lb3V0KTtcbiAgICAgICAgcXVldWVSZXNpemVPYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHNIYXZlUmVzaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0hhdmVSZXNpemVkID0gcHJvY2VzcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IHVudGlsIC0gdGltZSgpO1xuICAgICAgICAgICAgICAgIGlmICghaXNXYXRjaGluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzSGF2ZVJlc2l6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucnVuKDEwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW4odGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdGFydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgdGhpcy5ydW4oKTtcbiAgICB9O1xuICAgIFNjaGVkdWxlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNiID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMub2JzZXJ2ZXIgJiYgX3RoaXMub2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCBvYnNlcnZlckNvbmZpZyk7IH07XG4gICAgICAgIGRvY3VtZW50LmJvZHkgPyBjYigpIDogZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYik7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5zdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZSgpO1xuICAgICAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIF90aGlzLmxpc3RlbmVyLCB0cnVlKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLnN0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgJiYgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgX3RoaXMubGlzdGVuZXIsIHRydWUpOyB9KTtcbiAgICAgICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTY2hlZHVsZXI7XG59KCkpO1xudmFyIHNjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIoKTtcbnZhciB1cGRhdGVDb3VudCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgIXdhdGNoaW5nICYmIG4gPiAwICYmIHNjaGVkdWxlci5zdGFydCgpO1xuICAgIHdhdGNoaW5nICs9IG47XG4gICAgIXdhdGNoaW5nICYmIHNjaGVkdWxlci5zdG9wKCk7XG59O1xuZXhwb3J0IHsgc2NoZWR1bGVyLCB1cGRhdGVDb3VudCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/scheduler.js\n");

/***/ }),

/***/ "./src/cellshell.tsx":
/*!***************************!*\
  !*** ./src/cellshell.tsx ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // cellshell.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar requestidlecallback_1 = __webpack_require__(/*! requestidlecallback */ \"./node_modules/requestidlecallback/index.js\");\n\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ \"./node_modules/react-reverse-portal/dist/web/index.js\");\n\nvar placeholder_1 = __importDefault(__webpack_require__(/*! ./placeholder */ \"./src/placeholder.tsx\"));\n\nvar cradle_1 = __webpack_require__(/*! ./cradle */ \"./src/cradle.tsx\");\n\nvar IDLECALLBACK_TIMEOUT = 1000;\n\nvar CellShell = function CellShell(_a) {\n  var orientation = _a.orientation,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      index = _a.index,\n      // observer, // intersection observer\n  callbacks = _a.callbacks,\n      getItem = _a.getItem,\n      listsize = _a.listsize,\n      placeholder = _a.placeholder,\n      instanceID = _a.instanceID,\n      scrollerName = _a.scrollerName,\n      scrollerID = _a.scrollerID;\n  var portalHandler = (0, react_1.useContext)(cradle_1.CradlePortalsContext);\n\n  var _b = (0, react_1.useState)({\n    overflow: 'hidden'\n  }),\n      styles = _b[0],\n      saveStyles = _b[1];\n\n  var _c = (0, react_1.useState)('setup'),\n      cellStatus = _c[0],\n      setCellStatus = _c[1]; // console.log('RUNNING cellshell cellStatus, index, scrollerID, instanceID',cellStatus, index, scrollerID, instanceID)\n\n\n  var shellRef = (0, react_1.useRef)(null); // const instanceIDRef = useRef(instanceID)\n\n  var isMountedRef = (0, react_1.useRef)(true);\n  var portaldataRef = (0, react_1.useRef)(null); // console.log('RUNNING cellshell scrollerID, index, cellStatus', scrollerID, index, cellStatus)\n  // for unmount\n\n  (0, react_1.useEffect)(function () {\n    return function () {\n      isMountedRef.current = false; // console.log('UNsetting observer for index',index)\n      // observer.unobserve(observerElementRef.current)\n    };\n  }, []); // ----------------- [ placeholder definition ] -------------------------\n\n  var customplaceholder = (0, react_1.useMemo)(function () {\n    return placeholder ? react_1[\"default\"].createElement(placeholder, {\n      index: index,\n      listsize: listsize\n    }) : null;\n  }, [placeholder, listsize]);\n  var placeholderRef = (0, react_1.useRef)(null);\n  placeholderRef.current = (0, react_1.useMemo)(function () {\n    var placeholder = customplaceholder ? customplaceholder : react_1[\"default\"].createElement(placeholder_1[\"default\"], {\n      index: index,\n      listsize: listsize,\n      error: false\n    });\n    return placeholder;\n  }, [index, customplaceholder, listsize]); // ---------------- [ end of placeholder definition ] ------------------------\n\n  var requestidlecallback = window['requestIdleCallback'] ? window['requestIdleCallback'] : requestidlecallback_1.requestIdleCallback;\n  var cancelidlecallback = window['cancelIdleCallback'] ? window['cancelIdleCallback'] : requestidlecallback_1.cancelIdleCallback;\n  var requestIdleCallbackIdRef = (0, react_1.useRef)(null); // initialize cell content\n\n  (0, react_1.useEffect)(function () {\n    // console.log('CELLSHELL mounting index',index)\n    portaldataRef.current = portalHandler.fetchOrCreatePortal(index, placeholderRef.current);\n    var hasUserContent = !!portaldataRef.current.hasusercontent; // previous InPortal creation for index\n\n    var reverseportal = portaldataRef.current.reverseportal;\n    contentcomponentRef.current = react_1[\"default\"].createElement(react_reverse_portal_1.OutPortal, {\n      node: reverseportal\n    });\n\n    if (!hasUserContent) {\n      setCellStatus('getusercontent');\n    } else {\n      portaldataRef.current.isReparenting = true;\n      if (isMountedRef.current) setCellStatus('ready');\n    } // unmount\n\n\n    return function () {\n      // console.log('CELLSHELL UNmounting index',index)\n      cancelidlecallback(requestIdleCallbackIdRef.current);\n    };\n  }, []); // cradle invariant ondemand callback parameter value\n\n  var getElementData = (0, react_1.useCallback)(function () {\n    return [index, shellRef];\n  }, []); // initialize callbacks\n\n  (0, react_1.useEffect)(function () {\n    var localcalls = callbacks;\n    localcalls.setElementData && localcalls.setElementData(getElementData(), 'register');\n    return function () {\n      localcalls.setElementData && localcalls.setElementData(getElementData(), 'unregister');\n    };\n  }, [callbacks]); // ---------------------[ configure observer ]--------------------------\n  // const observerElementRef = useRef(null) // persistent observer element ref for unmount\n  // const observersetRef = useRef(false)\n  // useEffect(()=>{\n  // console.log('index, cellStatus', index, shellRef.current)\n  // if ((!shellRef.current) || observersetRef.current) {\n  //     return\n  // }\n  // console.log('setting observer for index',index)\n  // observer.observe(shellRef.current)\n  // observerElementRef.current = shellRef.current\n  // observersetRef.current = true\n  // },[])//[observer, shellRef.current, cellStatus])\n  // ---------------------[ end of configure observer ]-------------------------\n  // set styles\n\n  (0, react_1.useEffect)(function () {\n    var newStyles = getShellStyles(orientation, cellHeight, cellWidth, styles);\n\n    if (isMountedRef.current) {\n      saveStyles(newStyles);\n    }\n  }, [orientation, cellHeight, cellWidth]);\n  var contentcomponentRef = (0, react_1.useRef)(null);\n  (0, react_1.useEffect)(function () {\n    switch (cellStatus) {\n      case 'setup':\n        // no-op\n        break;\n\n      case 'getusercontent':\n        {\n          requestIdleCallbackIdRef.current = requestidlecallback(function () {\n            return __awaiter(void 0, void 0, void 0, function () {\n              var usercontent, reverseportal;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , getItem(index)];\n\n                  case 1:\n                    usercontent = _a.sent();\n\n                    if (isMountedRef.current) {\n                      if (usercontent) {\n                        portaldataRef.current.hasusercontent = true;\n                        portaldataRef.current = portalHandler.updatePortal(index, usercontent);\n                        reverseportal = portaldataRef.current.reverseportal;\n                        portaldataRef.current.isReparenting = true;\n                        contentcomponentRef.current = react_1[\"default\"].createElement(react_reverse_portal_1.OutPortal, {\n                          node: reverseportal\n                        });\n                      } else {\n                        console.log('ERROR', 'no content item');\n                      }\n\n                      setCellStatus('ready');\n                    }\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }, {\n            timeout: IDLECALLBACK_TIMEOUT\n          });\n          break;\n        }\n\n      case 'ready':\n        {\n          break;\n        }\n    }\n  }, [cellStatus]);\n  return react_1[\"default\"].createElement(\"div\", {\n    ref: shellRef,\n    \"data-type\": 'cellshell',\n    \"data-scrollerid\": scrollerID,\n    \"data-index\": index,\n    \"data-instanceid\": instanceID,\n    style: styles\n  }, cellStatus != 'setup' && contentcomponentRef.current);\n}; // CellShell\n\n\nvar getShellStyles = function getShellStyles(orientation, cellHeight, cellWidth, styles) {\n  var styleset = Object.assign({\n    position: 'relative'\n  }, styles);\n\n  if (orientation == 'horizontal') {\n    styleset.width = cellWidth ? cellWidth + 'px' : 'auto';\n    styleset.height = 'auto';\n  } else if (orientation === 'vertical') {\n    styleset.width = 'auto';\n    styleset.height = cellHeight ? cellHeight + 'px' : 'auto';\n  }\n\n  return styleset;\n};\n\nexports[\"default\"] = CellShell;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY2VsbHNoZWxsLnRzeC5qcyIsIm1hcHBpbmdzIjoiQ0FBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxJQUFNQSxvQkFBb0IsR0FBRyxJQUE3Qjs7QUFFQSxJQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFDQyxFQUFELEVBYWpCO01BWkdDLFdBQVc7TUFDWEMsVUFBVTtNQUNWQyxTQUFTO01BQ1RDLEtBQUs7TUFDTDtBQUNBQyxXQUFTO01BQ1RDLE9BQU87TUFDUEMsUUFBUTtNQUNSQyxXQUFXO01BQ1hDLFVBQVU7TUFDVkMsWUFBWTtNQUNaQyxVQUFVO0FBR1YsTUFBTUMsYUFBYSxHQUFHLHdCQUFXQyw2QkFBWCxDQUF0Qjs7QUFFTSxXQUFzQixzQkFBUztBQUNqQ0MsWUFBUSxFQUFDO0FBRHdCLEdBQVQsQ0FBdEI7QUFBQSxNQUFDQyxNQUFNLFFBQVA7QUFBQSxNQUFRQyxVQUFVLFFBQWxCOztBQUlBLFdBQThCLHNCQUFTLE9BQVQsQ0FBOUI7QUFBQSxNQUFDQyxVQUFVLFFBQVg7QUFBQSxNQUFhQyxhQUFhLFFBQTFCLENBUlQsQ0FVRzs7O0FBRUEsTUFBTUMsUUFBUSxHQUFHLG9CQUFPLElBQVAsQ0FBakIsQ0FaSCxDQWFHOztBQUNBLE1BQU1DLFlBQVksR0FBRyxvQkFBTyxJQUFQLENBQXJCO0FBRUEsTUFBTUMsYUFBYSxHQUFHLG9CQUFPLElBQVAsQ0FBdEIsQ0FoQkgsQ0FrQkc7QUFFQTs7QUFDQSx5QkFBVTtBQUVOLFdBQU87QUFDSEQsa0JBQVksQ0FBQ0UsT0FB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LE1BQVQsR0FBa0J6RCxVQUFVLEdBQUVBLFVBQVUsR0FBRyxJQUFmLEdBQXFCLE1BQWpEO0FBRUg7O0FBRUQsU0FBT29ELFFBQVA7QUFFSCxDQWpCRDs7QUFtQkFNLGtCQUFBQSxHQUFlN0QsU0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvY2VsbHNoZWxsLnRzeD82ZGRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGNlbGxzaGVsbC50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAxOS0yMDIyIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbmltcG9ydCBSZWFjdCwge3VzZVJlZiwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHtyZXF1ZXN0SWRsZUNhbGxiYWNrLCBjYW5jZWxJZGxlQ2FsbGJhY2t9IGZyb20gJ3JlcXVlc3RpZGxlY2FsbGJhY2snXG5cbmltcG9ydCB7IE91dFBvcnRhbCB9IGZyb20gJ3JlYWN0LXJldmVyc2UtcG9ydGFsJ1xuXG5pbXBvcnQgUGxhY2Vob2xkZXIgZnJvbSAnLi9wbGFjZWhvbGRlcidcblxuaW1wb3J0IHsgQ3JhZGxlUG9ydGFsc0NvbnRleHQgfSBmcm9tICcuL2NyYWRsZSdcblxuY29uc3QgSURMRUNBTExCQUNLX1RJTUVPVVQgPSAxMDAwXG5cbmNvbnN0IENlbGxTaGVsbCA9ICh7XG4gICAgb3JpZW50YXRpb24sIFxuICAgIGNlbGxIZWlnaHQsIFxuICAgIGNlbGxXaWR0aCwgXG4gICAgaW5kZXgsIFxuICAgIC8vIG9ic2VydmVyLCAvLyBpbnRlcnNlY3Rpb24gb2JzZXJ2ZXJcbiAgICBjYWxsYmFja3MsIFxuICAgIGdldEl0ZW0sIFxuICAgIGxpc3RzaXplLCBcbiAgICBwbGFjZWhvbGRlciwgXG4gICAgaW5zdGFuY2VJRCwgXG4gICAgc2Nyb2xsZXJOYW1lLFxuICAgIHNjcm9sbGVySUQsXG59KSA9PiB7XG5cbiAgICBjb25zdCBwb3J0YWxIYW5kbGVyID0gdXNlQ29udGV4dChDcmFkbGVQb3J0YWxzQ29udGV4dClcbiAgICBcbiAgICBjb25zdCBbc3R5bGVzLHNhdmVTdHlsZXNdID0gdXNlU3RhdGUoe1xuICAgICAgICBvdmVyZmxvdzonaGlkZGVuJyxcbiAgICB9IGFzIFJlYWN0LkNTU1Byb3BlcnRpZXMpXG5cbiAgICBjb25zdCBbY2VsbFN0YXR1cywgc2V0Q2VsbFN0YXR1c10gPSB1c2VTdGF0ZSgnc2V0dXAnKTsgXG5cbiAgICAvLyBjb25zb2xlLmxvZygnUlVOTklORyBjZWxsc2hlbGwgY2VsbFN0YXR1cywgaW5kZXgsIHNjcm9sbGVySUQsIGluc3RhbmNlSUQnLGNlbGxTdGF0dXMsIGluZGV4LCBzY3JvbGxlcklELCBpbnN0YW5jZUlEKVxuXG4gICAgY29uc3Qgc2hlbGxSZWYgPSB1c2VSZWYobnVsbClcbiAgICAvLyBjb25zdCBpbnN0YW5jZUlEUmVmID0gdXNlUmVmKGluc3RhbmNlSUQpXG4gICAgY29uc3QgaXNNb3VudGVkUmVmID0gdXNlUmVmKHRydWUpXG5cbiAgICBjb25zdCBwb3J0YWxkYXRhUmVmID0gdXNlUmVmKG51bGwpXG5cbiAgICAvLyBjb25zb2xlLmxvZygnUlVOTklORyBjZWxsc2hlbGwgc2Nyb2xsZXJJRCwgaW5kZXgsIGNlbGxTdGF0dXMnLCBzY3JvbGxlcklELCBpbmRleCwgY2VsbFN0YXR1cylcblxuICAgIC8vIGZvciB1bm1vdW50XG4gICAgdXNlRWZmZWN0KCgpPT57XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2VcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdVTnNldHRpbmcgb2JzZXJ2ZXIgZm9yIGluZGV4JyxpbmRleClcbiAgICAgICAgICAgIC8vIG9ic2VydmVyLnVub2JzZXJ2ZShvYnNlcnZlckVsZW1lbnRSZWYuY3VycmVudClcbiAgICAgICAgfVxuXG4gICAgfSxbXSlcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tIFsgcGxhY2Vob2xkZXIgZGVmaW5pdGlvbiBdIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGNvbnN0IGN1c3RvbXBsYWNlaG9sZGVyID0gdXNlTWVtbygoKSA9PiB7XG5cbiAgICAgICAgICAgIHJldHVybiBwbGFjZWhvbGRlcj9SZWFjdC5jcmVhdGVFbGVtZW50KHBsYWNlaG9sZGVyLCB7aW5kZXgsIGxpc3RzaXplfSk6bnVsbFxuICAgICAgICAgICAgXG4gICAgfSxbcGxhY2Vob2xkZXIsbGlzdHNpemVdKVxuXG4gICAgY29uc3QgcGxhY2Vob2xkZXJSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIHBsYWNlaG9sZGVyUmVmLmN1cnJlbnQgPSB1c2VNZW1vKCgpPT57XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gY3VzdG9tcGxhY2Vob2xkZXI/XG4gICAgICAgICAgICAgICAgY3VzdG9tcGxhY2Vob2xkZXI6PFBsYWNlaG9sZGVyIGluZGV4ID0ge2luZGV4fSBsaXN0c2l6ZSA9IHtsaXN0c2l6ZX0gZXJyb3IgPSB7ZmFsc2V9Lz5cbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyXG4gICAgfSwgW2luZGV4LCBjdXN0b21wbGFjZWhvbGRlciwgbGlzdHNpemVdKTtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0gWyBlbmQgb2YgcGxhY2Vob2xkZXIgZGVmaW5pdGlvbiBdIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgY29uc3QgcmVxdWVzdGlkbGVjYWxsYmFjayA9IHdpbmRvd1sncmVxdWVzdElkbGVDYWxsYmFjayddP3dpbmRvd1sncmVxdWVzdElkbGVDYWxsYmFjayddOnJlcXVlc3RJZGxlQ2FsbGJhY2tcbiAgICBjb25zdCBjYW5jZWxpZGxlY2FsbGJhY2sgPSB3aW5kb3dbJ2NhbmNlbElkbGVDYWxsYmFjayddP3dpbmRvd1snY2FuY2VsSWRsZUNhbGxiYWNrJ106Y2FuY2VsSWRsZUNhbGxiYWNrXG5cbiAgICBjb25zdCByZXF1ZXN0SWRsZUNhbGxiYWNrSWRSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIC8vIGluaXRpYWxpemUgY2VsbCBjb250ZW50XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcblxuICAgICAgICAvLyBjb25zb2xlLmxvZygnQ0VMTFNIRUxMIG1vdW50aW5nIGluZGV4JyxpbmRleClcblxuICAgICAgICBwb3J0YWxkYXRhUmVmLmN1cnJlbnQgPSBwb3J0YWxIYW5kbGVyLmZldGNoT3JDcmVhdGVQb3J0YWwoaW5kZXgsIHBsYWNlaG9sZGVyUmVmLmN1cnJlbnQpXG5cbiAgICAgICAgY29uc3QgaGFzVXNlckNvbnRlbnQgPSAhIXBvcnRhbGRhdGFSZWYuY3VycmVudC5oYXN1c2VyY29udGVudCAvLyBwcmV2aW91cyBJblBvcnRhbCBjcmVhdGlvbiBmb3IgaW5kZXhcblxuICAgICAgICBjb25zdCB7IHJldmVyc2Vwb3J0YWwgfSA9IHBvcnRhbGRhdGFSZWYuY3VycmVudFxuXG4gICAgICAgIGNvbnRlbnRjb21wb25lbnRSZWYuY3VycmVudCA9IDxPdXRQb3J0YWwgbm9kZSA9IHtyZXZlcnNlcG9ydGFsfS8+XG5cbiAgICAgICAgaWYgKCFoYXNVc2VyQ29udGVudCkge1xuXG4gICAgICAgICAgICBzZXRDZWxsU3RhdHVzKCdnZXR1c2VyY29udGVudCcpXG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgcG9ydGFsZGF0YVJlZi5jdXJyZW50LmlzUmVwYXJlbnRpbmcgPSB0cnVlXG4gICAgICAgICAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHNldENlbGxTdGF0dXMoJ3JlYWR5JylcbiAgICAgICAgICAgIFxuICAgICAgICB9ICAgICAgICBcblxuICAgICAgICAvLyB1bm1vdW50XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG5cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdDRUxMU0hFTEwgVU5tb3VudGluZyBpbmRleCcsaW5kZXgpXG4gICAgICAgICAgICBjYW5jZWxpZGxlY2FsbGJhY2socmVxdWVzdElkbGVDYWxsYmFja0lkUmVmLmN1cnJlbnQpXG5cbiAgICAgICAgfVxuXG4gICAgfSxbXSlcblxuXG4gICAgLy8gY3JhZGxlIGludmFyaWFudCBvbmRlbWFuZCBjYWxsYmFjayBwYXJhbWV0ZXIgdmFsdWVcbiAgICBjb25zdCBnZXRFbGVtZW50RGF0YSA9IHVzZUNhbGxiYWNrKCgpPT57XG5cbiAgICAgICAgcmV0dXJuIFtpbmRleCwgc2hlbGxSZWZdXG4gICAgICAgIFxuICAgIH0sW10pXG5cbiAgICAvLyBpbml0aWFsaXplIGNhbGxiYWNrc1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG5cbiAgICAgICAgY29uc3QgbG9jYWxjYWxscyA9IGNhbGxiYWNrc1xuXG4gICAgICAgIGxvY2FsY2FsbHMuc2V0RWxlbWVudERhdGEgJiYgbG9jYWxjYWxscy5zZXRFbGVtZW50RGF0YShnZXRFbGVtZW50RGF0YSgpLCdyZWdpc3RlcicpXG5cbiAgICAgICAgcmV0dXJuICgoKT0+e1xuXG4gICAgICAgICAgICBsb2NhbGNhbGxzLnNldEVsZW1lbnREYXRhICYmIGxvY2FsY2FsbHMuc2V0RWxlbWVudERhdGEoZ2V0RWxlbWVudERhdGEoKSwndW5yZWdpc3RlcicpXG5cbiAgICAgICAgfSlcblxuICAgIH0sW2NhbGxiYWNrc10pXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1bIGNvbmZpZ3VyZSBvYnNlcnZlciBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBcbiAgICAvLyBjb25zdCBvYnNlcnZlckVsZW1lbnRSZWYgPSB1c2VSZWYobnVsbCkgLy8gcGVyc2lzdGVudCBvYnNlcnZlciBlbGVtZW50IHJlZiBmb3IgdW5tb3VudFxuXG4gICAgLy8gY29uc3Qgb2JzZXJ2ZXJzZXRSZWYgPSB1c2VSZWYoZmFsc2UpXG4gICAgLy8gdXNlRWZmZWN0KCgpPT57XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2luZGV4LCBjZWxsU3RhdHVzJywgaW5kZXgsIHNoZWxsUmVmLmN1cnJlbnQpXG5cbiAgICAgICAgLy8gaWYgKCghc2hlbGxSZWYuY3VycmVudCkgfHwgb2JzZXJ2ZXJzZXRSZWYuY3VycmVudCkge1xuICAgICAgICAvLyAgICAgcmV0dXJuXG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBjb25zb2xlLmxvZygnc2V0dGluZyBvYnNlcnZlciBmb3IgaW5kZXgnLGluZGV4KVxuXG4gICAgICAgIC8vIG9ic2VydmVyLm9ic2VydmUoc2hlbGxSZWYuY3VycmVudClcbiAgICAgICAgLy8gb2JzZXJ2ZXJFbGVtZW50UmVmLmN1cnJlbnQgPSBzaGVsbFJlZi5jdXJyZW50XG4gICAgICAgIC8vIG9ic2VydmVyc2V0UmVmLmN1cnJlbnQgPSB0cnVlXG5cbiAgICAvLyB9LFtdKS8vW29ic2VydmVyLCBzaGVsbFJlZi5jdXJyZW50LCBjZWxsU3RhdHVzXSlcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgZW5kIG9mIGNvbmZpZ3VyZSBvYnNlcnZlciBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gc2V0IHN0eWxlc1xuICAgIHVzZUVmZmVjdCgoKT0+e1xuXG4gICAgICAgIGxldCBuZXdTdHlsZXMgPSBnZXRTaGVsbFN0eWxlcyhvcmllbnRhdGlvbiwgY2VsbEhlaWdodCwgY2VsbFdpZHRoLCBzdHlsZXMpXG4gICAgICAgIFxuICAgICAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHNhdmVTdHlsZXMobmV3U3R5bGVzKVxuICAgICAgICB9XG5cbiAgICB9LFtvcmllbnRhdGlvbixjZWxsSGVpZ2h0LGNlbGxXaWR0aF0pIFxuXG4gICAgY29uc3QgY29udGVudGNvbXBvbmVudFJlZiA9IHVzZVJlZihudWxsKVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcblxuICAgICAgICBzd2l0Y2ggKGNlbGxTdGF0dXMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NldHVwJzpcbiAgICAgICAgICAgICAgICAvLyBuby1vcFxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlICdnZXR1c2VyY29udGVudCc6IHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWRsZUNhbGxiYWNrSWRSZWYuY3VycmVudCA9IHJlcXVlc3RpZGxlY2FsbGJhY2soYXN5bmMgKCk9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlcmNvbnRlbnQgPSBhd2FpdCBnZXRJdGVtKGluZGV4KVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01vdW50ZWRSZWYuY3VycmVudCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlcmNvbnRlbnQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnRhbGRhdGFSZWYuY3VycmVudC5oYXN1c2VyY29udGVudCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3J0YWxkYXRhUmVmLmN1cnJlbnQgPSBwb3J0YWxIYW5kbGVyLnVwZGF0ZVBvcnRhbChpbmRleCx1c2VyY29udGVudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXZlcnNlcG9ydGFsID0gcG9ydGFsZGF0YVJlZi5jdXJyZW50LnJldmVyc2Vwb3J0YWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3J0YWxkYXRhUmVmLmN1cnJlbnQuaXNSZXBhcmVudGluZyA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50Y29tcG9uZW50UmVmLmN1cnJlbnQgPSA8T3V0UG9ydGFsIG5vZGUgPSB7cmV2ZXJzZXBvcnRhbH0vPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SJywnbm8gY29udGVudCBpdGVtJylcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDZWxsU3RhdHVzKCdyZWFkeScpXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSx7dGltZW91dDpJRExFQ0FMTEJBQ0tfVElNRU9VVH0pXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSAncmVhZHknOiB7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSwgW2NlbGxTdGF0dXNdKVxuXG4gICAgcmV0dXJuIDxkaXYgcmVmID0geyBzaGVsbFJlZiB9IFxuICAgICAgICBkYXRhLXR5cGUgPSAnY2VsbHNoZWxsJyBcbiAgICAgICAgZGF0YS1zY3JvbGxlcmlkID0ge3Njcm9sbGVySUR9IFxuICAgICAgICBkYXRhLWluZGV4ID0ge2luZGV4fSBcbiAgICAgICAgZGF0YS1pbnN0YW5jZWlkID0ge2luc3RhbmNlSUR9IFxuICAgICAgICBzdHlsZSA9IHtzdHlsZXN9PlxuXG4gICAgICAgICAgICB7IChjZWxsU3RhdHVzICE9ICdzZXR1cCcpICYmIGNvbnRlbnRjb21wb25lbnRSZWYuY3VycmVudCB9XG4gICAgICAgICAgICBcbiAgICAgICAgPC9kaXY+XG5cbn0gLy8gQ2VsbFNoZWxsXG5cbmNvbnN0IGdldFNoZWxsU3R5bGVzID0gKG9yaWVudGF0aW9uLCBjZWxsSGVpZ2h0LCBjZWxsV2lkdGgsIHN0eWxlcykgPT4ge1xuXG4gICAgbGV0IHN0eWxlc2V0ID0gT2JqZWN0LmFzc2lnbih7cG9zaXRpb246J3JlbGF0aXZlJ30sc3R5bGVzKVxuXG4gICAgaWYgKG9yaWVudGF0aW9uID09ICdob3Jpem9udGFsJykge1xuICAgICAgICBzdHlsZXNldC53aWR0aCA9IGNlbGxXaWR0aD8oY2VsbFdpZHRoICsgJ3B4Jyk6J2F1dG8nXG4gICAgICAgIHN0eWxlc2V0LmhlaWdodCA9ICdhdXRvJ1xuXG4gICAgfSBlbHNlIGlmIChvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuXG4gICAgICAgIHN0eWxlc2V0LndpZHRoID0gJ2F1dG8nXG4gICAgICAgIHN0eWxlc2V0LmhlaWdodCA9IGNlbGxIZWlnaHQ/KGNlbGxIZWlnaHQgKyAncHgnKTonYXV0bydcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlc2V0XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2VsbFNoZWxsXG4iXSwibmFtZXMiOlsiSURMRUNBTExCQUNLX1RJTUVPVVQiLCJDZWxsU2hlbGwiLCJfYSIsIm9yaWVudGF0aW9uIiwiY2VsbEhlaWdodCIsImNlbGxXaWR0aCIsImluZGV4IiwiY2FsbGJhY2tzIiwiZ2V0SXRlbSIsImxpc3RzaXplIiwicGxhY2Vob2xkZXIiLCJpbnN0YW5jZUlEIiwic2Nyb2xsZXJOYW1lIiwic2Nyb2xsZXJJRCIsInBvcnRhbEhhbmRsZXIiLCJjcmFkbGVfMSIsIm92ZXJmbG93Iiwic3R5bGVzIiwic2F2ZVN0eWxlcyIsImNlbGxTdGF0dXMiLCJzZXRDZWxsU3RhdHVzIiwic2hlbGxSZWYiLCJpc01vdW50ZWRSZWYiLCJwb3J0YWxkYXRhUmVmIiwiY3VycmVudCIsImN1c3RvbXBsYWNlaG9sZGVyIiwicmVhY3RfMSIsImNyZWF0ZUVsZW1lbnQiLCJwbGFjZWhvbGRlclJlZiIsInBsYWNlaG9sZGVyXzEiLCJlcnJvciIsInJlcXVlc3RpZGxlY2FsbGJhY2siLCJ3aW5kb3ciLCJyZXF1ZXN0aWRsZWNhbGxiYWNrXzEiLCJjYW5jZWxpZGxlY2FsbGJhY2siLCJyZXF1ZXN0SWRsZUNhbGxiYWNrSWRSZWYiLCJmZXRjaE9yQ3JlYXRlUG9ydGFsIiwiaGFzVXNlckNvbnRlbnQiLCJoYXN1c2VyY29udGVudCIsInJldmVyc2Vwb3J0YWwiLCJjb250ZW50Y29tcG9uZW50UmVmIiwicmVhY3RfcmV2ZXJzZV9wb3J0YWxfMSIsIm5vZGUiLCJpc1JlcGFyZW50aW5nIiwiZ2V0RWxlbWVudERhdGEiLCJsb2NhbGNhbGxzIiwic2V0RWxlbWVudERhdGEiLCJuZXdTdHlsZXMiLCJnZXRTaGVsbFN0eWxlcyIsInVzZXJjb250ZW50IiwidXBkYXRlUG9ydGFsIiwiY29uc29sZSIsImxvZyIsInRpbWVvdXQiLCJyZWYiLCJzdHlsZSIsInN0eWxlc2V0IiwiT2JqZWN0IiwiYXNzaWduIiwicG9zaXRpb24iLCJ3aWR0aCIsImhlaWdodCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/cellshell.tsx\n");

/***/ }),

/***/ "./src/cradle.tsx":
/*!************************!*\
  !*** ./src/cradle.tsx ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("// cradle.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\n/*\n\n    BUGS:\n    - sometimes the head breakline triggers a callback while scrolling forward\n\n    TODO:\n\n    - try position fixed during reparenting to preserve scroll position\n\n    - consider eliminating cellintersectobserver in favour of head and tail intersect oberver\n\n    - scroll reset problem recurs with repeated above and below rapid resets\n        the problem comes with update content from endofscroll, after double normalize signals\n        the extra reparenting is inserted during the timeout for normalize signals\n    - try cleartimeout\n\n\n    - fix scroll reset on reparent\n    - review need for setscrollposition\n    - BUG: in FF nested scroller switch from placeholder to content resets scroll position\n    - unmounted warning to do with InPortal\n\n    ObserversHandler\n    WingsAgent\n    MessageAgent ? // message with host environment, such as referenceIndexCallback\n\n    ScrollHandler\n    SignalsHandler\n    StateHandler\n    ContentHandler\n    ScaffoldHandler\n    ServiceHandler // user services\n    StylesHandler\n\n    BUGS:\n    - check styles in scrollTracker args\n    - doreposition gets stuck at a particular number after getting behind on heavy scroll\n        check pauseScrollingEffects\n    - variable cells showing signs of getItem() with portal\n    - Chrome sometimes misses nested cell portals horizontally\n    - reduce computing intensity to avoid battery drainage\n*/\n\n/*\n    Description\n    -----------\n    The GridStroller provides the illusion of infinite scrolling through the use of a data 'cradle' inside a viewport.\n    The illusion is maintained by synchronizing changes in cradle content with cradle location inside a scrollblock, such\n    that as the scrollblock is moved, the cradle moves oppositely in the scrollblock (to stay visible within the viewport).\n    The scrollblock is sized to approximate the list being viewed, so as to have a scroll thumb size and position which\n    realistically reflects the size of the list being shown.\n\n    The position of the cradle is controlled by a 'axis' which is a 0px height/width (along the medial - ScrollBlock can be\n    verticsl or horizontal). The purpose of the axis is to act as a 'fold', above which cell content expands 'upwards', and\n    below which the cell content expands  'downwards'. GridScroller can be viewed vertically or horizontally. When horizontal,\n    the axis has a 0px width, so that the 'fold' is vertical, and cells expand to the left and right.\n\n    The axis is controlled to always be in the at the leading edge of the leading cellrow of the viewport. Thus\n    in vertical orientation, the axis 'top' css attribute is always equal to the 'scrollTop' position of the scrollblock,\n    plus an adjustment. The adjustment is the result of the alignment of the axis in relation to the top-(or left-)most cell\n    in the viewport (the 'reference' row). The axis can only be placed at the leading edge of the first visible\n    cell in the viewport. Therefore the axis offset from the leading edge of the viewport can be anywhere from minus to\n    plus the length of the leading row. The exact amount depends on where the 'breakpoint' of transition notification is set for\n    cells crossing the viewport threshold (and can be configured). The default of the breakpoint is .5 (half the length of the cell).\n\n    Technically, there are several reference points tracked by the GridScroller. These are:\n        - axisReferenceIndex (the virtual index of the item controlling the location of the axis)\n            The axisReferenceIndex is also used to allocate items above (lower index value) and below (same or higher index value)\n            the fold\n        - cradleFirstIndex (the virtual index of the item defining the leading bound of the cradle content)\n        - axisPosOffset (pixels - plus or minus - that the axis is placed in relation to the viewport's leading edge)\n    \n    These reference points are applied to the following structures:\n        - the viewport\n        - the scrollblock\n        - the cradle, consisting of\n            - the axis (contains cradle head and tail)\n            - the head (contains leading items)\n            - the tail (contains trailing items)\n\n    Structure details:\n        the cradle content consists of\n        - the number of rows that are visible in the viewport (according to the default parameters)\n            - this typically includes one partially visible row\n        - the number of runway rows specified in the parameters, times 2 (one et for the head; one for the tail)\n        - the number of items is the number of rows times the 'crosscount' the lateral number of cells.\n        - the last row might consist of fewer items than crosscount, to match the maximum listsize\n        - the cradleRowcount (visible default rows + runwaycount * 2) and viewpointRowcount (visble rows;typicall one partial)\n\n    Item containers:\n        Client cell content is contained in CellShell's, which are configured according to GridScroller's input parameters.\n        The ItemCell's are in turn contained in CSS grid structures. There are two grid structures - one in the cradle head,\n        and one in the cradle tail. Each grid structure is allowed uniform padding and gaps - identical between the two.\n\n    Overscroll handling:\n        Owing to the weight of the code, and potential rapidity of scrolling, there is an overscroll protocol.\n        if the overscroll is such that part of the cradle is still within the viewport boundaries, then the overscroll\n        is calculated as the number of cell rows that would fit (completely or partially) in the space between the edge of\n        the cradle that is receding from a viewport edge.\n\n        If the overshoot is such that the cradle has entirely passed out of the viewport, the GridScroller goes into 'Repositoining'\n        mode, meaning that it tracks relative location of the axis edge of the viewport, and repaints the cradle accroding to\n        this position when the scrolling stops.\n*/\n\n/*\n    Cradle is activated by interrupts:\n    - resizing of the viewport (1)\n    - observer callbacks:\n        - cradle viewport intersection for repositioning when the cradle races out of scope - by scroll (2)\n        - cellShell viewport intersection which triggers rolling of content - by scroll (3)\n            - rolling content triggers re-allocation of content between cradle wings\n        - cradle wing resize (responding to variable length cell changes) which triggers reconfiguration (4)\n    - pivot - change of orientation (5)\n    - host change of other configuration specs (6)\n*/\n\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CradlePortalsContext = void 0;\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\");\n\nvar ITEM_OBSERVER_THRESHOLD = [0, 1]; // popup position tracker\n\nvar scrolltracker_1 = __importDefault(__webpack_require__(/*! ./scrolltracker */ \"./src/scrolltracker.tsx\")); // support code\n\n\nvar portalhandler_1 = __webpack_require__(/*! ./cradle/portalhandler */ \"./src/cradle/portalhandler.tsx\");\n\nvar scrollhandler_1 = __importDefault(__webpack_require__(/*! ./cradle/scrollhandler */ \"./src/cradle/scrollhandler.tsx\"));\n\nvar statehandler_1 = __importDefault(__webpack_require__(/*! ./cradle/statehandler */ \"./src/cradle/statehandler.tsx\"));\n\nvar contenthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/contenthandler */ \"./src/cradle/contenthandler.tsx\"));\n\nvar scaffoldhandler_1 = __importDefault(__webpack_require__(/*! ./cradle/scaffoldhandler */ \"./src/cradle/scaffoldhandler.tsx\"));\n\nvar interrupthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/interrupthandler */ \"./src/cradle/interrupthandler.tsx\"));\n\nvar servicehandler_1 = __importDefault(__webpack_require__(/*! ./cradle/servicehandler */ \"./src/cradle/servicehandler.tsx\"));\n\nvar styleshandler_1 = __importDefault(__webpack_require__(/*! ./cradle/styleshandler */ \"./src/cradle/styleshandler.tsx\")); // for children\n\n\nexports.CradlePortalsContext = react_1[\"default\"].createContext(null); // for children\n\nvar portalrootstyle = {\n  display: 'none'\n}; // static parm\n\nvar NORMALIZE_SIGNALS_TIMEOUT = 250; // component\n\nvar Cradle = function Cradle(_a) {\n  // ========================[ SETUP ]========================\n  var _b;\n\n  var gridSpecs = _a.gridSpecs,\n      runwaycount = _a.runwaycount,\n      listsize = _a.listsize,\n      defaultVisibleIndex = _a.defaultVisibleIndex,\n      getItem = _a.getItem,\n      placeholder = _a.placeholder,\n      inheritedfunctions = _a.functions,\n      inheritedstyles = _a.styles,\n      scrollerName = _a.scrollerName,\n      scrollerID = _a.scrollerID,\n      breaklineOffset = _a.breaklineOffset; // unpack gridSpecs\n\n  var orientation = gridSpecs.orientation,\n      gap = gridSpecs.gap,\n      padding = gridSpecs.padding,\n      cellHeight = gridSpecs.cellHeight,\n      cellWidth = gridSpecs.cellWidth,\n      layout = gridSpecs.layout,\n      dense = gridSpecs.dense; // freeze object props\n\n  var functions = Object.freeze(Object.assign({}, inheritedfunctions));\n  var styles = Object.freeze(Object.assign({}, inheritedstyles)); // package cradle props to pass to handlers\n\n  var cradleInheritedPropertiesRef = (0, react_1.useRef)(null); // access by closures and support functions\n\n  cradleInheritedPropertiesRef.current = Object.freeze({\n    // gridSpecs\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    layout: layout,\n    dense: dense,\n    // ...rest\n    runwaycount: runwaycount,\n    listsize: listsize,\n    defaultVisibleIndex: defaultVisibleIndex,\n    getItem: getItem,\n    placeholder: placeholder,\n    scrollerName: scrollerName,\n    scrollerID: scrollerID,\n    // objects\n    functions: functions,\n    styles: styles,\n    breaklineOffset: breaklineOffset\n  }); // context\n\n  var viewportInterruptProperties = (0, react_1.useContext)(viewport_1.ViewportInterrupt);\n  var viewportInterruptPropertiesRef = (0, react_1.useRef)(null);\n  viewportInterruptPropertiesRef.current = viewportInterruptProperties; // for closures\n\n  var viewportDimensions = viewportInterruptProperties.viewportDimensions;\n  var viewportheight = viewportDimensions.height,\n      viewportwidth = viewportDimensions.width;\n\n  var _c = (0, react_1.useState)('setup'),\n      cradleState = _c[0],\n      setCradleState = _c[1];\n\n  var cradleStateRef = (0, react_1.useRef)(null); // access by closures\n\n  cradleStateRef.current = cradleState; // controls\n\n  var isMountedRef = (0, react_1.useRef)(true);\n  var normalizeTimerRef = (0, react_1.useRef)(null); // cradle butterfly elements\n\n  var headCradleElementRef = (0, react_1.useRef)(null);\n  var tailCradleElementRef = (0, react_1.useRef)(null);\n  var axisCradleElementRef = (0, react_1.useRef)(null);\n  var headBreaklineCradleElementRef = (0, react_1.useRef)(null);\n  var tailBreaklineCradleElementRef = (0, react_1.useRef)(null);\n  var cradleElementsRef = (0, react_1.useRef)({\n    headRef: headCradleElementRef,\n    tailRef: tailCradleElementRef,\n    axisRef: axisCradleElementRef,\n    headBreaklineRef: headBreaklineCradleElementRef,\n    tailBreaklineRef: tailBreaklineCradleElementRef\n  }); // configuration calculations\n\n  var crosscount = (0, react_1.useMemo)(function () {\n    var viewportsize = orientation == 'horizontal' ? viewportheight : viewportwidth;\n    var crossLength = orientation == 'horizontal' ? cellHeight : cellWidth;\n    var viewportlengthforcalc = viewportsize - padding * 2 + gap; // length of viewport\n\n    var tilelengthforcalc = crossLength + gap;\n    tilelengthforcalc = Math.min(tilelengthforcalc, viewportlengthforcalc); // result cannot be less than 1\n\n    return Math.floor(viewportlengthforcalc / tilelengthforcalc);\n  }, [orientation, gap, padding, cellWidth, cellHeight, viewportheight, viewportwidth]);\n\n  var _d = (0, react_1.useMemo)(function () {\n    var viewportLength, cellLength;\n\n    if (orientation == 'vertical') {\n      viewportLength = viewportheight;\n      cellLength = cellHeight;\n    } else {\n      viewportLength = viewportwidth;\n      cellLength = cellWidth;\n    }\n\n    cellLength += gap;\n    var viewportRowcount = Math.ceil(viewportLength / cellLength);\n    var cradleRowcount = viewportRowcount + runwaycount * 2;\n    var itemcount = cradleRowcount * crosscount;\n\n    if (itemcount > listsize) {\n      itemcount = listsize;\n      cradleRowcount = Math.ceil(itemcount / crosscount);\n    }\n\n    var listRowcount = Math.ceil(listsize / crosscount);\n    return [cradleRowcount, viewportRowcount, listRowcount];\n  }, [orientation, gap, // padding,\n  cellWidth, cellHeight, viewportheight, viewportwidth, listsize, runwaycount, crosscount]),\n      cradleRowcount = _d[0],\n      viewportRowcount = _d[1],\n      listRowcount = _d[2]; // configuration objects\n\n\n  var CradleInternalPropertiesRef = (0, react_1.useRef)(null);\n  CradleInternalPropertiesRef.current = {\n    crosscount: crosscount,\n    cradleRowcount: cradleRowcount,\n    viewportRowcount: viewportRowcount,\n    listRowcount: listRowcount,\n    cellObserverThreshold: ITEM_OBSERVER_THRESHOLD,\n    cradleStateRef: cradleStateRef,\n    setCradleState: setCradleState,\n    isMountedRef: isMountedRef,\n    cradleElementsRef: cradleElementsRef\n  }; // utility to register or unregister cradle item elements\n\n  var setItemElementData = (0, react_1.useCallback)(function (itemElementData, reportType) {\n    var index = itemElementData[0],\n        shellref = itemElementData[1];\n\n    if (reportType == 'register') {\n      contentHandler.itemElements.set(index, shellref);\n    } else if (reportType == 'unregister') {\n      contentHandler.itemElements[\"delete\"](index);\n    }\n  }, []);\n  var internalCallbacksRef = (0, react_1.useRef)({\n    setElementData: setItemElementData\n  }); // host callbacks\n\n  var referenceIndexCallbackRef = (0, react_1.useRef)(functions === null || functions === void 0 ? void 0 : functions.referenceIndexCallback);\n  var externalCallbacksRef = (0, react_1.useRef)({\n    referenceIndexCallbackRef: referenceIndexCallbackRef\n  }); // cradle parameters master bundle\n\n  var handlersRef = (0, react_1.useRef)(null); // placeholder in cradleParamters; make available individual handlers\n\n  var cradleParameters = Object.freeze({\n    handlersRef: handlersRef,\n    viewportInterruptPropertiesRef: viewportInterruptPropertiesRef,\n    cradleInheritedPropertiesRef: cradleInheritedPropertiesRef,\n    CradleInternalPropertiesRef: CradleInternalPropertiesRef,\n    internalCallbacksRef: internalCallbacksRef,\n    externalCallbacksRef: externalCallbacksRef\n  });\n  var setOfHandlersRef = (0, react_1.useRef)(null);\n\n  if (!setOfHandlersRef.current) {\n    setOfHandlersRef.current = getCradleHandlers(cradleParameters);\n  } // make handlers directly available to cradle code\n\n\n  var _e = setOfHandlersRef.current,\n      portalHandler = _e.portalHandler,\n      interruptHandler = _e.interruptHandler,\n      scrollHandler = _e.scrollHandler,\n      stateHandler = _e.stateHandler,\n      contentHandler = _e.contentHandler,\n      scaffoldHandler = _e.scaffoldHandler,\n      serviceHandler = _e.serviceHandler,\n      stylesHandler = _e.stylesHandler; // to instantiate handlersRef\n\n  var handlerObjectRef = (0, react_1.useRef)({\n    portals: portalHandler,\n    interrupts: interruptHandler,\n    scroll: scrollHandler,\n    state: stateHandler,\n    content: contentHandler,\n    scaffold: scaffoldHandler,\n    service: serviceHandler,\n    styles: stylesHandler\n  });\n  handlersRef.current = handlerObjectRef.current; // back-fill cradleParameters property\n  // ===================[ INITIALIZATION effects ]=========================\n  // this is an immediate response to reparenting. Reparenting resets scroll positions\n  // this restores scroll as soon as cradle is invoked after reparenting\n\n  if ((_b = viewportInterruptProperties.portal) === null || _b === void 0 ? void 0 : _b.isReparenting) {\n    viewportInterruptProperties.portal.isReparenting = false;\n    viewportInterruptProperties.elementref.current[scaffoldHandler.cradleReferenceData.blockScrollProperty] = Math.max(0, scaffoldHandler.cradleReferenceData.blockScrollPos);\n  } // clear mounted flag on unmount\n\n\n  (0, react_1.useLayoutEffect)(function () {\n    // unmount\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []); //initialize host functions properties\n\n  (0, react_1.useEffect)(function () {\n    referenceIndexCallbackRef.current = functions === null || functions === void 0 ? void 0 : functions.referenceIndexCallback;\n    if (!functions.getCallbacks) return;\n    var scrollToItem = serviceHandler.scrollToItem,\n        getVisibleList = serviceHandler.getVisibleList,\n        getContentList = serviceHandler.getContentList,\n        reload = serviceHandler.reload;\n    var callbacks = {\n      scrollToItem: scrollToItem,\n      getVisibleList: getVisibleList,\n      getContentList: getContentList,\n      reload: reload\n    };\n    Object.freeze(callbacks);\n    functions.getCallbacks(callbacks);\n  }, []); // initialize window scroll listener\n\n  (0, react_1.useEffect)(function () {\n    var viewportdata = viewportInterruptPropertiesRef.current;\n    viewportdata.elementref.current.addEventListener('scroll', scrollHandler.onScroll);\n    return function () {\n      viewportdata.elementref.current && viewportdata.elementref.current.removeEventListener('scroll', scrollHandler.onScroll);\n    };\n  }, []); // observer support\n\n  /*\n      There are two interection observers, one for the cradle, and another for itemShells;\n          both against the viewport.\n      There is also a resize observer for the cradle wings, to respond to size changes of\n          variable cells.\n  */\n  // set up cradle resizeobserver\n\n  (0, react_1.useEffect)(function () {\n    var observer = interruptHandler.cradleResize.createObserver();\n    var cradleElements = scaffoldHandler.elements;\n    observer.observe(cradleElements.headRef.current);\n    observer.observe(cradleElements.tailRef.current);\n    return function () {\n      observer.disconnect();\n    };\n  }, []); // intersection observer for cradle body\n  // this sets up an IntersectionObserver of the cradle against the viewport. When the\n  // cradle goes out of the observer scope, the \"repositioningRender\" cradle state is triggerd.\n\n  (0, react_1.useEffect)(function () {\n    var observer = interruptHandler.cradleIntersect.createObserver();\n    var cradleElements = scaffoldHandler.elements;\n    observer.observe(cradleElements.headRef.current);\n    observer.observe(cradleElements.tailRef.current);\n    return function () {\n      observer.disconnect();\n    };\n  }, []); // intersection observer for cradle axix breaklines\n\n  (0, react_1.useEffect)(function () {\n    var cradleElements = scaffoldHandler.elements;\n    var observer = interruptHandler.axisBreaklinesIntersect.createObserver();\n    observer.observe(cradleElements.headBreaklineRef.current);\n    observer.observe(cradleElements.tailBreaklineRef.current);\n    return function () {\n      observer.disconnect();\n    };\n  }, []); // =====================[ RECONFIGURATION effects ]======================\n  // trigger resizing based on viewport state\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n\n    if (viewportInterruptProperties.isResizing) {\n      var signals = interruptHandler.signals; // signals.pauseCellObserver = true\n\n      signals.pauseCradleIntersectionObserver = true;\n      signals.pauseCradleResizeObserver = true;\n      signals.pauseScrollingEffects = true;\n      setCradleState('resizing');\n    } // complete resizing mode\n\n\n    if (!viewportInterruptProperties.isResizing && cradleStateRef.current == 'resizing') {\n      setCradleState('resized');\n    }\n  }, [viewportInterruptProperties.isResizing]); // reload for changed parameters\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    var signals = interruptHandler.signals; // signals.pauseCellObserver = true\n\n    signals.pauseBreaklinesObserver = true;\n    signals.pauseScrollingEffects = true;\n    setCradleState('reload');\n  }, [listsize, cellHeight, cellWidth, gap, padding]); // trigger pivot *only* on change in orientation\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return; // get previous ratio\n\n    var previousCellPixelLength = orientation == 'vertical' ? cradleInheritedPropertiesRef.current.cellWidth : cradleInheritedPropertiesRef.current.cellHeight; // let previousAxisOffset = scaffoldHandler.cradleReferenceData.theNextAxisPixelOffset\n\n    var previousAxisOffset = scaffoldHandler.cradleReferenceData.nextCradlePosOffset;\n    var previousratio = previousAxisOffset / previousCellPixelLength;\n    var currentCellPixelLength = orientation == 'vertical' ? cradleInheritedPropertiesRef.current.cellHeight : cradleInheritedPropertiesRef.current.cellWidth;\n    var currentAxisOffset = previousratio * currentCellPixelLength;\n    scaffoldHandler.cradleReferenceData.nextCradlePosOffset = Math.round(currentAxisOffset);\n    var signals = interruptHandler.signals; // signals.pauseCellObserver = true\n    // pauseCradleIntersectionObserverRef.current = true\n\n    signals.pauseBreaklinesObserver = true;\n    signals.pauseScrollingEffects = true;\n    setCradleState('pivot'); // let cradleContent = contentAgentRef.current.content\n\n    cradleContent.headModelComponents = [];\n    cradleContent.tailModelComponents = [];\n    cradleContent.headViewComponents = [];\n    cradleContent.tailViewComponents = [];\n  }, [orientation]); // =====================[ OPERATION ]===========================\n  // styles for scaffold\n\n  var _f = (0, react_1.useMemo)(function () {\n    return stylesHandler.setCradleStyles({\n      orientation: orientation,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding,\n      viewportheight: viewportheight,\n      viewportwidth: viewportwidth,\n      crosscount: crosscount,\n      userstyles: styles,\n      breaklineOffset: breaklineOffset\n    });\n  }, [orientation, cellHeight, cellWidth, gap, padding, viewportheight, viewportwidth, crosscount, styles]),\n      cradleHeadStyle = _f[0],\n      cradleTailStyle = _f[1],\n      cradleAxisStyle = _f[2],\n      breaklineHeadStyle = _f[3],\n      breaklineTailStyle = _f[4],\n      cradleDividerStyle = _f[5]; // unset and reset observers for reposition\n\n\n  (0, react_1.useEffect)(function () {\n    if (cradleState != 'startreposition' && cradleState != 'finishreposition') return;\n    var cradleobserver = interruptHandler.cradleIntersect.observer;\n    var breaklineobserver = interruptHandler.axisBreaklinesIntersect.observer;\n\n    if (cradleState == 'startreposition') {\n      cradleobserver.disconnect();\n      breaklineobserver.disconnect();\n    }\n\n    if (cradleState == 'finishreposition') {\n      var cradleElements = scaffoldHandler.elements;\n      cradleobserver.observe(cradleElements.headRef.current);\n      cradleobserver.observe(cradleElements.tailRef.current);\n      breaklineobserver.observe(cradleElements.headBreaklineRef.current);\n      breaklineobserver.observe(cradleElements.tailBreaklineRef.current);\n    }\n  }, [cradleState]); // item shell observer\n\n  /*\n      The cradle content is driven by notifications from the IntersectionObserver.\n      - as the user scrolls the cradle, which has a runwaycount at both the leading\n          and trailing edges, CellShells scroll into or out of the scope of the observer\n          (defined by the width/height of the viewport + the lengths of the runways). The observer\n          notifies the app (through cellobservercallback() below) at the crossings of the itemshells\n          of the defined observer cradle boundaries.\n           The no-longer-intersecting notifications trigger dropping of that number of affected items from\n          the cradle contentlist. The dropping of items from the trailing end of the content list\n          triggers the addition of an equal number of items at the leading edge of the cradle content.\n           Technically, the opposite end position spec is set (top or left depending on orientation),\n          and the matching end position spec is set to 'auto' when items are added. This causes items to be\n          \"squeezed\" into the leading or trailing ends of the ui content (out of view) as appropriate.\n           There are exceptions for setup and edge cases.\n  */\n  // responds to change of orientation\n  // useEffect(() => {\n  //     let observer = interruptHandler.cellIntersect.observer\n  //     if (observer) observer.disconnect()\n  //     observer = interruptHandler.cellIntersect.createObserver()\n  //     return () => {\n  //         observer.disconnect()\n  //     }\n  // },[orientation])\n  // =====================[ STATE management ]==========================\n  // data for state processing\n\n  var callingCradleState = (0, react_1.useRef)(cradleStateRef.current);\n  var headlayoutDataRef = (0, react_1.useRef)(null); // this is the core state engine\n  // useLayout for suppressing flashes\n\n  (0, react_1.useLayoutEffect)(function () {\n    var viewportInterruptProperties = viewportInterruptPropertiesRef.current;\n    var cradleContent = contentHandler.content;\n\n    switch (cradleState) {\n      // renderupdatedcontent is called from cellintersectionobservercallback (interruptHandler), \n      // and called from onAfterScroll (scrollHandler)\n      // it is required set configurations before 'ready' TODO: specify!\n      case 'renderupdatedcontent':\n        {\n          setCradleState('ready');\n          break;\n        }\n      // ----------------------------------------------------------------------\n      // ------------[ reposition when repositioningRequired is true ]---------------\n\n      case 'startreposition':\n        {\n          // interruptHandler.states.isRepositioning = true\n          interruptHandler.signals.pauseCradleIntersectionObserver = true;\n          setCradleState('repositioningRender');\n          break;\n        }\n\n      case 'finishreposition':\n        {\n          interruptHandler.signals.pauseCradleIntersectionObserver = false;\n          scrollHandler.updateReferenceData();\n          setCradleState('doreposition'); // setCradleState('updatepositionreferences')\n\n          break;\n        }\n      // -----------------------------------------------------------------------\n      // ------------[ the following 5 cradle states all resolve with ]---------\n      // ------------[ a chain starting with 'preparecontent', which  ]---------\n      // ------------[ calls setCradleContent                         ]---------\n\n      case 'doreposition':\n      case 'setup':\n      case 'resized':\n      case 'pivot':\n      case 'reload':\n        callingCradleState.current = cradleState; // message for setCradleContent\n\n        setCradleState('preparecontent'); // cycle to allow some config\n\n        break;\n\n      case 'preparecontent':\n        {\n          cradleContent.headModelComponents = [];\n          cradleContent.tailModelComponents = [];\n          cradleContent.headViewComponents = [];\n          cradleContent.tailViewComponents = [];\n          handlersRef.current.portals.resetScrollerPortalRepository();\n          contentHandler.setCradleContent(callingCradleState.current);\n          setCradleState('preparerender');\n          break;\n        }\n\n      case 'preparerender':\n        {\n          var cradleContent_1 = contentHandler.content;\n          cradleContent_1.headViewComponents = cradleContent_1.headModelComponents;\n          cradleContent_1.tailViewComponents = cradleContent_1.tailModelComponents;\n          viewportInterruptProperties.elementref.current[scaffoldHandler.cradleReferenceData.blockScrollProperty] = Math.max(0, scaffoldHandler.cradleReferenceData.blockScrollPos);\n          setCradleState('normalizesignals'); // call a timeout for ready (or interrupt continuation)\n\n          break;\n        }\n\n      case 'normalizesignals':\n        {\n          normalizeTimerRef.current = setTimeout(function () {\n            if (!isMountedRef.current) return; // allow short-circuit fallbacks to continue interrupt responses\n\n            /*1*/\n\n            if (!viewportInterruptProperties.isResizing) {\n              // resize short-circuit\n\n              /*2*/\n              if (!interruptHandler.signals.repositioningRequired) {\n                // repositioning short-circuit\n                var signals = interruptHandler.signals;\n\n                if (viewportInterruptProperties.elementref.current) {\n                  // already unmounted if fails (?)\n                  // signals.pauseCellObserver  && (signals.pauseCellObserver = false)\n                  signals.pauseBreaklinesObserver && (signals.pauseBreaklinesObserver = false);\n                  signals.pauseScrollingEffects && (signals.pauseScrollingEffects = false);\n                  signals.pauseCradleIntersectionObserver && (signals.pauseCradleIntersectionObserver = false);\n                  signals.pauseCradleResizeObserver && (signals.pauseCradleResizeObserver = false);\n                } else {\n                  console.log('ERROR: viewport element not set in normalizesignals', scrollerID, viewportInterruptProperties);\n                }\n                /*default*/\n\n\n                if (isMountedRef.current) setCradleState('ready');\n              } else {\n                /*2*/\n                if (isMountedRef.current) setCradleState('startreposition');\n              }\n            } else {\n              /*1*/\n              if (isMountedRef.current) setCradleState('resizing');\n            }\n          }, NORMALIZE_SIGNALS_TIMEOUT);\n          break;\n        }\n    }\n  }, [cradleState]); // standard processing stages\n\n  (0, react_1.useEffect)(function () {\n    var viewportInterruptProperties = viewportInterruptPropertiesRef.current;\n\n    switch (cradleState) {\n      case 'repositioningRender':\n        break;\n\n      case 'repositioningContinuation':\n        setCradleState('repositioningRender');\n        break;\n\n      case 'ready':\n        break;\n    }\n  }, [cradleState]); // ==========================[ RENDER ]===========================\n\n  var referenceIndexOffset = scaffoldHandler.cradleReferenceData.scrollImpliedItemIndexReference;\n  var scrollTrackerArgs = (0, react_1.useMemo)(function () {\n    if (!(cradleState == 'repositioningContinuation' || cradleState == 'repositioningRender')) {\n      return null;\n    }\n\n    var trackerargs = {\n      top: viewportDimensions.top + 3,\n      left: viewportDimensions.left + 3,\n      referenceIndexOffset: scaffoldHandler.cradleReferenceData.scrollImpliedItemIndexReference,\n      listsize: listsize,\n      styles: styles\n    };\n    return trackerargs;\n  }, [cradleState, viewportDimensions, referenceIndexOffset, listsize, styles]);\n  var cradleContent = contentHandler.content; // portalroot is the hidden portal component cache\n\n  return react_1[\"default\"].createElement(exports.CradlePortalsContext.Provider, {\n    value: handlersRef.current.portals\n  }, cradleStateRef.current != 'setup' && react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'portalroot',\n    style: portalrootstyle\n  }, react_1[\"default\"].createElement(portalhandler_1.PortalList, {\n    scrollerProps: handlersRef.current.portals.scrollerProps\n  })), cradleStateRef.current == 'repositioningRender' || cradleStateRef.current == 'repositioningContinuation' ? react_1[\"default\"].createElement(scrolltracker_1[\"default\"], {\n    top: scrollTrackerArgs.top,\n    left: scrollTrackerArgs.left,\n    offset: scrollTrackerArgs.referenceIndexOffset,\n    listsize: scrollTrackerArgs.listsize,\n    styles: scrollTrackerArgs.styles\n  }) : react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-axis',\n    style: cradleAxisStyle,\n    ref: axisCradleElementRef\n  }, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'breakline-head',\n    style: breaklineHeadStyle,\n    ref: headBreaklineCradleElementRef\n  }), react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'breakline-tail',\n    style: breaklineTailStyle,\n    ref: tailBreaklineCradleElementRef\n  }),  true ? react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-divider',\n    style: cradleDividerStyle\n  }) : 0, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'head',\n    ref: headCradleElementRef,\n    style: cradleHeadStyle\n  }, cradleStateRef.current != 'setup' ? cradleContent.headViewComponents : null), react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'tail',\n    ref: tailCradleElementRef,\n    style: cradleTailStyle\n  }, cradleStateRef.current != 'setup' ? cradleContent.tailViewComponents : null)));\n}; // Cradle\n// utilities\n\n\nvar getCradleHandlers = function getCradleHandlers(cradleParameters) {\n  var createHandler = function createHandler(handler) {\n    return new handler(cradleParameters);\n  };\n\n  return {\n    portalHandler: new portalhandler_1.PortalHandler(),\n    interruptHandler: createHandler(interrupthandler_1[\"default\"]),\n    scrollHandler: createHandler(scrollhandler_1[\"default\"]),\n    stateHandler: createHandler(statehandler_1[\"default\"]),\n    contentHandler: createHandler(contenthandler_1[\"default\"]),\n    scaffoldHandler: createHandler(scaffoldhandler_1[\"default\"]),\n    serviceHandler: createHandler(servicehandler_1[\"default\"]),\n    stylesHandler: createHandler(styleshandler_1[\"default\"])\n  };\n};\n\nexports[\"default\"] = Cradle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle.tsx\n");

/***/ }),

/***/ "./src/cradle/contentfunctions.tsx":
/*!*****************************************!*\
  !*** ./src/cradle/contentfunctions.tsx ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // cradlefunctions.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.deleteAndRerenderPortals = exports.allocateContentList = exports.getUICellShellList = exports.calcHeadAndTailChanges = exports.calcContentShift = exports.getShiftingInstruction = exports.getContentListRequirements = void 0;\n/******************************************************************************************\n ------------------------------------[ SUPPORTING FUNCTIONS ]------------------------------\n*******************************************************************************************/\n\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar cellshell_1 = __importDefault(__webpack_require__(/*! ../cellshell */ \"./src/cellshell.tsx\"));\n\nvar detect_browser_1 = __webpack_require__(/*! detect-browser */ \"./node_modules/detect-browser/es/index.js\");\n\nvar browser = (0, detect_browser_1.detect)(); // ======================[ for setCradleContent ]===========================\n\nvar getContentListRequirements = function getContentListRequirements(_a) {\n  var _b;\n\n  var // called from setCradleContent only\n  cradleInheritedProperties = _a.cradleInheritedProperties,\n      cradleInternalProperties = _a.cradleInternalProperties,\n      referenceoffset = _a.visibletargetindexoffset,\n      targetViewportOffset = _a.targetViewportOffset,\n      viewportElement = _a.viewportElement;\n  var orientation = cradleInheritedProperties.orientation,\n      cellHeight = cradleInheritedProperties.cellHeight,\n      cellWidth = cradleInheritedProperties.cellWidth,\n      runwaycount = cradleInheritedProperties.runwaycount,\n      gap = cradleInheritedProperties.gap,\n      padding = cradleInheritedProperties.padding,\n      listsize = cradleInheritedProperties.listsize;\n  var crosscount = cradleInternalProperties.crosscount,\n      cradleRowcount = cradleInternalProperties.cradleRowcount,\n      viewportRowcount = cradleInternalProperties.viewportRowcount; // reconcile axisReferenceIndex to crosscount context\n\n  var diff = referenceoffset % crosscount;\n  referenceoffset -= diff; // -------------[ calc basic inputs: cellLength, contentCount. ]----------\n\n  var cellLength, viewportlength;\n\n  if (orientation == 'vertical') {\n    cellLength = cellHeight + gap;\n    viewportlength = viewportElement.offsetHeight;\n  } else {\n    cellLength = cellWidth + gap;\n    viewportlength = viewportElement.offsetWidth;\n  } // let viewportrows = Math.floor(viewportlength / cellLength)\n\n\n  var viewportrows = viewportRowcount;\n  var cradleAvailableContentCount = cradleRowcount * crosscount; // -----------------------[ calc leadingitemcount, referenceoffset ]-----------------------\n\n  var runwayitemcount = runwaycount * crosscount;\n  runwayitemcount = Math.min(runwayitemcount, referenceoffset); // for list head\n  // -----------------------[ calc cradleFirstIndex ]------------------------\n  // leading edge\n\n  var cradleFirstIndex = referenceoffset - runwayitemcount; // ------------[ adjust cradleFirstIndex for underflow ]------------\n\n  diff = 0; // reset\n\n  var indexshift = 0; // adjustment if overshoot head\n\n  if (cradleFirstIndex < 0) {\n    diff = cradleFirstIndex;\n    indexshift = Math.floor(cradleFirstIndex / crosscount) * crosscount;\n    cradleFirstIndex += indexshift;\n  } // ------------[ adjust cradleFirstIndex and contentCount for listsize overflow ]------------\n\n\n  var axisPosOffset = targetViewportOffset % cellLength; // --------------------[ calc css positioning ]-----------------------\n\n  var targetrowoffset = Math.ceil(referenceoffset / crosscount);\n  var scrollblockOffset = targetrowoffset * cellLength + padding; // gap\n\n  var axisAdjustment;\n  var cradleActualContentCount = cradleAvailableContentCount;\n\n  if (targetrowoffset == 0) {\n    scrollblockOffset = 0;\n    axisPosOffset = 0; // padding\n\n    axisAdjustment = padding;\n  } else {\n    axisAdjustment = 0; //gap;\n\n    _b = adjustAxisOffsetForMaxRefIndex({\n      referenceoffset: referenceoffset,\n      axisPosOffset: axisPosOffset,\n      scrollblockOffset: scrollblockOffset,\n      targetrowoffset: targetrowoffset,\n      viewportlength: viewportlength,\n      listsize: listsize,\n      viewportrows: viewportrows,\n      crosscount: crosscount,\n      cellLength: cellLength,\n      padding: padding,\n      gap: gap,\n      cradleFirstIndex: cradleFirstIndex,\n      cradleAvailableContentCount: cradleAvailableContentCount\n    }), cradleFirstIndex = _b[0], cradleActualContentCount = _b[1], referenceoffset = _b[2], scrollblockOffset = _b[3], axisPosOffset = _b[4];\n  }\n\n  return {\n    cradleFirstIndex: cradleFirstIndex,\n    referenceoffset: referenceoffset,\n    cradleActualContentCount: cradleActualContentCount,\n    scrollblockOffset: scrollblockOffset,\n    axisPosOffset: axisPosOffset,\n    axisAdjustment: axisAdjustment\n  }; // summarize requirements message\n};\n\nexports.getContentListRequirements = getContentListRequirements;\n\nvar adjustAxisOffsetForMaxRefIndex = function adjustAxisOffsetForMaxRefIndex(_a) {\n  var listsize = _a.listsize,\n      crosscount = _a.crosscount,\n      cradleAvailableContentCount = _a.cradleAvailableContentCount,\n      cradleFirstIndex = _a.cradleFirstIndex,\n      referenceoffset = _a.referenceoffset,\n      targetrowoffset = _a.targetrowoffset,\n      scrollblockOffset = _a.scrollblockOffset,\n      axisPosOffset = _a.axisPosOffset,\n      viewportlength = _a.viewportlength,\n      viewportrows = _a.viewportrows,\n      cellLength = _a.cellLength,\n      padding = _a.padding,\n      gap = _a.gap;\n  var activelistitemcount = cradleFirstIndex + cradleAvailableContentCount;\n  var activelistrowcount = Math.ceil(activelistitemcount / crosscount);\n  var listRowcount = Math.ceil(listsize / crosscount);\n\n  if (activelistrowcount > listRowcount) {\n    var diffrows = activelistrowcount - listRowcount;\n    var diff = diffrows * crosscount;\n    cradleFirstIndex -= diff;\n    activelistrowcount -= diffrows;\n  } // let testlistrowcount = Math.ceil((cradleFirstIndex + contentCount + 1)/crosscount)\n\n\n  var cradleActualContentCount = cradleAvailableContentCount;\n\n  if (activelistrowcount == listRowcount) {\n    var diff = listsize % crosscount;\n\n    if (diff) {\n      cradleActualContentCount -= crosscount - diff;\n    }\n  }\n\n  var maxrefindexrowoffset = Math.ceil(listsize / crosscount) - viewportrows + 1; // console.log('targetrowoffset, maxrefindexrowoffset', targetrowoffset, maxrefindexrowoffset)\n\n  if (targetrowoffset > maxrefindexrowoffset) {\n    var diff = targetrowoffset - maxrefindexrowoffset;\n    targetrowoffset -= diff; // maxrefindexrowoffset\n\n    referenceoffset = targetrowoffset * crosscount;\n    scrollblockOffset = targetrowoffset * cellLength + padding;\n    axisPosOffset = viewportlength - (viewportrows - 1) * cellLength - gap;\n  }\n\n  return [cradleFirstIndex, cradleActualContentCount, referenceoffset, scrollblockOffset, axisPosOffset];\n}; // ======================[ for updateCradleContent ]===========================\n\n\nvar getShiftingInstruction = function getShiftingInstruction(_a) {\n  var isScrollingviewportforward = _a.isScrollingviewportforward,\n      breaklineEntries = _a.breaklineEntries;\n  var entries = breaklineEntries.filter(function (entry) {\n    var isIntersecting = entry.isIntersecting;\n    var breaklinename = entry.target.dataset.type;\n    var retval = !isIntersecting && isScrollingviewportforward && breaklinename == 'breakline-tail' || isIntersecting && !isScrollingviewportforward && breaklinename == 'breakline-head';\n    return retval;\n  });\n\n  if (entries.length > 1) {\n    console.log('SYSTEM ISSUE: MORE THAN ONE BREAKLINE ENTRY', breaklineEntries.length, breaklineEntries);\n  }\n\n  var entry = entries[0];\n  if (!entry) return 0;\n  var isIntersecting = entry.isIntersecting;\n  var breaklinename = entry.target.dataset.type;\n  var retval; // TODO: calculate the grid row count required to be shifted\n\n  if (!isIntersecting && isScrollingviewportforward && breaklinename == 'breakline-tail') {\n    return -1; // shift row to head\n  } else if (isIntersecting && !isScrollingviewportforward && breaklinename == 'breakline-head') {\n    return 1; // shift row to tail\n  } else {\n    return 0; // do not shift a row\n  }\n};\n\nexports.getShiftingInstruction = getShiftingInstruction; // TODO: fix cradleActualContentCount\n// A negative shift is toward the head, a positive shift is toward the tail\n// called only from updateCradleContent\n\nvar calcContentShift = function calcContentShift(_a) {\n  var _b, _c;\n\n  var shiftinginstruction = _a.shiftinginstruction,\n      cradleInheritedProperties = _a.cradleInheritedProperties,\n      cradleInternalProperties = _a.cradleInternalProperties,\n      cradleContent = _a.cradleContent,\n      cradleElements = _a.cradleElements,\n      viewportElement = _a.viewportElement;\n  var isScrollingviewportforward = shiftinginstruction < 0; // ------------------------[ initialize ]-----------------------\n\n  var gap = cradleInheritedProperties.gap,\n      orientation = cradleInheritedProperties.orientation,\n      cellHeight = cradleInheritedProperties.cellHeight,\n      cellWidth = cradleInheritedProperties.cellWidth,\n      listsize = cradleInheritedProperties.listsize,\n      // padding,\n  runwaycount = cradleInheritedProperties.runwaycount;\n  var axisElement = cradleElements.axisRef.current,\n      headElement = cradleElements.headRef.current,\n      tailElement = cradleElements.tailRef.current;\n  var cradlecontentlist = cradleContent.cradleModel,\n      headcontentlist = cradleContent.headModelComponents,\n      tailcontentlist = cradleContent.tailModelComponents;\n  var crosscount = cradleInternalProperties.crosscount,\n      cradleRowcount = cradleInternalProperties.cradleRowcount,\n      listRowcount = cradleInternalProperties.listRowcount,\n      viewportRowcount = cradleInternalProperties.viewportRowcount;\n  var BOD = false,\n      EOD = false; // beginning-of-data, end-of-data flags\n\n  var cellLength = (orientation == 'vertical' ? cellHeight : cellWidth) + gap;\n  var viewportaxisoffset, // the pixel distance between the viewport frame and the axis, toward the head\n  viewportlength;\n  var viewportheadgaplength = 0;\n  var viewporttailgaplength = 0;\n\n  if (orientation == 'vertical') {\n    viewportaxisoffset = axisElement.offsetTop - viewportElement.scrollTop;\n  } else {\n    // horizontal\n    viewportaxisoffset = axisElement.offsetLeft - viewportElement.scrollLeft;\n  }\n\n  if (!isScrollingviewportforward) {\n    // scrollviewportbackward, toward head\n    viewportheadgaplength = -(viewportaxisoffset - cellLength);\n  } else {\n    viewporttailgaplength = -viewportaxisoffset;\n  }\n\n  console.log('1. cellLength, viewportaxisoffset, viewportheadgaplength, viewporttailgaplength', cellLength, viewportaxisoffset, viewportheadgaplength, viewporttailgaplength); // -------[ 1. calculate the axis overshoot item & row counts, if any ]-------\n  // overshoot lengths are always positive\n\n  var headovershootrowcount = Math.floor(viewportheadgaplength / cellLength);\n  var tailovershootrowcount = Math.floor(viewporttailgaplength / cellLength);\n  var headovershootitemcount = headovershootrowcount * crosscount;\n  var tailovershootitemcount = tailovershootrowcount * crosscount; // -----------------[ 2. calculate item & row shift counts including overshoot ]-------------\n\n  /*\n      shift item count is the number of items the virtual cradle shifts, according to observer\n      shift negative closer to head, shift positive closer to tail\n      cradle reference is the first content item\n      axis reference is the first tail item\n  */\n\n  var headaddshiftitemcount = 0,\n      tailaddshiftitemcount = 0,\n      headaddshiftrowcount = 0,\n      tailaddshiftrowcount = 0;\n\n  if (!isScrollingviewportforward) {\n    // viewport moves toward tail, add tail items, shift positive\n    tailaddshiftitemcount = shiftinginstruction * crosscount; //shiftingintersections.length\n  } else {\n    // scrollviewportbackward, viewport toward head, add head items, shift negative\n    headaddshiftitemcount = -shiftinginstruction * crosscount; //shiftingintersections.length\n  }\n\n  console.log('2.a headaddshiftitemcount, tailaddshiftitemcount', headaddshiftitemcount, tailaddshiftitemcount);\n  console.log('2.b headovershootrowcount, headovershootitemcount, tailovershootrowcount, tailovershootitemcount', headovershootrowcount, headovershootitemcount, tailovershootrowcount, tailovershootitemcount); // negative value shifted toward head; positive value shifted toward tail\n  // one of the two expressions in the following line will be 0\n\n  var axisreferenceshiftitemcount = -(tailaddshiftitemcount - tailovershootitemcount) + (headaddshiftitemcount + headovershootitemcount);\n  var cradlereferenceshiftitemcount = axisreferenceshiftitemcount;\n  var cradlereferencerowshift = cradlereferenceshiftitemcount > 0 // could include partial row from shiftingintersections\n  ? Math.ceil(cradlereferenceshiftitemcount / crosscount) : Math.floor(cradlereferenceshiftitemcount / crosscount);\n  cradlereferenceshiftitemcount = Math.round(cradlereferencerowshift * crosscount);\n  var axisreferencerowshift = axisreferenceshiftitemcount > 0 // could include partial row from shiftingintersections\n  ? Math.ceil(axisreferenceshiftitemcount / crosscount) : Math.floor(axisreferenceshiftitemcount / crosscount);\n  axisreferenceshiftitemcount = Math.round(axisreferencerowshift * crosscount);\n  console.log('3. preliminary axisreferenceshiftitemcount, cradlereferenceshiftitemcount, axisreferencerowshift, cradlereferencerowshift', axisreferenceshiftitemcount, cradlereferenceshiftitemcount, axisreferencerowshift, cradlereferencerowshift); // ----------------[ 3. calc new cradle reference index and axis reference index ]-----------------\n\n  var previouscradlereferenceindex = ((_b = cradlecontentlist[0]) === null || _b === void 0 ? void 0 : _b.props.index) || 0;\n  var previouscradlerowoffset = Math.round(previouscradlereferenceindex / crosscount);\n  var previousaxisreferenceindex = ((_c = tailcontentlist[0]) === null || _c === void 0 ? void 0 : _c.props.index) || 0; // const previousaxisreferencerowoffset = Math.round(previousaxisreferenceindex/crosscount)\n\n  console.log('4. previouscradlereferenceindex, previouscradlerowoffset, previousaxisreferenceindex, cradleRowcount, listRowcount', previouscradlereferenceindex, previouscradlerowoffset, previousaxisreferenceindex, cradleRowcount, listRowcount); // computed shifted cradle end row, looking for overshoot\n\n  var rowovershoot;\n  var computedNextCradleEndrowOffset = previouscradlerowoffset + cradleRowcount + cradlereferencerowshift - 1;\n\n  if (isScrollingviewportforward) {\n    // scroll viewport toward tail, shift is positive, add to tail\n    rowovershoot = Math.max(0, computedNextCradleEndrowOffset - listRowcount); // overshoot amount \n  } else {\n    // scroll viewport backward, scroll viewport toward head, shift is negative, add to head\n    rowovershoot = Math.min(0, previouscradlerowoffset + cradlereferencerowshift);\n  }\n\n  if (rowovershoot) {\n    cradlereferencerowshift -= rowovershoot;\n    cradlereferenceshiftitemcount -= rowovershoot * crosscount;\n  }\n\n  console.log('5. rowovershoot, computedNextCradleEndrowOffset, cradlereferencerowshift, cradlereferenceshiftitemcount', rowovershoot, computedNextCradleEndrowOffset, cradlereferencerowshift, cradlereferenceshiftitemcount);\n  var proposedcradlereferenceindex = previouscradlereferenceindex + cradlereferenceshiftitemcount;\n  var proposedaxisreferenceindex = previousaxisreferenceindex + axisreferenceshiftitemcount;\n  console.log('6. proposedcradlereferenceindex, proposedaxisreferenceindex', proposedcradlereferenceindex, proposedaxisreferenceindex);\n  var runwayrows = (proposedaxisreferenceindex - proposedcradlereferenceindex) / crosscount;\n\n  if (runwayrows < runwaycount) {\n    var diff = runwaycount - runwayrows;\n    proposedcradlereferenceindex -= diff * crosscount;\n  }\n\n  console.log('6.b proposedcradlereferenceindex adjusted for runwaycount; runwayrows', proposedcradlereferenceindex, runwayrows);\n\n  if (proposedcradlereferenceindex < 0) {\n    cradlereferenceshiftitemcount += proposedcradlereferenceindex;\n    cradlereferenceshiftitemcount = Math.max(0, cradlereferenceshiftitemcount);\n    var x = cradlereferencerowshift;\n    cradlereferencerowshift = cradlereferenceshiftitemcount / crosscount;\n    var diff = x - cradlereferencerowshift;\n    proposedcradlereferenceindex = 0;\n    computedNextCradleEndrowOffset += diff;\n  }\n\n  if (proposedaxisreferenceindex < 0) {\n    axisreferenceshiftitemcount += proposedaxisreferenceindex;\n    axisreferencerowshift = axisreferenceshiftitemcount / crosscount;\n    proposedaxisreferenceindex = 0;\n  }\n\n  console.log('6.c revised cradlereferenceshiftitemcount, cradlereferencerowshift, proposedcradlereferenceindex, computedNextCradleEndrowOffset', cradlereferenceshiftitemcount, cradlereferencerowshift, proposedcradlereferenceindex, computedNextCradleEndrowOffset);\n  console.log('6.d revised axisreferenceshiftitemcount, axisreferencerowshift, proposedaxisreferenceindex', axisreferenceshiftitemcount, axisreferencerowshift, proposedaxisreferenceindex);\n\n  if (computedNextCradleEndrowOffset >= listRowcount) {\n    EOD = true;\n  }\n\n  if (previouscradlerowoffset + cradlereferencerowshift <= 0) {\n    // undershoot, past start of dataset\n    BOD = true;\n  }\n\n  console.log('7. EOD, BOD', EOD, BOD); // -------------[ 4. calculate new axis pixel position ]------------------\n\n  var axisposshift = axisreferencerowshift * cellLength;\n  var newaxisposoffset = viewportaxisoffset + axisposshift; // ---------------------[ 5. return required values ]-------------------\n\n  var partialrowfreespaces = cradlecontentlist.length % crosscount;\n  var partialrowitems = partialrowfreespaces ? crosscount - partialrowfreespaces : 0;\n  var cradleAvailableContentCount = cradlecontentlist.length + partialrowitems; // cradleRowcount * crosscount\n\n  var newCradleActualContentCount = Math.min(cradleAvailableContentCount, listsize - proposedcradlereferenceindex);\n  var newheadcount, newtailcount, headchangecount, tailchangecount;\n  newheadcount = proposedaxisreferenceindex - proposedcradlereferenceindex;\n  newtailcount = newCradleActualContentCount - newheadcount;\n  return [proposedcradlereferenceindex, cradlereferenceshiftitemcount, proposedaxisreferenceindex, axisreferenceshiftitemcount, newaxisposoffset, newCradleActualContentCount, headchangecount, tailchangecount];\n};\n\nexports.calcContentShift = calcContentShift;\n\nvar calcHeadAndTailChanges = function calcHeadAndTailChanges(_a) {\n  var cradleInheritedProperties = _a.cradleInheritedProperties,\n      cradleInternalProperties = _a.cradleInternalProperties,\n      cradleContent = _a.cradleContent,\n      cradleshiftcount = _a.cradleshiftcount,\n      isScrollingviewportforward = _a.isScrollingviewportforward,\n      cradleFirstIndex = _a.cradleFirstIndex;\n  var listsize = cradleInheritedProperties.listsize;\n  var headcontent = cradleContent.headModelComponents;\n  var tailcontent = cradleContent.tailModelComponents;\n  var crosscount = cradleInternalProperties.crosscount,\n      cradleRowcount = cradleInternalProperties.cradleRowcount;\n  cradleshiftcount = Math.abs(cradleshiftcount);\n  var rowshiftcount = Math.ceil(cradleshiftcount / crosscount); //+ boundaryrowcount\n\n  var headrowcount, tailrowcount;\n  headrowcount = Math.ceil(headcontent.length / crosscount);\n  tailrowcount = Math.ceil(tailcontent.length / crosscount);\n  var pendingcontentoffset; // lookahead to new cradleFirstIndex\n\n  var headchangecount, tailchangecount; // the output instructions for getUICellShellList\n  // anticipaate add to one end, clip from the other        \n\n  var additemcount = 0;\n  var cliprowcount = 0,\n      clipitemcount = 0;\n\n  if (isScrollingviewportforward) {\n    // clip from head; add to tail; scroll forward tail is direction of scroll\n    // adjust clipitemcount\n    if (headrowcount + rowshiftcount > cradleInheritedProperties.runwaycount) {\n      var rowdiff = headrowcount + rowshiftcount - cradleInheritedProperties.runwaycount;\n      cliprowcount = rowdiff;\n      clipitemcount = cliprowcount * crosscount;\n    }\n\n    additemcount = clipitemcount; // maintain constant cradle count\n\n    pendingcontentoffset = cradleFirstIndex + clipitemcount; // after clip\n\n    var proposedtailindex = pendingcontentoffset + cradleRowcount * crosscount - 1; // modelcontentlist.length - 1\n    // adkjust changes for list boundaries\n\n    if (proposedtailindex > listsize - 1) {\n      var diffitemcount = proposedtailindex - (listsize - 1); // items outside range\n\n      additemcount -= diffitemcount; // adjust the addcontent accordingly\n\n      var diffrows = Math.floor(diffitemcount / crosscount); // number of full rows to leave in place\n\n      var diffrowitems = diffrows * crosscount; // derived number of items to leave in place\n\n      clipitemcount -= diffrowitems; // apply adjustment to netshift\n\n      if (additemcount <= 0) {\n        // nothing to do\n        additemcount = 0;\n      }\n\n      if (clipitemcount <= 0) {\n        clipitemcount = 0;\n      }\n    }\n\n    headchangecount = clipitemcount == 0 ? 0 : -clipitemcount;\n    tailchangecount = additemcount;\n  } else {\n    // scroll viewport backward, in direction of head; clip from tail, add to head\n    var intersectionindexes = []; // headcount will be less than minimum (runwaycount), so a shift can be accomplished[]\n\n    if (headrowcount - rowshiftcount < cradleInheritedProperties.runwaycount) {\n      // calculate clip for tail\n      var rowshortfall = cradleInheritedProperties.runwaycount - (headrowcount - rowshiftcount);\n      cliprowcount = rowshortfall;\n      var tailrowitemcount = tailcontent.length % crosscount;\n      if (tailrowitemcount == 0) tailrowitemcount = crosscount;\n      clipitemcount = tailrowitemcount;\n\n      if (tailrowcount > 1) {\n        if (cliprowcount > tailrowcount) {\n          cliprowcount = tailrowcount;\n        }\n\n        if (cliprowcount > 1) {\n          clipitemcount += (cliprowcount - 1) * crosscount;\n        }\n      } // compenstate with additemcount\n\n\n      additemcount = cliprowcount * crosscount;\n    }\n\n    var proposedindexoffset = cradleFirstIndex - additemcount;\n\n    if (proposedindexoffset < 0) {\n      var diffitemcount = -proposedindexoffset;\n      var diffrows = Math.ceil(diffitemcount / crosscount); // number of full rows to leave in place\n\n      var diffrowitems = diffrows * crosscount;\n      additemcount -= diffitemcount;\n      clipitemcount -= diffrowitems;\n\n      if (additemcount <= 0) {\n        additemcount = 0;\n      }\n\n      if (clipitemcount <= 0) {\n        clipitemcount = 0;\n      }\n    }\n\n    headchangecount = additemcount;\n    tailchangecount = clipitemcount == 0 ? 0 : -clipitemcount;\n  }\n\n  return [headchangecount, tailchangecount];\n};\n\nexports.calcHeadAndTailChanges = calcHeadAndTailChanges; // =====================[ shared by both setCradleContent and updateCradleContent ]====================\n// update content\n// adds itemshells at end of contentlist according to headindexcount and tailindescount,\n// or if indexcount values are <0 removes them.\n\nvar getUICellShellList = function getUICellShellList(_a) {\n  var cradleInheritedProperties = _a.cradleInheritedProperties,\n      cradleInternalProperties = _a.cradleInternalProperties,\n      cradleActualContentCount = _a.cradleActualContentCount,\n      cradleFirstIndex = _a.cradleFirstIndex,\n      headchangecount = _a.headchangecount,\n      tailchangecount = _a.tailchangecount,\n      contentlist = _a.localContentList,\n      callbacks = _a.callbacks,\n      // observer,\n  instanceIdCounterRef = _a.instanceIdCounterRef;\n  var crosscount = cradleInternalProperties.crosscount,\n      cradleRowcount = cradleInternalProperties.cradleRowcount;\n\n  var localContentlist = __spreadArray([], contentlist, true);\n\n  var tailindexoffset = cradleFirstIndex + contentlist.length; // let headindexoffset = cradleFirstIndex\n  // let returnContentlist\n\n  var headContentlist = [];\n  var topconstraint = cradleFirstIndex - headchangecount,\n      bottomconstraint = cradleFirstIndex - headchangecount + (cradleActualContentCount + 1); // TODO: validate \"+1\"\n\n  var deletedtailitems = [],\n      deletedheaditems = [];\n\n  if (headchangecount >= 0) {\n    for (var index = cradleFirstIndex - headchangecount; index < cradleFirstIndex; index++) {\n      if (!(index >= topconstraint && index <= bottomconstraint)) {\n        continue;\n      }\n\n      headContentlist.push(acquireItem({\n        index: index,\n        cradleInheritedProperties: cradleInheritedProperties,\n        // observer, \n        callbacks: callbacks,\n        instanceIdCounterRef: instanceIdCounterRef\n      }));\n    }\n  } else {\n    deletedheaditems = localContentlist.splice(0, -headchangecount);\n  }\n\n  var tailContentlist = [];\n\n  if (tailchangecount >= 0) {\n    for (var index = tailindexoffset; index < tailindexoffset + tailchangecount; index++) {\n      if (!(index >= topconstraint && index <= bottomconstraint)) {\n        continue;\n      }\n\n      tailContentlist.push(acquireItem({\n        index: index,\n        cradleInheritedProperties: cradleInheritedProperties,\n        // observer, \n        callbacks: callbacks,\n        instanceIdCounterRef: instanceIdCounterRef\n      }));\n    }\n  } else {\n    deletedtailitems = localContentlist.splice(tailchangecount, -tailchangecount);\n  }\n\n  var deleteditems = deletedheaditems.concat(deletedtailitems);\n  var componentList = headContentlist.concat(localContentlist, tailContentlist);\n  return [componentList, deleteditems];\n};\n\nexports.getUICellShellList = getUICellShellList; // butterfly model. Leading (head) all or partially hidden; tail, visible plus following hidden\n\nvar allocateContentList = function allocateContentList(_a) {\n  var _b;\n\n  var contentlist = _a.contentlist,\n      // of cradle, in items (React components)\n  axisreferenceindex = _a.axisreferenceindex;\n  var offsetindex = (_b = contentlist[0]) === null || _b === void 0 ? void 0 : _b.props.index; // TODO: Cannot read property 'props' of undefined\n\n  var headitemcount;\n  headitemcount = axisreferenceindex - offsetindex;\n  var headlist = contentlist.slice(0, headitemcount);\n  var taillist = contentlist.slice(headitemcount);\n  return [headlist, taillist];\n};\n\nexports.allocateContentList = allocateContentList;\n\nvar deleteAndRerenderPortals = function deleteAndRerenderPortals(portalHandler, deleteList) {\n  for (var _i = 0, deleteList_1 = deleteList; _i < deleteList_1.length; _i++) {\n    var item = deleteList_1[_i];\n    portalHandler.deletePortal(item.props.index);\n  }\n\n  if (deleteList.length) portalHandler.renderPortalList();\n};\n\nexports.deleteAndRerenderPortals = deleteAndRerenderPortals; // =====================[ acquire item support ]======================\n\nvar acquireItem = function acquireItem(_a) {\n  var index = _a.index,\n      cradleInheritedProperties = _a.cradleInheritedProperties,\n      // observer, \n  callbacks = _a.callbacks,\n      instanceIdCounterRef = _a.instanceIdCounterRef;\n  var instanceID = instanceIdCounterRef.current++;\n  return emitItem({\n    index: index,\n    cradleInheritedProperties: cradleInheritedProperties,\n    // observer, \n    callbacks: callbacks,\n    instanceID: instanceID\n  });\n};\n\nvar emitItem = function emitItem(_a) {\n  var index = _a.index,\n      cradleInheritedProperties = _a.cradleInheritedProperties,\n      // observer, \n  callbacks = _a.callbacks,\n      instanceID = _a.instanceID;\n  var orientation = cradleInheritedProperties.orientation,\n      cellHeight = cradleInheritedProperties.cellHeight,\n      cellWidth = cradleInheritedProperties.cellWidth,\n      getItem = cradleInheritedProperties.getItem,\n      placeholder = cradleInheritedProperties.placeholder,\n      listsize = cradleInheritedProperties.listsize,\n      scrollerName = cradleInheritedProperties.scrollerName,\n      scrollerID = cradleInheritedProperties.scrollerID;\n  return react_1[\"default\"].createElement(cellshell_1[\"default\"], {\n    key: index,\n    orientation: orientation,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    index: index,\n    callbacks: callbacks,\n    getItem: getItem,\n    listsize: listsize,\n    placeholder: placeholder,\n    instanceID: instanceID,\n    scrollerName: scrollerName,\n    scrollerID: scrollerID\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contentfunctions.tsx\n");

/***/ }),

/***/ "./src/cradle/contenthandler.tsx":
/*!***************************************!*\
  !*** ./src/cradle/contenthandler.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(" // contenthandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar contentfunctions_1 = __webpack_require__(/*! ./contentfunctions */ \"./src/cradle/contentfunctions.tsx\");\n\nvar ContentHandler =\n/** @class */\nfunction () {\n  function ContentHandler(cradleParameters) {\n    var _this = this;\n\n    this.content = {\n      cradleModel: null,\n      headModelComponents: null,\n      tailModelComponents: null,\n      headViewComponents: [],\n      tailViewComponents: []\n    };\n    this.itemElements = new Map();\n    this.instanceIdCounterRef = {\n      current: 0\n    };\n    this.instanceIdMap = new Map();\n    this._previousScrollForward = undefined; // Two public methods - setCradleContent and updateCradleContent\n    // reset cradle, including allocation between head and tail parts of the cradle\n    // called only from cradle preparerender event\n    // ==========================[ SET CONTENT initially, or after reposition ]===========================\n    // TODO: last row is sometimes left off with reposition\n\n    this.setCradleContent = function (cradleState) {\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var portalHandler = _this.cradleParameters.handlersRef.current.portals;\n      var cradleInternalProperties = _this.cradleParameters.CradleInternalPropertiesRef.current;\n      var scrollHandler = _this.cradleParameters.handlersRef.current.scroll;\n      var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffold;\n      var stateHandler = _this.cradleParameters.handlersRef.current.state;\n      var serviceHandler = _this.cradleParameters.handlersRef.current.service; // const interruptHandler = this.cradleParameters.handlersRef.current.interrupts\n      // const cradleData = this.cradleParameters.cradleInheritedPropertiesRef.current\n      // if (viewportInterruptProperties.index == 6) {\n      //     console.log('SETTING content - cradleState, cradleData in setCradleContent',\n      // cradleState, cradleData)\n      // }\n\n      var viewportElement = viewportInterruptProperties.elementref.current;\n      var visibletargetindexoffset = scaffoldHandler.cradleReferenceData.nextItemIndexReference;\n      var visibletargetscrolloffset = scaffoldHandler.cradleReferenceData.nextCradlePosOffset;\n      var cellHeight = cradleInheritedProperties.cellHeight,\n          cellWidth = cradleInheritedProperties.cellWidth,\n          orientation = cradleInheritedProperties.orientation,\n          runwaycount = cradleInheritedProperties.runwaycount,\n          gap = cradleInheritedProperties.gap,\n          padding = cradleInheritedProperties.padding,\n          listsize = cradleInheritedProperties.listsize;\n      var cradleRowcount = cradleInternalProperties.cradleRowcount,\n          crosscount = cradleInternalProperties.crosscount,\n          viewportRowcount = cradleInternalProperties.viewportRowcount;\n\n      if (cradleState == 'doreposition') {\n        visibletargetscrolloffset = visibletargetindexoffset == 0 ? padding : gap;\n      }\n\n      var localContentList = [];\n      var cradleContent = _this.content;\n\n      var _a = (0, contentfunctions_1.getContentListRequirements)({\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        visibletargetindexoffset: visibletargetindexoffset,\n        targetViewportOffset: visibletargetscrolloffset,\n        viewportElement: viewportInterruptProperties.elementref.current\n      }),\n          cradleFirstIndex = _a.cradleFirstIndex,\n          referenceoffset = _a.referenceoffset,\n          cradleActualContentCount = _a.cradleActualContentCount,\n          scrollblockOffset = _a.scrollblockOffset,\n          axisPosOffset = _a.axisPosOffset,\n          axisAdjustment = _a.axisAdjustment; // console.log('cradleActualContentCount from getContentListRequirements',cradleActualContentCount)\n      // if (viewportInterruptProperties.index == 6) {\n      //     console.log('SET index, cradleActualContentCount', viewportInterruptProperties.index,cradleActualContentCount)\n      // }\n      // returns content constrained by cradleRowcount\n\n\n      var _b = (0, contentfunctions_1.getUICellShellList)({\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        cradleActualContentCount: cradleActualContentCount,\n        cradleFirstIndex: cradleFirstIndex,\n        headchangecount: 0,\n        tailchangecount: cradleActualContentCount,\n        localContentList: localContentList,\n        callbacks: _this.internalCallbacksRef.current,\n        // observer: interruptHandler.cellIntersect.observer,\n        instanceIdCounterRef: _this.instanceIdCounterRef\n      }),\n          childlist = _b[0],\n          deleteditems = _b[1];\n\n      (0, contentfunctions_1.deleteAndRerenderPortals)(portalHandler, deleteditems);\n\n      var _c = (0, contentfunctions_1.allocateContentList)({\n        contentlist: childlist,\n        axisreferenceindex: referenceoffset\n      }),\n          headcontentlist = _c[0],\n          tailcontentlist = _c[1];\n\n      if (headcontentlist.length == 0) {\n        axisPosOffset = padding;\n      }\n\n      cradleContent.cradleModel = childlist;\n      cradleContent.headModelComponents = headcontentlist;\n      cradleContent.tailModelComponents = tailcontentlist;\n      scaffoldHandler.cradleReferenceData.scrollImpliedItemIndexReference = referenceoffset;\n      scaffoldHandler.cradleReferenceData.scrollImpliedCradlePosOffset = axisPosOffset;\n      scaffoldHandler.cradleReferenceData.nextItemIndexReference = referenceoffset;\n      scaffoldHandler.cradleReferenceData.nextCradlePosOffset = axisPosOffset;\n\n      if (serviceHandler.serviceCalls.referenceIndexCallbackRef.current) {\n        var cstate = cradleState; // if (cstate == 'setreload') cstate = 'reload'\n\n        serviceHandler.serviceCalls.referenceIndexCallbackRef.current(scaffoldHandler.cradleReferenceData.nextItemIndexReference, 'setCradleContent', cstate);\n      }\n\n      var cradleElements = scaffoldHandler.elements; //cradleElementsRef.current\n\n      scaffoldHandler.cradleReferenceData.blockScrollPos = scrollblockOffset - axisPosOffset; // console.log('setting blockScrollPos in setCradleContent: blockScrollPos, scrollblockOffset, axisPosOffset',\n      //     scaffoldHandler.cradleReferenceData.blockScrollPos, scrollblockOffset, axisPosOffset)\n\n      if (orientation == 'vertical') {\n        scaffoldHandler.cradleReferenceData.blockScrollProperty = 'scrollTop'; // scaffoldHandler.cradleReferenceData.blockScrollPos = viewportElement.scrollTop\n\n        cradleElements.axisRef.current.style.top = scrollblockOffset + axisAdjustment + 'px';\n        cradleElements.axisRef.current.style.left = 'auto';\n        cradleElements.headRef.current.style.paddingBottom = headcontentlist.length ? cradleInheritedProperties.gap + 'px' : 0;\n      } else {\n        // orientation = 'horizontal'\n        scaffoldHandler.cradleReferenceData.blockScrollProperty = 'scrollLeft'; // scaffoldHandler.cradleReferenceData.blockScrollPos = viewportElement.scrollLeft\n\n        cradleElements.axisRef.current.style.top = 'auto';\n        cradleElements.axisRef.current.style.left = scrollblockOffset + axisAdjustment + 'px';\n        cradleElements.headRef.current.style.paddingRight = headcontentlist.length ? cradleInheritedProperties.gap + 'px' : 0;\n      }\n    }; // =============================[ UPDATE through scroll ]===============================\n\n\n    this.updateCradleContent = function (breaklineEntries, source) {\n      // console.log('updateCradleContent', source, breaklineEntries )\n      var _a;\n\n      if (source === void 0) {\n        source = 'notifications';\n      } // ----------------------[ 1. data assembly ]-------------------------\n      // viewport\n\n\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var viewportElement = viewportInterruptProperties.elementref.current;\n\n      if (!viewportElement) {\n        // not mounted; return\n        return;\n      } // cradle properties\n\n\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var cradleInternalProperties = _this.cradleParameters.CradleInternalPropertiesRef.current; // handler support\n\n      var _b = _this.cradleParameters.handlersRef.current,\n          portalHandler = _b.portals,\n          scrollHandler = _b.scroll,\n          scaffoldHandler = _b.scaffold,\n          stateHandler = _b.state; // scroll data\n\n      var scrollOffset;\n\n      if (cradleInheritedProperties.orientation == 'vertical') {\n        scrollOffset = viewportElement.scrollTop;\n      } else {\n        scrollOffset = viewportElement.scrollLeft;\n      }\n\n      if (scrollOffset < 0) {\n        // for Safari elastic bounce at top of scroll\n        return;\n      }\n\n      var scrollPositions = scrollHandler.scrollPositions;\n      var isScrollingviewportforward; // if (scrollPositions.current == scrollPositions.previous) { // edge case \n      //     isScrollingviewportforward = this._previousScrollForward\n      // } else {\n\n      isScrollingviewportforward = scrollPositions.currentupdate > scrollPositions.previousupdate;\n      _this._previousScrollForward = isScrollingviewportforward; // }\n      // if (isScrollingviewportforward === undefined) {\n      //     console.log('isScrollingviewportforward === undefined')\n      //     return // init call\n      // }\n      // cradle scaffold and contained data\n\n      var cradleElements = scaffoldHandler.elements;\n      var cradleContent = _this.content;\n      var itemElements = _this.itemElements;\n      var modelcontentlist = cradleContent.cradleModel;\n      var cradleFirstIndex = modelcontentlist[0].props.index; // --------------------[ 2. get shifting instruction ]-----------------------\n\n      var shiftinginstruction = (0, contentfunctions_1.getShiftingInstruction)({\n        isScrollingviewportforward: isScrollingviewportforward,\n        breaklineEntries: breaklineEntries\n      });\n      console.log('shiftinginstruction', shiftinginstruction);\n      if (shiftinginstruction == 0) return; // console.log('returning for DEBUG; isScrollingviewportforward, shiftinginstruction',\n      //     isScrollingviewportforward,shiftinginstruction )\n      // return; // *DEBUG*\n\n      var shiftingintersections = []; // if (breaklineEntries.length) {\n      //     shiftingintersections = isolateShiftingIntersections({\n      //         isScrollingviewportforward,\n      //         intersections:breaklineEntries,\n      //         cradleContent,\n      //         cellObserverThreshold:cradleInternalProperties.cellObserverThreshold,\n      //     })\n      //     // console.log('SHIFTING intersections',shiftingintersections)\n      // }\n      // --------------------------------[ 3. Calculate shifts ]-------------------------------\n\n      var _c = (0, contentfunctions_1.calcContentShift)({\n        shiftinginstruction: shiftinginstruction,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        cradleContent: cradleContent,\n        cradleElements: cradleElements,\n        viewportElement: viewportElement\n      }),\n          cradlereferenceindex = _c[0],\n          cradleitemshift = _c[1],\n          axisreferenceindex = _c[2],\n          axisitemshift = _c[3],\n          axisposoffset = _c[4],\n          newCradleActualContentCount = _c[5],\n          headchange = _c[6],\n          tailchange = _c[7]; // const [\n      //     cradlereferenceindex, \n      //     cradleitemshift, \n      //     axisreferenceindex, \n      //     axisitemshift, \n      //     axisposoffset, \n      //     newCradleActualContentCount,\n      //     headchange,\n      //     tailchange,\n      // ] = calcContentShifts({\n      //     cradleInheritedProperties,\n      //     cradleInternalProperties,\n      //     cradleElements,\n      //     cradleContent,\n      //     viewportElement,\n      //     // itemElements,\n      //     shiftingintersections,\n      //     isScrollingviewportforward,\n      //     // viewportInterruptProperties,\n      // })\n\n\n      if (axisitemshift == 0 && cradleitemshift == 0) return; // ------------------[ 4. calculate head and tail consolidated cradle content changes ]-----------------\n      // the number of items to add to and clip from the contentlist\n      // negative number is clip; positive number is add\n\n      var _d = (0, contentfunctions_1.calcHeadAndTailChanges)({\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        cradleContent: cradleContent,\n        cradleshiftcount: cradleitemshift,\n        isScrollingviewportforward: isScrollingviewportforward,\n        cradleFirstIndex: cradleFirstIndex\n      }),\n          headchangecount = _d[0],\n          tailchangecount = _d[1]; // ----------------------------------[ 5. reconfigure cradle content ]--------------------------\n      // collect modified content\n\n\n      var localContentList,\n          deletedContentItems = [];\n\n      if (headchangecount || tailchangecount) {\n        // TODO: apparently headchangecount of -0 fails test, should be fixed\n        _a = (0, contentfunctions_1.getUICellShellList)({\n          cradleInheritedProperties: cradleInheritedProperties,\n          cradleInternalProperties: cradleInternalProperties,\n          cradleActualContentCount: newCradleActualContentCount,\n          localContentList: modelcontentlist,\n          headchangecount: headchangecount,\n          tailchangecount: tailchangecount,\n          cradleFirstIndex: cradleFirstIndex,\n          // observer: interruptHandler.cellIntersect.observer,\n          callbacks: _this.internalCallbacksRef.current,\n          instanceIdCounterRef: _this.instanceIdCounterRef\n        }), localContentList = _a[0], deletedContentItems = _a[1];\n      } else {\n        localContentList = modelcontentlist;\n      }\n\n      (0, contentfunctions_1.deleteAndRerenderPortals)(portalHandler, deletedContentItems); // ----------------------------------[ 7. allocate cradle content ]--------------------------\n\n      var _e = (0, contentfunctions_1.allocateContentList)({\n        contentlist: localContentList,\n        axisreferenceindex: axisreferenceindex\n      }),\n          headcontent = _e[0],\n          tailcontent = _e[1];\n\n      cradleContent.cradleModel = localContentList;\n      cradleContent.headViewComponents = cradleContent.headModelComponents = headcontent;\n      cradleContent.tailViewComponents = cradleContent.tailModelComponents = tailcontent; // -------------------------------[ 8. set css changes ]-------------------------\n\n      scrollHandler.updateBlockScrollPos();\n\n      if (axisposoffset !== undefined) {\n        // scrollHandler.updateBlockScrollPos()\n        if (cradleInheritedProperties.orientation == 'vertical') {\n          // scaffoldHandler.cradleReferenceData.blockScrollPos = viewportElement.scrollTop\n          // scaffoldHandler.cradleReferenceData.blockScrollProperty = 'scrollTop'\n          cradleElements.axisRef.current.style.top = viewportElement.scrollTop + axisposoffset + 'px';\n          cradleElements.axisRef.current.style.left = 'auto';\n          cradleElements.headRef.current.style.paddingBottom = headcontent.length ? cradleInheritedProperties.gap + 'px' : 0;\n        } else {\n          // scaffoldHandler.cradleReferenceData.blockScrollPos = viewportElement.scrollLeft\n          // scaffoldHandler.cradleReferenceData.blockScrollProperty = 'scrollLeft'\n          cradleElements.axisRef.current.style.top = 'auto';\n          cradleElements.axisRef.current.style.left = viewportElement.scrollLeft + axisposoffset + 'px';\n          cradleElements.headRef.current.style.paddingRight = headcontent.length ? cradleInheritedProperties.gap + 'px' : 0;\n        }\n      }\n\n      scaffoldHandler.cradleReferenceData.scrollImpliedItemIndexReference = axisreferenceindex;\n      scaffoldHandler.cradleReferenceData.scrollImpliedCradlePosOffset = axisposoffset;\n      scaffoldHandler.cradleReferenceData.nextItemIndexReference = axisreferenceindex;\n      scaffoldHandler.cradleReferenceData.nextCradlePosOffset = axisposoffset;\n      stateHandler.setCradleState('renderupdatedcontent');\n    };\n\n    this.cradleParameters = cradleParameters;\n    this.internalCallbacksRef = cradleParameters.internalCallbacksRef;\n  }\n\n  return ContentHandler;\n}();\n\nexports[\"default\"] = ContentHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFBYyxDQUFDUSxPQUFmLENBQXVCdkUsT0FBdkIsQ0FBK0JvRSxLQUEvQixDQUFxQ0ssWUFBckMsR0FBb0Q2QixXQUFXLENBQUM3QyxNQUFaLEdBQW1CbkQseUJBQXlCLENBQUN5QixHQUExQixHQUFnQyxJQUFuRCxHQUF3RCxDQUE1RztBQUVIO0FBRUo7O0FBRURoQixxQkFBZSxDQUFDUyxtQkFBaEIsQ0FBb0NrQywrQkFBcEMsR0FBc0VKLGtCQUF0RTtBQUNBdkMscUJBQWUsQ0FBQ1MsbUJBQWhCLENBQW9DbUMsNEJBQXBDLEdBQW1Fb0MsYUFBbkU7QUFFQWhGLHFCQUFlLENBQUNTLG1CQUFoQixDQUFvQ0Msc0JBQXBDLEdBQTZENkIsa0JBQTdEO0FBQ0F2QyxxQkFBZSxDQUFDUyxtQkFBaEIsQ0FBb0NHLG1CQUFwQyxHQUEwRG9FLGFBQTFEO0FBRUE5RSxrQkFBWSxDQUFDd0YsY0FBYixDQUE0QixzQkFBNUI7QUFFSCxLQXZPTTs7QUEvS0wsU0FBS2hILGdCQUFMLEdBQXdCQSxnQkFBeEI7QUFFQSxTQUFLd0Qsb0JBQUwsR0FBNEJ4RCxnQkFBZ0IsQ0FBQ3dELG9CQUE3QztBQUVGOztBQW9aSjtBQUFDLENBNVpEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9jcmFkbGUvY29udGVudGhhbmRsZXIudHN4P2E4OWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29udGVudGhhbmRsZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMjEgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuaW1wb3J0IHsgXG4gICAgZ2V0VUlDZWxsU2hlbGxMaXN0LCBcbiAgICBjYWxjSGVhZEFuZFRhaWxDaGFuZ2VzLFxuICAgIGNhbGNDb250ZW50U2hpZnQsXG4gICAgZ2V0Q29udGVudExpc3RSZXF1aXJlbWVudHMsXG4gICAgLy8gaXNvbGF0ZVNoaWZ0aW5nSW50ZXJzZWN0aW9ucyxcbiAgICBnZXRTaGlmdGluZ0luc3RydWN0aW9uLFxuICAgIGFsbG9jYXRlQ29udGVudExpc3QsXG4gICAgZGVsZXRlQW5kUmVyZW5kZXJQb3J0YWxzLFxuXG59IGZyb20gJy4vY29udGVudGZ1bmN0aW9ucydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGVudEhhbmRsZXIge1xuXG4gICBjb25zdHJ1Y3RvcihjcmFkbGVQYXJhbWV0ZXJzKSB7XG5cbiAgICAgIHRoaXMuY3JhZGxlUGFyYW1ldGVycyA9IGNyYWRsZVBhcmFtZXRlcnNcblxuICAgICAgdGhpcy5pbnRlcm5hbENhbGxiYWNrc1JlZiA9IGNyYWRsZVBhcmFtZXRlcnMuaW50ZXJuYWxDYWxsYmFja3NSZWZcblxuICAgfVxuXG4gICBwdWJsaWMgY29udGVudCA9IHtcblxuICAgICAgY3JhZGxlTW9kZWw6IG51bGwsXG4gICAgICBoZWFkTW9kZWxDb21wb25lbnRzOiBudWxsLFxuICAgICAgdGFpbE1vZGVsQ29tcG9uZW50czogbnVsbCxcbiAgICAgIGhlYWRWaWV3Q29tcG9uZW50czogW10sXG4gICAgICB0YWlsVmlld0NvbXBvbmVudHM6IFtdLFxuXG4gICAgfVxuXG4gICAgcHVibGljIGl0ZW1FbGVtZW50cyA9IG5ldyBNYXAoKVxuXG4gICAgcHJpdmF0ZSBjcmFkbGVQYXJhbWV0ZXJzXG5cbiAgICBwcml2YXRlIGluc3RhbmNlSWRDb3VudGVyUmVmID0ge1xuICAgICAgIGN1cnJlbnQ6MFxuICAgIH1cbiAgICBwcml2YXRlIGluc3RhbmNlSWRNYXAgPSBuZXcgTWFwKClcblxuICAgIHByaXZhdGUgX3ByZXZpb3VzU2Nyb2xsRm9yd2FyZCA9IHVuZGVmaW5lZFxuXG4gICAgcHJpdmF0ZSBpbnRlcm5hbENhbGxiYWNrc1JlZlxuXG4gICAgLy8gVHdvIHB1YmxpYyBtZXRob2RzIC0gc2V0Q3JhZGxlQ29udGVudCBhbmQgdXBkYXRlQ3JhZGxlQ29udGVudFxuXG4gICAgLy8gcmVzZXQgY3JhZGxlLCBpbmNsdWRpbmcgYWxsb2NhdGlvbiBiZXR3ZWVuIGhlYWQgYW5kIHRhaWwgcGFydHMgb2YgdGhlIGNyYWRsZVxuICAgIC8vIGNhbGxlZCBvbmx5IGZyb20gY3JhZGxlIHByZXBhcmVyZW5kZXIgZXZlbnRcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09WyBTRVQgQ09OVEVOVCBpbml0aWFsbHksIG9yIGFmdGVyIHJlcG9zaXRpb24gXT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgLy8gVE9ETzogbGFzdCByb3cgaXMgc29tZXRpbWVzIGxlZnQgb2ZmIHdpdGggcmVwb3NpdGlvblxuICAgIHB1YmxpYyBzZXRDcmFkbGVDb250ZW50ID0gKGNyYWRsZVN0YXRlKSA9PiB7IFxuXG4gICAgICAgIGNvbnN0IHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcyA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy52aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXNSZWYuY3VycmVudFxuICAgICAgICBjb25zdCBjcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLmNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXNSZWYuY3VycmVudFxuICAgICAgICBjb25zdCBwb3J0YWxIYW5kbGVyID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLmhhbmRsZXJzUmVmLmN1cnJlbnQucG9ydGFsc1xuICAgICAgICBjb25zdCBjcmFkbGVJbnRlcm5hbFByb3BlcnRpZXMgPSB0aGlzLmNyYWRsZVBhcmFtZXRlcnMuQ3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzUmVmLmN1cnJlbnRcbiAgICAgICAgY29uc3Qgc2Nyb2xsSGFuZGxlciA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy5oYW5kbGVyc1JlZi5jdXJyZW50LnNjcm9sbFxuICAgICAgICBjb25zdCBzY2FmZm9sZEhhbmRsZXIgPSB0aGlzLmNyYWRsZVBhcmFtZXRlcnMuaGFuZGxlcnNSZWYuY3VycmVudC5zY2FmZm9sZFxuICAgICAgICBjb25zdCBzdGF0ZUhhbmRsZXIgPSB0aGlzLmNyYWRsZVBhcmFtZXRlcnMuaGFuZGxlcnNSZWYuY3VycmVudC5zdGF0ZVxuICAgICAgICBjb25zdCBzZXJ2aWNlSGFuZGxlciA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy5oYW5kbGVyc1JlZi5jdXJyZW50LnNlcnZpY2VcbiAgICAgICAgLy8gY29uc3QgaW50ZXJydXB0SGFuZGxlciA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy5oYW5kbGVyc1JlZi5jdXJyZW50LmludGVycnVwdHNcbiAgICAgICAgLy8gY29uc3QgY3JhZGxlRGF0YSA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmLmN1cnJlbnRcblxuICAgICAgICAvLyBpZiAodmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzLmluZGV4ID09IDYpIHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCdTRVRUSU5HIGNvbnRlbnQgLSBjcmFkbGVTdGF0ZSwgY3JhZGxlRGF0YSBpbiBzZXRDcmFkbGVDb250ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgLy8gY3JhZGxlU3RhdGUsIGNyYWRsZURhdGEpXG4gICAgICAgIC8vIH1cblxuICAgICAgICBjb25zdCB2aWV3cG9ydEVsZW1lbnQgPSB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXMuZWxlbWVudHJlZi5jdXJyZW50XG5cbiAgICAgICAgY29uc3QgdmlzaWJsZXRhcmdldGluZGV4b2Zmc2V0ID0gc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEubmV4dEl0ZW1JbmRleFJlZmVyZW5jZVxuICAgICAgICBsZXQgdmlzaWJsZXRhcmdldHNjcm9sbG9mZnNldCA9IHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLm5leHRDcmFkbGVQb3NPZmZzZXRcblxuICAgICAgICBjb25zdCB7Y2VsbEhlaWdodCwgY2VsbFdpZHRoLCBvcmllbnRhdGlvbiwgcnVud2F5Y291bnQsIGdhcCwgcGFkZGluZywgbGlzdHNpemV9ID0gY3JhZGxlSW5oZXJpdGVkUHJvcGVydGllc1xuXG4gICAgICAgIGNvbnN0IHsgY3JhZGxlUm93Y291bnQsXG4gICAgICAgICAgICBjcm9zc2NvdW50LFxuICAgICAgICAgICAgdmlld3BvcnRSb3djb3VudCB9ID0gY3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzXG5cbiAgICAgICAgaWYgKGNyYWRsZVN0YXRlID09ICdkb3JlcG9zaXRpb24nKSB7XG5cbiAgICAgICAgICAgIHZpc2libGV0YXJnZXRzY3JvbGxvZmZzZXQgPSAodmlzaWJsZXRhcmdldGluZGV4b2Zmc2V0ID09IDApP3BhZGRpbmc6Z2FwXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxvY2FsQ29udGVudExpc3QgPSBbXVxuICAgICAgICBjb25zdCBjcmFkbGVDb250ZW50ID0gdGhpcy5jb250ZW50XG5cbiAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGNyYWRsZUZpcnN0SW5kZXgsIFxuICAgICAgICAgICAgcmVmZXJlbmNlb2Zmc2V0LCBcbiAgICAgICAgICAgIGNyYWRsZUFjdHVhbENvbnRlbnRDb3VudCwgXG4gICAgICAgICAgICBzY3JvbGxibG9ja09mZnNldCwgXG4gICAgICAgICAgICBheGlzUG9zT2Zmc2V0LCBcbiAgICAgICAgICAgIGF4aXNBZGp1c3RtZW50XG4gICAgICAgIH0gPSBcbiAgICAgICAgICAgIGdldENvbnRlbnRMaXN0UmVxdWlyZW1lbnRzKHtcbiAgICAgICAgICAgICAgICBjcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICAgIGNyYWRsZUludGVybmFsUHJvcGVydGllcyxcbiAgICAgICAgICAgICAgICB2aXNpYmxldGFyZ2V0aW5kZXhvZmZzZXQsXG4gICAgICAgICAgICAgICAgdGFyZ2V0Vmlld3BvcnRPZmZzZXQ6dmlzaWJsZXRhcmdldHNjcm9sbG9mZnNldCxcbiAgICAgICAgICAgICAgICB2aWV3cG9ydEVsZW1lbnQ6dmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzLmVsZW1lbnRyZWYuY3VycmVudFxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NyYWRsZUFjdHVhbENvbnRlbnRDb3VudCBmcm9tIGdldENvbnRlbnRMaXN0UmVxdWlyZW1lbnRzJyxjcmFkbGVBY3R1YWxDb250ZW50Q291bnQpXG5cbiAgICAgICAgLy8gaWYgKHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcy5pbmRleCA9PSA2KSB7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZygnU0VUIGluZGV4LCBjcmFkbGVBY3R1YWxDb250ZW50Q291bnQnLCB2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXMuaW5kZXgsY3JhZGxlQWN0dWFsQ29udGVudENvdW50KVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gcmV0dXJucyBjb250ZW50IGNvbnN0cmFpbmVkIGJ5IGNyYWRsZVJvd2NvdW50XG4gICAgICAgIGNvbnN0IFtjaGlsZGxpc3QsZGVsZXRlZGl0ZW1zXSA9IGdldFVJQ2VsbFNoZWxsTGlzdCh7XG5cbiAgICAgICAgICAgIGNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXMsXG4gICAgICAgICAgICBjcmFkbGVJbnRlcm5hbFByb3BlcnRpZXMsXG4gICAgICAgICAgICBjcmFkbGVBY3R1YWxDb250ZW50Q291bnQsXG4gICAgICAgICAgICBjcmFkbGVGaXJzdEluZGV4LFxuICAgICAgICAgICAgaGVhZGNoYW5nZWNvdW50OjAsXG4gICAgICAgICAgICB0YWlsY2hhbmdlY291bnQ6Y3JhZGxlQWN0dWFsQ29udGVudENvdW50LFxuICAgICAgICAgICAgbG9jYWxDb250ZW50TGlzdCxcbiAgICAgICAgICAgIGNhbGxiYWNrczp0aGlzLmludGVybmFsQ2FsbGJhY2tzUmVmLmN1cnJlbnQsXG4gICAgICAgICAgICAvLyBvYnNlcnZlcjogaW50ZXJydXB0SGFuZGxlci5jZWxsSW50ZXJzZWN0Lm9ic2VydmVyLFxuICAgICAgICAgICAgaW5zdGFuY2VJZENvdW50ZXJSZWY6dGhpcy5pbnN0YW5jZUlkQ291bnRlclJlZixcbiAgICAgICAgfSlcblxuICAgICAgICBkZWxldGVBbmRSZXJlbmRlclBvcnRhbHMocG9ydGFsSGFuZGxlciwgZGVsZXRlZGl0ZW1zKVxuXG4gICAgICAgIGNvbnN0IFtoZWFkY29udGVudGxpc3QsIHRhaWxjb250ZW50bGlzdF0gPSBhbGxvY2F0ZUNvbnRlbnRMaXN0KHtcblxuICAgICAgICAgICAgY29udGVudGxpc3Q6Y2hpbGRsaXN0LFxuICAgICAgICAgICAgYXhpc3JlZmVyZW5jZWluZGV4OnJlZmVyZW5jZW9mZnNldCxcbiAgICBcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoaGVhZGNvbnRlbnRsaXN0Lmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBheGlzUG9zT2Zmc2V0ID0gcGFkZGluZ1xuICAgICAgICB9XG5cbiAgICAgICAgY3JhZGxlQ29udGVudC5jcmFkbGVNb2RlbCA9IGNoaWxkbGlzdFxuICAgICAgICBjcmFkbGVDb250ZW50LmhlYWRNb2RlbENvbXBvbmVudHMgPSBoZWFkY29udGVudGxpc3RcbiAgICAgICAgY3JhZGxlQ29udGVudC50YWlsTW9kZWxDb21wb25lbnRzID0gdGFpbGNvbnRlbnRsaXN0XG5cbiAgICAgICAgc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEuc2Nyb2xsSW1wbGllZEl0ZW1JbmRleFJlZmVyZW5jZSA9IHJlZmVyZW5jZW9mZnNldFxuICAgICAgICBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5zY3JvbGxJbXBsaWVkQ3JhZGxlUG9zT2Zmc2V0ID0gYXhpc1Bvc09mZnNldFxuXG4gICAgICAgIHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLm5leHRJdGVtSW5kZXhSZWZlcmVuY2UgPSByZWZlcmVuY2VvZmZzZXRcbiAgICAgICAgc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEubmV4dENyYWRsZVBvc09mZnNldCA9IGF4aXNQb3NPZmZzZXRcblxuICAgICAgICBpZiAoc2VydmljZUhhbmRsZXIuc2VydmljZUNhbGxzLnJlZmVyZW5jZUluZGV4Q2FsbGJhY2tSZWYuY3VycmVudCkge1xuXG4gICAgICAgICAgICBsZXQgY3N0YXRlID0gY3JhZGxlU3RhdGVcbiAgICAgICAgICAgIC8vIGlmIChjc3RhdGUgPT0gJ3NldHJlbG9hZCcpIGNzdGF0ZSA9ICdyZWxvYWQnXG4gICAgICAgICAgICBzZXJ2aWNlSGFuZGxlci5zZXJ2aWNlQ2FsbHMucmVmZXJlbmNlSW5kZXhDYWxsYmFja1JlZi5jdXJyZW50KFxuXG4gICAgICAgICAgICAgICAgc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEubmV4dEl0ZW1JbmRleFJlZmVyZW5jZSwnc2V0Q3JhZGxlQ29udGVudCcsIGNzdGF0ZSlcbiAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjcmFkbGVFbGVtZW50cyA9IHNjYWZmb2xkSGFuZGxlci5lbGVtZW50cyAvL2NyYWRsZUVsZW1lbnRzUmVmLmN1cnJlbnRcblxuICAgICAgICBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5ibG9ja1Njcm9sbFBvcyA9IHNjcm9sbGJsb2NrT2Zmc2V0IC0gYXhpc1Bvc09mZnNldFxuICAgICAgICAvLyBjb25zb2xlLmxvZygnc2V0dGluZyBibG9ja1Njcm9sbFBvcyBpbiBzZXRDcmFkbGVDb250ZW50OiBibG9ja1Njcm9sbFBvcywgc2Nyb2xsYmxvY2tPZmZzZXQsIGF4aXNQb3NPZmZzZXQnLFxuICAgICAgICAvLyAgICAgc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEuYmxvY2tTY3JvbGxQb3MsIHNjcm9sbGJsb2NrT2Zmc2V0LCBheGlzUG9zT2Zmc2V0KVxuXG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG5cbiAgICAgICAgICAgIHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLmJsb2NrU2Nyb2xsUHJvcGVydHkgPSAnc2Nyb2xsVG9wJ1xuICAgICAgICAgICAgLy8gc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEuYmxvY2tTY3JvbGxQb3MgPSB2aWV3cG9ydEVsZW1lbnQuc2Nyb2xsVG9wXG5cbiAgICAgICAgICAgIGNyYWRsZUVsZW1lbnRzLmF4aXNSZWYuY3VycmVudC5zdHlsZS50b3AgPSAoc2Nyb2xsYmxvY2tPZmZzZXQgKyBheGlzQWRqdXN0bWVudCkgKyAncHgnXG4gICAgICAgICAgICBjcmFkbGVFbGVtZW50cy5heGlzUmVmLmN1cnJlbnQuc3R5bGUubGVmdCA9ICdhdXRvJ1xuICAgICAgICAgICAgY3JhZGxlRWxlbWVudHMuaGVhZFJlZi5jdXJyZW50LnN0eWxlLnBhZGRpbmdCb3R0b20gPSBoZWFkY29udGVudGxpc3QubGVuZ3RoP2NyYWRsZUluaGVyaXRlZFByb3BlcnRpZXMuZ2FwICsgJ3B4JzowXG5cbiAgICAgICAgfSBlbHNlIHsgLy8gb3JpZW50YXRpb24gPSAnaG9yaXpvbnRhbCdcblxuICAgICAgICAgICAgc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEuYmxvY2tTY3JvbGxQcm9wZXJ0eSA9ICdzY3JvbGxMZWZ0J1xuICAgICAgICAgICAgLy8gc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEuYmxvY2tTY3JvbGxQb3MgPSB2aWV3cG9ydEVsZW1lbnQuc2Nyb2xsTGVmdFxuXG4gICAgICAgICAgICBjcmFkbGVFbGVtZW50cy5heGlzUmVmLmN1cnJlbnQuc3R5bGUudG9wID0gJ2F1dG8nXG4gICAgICAgICAgICBjcmFkbGVFbGVtZW50cy5heGlzUmVmLmN1cnJlbnQuc3R5bGUubGVmdCA9IChzY3JvbGxibG9ja09mZnNldCArIGF4aXNBZGp1c3RtZW50KSArICdweCdcbiAgICAgICAgICAgIGNyYWRsZUVsZW1lbnRzLmhlYWRSZWYuY3VycmVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBoZWFkY29udGVudGxpc3QubGVuZ3RoP2NyYWRsZUluaGVyaXRlZFByb3BlcnRpZXMuZ2FwICsgJ3B4JzowXG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT1bIFVQREFURSB0aHJvdWdoIHNjcm9sbCBdPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgcHVibGljIHVwZGF0ZUNyYWRsZUNvbnRlbnQgPSAoYnJlYWtsaW5lRW50cmllcywgc291cmNlID0gJ25vdGlmaWNhdGlvbnMnKSA9PiB7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3VwZGF0ZUNyYWRsZUNvbnRlbnQnLCBzb3VyY2UsIGJyZWFrbGluZUVudHJpZXMgKVxuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIDEuIGRhdGEgYXNzZW1ibHkgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gdmlld3BvcnRcbiAgICAgICAgY29uc3Qgdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLnZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZi5jdXJyZW50XG4gICAgICAgIGNvbnN0IHZpZXdwb3J0RWxlbWVudCA9IHZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllcy5lbGVtZW50cmVmLmN1cnJlbnRcbiAgICAgICAgaWYgKCF2aWV3cG9ydEVsZW1lbnQpIHsgXG4gICAgICAgICAgICAvLyBub3QgbW91bnRlZDsgcmV0dXJuXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICAvLyBjcmFkbGUgcHJvcGVydGllc1xuICAgICAgICBjb25zdCBjcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzID0gdGhpcy5jcmFkbGVQYXJhbWV0ZXJzLmNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXNSZWYuY3VycmVudFxuICAgICAgICBjb25zdCBjcmFkbGVJbnRlcm5hbFByb3BlcnRpZXMgPSB0aGlzLmNyYWRsZVBhcmFtZXRlcnMuQ3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzUmVmLmN1cnJlbnRcblxuICAgICAgICAvLyBoYW5kbGVyIHN1cHBvcnRcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgcG9ydGFsczogcG9ydGFsSGFuZGxlciwgXG4gICAgICAgICAgICBzY3JvbGw6IHNjcm9sbEhhbmRsZXIsIFxuICAgICAgICAgICAgc2NhZmZvbGQ6IHNjYWZmb2xkSGFuZGxlciwgXG4gICAgICAgICAgICBzdGF0ZTogc3RhdGVIYW5kbGVyLCBcbiAgICAgICAgICAgIC8vIGludGVycnVwdHM6IGludGVycnVwdEhhbmRsZXIsXG4gICAgICAgIH0gPSB0aGlzLmNyYWRsZVBhcmFtZXRlcnMuaGFuZGxlcnNSZWYuY3VycmVudFxuXG4gICAgICAgIC8vIHNjcm9sbCBkYXRhXG4gICAgICAgIGxldCBzY3JvbGxPZmZzZXRcbiAgICAgICAgaWYgKGNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXMub3JpZW50YXRpb24gPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgc2Nyb2xsT2Zmc2V0ID0gdmlld3BvcnRFbGVtZW50LnNjcm9sbFRvcFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2Nyb2xsT2Zmc2V0ID0gdmlld3BvcnRFbGVtZW50LnNjcm9sbExlZnRcbiAgICAgICAgfVxuICAgICAgICBpZiAoIHNjcm9sbE9mZnNldCA8IDApIHsgLy8gZm9yIFNhZmFyaSBlbGFzdGljIGJvdW5jZSBhdCB0b3Agb2Ygc2Nyb2xsXG5cbiAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2Nyb2xsUG9zaXRpb25zID0gc2Nyb2xsSGFuZGxlci5zY3JvbGxQb3NpdGlvbnMgXG5cbiAgICAgICAgbGV0IGlzU2Nyb2xsaW5ndmlld3BvcnRmb3J3YXJkXG4gICAgICAgIC8vIGlmIChzY3JvbGxQb3NpdGlvbnMuY3VycmVudCA9PSBzY3JvbGxQb3NpdGlvbnMucHJldmlvdXMpIHsgLy8gZWRnZSBjYXNlIFxuXG4gICAgICAgIC8vICAgICBpc1Njcm9sbGluZ3ZpZXdwb3J0Zm9yd2FyZCA9IHRoaXMuX3ByZXZpb3VzU2Nyb2xsRm9yd2FyZFxuXG4gICAgICAgIC8vIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlzU2Nyb2xsaW5ndmlld3BvcnRmb3J3YXJkID0gc2Nyb2xsUG9zaXRpb25zLmN1cnJlbnR1cGRhdGUgPiBzY3JvbGxQb3NpdGlvbnMucHJldmlvdXN1cGRhdGVcbiAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzU2Nyb2xsRm9yd2FyZCA9IGlzU2Nyb2xsaW5ndmlld3BvcnRmb3J3YXJkXG5cbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIGlmIChpc1Njcm9sbGluZ3ZpZXdwb3J0Zm9yd2FyZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZygnaXNTY3JvbGxpbmd2aWV3cG9ydGZvcndhcmQgPT09IHVuZGVmaW5lZCcpXG4gICAgICAgIC8vICAgICByZXR1cm4gLy8gaW5pdCBjYWxsXG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBjcmFkbGUgc2NhZmZvbGQgYW5kIGNvbnRhaW5lZCBkYXRhXG4gICAgICAgIGNvbnN0IGNyYWRsZUVsZW1lbnRzID0gc2NhZmZvbGRIYW5kbGVyLmVsZW1lbnRzXG4gICAgICAgIGNvbnN0IGNyYWRsZUNvbnRlbnQgPSB0aGlzLmNvbnRlbnRcbiAgICAgICAgY29uc3QgaXRlbUVsZW1lbnRzID0gdGhpcy5pdGVtRWxlbWVudHNcbiAgICAgICAgY29uc3QgbW9kZWxjb250ZW50bGlzdCA9IGNyYWRsZUNvbnRlbnQuY3JhZGxlTW9kZWxcbiAgICAgICAgY29uc3QgY3JhZGxlRmlyc3RJbmRleCA9IG1vZGVsY29udGVudGxpc3RbMF0ucHJvcHMuaW5kZXhcblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVsgMi4gZ2V0IHNoaWZ0aW5nIGluc3RydWN0aW9uIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgIGNvbnN0IHNoaWZ0aW5naW5zdHJ1Y3Rpb24gPSBnZXRTaGlmdGluZ0luc3RydWN0aW9uKHtcbiAgICAgICAgICAgIGlzU2Nyb2xsaW5ndmlld3BvcnRmb3J3YXJkLFxuICAgICAgICAgICAgYnJlYWtsaW5lRW50cmllcyxcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zb2xlLmxvZygnc2hpZnRpbmdpbnN0cnVjdGlvbicsc2hpZnRpbmdpbnN0cnVjdGlvbilcblxuICAgICAgICBpZiAoc2hpZnRpbmdpbnN0cnVjdGlvbiA9PSAwKSByZXR1cm5cblxuICAgICAgICAvLyBjb25zb2xlLmxvZygncmV0dXJuaW5nIGZvciBERUJVRzsgaXNTY3JvbGxpbmd2aWV3cG9ydGZvcndhcmQsIHNoaWZ0aW5naW5zdHJ1Y3Rpb24nLFxuICAgICAgICAvLyAgICAgaXNTY3JvbGxpbmd2aWV3cG9ydGZvcndhcmQsc2hpZnRpbmdpbnN0cnVjdGlvbiApXG4gICAgICAgIC8vIHJldHVybjsgLy8gKkRFQlVHKlxuXG4gICAgICAgIGxldCBzaGlmdGluZ2ludGVyc2VjdGlvbnMgPSBbXVxuICAgICAgICAvLyBpZiAoYnJlYWtsaW5lRW50cmllcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gICAgIHNoaWZ0aW5naW50ZXJzZWN0aW9ucyA9IGlzb2xhdGVTaGlmdGluZ0ludGVyc2VjdGlvbnMoe1xuXG4gICAgICAgIC8vICAgICAgICAgaXNTY3JvbGxpbmd2aWV3cG9ydGZvcndhcmQsXG4gICAgICAgIC8vICAgICAgICAgaW50ZXJzZWN0aW9uczpicmVha2xpbmVFbnRyaWVzLFxuICAgICAgICAvLyAgICAgICAgIGNyYWRsZUNvbnRlbnQsXG4gICAgICAgIC8vICAgICAgICAgY2VsbE9ic2VydmVyVGhyZXNob2xkOmNyYWRsZUludGVybmFsUHJvcGVydGllcy5jZWxsT2JzZXJ2ZXJUaHJlc2hvbGQsXG5cbiAgICAgICAgLy8gICAgIH0pXG4gICAgICAgIC8vICAgICAvLyBjb25zb2xlLmxvZygnU0hJRlRJTkcgaW50ZXJzZWN0aW9ucycsc2hpZnRpbmdpbnRlcnNlY3Rpb25zKVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIDMuIENhbGN1bGF0ZSBzaGlmdHMgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgICBjb25zdCBbXG5cbiAgICAgICAgICAgIGNyYWRsZXJlZmVyZW5jZWluZGV4LCBcbiAgICAgICAgICAgIGNyYWRsZWl0ZW1zaGlmdCwgXG4gICAgICAgICAgICBheGlzcmVmZXJlbmNlaW5kZXgsIFxuICAgICAgICAgICAgYXhpc2l0ZW1zaGlmdCwgXG4gICAgICAgICAgICBheGlzcG9zb2Zmc2V0LCBcbiAgICAgICAgICAgIG5ld0NyYWRsZUFjdHVhbENvbnRlbnRDb3VudCxcbiAgICAgICAgICAgIGhlYWRjaGFuZ2UsXG4gICAgICAgICAgICB0YWlsY2hhbmdlLFxuXG4gICAgICAgIF0gPSBjYWxjQ29udGVudFNoaWZ0KHtcblxuICAgICAgICAgICAgc2hpZnRpbmdpbnN0cnVjdGlvbixcbiAgICAgICAgICAgIGNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXMsXG4gICAgICAgICAgICBjcmFkbGVJbnRlcm5hbFByb3BlcnRpZXMsXG4gICAgICAgICAgICBjcmFkbGVDb250ZW50LFxuICAgICAgICAgICAgY3JhZGxlRWxlbWVudHMsXG4gICAgICAgICAgICB2aWV3cG9ydEVsZW1lbnQsXG5cbiAgICAgICAgfSlcblxuICAgICAgICAvLyBjb25zdCBbXG4gICAgICAgIC8vICAgICBjcmFkbGVyZWZlcmVuY2VpbmRleCwgXG4gICAgICAgIC8vICAgICBjcmFkbGVpdGVtc2hpZnQsIFxuICAgICAgICAvLyAgICAgYXhpc3JlZmVyZW5jZWluZGV4LCBcbiAgICAgICAgLy8gICAgIGF4aXNpdGVtc2hpZnQsIFxuICAgICAgICAvLyAgICAgYXhpc3Bvc29mZnNldCwgXG4gICAgICAgIC8vICAgICBuZXdDcmFkbGVBY3R1YWxDb250ZW50Q291bnQsXG4gICAgICAgIC8vICAgICBoZWFkY2hhbmdlLFxuICAgICAgICAvLyAgICAgdGFpbGNoYW5nZSxcbiAgICAgICAgLy8gXSA9IGNhbGNDb250ZW50U2hpZnRzKHtcblxuICAgICAgICAvLyAgICAgY3JhZGxlSW5oZXJpdGVkUHJvcGVydGllcyxcbiAgICAgICAgLy8gICAgIGNyYWRsZUludGVybmFsUHJvcGVydGllcyxcbiAgICAgICAgLy8gICAgIGNyYWRsZUVsZW1lbnRzLFxuICAgICAgICAvLyAgICAgY3JhZGxlQ29udGVudCxcbiAgICAgICAgLy8gICAgIHZpZXdwb3J0RWxlbWVudCxcbiAgICAgICAgLy8gICAgIC8vIGl0ZW1FbGVtZW50cyxcbiAgICAgICAgLy8gICAgIHNoaWZ0aW5naW50ZXJzZWN0aW9ucyxcbiAgICAgICAgLy8gICAgIGlzU2Nyb2xsaW5ndmlld3BvcnRmb3J3YXJkLFxuICAgICAgICAvLyAgICAgLy8gdmlld3BvcnRJbnRlcnJ1cHRQcm9wZXJ0aWVzLFxuXG4gICAgICAgIC8vIH0pXG5cbiAgICAgICAgaWYgKChheGlzaXRlbXNoaWZ0ID09IDAgJiYgY3JhZGxlaXRlbXNoaWZ0ID09IDApKSByZXR1cm5cblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1bIDQuIGNhbGN1bGF0ZSBoZWFkIGFuZCB0YWlsIGNvbnNvbGlkYXRlZCBjcmFkbGUgY29udGVudCBjaGFuZ2VzIF0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgIC8vIHRoZSBudW1iZXIgb2YgaXRlbXMgdG8gYWRkIHRvIGFuZCBjbGlwIGZyb20gdGhlIGNvbnRlbnRsaXN0XG4gICAgICAgIC8vIG5lZ2F0aXZlIG51bWJlciBpcyBjbGlwOyBwb3NpdGl2ZSBudW1iZXIgaXMgYWRkXG4gICAgICAgIGNvbnN0IFtoZWFkY2hhbmdlY291bnQsdGFpbGNoYW5nZWNvdW50XSA9IGNhbGNIZWFkQW5kVGFpbENoYW5nZXMoeyBcblxuICAgICAgICAgICAgY3JhZGxlSW5oZXJpdGVkUHJvcGVydGllcyxcbiAgICAgICAgICAgIGNyYWRsZUludGVybmFsUHJvcGVydGllcyxcbiAgICAgICAgICAgIGNyYWRsZUNvbnRlbnQsXG4gICAgICAgICAgICBjcmFkbGVzaGlmdGNvdW50OmNyYWRsZWl0ZW1zaGlmdCxcbiAgICAgICAgICAgIGlzU2Nyb2xsaW5ndmlld3BvcnRmb3J3YXJkLFxuICAgICAgICAgICAgY3JhZGxlRmlyc3RJbmRleCwgLy8gcHJldmlvdXMgY3JhZGxlZmlyc3RpbmRleFxuXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgNS4gcmVjb25maWd1cmUgY3JhZGxlIGNvbnRlbnQgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgICAgLy8gY29sbGVjdCBtb2RpZmllZCBjb250ZW50XG4gICAgICAgIGxldCBsb2NhbENvbnRlbnRMaXN0LCBkZWxldGVkQ29udGVudEl0ZW1zID0gW11cblxuICAgICAgICBpZiAoaGVhZGNoYW5nZWNvdW50IHx8IHRhaWxjaGFuZ2Vjb3VudCkgeyAvLyBUT0RPOiBhcHBhcmVudGx5IGhlYWRjaGFuZ2Vjb3VudCBvZiAtMCBmYWlscyB0ZXN0LCBzaG91bGQgYmUgZml4ZWRcblxuICAgICAgICAgICAgW2xvY2FsQ29udGVudExpc3QsZGVsZXRlZENvbnRlbnRJdGVtc10gPSBnZXRVSUNlbGxTaGVsbExpc3Qoe1xuICAgICAgICAgICAgICAgIGNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXMsXG4gICAgICAgICAgICAgICAgY3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICAgIGNyYWRsZUFjdHVhbENvbnRlbnRDb3VudDpuZXdDcmFkbGVBY3R1YWxDb250ZW50Q291bnQsXG4gICAgICAgICAgICAgICAgbG9jYWxDb250ZW50TGlzdDptb2RlbGNvbnRlbnRsaXN0LFxuICAgICAgICAgICAgICAgIGhlYWRjaGFuZ2Vjb3VudCxcbiAgICAgICAgICAgICAgICB0YWlsY2hhbmdlY291bnQsXG4gICAgICAgICAgICAgICAgY3JhZGxlRmlyc3RJbmRleCxcbiAgICAgICAgICAgICAgICAvLyBvYnNlcnZlcjogaW50ZXJydXB0SGFuZGxlci5jZWxsSW50ZXJzZWN0Lm9ic2VydmVyLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrczp0aGlzLmludGVybmFsQ2FsbGJhY2tzUmVmLmN1cnJlbnQsXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VJZENvdW50ZXJSZWY6dGhpcy5pbnN0YW5jZUlkQ291bnRlclJlZixcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGxvY2FsQ29udGVudExpc3QgPSBtb2RlbGNvbnRlbnRsaXN0XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZUFuZFJlcmVuZGVyUG9ydGFscyhwb3J0YWxIYW5kbGVyLCBkZWxldGVkQ29udGVudEl0ZW1zKVxuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIDcuIGFsbG9jYXRlIGNyYWRsZSBjb250ZW50IF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgIGNvbnN0IFtoZWFkY29udGVudCwgdGFpbGNvbnRlbnRdID0gYWxsb2NhdGVDb250ZW50TGlzdChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb250ZW50bGlzdDpsb2NhbENvbnRlbnRMaXN0LFxuICAgICAgICAgICAgICAgIGF4aXNyZWZlcmVuY2VpbmRleCwgLy8gVE9ETzogQlVHOiBzZXQgdG8gMTAwIGZvciBwcm9ibGVtXG4gICAgICAgICAgICB9XG4gICAgICAgIClcblxuICAgICAgICBjcmFkbGVDb250ZW50LmNyYWRsZU1vZGVsID0gbG9jYWxDb250ZW50TGlzdFxuICAgICAgICBjcmFkbGVDb250ZW50LmhlYWRWaWV3Q29tcG9uZW50cyA9IGNyYWRsZUNvbnRlbnQuaGVhZE1vZGVsQ29tcG9uZW50cyA9IGhlYWRjb250ZW50XG4gICAgICAgIGNyYWRsZUNvbnRlbnQudGFpbFZpZXdDb21wb25lbnRzID0gY3JhZGxlQ29udGVudC50YWlsTW9kZWxDb21wb25lbnRzID0gdGFpbGNvbnRlbnRcblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyA4LiBzZXQgY3NzIGNoYW5nZXMgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgICBzY3JvbGxIYW5kbGVyLnVwZGF0ZUJsb2NrU2Nyb2xsUG9zKClcblxuICAgICAgICBpZiAoYXhpc3Bvc29mZnNldCAhPT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgIC8vIHNjcm9sbEhhbmRsZXIudXBkYXRlQmxvY2tTY3JvbGxQb3MoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY3JhZGxlSW5oZXJpdGVkUHJvcGVydGllcy5vcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5ibG9ja1Njcm9sbFBvcyA9IHZpZXdwb3J0RWxlbWVudC5zY3JvbGxUb3BcbiAgICAgICAgICAgICAgICAvLyBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5ibG9ja1Njcm9sbFByb3BlcnR5ID0gJ3Njcm9sbFRvcCdcbiAgICAgICAgICAgICAgICBjcmFkbGVFbGVtZW50cy5heGlzUmVmLmN1cnJlbnQuc3R5bGUudG9wID0gdmlld3BvcnRFbGVtZW50LnNjcm9sbFRvcCArIGF4aXNwb3NvZmZzZXQgKyAncHgnXG4gICAgICAgICAgICAgICAgY3JhZGxlRWxlbWVudHMuYXhpc1JlZi5jdXJyZW50LnN0eWxlLmxlZnQgPSAnYXV0bydcbiAgICAgICAgICAgICAgICBjcmFkbGVFbGVtZW50cy5oZWFkUmVmLmN1cnJlbnQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IGhlYWRjb250ZW50Lmxlbmd0aD9jcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzLmdhcCArICdweCc6MFxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgLy8gc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEuYmxvY2tTY3JvbGxQb3MgPSB2aWV3cG9ydEVsZW1lbnQuc2Nyb2xsTGVmdFxuICAgICAgICAgICAgICAgIC8vIHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLmJsb2NrU2Nyb2xsUHJvcGVydHkgPSAnc2Nyb2xsTGVmdCdcbiAgICAgICAgICAgICAgICBjcmFkbGVFbGVtZW50cy5heGlzUmVmLmN1cnJlbnQuc3R5bGUudG9wID0gJ2F1dG8nXG4gICAgICAgICAgICAgICAgY3JhZGxlRWxlbWVudHMuYXhpc1JlZi5jdXJyZW50LnN0eWxlLmxlZnQgPSB2aWV3cG9ydEVsZW1lbnQuc2Nyb2xsTGVmdCArIGF4aXNwb3NvZmZzZXQgKyAncHgnXG4gICAgICAgICAgICAgICAgY3JhZGxlRWxlbWVudHMuaGVhZFJlZi5jdXJyZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IGhlYWRjb250ZW50Lmxlbmd0aD9jcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzLmdhcCArICdweCc6MFxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLnNjcm9sbEltcGxpZWRJdGVtSW5kZXhSZWZlcmVuY2UgPSBheGlzcmVmZXJlbmNlaW5kZXhcbiAgICAgICAgc2NhZmZvbGRIYW5kbGVyLmNyYWRsZVJlZmVyZW5jZURhdGEuc2Nyb2xsSW1wbGllZENyYWRsZVBvc09mZnNldCA9IGF4aXNwb3NvZmZzZXRcblxuICAgICAgICBzY2FmZm9sZEhhbmRsZXIuY3JhZGxlUmVmZXJlbmNlRGF0YS5uZXh0SXRlbUluZGV4UmVmZXJlbmNlID0gYXhpc3JlZmVyZW5jZWluZGV4XG4gICAgICAgIHNjYWZmb2xkSGFuZGxlci5jcmFkbGVSZWZlcmVuY2VEYXRhLm5leHRDcmFkbGVQb3NPZmZzZXQgPSBheGlzcG9zb2Zmc2V0XG5cbiAgICAgICAgc3RhdGVIYW5kbGVyLnNldENyYWRsZVN0YXRlKCdyZW5kZXJ1cGRhdGVkY29udGVudCcpXG5cbiAgICB9XG5cbn0iXSwibmFtZXMiOlsiY3JhZGxlUGFyYW1ldGVycyIsImNyYWRsZU1vZGVsIiwiaGVhZE1vZGVsQ29tcG9uZW50cyIsInRhaWxNb2RlbENvbXBvbmVudHMiLCJoZWFkVmlld0NvbXBvbmVudHMiLCJ0YWlsVmlld0NvbXBvbmVudHMiLCJNYXAiLCJjdXJyZW50IiwidW5kZWZpbmVkIiwiY3JhZGxlU3RhdGUiLCJ2aWV3cG9ydEludGVycnVwdFByb3BlcnRpZXMiLCJfdGhpcyIsInZpZXdwb3J0SW50ZXJydXB0UHJvcGVydGllc1JlZiIsImNyYWRsZUluaGVyaXRlZFByb3BlcnRpZXMiLCJjcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmIiwicG9ydGFsSGFuZGxlciIsImhhbmRsZXJzUmVmIiwicG9ydGFscyIsImNyYWRsZUludGVybmFsUHJvcGVydGllcyIsIkNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZiIsInNjcm9sbEhhbmRsZXIiLCJzY3JvbGwiLCJzY2FmZm9sZEhhbmRsZXIiLCJzY2FmZm9sZCIsInN0YXRlSGFuZGxlciIsInN0YXRlIiwic2VydmljZUhhbmRsZXIiLCJzZXJ2aWNlIiwidmlld3BvcnRFbGVtZW50IiwiZWxlbWVudHJlZiIsInZpc2libGV0YXJnZXRpbmRleG9mZnNldCIsImNyYWRsZVJlZmVyZW5jZURhdGEiLCJuZXh0SXRlbUluZGV4UmVmZXJlbmNlIiwidmlzaWJsZXRhcmdldHNjcm9sbG9mZnNldCIsIm5leHRDcmFkbGVQb3NPZmZzZXQiLCJjZWxsV2lkdGgiLCJvcmllbnRhdGlvbiIsInJ1bndheWNvdW50IiwiZ2FwIiwicGFkZGluZyIsImxpc3RzaXplIiwiY3Jvc3Njb3VudCIsInZpZXdwb3J0Um93Y291bnQiLCJsb2NhbENvbnRlbnRMaXN0IiwiY3JhZGxlQ29udGVudCIsImNvbnRlbnQiLCJ0YXJnZXRWaWV3cG9ydE9mZnNldCIsImNyYWRsZUZpcnN0SW5kZXgiLCJyZWZlcmVuY2VvZmZzZXQiLCJjcmFkbGVBY3R1YWxDb250ZW50Q291bnQiLCJzY3JvbGxibG9ja09mZnNldCIsImF4aXNQb3NPZmZzZXQiLCJheGlzQWRqdXN0bWVudCIsImhlYWRjaGFuZ2Vjb3VudCIsInRhaWxjaGFuZ2Vjb3VudCIsImNhbGxiYWNrcyIsImludGVybmFsQ2FsbGJhY2tzUmVmIiwiaW5zdGFuY2VJZENvdW50ZXJSZWYiLCJjaGlsZGxpc3QiLCJkZWxldGVkaXRlbXMiLCJjb250ZW50bGlzdCIsImF4aXNyZWZlcmVuY2VpbmRleCIsImhlYWRjb250ZW50bGlzdCIsInRhaWxjb250ZW50bGlzdCIsImxlbmd0aCIsInNjcm9sbEltcGxpZWRJdGVtSW5kZXhSZWZlcmVuY2UiLCJzY3JvbGxJbXBsaWVkQ3JhZGxlUG9zT2Zmc2V0Iiwic2VydmljZUNhbGxzIiwicmVmZXJlbmNlSW5kZXhDYWxsYmFja1JlZiIsImNzdGF0ZSIsImNyYWRsZUVsZW1lbnRzIiwiZWxlbWVudHMiLCJibG9ja1Njcm9sbFBvcyIsImJsb2NrU2Nyb2xsUHJvcGVydHkiLCJheGlzUmVmIiwic3R5bGUiLCJ0b3AiLCJsZWZ0IiwiaGVhZFJlZiIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nUmlnaHQiLCJicmVha2xpbmVFbnRyaWVzIiwic291cmNlIiwic2Nyb2xsT2Zmc2V0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsInNjcm9sbFBvc2l0aW9ucyIsImlzU2Nyb2xsaW5ndmlld3BvcnRmb3J3YXJkIiwiY3VycmVudHVwZGF0ZSIsInByZXZpb3VzdXBkYXRlIiwiX3ByZXZpb3VzU2Nyb2xsRm9yd2FyZCIsIml0ZW1FbGVtZW50cyIsIm1vZGVsY29udGVudGxpc3QiLCJwcm9wcyIsImluZGV4Iiwic2hpZnRpbmdpbnN0cnVjdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJzaGlmdGluZ2ludGVyc2VjdGlvbnMiLCJjcmFkbGVyZWZlcmVuY2VpbmRleCIsImNyYWRsZWl0ZW1zaGlmdCIsImF4aXNpdGVtc2hpZnQiLCJheGlzcG9zb2Zmc2V0IiwibmV3Q3JhZGxlQWN0dWFsQ29udGVudENvdW50IiwiaGVhZGNoYW5nZSIsInRhaWxjaGFuZ2UiLCJjcmFkbGVzaGlmdGNvdW50IiwiZGVsZXRlZENvbnRlbnRJdGVtcyIsIl9hIiwiaGVhZGNvbnRlbnQiLCJ0YWlsY29udGVudCIsInVwZGF0ZUJsb2NrU2Nyb2xsUG9zIiwic2V0Q3JhZGxlU3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/cradle/contenthandler.tsx\n");

/***/ }),

/***/ "./src/cradle/interrupthandler.tsx":
/*!*****************************************!*\
  !*** ./src/cradle/interrupthandler.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// interruptshandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar resize_observer_1 = __webpack_require__(/*! @juggle/resize-observer */ \"./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n\nvar ResizeObserver = window['ResizeObserver'] || resize_observer_1.ResizeObserver;\n\nvar InterruptHandler =\n/** @class */\nfunction () {\n  function InterruptHandler(cradleParameters) {\n    var _this = this;\n\n    this.isTailCradleInView = false;\n    this.isHeadCradleInView = false; // TODO: stub\n\n    this.cradleresizeobservercallback = function (entries) {\n      if (_this.signals.pauseCradleResizeObserver) return;\n    };\n\n    this.axisBreaklinesObserverCallback = function (entries) {\n      var testrootbounds = entries[0].rootBounds;\n\n      if (testrootbounds.width == 0 && testrootbounds.height == 0) {\n        // reparenting\n        return;\n      }\n\n      if (_this.signals.pauseBreaklinesObserver) {\n        console.log('pauseBreaklinesObserver is TRUE');\n        return;\n      }\n\n      var _a = _this.cradleParameters.handlersRef.current,\n          contentHandler = _a.content,\n          stateHandler = _a.state,\n          scrollHandler = _a.scroll;\n\n      if (stateHandler.isMountedRef.current) {\n        var scrollPositions = scrollHandler.scrollPositions;\n\n        if (scrollPositions.start != scrollPositions.current || scrollPositions.current != scrollPositions.previous) {\n          scrollPositions.previousupdate = scrollPositions.currentupdate;\n          scrollPositions.currentupdate = scrollPositions.current;\n          contentHandler.updateCradleContent(entries, 'breaklinesObserver');\n        }\n      }\n    };\n\n    this.cradleIntersectionObserverCallback = function (entries) {\n      var _a;\n\n      var signals = _this.signals;\n      var stateHandler = _this.cradleParameters.handlersRef.current.state;\n      var contentHandler = _this.cradleParameters.handlersRef.current.content;\n\n      if (signals.pauseCradleIntersectionObserver) {\n        // console.log('returning from intersectionobserver for PAUSE')\n        return;\n      }\n\n      for (var i = 0; i < entries.length; i++) {\n        var entry = entries[i];\n\n        if (entry.target.dataset.type == 'head') {\n          _this.isHeadCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n          ;\n        } else {\n          _this.isTailCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n          ;\n        }\n      }\n\n      _this.signals.repositioningRequired = !_this.isHeadCradleInView && !_this.isTailCradleInView;\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n\n      if (_this.signals.repositioningRequired) // start reposition if no other interrupts are underway\n        {\n          var cradleState = stateHandler.cradleStateRef.current;\n\n          if (!viewportInterruptProperties.isResizing && !((_a = viewportInterruptProperties.portal) === null || _a === void 0 ? void 0 : _a.isReparenting) && !(cradleState == 'resized') && !(cradleState == 'repositioningRender') && !(cradleState == 'repositioningContinuation') && !(cradleState == 'finishreposition') && // !(cradleState == 'updatepositionreferences') &&\n          !(cradleState == 'doreposition') && !(cradleState == 'pivot') && !(cradleState == 'restorescrollposition')) {\n            var element = viewportInterruptProperties.elementref.current;\n\n            if (!element) {\n              console.log('viewport element not set in cradleIntersectionObserverCallback', _this.cradleParameters.cradleInheritedPropertiesRef.current.scrollerID, viewportInterruptProperties);\n              return;\n            } // TODO this is a duplicate setting procedure with viewport.tsx\n\n\n            var rect = element.getBoundingClientRect();\n            var top_1 = rect.top,\n                right = rect.right,\n                bottom = rect.bottom,\n                left = rect.left;\n            var width = right - left,\n                height = bottom - top_1;\n            viewportInterruptProperties.viewportDimensions = {\n              top: top_1,\n              right: right,\n              bottom: bottom,\n              left: left,\n              width: width,\n              height: height\n            }; // update for scrolltracker\n            // signals.pauseCellObserver = true\n\n            signals.pauseBreaklinesObserver = true; // pauseCradleIntersectionObserverRef.current = true\n\n            var cradleContent = contentHandler.content;\n            cradleContent.headModelComponents = [];\n            cradleContent.tailModelComponents = [];\n            cradleContent.headViewComponents = [];\n            cradleContent.tailViewComponents = [];\n            stateHandler.setCradleState('startreposition');\n          }\n        }\n    }; // the async callback from IntersectionObserver.\n    // private cellintersectionobservercallback = (entries)=>{\n    //     return // prepare for switch to breakline interrupts\n    //     const testrootbounds = entries[0].rootBounds\n    //     if ((testrootbounds.width == 0) && (testrootbounds.height == 0)) { // reparenting\n    //         return\n    //     }\n    //     // const viewportInterruptProperties = this.cradleParameters.viewportInterruptPropertiesRef.current\n    //     const {content:contentHandler,state:stateHandler,scroll:scrollHandler} = \n    //         this.cradleParameters.handlersRef.current\n    //     // const contentHandler = this.cradleParameters.handlersRef.current.content\n    //     // const stateHandler = this.cradleParameters.handlersRef.current.state\n    //     // const scrollHandler = this.cradleParameters.handlersRef.current.scroll\n    //     let movedentries = []\n    //     for (let entry of entries) {\n    //         // console.log('entry dataset',Object.assign({},entry.target.dataset))\n    //         if (entry.target.dataset.initialized) {\n    //             movedentries.push(entry)\n    //         } else {\n    //             entry.target.dataset.initialized = 'true'\n    //         }\n    //     }\n    //     // TODO: moved this above initialization; no apparent difference to bug\n    //     if (this.signals.pauseCellObserver) { \n    //         return\n    //     }\n    //     // TODO: set scrollPositions.atLastUpdateCall\n    //     if (stateHandler.isMountedRef.current) {\n    //         const { scrollPositions } = scrollHandler\n    //         if ((scrollPositions.start != scrollPositions.current) ||\n    //             (scrollPositions.current != scrollPositions.previous)) {\n    //             scrollPositions.previousupdate = scrollPositions.currentupdate\n    //             scrollPositions.currentupdate = scrollPositions.current\n    //             contentHandler.updateCradleContent(movedentries,'cellObserver')\n    //         }\n    //     }\n    // }\n    // viewportResize = {\n    //    observer:null,\n    //    callback:null,\n    //    createObserver:() => {\n    //      this.viewportResize.observer = new ResizeObserver(this.viewportResize.callback)\n    //      return this.viewportResize.observer\n    //    }\n    // }\n    // for adjusting to content re-sizing\n\n\n    this.cradleResize = {\n      observer: null,\n      callback: this.cradleresizeobservercallback,\n      createObserver: function createObserver() {\n        _this.cradleResize.observer = new ResizeObserver(_this.cradleResize.callback);\n        return _this.cradleResize.observer;\n      }\n    };\n    this.cradleIntersect = {\n      observer: null,\n      callback: this.cradleIntersectionObserverCallback,\n      createObserver: function createObserver() {\n        var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n        _this.cradleIntersect.observer = new IntersectionObserver(_this.cradleIntersect.callback, {\n          root: viewportInterruptProperties.elementref.current,\n          threshold: 0\n        });\n        return _this.cradleIntersect.observer;\n      }\n    };\n    this.axisBreaklinesIntersect = {\n      observer: null,\n      callback: this.axisBreaklinesObserverCallback,\n      createObserver: function createObserver() {\n        var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n        _this.axisBreaklinesIntersect.observer = new IntersectionObserver(_this.axisBreaklinesIntersect.callback, {\n          root: viewportInterruptProperties.elementref.current,\n          threshold: 0\n        });\n        return _this.axisBreaklinesIntersect.observer;\n      }\n    }; // cellIntersect = {\n    //     observer:null,\n    //     callback:null,\n    //     createObserver:() => {\n    //         let viewportInterruptProperties = this.cradleParameters.viewportInterruptPropertiesRef.current\n    //         this.cellIntersect.observer = new IntersectionObserver(\n    //             this.cellintersectionobservercallback,\n    //             {\n    //                 root:viewportInterruptProperties.elementref.current, \n    //                 threshold:this.cradleParameters.CradleInternalPropertiesRef.current.cellObserverThreshold,\n    //             } \n    //         )\n    //         return this.cellIntersect.observer\n    //     }\n    // }\n\n    this.signals = {\n      repositioningRequired: false,\n      // pauseCellObserver: false,\n      pauseBreaklinesObserver: false,\n      pauseCradleIntersectionObserver: false,\n      pauseCradleResizeObserver: false,\n      pauseScrollingEffects: false\n    };\n    this.cradleParameters = cradleParameters;\n  }\n\n  return InterruptHandler;\n}();\n\nexports[\"default\"] = InterruptHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/interrupthandler.tsx\n");

/***/ }),

/***/ "./src/cradle/portalhandler.tsx":
/*!**************************************!*\
  !*** ./src/cradle/portalhandler.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // portalhandler.tsx\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PortalList = exports.PortalWrapper = exports.PortalHandler = void 0;\n/*\n    The infinite list scroller stores user cell data in a central hidden portal cache for each\n    infinitegridscroller root, from whence the data is pulled into the relevant CellShell for display\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ \"./node_modules/react-reverse-portal/dist/web/index.js\"); // global scroller data, organized by session scrollerID\n\n\nvar PortalHandler =\n/** @class */\nfunction () {\n  function PortalHandler() {\n    //===========================[ REPOSITORY AND LIST MANAGEMENT ]==================================\n    var _this = this;\n\n    this.scrollerProps = {\n      setListState: null,\n      modified: false,\n      portalMetadataMap: new Map(),\n      portalMap: new Map(),\n      portalList: null\n    }; // set state of the PortalList component of the scroller to trigger render\n\n    this.renderPortalList = function () {\n      if (_this.scrollerProps.modified) {\n        _this.scrollerProps.portalList = Array.from(_this.scrollerProps.portalMap.values());\n        _this.scrollerProps.modified = false;\n      }\n\n      _this.scrollerProps.setListState(); // trigger display update\n\n    };\n  } // initialize scroller repository\n\n\n  PortalHandler.prototype.resetScrollerPortalRepository = function () {\n    // keep the setListState callback\n    this.scrollerProps.portalMap.clear();\n    this.scrollerProps.portalMetadataMap.clear();\n    this.scrollerProps.portalList = null;\n    this.scrollerProps.modified = false;\n  }; // ==========================[ INDIVIDUAL PORTAL MANAGEMENT ]============================\n  // add a portal list item. The index is the scroller's portal dataset index\n\n\n  PortalHandler.prototype.fetchOrCreatePortal = function (index, content) {\n    if (this.hasPortal(index)) {\n      return this.getPortal(index);\n    } // if not found, create new portal\n\n\n    var _a = createInPortal(content, index),\n        inportal = _a[0],\n        reverseportal = _a[1];\n\n    this.scrollerProps.portalMap.set(index, react_1[\"default\"].createElement(exports.PortalWrapper, {\n      inportal: inportal,\n      key: index,\n      index: index\n    }));\n    this.scrollerProps.modified = true;\n    var portalMetadata = {\n      reverseportal: reverseportal,\n      isReparenting: false,\n      hasusercontent: false\n    };\n    this.scrollerProps.portalMetadataMap.set(index, portalMetadata);\n    this.renderPortalList();\n    return portalMetadata;\n  }; // update the content of a portal list item\n\n\n  PortalHandler.prototype.updatePortal = function (index, content) {\n    var portalMetadata = this.getPortal(index);\n    var portalComponent = updateInPortal(content, portalMetadata.reverseportal);\n    this.scrollerProps.portalMap.set(index, react_1[\"default\"].createElement(exports.PortalWrapper, {\n      inportal: portalComponent,\n      key: index,\n      index: index\n    }));\n    this.scrollerProps.modified = true;\n    this.renderPortalList();\n    return portalMetadata;\n  }; // delete a portal list item\n\n\n  PortalHandler.prototype.deletePortal = function (index) {\n    this.scrollerProps.portalMetadataMap[\"delete\"](index);\n    this.scrollerProps.portalMap[\"delete\"](index);\n    this.scrollerProps.modified = true;\n  }; // query existence of a portal list item\n\n\n  PortalHandler.prototype.hasPortal = function (index) {\n    return this.scrollerProps.portalMetadataMap.has(index);\n  }; // get a portal list item's meta data\n\n\n  PortalHandler.prototype.getPortal = function (index) {\n    return this.scrollerProps.portalMetadataMap.get(index);\n  };\n\n  return PortalHandler;\n}();\n\nexports.PortalHandler = PortalHandler; // ==========================[ Utility functions ]============================\n// get a react-reverse-portal InPortal component, with its metadata\n// with user content and container\n\nvar createInPortal = function createInPortal(content, index) {\n  // console.log('creating inportal index, scrollerID',index,scrollerID)\n  var reversePortal = (0, react_reverse_portal_1.createHtmlPortalNode)(); // reversePortal.element = container\n\n  var container = reversePortal.element;\n  container.style.inset = '0px';\n  container.style.position = 'absolute';\n  container.dataset.type = 'portalcontainer';\n  container.dataset.index = index; // container.dataset.scrollerid = scrollerID\n\n  container.setAttribute('key', index);\n  return [react_1[\"default\"].createElement(react_reverse_portal_1.InPortal, {\n    node: reversePortal\n  }, content), reversePortal];\n}; // update an InPortal component's user content\n\n\nvar updateInPortal = function updateInPortal(content, reversePortal) {\n  return react_1[\"default\"].createElement(react_reverse_portal_1.InPortal, {\n    node: reversePortal\n  }, content);\n}; // ========================[ Utility components ]==============================\n\n\nvar wrapperstyle = {\n  display: 'none'\n}; // static; should take same dimensions as container CellShell\n// hidden portal wrapper for clarity and usage of conventional react relisting services\n\nvar PortalWrapper = function PortalWrapper(_a) {\n  var inportal = _a.inportal,\n      index = _a.index;\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'portalwrapper',\n    \"data-index\": index,\n    style: wrapperstyle,\n    key: index\n  }, inportal);\n};\n\nexports.PortalWrapper = PortalWrapper; // portal list component for rapid relisting of updates, using external callback for set state\n\nvar PortalList = function PortalList(_a) {\n  var scrollerProps = _a.scrollerProps;\n\n  var _b = (0, react_1.useState)(null),\n      portalList = _b[0],\n      setPortalList = _b[1];\n\n  var isMountedRef = (0, react_1.useRef)(true);\n  (0, react_1.useEffect)(function () {\n    scrollerProps.setListState = function () {\n      isMountedRef.current && setPortalList(scrollerProps.portalList);\n    };\n\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  return portalList;\n};\n\nexports.PortalList = PortalList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3BvcnRhbGhhbmRsZXIudHN4LmpzIiwibWFwcGluZ3MiOiJDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7O0FBS0E7O0FBRUEsc0ksQ0FFQTs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFFSTtBQUZKOztBQUlJLHlCQUFnQjtBQUNaQSxrQkFBWSxFQUFDLElBREQ7QUFFWkMsY0FBUSxFQUFDLEtBRkc7QUFHWkMsdUJBQWlCLEVBQUMsSUFBSUMsR0FBSixFQUhOO0FBSVpDLGVBQVMsRUFBQyxJQUFJRCxHQUFKLEVBSkU7QUFLWkUsZ0JBQVUsRUFBQztBQUxDLEtBQWhCLENBSkosQ0F3Qkk7O0FBQ0EsNEJBQW1CO0FBRWYsVUFBSUMsS0FBSSxDQUFDQyxhQUFMLENBQW1CTixRQUF2QixFQUFpQztBQUM3QkssYUFBSSxDQUFDQyxhQUFMLENBQW1CRixVQUFuQixHQUFnQ0csS0FBSyxDQUFDQyxJQUFOLENBQVdILEtBQUksQ0FBQ0MsYUFBTCxDQUFtQkgsU0FBbkIsQ0FBNkJNLE1BQTdCLEVBQVgsQ0FBaEM7QUFDQUosYUFBSSxDQUFDQyxhQUFMLENBQW1CTixRQUFuQixHQUE4QixLQUE5QjtBQUNIOztBQUVESyxXQUFJLENBQUNDLGFBQUwsQ0FBbUJQLFlBQW5CLEdBUGUsQ0FPbUI7O0FBRXJDLEtBVEQ7QUE4RUgsR0F2R0QsQ0FZSTs7O0FBRUFXO0FBRUk7QUFDQSxTQUFLSixhQUFMLENBQW1CSCxTQUFuQixDQUE2QlEsS0FBN0I7QUFDQSxTQUFLTCxhQUFMLENBQW1CTCxpQkFBbkIsQ0FBcUNVLEtBQXJDO0FBQ0EsU0FBS0wsYUFBTCxDQUFtQkYsVUFBbkIsR0FBZ0MsSUFBaEM7QUFDQSxTQUFLRSxhQUFMLENBQW1CTixRQUFuQixHQUE4QixLQUE5QjtBQUVILEdBUkQsQ0FkSixDQW9DSTtBQUVBOzs7QUFDQVUsMERBQW9CRSxLQUFwQixFQUEyQkMsT0FBM0IsRUFBa0M7QUFFOUIsUUFB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QUFDRixVQUFmLENBQXJDO0FBQ0gsS0FGRDs7QUFJQSxXQUFPO0FBQU80QyxrQkFBWSxDQUFDQyxPQUFiLEdBQXVCLEtBQXZCO0FBQTZCLEtBQTNDO0FBRUgsR0FSRCxFQVFFLEVBUkY7QUFVQSxTQUFPN0MsVUFBUDtBQUNILENBaEJNOztBQUFNaUIsa0JBQUFBLEdBQVV5QixVQUFWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9jcmFkbGUvcG9ydGFsaGFuZGxlci50c3g/YTc0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwb3J0YWxoYW5kbGVyLnRzeFxuXG4vKlxuICAgIFRoZSBpbmZpbml0ZSBsaXN0IHNjcm9sbGVyIHN0b3JlcyB1c2VyIGNlbGwgZGF0YSBpbiBhIGNlbnRyYWwgaGlkZGVuIHBvcnRhbCBjYWNoZSBmb3IgZWFjaFxuICAgIGluZmluaXRlZ3JpZHNjcm9sbGVyIHJvb3QsIGZyb20gd2hlbmNlIHRoZSBkYXRhIGlzIHB1bGxlZCBpbnRvIHRoZSByZWxldmFudCBDZWxsU2hlbGwgZm9yIGRpc3BsYXlcbiovXG5cbmltcG9ydCBSZWFjdCwge3VzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZn0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IGNyZWF0ZUh0bWxQb3J0YWxOb2RlLCBJblBvcnRhbCB9IGZyb20gJ3JlYWN0LXJldmVyc2UtcG9ydGFsJ1xuXG4vLyBnbG9iYWwgc2Nyb2xsZXIgZGF0YSwgb3JnYW5pemVkIGJ5IHNlc3Npb24gc2Nyb2xsZXJJRFxuZXhwb3J0IGNsYXNzIFBvcnRhbEhhbmRsZXIge1xuXG4gICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT1bIFJFUE9TSVRPUlkgQU5EIExJU1QgTUFOQUdFTUVOVCBdPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgc2Nyb2xsZXJQcm9wcyA9IHtcbiAgICAgICAgc2V0TGlzdFN0YXRlOm51bGwsXG4gICAgICAgIG1vZGlmaWVkOmZhbHNlLFxuICAgICAgICBwb3J0YWxNZXRhZGF0YU1hcDpuZXcgTWFwKCksXG4gICAgICAgIHBvcnRhbE1hcDpuZXcgTWFwKCksXG4gICAgICAgIHBvcnRhbExpc3Q6bnVsbFxuICAgIH1cblxuICAgIC8vIGluaXRpYWxpemUgc2Nyb2xsZXIgcmVwb3NpdG9yeVxuXG4gICAgcmVzZXRTY3JvbGxlclBvcnRhbFJlcG9zaXRvcnkoKSB7XG5cbiAgICAgICAgLy8ga2VlcCB0aGUgc2V0TGlzdFN0YXRlIGNhbGxiYWNrXG4gICAgICAgIHRoaXMuc2Nyb2xsZXJQcm9wcy5wb3J0YWxNYXAuY2xlYXIoKSBcbiAgICAgICAgdGhpcy5zY3JvbGxlclByb3BzLnBvcnRhbE1ldGFkYXRhTWFwLmNsZWFyKClcbiAgICAgICAgdGhpcy5zY3JvbGxlclByb3BzLnBvcnRhbExpc3QgPSBudWxsXG4gICAgICAgIHRoaXMuc2Nyb2xsZXJQcm9wcy5tb2RpZmllZCA9IGZhbHNlXG5cbiAgICB9XG5cbiAgICAvLyBzZXQgc3RhdGUgb2YgdGhlIFBvcnRhbExpc3QgY29tcG9uZW50IG9mIHRoZSBzY3JvbGxlciB0byB0cmlnZ2VyIHJlbmRlclxuICAgIHJlbmRlclBvcnRhbExpc3QgPSAoKSA9PiB7XG5cbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsZXJQcm9wcy5tb2RpZmllZCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxlclByb3BzLnBvcnRhbExpc3QgPSBBcnJheS5mcm9tKHRoaXMuc2Nyb2xsZXJQcm9wcy5wb3J0YWxNYXAudmFsdWVzKCkpXG4gICAgICAgICAgICB0aGlzLnNjcm9sbGVyUHJvcHMubW9kaWZpZWQgPSBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zY3JvbGxlclByb3BzLnNldExpc3RTdGF0ZSgpIC8vIHRyaWdnZXIgZGlzcGxheSB1cGRhdGVcblxuICAgIH1cblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09WyBJTkRJVklEVUFMIFBPUlRBTCBNQU5BR0VNRU5UIF09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAvLyBhZGQgYSBwb3J0YWwgbGlzdCBpdGVtLiBUaGUgaW5kZXggaXMgdGhlIHNjcm9sbGVyJ3MgcG9ydGFsIGRhdGFzZXQgaW5kZXhcbiAgICBmZXRjaE9yQ3JlYXRlUG9ydGFsKGluZGV4LCBjb250ZW50KSB7IC8vIGNvbnRlbnQgaXMgdXNlZCBmb3IgbmV3IHBvcnRhbCBvbmx5XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzUG9ydGFsKGluZGV4KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UG9ydGFsKGluZGV4KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbm90IGZvdW5kLCBjcmVhdGUgbmV3IHBvcnRhbFxuXG4gICAgICAgIGNvbnN0IFtpbnBvcnRhbCxyZXZlcnNlcG9ydGFsXSA9IGNyZWF0ZUluUG9ydGFsKGNvbnRlbnQsIGluZGV4KVxuXG4gICAgICAgIHRoaXMuc2Nyb2xsZXJQcm9wcy5wb3J0YWxNYXAuc2V0KGluZGV4LDxQb3J0YWxXcmFwcGVyIGlucG9ydGFsID0ge2lucG9ydGFsfSBrZXkgPSB7aW5kZXh9IGluZGV4ID0ge2luZGV4fS8+KVxuICAgICAgICB0aGlzLnNjcm9sbGVyUHJvcHMubW9kaWZpZWQgPSB0cnVlXG5cbiAgICAgICAgY29uc3QgcG9ydGFsTWV0YWRhdGEgPSB7XG4gICAgICAgICAgICByZXZlcnNlcG9ydGFsLCBcbiAgICAgICAgICAgIGlzUmVwYXJlbnRpbmc6ZmFsc2UsXG4gICAgICAgICAgICBoYXN1c2VyY29udGVudDpmYWxzZSBcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2Nyb2xsZXJQcm9wcy5wb3J0YWxNZXRhZGF0YU1hcC5zZXQoaW5kZXgsIHBvcnRhbE1ldGFkYXRhKVxuXG4gICAgICAgIHRoaXMucmVuZGVyUG9ydGFsTGlzdCgpXG5cbiAgICAgICAgcmV0dXJuIHBvcnRhbE1ldGFkYXRhXG5cbiAgICB9XG5cbiAgICAvLyB1cGRhdGUgdGhlIGNvbnRlbnQgb2YgYSBwb3J0YWwgbGlzdCBpdGVtXG4gICAgdXBkYXRlUG9ydGFsKGluZGV4LCBjb250ZW50KSB7XG4gICAgICAgIGNvbnN0IHBvcnRhbE1ldGFkYXRhID0gdGhpcy5nZXRQb3J0YWwoaW5kZXgpXG5cbiAgICAgICAgY29uc3QgcG9ydGFsQ29tcG9uZW50ID0gdXBkYXRlSW5Qb3J0YWwoY29udGVudCwgcG9ydGFsTWV0YWRhdGEucmV2ZXJzZXBvcnRhbCApXG5cbiAgICAgICAgdGhpcy5zY3JvbGxlclByb3BzLnBvcnRhbE1hcC5zZXQoaW5kZXgsPFBvcnRhbFdyYXBwZXIgaW5wb3J0YWwgPSB7cG9ydGFsQ29tcG9uZW50fSBrZXkgPSB7aW5kZXh9IGluZGV4ID0ge2luZGV4fS8+KVxuICAgICAgICB0aGlzLnNjcm9sbGVyUHJvcHMubW9kaWZpZWQgPSB0cnVlXG5cbiAgICAgICAgdGhpcy5yZW5kZXJQb3J0YWxMaXN0KClcblxuICAgICAgICByZXR1cm4gcG9ydGFsTWV0YWRhdGFcbiAgICB9XG5cbiAgICAvLyBkZWxldGUgYSBwb3J0YWwgbGlzdCBpdGVtXG4gICAgZGVsZXRlUG9ydGFsKGluZGV4KSB7XG5cbiAgICAgICAgdGhpcy5zY3JvbGxlclByb3BzLnBvcnRhbE1ldGFkYXRhTWFwLmRlbGV0ZShpbmRleClcbiAgICAgICAgdGhpcy5zY3JvbGxlclByb3BzLnBvcnRhbE1hcC5kZWxldGUoaW5kZXgpXG4gICAgICAgIHRoaXMuc2Nyb2xsZXJQcm9wcy5tb2RpZmllZCA9IHRydWVcblxuICAgIH1cblxuICAgIC8vIHF1ZXJ5IGV4aXN0ZW5jZSBvZiBhIHBvcnRhbCBsaXN0IGl0ZW1cbiAgICBoYXNQb3J0YWwoaW5kZXgpIHtcblxuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxlclByb3BzLnBvcnRhbE1ldGFkYXRhTWFwLmhhcyhpbmRleClcblxuICAgIH1cblxuICAgIC8vIGdldCBhIHBvcnRhbCBsaXN0IGl0ZW0ncyBtZXRhIGRhdGFcbiAgICBnZXRQb3J0YWwoaW5kZXgpIHtcblxuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxlclByb3BzLnBvcnRhbE1ldGFkYXRhTWFwLmdldChpbmRleClcblxuICAgIH1cblxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVsgVXRpbGl0eSBmdW5jdGlvbnMgXT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gZ2V0IGEgcmVhY3QtcmV2ZXJzZS1wb3J0YWwgSW5Qb3J0YWwgY29tcG9uZW50LCB3aXRoIGl0cyBtZXRhZGF0YVxuLy8gd2l0aCB1c2VyIGNvbnRlbnQgYW5kIGNvbnRhaW5lclxuY29uc3QgY3JlYXRlSW5Qb3J0YWwgPSAoY29udGVudCwgaW5kZXgpID0+IHtcblxuICAgIC8vIGNvbnNvbGUubG9nKCdjcmVhdGluZyBpbnBvcnRhbCBpbmRleCwgc2Nyb2xsZXJJRCcsaW5kZXgsc2Nyb2xsZXJJRClcbiAgICBsZXQgcmV2ZXJzZVBvcnRhbCA9IGNyZWF0ZUh0bWxQb3J0YWxOb2RlKClcbiAgICAvLyByZXZlcnNlUG9ydGFsLmVsZW1lbnQgPSBjb250YWluZXJcbiAgICBsZXQgY29udGFpbmVyID0gcmV2ZXJzZVBvcnRhbC5lbGVtZW50XG4gICAgY29udGFpbmVyLnN0eWxlLmluc2V0ID0gJzBweCcgXG4gICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xuICAgIGNvbnRhaW5lci5kYXRhc2V0LnR5cGUgPSAncG9ydGFsY29udGFpbmVyJ1xuICAgIGNvbnRhaW5lci5kYXRhc2V0LmluZGV4ID0gaW5kZXhcbiAgICAvLyBjb250YWluZXIuZGF0YXNldC5zY3JvbGxlcmlkID0gc2Nyb2xsZXJJRFxuICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2tleScsaW5kZXgpXG5cblxuICAgIHJldHVybiBbPEluUG9ydGFsIG5vZGUgPSB7cmV2ZXJzZVBvcnRhbH0+XG4gICAgICAgIHtjb250ZW50fVxuICAgIDwvSW5Qb3J0YWw+LHJldmVyc2VQb3J0YWxdXG5cbn0gICAgIFxuXG4vLyB1cGRhdGUgYW4gSW5Qb3J0YWwgY29tcG9uZW50J3MgdXNlciBjb250ZW50XG5jb25zdCB1cGRhdGVJblBvcnRhbCA9IChjb250ZW50LCByZXZlcnNlUG9ydGFsKSA9PiB7XG5cbiAgICByZXR1cm4gPEluUG9ydGFsIG5vZGUgPSB7cmV2ZXJzZVBvcnRhbH0gPlxuICAgICAgICB7IGNvbnRlbnQgfVxuICAgIDwvSW5Qb3J0YWw+XG5cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09WyBVdGlsaXR5IGNvbXBvbmVudHMgXT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5jb25zdCB3cmFwcGVyc3R5bGUgPSB7ZGlzcGxheTonbm9uZSd9IC8vIHN0YXRpYzsgc2hvdWxkIHRha2Ugc2FtZSBkaW1lbnNpb25zIGFzIGNvbnRhaW5lciBDZWxsU2hlbGxcblxuLy8gaGlkZGVuIHBvcnRhbCB3cmFwcGVyIGZvciBjbGFyaXR5IGFuZCB1c2FnZSBvZiBjb252ZW50aW9uYWwgcmVhY3QgcmVsaXN0aW5nIHNlcnZpY2VzXG5leHBvcnQgY29uc3QgUG9ydGFsV3JhcHBlciA9ICh7IGlucG9ydGFsLCBpbmRleCB9KSA9PiB7XG5cbiAgICByZXR1cm4gPGRpdiBkYXRhLXR5cGUgPSAncG9ydGFsd3JhcHBlcicgZGF0YS1pbmRleCA9IHsgaW5kZXggfSBzdHlsZSA9IHsgd3JhcHBlcnN0eWxlIH0ga2V5ID0geyBpbmRleCB9PlxuICAgICAgICB7IGlucG9ydGFsIH1cbiAgICA8L2Rpdj5cblxufVxuXG4vLyBwb3J0YWwgbGlzdCBjb21wb25lbnQgZm9yIHJhcGlkIHJlbGlzdGluZyBvZiB1cGRhdGVzLCB1c2luZyBleHRlcm5hbCBjYWxsYmFjayBmb3Igc2V0IHN0YXRlXG5leHBvcnQgY29uc3QgUG9ydGFsTGlzdCA9ICh7IHNjcm9sbGVyUHJvcHMgfSkgPT4ge1xuXG4gICAgY29uc3QgW3BvcnRhbExpc3QsIHNldFBvcnRhbExpc3RdID0gdXNlU3RhdGUobnVsbClcbiAgICBjb25zdCBpc01vdW50ZWRSZWYgPSB1c2VSZWYodHJ1ZSlcblxuICAgIHVzZUVmZmVjdCgoKT0+e1xuXG4gICAgICAgIHNjcm9sbGVyUHJvcHMuc2V0TGlzdFN0YXRlID0gKCk9PntcbiAgICAgICAgICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ICYmIHNldFBvcnRhbExpc3Qoc2Nyb2xsZXJQcm9wcy5wb3J0YWxMaXN0KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtpc01vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlfVxuXG4gICAgfSxbXSkgXG5cbiAgICByZXR1cm4gcG9ydGFsTGlzdFxufVxuIl0sIm5hbWVzIjpbInNldExpc3RTdGF0ZSIsIm1vZGlmaWVkIiwicG9ydGFsTWV0YWRhdGFNYXAiLCJNYXAiLCJwb3J0YWxNYXAiLCJwb3J0YWxMaXN0IiwiX3RoaXMiLCJzY3JvbGxlclByb3BzIiwiQXJyYXkiLCJmcm9tIiwidmFsdWVzIiwiUG9ydGFsSGFuZGxlciIsImNsZWFyIiwiaW5kZXgiLCJjb250ZW50IiwiaGFzUG9ydGFsIiwiZ2V0UG9ydGFsIiwiY3JlYXRlSW5Qb3J0YWwiLCJpbnBvcnRhbCIsInJldmVyc2Vwb3J0YWwiLCJzZXQiLCJyZWFjdF8xIiwiZXhwb3J0cyIsImtleSIsInBvcnRhbE1ldGFkYXRhIiwiaXNSZXBhcmVudGluZyIsImhhc3VzZXJjb250ZW50IiwicmVuZGVyUG9ydGFsTGlzdCIsInBvcnRhbENvbXBvbmVudCIsInVwZGF0ZUluUG9ydGFsIiwiaGFzIiwiZ2V0IiwicmV2ZXJzZVBvcnRhbCIsImNvbnRhaW5lciIsImVsZW1lbnQiLCJzdHlsZSIsImluc2V0IiwicG9zaXRpb24iLCJkYXRhc2V0IiwidHlwZSIsInNldEF0dHJpYnV0ZSIsInJlYWN0X3JldmVyc2VfcG9ydGFsXzEiLCJub2RlIiwid3JhcHBlcnN0eWxlIiwiZGlzcGxheSIsIlBvcnRhbFdyYXBwZXIiLCJfYSIsIlBvcnRhbExpc3QiLCJzZXRQb3J0YWxMaXN0IiwiaXNNb3VudGVkUmVmIiwiY3VycmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/cradle/portalhandler.tsx\n");

/***/ }),

/***/ "./src/cradle/scaffoldhandler.tsx":
/*!****************************************!*\
  !*** ./src/cradle/scaffoldhandler.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // cradlehandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar ScaffoldHandler =\n/** @class */\nfunction () {\n  function ScaffoldHandler(cradleParameters) {\n    /*\n       ItemIndexReference is the sequential index of first item of the cradle tail\n       CradlePosOffset is the pixel offset of the cradle axis from the edge of the viewport\n       blockScrollPos is the scrollPos of the scrollblock in relation to the viewport\n       progression is scroll -> next\n    */\n    this.cradleReferenceData = {\n      scrollImpliedItemIndexReference: null,\n      scrollImpliedCradlePosOffset: null,\n      nextItemIndexReference: null,\n      nextCradlePosOffset: null,\n      // to set scrollPos after doreposition, or\n      // to restore scrollTop or scrollLeft after clobbered by DOM\n      blockScrollPos: null,\n      blockScrollProperty: null\n    };\n    this.cradleParameters = cradleParameters;\n    var _a = cradleParameters.CradleInternalPropertiesRef.current.cradleElementsRef.current,\n        axisRef = _a.axisRef,\n        headRef = _a.headRef,\n        tailRef = _a.tailRef,\n        headBreaklineRef = _a.headBreaklineRef,\n        tailBreaklineRef = _a.tailBreaklineRef;\n    this.elements = {\n      axisRef: axisRef,\n      headRef: headRef,\n      tailRef: tailRef,\n      headBreaklineRef: headBreaklineRef,\n      tailBreaklineRef: tailBreaklineRef\n    };\n    var _b = this.cradleParameters.cradleInheritedPropertiesRef.current,\n        defaultVisibleIndex = _b.defaultVisibleIndex,\n        listsize = _b.listsize,\n        padding = _b.padding; // progression of references: scroll->next\n\n    this.cradleReferenceData.scrollImpliedItemIndexReference = Math.min(defaultVisibleIndex, listsize - 1) || 0;\n    this.cradleReferenceData.scrollImpliedCradlePosOffset = padding;\n    this.cradleReferenceData.nextItemIndexReference = this.cradleReferenceData.scrollImpliedItemIndexReference;\n    this.cradleReferenceData.nextCradlePosOffset = this.cradleReferenceData.scrollImpliedCradlePosOffset;\n  }\n\n  return ScaffoldHandler;\n}();\n\nexports[\"default\"] = ScaffoldHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3NjYWZmb2xkaGFuZGxlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7QUFDQTs7Ozs7O0FBRUE7QUFBQTtBQUFBO0FBRUksMkJBQVlBLGdCQUFaLEVBQTRCO0FBMEI3Qjs7Ozs7O0FBTUEsK0JBQXNCO0FBRW5CQyxxQ0FBK0IsRUFBQyxJQUZiO0FBR25CQyxrQ0FBNEIsRUFBQyxJQUhWO0FBS25CQyw0QkFBc0IsRUFBQyxJQUxKO0FBTW5CQyx5QkFBbUIsRUFBQyxJQU5EO0FBUW5CO0FBQ0E7QUFDQUMsb0JBQWMsRUFBQyxJQVZJO0FBV25CQyx5QkFBbUIsRUFBQztBQVhELEtBQXRCO0FBOUJJLFNBQUtOLGdCQUFMLEdBQXdCQSxnQkFBeEI7QUFFTSxhQUNIQSxnQkFBZ0IsQ0FBQ08sMkJBQWpCLENBQTZDQyxPQUE3QyxDQUFxREMsaUJBQXJELENBQXVFRCxPQURwRTtBQUFBLFFBQUNFLE9BQU8sYUFBUjtBQUFBLFFBQVVDLE9BQU8sYUFBakI7QUFBQSxRQUFtQkMsT0FBTyxhQUExQjtBQUFBLFFBQTJCQyxnQkFBZ0Isc0JBQTNDO0FBQUEsUUFBNENDLGdCQUFnQixzQkFBNUQ7QUFFTixTQUFLQyxRQUFMLEdBQWdCO0FBQ2JMLGFBQU8sU0FETTtBQUViQyxhQUFPLFNBRk07QUFHYkMsYUFBTyxTQUhNO0FBSWJDLHNCQUFnQixrQkFKSDtBQUtiQyxzQkFBZ0I7QUFMSCxLQUFoQjtBQVFNLGFBQTJDLEtBQUtkLGdCQUFMLENBQXNCZ0IsNEJBQXRCLENBQW1EUixPQUE5RjtBQUFBLFFBQUNTLG1CQUFtQix5QkFBcEI7QUFBQSxRQUFzQkMsUUFBUSxjQUE5QjtBQUFBLFFBQWdDQyxPQUFPLGFBQXZDLENBZG1CLENBZ0J6Qjs7QUFDQSxTQUFLQyxtQkFBTCxDQUF5Qm5CLCtCQUF6QixHQUE0RG9CLElBQUksQ0FBQ0MsR0FBTCxDQUFTTCxtQkFBVCxFQUE4QkMsUUFBUSxHQUFHLENBQXpDLEtBQWdELENBQTVHO0FBQ0EsU0FBS0UsbUJBQUwsQ0FBeUJsQiw0QkFBekIsR0FBd0RpQixPQUF4RDtBQUNBLFNBQUtDLG1CQUFMLENBQXlCakIsc0JBQXpCLEdBQWtELEtBQUtpQixtQkFBTCxDQUF5Qm5CLCtCQUEzRTtBQUNBLFNBQUttQixtQkFBTCxDQUF5QmhCLG1CQUF6QixHQUErQyxLQUFLZ0IsbUJBQUwsQ0FBeUJsQiw0QkFBeEU7QUFFRjs7QUEyQkw7QUFBQyxDQW5ERCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvY3JhZGxlL3NjYWZmb2xkaGFuZGxlci50c3g/ZmMyZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmFkbGVoYW5kbGVyLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDIxIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjYWZmb2xkSGFuZGxlciB7IFxuXG4gICAgY29uc3RydWN0b3IoY3JhZGxlUGFyYW1ldGVycykge1xuXG4gICAgICAgdGhpcy5jcmFkbGVQYXJhbWV0ZXJzID0gY3JhZGxlUGFyYW1ldGVyc1xuXG4gICAgICAgY29uc3Qge2F4aXNSZWYsIGhlYWRSZWYsIHRhaWxSZWYsaGVhZEJyZWFrbGluZVJlZix0YWlsQnJlYWtsaW5lUmVmfSA9IFxuICAgICAgICAgIGNyYWRsZVBhcmFtZXRlcnMuQ3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzUmVmLmN1cnJlbnQuY3JhZGxlRWxlbWVudHNSZWYuY3VycmVudFxuICAgICAgIHRoaXMuZWxlbWVudHMgPSB7XG4gICAgICAgICAgYXhpc1JlZixcbiAgICAgICAgICBoZWFkUmVmLFxuICAgICAgICAgIHRhaWxSZWYsXG4gICAgICAgICAgaGVhZEJyZWFrbGluZVJlZixcbiAgICAgICAgICB0YWlsQnJlYWtsaW5lUmVmXG4gICAgICAgfVxuXG4gICAgICAgY29uc3Qge2RlZmF1bHRWaXNpYmxlSW5kZXgsIGxpc3RzaXplLCBwYWRkaW5nfSA9IHRoaXMuY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmLmN1cnJlbnRcblxuICAgICAgIC8vIHByb2dyZXNzaW9uIG9mIHJlZmVyZW5jZXM6IHNjcm9sbC0+bmV4dFxuICAgICAgIHRoaXMuY3JhZGxlUmVmZXJlbmNlRGF0YS5zY3JvbGxJbXBsaWVkSXRlbUluZGV4UmVmZXJlbmNlID0gKE1hdGgubWluKGRlZmF1bHRWaXNpYmxlSW5kZXgsKGxpc3RzaXplIC0gMSkpIHx8IDApXG4gICAgICAgdGhpcy5jcmFkbGVSZWZlcmVuY2VEYXRhLnNjcm9sbEltcGxpZWRDcmFkbGVQb3NPZmZzZXQgPSBwYWRkaW5nXG4gICAgICAgdGhpcy5jcmFkbGVSZWZlcmVuY2VEYXRhLm5leHRJdGVtSW5kZXhSZWZlcmVuY2UgPSB0aGlzLmNyYWRsZVJlZmVyZW5jZURhdGEuc2Nyb2xsSW1wbGllZEl0ZW1JbmRleFJlZmVyZW5jZVxuICAgICAgIHRoaXMuY3JhZGxlUmVmZXJlbmNlRGF0YS5uZXh0Q3JhZGxlUG9zT2Zmc2V0ID0gdGhpcy5jcmFkbGVSZWZlcmVuY2VEYXRhLnNjcm9sbEltcGxpZWRDcmFkbGVQb3NPZmZzZXRcblxuICAgIH1cblxuICAgIGNyYWRsZVBhcmFtZXRlcnMgLy8gc3RhbmRhcmQgZm9yIGhhbmRsZXJzLCBidXQgbm90IHVzZWQgaGVyZSB5ZXRcblxuICAgLyogXG4gICAgICBJdGVtSW5kZXhSZWZlcmVuY2UgaXMgdGhlIHNlcXVlbnRpYWwgaW5kZXggb2YgZmlyc3QgaXRlbSBvZiB0aGUgY3JhZGxlIHRhaWxcbiAgICAgIENyYWRsZVBvc09mZnNldCBpcyB0aGUgcGl4ZWwgb2Zmc2V0IG9mIHRoZSBjcmFkbGUgYXhpcyBmcm9tIHRoZSBlZGdlIG9mIHRoZSB2aWV3cG9ydFxuICAgICAgYmxvY2tTY3JvbGxQb3MgaXMgdGhlIHNjcm9sbFBvcyBvZiB0aGUgc2Nyb2xsYmxvY2sgaW4gcmVsYXRpb24gdG8gdGhlIHZpZXdwb3J0XG4gICAgICBwcm9ncmVzc2lvbiBpcyBzY3JvbGwgLT4gbmV4dFxuICAgKi9cbiAgIGNyYWRsZVJlZmVyZW5jZURhdGEgPSB7XG5cbiAgICAgIHNjcm9sbEltcGxpZWRJdGVtSW5kZXhSZWZlcmVuY2U6bnVsbCxcbiAgICAgIHNjcm9sbEltcGxpZWRDcmFkbGVQb3NPZmZzZXQ6bnVsbCxcblxuICAgICAgbmV4dEl0ZW1JbmRleFJlZmVyZW5jZTpudWxsLFxuICAgICAgbmV4dENyYWRsZVBvc09mZnNldDpudWxsLFxuXG4gICAgICAvLyB0byBzZXQgc2Nyb2xsUG9zIGFmdGVyIGRvcmVwb3NpdGlvbiwgb3JcbiAgICAgIC8vIHRvIHJlc3RvcmUgc2Nyb2xsVG9wIG9yIHNjcm9sbExlZnQgYWZ0ZXIgY2xvYmJlcmVkIGJ5IERPTVxuICAgICAgYmxvY2tTY3JvbGxQb3M6bnVsbCwgXG4gICAgICBibG9ja1Njcm9sbFByb3BlcnR5Om51bGwsXG5cbiAgIH1cblxuICAgZWxlbWVudHNcblxufSJdLCJuYW1lcyI6WyJjcmFkbGVQYXJhbWV0ZXJzIiwic2Nyb2xsSW1wbGllZEl0ZW1JbmRleFJlZmVyZW5jZSIsInNjcm9sbEltcGxpZWRDcmFkbGVQb3NPZmZzZXQiLCJuZXh0SXRlbUluZGV4UmVmZXJlbmNlIiwibmV4dENyYWRsZVBvc09mZnNldCIsImJsb2NrU2Nyb2xsUG9zIiwiYmxvY2tTY3JvbGxQcm9wZXJ0eSIsIkNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZiIsImN1cnJlbnQiLCJjcmFkbGVFbGVtZW50c1JlZiIsImF4aXNSZWYiLCJoZWFkUmVmIiwidGFpbFJlZiIsImhlYWRCcmVha2xpbmVSZWYiLCJ0YWlsQnJlYWtsaW5lUmVmIiwiZWxlbWVudHMiLCJjcmFkbGVJbmhlcml0ZWRQcm9wZXJ0aWVzUmVmIiwiZGVmYXVsdFZpc2libGVJbmRleCIsImxpc3RzaXplIiwicGFkZGluZyIsImNyYWRsZVJlZmVyZW5jZURhdGEiLCJNYXRoIiwibWluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cradle/scaffoldhandler.tsx\n");

/***/ }),

/***/ "./src/cradle/scrollhandler.tsx":
/*!**************************************!*\
  !*** ./src/cradle/scrollhandler.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // scrollhandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar SCROLL_TIMEOUT_FOR_ONAFTERSCROLL = 500;\n\nvar ScrollHandler =\n/** @class */\nfunction () {\n  function ScrollHandler(cradleParameters) {\n    var _this = this;\n\n    this.scrollPositions = {\n      start: 0,\n      current: 0,\n      previous: 0,\n      previousupdate: 0,\n      currentupdate: 0\n    };\n    this._scrolltimerid = null;\n    this.isScrolling = false;\n\n    this.onScroll = function (e) {\n      var signals = _this.cradleParameters.handlersRef.current.interrupts.signals; // if (signals.pauseScrollingEffects) {\n      //     return\n      // }\n\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var viewportElement = viewportInterruptProperties.elementref.current;\n      var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffold;\n      var scrollPositionCurrent = _this.cradleParameters.cradleInheritedPropertiesRef.current.orientation == 'vertical' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n\n      if (!_this.isScrolling) {\n        _this.isScrolling = true;\n        _this.scrollPositions.start = scrollPositionCurrent;\n        _this.scrollPositions.currentupdate = scrollPositionCurrent;\n      }\n\n      if (scrollPositionCurrent < 0) {\n        // for Safari\n        return;\n      } // scaffoldHandler.cradleReferenceData.blockScrollPos = scrollPositionCurrent // TODO: redundant?\n\n\n      _this.scrollPositions.previous = _this.scrollPositions.current;\n      _this.scrollPositions.current = scrollPositionCurrent; // if (viewportInterruptProperties.index == 6) {\n      //     console.log('running onScroll for index, scrollPositions',\n      //         viewportInterruptProperties.index,this.scrollPositions)\n      // }\n\n      clearTimeout(_this._scrolltimerid);\n\n      if (signals.pauseScrollingEffects) {\n        return;\n      }\n\n      var stateHandler = _this.cradleParameters.handlersRef.current.state;\n      var cradleState = stateHandler.cradleStateRef.current;\n      var contentHandler = _this.cradleParameters.handlersRef.current.content;\n      var serviceHandler = _this.cradleParameters.handlersRef.current.service;\n\n      if (!viewportInterruptProperties.isResizing) {\n        if (cradleState == 'ready' || cradleState == 'repositioningRender' || cradleState == 'repositioningContinuation') {\n          if (cradleState == 'ready') {\n            var itemindex = scaffoldHandler.cradleReferenceData.nextItemIndexReference;\n            var axisVisiblePosOffset = void 0;\n            var cradleElements = scaffoldHandler.elements;\n\n            if (_this.cradleParameters.cradleInheritedPropertiesRef.current.orientation == 'vertical') {\n              axisVisiblePosOffset = cradleElements.axisRef.current.offsetTop - _this.cradleParameters.viewportInterruptPropertiesRef.current.elementref.current.scrollTop;\n            } else {\n              axisVisiblePosOffset = cradleElements.axisRef.current.offsetLeft - _this.cradleParameters.viewportInterruptPropertiesRef.current.elementref.current.scrollLeft;\n            }\n\n            scaffoldHandler.cradleReferenceData.scrollImpliedItemIndexReference = itemindex;\n            scaffoldHandler.cradleReferenceData.scrollImpliedCradlePosOffset = axisVisiblePosOffset;\n          }\n\n          if (cradleState == 'repositioningRender' || cradleState == 'repositioningContinuation') {\n            _this._setScrollReferenceIndexData();\n\n            if (cradleState == 'repositioningRender') stateHandler.setCradleState('repositioningContinuation');\n          } // TODO: re-instate the following\n\n\n          serviceHandler.serviceCalls.referenceIndexCallbackRef.current && serviceHandler.serviceCalls.referenceIndexCallbackRef.current(scaffoldHandler.cradleReferenceData.scrollImpliedItemIndexReference, 'scrolling', cradleState);\n        }\n      }\n\n      _this._scrolltimerid = setTimeout(function () {\n        _this._onAfterScroll();\n      }, SCROLL_TIMEOUT_FOR_ONAFTERSCROLL);\n      return false;\n    };\n\n    this._onAfterScroll = function () {\n      _this.isScrolling = false;\n      var stateHandler = _this.cradleParameters.handlersRef.current.state;\n      var contentHandler = _this.cradleParameters.handlersRef.current.content;\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var cradleState = stateHandler.cradleStateRef.current; // if (viewportInterruptProperties.index == 6) {\n      //     console.log('running onAfterScroll for index, cradleState',\n      //         viewportInterruptProperties.index,this.scrollPositions, cradleState)\n      // }\n\n      switch (cradleState) {\n        case 'repositioningRender':\n        case 'repositioningContinuation':\n          {\n            stateHandler.setCradleState('finishreposition');\n            break;\n          }\n\n        default:\n          {\n            if (_this.scrollPositions.start != _this.scrollPositions.current || _this.scrollPositions.current != _this.scrollPositions.previous) {\n              if (stateHandler.isMountedRef.current) {\n                _this.updateReferenceData(); // contentHandler.updateCradleContent([], 'endofscroll') // for Safari to compensate for overscroll\n\n              }\n            }\n          }\n      }\n    };\n\n    this.updateReferenceData = function () {\n      var stateHandler = _this.cradleParameters.handlersRef.current.state;\n      var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffold;\n      var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current; // const contentHandler = this.cradleParameters.handlersRef.current.content\n\n      if (!stateHandler.isMountedRef.current) return;\n      var axisVisiblePosOffset;\n      var cradleElements = scaffoldHandler.elements;\n      var viewportElement = viewportInterruptProperties.elementref.current;\n\n      if (cradleProps.orientation == 'vertical') {\n        axisVisiblePosOffset = cradleElements.axisRef.current.offsetTop - viewportElement.scrollTop;\n      } else {\n        axisVisiblePosOffset = cradleElements.axisRef.current.offsetLeft - viewportElement.scrollLeft;\n      }\n\n      scaffoldHandler.cradleReferenceData.scrollImpliedCradlePosOffset = axisVisiblePosOffset;\n\n      if (!viewportInterruptProperties.isResizing) {\n        scaffoldHandler.cradleReferenceData.nextItemIndexReference = scaffoldHandler.cradleReferenceData.scrollImpliedItemIndexReference;\n        scaffoldHandler.cradleReferenceData.nextCradlePosOffset = scaffoldHandler.cradleReferenceData.scrollImpliedCradlePosOffset;\n\n        _this.updateBlockScrollPos();\n      }\n    };\n\n    this.updateBlockScrollPos = function () {\n      var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffold;\n      var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var viewportElement = viewportInterruptProperties.elementref.current;\n\n      if (cradleProps.orientation == 'vertical') {\n        scaffoldHandler.cradleReferenceData.blockScrollProperty = 'scrollTop';\n        scaffoldHandler.cradleReferenceData.blockScrollPos = viewportElement.scrollTop;\n      } else {\n        scaffoldHandler.cradleReferenceData.blockScrollProperty = 'scrollLeft';\n        scaffoldHandler.cradleReferenceData.blockScrollPos = viewportElement.scrollLeft;\n      }\n    };\n\n    this._setScrollReferenceIndexData = function () {\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var cradleConfig = _this.cradleParameters.CradleInternalPropertiesRef.current;\n      var crosscount = cradleConfig.crosscount;\n      var viewportElement = viewportInterruptProperties.elementref.current;\n      var orientation = cradleProps.orientation,\n          listsize = cradleProps.listsize;\n      var scrollPos, cellLength;\n\n      if (orientation == 'vertical') {\n        scrollPos = viewportElement.scrollTop;\n        cellLength = cradleProps.cellHeight + cradleProps.gap;\n      } else {\n        scrollPos = viewportElement.scrollLeft;\n        cellLength = cradleProps.cellWidth + cradleProps.gap;\n      }\n\n      var referencescrolloffset = cellLength - scrollPos % cellLength;\n\n      if (referencescrolloffset == cellLength + cradleProps.padding) {\n        referencescrolloffset = 0;\n      }\n\n      var referencerowindex = Math.ceil((scrollPos - cradleProps.padding) / cellLength);\n      var axisReferenceIndex = referencerowindex * crosscount;\n      axisReferenceIndex = Math.min(axisReferenceIndex, listsize - 1);\n      var diff = axisReferenceIndex % crosscount;\n      axisReferenceIndex -= diff;\n      var referenceIndexData = {\n        index: axisReferenceIndex,\n        axisVisiblePosOffset: referencescrolloffset\n      };\n      if (axisReferenceIndex == 0) referencescrolloffset = 0; // defensive\n\n      var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffold;\n      scaffoldHandler.cradleReferenceData.scrollImpliedItemIndexReference = axisReferenceIndex;\n      scaffoldHandler.cradleReferenceData.scrollImpliedCradlePosOffset = referencescrolloffset;\n    };\n\n    this.cradleParameters = cradleParameters;\n  }\n\n  return ScrollHandler;\n}();\n\nexports[\"default\"] = ScrollHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/scrollhandler.tsx\n");

/***/ }),

/***/ "./src/cradle/servicehandler.tsx":
/*!***************************************!*\
  !*** ./src/cradle/servicehandler.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // servicehandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar ServiceHandler =\n/** @class */\nfunction () {\n  function ServiceHandler(cradleParameters) {\n    var _this = this;\n\n    this.getVisibleList = function () {\n      var contentHandler = _this.cradleParameters.handlersRef.current.content;\n      var cradleContent = contentHandler.content;\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffold;\n      var cradleElements = scaffoldHandler.elements;\n      return getVisibleItemsList({\n        itemElementMap: contentHandler.itemElements,\n        viewportElement: viewportInterruptProperties.elementref.current,\n        cradleElements: cradleElements,\n        cradleProps: _this.cradleParameters.cradleInheritedPropertiesRef.current,\n        cradleContent: cradleContent\n      });\n    };\n\n    this.getContentList = function () {\n      var contentHandler = _this.cradleParameters.handlersRef.current.content;\n      var contentlist = Array.from(contentHandler.itemElements);\n      contentlist.sort(function (a, b) {\n        return a[0] < b[0] ? -1 : 1;\n      });\n      return contentlist;\n    };\n\n    this.reload = function () {\n      var signals = _this.cradleParameters.handlersRef.current.interrupts.signals;\n      var stateHandler = _this.cradleParameters.handlersRef.current.state; // signals.pauseCellObserver = true\n\n      signals.pauseBreaklinesObserver = true;\n      signals.pauseScrollingEffects = true;\n      stateHandler.setCradleState('reload');\n    };\n\n    this.scrollToItem = function (index) {\n      var signals = _this.cradleParameters.handlersRef.current.interrupts.signals;\n      var scaffoldHandler = _this.cradleParameters.handlersRef.current.scaffold;\n      var stateHandler = _this.cradleParameters.handlersRef.current.state; // signals.pauseCellObserver = true\n\n      signals.pauseBreaklinesObserver = true;\n      signals.pauseScrollingEffects = true;\n      scaffoldHandler.cradleReferenceData.nextItemIndexReference = index;\n      stateHandler.setCradleState('doreposition');\n    };\n\n    this.cradleParameters = cradleParameters;\n    this.serviceCalls = cradleParameters.externalCallbacksRef.current;\n  }\n\n  return ServiceHandler;\n}();\n\nexports[\"default\"] = ServiceHandler;\n\nvar getVisibleItemsList = function getVisibleItemsList(_a) {\n  var itemElementMap = _a.itemElementMap,\n      viewportElement = _a.viewportElement,\n      cradleElements = _a.cradleElements,\n      cradleProps = _a.cradleProps,\n      cradleContent = _a.cradleContent;\n  var headElement = cradleElements.headRef.current;\n  var axisElement = cradleElements.axisRef.current;\n  var orientation = cradleProps.orientation;\n  var headlist = cradleContent.headViewComponents;\n  var itemlistindexes = Array.from(itemElementMap.keys());\n  itemlistindexes.sort(function (a, b) {\n    return a < b ? -1 : 1;\n  });\n  var headlistindexes = [];\n\n  for (var _i = 0, headlist_1 = headlist; _i < headlist_1.length; _i++) {\n    var item = headlist_1[_i];\n    headlistindexes.push(parseInt(item.props.index));\n  }\n\n  var list = [];\n  var cradleTop = headElement.offsetTop + axisElement.offsetTop,\n      cradleLeft = headElement.offsetLeft + axisElement.offsetLeft;\n  var scrollblockTopOffset = -viewportElement.scrollTop,\n      scrollblockLeftOffset = -viewportElement.scrollLeft,\n      viewportHeight = viewportElement.offsetHeight,\n      viewportWidth = viewportElement.offsetWidth,\n      viewportTopOffset = -scrollblockTopOffset,\n      viewportBottomOffset = -scrollblockTopOffset + viewportHeight;\n\n  for (var _b = 0, itemlistindexes_1 = itemlistindexes; _b < itemlistindexes_1.length; _b++) {\n    var index = itemlistindexes_1[_b];\n    var element = itemElementMap.get(index).current;\n    var inheadlist = headlistindexes.includes(index);\n    var top_1 = inheadlist ? element.offsetTop : (orientation == 'vertical' ? headElement.offsetHeight : 0) + element.offsetTop,\n        left = inheadlist ? element.offsetLeft : (orientation == 'horizontal' ? headElement.offsetWidth : 0) + element.offsetLeft,\n        width = element.offsetWidth,\n        height = element.offsetHeight,\n        right = left + width,\n        bottom = top_1 + height;\n    var itemTopOffset = scrollblockTopOffset + cradleTop + top_1,\n        // offset from top of viewport\n    itemBottomOffset = scrollblockTopOffset + cradleTop + bottom,\n        // offset from top of viewport\n    itemLeftOffset = scrollblockLeftOffset + cradleLeft + left,\n        itemRightOffset = scrollblockLeftOffset + cradleLeft + right;\n    var isVisible = false; // default\n\n    var topPortion = void 0,\n        bottomPortion = void 0,\n        leftPortion = void 0,\n        rightPortion = void 0;\n\n    if (itemTopOffset < 0 && itemBottomOffset > 0) {\n      orientation == 'vertical' && (isVisible = true);\n      bottomPortion = itemBottomOffset;\n      topPortion = bottomPortion - height;\n    } else if (itemTopOffset >= 0 && itemBottomOffset < viewportHeight) {\n      orientation == 'vertical' && (isVisible = true);\n      topPortion = height;\n      bottomPortion = 0;\n    } else if (itemTopOffset > 0 && itemTopOffset - viewportHeight < 0) {\n      orientation == 'vertical' && (isVisible = true);\n      topPortion = viewportHeight - itemTopOffset;\n      bottomPortion = topPortion - height;\n    } else {\n      if (orientation == 'vertical') continue;\n    }\n\n    if (itemLeftOffset < 0 && itemRightOffset > 0) {\n      orientation == 'horizontal' && (isVisible = true);\n      rightPortion = itemRightOffset;\n      leftPortion = rightPortion - width;\n    } else if (itemLeftOffset >= 0 && itemRightOffset < viewportWidth) {\n      orientation == 'horizontal' && (isVisible = true);\n      leftPortion = width;\n      rightPortion = 0;\n    } else if (itemLeftOffset > 0 && itemLeftOffset - viewportWidth < 0) {\n      orientation == 'horizontal' && (isVisible = true);\n      leftPortion = viewportWidth - itemLeftOffset;\n      rightPortion = leftPortion - width;\n    } else {\n      if (orientation == 'horizontal') continue;\n    }\n\n    var verticalRatio = topPortion > 0 ? topPortion / height : bottomPortion / height,\n        horizontalRatio = leftPortion > 0 ? leftPortion / width : rightPortion / height;\n    var itemData = {\n      index: index,\n      isVisible: isVisible,\n      top: top_1,\n      right: right,\n      bottom: bottom,\n      left: left,\n      width: width,\n      height: height,\n      itemTopOffset: itemTopOffset,\n      itemBottomOffset: itemBottomOffset,\n      topPortion: topPortion,\n      bottomPortion: bottomPortion,\n      itemLeftOffset: itemLeftOffset,\n      itemRightOffset: itemRightOffset,\n      leftPortion: leftPortion,\n      rightPortion: rightPortion,\n      verticalRatio: verticalRatio,\n      horizontalRatio: horizontalRatio\n    };\n    list.push(itemData);\n  }\n\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/servicehandler.tsx\n");

/***/ }),

/***/ "./src/cradle/statehandler.tsx":
/*!*************************************!*\
  !*** ./src/cradle/statehandler.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // statehandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar StateHandler =\n/** @class */\nfunction () {\n  function StateHandler(cradleParameters) {\n    this.cradleParameters = cradleParameters;\n    var internalProperties = cradleParameters.CradleInternalPropertiesRef.current;\n    this.setCradleState = internalProperties.setCradleState;\n    this.cradleStateRef = internalProperties.cradleStateRef;\n    this.isMountedRef = internalProperties.isMountedRef;\n  }\n\n  return StateHandler;\n}();\n\nexports[\"default\"] = StateHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3N0YXRlaGFuZGxlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7QUFDQTs7Ozs7O0FBRUE7QUFBQTtBQUFBO0FBRUksd0JBQVlBLGdCQUFaLEVBQTRCO0FBRXpCLFNBQUtBLGdCQUFMLEdBQXdCQSxnQkFBeEI7QUFFQSxRQUFNQyxrQkFBa0IsR0FBR0QsZ0JBQWdCLENBQUNFLDJCQUFqQixDQUE2Q0MsT0FBeEU7QUFFQSxTQUFLQyxjQUFMLEdBQXNCSCxrQkFBa0IsQ0FBQ0csY0FBekM7QUFDQSxTQUFLQyxjQUFMLEdBQXNCSixrQkFBa0IsQ0FBQ0ksY0FBekM7QUFDQSxTQUFLQyxZQUFMLEdBQW9CTCxrQkFBa0IsQ0FBQ0ssWUFBdkM7QUFFRjs7QUFRTDtBQUFDLENBcEJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9jcmFkbGUvc3RhdGVoYW5kbGVyLnRzeD82Mzk1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0YXRlaGFuZGxlci50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAyMSBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZUhhbmRsZXIge1xuXG4gICAgY29uc3RydWN0b3IoY3JhZGxlUGFyYW1ldGVycykge1xuXG4gICAgICAgdGhpcy5jcmFkbGVQYXJhbWV0ZXJzID0gY3JhZGxlUGFyYW1ldGVyc1xuXG4gICAgICAgY29uc3QgaW50ZXJuYWxQcm9wZXJ0aWVzID0gY3JhZGxlUGFyYW1ldGVycy5DcmFkbGVJbnRlcm5hbFByb3BlcnRpZXNSZWYuY3VycmVudFxuXG4gICAgICAgdGhpcy5zZXRDcmFkbGVTdGF0ZSA9IGludGVybmFsUHJvcGVydGllcy5zZXRDcmFkbGVTdGF0ZVxuICAgICAgIHRoaXMuY3JhZGxlU3RhdGVSZWYgPSBpbnRlcm5hbFByb3BlcnRpZXMuY3JhZGxlU3RhdGVSZWZcbiAgICAgICB0aGlzLmlzTW91bnRlZFJlZiA9IGludGVybmFsUHJvcGVydGllcy5pc01vdW50ZWRSZWZcbiAgICAgICBcbiAgICB9XG5cbiAgICBjcmFkbGVQYXJhbWV0ZXJzXG5cbiAgICBjcmFkbGVTdGF0ZVJlZlxuICAgIHNldENyYWRsZVN0YXRlXG4gICAgaXNNb3VudGVkUmVmXG5cbn1cbiJdLCJuYW1lcyI6WyJjcmFkbGVQYXJhbWV0ZXJzIiwiaW50ZXJuYWxQcm9wZXJ0aWVzIiwiQ3JhZGxlSW50ZXJuYWxQcm9wZXJ0aWVzUmVmIiwiY3VycmVudCIsInNldENyYWRsZVN0YXRlIiwiY3JhZGxlU3RhdGVSZWYiLCJpc01vdW50ZWRSZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/cradle/statehandler.tsx\n");

/***/ }),

/***/ "./src/cradle/styleshandler.tsx":
/*!**************************************!*\
  !*** ./src/cradle/styleshandler.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval(" // styleshandler.tsx\n// copyright (c) 2021 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar StylesHandler =\n/** @class */\nfunction () {\n  function StylesHandler(cradleParameters) {\n    var _this = this;\n\n    this.setCradleStyles = function (_a) {\n      var orientation = _a.orientation,\n          cellHeight = _a.cellHeight,\n          cellWidth = _a.cellWidth,\n          gap = _a.gap,\n          padding = _a.padding,\n          crosscount = _a.crosscount,\n          viewportheight = _a.viewportheight,\n          viewportwidth = _a.viewportwidth,\n          userstyles = _a.userstyles,\n          breaklineOffset = _a.breaklineOffset; // TODO: change 'cradle' to 'head' and 'tail' for more granularity\n\n      var headstyles = _this.getHeadStyles(gap, padding, orientation, userstyles.cradle);\n\n      var tailstyles = _this.getTailStyles(gap, padding, orientation, userstyles.cradle);\n\n      var axisstyles = _this.getAxisStyles(gap, padding, orientation, userstyles.axis);\n\n      var breaklineheadstyles = _this.getBreaklineHeadStyles(orientation, cellHeight, cellWidth, breaklineOffset);\n\n      var breaklinetailstyles = _this.getBreaklineTailStyles(orientation, cellHeight, cellWidth, breaklineOffset);\n\n      var cradledividerstyles = {\n        zIndex: 1,\n        position: 'absolute',\n        width: '100%',\n        height: '100%',\n        boxShadow: '0 0 5px 3px red'\n      };\n      headstyles.gridGap = gap + 'px';\n      tailstyles.gridGap = gap + 'px';\n\n      if (orientation == 'horizontal') {\n        headstyles.padding = \"\".concat(padding, \"px 0 \").concat(padding, \"px \").concat(padding, \"px\");\n        headstyles.width = 'auto';\n        headstyles.height = '100%';\n        headstyles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n        //     sets length of horiz cradle items in one line (row), not multi-row config\n\n        headstyles.gridTemplateRows = cellHeight ? \"repeat(\".concat(crosscount, \", minmax(\").concat(cellHeight, \"px, 1fr))\") : 'auto'; // headstyles.gridTemplateRows = cellHeight?`repeat(auto-fit, minmax(${cellHeight}px, 1fr))`:'auto'\n\n        headstyles.gridTemplateColumns = 'none';\n        tailstyles.padding = \"\".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px 0\");\n        tailstyles.width = 'auto';\n        tailstyles.height = '100%';\n        tailstyles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n        //     sets length of horiz cradle items in one line (row), not multi-row config\n\n        tailstyles.gridTemplateRows = cellHeight ? \"repeat(\".concat(crosscount, \", minmax(\").concat(cellHeight, \"px, 1fr))\") : 'auto'; // tailstyles.gridTemplateRows = cellHeight?`repeat(auto-fit, minmax(${cellHeight}px, 1fr))`:'auto'\n\n        tailstyles.gridTemplateColumns = 'none';\n      } else if (orientation == 'vertical') {\n        headstyles.padding = \"\".concat(padding, \"px \").concat(padding, \"px 0 \").concat(padding, \"px\");\n        headstyles.width = '100%';\n        headstyles.height = 'auto';\n        headstyles.gridAutoFlow = 'row';\n        headstyles.gridTemplateRows = 'none';\n        headstyles.gridTemplateColumns = cellWidth ? \"repeat(auto-fit, minmax(\".concat(cellWidth, \"px, 1fr))\") : 'auto';\n        tailstyles.padding = \"0 \".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px\");\n        tailstyles.width = '100%';\n        tailstyles.height = 'auto';\n        tailstyles.gridAutoFlow = 'row';\n        tailstyles.gridTemplateRows = 'none';\n        tailstyles.gridTemplateColumns = cellWidth ? \"repeat(auto-fit, minmax(\".concat(cellWidth, \"px, 1fr))\") : 'auto';\n      }\n\n      return [headstyles, tailstyles, axisstyles, breaklineheadstyles, breaklinetailstyles, cradledividerstyles];\n    };\n\n    this.getHeadStyles = function (gap, padding, orientation, userheadstyles) {\n      var bottom, left, top, right;\n\n      if (orientation == 'vertical') {\n        bottom = 0;\n        left = 0;\n        right = 0;\n        top = 'auto';\n      } else {\n        bottom = 0;\n        left = 'auto';\n        right = 0;\n        top = 0;\n      }\n\n      return __assign(__assign({}, {\n        position: 'absolute',\n        backgroundColor: 'blue',\n        display: 'grid',\n        gridGap: gap + 'px',\n        padding: padding + 'px',\n        justifyContent: 'start',\n        alignContent: 'start',\n        boxSizing: 'border-box',\n        bottom: bottom,\n        left: left,\n        right: right,\n        top: top\n      }), userheadstyles);\n    };\n\n    this.getTailStyles = function (gap, padding, orientation, usertailstyles) {\n      var bottom, left, top, right;\n\n      if (orientation == 'vertical') {\n        bottom = 'auto';\n        left = 0;\n        right = 0;\n        top = 0;\n      } else {\n        bottom = 0;\n        left = 0;\n        right = 'auto';\n        top = 0;\n      }\n\n      return __assign(__assign({}, {\n        position: 'absolute',\n        backgroundColor: 'blue',\n        display: 'grid',\n        gridGap: gap + 'px',\n        padding: padding + 'px',\n        justifyContent: 'start',\n        alignContent: 'start',\n        boxSizing: 'border-box',\n        top: top,\n        left: left,\n        right: right,\n        bottom: bottom\n      }), usertailstyles);\n    };\n\n    this.getAxisStyles = function (gap, padding, orientation, useraxisstyles) {\n      var top, left, width, height; // for axis\n\n      if (orientation == 'vertical') {\n        top = padding + 'px';\n        left = 'auto';\n        width = '100%';\n        height = 'auto';\n      } else {\n        top = 'auto';\n        left = padding + 'px';\n        width = 0;\n        height = '100%';\n      }\n\n      return __assign(__assign({}, {\n        position: 'relative',\n        top: top,\n        left: left,\n        width: width,\n        height: height\n      }), useraxisstyles);\n    };\n\n    this.getBreaklineTailStyles = function (orientation, cellHeight, cellWidth, breaklineOffset) {\n      var transform; // for position relative to axis\n\n      var position = 'absolute',\n          width = '100%',\n          height = '100%';\n\n      if (orientation == 'horizontal') {\n        // width = 0\n        // height = cellHeight + 'px'\n        transform = \"translateX(\".concat(breaklineOffset + 'px', \")\");\n      } else {\n        // width = 'auto'\n        // height = 0\n        transform = \"translateY(\".concat(breaklineOffset + 'px', \")\");\n      }\n\n      return __assign({}, {\n        position: position,\n        width: width,\n        height: height,\n        transform: transform\n      });\n    };\n\n    this.getBreaklineHeadStyles = function (orientation, cellHeight, cellWidth, breaklineOffset) {\n      var transform; // for position relative to axis\n\n      var position = 'absolute',\n          width = '100%',\n          height = '100%';\n\n      if (orientation == 'horizontal') {\n        // width = 0\n        // height = cellHeight + 'px'\n        transform = \"translateX(\".concat(-(cellHeight - breaklineOffset) + 'px', \")\");\n      } else {\n        // width = 'auto'\n        // height = 0\n        transform = \"translateY(\".concat(-(cellWidth - breaklineOffset) + 'px', \")\");\n      }\n\n      return __assign({}, {\n        position: position,\n        width: width,\n        height: height,\n        transform: transform\n      });\n    };\n\n    this.cradleParameters = cradleParameters;\n  }\n\n  return StylesHandler;\n}();\n\nexports[\"default\"] = StylesHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/styleshandler.tsx\n");

/***/ }),

/***/ "./src/infinitegridscroller.tsx":
/*!**************************************!*\
  !*** ./src/infinitegridscroller.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("// infinitegridscroller.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\n/*\n    BUG: reposition chip appears outside viewport when list partly hidden\n    BUG: repositioningRender is broken.\n    TODO:\n    - reload from/to for insertions and substitutions\n    - provide user with isReparenting flag to be able to reset scroll\n    - check use of useCallback\n    - resize triggered by root only, unless variable\n    - intersection applied to cradle only\n    - test for two root portals\n    - nested list overflows port boundaries on android FF\n    - promote system constants to 'advanced' parameter, eg RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE\n    - calc minwidth by form factor\n    - review scroller-frame for appropriate dimensions - s/b inset:0;position:absolute\n    - add grid-template-rows: max-content to parent for safari issue grid-auto-flow: column not filling column\n*/\n\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __importDefault(__webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\"));\n\nvar scrollblock_1 = __importDefault(__webpack_require__(/*! ./scrollblock */ \"./src/scrollblock.tsx\"));\n\nvar cradle_1 = __importDefault(__webpack_require__(/*! ./cradle */ \"./src/cradle.tsx\")); // -------------------[ global session ID generator ]----------------\n\n\nvar globalScrollerID = 0;\n\nvar getSessionID = function getSessionID() {\n  return globalScrollerID++;\n}; // ===================================[ INITIALIZE ]===========================\n\n/*\n    The job of InfiniteGridScroller is to pass parameters to dependents.\n    Viewport contains the scrollblock, fullsize for adjusted cell height/width, which in turn contains the cradle\n        - a component that contains CellShells (which contain displayed items or transitional placeholders).\n    The CellShells are skeletons which contain the host content components.\n\n    Host content is created in a portal cache (via PortalAgent) and then portal'd to its host CellShell\n\n    Scrollblock virtually represents the entirety of the list, and is the scroller\n\n    Cradle contains the list items, and is 'virtualized' -- it appears as\n      though it is the full scrollblock, but in fact it is only slightly larger than\n      the viewport.\n    - individual items are framed by CellShell, managed by Cradle\n\n    Overall the infinitegridscroller manages the (often asynchronous) interactions of the\n    components of the mechanism\n*/\n\n\nvar InfiniteGridScroller = function InfiniteGridScroller(args) {\n  // console.log('running InfiniteGridScroller')\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j; // ------------------[ normalize properties ]--------------------\n\n\n  var props = Object.assign({}, args); // args should be immutable\n  // set defaults\n\n  (_a = props.functions) !== null && _a !== void 0 ? _a : props.functions = {};\n  (_b = props.styles) !== null && _b !== void 0 ? _b : props.styles = {};\n  (_c = props.gap) !== null && _c !== void 0 ? _c : props.gap = 0;\n  (_d = props.padding) !== null && _d !== void 0 ? _d : props.padding = 0;\n  (_e = props.runwaySize) !== null && _e !== void 0 ? _e : props.runwaySize = 3;\n  (_f = props.indexOffset) !== null && _f !== void 0 ? _f : props.indexOffset = 0;\n  (_g = props.listSize) !== null && _g !== void 0 ? _g : props.listSize = 0;\n  (_h = props.layout) !== null && _h !== void 0 ? _h : props.layout = 'uniform'; // constraints\n\n  props.indexOffset = Math.max(0, props.indexOffset); // non-negative\n\n  props.indexOffset = Math.min(props.listSize, props.indexOffset); // not larger than list\n\n  if (!['horizontal', 'vertical'].includes(props.orientation)) {\n    props.orientation = 'vertical';\n  }\n\n  (_j = props.breaklineOffset) !== null && _j !== void 0 ? _j : props.breaklineOffset = 20; // TODO: rationalize with cellHeight & cellWidth\n\n  var orientation = props.orientation,\n      // vertical or horizontal\n  gap = props.gap,\n      // space between grid cells, not including the leading and trailing edges\n  padding = props.padding,\n      // the space between the items and the viewport, applied to the cradle\n  cellHeight = props.cellHeight,\n      // the outer pixel height - literal for vertical; approximate for horizontal\n  cellWidth = props.cellWidth,\n      // the outer pixel width - literal for horizontal; approximate for vertical\n  layout = props.layout,\n      // uniform, variable\n  dense = props.dense,\n      // boolean (only with preload)\n  runwaySize = props.runwaySize,\n      // the number of items outside the view of each side of the viewport \n  // -- gives time to assemble before display\n  listSize = props.listSize,\n      // the exact number of the size of the virtual list; will eventually be changable.\n  defaultVisibleIndex = props.indexOffset,\n      // the 0-based starting index of the list, when first loaded\n  getItem = props.getItem,\n      // function provided by host - parameter is index number, set by system; return value is \n  // host-selected component or promise of a component\n  functions = props.functions,\n      // properties to get direct access to some component utilites, optional\n  placeholder = props.placeholder,\n      // a sparse component to stand in for content until the content arrives; \n  // optional, replaces default placeholder\n  styles = props.styles,\n      // passive style over-rides (eg. color, opacity); has \n  // properties viewport, scrollblock, cradle, or scrolltracker\n  // to come...\n  // cache = \"preload\" or \"keepload\" or \"none\"\n  // advanced, technical settings like useRequestIdleCallback, and RequestIdleCallbackTimeout\n  scrollerName = props.scrollerName,\n      // for debugging\n  breaklineOffset = props.breaklineOffset;\n  var gridSpecs = {\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    layout: layout,\n    dense: dense\n  };\n  var gridSpecsRef = (0, react_1.useRef)(gridSpecs);\n  var stylesRef = (0, react_1.useRef)(styles);\n  var functionsRef = (0, react_1.useRef)(functions); // satisfy React Object.is for attributes\n\n  if (!compareProps(gridSpecs, gridSpecsRef.current)) {\n    gridSpecsRef.current = gridSpecs;\n  }\n\n  if (!compareProps(styles, stylesRef.current)) {\n    stylesRef.current = styles;\n  }\n\n  if (!compareProps(functions, functionsRef.current)) {\n    functionsRef.current = functions;\n  }\n\n  freeze(functionsRef.current, stylesRef.current, gridSpecsRef.current); // for mount\n\n  var scrollerSessionIDRef = (0, react_1.useRef)(null);\n\n  if (scrollerSessionIDRef.current === null) {\n    scrollerSessionIDRef.current = getSessionID();\n  }\n\n  var scrollerID = scrollerSessionIDRef.current; // console.log('scrollerID',scrollerID)\n  // --------------------[ render ]---------------------\n\n  return react_1[\"default\"].createElement(react_1[\"default\"].StrictMode, null, react_1[\"default\"].createElement(viewport_1[\"default\"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    scrollerID: scrollerID\n  }, react_1[\"default\"].createElement(scrollblock_1[\"default\"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    scrollerID: scrollerID,\n    listsize: listSize\n  }, react_1[\"default\"].createElement(cradle_1[\"default\"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    scrollerID: scrollerID,\n    scrollerName: scrollerName,\n    listsize: listSize,\n    functions: functionsRef.current,\n    defaultVisibleIndex: defaultVisibleIndex,\n    getItem: getItem,\n    placeholder: placeholder,\n    runwaycount: runwaySize,\n    breaklineOffset: breaklineOffset\n  }))));\n};\n\nexports[\"default\"] = InfiniteGridScroller; // utilities\n\nfunction freeze() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var _a = Array.from(arguments),\n      arg = _a[0],\n      rest = _a.slice(1);\n\n  Object.freeze(arg);\n\n  if (rest.length == 0) {\n    return;\n  }\n\n  freeze.apply(void 0, rest);\n}\n\nfunction compareProps(obj1, obj2) {\n  var keys = Object.keys(obj1);\n  var same;\n\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n\n    if (!Object.is(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5maW5pdGVncmlkc2Nyb2xsZXIudHN4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTs7QUFDQTs7QUFDQSx3RixDQUVBOzs7QUFFQSxJQUFJQSxnQkFBZ0IsR0FBRyxDQUF2Qjs7QUFFQSxJQUFNQyxZQUFZLEdBQUcsU0FBZkEsWUFBZTtBQUNqQixTQUFPRCxnQkFBZ0IsRUFBdkI7QUFDSCxDQUZELEMsQ0FJQTs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsSUFBTUUsb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUF1QixDQUFDQyxJQUFELEVBQUs7QUFFOUI7eUNBRjhCLENBSTlCOzs7QUFFQSxNQUFNQyxLQUFLLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBaUJILElBQWpCLENBQWQsQ0FOOEIsQ0FNTztBQUVyQzs7QUFDQSxhQUFLLENBQUNJLFNBQU4sTUFBZSxJQUFmLElBQWVDLGFBQWYsR0FBZUEsRUFBZixHQUFvQkosS0FBSyxDQUFDRyxTQUFOLEdBQWtCLEVBQXRDO0FBQ0EsYUFBSyxDQUFDRSxNQUFOLE1BQVksSUFBWixJQUFZQyxhQUFaLEdBQVlBLEVBQVosR0FBaUJOLEtBQUssQ0FBQ0ssTUFBTixHQUFlLEVBQWhDO0FBQ0EsYUFBSyxDQUFDRSxHQUFOLE1BQVMsSUFBVCxJQUFTQyxhQUFULEdBQVNBLEVBQVQsR0FBY1IsS0FBSyxDQUFDTyxHQUFOLEdBQVksQ0FBMUI7QUFDQSxhQUFLLENBQUNFLE9BQU4sTUFBYSxJQUFiLElBQWFDLGFBQWIsR0FBYUEsRUFBYixHQUFrQlYsS0FBSyxDQUFDUyxPQUFOLEdBQWdCLENBQWxDO0FBQ0EsYUFBSyxDQUFDRSxVQUFOLE1BQWdCLElBQWhCLElBQWdCQyxhQUFoQixHQUFnQkEsRUFBaEIsR0FBcUJaLEtBQUssQ0FB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Q0FBeEIsQ0FBTCxFQUFxQztBQUNqQyxhQUFPLEtBQVA7QUFDSDtBQUNKOztBQUNELFNBQU8sSUFBUDtBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9pbmZpbml0ZWdyaWRzY3JvbGxlci50c3g/NjNlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbmZpbml0ZWdyaWRzY3JvbGxlci50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAxOS0yMDIyIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbi8qXG4gICAgQlVHOiByZXBvc2l0aW9uIGNoaXAgYXBwZWFycyBvdXRzaWRlIHZpZXdwb3J0IHdoZW4gbGlzdCBwYXJ0bHkgaGlkZGVuXG4gICAgQlVHOiByZXBvc2l0aW9uaW5nUmVuZGVyIGlzIGJyb2tlbi5cbiAgICBUT0RPOlxuICAgIC0gcmVsb2FkIGZyb20vdG8gZm9yIGluc2VydGlvbnMgYW5kIHN1YnN0aXR1dGlvbnNcbiAgICAtIHByb3ZpZGUgdXNlciB3aXRoIGlzUmVwYXJlbnRpbmcgZmxhZyB0byBiZSBhYmxlIHRvIHJlc2V0IHNjcm9sbFxuICAgIC0gY2hlY2sgdXNlIG9mIHVzZUNhbGxiYWNrXG4gICAgLSByZXNpemUgdHJpZ2dlcmVkIGJ5IHJvb3Qgb25seSwgdW5sZXNzIHZhcmlhYmxlXG4gICAgLSBpbnRlcnNlY3Rpb24gYXBwbGllZCB0byBjcmFkbGUgb25seVxuICAgIC0gdGVzdCBmb3IgdHdvIHJvb3QgcG9ydGFsc1xuICAgIC0gbmVzdGVkIGxpc3Qgb3ZlcmZsb3dzIHBvcnQgYm91bmRhcmllcyBvbiBhbmRyb2lkIEZGXG4gICAgLSBwcm9tb3RlIHN5c3RlbSBjb25zdGFudHMgdG8gJ2FkdmFuY2VkJyBwYXJhbWV0ZXIsIGVnIFJFU0laRV9USU1FT1VUX0ZPUl9PTkFGVEVSU1JFU0laRVxuICAgIC0gY2FsYyBtaW53aWR0aCBieSBmb3JtIGZhY3RvclxuICAgIC0gcmV2aWV3IHNjcm9sbGVyLWZyYW1lIGZvciBhcHByb3ByaWF0ZSBkaW1lbnNpb25zIC0gcy9iIGluc2V0OjA7cG9zaXRpb246YWJzb2x1dGVcbiAgICAtIGFkZCBncmlkLXRlbXBsYXRlLXJvd3M6IG1heC1jb250ZW50IHRvIHBhcmVudCBmb3Igc2FmYXJpIGlzc3VlIGdyaWQtYXV0by1mbG93OiBjb2x1bW4gbm90IGZpbGxpbmcgY29sdW1uXG4qL1xuXG4ndXNlIHN0cmljdCdcblxuaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0LCB1c2VSZWZ9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgVmlld3BvcnQgZnJvbSAnLi92aWV3cG9ydCdcbmltcG9ydCBTY3JvbGxibG9jayBmcm9tICcuL3Njcm9sbGJsb2NrJ1xuaW1wb3J0IENyYWRsZSBmcm9tICcuL2NyYWRsZSdcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVsgZ2xvYmFsIHNlc3Npb24gSUQgZ2VuZXJhdG9yIF0tLS0tLS0tLS0tLS0tLS0tXG5cbmxldCBnbG9iYWxTY3JvbGxlcklEID0gMFxuXG5jb25zdCBnZXRTZXNzaW9uSUQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGdsb2JhbFNjcm9sbGVySUQrK1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVsgSU5JVElBTElaRSBdPT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qXG4gICAgVGhlIGpvYiBvZiBJbmZpbml0ZUdyaWRTY3JvbGxlciBpcyB0byBwYXNzIHBhcmFtZXRlcnMgdG8gZGVwZW5kZW50cy5cbiAgICBWaWV3cG9ydCBjb250YWlucyB0aGUgc2Nyb2xsYmxvY2ssIGZ1bGxzaXplIGZvciBhZGp1c3RlZCBjZWxsIGhlaWdodC93aWR0aCwgd2hpY2ggaW4gdHVybiBjb250YWlucyB0aGUgY3JhZGxlIFxuICAgICAgICAtIGEgY29tcG9uZW50IHRoYXQgY29udGFpbnMgQ2VsbFNoZWxscyAod2hpY2ggY29udGFpbiBkaXNwbGF5ZWQgaXRlbXMgb3IgdHJhbnNpdGlvbmFsIHBsYWNlaG9sZGVycykuIFxuICAgIFRoZSBDZWxsU2hlbGxzIGFyZSBza2VsZXRvbnMgd2hpY2ggY29udGFpbiB0aGUgaG9zdCBjb250ZW50IGNvbXBvbmVudHMuXG5cbiAgICBIb3N0IGNvbnRlbnQgaXMgY3JlYXRlZCBpbiBhIHBvcnRhbCBjYWNoZSAodmlhIFBvcnRhbEFnZW50KSBhbmQgdGhlbiBwb3J0YWwnZCB0byBpdHMgaG9zdCBDZWxsU2hlbGxcblxuICAgIFNjcm9sbGJsb2NrIHZpcnR1YWxseSByZXByZXNlbnRzIHRoZSBlbnRpcmV0eSBvZiB0aGUgbGlzdCwgYW5kIGlzIHRoZSBzY3JvbGxlclxuXG4gICAgQ3JhZGxlIGNvbnRhaW5zIHRoZSBsaXN0IGl0ZW1zLCBhbmQgaXMgJ3ZpcnR1YWxpemVkJyAtLSBpdCBhcHBlYXJzIGFzXG4gICAgICB0aG91Z2ggaXQgaXMgdGhlIGZ1bGwgc2Nyb2xsYmxvY2ssIGJ1dCBpbiBmYWN0IGl0IGlzIG9ubHkgc2xpZ2h0bHkgbGFyZ2VyIHRoYW5cbiAgICAgIHRoZSB2aWV3cG9ydC5cbiAgICAtIGluZGl2aWR1YWwgaXRlbXMgYXJlIGZyYW1lZCBieSBDZWxsU2hlbGwsIG1hbmFnZWQgYnkgQ3JhZGxlXG5cbiAgICBPdmVyYWxsIHRoZSBpbmZpbml0ZWdyaWRzY3JvbGxlciBtYW5hZ2VzIHRoZSAob2Z0ZW4gYXN5bmNocm9ub3VzKSBpbnRlcmFjdGlvbnMgb2YgdGhlIFxuICAgIGNvbXBvbmVudHMgb2YgdGhlIG1lY2hhbmlzbVxuKi9cblxuY29uc3QgSW5maW5pdGVHcmlkU2Nyb2xsZXIgPSAoYXJncykgPT4ge1xuXG4gICAgLy8gY29uc29sZS5sb2coJ3J1bm5pbmcgSW5maW5pdGVHcmlkU2Nyb2xsZXInKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tWyBub3JtYWxpemUgcHJvcGVydGllcyBdLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGNvbnN0IHByb3BzID0gT2JqZWN0LmFzc2lnbih7fSxhcmdzKSAvLyBhcmdzIHNob3VsZCBiZSBpbW11dGFibGVcblxuICAgIC8vIHNldCBkZWZhdWx0c1xuICAgIHByb3BzLmZ1bmN0aW9ucyA/PyAocHJvcHMuZnVuY3Rpb25zID0ge30pXG4gICAgcHJvcHMuc3R5bGVzID8/IChwcm9wcy5zdHlsZXMgPSB7fSlcbiAgICBwcm9wcy5nYXAgPz8gKHByb3BzLmdhcCA9IDApXG4gICAgcHJvcHMucGFkZGluZyA/PyAocHJvcHMucGFkZGluZyA9IDApXG4gICAgcHJvcHMucnVud2F5U2l6ZSA/PyAocHJvcHMucnVud2F5U2l6ZSA9IDMpXG4gICAgcHJvcHMuaW5kZXhPZmZzZXQgPz8gKHByb3BzLmluZGV4T2Zmc2V0ID0gMClcbiAgICBwcm9wcy5saXN0U2l6ZSA/PyAocHJvcHMubGlzdFNpemUgPSAwKVxuICAgIHByb3BzLmxheW91dCA/PyAocHJvcHMubGF5b3V0ID0gJ3VuaWZvcm0nKVxuICAgIC8vIGNvbnN0cmFpbnRzXG4gICAgcHJvcHMuaW5kZXhPZmZzZXQgPSBNYXRoLm1heCgwLHByb3BzLmluZGV4T2Zmc2V0KSAvLyBub24tbmVnYXRpdmVcbiAgICBwcm9wcy5pbmRleE9mZnNldCA9IE1hdGgubWluKHByb3BzLmxpc3RTaXplLCBwcm9wcy5pbmRleE9mZnNldCkgLy8gbm90IGxhcmdlciB0aGFuIGxpc3RcbiAgICBpZiAoIVsnaG9yaXpvbnRhbCcsJ3ZlcnRpY2FsJ10uaW5jbHVkZXMocHJvcHMub3JpZW50YXRpb24pKSB7XG4gICAgICAgIHByb3BzLm9yaWVudGF0aW9uID0gJ3ZlcnRpY2FsJ1xuICAgIH1cbiAgICBwcm9wcy5icmVha2xpbmVPZmZzZXQgPz8gKHByb3BzLmJyZWFrbGluZU9mZnNldCA9IDIwKSAvLyBUT0RPOiByYXRpb25hbGl6ZSB3aXRoIGNlbGxIZWlnaHQgJiBjZWxsV2lkdGhcblxuICAgIGNvbnN0IHsgXG4gICAgICAgIG9yaWVudGF0aW9uLCAvLyB2ZXJ0aWNhbCBvciBob3Jpem9udGFsXG4gICAgICAgIGdhcCwgLy8gc3BhY2UgYmV0d2VlbiBncmlkIGNlbGxzLCBub3QgaW5jbHVkaW5nIHRoZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBlZGdlc1xuICAgICAgICBwYWRkaW5nLCAvLyB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgaXRlbXMgYW5kIHRoZSB2aWV3cG9ydCwgYXBwbGllZCB0byB0aGUgY3JhZGxlXG4gICAgICAgIGNlbGxIZWlnaHQsIC8vIHRoZSBvdXRlciBwaXhlbCBoZWlnaHQgLSBsaXRlcmFsIGZvciB2ZXJ0aWNhbDsgYXBwcm94aW1hdGUgZm9yIGhvcml6b250YWxcbiAgICAgICAgY2VsbFdpZHRoLCAvLyB0aGUgb3V0ZXIgcGl4ZWwgd2lkdGggLSBsaXRlcmFsIGZvciBob3Jpem9udGFsOyBhcHByb3hpbWF0ZSBmb3IgdmVydGljYWxcbiAgICAgICAgbGF5b3V0LCAvLyB1bmlmb3JtLCB2YXJpYWJsZVxuICAgICAgICBkZW5zZSwgLy8gYm9vbGVhbiAob25seSB3aXRoIHByZWxvYWQpXG5cbiAgICAgICAgcnVud2F5U2l6ZSwgLy8gdGhlIG51bWJlciBvZiBpdGVtcyBvdXRzaWRlIHRoZSB2aWV3IG9mIGVhY2ggc2lkZSBvZiB0aGUgdmlld3BvcnQgXG4gICAgICAgICAgICAvLyAtLSBnaXZlcyB0aW1lIHRvIGFzc2VtYmxlIGJlZm9yZSBkaXNwbGF5XG4gICAgICAgIGxpc3RTaXplLCAvLyB0aGUgZXhhY3QgbnVtYmVyIG9mIHRoZSBzaXplIG9mIHRoZSB2aXJ0dWFsIGxpc3Q7IHdpbGwgZXZlbnR1YWxseSBiZSBjaGFuZ2FibGUuXG4gICAgICAgIGluZGV4T2Zmc2V0OmRlZmF1bHRWaXNpYmxlSW5kZXgsIC8vIHRoZSAwLWJhc2VkIHN0YXJ0aW5nIGluZGV4IG9mIHRoZSBsaXN0LCB3aGVuIGZpcnN0IGxvYWRlZFxuICAgICAgICBnZXRJdGVtLCAvLyBmdW5jdGlvbiBwcm92aWRlZCBieSBob3N0IC0gcGFyYW1ldGVyIGlzIGluZGV4IG51bWJlciwgc2V0IGJ5IHN5c3RlbTsgcmV0dXJuIHZhbHVlIGlzIFxuICAgICAgICAgICAgLy8gaG9zdC1zZWxlY3RlZCBjb21wb25lbnQgb3IgcHJvbWlzZSBvZiBhIGNvbXBvbmVudFxuICAgICAgICBmdW5jdGlvbnMsIC8vIHByb3BlcnRpZXMgdG8gZ2V0IGRpcmVjdCBhY2Nlc3MgdG8gc29tZSBjb21wb25lbnQgdXRpbGl0ZXMsIG9wdGlvbmFsXG4gICAgICAgIHBsYWNlaG9sZGVyLCAvLyBhIHNwYXJzZSBjb21wb25lbnQgdG8gc3RhbmQgaW4gZm9yIGNvbnRlbnQgdW50aWwgdGhlIGNvbnRlbnQgYXJyaXZlczsgXG4gICAgICAgICAgICAvLyBvcHRpb25hbCwgcmVwbGFjZXMgZGVmYXVsdCBwbGFjZWhvbGRlclxuICAgICAgICBzdHlsZXMsIC8vIHBhc3NpdmUgc3R5bGUgb3Zlci1yaWRlcyAoZWcuIGNvbG9yLCBvcGFjaXR5KTsgaGFzIFxuICAgICAgICAgICAgLy8gcHJvcGVydGllcyB2aWV3cG9ydCwgc2Nyb2xsYmxvY2ssIGNyYWRsZSwgb3Igc2Nyb2xsdHJhY2tlclxuICAgICAgICAvLyB0byBjb21lLi4uXG4gICAgICAgIC8vIGNhY2hlID0gXCJwcmVsb2FkXCIgb3IgXCJrZWVwbG9hZFwiIG9yIFwibm9uZVwiXG4gICAgICAgIC8vIGFkdmFuY2VkLCB0ZWNobmljYWwgc2V0dGluZ3MgbGlrZSB1c2VSZXF1ZXN0SWRsZUNhbGxiYWNrLCBhbmQgUmVxdWVzdElkbGVDYWxsYmFja1RpbWVvdXRcbiAgICAgICAgc2Nyb2xsZXJOYW1lLCAvLyBmb3IgZGVidWdnaW5nXG4gICAgICAgIGJyZWFrbGluZU9mZnNldCxcbiAgICB9ID0gcHJvcHNcblxuICAgIGNvbnN0IGdyaWRTcGVjcyA9IHsgLy8gcGFja2FnZVxuICAgICAgICBvcmllbnRhdGlvbixcbiAgICAgICAgZ2FwLFxuICAgICAgICBwYWRkaW5nLFxuICAgICAgICBjZWxsSGVpZ2h0LFxuICAgICAgICBjZWxsV2lkdGgsXG4gICAgICAgIGxheW91dCxcbiAgICAgICAgZGVuc2UsXG4gICAgfVxuXG4gICAgY29uc3QgZ3JpZFNwZWNzUmVmID0gdXNlUmVmKGdyaWRTcGVjcylcbiAgICBjb25zdCBzdHlsZXNSZWYgPSB1c2VSZWYoc3R5bGVzKVxuICAgIGNvbnN0IGZ1bmN0aW9uc1JlZiA9IHVzZVJlZihmdW5jdGlvbnMpXG5cbiAgICAvLyBzYXRpc2Z5IFJlYWN0IE9iamVjdC5pcyBmb3IgYXR0cmlidXRlc1xuICAgIGlmICghY29tcGFyZVByb3BzKGdyaWRTcGVjcywgZ3JpZFNwZWNzUmVmLmN1cnJlbnQpKSB7XG4gICAgICAgIGdyaWRTcGVjc1JlZi5jdXJyZW50ID0gZ3JpZFNwZWNzXG4gICAgfVxuICAgIGlmICghY29tcGFyZVByb3BzKHN0eWxlcywgc3R5bGVzUmVmLmN1cnJlbnQpKSB7XG4gICAgICAgIHN0eWxlc1JlZi5jdXJyZW50ID0gc3R5bGVzXG4gICAgfVxuICAgIGlmICghY29tcGFyZVByb3BzKGZ1bmN0aW9ucywgZnVuY3Rpb25zUmVmLmN1cnJlbnQpKSB7XG4gICAgICAgIGZ1bmN0aW9uc1JlZi5jdXJyZW50ID0gZnVuY3Rpb25zXG4gICAgfVxuXG4gICAgZnJlZXplKFxuICAgICAgICBmdW5jdGlvbnNSZWYuY3VycmVudCxcbiAgICAgICAgc3R5bGVzUmVmLmN1cnJlbnQsXG4gICAgICAgIGdyaWRTcGVjc1JlZi5jdXJyZW50LFxuICAgIClcblxuICAgIC8vIGZvciBtb3VudFxuICAgIGNvbnN0IHNjcm9sbGVyU2Vzc2lvbklEUmVmID0gdXNlUmVmKG51bGwpO1xuXG4gICAgaWYgKHNjcm9sbGVyU2Vzc2lvbklEUmVmLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgc2Nyb2xsZXJTZXNzaW9uSURSZWYuY3VycmVudCA9IGdldFNlc3Npb25JRCgpXG4gICAgfVxuXG4gICAgY29uc3Qgc2Nyb2xsZXJJRCA9IHNjcm9sbGVyU2Vzc2lvbklEUmVmLmN1cnJlbnRcblxuICAgIC8vIGNvbnNvbGUubG9nKCdzY3JvbGxlcklEJyxzY3JvbGxlcklEKVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tWyByZW5kZXIgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFJlYWN0LlN0cmljdE1vZGU+XG4gICAgICAgIDxWaWV3cG9ydFxuXG4gICAgICAgICAgICBncmlkU3BlY3MgPSB7Z3JpZFNwZWNzUmVmLmN1cnJlbnR9XG5cbiAgICAgICAgICAgIHN0eWxlcyA9IHsgc3R5bGVzUmVmLmN1cnJlbnQgfVxuXG4gICAgICAgICAgICBzY3JvbGxlcklEID0geyBzY3JvbGxlcklEIH1cbiAgICAgICAgPlxuICAgICAgICBcbiAgICAgICAgICAgIDxTY3JvbGxibG9ja1xuXG4gICAgICAgICAgICAgICAgZ3JpZFNwZWNzID0ge2dyaWRTcGVjc1JlZi5jdXJyZW50fVxuXG4gICAgICAgICAgICAgICAgc3R5bGVzID0geyBzdHlsZXNSZWYuY3VycmVudCB9XG5cbiAgICAgICAgICAgICAgICBzY3JvbGxlcklEID0geyBzY3JvbGxlcklEIH1cblxuICAgICAgICAgICAgICAgIGxpc3RzaXplID0geyBsaXN0U2l6ZSB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPENyYWRsZSBcblxuICAgICAgICAgICAgICAgICAgICBncmlkU3BlY3MgPSB7Z3JpZFNwZWNzUmVmLmN1cnJlbnR9XG5cbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzID0geyBzdHlsZXNSZWYuY3VycmVudCB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsZXJJRCA9IHsgc2Nyb2xsZXJJRCB9XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbGVyTmFtZSA9IHsgc2Nyb2xsZXJOYW1lIH1cblxuICAgICAgICAgICAgICAgICAgICBsaXN0c2l6ZSA9IHsgbGlzdFNpemUgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9ucyA9IHsgZnVuY3Rpb25zUmVmLmN1cnJlbnQgfVxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmlzaWJsZUluZGV4ID0geyBkZWZhdWx0VmlzaWJsZUluZGV4IH1cbiAgICAgICAgICAgICAgICAgICAgZ2V0SXRlbSA9IHsgZ2V0SXRlbSB9XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyID0geyBwbGFjZWhvbGRlciB9XG4gICAgICAgICAgICAgICAgICAgIHJ1bndheWNvdW50ID0geyBydW53YXlTaXplIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVha2xpbmVPZmZzZXQgPSB7IGJyZWFrbGluZU9mZnNldCB9XG5cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9TY3JvbGxibG9jaz5cbiAgICAgICAgPC9WaWV3cG9ydD5cbiAgICAgICAgPC9SZWFjdC5TdHJpY3RNb2RlPlxuXG4gICAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbmZpbml0ZUdyaWRTY3JvbGxlclxuXG4vLyB1dGlsaXRpZXNcbmZ1bmN0aW9uIGZyZWV6ZSguLi5hcmdzKSB7XG4gICAgbGV0IFthcmcsIC4uLnJlc3RdID0gQXJyYXkuZnJvbShhcmd1bWVudHMpXG4gICAgT2JqZWN0LmZyZWV6ZShhcmcpXG4gICAgaWYgKHJlc3QubGVuZ3RoID09IDApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGZyZWV6ZSguLi5yZXN0KVxufVxuXG5mdW5jdGlvbiBjb21wYXJlUHJvcHMgKG9iajEsb2JqMikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmoxKVxuICAgIGxldCBzYW1lXG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcbiAgICAgICAgaWYgKCFPYmplY3QuaXMob2JqMVtrZXldLG9iajJba2V5XSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG59XG4iXSwibmFtZXMiOlsiZ2xvYmFsU2Nyb2xsZXJJRCIsImdldFNlc3Npb25JRCIsIkluZmluaXRlR3JpZFNjcm9sbGVyIiwiYXJncyIsInByb3BzIiwiT2JqZWN0IiwiYXNzaWduIiwiZnVuY3Rpb25zIiwiX2EiLCJzdHlsZXMiLCJfYiIsImdhcCIsIl9jIiwicGFkZGluZyIsIl9kIiwicnVud2F5U2l6ZSIsIl9lIiwiaW5kZXhPZmZzZXQiLCJfZiIsImxpc3RTaXplIiwiX2ciLCJsYXlvdXQiLCJfaCIsIk1hdGgiLCJtYXgiLCJtaW4iLCJpbmNsdWRlcyIsIm9yaWVudGF0aW9uIiwiYnJlYWtsaW5lT2Zmc2V0IiwiX2oiLCJjZWxsSGVpZ2h0IiwiY2VsbFdpZHRoIiwiZGVuc2UiLCJkZWZhdWx0VmlzaWJsZUluZGV4IiwiZ2V0SXRlbSIsInBsYWNlaG9sZGVyIiwic2Nyb2xsZXJOYW1lIiwiZ3JpZFNwZWNzIiwiZ3JpZFNwZWNzUmVmIiwic3R5bGVzUmVmIiwiZnVuY3Rpb25zUmVmIiwiY29tcGFyZVByb3BzIiwiY3VycmVudCIsImZyZWV6ZSIsInNjcm9sbGVyU2Vzc2lvbklEUmVmIiwic2Nyb2xsZXJJRCIsInJlYWN0XzEiLCJTdHJpY3RNb2RlIiwidmlld3BvcnRfMSIsInNjcm9sbGJsb2NrXzEiLCJsaXN0c2l6ZSIsImNyYWRsZV8xIiwicnVud2F5Y291bnQiLCJleHBvcnRzIiwiQXJyYXkiLCJmcm9tIiwiYXJndW1lbnRzIiwiYXJnIiwicmVzdCIsImxlbmd0aCIsIm9iajEiLCJvYmoyIiwia2V5cyIsInNhbWUiLCJfaSIsImtleSIsImlzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/infinitegridscroller.tsx\n");

/***/ }),

/***/ "./src/placeholder.tsx":
/*!*****************************!*\
  !*** ./src/placeholder.tsx ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // placeholder.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar Placeholder = function Placeholder(_a) {\n  var index = _a.index,\n      listsize = _a.listsize,\n      error = _a.error;\n  var stylesRef = (0, react_1.useRef)({\n    position: 'relative',\n    boxSizing: 'border-box',\n    backgroundColor: 'cyan',\n    border: '2px solid black',\n    height: '100%',\n    width: '100%'\n  });\n  var itemStylesRef = (0, react_1.useRef)({\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: '3px',\n    opacity: .5,\n    borderRadius: '8px',\n    backgroundColor: 'white',\n    margin: '3px',\n    fontSize: 'smaller'\n  });\n  return react_1[\"default\"].createElement(\"div\", {\n    style: stylesRef.current\n  }, !error ? react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, index + 1, \"/\", listsize) : react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, \"item is not available at this time\"));\n};\n\nexports[\"default\"] = Placeholder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGxhY2Vob2xkZXIudHN4LmpzIiwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQSxJQUFNQSxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFDQyxFQUFELEVBQXlCO01BQXZCQyxLQUFLO01BQUVDLFFBQVE7TUFBRUMsS0FBSztBQUV4QyxNQUFNQyxTQUFTLEdBQUcsb0JBQU87QUFDckJDLFlBQVEsRUFBQyxVQURZO0FBRXJCQyxhQUFTLEVBQUMsWUFGVztBQUdyQkMsbUJBQWUsRUFBQyxNQUhLO0FBSXJCQyxVQUFNLEVBQUMsaUJBSmM7QUFLckJDLFVBQU0sRUFBQyxNQUxjO0FBTXJCQyxTQUFLLEVBQUM7QUFOZSxHQUFQLENBQWxCO0FBUUEsTUFBTUMsYUFBYSxHQUFHLG9CQUNsQjtBQUNJTixZQUFRLEVBQUMsVUFEYjtBQUVJTyxPQUFHLEVBQUMsQ0FGUjtBQUdJQyxRQUFJLEVBQUMsQ0FIVDtBQUlJQyxXQUFPLEVBQUMsS0FKWjtBQUtJQyxXQUFPLEVBQUMsRUFMWjtBQU1JQyxnQkFBWSxFQUFDLEtBTmpCO0FBT0lULG1CQUFlLEVBQUMsT0FQcEI7QUFRSVUsVUFBTSxFQUFDLEtBUlg7QUFTSUMsWUFBUSxFQUFDO0FBVGIsR0FEa0IsQ0FBdEI7QUFjQSxTQUFPQztBQUFLQyxTQUFLLEVBQUloQixTQUFTLENBQUNpQjtBQUF4QixLQUNELENBQUNsQixLQUFELEdBQ0VnQjtBQUFLQyxTQUFLLEVBQUlULGFBQWEsQ0FBQ1U7QUFBNUIsS0FBc0NwQixLQUFLLEdBQUcsQ0FBOUMsT0FBa0RDLFFBQWxELENBREYsR0FFRWlCO0FBQUtDLFNBQUssRUFBSVQsYUFBYSxDQUFDVTtBQUE1QixLQUFtQyxvQ0FBbkMsQ0FIRCxDQUFQO0FBT0gsQ0EvQkQ7O0FBaUNBQyxrQkFBQUEsR0FBZXZCLFdBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vc3JjL3BsYWNlaG9sZGVyLnRzeD8xMTMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBsYWNlaG9sZGVyLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDIwIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbmltcG9ydCBSZWFjdCwge3VzZVJlZiwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcblxuY29uc3QgUGxhY2Vob2xkZXIgPSAoe2luZGV4LCBsaXN0c2l6ZSwgZXJyb3J9KSA9PiB7XG5cbiAgICBjb25zdCBzdHlsZXNSZWYgPSB1c2VSZWYoe1xuICAgICAgICBwb3NpdGlvbjoncmVsYXRpdmUnLFxuICAgICAgICBib3hTaXppbmc6J2JvcmRlci1ib3gnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6J2N5YW4nLFxuICAgICAgICBib3JkZXI6JzJweCBzb2xpZCBibGFjaycsXG4gICAgICAgIGhlaWdodDonMTAwJScsXG4gICAgICAgIHdpZHRoOicxMDAlJ1xuICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcylcbiAgICBjb25zdCBpdGVtU3R5bGVzUmVmID0gdXNlUmVmKFxuICAgICAgICB7XG4gICAgICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOjAsXG4gICAgICAgICAgICBsZWZ0OjAsXG4gICAgICAgICAgICBwYWRkaW5nOiczcHgnLFxuICAgICAgICAgICAgb3BhY2l0eTouNSxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czonOHB4JyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjond2hpdGUnLCBcbiAgICAgICAgICAgIG1hcmdpbjonM3B4JyxcbiAgICAgICAgICAgIGZvbnRTaXplOidzbWFsbGVyJyxcbiAgICAgICAgfSBhcyBSZWFjdC5DU1NQcm9wZXJ0aWVzXG4gICAgKVxuXG4gICAgcmV0dXJuIDxkaXYgc3R5bGUgPSB7c3R5bGVzUmVmLmN1cnJlbnR9PlxuICAgICAgICB7ICFlcnJvcj9cbiAgICAgICAgICAgIDxkaXYgc3R5bGUgPSB7aXRlbVN0eWxlc1JlZi5jdXJyZW50fT57aW5kZXggKyAxfS97bGlzdHNpemV9PC9kaXY+OlxuICAgICAgICAgICAgPGRpdiBzdHlsZSA9IHtpdGVtU3R5bGVzUmVmLmN1cnJlbnR9Pml0ZW0gaXMgbm90IGF2YWlsYWJsZSBhdCB0aGlzIHRpbWU8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICA8L2Rpdj5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGxhY2Vob2xkZXIiXSwibmFtZXMiOlsiUGxhY2Vob2xkZXIiLCJfYSIsImluZGV4IiwibGlzdHNpemUiLCJlcnJvciIsInN0eWxlc1JlZiIsInBvc2l0aW9uIiwiYm94U2l6aW5nIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiaGVpZ2h0Iiwid2lkdGgiLCJpdGVtU3R5bGVzUmVmIiwidG9wIiwibGVmdCIsInBhZGRpbmciLCJvcGFjaXR5IiwiYm9yZGVyUmFkaXVzIiwibWFyZ2luIiwiZm9udFNpemUiLCJyZWFjdF8xIiwic3R5bGUiLCJjdXJyZW50IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/placeholder.tsx\n");

/***/ }),

/***/ "./src/scrollblock.tsx":
/*!*****************************!*\
  !*** ./src/scrollblock.tsx ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("// scrollblock.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\n/*\n    TODO\n    update length for cradle adjustments based on variable length changes in cell shells.\n\n*/\n\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\");\n\nvar Scrollblock = function Scrollblock(_a) {\n  var children = _a.children,\n      listsize = _a.listsize,\n      gridSpecs = _a.gridSpecs,\n      styles = _a.styles,\n      scrollerID = _a.scrollerID;\n  var orientation = gridSpecs.orientation,\n      gap = gridSpecs.gap,\n      padding = gridSpecs.padding,\n      cellHeight = gridSpecs.cellHeight,\n      cellWidth = gridSpecs.cellWidth,\n      layout = gridSpecs.layout,\n      dense = gridSpecs.dense; // -------------------------[ context and state ]-------------------------\n\n  var viewportInterruptProperties = (0, react_1.useContext)(viewport_1.ViewportInterrupt); // console.log('running scrollblock')\n  // -----------------------------------[ data heap ]-------------------------\n\n  var baseScrollBlockLengthRef = (0, react_1.useRef)(null); // const scrollblockRef = useRef(null)\n\n  var divlinerstyleRef = (0, react_1.useRef)(Object.assign({\n    backgroundColor: 'white',\n    position: 'relative'\n  }, styles.cradle));\n\n  var _b = (0, react_1.useState)(divlinerstyleRef.current),\n      divlinerstyle = _b[0],\n      saveDivlinerstyle = _b[1]; // to trigger render\n\n\n  var _c = viewportInterruptProperties.viewportDimensions,\n      width = _c.width,\n      height = _c.height;\n  (0, react_1.useLayoutEffect)(function () {\n    // console.log('updating scrollblock divlinerstyleRef')\n    updateBaseBlockLength();\n    divlinerstyleRef.current = updateScrollblockStyles(orientation, divlinerstyleRef, baseScrollBlockLengthRef);\n    saveDivlinerstyle(divlinerstyleRef.current);\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]);\n  var updateBaseBlockLength = (0, react_1.useCallback)(function () {\n    var basescrollblocklength = calcBaseScrollblockLength({\n      orientation: orientation,\n      viewportheight: height,\n      viewportwidth: width,\n      listsize: listsize,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding\n    });\n    baseScrollBlockLengthRef.current = basescrollblocklength;\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]);\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'scrollblock',\n    style: divlinerstyleRef.current\n  }, children);\n}; // Scrollblock\n// all the parameters affect the length\n\n\nvar calcBaseScrollblockLength = function calcBaseScrollblockLength(_a) {\n  var orientation = _a.orientation,\n      viewportheight = _a.viewportheight,\n      viewportwidth = _a.viewportwidth,\n      listsize = _a.listsize,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      padding = _a.padding; // dependents of orientation\n\n  var crosslength;\n  var cellLength;\n  var viewportcrosslength;\n\n  if (orientation == 'vertical') {\n    crosslength = cellWidth + gap;\n    cellLength = cellHeight + gap;\n    viewportcrosslength = viewportwidth;\n  } else {\n    // 'horizontal'\n    crosslength = cellHeight + gap;\n    cellLength = cellWidth + gap;\n    viewportcrosslength = viewportheight;\n  } // adjustments to viewportcrosslength\n\n\n  viewportcrosslength -= padding * 2;\n  viewportcrosslength += gap;\n  if (viewportcrosslength < crosslength) viewportcrosslength = crosslength; // must be at least one\n\n  var crosscount = Math.floor(viewportcrosslength / crosslength);\n  var listlength = Math.ceil(listsize / crosscount);\n  var straightlength = listlength * cellLength - (listlength > 0 ? gap : 0) + padding * 2;\n  return straightlength;\n};\n\nvar updateScrollblockStyles = function updateScrollblockStyles(orientation, stylesRef, baseScrollblocklengthRef) {\n  var localstyles = Object.assign({}, stylesRef.current);\n  var height;\n  var width;\n\n  if (orientation == 'horizontal') {\n    height = '100%';\n    width = baseScrollblocklengthRef.current + 'px';\n  } else if (orientation == 'vertical') {\n    height = baseScrollblocklengthRef.current + 'px';\n    width = '100%';\n  }\n\n  localstyles.height = height;\n  localstyles.width = width;\n  return localstyles;\n};\n\nexports[\"default\"] = Scrollblock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scrollblock.tsx\n");

/***/ }),

/***/ "./src/scrolltracker.tsx":
/*!*******************************!*\
  !*** ./src/scrolltracker.tsx ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(" // scrolltracker.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar ScrollTracker = function ScrollTracker(_a) {\n  var top = _a.top,\n      left = _a.left,\n      offset = _a.offset,\n      listsize = _a.listsize,\n      styles = _a.styles;\n  var trackdata = \"\".concat(offset + 1, \"/\").concat(listsize);\n  var styleRef = (0, react_1.useRef)(Object.assign({\n    top: top + 'px',\n    left: left + 'px',\n    position: 'fixed',\n    zIndex: 3,\n    backgroundColor: 'white',\n    border: '1px solid gray',\n    borderRadius: '10px',\n    fontSize: 'smaller',\n    padding: '3px'\n  }, styles.scrolltracker));\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-name\": 'scrolltracker',\n    style: styleRef.current\n  }, trackdata);\n};\n\nexports[\"default\"] = ScrollTracker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nyb2xsdHJhY2tlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBLElBQU1BLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ0MsRUFBRCxFQUF3QztNQUFyQ0MsR0FBRztNQUFFQyxJQUFJO01BQUVDLE1BQU07TUFBRUMsUUFBUTtNQUFFQyxNQUFNO0FBRXhELE1BQUlDLFNBQVMsR0FBRyxVQUFHSCxNQUFNLEdBQUcsQ0FBWixFQUFhLEdBQWIsRUFBYUksTUFBYixDQUFpQkgsUUFBakIsQ0FBaEI7QUFFQSxNQUFJSSxRQUFRLEdBQUcsb0JBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ2hDVCxPQUFHLEVBQUVBLEdBQUcsR0FBRyxJQURxQjtBQUVoQ0MsUUFBSSxFQUFFQSxJQUFJLEdBQUcsSUFGbUI7QUFHaENTLFlBQVEsRUFBQyxPQUh1QjtBQUloQ0MsVUFBTSxFQUFDLENBSnlCO0FBS2hDQyxtQkFBZSxFQUFDLE9BTGdCO0FBTWhDQyxVQUFNLEVBQUUsZ0JBTndCO0FBT2hDQyxnQkFBWSxFQUFDLE1BUG1CO0FBUWhDQyxZQUFRLEVBQUMsU0FSdUI7QUFTaENDLFdBQU8sRUFBQztBQVR3QixHQUFkLEVBVUdaLE1BQU0sQ0FBQ2EsYUFWVixDQUFQLENBQWY7QUFZQSxTQUFPQztBQUFBLGlCQUFpQixlQUFqQjtBQUFpQ0MsU0FBSyxFQUFJWixRQUFRLENBQUNhO0FBQW5ELEtBQThEZixTQUE5RCxDQUFQO0FBQ0gsQ0FqQkQ7O0FBbUJBZ0Isa0JBQUFBLEdBQWV2QixhQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL3NyYy9zY3JvbGx0cmFja2VyLnRzeD9mZjgxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNjcm9sbHRyYWNrZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMjAgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuaW1wb3J0IFJlYWN0LCB7dXNlUmVmfSBmcm9tICdyZWFjdCdcblxuY29uc3QgU2Nyb2xsVHJhY2tlciA9ICh7IHRvcCwgbGVmdCwgb2Zmc2V0LCBsaXN0c2l6ZSwgc3R5bGVzIH0pID0+IHtcblxuICAgIGxldCB0cmFja2RhdGEgPSBgJHtvZmZzZXQgKyAxfS8ke2xpc3RzaXplfWBcblxuICAgIGxldCBzdHlsZVJlZiA9IHVzZVJlZihPYmplY3QuYXNzaWduKHtcbiAgICAgICAgdG9wOiB0b3AgKyAncHgnLFxuICAgICAgICBsZWZ0OiBsZWZ0ICsgJ3B4JyxcbiAgICAgICAgcG9zaXRpb246J2ZpeGVkJyxcbiAgICAgICAgekluZGV4OjMsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjond2hpdGUnLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgZ3JheScsXG4gICAgICAgIGJvcmRlclJhZGl1czonMTBweCcsXG4gICAgICAgIGZvbnRTaXplOidzbWFsbGVyJyxcbiAgICAgICAgcGFkZGluZzonM3B4J1xuICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcyxzdHlsZXMuc2Nyb2xsdHJhY2tlcikpXG5cbiAgICByZXR1cm4gPGRpdiBkYXRhLW5hbWUgPSAnc2Nyb2xsdHJhY2tlcicgc3R5bGUgPSB7c3R5bGVSZWYuY3VycmVudH0gPnt0cmFja2RhdGF9PC9kaXY+XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbFRyYWNrZXIiXSwibmFtZXMiOlsiU2Nyb2xsVHJhY2tlciIsIl9hIiwidG9wIiwibGVmdCIsIm9mZnNldCIsImxpc3RzaXplIiwic3R5bGVzIiwidHJhY2tkYXRhIiwiY29uY2F0Iiwic3R5bGVSZWYiLCJPYmplY3QiLCJhc3NpZ24iLCJwb3NpdGlvbiIsInpJbmRleCIsImJhY2tncm91bmRDb2xvciIsImJvcmRlciIsImJvcmRlclJhZGl1cyIsImZvbnRTaXplIiwicGFkZGluZyIsInNjcm9sbHRyYWNrZXIiLCJyZWFjdF8xIiwic3R5bGUiLCJjdXJyZW50IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scrolltracker.tsx\n");

/***/ }),

/***/ "./src/viewport.tsx":
/*!**************************!*\
  !*** ./src/viewport.tsx ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("// viewport.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\n/*\n    The role of viewport is to provide data to its children (scrollblock and cradle),\n    and act as the visible screen portal of the list being shown\n*/\n\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ViewportInterrupt = void 0;\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nexports.ViewportInterrupt = react_1[\"default\"].createContext(null); // for children\n\nvar resize_observer_1 = __webpack_require__(/*! @juggle/resize-observer */ \"./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\"); // import InterruptHandler from './cradle/interrupthandler'\n\n\nvar cradle_1 = __webpack_require__(/*! ./cradle */ \"./src/cradle.tsx\");\n\nvar ResizeObserver = window['ResizeObserver'] || resize_observer_1.ResizeObserver; // control constant\n\nvar RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE = 250;\n\nvar Viewport = function Viewport(_a) {\n  // -----------------------[ initialize ]------------------\n  var children = _a.children,\n      gridSpecs = _a.gridSpecs,\n      styles = _a.styles,\n      scrollerID = _a.scrollerID;\n  var orientation = gridSpecs.orientation,\n      gap = gridSpecs.gap,\n      padding = gridSpecs.padding,\n      cellHeight = gridSpecs.cellHeight,\n      cellWidth = gridSpecs.cellWidth,\n      layout = gridSpecs.layout,\n      dense = gridSpecs.dense;\n\n  var _b = (0, react_1.useState)('setup'),\n      viewportState = _b[0],\n      setViewportState = _b[1]; // setup, resizing, resized, render\n  // console.log('running viewport', viewportState)\n\n\n  var viewportStateRef = (0, react_1.useRef)(null); // for useCallback -> resizeCallback scope\n\n  viewportStateRef.current = viewportState; // only available if viewport is a child of an infiniteScroller\n  // const parentCradlePropertiesRef = useContext(ParentCradlePortalsContext);\n\n  var parentPortalHandler = (0, react_1.useContext)(cradle_1.CradlePortalsContext); // if this is a scroller child, get the parent portal handler\n  // const parentPortalHandlerRef = useRef(parentCradlePropertiesRef?.current.portalHandler);\n\n  var isMountedRef = (0, react_1.useRef)(true); // monitor for unmounted\n\n  (0, react_1.useEffect)(function () {\n    // unmount\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  var divlinerstyleRef = (0, react_1.useRef)(null); // integrate inherited styles\n\n  divlinerstyleRef.current = (0, react_1.useMemo)(function () {\n    return Object.assign({\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      overflow: 'auto',\n      backgroundColor: 'red'\n    }, styles.viewport);\n  }, [styles.viewport]);\n  var viewportdivRef = (0, react_1.useRef)(null); // viewportInterruptPropertiesRef is passed as an interrupt (context) to children\n\n  var viewportInterruptPropertiesRef = (0, react_1.useRef)({\n    portal: null,\n    isResizing: false,\n    index: null\n  }); // --------------------[ resizer setup ]-----------------------\n\n  var resizeTimeridRef = (0, react_1.useRef)(null);\n  var isResizingRef = (0, react_1.useRef)(false);\n  var resizeObserverRef = (0, react_1.useRef)(null); // set up resizeObserver\n\n  (0, react_1.useEffect)(function () {\n    // initialize\n    resizeObserverRef.current = new ResizeObserver(resizeCallback);\n    resizeObserverRef.current.observe(viewportdivRef.current); // unmount\n\n    return function () {\n      resizeObserverRef.current.disconnect();\n    };\n  }, []); // used by resizeObserver; generates interrupt\n\n  var resizeCallback = (0, react_1.useCallback)(function (entries) {\n    if (viewportStateRef.current == 'setup') {\n      return;\n    }\n\n    var target = entries[0].target; // first register shouldn't generate interrupt\n\n    if (!target.dataset.initialized) {\n      target.dataset.initialized = true; // console.log('initialed target', target.dataset)\n\n      return;\n    } // generate interrupt response, if initiating resize\n\n\n    if (!isResizingRef.current) {\n      viewportInterruptPropertiesRef.current.isResizing = isResizingRef.current = true; // new object creation triggers a realtime interrupt message to cradle through context\n      // console.log('updating viewportInterruptPropertiesRef in resizeCallback')\n\n      viewportInterruptPropertiesRef.current = Object.assign({}, viewportInterruptPropertiesRef.current);\n      if (isMountedRef.current) setViewportState('resizing');\n    }\n\n    clearTimeout(resizeTimeridRef.current);\n    resizeTimeridRef.current = setTimeout(function () {\n      isResizingRef.current = false;\n\n      if (isMountedRef.current) {\n        setViewportState('resized');\n      }\n    }, RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE);\n  }, []); // -------------------[ set portal for non-root viewports ]-------------\n\n  (0, react_1.useEffect)(function () {\n    // if (!parentPortalHandlerRef.current) return // root viewport; has no portal\n    // const parentPortalHandler = parentPortalHandlerRef.current\n    if (!parentPortalHandler) return; // root viewport; has no portal\n\n    var portalindex;\n    var element = viewportdivRef.current;\n\n    while (element) {\n      if (element.dataset && element.dataset.type == 'portalcontainer') {\n        portalindex = parseInt(element.dataset.index);\n        viewportInterruptPropertiesRef.current.portal = parentPortalHandler.getPortal(portalindex);\n        viewportInterruptPropertiesRef.current.index = portalindex;\n        break;\n      } else {\n        element = element.parentElement;\n      }\n    }\n\n    if (!element) {\n      console.log('ERROR: parent portalcontainer not found');\n      return;\n    }\n  }, []); // ----------------------------------[ calculate config ]--------------------------------\n  // calculated values\n\n  divlinerstyleRef.current = (0, react_1.useMemo)(function () {\n    // TODO: gap\n    var mincrosslength = calcMinViewportCrossLength(orientation, cellWidth, cellHeight, gap, padding);\n    var styles = Object.assign({}, divlinerstyleRef.current); // avoid readonly\n\n    if (orientation == 'vertical') {\n      styles.minWidth = mincrosslength + 'px';\n      styles.minHeight = 'auto';\n    } else {\n      styles.minWidth = 'auto';\n      styles.minHeight = mincrosslength + 'px';\n    }\n\n    return styles;\n  }, [orientation, cellWidth, cellHeight, gap, padding]); // measure viewport dimensions for children\n  // TODO: should dimensions be updated during resize or only after resize?\n\n  viewportInterruptPropertiesRef.current = (0, react_1.useMemo)(function () {\n    // console.log('useMemo state', viewportState)\n    if (viewportState == 'setup') return viewportInterruptPropertiesRef.current;\n\n    var _a = viewportdivRef.current.getBoundingClientRect(),\n        top = _a.top,\n        right = _a.right,\n        bottom = _a.bottom,\n        left = _a.left;\n\n    var width = right - left;\n    var height = bottom - top; // TODO this is a duplicate setting procedure with interrupthandler.tsx cradleIntersectionObserverCallback\n\n    var localViewportData = {\n      viewportDimensions: {\n        top: top,\n        right: right,\n        bottom: bottom,\n        left: left,\n        width: width,\n        height: height\n      },\n      elementref: viewportdivRef,\n      isResizing: isResizingRef.current\n    }; // trigger context change with new object\n\n    var viewportdataobject = Object.assign({}, viewportInterruptPropertiesRef.current, localViewportData); // console.log('updating viewportInterruptPropertiesRef from useMemo')\n\n    return viewportdataobject;\n  }, [orientation, isResizingRef.current, viewportState]); // --------------------[ state processing ]---------------------------\n\n  (0, react_1.useLayoutEffect)(function () {\n    switch (viewportState) {\n      case 'resized':\n      case 'setup':\n        {\n          setViewportState('render');\n          break;\n        }\n    }\n  }, [viewportState]); // ----------------------[ render ]--------------------------------\n  // const oldViewportPropertiesRef = useRef(viewportInterruptPropertiesRef.current)\n  // console.log('viewport changes',\n  //     Object.is(viewportInterruptPropertiesRef.current,oldViewportPropertiesRef.current))\n  // oldViewportPropertiesRef.current = viewportInterruptPropertiesRef.current\n\n  return react_1[\"default\"].createElement(exports.ViewportInterrupt.Provider, {\n    value: viewportInterruptPropertiesRef.current\n  }, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'viewport',\n    \"data-scrollerid\": scrollerID,\n    style: divlinerstyleRef.current,\n    ref: viewportdivRef\n  }, viewportState != 'setup' && children));\n}; // Viewport\n// establish minimum width/height for the viewport -- approximately one item\n// gap only applies with multi-width items, therefore not used in calculations\n\n\nvar calcMinViewportCrossLength = function calcMinViewportCrossLength(orientation, cellWidth, cellHeight, gap, padding) {\n  // console.log('calcMinViewportCrossLength parms',orientation, cellWidth, cellHeight, padding,)\n  var crosslength, cellLength;\n\n  if (orientation == 'vertical') {\n    cellLength = cellWidth; //+ gap\n  } else {\n    cellLength = cellHeight; // + gap\n  }\n\n  crosslength = cellLength + padding * 2;\n  return crosslength;\n};\n\nexports[\"default\"] = Viewport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/viewport.tsx\n");

/***/ }),

/***/ "./node_modules/detect-browser/es/index.js":
/*!*************************************************!*\
  !*** ./node_modules/detect-browser/es/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BotInfo\": () => (/* binding */ BotInfo),\n/* harmony export */   \"BrowserInfo\": () => (/* binding */ BrowserInfo),\n/* harmony export */   \"NodeInfo\": () => (/* binding */ NodeInfo),\n/* harmony export */   \"ReactNativeInfo\": () => (/* binding */ ReactNativeInfo),\n/* harmony export */   \"SearchBotDeviceInfo\": () => (/* binding */ SearchBotDeviceInfo),\n/* harmony export */   \"browserName\": () => (/* binding */ browserName),\n/* harmony export */   \"detect\": () => (/* binding */ detect),\n/* harmony export */   \"detectOS\": () => (/* binding */ detectOS),\n/* harmony export */   \"getNodeVersion\": () => (/* binding */ getNodeVersion),\n/* harmony export */   \"parseUserAgent\": () => (/* binding */ parseUserAgent)\n/* harmony export */ });\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar BrowserInfo = /** @class */ (function () {\n    function BrowserInfo(name, version, os) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.type = 'browser';\n    }\n    return BrowserInfo;\n}());\n\nvar NodeInfo = /** @class */ (function () {\n    function NodeInfo(version) {\n        this.version = version;\n        this.type = 'node';\n        this.name = 'node';\n        this.os = process.platform;\n    }\n    return NodeInfo;\n}());\n\nvar SearchBotDeviceInfo = /** @class */ (function () {\n    function SearchBotDeviceInfo(name, version, os, bot) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.bot = bot;\n        this.type = 'bot-device';\n    }\n    return SearchBotDeviceInfo;\n}());\n\nvar BotInfo = /** @class */ (function () {\n    function BotInfo() {\n        this.type = 'bot';\n        this.bot = true; // NOTE: deprecated test name instead\n        this.name = 'bot';\n        this.version = null;\n        this.os = null;\n    }\n    return BotInfo;\n}());\n\nvar ReactNativeInfo = /** @class */ (function () {\n    function ReactNativeInfo() {\n        this.type = 'react-native';\n        this.name = 'react-native';\n        this.version = null;\n        this.os = null;\n    }\n    return ReactNativeInfo;\n}());\n\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [\n    ['aol', /AOLShield\\/([0-9\\._]+)/],\n    ['edge', /Edge\\/([0-9\\._]+)/],\n    ['edge-ios', /EdgiOS\\/([0-9\\._]+)/],\n    ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/],\n    ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/],\n    ['samsung', /SamsungBrowser\\/([0-9\\.]+)/],\n    ['silk', /\\bSilk\\/([0-9._-]+)\\b/],\n    ['miui', /MiuiBrowser\\/([0-9\\.]+)$/],\n    ['beaker', /BeakerBrowser\\/([0-9\\.]+)/],\n    ['edge-chromium', /EdgA?\\/([0-9\\.]+)/],\n    [\n        'chromium-webview',\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/,\n    ],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n    ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n    ['fxios', /FxiOS\\/([0-9\\.]+)/],\n    ['opera-mini', /Opera Mini.*Version\\/([0-9\\.]+)/],\n    ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)/],\n    ['pie', /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/],\n    ['pie', /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/],\n    ['netfront', /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/],\n    ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n    ['android', /Android\\s([0-9\\.]+)/],\n    ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9\\._]+).*Safari/],\n    ['facebook', /FB[AS]V\\/([0-9\\.]+)/],\n    ['instagram', /Instagram\\s([0-9\\.]+)/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/],\n    ['curl', /^curl\\/([0-9\\.]+)$/],\n    ['searchbot', SEARCHBOX_UA_REGEX],\n];\nvar operatingSystemRules = [\n    ['iOS', /iP(hone|od|ad)/],\n    ['Android OS', /Android/],\n    ['BlackBerry OS', /BlackBerry|BB10/],\n    ['Windows Mobile', /IEMobile/],\n    ['Amazon OS', /Kindle/],\n    ['Windows 3.11', /Win16/],\n    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],\n    ['Windows 98', /(Windows 98)|(Win98)/],\n    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],\n    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],\n    ['Windows Server 2003', /(Windows NT 5.2)/],\n    ['Windows Vista', /(Windows NT 6.0)/],\n    ['Windows 7', /(Windows NT 6.1)/],\n    ['Windows 8', /(Windows NT 6.2)/],\n    ['Windows 8.1', /(Windows NT 6.3)/],\n    ['Windows 10', /(Windows NT 10.0)/],\n    ['Windows ME', /Windows ME/],\n    ['Windows CE', /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],\n    ['Open BSD', /OpenBSD/],\n    ['Sun OS', /SunOS/],\n    ['Chrome OS', /CrOS/],\n    ['Linux', /(Linux)|(X11)/],\n    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],\n    ['QNX', /QNX/],\n    ['BeOS', /BeOS/],\n    ['OS/2', /OS\\/2/],\n];\nfunction detect(userAgent) {\n    if (!!userAgent) {\n        return parseUserAgent(userAgent);\n    }\n    if (typeof document === 'undefined' &&\n        typeof navigator !== 'undefined' &&\n        navigator.product === 'ReactNative') {\n        return new ReactNativeInfo();\n    }\n    if (typeof navigator !== 'undefined') {\n        return parseUserAgent(navigator.userAgent);\n    }\n    return getNodeVersion();\n}\nfunction matchUserAgent(ua) {\n    // opted for using reduce here rather than Array#first with a regex.test call\n    // this is primarily because using the reduce we only perform the regex\n    // execution once rather than once for the test and for the exec again below\n    // probably something that needs to be benchmarked though\n    return (ua !== '' &&\n        userAgentRules.reduce(function (matched, _a) {\n            var browser = _a[0], regex = _a[1];\n            if (matched) {\n                return matched;\n            }\n            var uaMatch = regex.exec(ua);\n            return !!uaMatch && [browser, uaMatch];\n        }, false));\n}\nfunction browserName(ua) {\n    var data = matchUserAgent(ua);\n    return data ? data[0] : null;\n}\nfunction parseUserAgent(ua) {\n    var matchedRule = matchUserAgent(ua);\n    if (!matchedRule) {\n        return null;\n    }\n    var name = matchedRule[0], match = matchedRule[1];\n    if (name === 'searchbot') {\n        return new BotInfo();\n    }\n    // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)\n    var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);\n    if (versionParts) {\n        if (versionParts.length < REQUIRED_VERSION_PARTS) {\n            versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);\n        }\n    }\n    else {\n        versionParts = [];\n    }\n    var version = versionParts.join('.');\n    var os = detectOS(ua);\n    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n    if (searchBotMatch && searchBotMatch[1]) {\n        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n    }\n    return new BrowserInfo(name, version, os);\n}\nfunction detectOS(ua) {\n    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];\n        var match = regex.exec(ua);\n        if (match) {\n            return os;\n        }\n    }\n    return null;\n}\nfunction getNodeVersion() {\n    var isNode = typeof process !== 'undefined' && process.version;\n    return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nfunction createVersionParts(count) {\n    var output = [];\n    for (var ii = 0; ii < count; ii++) {\n        output.push('0');\n    }\n    return output;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/detect-browser/es/index.js\n");

/***/ }),

/***/ "./node_modules/react-reverse-portal/dist/web/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-reverse-portal/dist/web/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InPortal\": () => (/* binding */ InPortal),\n/* harmony export */   \"OutPortal\": () => (/* binding */ OutPortal),\n/* harmony export */   \"createHtmlPortalNode\": () => (/* binding */ createHtmlPortalNode),\n/* harmony export */   \"createSvgPortalNode\": () => (/* binding */ createSvgPortalNode)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"react-dom\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n// Internally, the portalNode must be for either HTML or SVG elements\nvar ELEMENT_TYPE_HTML = 'html';\nvar ELEMENT_TYPE_SVG = 'svg';\n// ReactDOM can handle several different namespaces, but they're not exported publicly\n// https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/DOMNamespaces.js#L8-L10\nvar SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\nvar validateElementType = function (domElement, elementType) {\n    if (elementType === ELEMENT_TYPE_HTML) {\n        return domElement instanceof HTMLElement;\n    }\n    if (elementType === ELEMENT_TYPE_SVG) {\n        return domElement instanceof SVGElement;\n    }\n    throw new Error(\"Unrecognized element type \\\"\" + elementType + \"\\\" for validateElementType.\");\n};\n// This is the internal implementation: the public entry points set elementType to an appropriate value\nvar createPortalNode = function (elementType, options) {\n    var initialProps = {};\n    var parent;\n    var lastPlaceholder;\n    var element;\n    if (elementType === ELEMENT_TYPE_HTML) {\n        element = document.createElement('div');\n    }\n    else if (elementType === ELEMENT_TYPE_SVG) {\n        element = document.createElementNS(SVG_NAMESPACE, 'g');\n    }\n    else {\n        throw new Error(\"Invalid element type \\\"\" + elementType + \"\\\" for createPortalNode: must be \\\"html\\\" or \\\"svg\\\".\");\n    }\n    if (options && typeof options === \"object\") {\n        for (var _i = 0, _a = Object.entries(options.attributes); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            element.setAttribute(key, value);\n        }\n    }\n    var portalNode = {\n        element: element,\n        elementType: elementType,\n        setPortalProps: function (props) {\n            initialProps = props;\n        },\n        getInitialPortalProps: function () {\n            return initialProps;\n        },\n        mount: function (newParent, newPlaceholder) {\n            if (newPlaceholder === lastPlaceholder) {\n                // Already mounted - noop.\n                return;\n            }\n            portalNode.unmount();\n            // To support SVG and other non-html elements, the portalNode's elementType needs to match\n            // the elementType it's being rendered into\n            if (newParent !== parent) {\n                if (!validateElementType(newParent, elementType)) {\n                    throw new Error(\"Invalid element type for portal: \\\"\" + elementType + \"\\\" portalNodes must be used with \" + elementType + \" elements, but OutPortal is within <\" + newParent.tagName + \">.\");\n                }\n            }\n            newParent.replaceChild(portalNode.element, newPlaceholder);\n            parent = newParent;\n            lastPlaceholder = newPlaceholder;\n        },\n        unmount: function (expectedPlaceholder) {\n            if (expectedPlaceholder && expectedPlaceholder !== lastPlaceholder) {\n                // Skip unmounts for placeholders that aren't currently mounted\n                // They will have been automatically unmounted already by a subsequent mount()\n                return;\n            }\n            if (parent && lastPlaceholder) {\n                parent.replaceChild(lastPlaceholder, portalNode.element);\n                parent = undefined;\n                lastPlaceholder = undefined;\n            }\n        }\n    };\n    return portalNode;\n};\nvar InPortal = /** @class */ (function (_super) {\n    __extends(InPortal, _super);\n    function InPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.addPropsChannel = function () {\n            Object.assign(_this.props.node, {\n                setPortalProps: function (props) {\n                    // Rerender the child node here if/when the out portal props change\n                    _this.setState({ nodeProps: props });\n                }\n            });\n        };\n        _this.state = {\n            nodeProps: _this.props.node.getInitialPortalProps(),\n        };\n        return _this;\n    }\n    InPortal.prototype.componentDidMount = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.componentDidUpdate = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, children = _a.children, node = _a.node;\n        return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, function (child) {\n            if (!react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child))\n                return child;\n            return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, _this.state.nodeProps);\n        }), node.element);\n    };\n    return InPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar OutPortal = /** @class */ (function (_super) {\n    __extends(OutPortal, _super);\n    function OutPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.placeholderNode = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        _this.passPropsThroughPortal();\n        return _this;\n    }\n    OutPortal.prototype.passPropsThroughPortal = function () {\n        var propsForTarget = Object.assign({}, this.props, { node: undefined });\n        this.props.node.setPortalProps(propsForTarget);\n    };\n    OutPortal.prototype.componentDidMount = function () {\n        var node = this.props.node;\n        this.currentPortalNode = node;\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentDidUpdate = function () {\n        // We re-mount on update, just in case we were unmounted (e.g. by\n        // a second OutPortal, which has now been removed)\n        var node = this.props.node;\n        // If we're switching portal nodes, we need to clean up the current one first.\n        if (this.currentPortalNode && node !== this.currentPortalNode) {\n            this.currentPortalNode.unmount(this.placeholderNode.current);\n            this.currentPortalNode = node;\n        }\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentWillUnmount = function () {\n        var node = this.props.node;\n        node.unmount(this.placeholderNode.current);\n    };\n    OutPortal.prototype.render = function () {\n        // Render a placeholder to the DOM, so we can get a reference into\n        // our location in the DOM, and swap it out for the portaled node.\n        // A <div> placeholder works fine even for SVG.\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: this.placeholderNode });\n    };\n    return OutPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar createHtmlPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_HTML);\nvar createSvgPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_SVG);\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-reverse-portal/dist/web/index.js\n");

/***/ }),

/***/ "./node_modules/requestidlecallback/index.js":
/*!***************************************************!*\
  !*** ./node_modules/requestidlecallback/index.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}(function(){\n\t'use strict';\n\tvar scheduleStart, throttleDelay, lazytimer, lazyraf;\n\tvar root = typeof window != 'undefined' ?\n\t\twindow :\n\t\ttypeof __webpack_require__.g != undefined ?\n\t\t\t__webpack_require__.g :\n\t\t\tthis || {};\n\tvar requestAnimationFrame = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;\n\tvar cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;\n\tvar tasks = [];\n\tvar runAttempts = 0;\n\tvar isRunning = false;\n\tvar remainingTime = 7;\n\tvar minThrottle = 35;\n\tvar throttle = 125;\n\tvar index = 0;\n\tvar taskStart = 0;\n\tvar tasklength = 0;\n\tvar IdleDeadline = {\n\t\tget didTimeout(){\n\t\t\treturn false;\n\t\t},\n\t\ttimeRemaining: function(){\n\t\t\tvar timeRemaining = remainingTime - (Date.now() - taskStart);\n\t\t\treturn timeRemaining < 0 ? 0 : timeRemaining;\n\t\t},\n\t};\n\tvar setInactive = debounce(function(){\n\t\tremainingTime = 22;\n\t\tthrottle = 66;\n\t\tminThrottle = 0;\n\t});\n\n\tfunction debounce(fn){\n\t\tvar id, timestamp;\n\t\tvar wait = 99;\n\t\tvar check = function(){\n\t\t\tvar last = (Date.now()) - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tid = setTimeout(check, wait - last);\n\t\t\t} else {\n\t\t\t\tid = null;\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\t\treturn function(){\n\t\t\ttimestamp = Date.now();\n\t\t\tif(!id){\n\t\t\t\tid = setTimeout(check, wait);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction abortRunning(){\n\t\tif(isRunning){\n\t\t\tif(lazyraf){\n\t\t\t\tcancelRequestAnimationFrame(lazyraf);\n\t\t\t}\n\t\t\tif(lazytimer){\n\t\t\t\tclearTimeout(lazytimer);\n\t\t\t}\n\t\t\tisRunning = false;\n\t\t}\n\t}\n\n\tfunction onInputorMutation(){\n\t\tif(throttle != 125){\n\t\t\tremainingTime = 7;\n\t\t\tthrottle = 125;\n\t\t\tminThrottle = 35;\n\n\t\t\tif(isRunning) {\n\t\t\t\tabortRunning();\n\t\t\t\tscheduleLazy();\n\t\t\t}\n\t\t}\n\t\tsetInactive();\n\t}\n\n\tfunction scheduleAfterRaf() {\n\t\tlazyraf = null;\n\t\tlazytimer = setTimeout(runTasks, 0);\n\t}\n\n\tfunction scheduleRaf(){\n\t\tlazytimer = null;\n\t\trequestAnimationFrame(scheduleAfterRaf);\n\t}\n\n\tfunction scheduleLazy(){\n\n\t\tif(isRunning){return;}\n\t\tthrottleDelay = throttle - (Date.now() - taskStart);\n\n\t\tscheduleStart = Date.now();\n\n\t\tisRunning = true;\n\n\t\tif(minThrottle && throttleDelay < minThrottle){\n\t\t\tthrottleDelay = minThrottle;\n\t\t}\n\n\t\tif(throttleDelay > 9){\n\t\t\tlazytimer = setTimeout(scheduleRaf, throttleDelay);\n\t\t} else {\n\t\t\tthrottleDelay = 0;\n\t\t\tscheduleRaf();\n\t\t}\n\t}\n\n\tfunction runTasks(){\n\t\tvar task, i, len;\n\t\tvar timeThreshold = remainingTime > 9 ?\n\t\t\t9 :\n\t\t\t1\n\t\t;\n\n\t\ttaskStart = Date.now();\n\t\tisRunning = false;\n\n\t\tlazytimer = null;\n\n\t\tif(runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart){\n\t\t\tfor(i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++){\n\t\t\t\ttask = tasks.shift();\n\t\t\t\ttasklength++;\n\t\t\t\tif(task){\n\t\t\t\t\ttask(IdleDeadline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(tasks.length){\n\t\t\tscheduleLazy();\n\t\t} else {\n\t\t\trunAttempts = 0;\n\t\t}\n\t}\n\n\tfunction requestIdleCallbackShim(task){\n\t\tindex++;\n\t\ttasks.push(task);\n\t\tscheduleLazy();\n\t\treturn index;\n\t}\n\n\tfunction cancelIdleCallbackShim(id){\n\t\tvar index = id - 1 - tasklength;\n\t\tif(tasks[index]){\n\t\t\ttasks[index] = null;\n\t\t}\n\t}\n\n\tif(!root.requestIdleCallback || !root.cancelIdleCallback){\n\t\troot.requestIdleCallback = requestIdleCallbackShim;\n\t\troot.cancelIdleCallback = cancelIdleCallbackShim;\n\n\t\tif(root.document && document.addEventListener){\n\t\t\troot.addEventListener('scroll', onInputorMutation, true);\n\t\t\troot.addEventListener('resize', onInputorMutation);\n\n\t\t\tdocument.addEventListener('focus', onInputorMutation, true);\n\t\t\tdocument.addEventListener('mouseover', onInputorMutation, true);\n\t\t\t['click', 'keypress', 'touchstart', 'mousedown'].forEach(function(name){\n\t\t\t\tdocument.addEventListener(name, onInputorMutation, {capture: true, passive: true});\n\t\t\t});\n\n\t\t\tif(root.MutationObserver){\n\t\t\t\tnew MutationObserver( onInputorMutation ).observe( document.documentElement, {childList: true, subtree: true, attributes: true} );\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\troot.requestIdleCallback(function(){}, {timeout: 0});\n\t\t} catch(e){\n\t\t\t(function(rIC){\n\t\t\t\tvar timeRemainingProto, timeRemaining;\n\t\t\t\troot.requestIdleCallback = function(fn, timeout){\n\t\t\t\t\tif(timeout && typeof timeout.timeout == 'number'){\n\t\t\t\t\t\treturn rIC(fn, timeout.timeout);\n\t\t\t\t\t}\n\t\t\t\t\treturn rIC(fn);\n\t\t\t\t};\n\t\t\t\tif(root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)){\n\t\t\t\t\ttimeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, 'timeRemaining');\n\t\t\t\t\tif(!timeRemaining || !timeRemaining.configurable || !timeRemaining.get){return;}\n\t\t\t\t\tObject.defineProperty(timeRemainingProto, 'timeRemaining', {\n\t\t\t\t\t\tvalue:  function(){\n\t\t\t\t\t\t\treturn timeRemaining.get.call(this);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(root.requestIdleCallback)\n\t\t}\n\t}\n\n\treturn {\n\t\trequest: requestIdleCallbackShim,\n\t\tcancel: cancelIdleCallbackShim,\n\t};\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/requestidlecallback/index.js\n");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_react__;

/***/ }),

/***/ "react-dom":
/*!****************************!*\
  !*** external "react-dom" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/infinitegridscroller.tsx");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});