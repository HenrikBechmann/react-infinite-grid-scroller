!function(Q,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("React")):"function"==typeof define&&define.amd?define(["React"],t):"object"==typeof exports?exports.Scroller=t(require("React")):Q.Scroller=t(Q.React)}(window,(function(__WEBPACK_EXTERNAL_MODULE__0__){return function(Q){var t={};function g(I){if(t[I])return t[I].exports;var B=t[I]={i:I,l:!1,exports:{}};return Q[I].call(B.exports,B,B.exports,g),B.l=!0,B.exports}return g.m=Q,g.c=t,g.d=function(Q,t,I){g.o(Q,t)||Object.defineProperty(Q,t,{enumerable:!0,get:I})},g.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},g.t=function(Q,t){if(1&t&&(Q=g(Q)),8&t)return Q;if(4&t&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var I=Object.create(null);if(g.r(I),Object.defineProperty(I,"default",{enumerable:!0,value:Q}),2&t&&"string"!=typeof Q)for(var B in Q)g.d(I,B,function(t){return Q[t]}.bind(null,B));return I},g.n=function(Q){var t=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return g.d(t,"a",t),t},g.o=function(Q,t){return Object.prototype.hasOwnProperty.call(Q,t)},g.p="",g(g.s=3)}([function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci9leHRlcm5hbCBcIlJlYWN0XCI/YzQ4MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval(" // viewport.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n    The role of viewport is to provide data to its children (scrollblock and cradle),\n    and act as the visible portal of the list being shown\n*/\n\nvar react_1 = __importStar(__webpack_require__(0));\n\nexports.ViewportContext = react_1[\"default\"].createContext(null);\n\nvar react_is_mounted_hook_1 = __importDefault(__webpack_require__(2)); // control constant\n\n\nvar RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE = 250;\n\nvar Viewport = function Viewport(_a) {\n  // -----------------------[ initialize ]------------------\n  var children = _a.children,\n      orientation = _a.orientation,\n      cellWidth = _a.cellWidth,\n      cellHeight = _a.cellHeight,\n      gap = _a.gap,\n      padding = _a.padding,\n      component = _a.component,\n      styles = _a.styles; // processing state\n\n  var _b = react_1.useState('prepare'),\n      portstate = _b[0],\n      setPortState = _b[1];\n\n  var isMounted = react_is_mounted_hook_1[\"default\"](); // data heap\n\n  var timeoutidRef = react_1.useRef(null);\n  var viewportdivRef = react_1.useRef(undefined);\n  var resizeScrollPosRef = react_1.useRef({\n    top: 0,\n    left: 0\n  });\n  var divlinerstyleRef = react_1.useRef(Object.assign({\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    // height:'100%',\n    // width:'100%',\n    overflow: 'auto',\n    backgroundColor: 'red'\n  }, styles === null || styles === void 0 ? void 0 : styles.viewport));\n  var resizeTimeridRef = react_1.useRef(null);\n  var isResizingRef = react_1.useRef(false);\n  var viewportDataRef = react_1.useRef(null); // initialize\n\n  react_1.useEffect(function () {\n    window.addEventListener('resize', onResize);\n    return function () {\n      window.removeEventListener('resize', onResize);\n    };\n  }, []); // event listener callback\n\n  var onResize = react_1.useCallback(function () {\n    if (!isResizingRef.current) {\n      isResizingRef.current = true; // below is a realtime message to cradle.onScroll\n      // to stop updating the referenceIndexData, and to the item observer to stop\n      // triggering responses (anticipating reset of cradle content based on resize)\n\n      viewportDataRef.current.isResizing = true;\n      resizeScrollPosRef.current = {\n        top: viewportdivRef.current.scrollTop,\n        left: viewportdivRef.current.scrollLeft\n      };\n      if (isMounted()) setPortState('resizing');\n    }\n\n    clearTimeout(resizeTimeridRef.current);\n    resizeTimeridRef.current = setTimeout(function () {\n      isResizingRef.current = false;\n      if (isMounted()) setPortState('resize');\n    }, RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE);\n  }, []); // ----------------------------------[ calculate ]--------------------------------\n  // calculated values\n\n  divlinerstyleRef.current = react_1.useMemo(function () {\n    var mincrosslength = calcMinViewportCrossLength(orientation, cellWidth, cellHeight, padding);\n\n    var styles = __assign({}, divlinerstyleRef.current);\n\n    if (orientation == 'vertical') {\n      styles.minWidth = mincrosslength + 'px';\n      styles.minHeight = 'auto';\n    } else {\n      styles.minWidth = 'auto';\n      styles.minHeight = mincrosslength + 'px';\n    }\n\n    return styles;\n  }, [orientation, cellWidth, cellHeight, padding]);\n  var viewportClientRect;\n\n  if (viewportdivRef.current) {\n    viewportClientRect = viewportdivRef.current.getBoundingClientRect();\n  } else {\n    viewportClientRect = {};\n  }\n\n  var top = viewportClientRect.top,\n      right = viewportClientRect.right,\n      bottom = viewportClientRect.bottom,\n      left = viewportClientRect.left; // set context data for children\n\n  viewportDataRef.current = react_1.useMemo(function () {\n    var width, height, localViewportData;\n\n    if (!(top === undefined)) {\n      //proxy\n      width = right - left;\n      height = bottom - top;\n      localViewportData = {\n        viewportDimensions: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left,\n          width: width,\n          height: height\n        },\n        elementref: viewportdivRef,\n        isResizing: isResizingRef.current\n      };\n    }\n\n    return localViewportData;\n  }, [orientation, top, right, bottom, left, isResizingRef.current]); // --------------------[ state processing ]---------------------------\n\n  react_1.useEffect(function () {\n    switch (portstate) {\n      case 'prepare':\n      case 'resize':\n        {\n          setPortState('render');\n          break;\n        }\n    }\n  }, [portstate]); // ----------------------[ render ]--------------------------------\n\n  return react_1[\"default\"].createElement(exports.ViewportContext.Provider, {\n    value: viewportDataRef.current\n  }, react_1[\"default\"].createElement(\"div\", {\n    style: divlinerstyleRef.current,\n    ref: viewportdivRef\n  }, portstate != 'prepare' ? children : null));\n}; // Viewport\n// establish minimum width/height for the viewport -- approximately one item\n\n\nvar calcMinViewportCrossLength = function calcMinViewportCrossLength(orientation, cellWidth, cellHeight, padding) {\n  var crosslength, cellLength;\n\n  if (orientation == 'vertical') {\n    cellLength = cellWidth;\n  } else {\n    cellLength = cellHeight;\n  }\n\n  crosslength = cellLength + padding * 2;\n  return crosslength;\n};\n\nexports[\"default\"] = Viewport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL3NyYy92aWV3cG9ydC50c3g/MGRlMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7O0FBS0E7O0FBRWEsMEJBQWtCLG1CQUFNLGFBQU4sQ0FBb0IsSUFBcEIsQ0FBbEI7O0FBRWIsc0UsQ0FFQTs7O0FBQ0EsSUFBTSxpQ0FBaUMsR0FBRyxHQUExQzs7QUFFQSxJQUFNLFFBQVEsR0FBRyxTQUFYLFFBQVcsQ0FBQyxFQUFELEVBU2hCO0FBRUc7TUFWQSxzQjtNQUNBLDRCO01BQ0Esd0I7TUFDQSwwQjtNQUNBLFk7TUFDQSxvQjtNQUNBLHdCO01BQ0Esa0IsQ0FDSCxDQUlHOztBQUNNO0FBQUEsTUFBQyxpQkFBRDtBQUFBLE1BQVcsb0JBQVg7O0FBQ04sTUFBTSxTQUFTLEdBQUcsb0NBQWxCLENBTkgsQ0FPRzs7QUFDQSxNQUFNLFlBQVksR0FBRyxlQUFPLElBQVAsQ0FBckI7QUFDQSxNQUFNLGNBQWMsR0FBRyxlQUFPLFNBQVAsQ0FBdkI7QUFDQSxNQUFNLGtCQUFrQixHQUFHLGVBQU87QUFBQyxPQUFHLEVBQUMsQ0FBTDtBQUFPLFFBQUksRUFBQztBQUFaLEdBQVAsQ0FBM0I7QUFDQSxNQUFNLGdCQUFnQixHQUFHLGVBQ3JCLE1BQU0sQ0FBQyxNQUFQLENBQWM7QUFDZCxZQUFRLEVBQUMsVUFESztBQUVkLE9BQUcsRUFBQyxDQUZVO0FBR2QsU0FBSyxFQUFDLENBSFE7QUFJZCxVQUFNLEVBQUMsQ0FKTztBQUtkLFFBQUksRUFBQyxDQUxTO0FBTWQ7QUFDQTtBQUNBLFlBQVEsRUFBQyxNQVJLO0FBU2QsbUJBQWUsRUFBQztBQVRGLEdBQWQsRUFVcUIsTUFBTSxTQUFOLFVBQU0sV0FBTixHQUFNLE1BQU4sU0FBTSxDQUFFLFFBVjdCLENBRHFCLENBQXpCO0FBWUEsTUFBTSxnQkFBZ0IsR0FBRyxlQUFPLElBQVAsQ0FBekI7QUFD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LyBjb3B5cmlnaHQgKGMpIDIwMjAgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuLypcbiAgICBUaGUgcm9sZSBvZiB2aWV3cG9ydCBpcyB0byBwcm92aWRlIGRhdGEgdG8gaXRzIGNoaWxkcmVuIChzY3JvbGxibG9jayBhbmQgY3JhZGxlKSwgXG4gICAgYW5kIGFjdCBhcyB0aGUgdmlzaWJsZSBwb3J0YWwgb2YgdGhlIGxpc3QgYmVpbmcgc2hvd25cbiovXG5cbmltcG9ydCBSZWFjdCwge3VzZVN0YXRlLCB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlQ2FsbGJhY2t9IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgY29uc3QgVmlld3BvcnRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKVxuXG5pbXBvcnQgdXNlSXNNb3VudGVkIGZyb20gJ3JlYWN0LWlzLW1vdW50ZWQtaG9vaydcblxuLy8gY29udHJvbCBjb25zdGFudFxuY29uc3QgUkVTSVpFX1RJTUVPVVRfRk9SX09OQUZURVJTUkVTSVpFID0gMjUwXG5cbmNvbnN0IFZpZXdwb3J0ID0gKHtcbiAgICBjaGlsZHJlbiwgXG4gICAgb3JpZW50YXRpb24sIFxuICAgIGNlbGxXaWR0aCwgXG4gICAgY2VsbEhlaWdodCwgXG4gICAgZ2FwLCBcbiAgICBwYWRkaW5nLCBcbiAgICBjb21wb25lbnQsIFxuICAgIHN0eWxlcyxcbn0pID0+IHtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBpbml0aWFsaXplIF0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8vIHByb2Nlc3Npbmcgc3RhdGVcbiAgICBjb25zdCBbcG9ydHN0YXRlLHNldFBvcnRTdGF0ZV0gPSB1c2VTdGF0ZSgncHJlcGFyZScpXG4gICAgY29uc3QgaXNNb3VudGVkID0gdXNlSXNNb3VudGVkKClcbiAgICAvLyBkYXRhIGhlYXBcbiAgICBjb25zdCB0aW1lb3V0aWRSZWYgPSB1c2VSZWYobnVsbClcbiAgICBjb25zdCB2aWV3cG9ydGRpdlJlZiA9IHVzZVJlZih1bmRlZmluZWQpXG4gICAgY29uc3QgcmVzaXplU2Nyb2xsUG9zUmVmID0gdXNlUmVmKHt0b3A6MCxsZWZ0OjB9KVxuICAgIGNvbnN0IGRpdmxpbmVyc3R5bGVSZWYgPSB1c2VSZWYoXG4gICAgICAgIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxuICAgICAgICB0b3A6MCxcbiAgICAgICAgcmlnaHQ6MCxcbiAgICAgICAgYm90dG9tOjAsXG4gICAgICAgIGxlZnQ6MCxcbiAgICAgICAgLy8gaGVpZ2h0OicxMDAlJyxcbiAgICAgICAgLy8gd2lkdGg6JzEwMCUnLFxuICAgICAgICBvdmVyZmxvdzonYXV0bycsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjoncmVkJyxcbiAgICB9IGFzIFJlYWN0LkNTU1Byb3BlcnRpZXMsc3R5bGVzPy52aWV3cG9ydCkpXG4gICAgY29uc3QgcmVzaXplVGltZXJpZFJlZiA9IHVzZVJlZihudWxsKVxuICAgIGNvbnN0IGlzUmVzaXppbmdSZWYgPSB1c2VSZWYoZmFsc2UpXG4gICAgY29uc3Qgdmlld3BvcnREYXRhUmVmID0gdXNlUmVmKG51bGwpXG5cbiAgICAvLyBpbml0aWFsaXplXG4gICAgdXNlRWZmZWN0KCgpPT57XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsb25SZXNpemUpXG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLG9uUmVzaXplKVxuICAgICAgICB9XG5cbiAgICB9LFtdKVxuXG4gICAgLy8gZXZlbnQgbGlzdGVuZXIgY2FsbGJhY2tcbiAgICBjb25zdCBvblJlc2l6ZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcblxuICAgICAgICBpZiAoIWlzUmVzaXppbmdSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgaXNSZXNpemluZ1JlZi5jdXJyZW50ID0gdHJ1ZSBcbiAgICAgICAgICAgICAgICAvLyBiZWxvdyBpcyBhIHJlYWx0aW1lIG1lc3NhZ2UgdG8gY3JhZGxlLm9uU2Nyb2xsXG4gICAgICAgICAgICAgICAgLy8gdG8gc3RvcCB1cGRhdGluZyB0aGUgcmVmZXJlbmNlSW5kZXhEYXRhLCBhbmQgdG8gdGhlIGl0ZW0gb2JzZXJ2ZXIgdG8gc3RvcFxuICAgICAgICAgICAgICAgIC8vIHRyaWdnZXJpbmcgcmVzcG9uc2VzIChhbnRpY2lwYXRpbmcgcmVzZXQgb2YgY3JhZGxlIGNvbnRlbnQgYmFzZWQgb24gcmVzaXplKVxuICAgICAgICAgICAgdmlld3BvcnREYXRhUmVmLmN1cnJlbnQuaXNSZXNpemluZyA9IHRydWVcbiAgICAgICAgICAgIHJlc2l6ZVNjcm9sbFBvc1JlZi5jdXJyZW50ID0ge1xuICAgICAgICAgICAgICAgIHRvcDp2aWV3cG9ydGRpdlJlZi5jdXJyZW50LnNjcm9sbFRvcCxcbiAgICAgICAgICAgICAgICBsZWZ0OnZpZXdwb3J0ZGl2UmVmLmN1cnJlbnQuc2Nyb2xsTGVmdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzTW91bnRlZCgpKSBzZXRQb3J0U3RhdGUoJ3Jlc2l6aW5nJylcbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFyVGltZW91dChyZXNpemVUaW1lcmlkUmVmLmN1cnJlbnQpXG4gICAgICAgIHJlc2l6ZVRpbWVyaWRSZWYuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXG4gICAgICAgICAgICBpc1Jlc2l6aW5nUmVmLmN1cnJlbnQgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKGlzTW91bnRlZCgpKSBzZXRQb3J0U3RhdGUoJ3Jlc2l6ZScpXG5cbiAgICAgICAgfSxSRVNJWkVfVElNRU9VVF9GT1JfT05BRlRFUlNSRVNJWkUpXG5cbiAgICB9LFtdKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgY2FsY3VsYXRlIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gY2FsY3VsYXRlZCB2YWx1ZXNcbiAgICBkaXZsaW5lcnN0eWxlUmVmLmN1cnJlbnQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgbGV0IG1pbmNyb3NzbGVuZ3RoID0gY2FsY01pblZpZXdwb3J0Q3Jvc3NMZW5ndGgob3JpZW50YXRpb24sIGNlbGxXaWR0aCwgY2VsbEhlaWdodCwgcGFkZGluZylcbiAgICAgICAgbGV0IHN0eWxlcyA9IHsuLi5kaXZsaW5lcnN0eWxlUmVmLmN1cnJlbnR9IGFzIFJlYWN0LkNTU1Byb3BlcnRpZXNcbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIHN0eWxlcy5taW5XaWR0aCA9IG1pbmNyb3NzbGVuZ3RoICsgJ3B4J1xuICAgICAgICAgICAgc3R5bGVzLm1pbkhlaWdodCA9ICdhdXRvJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3R5bGVzLm1pbldpZHRoID0gJ2F1dG8nXG4gICAgICAgICAgICBzdHlsZXMubWluSGVpZ2h0ID0gbWluY3Jvc3NsZW5ndGggKyAncHgnXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3R5bGVzXG5cbiAgICB9LFtvcmllbnRhdGlvbiwgY2VsbFdpZHRoLCBjZWxsSGVpZ2h0LCBwYWRkaW5nXSlcblxuICAgIGxldCB2aWV3cG9ydENsaWVudFJlY3RcbiAgICBpZiAodmlld3BvcnRkaXZSZWYuY3VycmVudCkge1xuICAgICAgICB2aWV3cG9ydENsaWVudFJlY3QgPSB2aWV3cG9ydGRpdlJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmlld3BvcnRDbGllbnRSZWN0ID0ge31cbiAgICB9XG4gICAgbGV0IHt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnR9ID0gdmlld3BvcnRDbGllbnRSZWN0XG5cbiAgICAvLyBzZXQgY29udGV4dCBkYXRhIGZvciBjaGlsZHJlblxuICAgIHZpZXdwb3J0RGF0YVJlZi5jdXJyZW50ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGxldCB3aWR0aCwgaGVpZ2h0LCBsb2NhbFZpZXdwb3J0RGF0YVxuICAgICAgICBpZiAoISh0b3AgPT09IHVuZGVmaW5lZCkpIHsgLy9wcm94eVxuICAgICAgICAgICAgd2lkdGggPSAocmlnaHQgLSBsZWZ0KVxuICAgICAgICAgICAgaGVpZ2h0ID0gKGJvdHRvbSAtIHRvcClcbiAgICAgICAgICAgIGxvY2FsVmlld3BvcnREYXRhID0ge1xuICAgICAgICAgICAgICAgIHZpZXdwb3J0RGltZW5zaW9uczp7dG9wLHJpZ2h0LCBib3R0b20sIGxlZnQsIHdpZHRoLCBoZWlnaHR9LFxuICAgICAgICAgICAgICAgIGVsZW1lbnRyZWY6dmlld3BvcnRkaXZSZWYsXG4gICAgICAgICAgICAgICAgaXNSZXNpemluZzppc1Jlc2l6aW5nUmVmLmN1cnJlbnQsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsVmlld3BvcnREYXRhXG5cbiAgICB9LFtvcmllbnRhdGlvbiwgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LGlzUmVzaXppbmdSZWYuY3VycmVudF0pXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVsgc3RhdGUgcHJvY2Vzc2luZyBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdXNlRWZmZWN0KCgpPT57XG4gICAgICAgIHN3aXRjaCAocG9ydHN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdwcmVwYXJlJzpcbiAgICAgICAgICAgIGNhc2UgJ3Jlc2l6ZSc6IHtcbiAgICAgICAgICAgICAgICBzZXRQb3J0U3RhdGUoJ3JlbmRlcicpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sW3BvcnRzdGF0ZV0pXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyByZW5kZXIgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgcmV0dXJuIDxWaWV3cG9ydENvbnRleHQuUHJvdmlkZXIgdmFsdWUgPSB7IHZpZXdwb3J0RGF0YVJlZi5jdXJyZW50IH0+XG4gICAgICAgIDxkaXYgXG4gICAgICAgICAgICBzdHlsZSA9IHtkaXZsaW5lcnN0eWxlUmVmLmN1cnJlbnR9XG4gICAgICAgICAgICByZWYgPSB7dmlld3BvcnRkaXZSZWZ9XG4gICAgICAgID5cbiAgICAgICAgICAgIHsgKHBvcnRzdGF0ZSAhPSAncHJlcGFyZScpP2NoaWxkcmVuOm51bGwgfVxuICAgICAgICA8L2Rpdj5cbiAgICA8L1ZpZXdwb3J0Q29udGV4dC5Qcm92aWRlcj5cbiAgICBcbn0gLy8gVmlld3BvcnRcblxuLy8gZXN0YWJsaXNoIG1pbmltdW0gd2lkdGgvaGVpZ2h0IGZvciB0aGUgdmlld3BvcnQgLS0gYXBwcm94aW1hdGVseSBvbmUgaXRlbVxuY29uc3QgY2FsY01pblZpZXdwb3J0Q3Jvc3NMZW5ndGggPSAob3JpZW50YXRpb24sIGNlbGxXaWR0aCwgY2VsbEhlaWdodCwgcGFkZGluZykgPT4ge1xuICAgIGxldCBjcm9zc2xlbmd0aCwgY2VsbExlbmd0aFxuICAgIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG4gICAgICAgIGNlbGxMZW5ndGggPSBjZWxsV2lkdGhcbiAgICB9IGVsc2Uge1xuICAgICAgICBjZWxsTGVuZ3RoID0gY2VsbEhlaWdodFxuICAgIH1cbiAgICBjcm9zc2xlbmd0aCA9IGNlbGxMZW5ndGggKyAocGFkZGluZyAqIDIpXG4gICAgcmV0dXJuIGNyb3NzbGVuZ3RoXG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZXdwb3J0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar use_is_mounted_1 = __importDefault(__webpack_require__(4));\nexports.default = use_is_mounted_1.default;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy1tb3VudGVkLWhvb2svbGliL2luZGV4LmpzPzVjOGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRDQUE0QztBQUM1QztBQUNBLDhDQUE4QyxjQUFjO0FBQzVELHVDQUF1QyxtQkFBTyxDQUFDLENBQWtCO0FBQ2pFO0FBQ0EiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHVzZV9pc19tb3VudGVkXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdXNlLWlzLW1vdW50ZWRcIikpO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXNlX2lzX21vdW50ZWRfMS5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval(' // infinitegridscroller.tsx\n// copyright (c) 2019 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar react_1 = __importDefault(__webpack_require__(0));\n\nvar viewport_1 = __importDefault(__webpack_require__(1));\n\nvar scrollblock_1 = __importDefault(__webpack_require__(5));\n\nvar cradle_1 = __importDefault(__webpack_require__(6));\n/*\n    BACKLOG:\n    - cache: none/preload/keepload\n*/\n// ===================================[ INITIALIZE ]===========================\n\n/*\n    The job of InfiniteGridScroller is to pass parameters to dependents.\n    Viewport contains the scrollblock, which in turn contains the cradle\n        - a component that contains displayed (or nearly displayed) items.\n    The items are skeletons which contain the host content components.\n\n    Scrollblock virtually represents the entirety of the list, and of course scrolls\n    Cradle contains the list items, and is \'virtualiized\' -- it appears as\n      though it is the full scrollblock, but in fact it is only slightly larger than\n      the viewport.\n    - individual items are framed by ItemShell, managed by Cradle\n\n    Overall the infinitegridscroller manages the often asynchronous interactions of the\n    components of the mechanism\n*/\n\n\nvar InfiniteGridScroller = function InfiniteGridScroller(props) {\n  var _a, _b, _c, _d, _e, _f;\n\n  var orientation = props.orientation,\n      // vertical or horizontal\n  gap = props.gap,\n      // space between grid cells, not including the leading and trailing edges\n  padding = props.padding,\n      // the space between the items and the viewport, applied to the cradle\n  cellHeight = props.cellHeight,\n      // the outer pixel height - literal for vertical; approximate for horizontal\n  cellWidth = props.cellWidth,\n      // the outer pixel width - literal for horizontal; approximate for vertical\n  runway = props.runway,\n      // the number of items outside the view of each side of the viewport \n  // -- gives time to assemble before display\n  listsize = props.listsize,\n      // the exact number of the size of the virtual list\n  offset = props.offset,\n      // the 0-based starting index of the list, when first loaded\n  getItem = props.getItem,\n      // function provided by host - parameter is index number, set by system; return value is \n  // host-selected component or promise of a component\n  component = props.component,\n      // properties with direct access to some component utilites, optional\n  placeholder = props.placeholder,\n      // a sparse component to stand in for content until the content arrives; \n  // optional, replaces default\n  styles = props.styles; // defaults\n\n  (_a = component) !== null && _a !== void 0 ? _a : component = {};\n  (_b = gap) !== null && _b !== void 0 ? _b : gap = 0;\n  (_c = padding) !== null && _c !== void 0 ? _c : padding = 0;\n  (_d = runway) !== null && _d !== void 0 ? _d : runway = 3;\n  (_e = offset) !== null && _e !== void 0 ? _e : offset = 0;\n  (_f = listsize) !== null && _f !== void 0 ? _f : listsize = 0; // constraints\n\n  offset = Math.max(0, offset); // non-negative\n\n  offset = Math.min(listsize, offset); // not larger than list\n\n  if (![\'horizontal\', \'vertical\'].includes(orientation)) {\n    orientation = \'horizontal\';\n  } // convert to pixels\n\n\n  var runwaylength = orientation == \'vertical\' ? runway * (cellHeight + gap) : runway * (cellWidth + gap);\n  runwaylength && (runwaylength += padding * 2);\n  return react_1["default"].createElement(viewport_1["default"], {\n    orientation: orientation,\n    cellWidth: cellHeight,\n    cellHeight: cellHeight,\n    gap: gap,\n    padding: padding,\n    component: component,\n    styles: styles\n  }, react_1["default"].createElement(scrollblock_1["default"], {\n    listsize: listsize,\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    gap: gap,\n    padding: padding,\n    orientation: orientation,\n    component: component,\n    styles: styles\n  }, react_1["default"].createElement(cradle_1["default"], {\n    gap: gap,\n    padding: padding,\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    listsize: listsize,\n    offset: offset,\n    orientation: orientation,\n    runwaylength: runwaylength,\n    getItem: getItem,\n    component: component,\n    placeholder: placeholder,\n    styles: styles\n  })));\n};\n\nexports["default"] = InfiniteGridScroller;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar react_1 = __webpack_require__(0);\nfunction useIsMounted() {\n    var ref = react_1.useRef(false);\n    react_1.useEffect(function () {\n        ref.current = true;\n        return function () {\n            ref.current = false;\n        };\n    }, []);\n    return function () { return ref.current; };\n}\nexports.default = useIsMounted;\n//# sourceMappingURL=use-is-mounted.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy1tb3VudGVkLWhvb2svbGliL3VzZS1pcy1tb3VudGVkLmpzPzkzMjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RCxjQUFjLG1CQUFPLENBQUMsQ0FBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCx3QkFBd0Isb0JBQW9CO0FBQzVDO0FBQ0E7QUFDQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcmVhY3RfMSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmZ1bmN0aW9uIHVzZUlzTW91bnRlZCgpIHtcbiAgICB2YXIgcmVmID0gcmVhY3RfMS51c2VSZWYoZmFsc2UpO1xuICAgIHJlYWN0XzEudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZi5jdXJyZW50OyB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdXNlSXNNb3VudGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLWlzLW1vdW50ZWQuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval(" // scrollblock.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(0));\n\nvar viewport_1 = __webpack_require__(1);\n\nvar Scrollblock = function Scrollblock(_a) {\n  var children = _a.children,\n      listsize = _a.listsize,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      padding = _a.padding,\n      orientation = _a.orientation,\n      component = _a.component,\n      styles = _a.styles; // -------------------------[ context and state ]-------------------------\n\n  var viewportData = react_1.useContext(viewport_1.ViewportContext);\n\n  var _b = react_1.useState('prepare'),\n      blockstate = _b[0],\n      setBlockState = _b[1]; // -----------------------------------[ data heap ]-------------------------\n\n\n  var scrollBlockLengthRef = react_1.useRef(null);\n  var scrollblockRef = react_1.useRef(null);\n  var divlinerstyleRef = react_1.useRef(Object.assign({\n    backgroundColor: 'white',\n    position: 'relative'\n  }, styles === null || styles === void 0 ? void 0 : styles.cradle));\n\n  var _c = react_1.useState(divlinerstyleRef.current),\n      divlinerstyle = _c[0],\n      saveDivlinerstyle = _c[1]; // to trigger render\n\n\n  var viewportDimensions = viewportData.viewportDimensions,\n      itemobserver = viewportData.itemobserver,\n      isResizing = viewportData.isResizing;\n  var top = viewportDimensions.top,\n      right = viewportDimensions.right,\n      bottom = viewportDimensions.bottom,\n      left = viewportDimensions.left,\n      width = viewportDimensions.width,\n      height = viewportDimensions.height; // state engine\n\n  react_1.useEffect(function () {\n    switch (blockstate) {\n      case 'prepare':\n        {\n          setBlockState('render');\n          break;\n        }\n    }\n  }, [blockstate]);\n  react_1.useLayoutEffect(function () {\n    updateBlockLength();\n    divlinerstyleRef.current = updateScrollblockStyles(orientation, divlinerstyleRef, scrollBlockLengthRef);\n    saveDivlinerstyle(divlinerstyleRef.current);\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]);\n  var updateBlockLength = react_1.useCallback(function () {\n    var scrollblocklength = calcScrollblockLength({\n      listsize: listsize,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding,\n      orientation: orientation,\n      viewportheight: height,\n      viewportwidth: width\n    });\n    scrollBlockLengthRef.current = scrollblocklength;\n  }, [listsize, cellHeight, cellWidth, gap, padding, orientation, height, width]);\n  return blockstate != 'prepare' ? react_1[\"default\"].createElement(\"div\", {\n    ref: scrollblockRef,\n    style: divlinerstyleRef.current\n  }, children) : null;\n}; // Scrollblock\n// all the parameters affect the length\n\n\nvar calcScrollblockLength = function calcScrollblockLength(_a) {\n  var listsize = _a.listsize,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      padding = _a.padding,\n      orientation = _a.orientation,\n      viewportheight = _a.viewportheight,\n      viewportwidth = _a.viewportwidth; // dependents of orientation\n\n  var crosslength;\n  var cellLength;\n  var viewportcrosslength;\n\n  if (orientation == 'vertical') {\n    crosslength = cellWidth + gap;\n    cellLength = cellHeight + gap;\n    viewportcrosslength = viewportwidth;\n  } else {\n    crosslength = cellHeight + gap;\n    cellLength = cellWidth + gap;\n    viewportcrosslength = viewportheight;\n  } // adjustments to viewportcrosslength\n\n\n  viewportcrosslength -= padding * 2;\n  viewportcrosslength += gap;\n  if (viewportcrosslength < crosslength) viewportcrosslength = crosslength; // must be at least one\n\n  var crosscount = Math.floor(viewportcrosslength / crosslength);\n  var listlength = Math.ceil(listsize / crosscount);\n  var straightlength = listlength * cellLength - (listlength > 0 ? gap : 0) + padding * 2;\n  return straightlength;\n};\n\nvar updateScrollblockStyles = function updateScrollblockStyles(orientation, stylesRef, scrollblocklengthRef) {\n  var localstyles = Object.assign({}, stylesRef.current);\n  var height;\n  var width;\n\n  if (orientation == 'horizontal') {\n    height = '100%';\n    width = scrollblocklengthRef.current + 'px';\n  } else if (orientation == 'vertical') {\n    height = scrollblocklengthRef.current + 'px';\n    width = '100%';\n  }\n\n  localstyles.height = height;\n  localstyles.width = width;\n  return localstyles;\n};\n\nexports[\"default\"] = Scrollblock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){"use strict";eval(" // cradle.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(0));\n\nvar viewport_1 = __webpack_require__(1);\n\nvar react_is_mounted_hook_1 = __importDefault(__webpack_require__(2));\n\nvar cradlefunctions_1 = __webpack_require__(7);\n\nvar scrolltracker_1 = __importDefault(__webpack_require__(12));\n\nvar SCROLL_TIMEOUT_FOR_ONAFTERSCROLL = 200;\n\nvar Cradle = function Cradle(_a) {\n  // =============================================================================================\n  // --------------------------------------[ initialization ]-------------------------------------\n  var gap = _a.gap,\n      padding = _a.padding,\n      runwaylength = _a.runwaylength,\n      listsize = _a.listsize,\n      offset = _a.offset,\n      orientation = _a.orientation,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      getItem = _a.getItem,\n      placeholder = _a.placeholder,\n      component = _a.component,\n      styles = _a.styles;\n  var isMounted = react_is_mounted_hook_1[\"default\"]();\n  var viewportData = react_1.useContext(viewport_1.ViewportContext);\n\n  var _b = react_1.useState('setup'),\n      cradlestate = _b[0],\n      saveCradleState = _b[1];\n\n  var cradlestateRef = react_1.useRef(null); // access by closures\n\n  cradlestateRef.current = cradlestate;\n\n  var _c = react_1.useState('ready'),\n      scrollstate = _c[0],\n      saveScrollState = _c[1]; // console.log('running cradle with cradlestate, scrollstate', cradlestate, scrollstate)\n  // -----------------------------[ data heap ]-----------------------\n\n\n  var listsizeRef = react_1.useRef(null);\n  listsizeRef.current = listsize;\n  var viewportDataRef = react_1.useRef(null);\n  viewportDataRef.current = viewportData;\n  var isResizingRef = react_1.useRef(false);\n  var pauseObserversRef = react_1.useRef(false);\n  var reportReferenceIndexRef = react_1.useRef(component === null || component === void 0 ? void 0 : component.reportReferenceIndex); // -----------------------[ effects ]-------------------------\n  // initialize window listener, and component elements\n\n  react_1.useEffect(function () {\n    viewportData.elementref.current.addEventListener('scroll', onScroll);\n\n    if (component === null || component === void 0 ? void 0 : component.hasOwnProperty('getVisibleList')) {\n      component.getVisibleList = getVisibleList;\n    }\n\n    if (component === null || component === void 0 ? void 0 : component.hasOwnProperty('getContentList')) {\n      component.getContentList = getContentList;\n    }\n\n    if (component === null || component === void 0 ? void 0 : component.hasOwnProperty('scrollToItem')) {\n      component.scrollToItem = scrollToItem;\n    }\n\n    if (component === null || component === void 0 ? void 0 : component.hasOwnProperty('reload')) {\n      component.reload = reload;\n    }\n\n    return function () {\n      viewportData.elementref.current && viewportData.elementref.current.removeEventListener('scroll', onScroll);\n    };\n  }, []); // triger resizing based on viewport state\n\n  react_1.useEffect(function () {\n    isResizingRef.current = viewportData.isResizing;\n\n    if (isResizingRef.current) {\n      callingReferenceIndexDataRef.current = __assign({}, referenceIndexDataRef.current);\n      pauseObserversRef.current = true;\n      saveCradleState('resizing');\n    }\n\n    if (!isResizingRef.current && cradlestateRef.current == 'resizing') {\n      saveCradleState('resize');\n    }\n  }, [viewportData.isResizing]); // ------------------------[ session data ]-----------------------\n  // current location\n\n  var _d = react_1.useState({\n    index: Math.min(offset, listsize - 1) || 0,\n    scrolloffset: 0\n  }),\n      referenceindexdata = _d[0],\n      saveReferenceindex = _d[1];\n\n  var referenceIndexDataRef = react_1.useRef(null); // access by closures\n\n  referenceIndexDataRef.current = referenceindexdata;\n  var lastReferenceIndexDataRef = react_1.useRef(null);\n  var isCradleInViewRef = react_1.useRef(true);\n\n  var _e = react_1.useState(null),\n      dropentries = _e[0],\n      saveDropentries = _e[1]; // trigger add entries\n\n\n  var _f = react_1.useState(null),\n      addentries = _f[0],\n      saveAddentries = _f[1]; // add entries\n\n\n  var contentlistRef = react_1.useRef([]);\n  var isScrollingRef = react_1.useRef(false);\n  var itemobserverRef = react_1.useRef(null);\n  var cradleobserverRef = react_1.useRef(null);\n  var cellSpecs = react_1.useMemo(function () {\n    return {\n      cellWidth: cellWidth,\n      cellHeight: cellHeight,\n      gap: gap,\n      padding: padding\n    };\n  }, [cellWidth, cellHeight, gap, padding]);\n  var cellSpecsRef = react_1.useRef(null);\n  cellSpecsRef.current = cellSpecs;\n  var divlinerStylesRef = react_1.useRef(Object.assign({\n    position: 'absolute',\n    backgroundColor: 'blue',\n    display: 'grid',\n    gridGap: gap + 'px',\n    padding: padding + 'px',\n    justifyContent: 'start',\n    alignContent: 'start',\n    boxSizing: 'border-box'\n  }, styles === null || styles === void 0 ? void 0 : styles.cradle));\n  var orientationRef = react_1.useRef(orientation);\n  orientationRef.current = orientation; // availability in closures\n\n  var divlinerStyleRevisionsRef = react_1.useRef(null); // for modifications by observer actions\n\n  var cradleElementRef = react_1.useRef(null);\n  var viewportDimensions = viewportData.viewportDimensions;\n  var viewportheight = viewportDimensions.height,\n      viewportwidth = viewportDimensions.width;\n  var crosscount = react_1.useMemo(function () {\n    var crosscount;\n    var size = orientation == 'horizontal' ? viewportheight : viewportwidth;\n    var crossLength = orientation == 'horizontal' ? cellHeight : cellWidth;\n    var lengthforcalc = size - padding * 2 + gap; // length of viewport\n\n    var tilelengthforcalc = crossLength + gap;\n    tilelengthforcalc = Math.min(tilelengthforcalc, lengthforcalc); // result cannot be less than 1\n\n    crosscount = Math.floor(lengthforcalc / tilelengthforcalc);\n    return crosscount;\n  }, [orientation, cellWidth, cellHeight, gap, padding, viewportheight, viewportwidth]); // ==============================================================================================\n  // ----------------------------------[ config management ]--------------------------------\n\n  var crosscountRef = react_1.useRef(crosscount); // for easy reference by observer\n\n  var previousCrosscountRef = react_1.useRef(); // available for resize logic\n\n  previousCrosscountRef.current = crosscountRef.current; // available for resize logic\n\n  crosscountRef.current = crosscount; // available for observer closure\n\n  divlinerStylesRef.current = react_1.useMemo(function () {\n    // merge base style and revisions (by observer)\n    var divlinerStyles = Object.assign(__assign({}, divlinerStylesRef.current), divlinerStyleRevisionsRef.current);\n    var styles = cradlefunctions_1.setCradleStyles({\n      orientation: orientation,\n      divlinerStyles: divlinerStyles,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      crosscount: crosscount,\n      viewportheight: viewportheight,\n      viewportwidth: viewportwidth\n    });\n    return styles;\n  }, [orientation, cellHeight, cellWidth, gap, padding, viewportheight, viewportwidth, crosscount, divlinerStyleRevisionsRef.current]);\n  react_1.useEffect(function () {\n    pauseObserversRef.current = true;\n    callingReferenceIndexDataRef.current = __assign({}, referenceIndexDataRef.current);\n    saveCradleState('reload');\n  }, [listsize, cellHeight, cellWidth, gap, padding]);\n  var itemElementsRef = react_1.useRef(new Map());\n  var scrollTimeridRef = react_1.useRef(null); // =================================================================================\n  // -------------------------[ IntersectionObserver support]-------------------------\n  // There are two observers, one for the cradle, and another for itemShells; both against\n  // the viewport.\n  // --------------------------[ cradle observer ]-----------------------------------\n  // this sets up an IntersectionObserver of the cradle against the viewport. When the\n  // cradle goes out of the observer scope, the \"repositioning\" cradle state is triggerd.\n\n  react_1.useEffect(function () {\n    cradleobserverRef.current = new IntersectionObserver(cradleobservercallback, {\n      root: viewportData.elementref.current\n    });\n    cradleobserverRef.current.observe(cradleElementRef.current);\n  }, []);\n  var cradleobservercallback = react_1.useCallback(function (entries) {\n    isCradleInViewRef.current = entries[0].isIntersecting; // console.log('isCradleInViewRef.current',isCradleInViewRef.current)\n  }, []); // --------------------------[ item shell observer ]-----------------------------\n\n  /*\n      The cradle content is driven by notifications from the IntersectionObserver.\n      - as the user scrolls the cradle, which has a runway at both the leading\n          and trailing edges, itemShells scroll into or out of the scope of the observer\n          (defined by the width/height of the viewport + the lengths of the runways). The observer\n          notifies the app (through itemobservercallback() below) at the crossings of the itemshells\n          of the defined observer cradle boundaries.\n           The no-longer-intersecting notifications trigger dropping of that number of affected items from\n          the cradle contentlist. The dropping of items from the trailing end of the content list\n          triggers the addition of an equal number of items at the leading edge of the cradle content.\n           Technically, the opposite end position spec is set (top or left depending on orientation),\n          and the matching end position spec is set to 'auto' when items are added. This causes items to be\n          \"squeezed\" into the leading or trailing ends of the ui content (out of view) as appropriate.\n           There are exceptions for setup and edge cases.\n  */\n\n  var dropcontentRef = react_1.useRef(null);\n  var dropstylesRef = react_1.useRef(null);\n  var dropcontentlistRef = react_1.useRef(null);\n  var addcontentRef = react_1.useRef(null);\n  var addstylesRef = react_1.useRef(null);\n  var addcontentlistRef = react_1.useRef(null); // the async callback from IntersectionObserver.\n\n  var itemobservercallback = react_1.useCallback(function (entries) {\n    if (pauseObserversRef.current) {\n      return;\n    }\n\n    if (cradlestateRef.current == 'ready') {\n      var dropentries_1 = entries.filter(function (entry) {\n        return !entry.isIntersecting;\n      });\n\n      if (dropentries_1.length) {\n        dropcontentRef.current = dropentries_1; // isMounted() && saveScrollState('dropcontent')\n\n        isMounted() && saveDropentries(dropentries_1); // console.log('dropentries', dropentries)\n      }\n    }\n  }, []); // drop scroll content\n\n  react_1.useEffect(function () {\n    if (dropentries === null) return; // if (scrollstate != 'dropcontent') return\n    // let dropentries = dropcontentRef.current\n\n    dropcontentRef.current = null;\n    var sampleEntry = dropentries[0];\n    var cradleElement = cradleElementRef.current;\n    var parentElement = cradleElement.parentElement;\n    var viewportElement = viewportData.elementref.current;\n    var scrollforward;\n    var localContentList; // -- isolate forward and backward lists\n    //  then set scrollforward\n\n    var forwardcount = 0,\n        backwardcount = 0;\n\n    for (var droprecordindex = 0; droprecordindex < dropentries.length; droprecordindex++) {\n      if (orientation == 'vertical') {\n        if (sampleEntry.boundingClientRect.y - sampleEntry.rootBounds.y < 0) {\n          forwardcount++;\n        } else {\n          backwardcount++;\n        }\n      } else {\n        if (sampleEntry.boundingClientRect.x - sampleEntry.rootBounds.x < 0) {\n          forwardcount++;\n        } else {\n          backwardcount++;\n        }\n      }\n    }\n\n    var netshift = forwardcount - backwardcount;\n\n    if (netshift == 0) {\n      // saveScrollState('ready')\n      return;\n    }\n\n    scrollforward = forwardcount > backwardcount;\n    netshift = Math.abs(netshift); // set localContentList\n\n    var indexoffset = contentlistRef.current[0].props.index;\n    var pendingcontentoffset;\n    var newcontentcount = Math.ceil(netshift / crosscountRef.current) * crosscountRef.current;\n    var headindexcount, tailindexcount;\n\n    if (scrollforward) {\n      pendingcontentoffset = indexoffset + netshift;\n      var proposedtailoffset = pendingcontentoffset + newcontentcount + (contentlistRef.current.length - netshift - 1);\n\n      if (proposedtailoffset > listsize - 1) {\n        newcontentcount -= proposedtailoffset - (listsize - 1);\n\n        if (newcontentcount <= 0) {\n          // defensive\n          // saveScrollState('ready')\n          return;\n        }\n      }\n\n      headindexcount = -netshift;\n      tailindexcount = 0;\n    } else {\n      pendingcontentoffset = indexoffset;\n      var proposedindexoffset = pendingcontentoffset - newcontentcount;\n\n      if (proposedindexoffset < 0) {\n        proposedindexoffset = -proposedindexoffset;\n        newcontentcount = newcontentcount - proposedindexoffset;\n\n        if (newcontentcount <= 0) {\n          // saveScrollState('ready')\n          return;\n        }\n      }\n\n      headindexcount = 0;\n      tailindexcount = -netshift;\n    }\n\n    localContentList = cradlefunctions_1.getUIContentList({\n      indexoffset: indexoffset,\n      localContentList: contentlistRef.current,\n      headindexcount: headindexcount,\n      tailindexcount: tailindexcount,\n      callbacksRef: callbacksRef\n    });\n    var styles = cradlefunctions_1.setCradleStyleRevisionsForDrop({\n      cradleElement: cradleElement,\n      parentElement: parentElement,\n      scrollforward: scrollforward,\n      orientation: orientation\n    }); // console.log('drop styles',{...styles})\n    // immediate change for modification, but an anti-pattern\n\n    var elementstyle = cradleElementRef.current.style;\n    elementstyle.top = styles.top;\n    elementstyle.bottom = styles.bottom;\n    elementstyle.left = styles.left;\n    elementstyle.right = styles.right; // console.log('drop styles',styles)\n\n    divlinerStyleRevisionsRef.current = styles;\n    contentlistRef.current = localContentList; // dropcontentlistRef.current = localContentList\n    // dropstylesRef.current = styles\n    // saveDropentries(null)\n    // addcontentRef.current = {count:newcontentcount,scrollforward,contentoffset:pendingcontentoffset}\n\n    saveAddentries({\n      count: newcontentcount,\n      scrollforward: scrollforward,\n      contentoffset: pendingcontentoffset\n    }); // saveScrollState('addcontent') // -> applydropcontent -> addcontent\n  }, [dropentries]); // add scroll content\n\n  react_1.useEffect(function () {\n    // saveAddentries(null)\n    // return\n    if (addentries === null) return; // if (scrollstate != 'addcontent') return\n    // console.log('ADDING scroll content')\n    // let addentries = addcontentRef.current\n\n    addcontentRef.current = null;\n    var cradleElement = cradleElementRef.current;\n    var parentElement = cradleElement.parentElement;\n    var viewportElement = viewportData.elementref.current;\n    var scrollforward = addentries.scrollforward;\n    var localContentList; // set localContentList\n\n    var contentoffset = addentries.contentoffset,\n        newcontentcount = addentries.count;\n    var headindexcount, tailindexcount;\n\n    if (scrollforward) {\n      headindexcount = 0, tailindexcount = newcontentcount;\n    } else {\n      headindexcount = newcontentcount;\n      tailindexcount = 0;\n    }\n\n    localContentList = cradlefunctions_1.getUIContentList({\n      localContentList: contentlistRef.current,\n      headindexcount: headindexcount,\n      tailindexcount: tailindexcount,\n      indexoffset: contentoffset,\n      orientation: orientation,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      observer: itemobserverRef.current,\n      crosscount: crosscount,\n      callbacksRef: callbacksRef,\n      getItem: getItem,\n      listsize: listsize,\n      placeholder: placeholder\n    });\n    var styles = cradlefunctions_1.setCradleStyleRevisionsForAdd({\n      cradleElement: cradleElement,\n      parentElement: parentElement,\n      scrollforward: scrollforward,\n      orientation: orientation\n    }); // console.log('add styles',{...styles})\n    // console.log('styles, cradle offsetHeight, offsetTop',styles, cradleElement.offsetHeight, cradleElement.offsetTop)\n    // immediate change for modification\n\n    var elementstyle = cradleElementRef.current.style;\n    elementstyle.top = styles.top;\n    elementstyle.bottom = styles.bottom;\n    elementstyle.left = styles.left;\n    elementstyle.right = styles.right; // addstylesRef.current = styles\n\n    divlinerStyleRevisionsRef.current = styles; // addcontentlistRef.current = localContentList\n\n    contentlistRef.current = localContentList; // saveScrollState('applyaddstyles') // -> applyaddcontent -> ready\n    // console.log('addentries',addentries)\n    // saveScrollState('ready')\n\n    saveAddentries(null);\n  }, [addentries]); // End of IntersectionObserver support\n  // ========================================================================================\n  // -------------------------------[ Assembly of content]-----------------------------------\n  // reset cradle\n\n  var setCradleContent = react_1.useCallback(function (cradleState, referenceIndexData) {\n    var visibletargetindexoffset = referenceIndexData.index,\n        visibletargetscrolloffset = referenceIndexData.scrolloffset;\n    if (cradleState == 'reposition') visibletargetscrolloffset = 0;\n    var localContentList = []; // any duplicated items will be re-used by react\n\n    var _a = cradlefunctions_1.getContentListRequirements({\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      orientation: orientation,\n      viewportheight: viewportheight,\n      viewportwidth: viewportwidth,\n      runwaylength: runwaylength,\n      gap: gap,\n      padding: padding,\n      visibletargetindexoffset: visibletargetindexoffset,\n      targetScrollOffset: visibletargetscrolloffset,\n      crosscount: crosscount,\n      listsize: listsize\n    }),\n        indexoffset = _a.indexoffset,\n        referenceoffset = _a.referenceoffset,\n        contentCount = _a.contentCount,\n        scrollblockoffset = _a.scrollblockoffset,\n        cradleoffset = _a.cradleoffset;\n\n    referenceIndexDataRef.current = {\n      index: referenceoffset,\n      scrolloffset: visibletargetscrolloffset\n    };\n    reportReferenceIndexRef.current && reportReferenceIndexRef.current(referenceIndexDataRef.current.index);\n    saveReferenceindex(referenceIndexDataRef.current);\n    var childlist = cradlefunctions_1.getUIContentList({\n      indexoffset: indexoffset,\n      headindexcount: 0,\n      tailindexcount: contentCount,\n      orientation: orientation,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      localContentList: localContentList,\n      observer: itemobserverRef.current,\n      crosscount: crosscount,\n      callbacksRef: callbacksRef,\n      getItem: getItem,\n      listsize: listsize,\n      placeholder: placeholder\n    });\n    contentDataRef.current = childlist;\n    var elementstyle = cradleElementRef.current.style;\n    var styles = {};\n\n    if (orientation == 'vertical') {\n      styles.top = cradleoffset + 'px';\n      styles.bottom = 'auto';\n      styles.left = 'auto';\n      styles.right = 'auto';\n      positionDataRef.current = {\n        property: 'scrollTop',\n        value: scrollblockoffset\n      };\n    } else {\n      // orientation = 'horizontal'\n      styles.top = 'auto';\n      styles.bottom = styles.bottom = 'auto';\n      styles.left = cradleoffset + 'px';\n      styles.right = 'auto';\n      positionDataRef.current = {\n        property: 'scrollLeft',\n        value: scrollblockoffset\n      };\n    }\n\n    layoutDataRef.current = styles;\n  }, [cellHeight, cellWidth, orientation, viewportheight, viewportwidth, runwaylength, gap, padding, crosscount]); // =====================================================================================\n  // ----------------------------------[ state management ]-------------------------------\n  // callback for scroll\n\n  var onScroll = react_1.useCallback(function () {\n    if (!isScrollingRef.current) {\n      isScrollingRef.current = true;\n    }\n\n    clearTimeout(scrollTimeridRef.current);\n    scrollTimeridRef.current = setTimeout(function () {\n      isScrollingRef.current = false;\n      var cradleState = cradlestateRef.current;\n\n      if (!isResizingRef.current && !viewportDataRef.current.isResizing) {\n        cradleState != 'repositioning' && cradlefunctions_1.normalizeCradleAnchors(cradleElementRef.current, orientationRef.current);\n        saveReferenceindex(__assign({}, referenceIndexDataRef.current)); // trigger re-run to capture end of scroll session values\n\n        lastReferenceIndexDataRef.current = __assign({}, referenceIndexDataRef.current);\n      }\n\n      switch (cradleState) {\n        case 'repositioning':\n          {\n            pauseObserversRef.current = true;\n            callingReferenceIndexDataRef.current = __assign({}, referenceIndexDataRef.current);\n            saveCradleState('reposition');\n            break;\n          }\n      }\n    }, SCROLL_TIMEOUT_FOR_ONAFTERSCROLL);\n\n    if (!isResizingRef.current && !viewportDataRef.current.isResizing) {\n      var cradleState = cradlestateRef.current;\n\n      if (cradleState == 'ready' || cradleState == 'repositioning') {\n        referenceIndexDataRef.current = cradlefunctions_1.getReferenceIndexData({\n          orientation: orientationRef.current,\n          viewportData: viewportDataRef.current,\n          cellSpecsRef: cellSpecsRef,\n          crosscountRef: crosscountRef,\n          listsize: listsizeRef.current\n        });\n        reportReferenceIndexRef.current && reportReferenceIndexRef.current(referenceIndexDataRef.current.index);\n        saveReferenceindex(referenceIndexDataRef.current);\n      }\n    }\n\n    if (!isCradleInViewRef.current && !pauseObserversRef.current && !isResizingRef.current && !(cradlestateRef.current == 'resize') && !(cradlestateRef.current == 'repositioning') && !(cradlestateRef.current == 'reposition')) {\n      var rect = viewportDataRef.current.elementref.current.getBoundingClientRect();\n      var top_1 = rect.top,\n          right = rect.right,\n          bottom = rect.bottom,\n          left = rect.left;\n      var width = right - left,\n          height = bottom - top_1;\n      viewportDataRef.current.viewportDimensions = {\n        top: top_1,\n        right: right,\n        bottom: bottom,\n        left: left,\n        width: width,\n        height: height\n      }; // update for scrolltracker\n\n      saveCradleState('repositioning');\n    }\n  }, []); // trigger pivot on change in orientation\n\n  react_1.useEffect(function () {\n    var rootMargin;\n\n    if (orientation == 'horizontal') {\n      rootMargin = \"0px \" + runwaylength + \"px 0px \" + runwaylength + \"px\";\n    } else {\n      rootMargin = runwaylength + \"px 0px \" + runwaylength + \"px 0px\";\n    }\n\n    var options = {\n      rootMargin: rootMargin,\n      threshold: 0\n    }; // console.log('rootMargin',options)\n\n    itemobserverRef.current = new IntersectionObserver(itemobservercallback, {\n      root: viewportData.elementref.current,\n      rootMargin: rootMargin\n    });\n    contentlistRef.current = [];\n\n    if (cradlestate != 'setup') {\n      pauseObserversRef.current = true;\n      callingReferenceIndexDataRef.current = __assign({}, lastReferenceIndexDataRef.current);\n      saveCradleState('pivot');\n    }\n  }, [orientation, listsize, cellHeight, cellWidth, gap, padding]);\n  react_1.useLayoutEffect(function () {\n    // console.log('processing scrollstate',scrollstate)\n    switch (scrollstate) {\n      case 'applydropstyles':\n        {\n          // console.log('APPLYING drop styles')\n          divlinerStyleRevisionsRef.current = dropstylesRef.current;\n          saveScrollState('applydropcontent');\n          break;\n        }\n\n      case 'applydropcontent':\n        {\n          // console.log('APPLYING drop content')\n          contentlistRef.current = dropcontentlistRef.current;\n          saveScrollState('addcontent');\n          break;\n        }\n\n      case 'applyaddstyles':\n        {\n          // console.log('APPLYING add styles')\n          divlinerStyleRevisionsRef.current = addstylesRef.current;\n          saveScrollState('applyaddcontent');\n          break;\n        }\n\n      case 'applyaddcontent':\n        {\n          // console.log('APPLYING add content')\n          contentlistRef.current = addcontentlistRef.current;\n          saveScrollState('ready');\n          break;\n        }\n    }\n  }, [scrollstate]); // data for state processing\n\n  var callingCradleState = react_1.useRef(cradlestateRef.current);\n  var callingReferenceIndexDataRef = react_1.useRef(referenceIndexDataRef.current);\n  var layoutDataRef = react_1.useRef(null);\n  var positionDataRef = react_1.useRef(null);\n  var contentDataRef = react_1.useRef(null); // this is the core state engine\n  // useLayout for suppressing flashes\n\n  react_1.useLayoutEffect(function () {\n    switch (cradlestate) {\n      case 'reload':\n        contentlistRef.current = [];\n        saveCradleState('reposition');\n        break;\n\n      case 'position':\n        {\n          viewportData.elementref.current[positionDataRef.current.property] = positionDataRef.current.value;\n          saveCradleState('layout');\n          break;\n        }\n\n      case 'layout':\n        {\n          divlinerStyleRevisionsRef.current = layoutDataRef.current;\n          saveCradleState('content');\n          break;\n        }\n\n      case 'content':\n        {\n          contentlistRef.current = contentDataRef.current;\n          saveCradleState('normalize');\n          break;\n        }\n    }\n  }, [cradlestate]); // standard processing stages\n\n  react_1.useEffect(function () {\n    switch (cradlestate) {\n      case 'setup':\n      case 'resize':\n      case 'pivot':\n      case 'reposition':\n        callingCradleState.current = cradlestate;\n        saveCradleState('settle');\n        break;\n\n      case 'settle':\n        {\n          setCradleContent(callingCradleState.current, callingReferenceIndexDataRef.current);\n          saveCradleState('position');\n          break;\n        }\n\n      case 'normalize':\n        {\n          setTimeout(function () {\n            // redundant scroll position to avoid accidental positioning at tail end of reposition\n            if (viewportData.elementref.current) {\n              // already unmounted if fails\n              viewportData.elementref.current[positionDataRef.current.property] = positionDataRef.current.value;\n              cradlefunctions_1.normalizeCradleAnchors(cradleElementRef.current, orientationRef.current);\n              lastReferenceIndexDataRef.current = __assign({}, referenceIndexDataRef.current);\n              pauseObserversRef.current && (pauseObserversRef.current = false);\n            }\n          }, 66);\n          saveCradleState('ready');\n          break;\n        }\n\n      case 'ready':\n        break;\n    }\n  }, [cradlestate]); // =============================================================================\n  // ------------------------------[ callbacks ]----------------------------------\n  // on host demand\n\n  var getVisibleList = react_1.useCallback(function () {\n    var itemlist = Array.from(itemElementsRef.current);\n    return cradlefunctions_1.calcVisibleItems(itemlist, viewportData.elementref.current, cradleElementRef.current, orientationRef.current);\n  }, []);\n  var getContentList = react_1.useCallback(function () {\n    return Array.from(itemElementsRef.current);\n  }, []);\n  var reload = react_1.useCallback(function () {\n    saveCradleState('reload');\n  }, []);\n  var scrollToItem = react_1.useCallback(function (index, alignment) {\n    if (alignment === void 0) {\n      alignment = 'nearest';\n    }\n\n    console.log('requested scrollToItem', index, alignment);\n    callingReferenceIndexDataRef.current = {\n      index: 0,\n      scrolloffset: 0\n    };\n    saveCradleState('reposition');\n  }, []); // content item registration\n\n  var getItemElementData = react_1.useCallback(function (itemElementData, reportType) {\n    var index = itemElementData[0],\n        shellref = itemElementData[1];\n\n    if (reportType == 'register') {\n      itemElementsRef.current.set(index, shellref);\n    } else if (reportType == 'unregister') {\n      itemElementsRef.current[\"delete\"](index);\n    }\n  }, []);\n  var callbacksRef = react_1.useRef({\n    getElementData: getItemElementData\n  }); // =============================================================================\n  // ------------------------------[ render... ]----------------------------------\n\n  var divlinerstyles = divlinerStylesRef.current;\n  return react_1[\"default\"].createElement(react_1[\"default\"].Fragment, null, cradlestateRef.current == 'repositioning' ? react_1[\"default\"].createElement(scrolltracker_1[\"default\"], {\n    top: viewportDimensions.top + 3,\n    left: viewportDimensions.left + 3,\n    offset: referenceIndexDataRef.current.index,\n    listsize: listsize,\n    styles: styles\n  }) : null, react_1[\"default\"].createElement(\"div\", {\n    ref: cradleElementRef,\n    style: divlinerstyles\n  }, cradlestateRef.current != 'setup' ? contentlistRef.current : null));\n}; // Cradle\n\n\nexports[\"default\"] = Cradle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL3NyYy9jcmFkbGUudHN4PzE4M2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFZQTs7QUFFQSxJQUFNLGdDQUFnQyxHQUFHLEdBQXpDOztBQUVBLElBQU0sTUFBTSxHQUFHLFNBQVQsTUFBUyxDQUFDLEVBQUQsRUFhVjtBQUVEO0FBQ0E7TUFmSSxZO01BQ0Esb0I7TUFDQSw4QjtNQUNBLHNCO01BQ0Esa0I7TUFDQSw0QjtNQUNBLDBCO01BQ0Esd0I7TUFDQSxvQjtNQUNBLDRCO01BQ0Esd0I7TUFDQSxrQjtBQU1KLE1BQU0sU0FBUyxHQUFHLG9DQUFsQjtBQUVBLE1BQU0sWUFBWSxHQUFHLG1CQUFXLDBCQUFYLENBQXJCOztBQUNNO0FBQUEsTUFBQyxtQkFBRDtBQUFBLE1BQWMsdUJBQWQ7O0FBQ04sTUFBTSxjQUFjLEdBQUcsZUFBTyxJQUFQLENBQXZCLENBVEMsQ0FTbUM7O0FBQ3BDLGdCQUFjLENBQUMsT0FBZixHQUF5QixXQUF6Qjs7QUFFTTtBQUFBLE1BQUMsbUJBQUQ7QUFBQSxNQUFjLHVCQUFkLENBWkwsQ0FjRDtBQUVBOzs7QUFDQSxNQUFNLFdBQVcsR0FBRyxlQUFPLElBQVAsQ0FBcEI7QUFDQSxhQUFXLENBQUMsT0FBWixHQUFzQixRQUF0QjtBQUVBLE1BQU0sZUFBZSxHQUFHLGVBQU8sSUFBUCxDQUF4QjtBQUNBLGlCQUFlLENBQUMsT0FBaEIsR0FBMEIsWUFBMUI7QUFFQSxNQUFNLGFBQWEsR0FBRyxlQUFPLEtBQVAsQ0FBdEI7QUFFQSxNQUFNLGlCQUFpQixHQUFHLGVBQU8sS0FBUCxDQUExQjtBQUVBLE1BQU0sdUJBQXVCLEdBQUcsZUFBTyxTQUFTLFNBQVQsYUFBUyxXQUFULEdBQVMsTUFBVCxZQUFTLENBQUUsb0JBQWxCLENBQWhDLENBM0JDLENBNkJEO0FBRUE7O0FB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Q0FGdkI7QUFHWCxVQUFNLEVBQUkscUJBQXFCLENBQUMsT0FBdEIsQ0FBOEIsS0FIN0I7QUFJWCxZQUFRLEVBQUksUUFKRDtBQUtYLFVBQU0sRUFBSztBQUxBLEdBQWQsQ0FESCxHQVFHLElBVkYsRUFZSDtBQUVJLE9BQUcsRUFBSSxnQkFGWDtBQUdJLFNBQUssRUFBSTtBQUhiLEtBT00sY0FBYyxDQUFDLE9BQWYsSUFBMEIsT0FBM0IsR0FBb0MsY0FBYyxDQUFDLE9BQW5ELEdBQTJELElBUGhFLENBWkcsQ0FBUDtBQXlCSCxDQTE2QkQsQyxDQTA2QkU7OztBQUdGLHFCQUFlLE1BQWYiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyYWRsZS50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAyMCBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiwgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IFZpZXdwb3J0Q29udGV4dCB9IGZyb20gJy4vdmlld3BvcnQnXG5cbmltcG9ydCB1c2VJc01vdW50ZWQgZnJvbSAncmVhY3QtaXMtbW91bnRlZC1ob29rJ1xuXG5pbXBvcnQgeyBcbiAgICBzZXRDcmFkbGVTdHlsZXMsIFxuICAgIGdldFVJQ29udGVudExpc3QsIFxuICAgIGNhbGNWaXNpYmxlSXRlbXMsIFxuICAgIGdldFJlZmVyZW5jZUluZGV4RGF0YSxcbiAgICBnZXRDb250ZW50TGlzdFJlcXVpcmVtZW50cyxcbiAgICBzZXRDcmFkbGVTdHlsZVJldmlzaW9uc0ZvckRyb3AsXG4gICAgc2V0Q3JhZGxlU3R5bGVSZXZpc2lvbnNGb3JBZGQsXG4gICAgbm9ybWFsaXplQ3JhZGxlQW5jaG9ycyxcblxufSBmcm9tICcuL2NyYWRsZWZ1bmN0aW9ucydcblxuaW1wb3J0IFNjcm9sbFRyYWNrZXIgZnJvbSAnLi9zY3JvbGx0cmFja2VyJ1xuXG5jb25zdCBTQ1JPTExfVElNRU9VVF9GT1JfT05BRlRFUlNDUk9MTCA9IDIwMFxuXG5jb25zdCBDcmFkbGUgPSAoeyBcbiAgICAgICAgZ2FwLCBcbiAgICAgICAgcGFkZGluZywgXG4gICAgICAgIHJ1bndheWxlbmd0aCwgXG4gICAgICAgIGxpc3RzaXplLCBcbiAgICAgICAgb2Zmc2V0LCBcbiAgICAgICAgb3JpZW50YXRpb24sIFxuICAgICAgICBjZWxsSGVpZ2h0LCBcbiAgICAgICAgY2VsbFdpZHRoLCBcbiAgICAgICAgZ2V0SXRlbSwgXG4gICAgICAgIHBsYWNlaG9sZGVyLCBcbiAgICAgICAgY29tcG9uZW50LFxuICAgICAgICBzdHlsZXMsXG4gICAgfSkgPT4ge1xuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIGluaXRpYWxpemF0aW9uIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBjb25zdCBpc01vdW50ZWQgPSB1c2VJc01vdW50ZWQoKVxuXG4gICAgY29uc3Qgdmlld3BvcnREYXRhID0gdXNlQ29udGV4dChWaWV3cG9ydENvbnRleHQpXG4gICAgY29uc3QgW2NyYWRsZXN0YXRlLCBzYXZlQ3JhZGxlU3RhdGVdID0gdXNlU3RhdGUoJ3NldHVwJylcbiAgICBjb25zdCBjcmFkbGVzdGF0ZVJlZiA9IHVzZVJlZihudWxsKSAvLyBhY2Nlc3MgYnkgY2xvc3VyZXNcbiAgICBjcmFkbGVzdGF0ZVJlZi5jdXJyZW50ID0gY3JhZGxlc3RhdGVcblxuICAgIGNvbnN0IFtzY3JvbGxzdGF0ZSwgc2F2ZVNjcm9sbFN0YXRlXSA9IHVzZVN0YXRlKCdyZWFkeScpXG5cbiAgICAvLyBjb25zb2xlLmxvZygncnVubmluZyBjcmFkbGUgd2l0aCBjcmFkbGVzdGF0ZSwgc2Nyb2xsc3RhdGUnLCBjcmFkbGVzdGF0ZSwgc2Nyb2xsc3RhdGUpXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgZGF0YSBoZWFwIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGNvbnN0IGxpc3RzaXplUmVmID0gdXNlUmVmKG51bGwpXG4gICAgbGlzdHNpemVSZWYuY3VycmVudCA9IGxpc3RzaXplXG5cbiAgICBjb25zdCB2aWV3cG9ydERhdGFSZWYgPSB1c2VSZWYobnVsbClcbiAgICB2aWV3cG9ydERhdGFSZWYuY3VycmVudCA9IHZpZXdwb3J0RGF0YVxuXG4gICAgY29uc3QgaXNSZXNpemluZ1JlZiA9IHVzZVJlZihmYWxzZSlcblxuICAgIGNvbnN0IHBhdXNlT2JzZXJ2ZXJzUmVmID0gdXNlUmVmKGZhbHNlKVxuXG4gICAgY29uc3QgcmVwb3J0UmVmZXJlbmNlSW5kZXhSZWYgPSB1c2VSZWYoY29tcG9uZW50Py5yZXBvcnRSZWZlcmVuY2VJbmRleClcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBlZmZlY3RzIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyBpbml0aWFsaXplIHdpbmRvdyBsaXN0ZW5lciwgYW5kIGNvbXBvbmVudCBlbGVtZW50c1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG5cbiAgICAgICAgdmlld3BvcnREYXRhLmVsZW1lbnRyZWYuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLG9uU2Nyb2xsKVxuXG4gICAgICAgIGlmIChjb21wb25lbnQ/Lmhhc093blByb3BlcnR5KCdnZXRWaXNpYmxlTGlzdCcpKSB7XG4gICAgICAgICAgICBjb21wb25lbnQuZ2V0VmlzaWJsZUxpc3QgPSBnZXRWaXNpYmxlTGlzdFxuICAgICAgICB9IFxuXG4gICAgICAgIGlmIChjb21wb25lbnQ/Lmhhc093blByb3BlcnR5KCdnZXRDb250ZW50TGlzdCcpKSB7XG4gICAgICAgICAgICBjb21wb25lbnQuZ2V0Q29udGVudExpc3QgPSBnZXRDb250ZW50TGlzdFxuICAgICAgICB9IFxuXG4gICAgICAgIGlmIChjb21wb25lbnQ/Lmhhc093blByb3BlcnR5KCdzY3JvbGxUb0l0ZW0nKSkge1xuICAgICAgICAgICAgY29tcG9uZW50LnNjcm9sbFRvSXRlbSA9IHNjcm9sbFRvSXRlbVxuICAgICAgICB9IFxuXG4gICAgICAgIGlmIChjb21wb25lbnQ/Lmhhc093blByb3BlcnR5KCdyZWxvYWQnKSkge1xuICAgICAgICAgICAgY29tcG9uZW50LnJlbG9hZCA9IHJlbG9hZFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcblxuICAgICAgICAgICAgdmlld3BvcnREYXRhLmVsZW1lbnRyZWYuY3VycmVudCAmJiB2aWV3cG9ydERhdGEuZWxlbWVudHJlZi5jdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsb25TY3JvbGwpXG5cbiAgICAgICAgfVxuXG4gICAgfSxbXSlcblxuICAgIC8vIHRyaWdlciByZXNpemluZyBiYXNlZCBvbiB2aWV3cG9ydCBzdGF0ZVxuICAgIHVzZUVmZmVjdCgoKT0+e1xuXG4gICAgICAgIGlzUmVzaXppbmdSZWYuY3VycmVudCA9IHZpZXdwb3J0RGF0YS5pc1Jlc2l6aW5nXG5cbiAgICAgICAgaWYgKGlzUmVzaXppbmdSZWYuY3VycmVudCkge1xuXG4gICAgICAgICAgICBjYWxsaW5nUmVmZXJlbmNlSW5kZXhEYXRhUmVmLmN1cnJlbnQgPSB7Li4ucmVmZXJlbmNlSW5kZXhEYXRhUmVmLmN1cnJlbnR9XG5cbiAgICAgICAgICAgIHBhdXNlT2JzZXJ2ZXJzUmVmLmN1cnJlbnQgPSB0cnVlXG4gICAgICAgICAgICBzYXZlQ3JhZGxlU3RhdGUoJ3Jlc2l6aW5nJylcblxuICAgICAgICB9XG4gICAgICAgIGlmICghaXNSZXNpemluZ1JlZi5jdXJyZW50ICYmIChjcmFkbGVzdGF0ZVJlZi5jdXJyZW50ID09ICdyZXNpemluZycpKSB7XG5cbiAgICAgICAgICAgIHNhdmVDcmFkbGVTdGF0ZSgncmVzaXplJylcblxuICAgICAgICB9XG5cbiAgICB9LFt2aWV3cG9ydERhdGEuaXNSZXNpemluZ10pXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIHNlc3Npb24gZGF0YSBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBjdXJyZW50IGxvY2F0aW9uXG4gICAgY29uc3QgW3JlZmVyZW5jZWluZGV4ZGF0YSwgc2F2ZVJlZmVyZW5jZWluZGV4XSA9IHVzZVN0YXRlKHtcbiAgICAgICAgaW5kZXg6TWF0aC5taW4ob2Zmc2V0LChsaXN0c2l6ZSAtIDEpKSB8fCAwLFxuICAgICAgICBzY3JvbGxvZmZzZXQ6MFxuICAgIH0pXG4gICAgY29uc3QgcmVmZXJlbmNlSW5kZXhEYXRhUmVmID0gdXNlUmVmKG51bGwpIC8vIGFjY2VzcyBieSBjbG9zdXJlc1xuICAgIHJlZmVyZW5jZUluZGV4RGF0YVJlZi5jdXJyZW50ID0gcmVmZXJlbmNlaW5kZXhkYXRhXG4gICAgY29uc3QgbGFzdFJlZmVyZW5jZUluZGV4RGF0YVJlZiA9IHVzZVJlZihudWxsKVxuXG4gICAgY29uc3QgaXNDcmFkbGVJblZpZXdSZWYgPSB1c2VSZWYodHJ1ZSlcblxuICAgIGNvbnN0IFtkcm9wZW50cmllcywgc2F2ZURyb3BlbnRyaWVzXSA9IHVzZVN0YXRlKG51bGwpIC8vIHRyaWdnZXIgYWRkIGVudHJpZXNcblxuICAgIGNvbnN0IFthZGRlbnRyaWVzLCBzYXZlQWRkZW50cmllc10gPSB1c2VTdGF0ZShudWxsKSAvLyBhZGQgZW50cmllc1xuXG4gICAgY29uc3QgY29udGVudGxpc3RSZWYgPSB1c2VSZWYoW10pXG5cbiAgICBjb25zdCBpc1Njcm9sbGluZ1JlZiA9IHVzZVJlZihmYWxzZSlcblxuICAgIGNvbnN0IGl0ZW1vYnNlcnZlclJlZiA9IHVzZVJlZihudWxsKVxuXG4gICAgY29uc3QgY3JhZGxlb2JzZXJ2ZXJSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIGNvbnN0IGNlbGxTcGVjcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2VsbFdpZHRoLGNlbGxIZWlnaHQsZ2FwLCBwYWRkaW5nXG4gICAgICAgIH1cbiAgICB9LFtjZWxsV2lkdGgsY2VsbEhlaWdodCxnYXAsIHBhZGRpbmddKVxuICAgIGNvbnN0IGNlbGxTcGVjc1JlZiA9IHVzZVJlZihudWxsKVxuICAgIGNlbGxTcGVjc1JlZi5jdXJyZW50ID0gY2VsbFNwZWNzXG5cbiAgICBjb25zdCBkaXZsaW5lclN0eWxlc1JlZiA9IHVzZVJlZihPYmplY3QuYXNzaWduKHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JsdWUnLFxuICAgICAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgICAgIGdyaWRHYXA6IGdhcCArICdweCcsXG4gICAgICAgIHBhZGRpbmc6IHBhZGRpbmcgKyAncHgnLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDonc3RhcnQnLFxuICAgICAgICBhbGlnbkNvbnRlbnQ6J3N0YXJ0JyxcbiAgICAgICAgYm94U2l6aW5nOidib3JkZXItYm94JyxcblxuICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcyxzdHlsZXM/LmNyYWRsZSkpXG5cbiAgICBjb25zdCBvcmllbnRhdGlvblJlZiA9IHVzZVJlZihvcmllbnRhdGlvbilcbiAgICBvcmllbnRhdGlvblJlZi5jdXJyZW50ID0gb3JpZW50YXRpb24gLy8gYXZhaWxhYmlsaXR5IGluIGNsb3N1cmVzXG5cbiAgICBjb25zdCBkaXZsaW5lclN0eWxlUmV2aXNpb25zUmVmID0gdXNlUmVmKG51bGwpIC8vIGZvciBtb2RpZmljYXRpb25zIGJ5IG9ic2VydmVyIGFjdGlvbnNcblxuICAgIGNvbnN0IGNyYWRsZUVsZW1lbnRSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIGNvbnN0IHsgdmlld3BvcnREaW1lbnNpb25zIH0gPSB2aWV3cG9ydERhdGFcblxuICAgIGxldCB7IGhlaWdodDp2aWV3cG9ydGhlaWdodCx3aWR0aDp2aWV3cG9ydHdpZHRoIH0gPSB2aWV3cG9ydERpbWVuc2lvbnNcblxuICAgIGNvbnN0IGNyb3NzY291bnQgPSB1c2VNZW1vKCgpID0+IHtcblxuICAgICAgICBsZXQgY3Jvc3Njb3VudFxuICAgICAgICBsZXQgc2l6ZSA9IChvcmllbnRhdGlvbiA9PSAnaG9yaXpvbnRhbCcpP3ZpZXdwb3J0aGVpZ2h0OnZpZXdwb3J0d2lkdGhcbiAgICAgICAgbGV0IGNyb3NzTGVuZ3RoID0gKG9yaWVudGF0aW9uID09ICdob3Jpem9udGFsJyk/Y2VsbEhlaWdodDpjZWxsV2lkdGhcblxuICAgICAgICBsZXQgbGVuZ3RoZm9yY2FsYyA9IHNpemUgLSAocGFkZGluZyAqIDIpICsgZ2FwIC8vIGxlbmd0aCBvZiB2aWV3cG9ydFxuICAgICAgICBsZXQgdGlsZWxlbmd0aGZvcmNhbGMgPSBjcm9zc0xlbmd0aCArIGdhcFxuICAgICAgICB0aWxlbGVuZ3RoZm9yY2FsYyA9IE1hdGgubWluKHRpbGVsZW5ndGhmb3JjYWxjLGxlbmd0aGZvcmNhbGMpIC8vIHJlc3VsdCBjYW5ub3QgYmUgbGVzcyB0aGFuIDFcbiAgICAgICAgY3Jvc3Njb3VudCA9IE1hdGguZmxvb3IobGVuZ3RoZm9yY2FsYy8odGlsZWxlbmd0aGZvcmNhbGMpKVxuICAgICAgICByZXR1cm4gY3Jvc3Njb3VudFxuXG4gICAgfSxbXG4gICAgICAgIG9yaWVudGF0aW9uLCBcbiAgICAgICAgY2VsbFdpZHRoLCBcbiAgICAgICAgY2VsbEhlaWdodCwgXG4gICAgICAgIGdhcCwgXG4gICAgICAgIHBhZGRpbmcsIFxuICAgICAgICB2aWV3cG9ydGhlaWdodCwgXG4gICAgICAgIHZpZXdwb3J0d2lkdGgsXG4gICAgXSlcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBjb25maWcgbWFuYWdlbWVudCBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGNvbnN0IGNyb3NzY291bnRSZWYgPSB1c2VSZWYoY3Jvc3Njb3VudCkgLy8gZm9yIGVhc3kgcmVmZXJlbmNlIGJ5IG9ic2VydmVyXG4gICAgY29uc3QgcHJldmlvdXNDcm9zc2NvdW50UmVmID0gdXNlUmVmKCkgLy8gYXZhaWxhYmxlIGZvciByZXNpemUgbG9naWNcbiAgICBwcmV2aW91c0Nyb3NzY291bnRSZWYuY3VycmVudCA9IGNyb3NzY291bnRSZWYuY3VycmVudCAvLyBhdmFpbGFibGUgZm9yIHJlc2l6ZSBsb2dpY1xuICAgIGNyb3NzY291bnRSZWYuY3VycmVudCA9IGNyb3NzY291bnQgLy8gYXZhaWxhYmxlIGZvciBvYnNlcnZlciBjbG9zdXJlXG5cbiAgICBkaXZsaW5lclN0eWxlc1JlZi5jdXJyZW50ID0gdXNlTWVtbygoKT0+IHtcblxuICAgICAgICAvLyBtZXJnZSBiYXNlIHN0eWxlIGFuZCByZXZpc2lvbnMgKGJ5IG9ic2VydmVyKVxuICAgICAgICBsZXQgZGl2bGluZXJTdHlsZXM6UmVhY3QuQ1NTUHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oey4uLmRpdmxpbmVyU3R5bGVzUmVmLmN1cnJlbnR9LGRpdmxpbmVyU3R5bGVSZXZpc2lvbnNSZWYuY3VycmVudClcbiAgICAgICAgbGV0IHN0eWxlcyA9IHNldENyYWRsZVN0eWxlcyh7XG5cbiAgICAgICAgICAgIG9yaWVudGF0aW9uLCBcbiAgICAgICAgICAgIGRpdmxpbmVyU3R5bGVzLCBcbiAgICAgICAgICAgIGNlbGxIZWlnaHQsIFxuICAgICAgICAgICAgY2VsbFdpZHRoLCBcbiAgICAgICAgICAgIGdhcCxcbiAgICAgICAgICAgIGNyb3NzY291bnQsIFxuICAgICAgICAgICAgdmlld3BvcnRoZWlnaHQsIFxuICAgICAgICAgICAgdmlld3BvcnR3aWR0aCwgXG5cbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gc3R5bGVzXG4gICAgfSxbXG4gICAgICAgIG9yaWVudGF0aW9uLFxuICAgICAgICBjZWxsSGVpZ2h0LFxuICAgICAgICBjZWxsV2lkdGgsXG4gICAgICAgIGdhcCxcbiAgICAgICAgcGFkZGluZyxcbiAgICAgICAgdmlld3BvcnRoZWlnaHQsXG4gICAgICAgIHZpZXdwb3J0d2lkdGgsXG4gICAgICAgIGNyb3NzY291bnQsXG4gICAgICAgIGRpdmxpbmVyU3R5bGVSZXZpc2lvbnNSZWYuY3VycmVudFxuICAgICAgXSlcblxuICAgIHVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBwYXVzZU9ic2VydmVyc1JlZi5jdXJyZW50ID0gdHJ1ZVxuICAgICAgICBjYWxsaW5nUmVmZXJlbmNlSW5kZXhEYXRhUmVmLmN1cnJlbnQgPSB7Li4ucmVmZXJlbmNlSW5kZXhEYXRhUmVmLmN1cnJlbnR9XG4gICAgICAgIHNhdmVDcmFkbGVTdGF0ZSgncmVsb2FkJylcbiAgICB9LFtcbiAgICAgICAgbGlzdHNpemUsXG4gICAgICAgIGNlbGxIZWlnaHQsXG4gICAgICAgIGNlbGxXaWR0aCxcbiAgICAgICAgZ2FwLFxuICAgICAgICBwYWRkaW5nLFxuICAgIF0pXG5cbiAgICBjb25zdCBpdGVtRWxlbWVudHNSZWYgPSB1c2VSZWYobmV3IE1hcCgpKVxuICAgIGNvbnN0IHNjcm9sbFRpbWVyaWRSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIEludGVyc2VjdGlvbk9ic2VydmVyIHN1cHBvcnRdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gVGhlcmUgYXJlIHR3byBvYnNlcnZlcnMsIG9uZSBmb3IgdGhlIGNyYWRsZSwgYW5kIGFub3RoZXIgZm9yIGl0ZW1TaGVsbHM7IGJvdGggYWdhaW5zdFxuICAgIC8vIHRoZSB2aWV3cG9ydC5cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBjcmFkbGUgb2JzZXJ2ZXIgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gdGhpcyBzZXRzIHVwIGFuIEludGVyc2VjdGlvbk9ic2VydmVyIG9mIHRoZSBjcmFkbGUgYWdhaW5zdCB0aGUgdmlld3BvcnQuIFdoZW4gdGhlXG4gICAgLy8gY3JhZGxlIGdvZXMgb3V0IG9mIHRoZSBvYnNlcnZlciBzY29wZSwgdGhlIFwicmVwb3NpdGlvbmluZ1wiIGNyYWRsZSBzdGF0ZSBpcyB0cmlnZ2VyZC5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuXG4gICAgICAgIGNyYWRsZW9ic2VydmVyUmVmLmN1cnJlbnQgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXG5cbiAgICAgICAgICAgIGNyYWRsZW9ic2VydmVyY2FsbGJhY2ssXG4gICAgICAgICAgICB7cm9vdDp2aWV3cG9ydERhdGEuZWxlbWVudHJlZi5jdXJyZW50fVxuXG4gICAgICAgIClcblxuICAgICAgICBjcmFkbGVvYnNlcnZlclJlZi5jdXJyZW50Lm9ic2VydmUoY3JhZGxlRWxlbWVudFJlZi5jdXJyZW50KVxuXG4gICAgfSxbXSlcblxuICAgIGNvbnN0IGNyYWRsZW9ic2VydmVyY2FsbGJhY2sgPSB1c2VDYWxsYmFjaygoZW50cmllcykgPT4ge1xuXG4gICAgICAgIGlzQ3JhZGxlSW5WaWV3UmVmLmN1cnJlbnQgPSBlbnRyaWVzWzBdLmlzSW50ZXJzZWN0aW5nXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdpc0NyYWRsZUluVmlld1JlZi5jdXJyZW50Jyxpc0NyYWRsZUluVmlld1JlZi5jdXJyZW50KVxuXG4gICAgfSxbXSlcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBpdGVtIHNoZWxsIG9ic2VydmVyIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLypcbiAgICAgICAgVGhlIGNyYWRsZSBjb250ZW50IGlzIGRyaXZlbiBieSBub3RpZmljYXRpb25zIGZyb20gdGhlIEludGVyc2VjdGlvbk9ic2VydmVyLlxuICAgICAgICAtIGFzIHRoZSB1c2VyIHNjcm9sbHMgdGhlIGNyYWRsZSwgd2hpY2ggaGFzIGEgcnVud2F5IGF0IGJvdGggdGhlIGxlYWRpbmdcbiAgICAgICAgICAgIGFuZCB0cmFpbGluZyBlZGdlcywgaXRlbVNoZWxscyBzY3JvbGwgaW50byBvciBvdXQgb2YgdGhlIHNjb3BlIG9mIHRoZSBvYnNlcnZlciBcbiAgICAgICAgICAgIChkZWZpbmVkIGJ5IHRoZSB3aWR0aC9oZWlnaHQgb2YgdGhlIHZpZXdwb3J0ICsgdGhlIGxlbmd0aHMgb2YgdGhlIHJ1bndheXMpLiBUaGUgb2JzZXJ2ZXJcbiAgICAgICAgICAgIG5vdGlmaWVzIHRoZSBhcHAgKHRocm91Z2ggaXRlbW9ic2VydmVyY2FsbGJhY2soKSBiZWxvdykgYXQgdGhlIGNyb3NzaW5ncyBvZiB0aGUgaXRlbXNoZWxscyBcbiAgICAgICAgICAgIG9mIHRoZSBkZWZpbmVkIG9ic2VydmVyIGNyYWRsZSBib3VuZGFyaWVzLlxuXG4gICAgICAgICAgICBUaGUgbm8tbG9uZ2VyLWludGVyc2VjdGluZyBub3RpZmljYXRpb25zIHRyaWdnZXIgZHJvcHBpbmcgb2YgdGhhdCBudW1iZXIgb2YgYWZmZWN0ZWQgaXRlbXMgZnJvbSBcbiAgICAgICAgICAgIHRoZSBjcmFkbGUgY29udGVudGxpc3QuIFRoZSBkcm9wcGluZyBvZiBpdGVtcyBmcm9tIHRoZSB0cmFpbGluZyBlbmQgb2YgdGhlIGNvbnRlbnQgbGlzdFxuICAgICAgICAgICAgdHJpZ2dlcnMgdGhlIGFkZGl0aW9uIG9mIGFuIGVxdWFsIG51bWJlciBvZiBpdGVtcyBhdCB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSBjcmFkbGUgY29udGVudC5cblxuICAgICAgICAgICAgVGVjaG5pY2FsbHksIHRoZSBvcHBvc2l0ZSBlbmQgcG9zaXRpb24gc3BlYyBpcyBzZXQgKHRvcCBvciBsZWZ0IGRlcGVuZGluZyBvbiBvcmllbnRhdGlvbiksIFxuICAgICAgICAgICAgYW5kIHRoZSBtYXRjaGluZyBlbmQgcG9zaXRpb24gc3BlYyBpcyBzZXQgdG8gJ2F1dG8nIHdoZW4gaXRlbXMgYXJlIGFkZGVkLiBUaGlzIGNhdXNlcyBpdGVtcyB0byBiZSBcbiAgICAgICAgICAgIFwic3F1ZWV6ZWRcIiBpbnRvIHRoZSBsZWFkaW5nIG9yIHRyYWlsaW5nIGVuZHMgb2YgdGhlIHVpIGNvbnRlbnQgKG91dCBvZiB2aWV3KSBhcyBhcHByb3ByaWF0ZS5cblxuICAgICAgICAgICAgVGhlcmUgYXJlIGV4Y2VwdGlvbnMgZm9yIHNldHVwIGFuZCBlZGdlIGNhc2VzLlxuICAgICovXG5cbiAgICBjb25zdCBkcm9wY29udGVudFJlZiA9IHVzZVJlZihudWxsKVxuICAgIGNvbnN0IGRyb3BzdHlsZXNSZWYgPSB1c2VSZWYobnVsbClcbiAgICBjb25zdCBkcm9wY29udGVudGxpc3RSZWYgPSB1c2VSZWYobnVsbClcbiAgICBjb25zdCBhZGRjb250ZW50UmVmID0gdXNlUmVmKG51bGwpXG4gICAgY29uc3QgYWRkc3R5bGVzUmVmID0gdXNlUmVmKG51bGwpXG4gICAgY29uc3QgYWRkY29udGVudGxpc3RSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIC8vIHRoZSBhc3luYyBjYWxsYmFjayBmcm9tIEludGVyc2VjdGlvbk9ic2VydmVyLlxuICAgIGNvbnN0IGl0ZW1vYnNlcnZlcmNhbGxiYWNrID0gdXNlQ2FsbGJhY2soKGVudHJpZXMpPT57XG5cbiAgICAgICAgaWYgKHBhdXNlT2JzZXJ2ZXJzUmVmLmN1cnJlbnQpIHtcblxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcmFkbGVzdGF0ZVJlZi5jdXJyZW50ID09ICdyZWFkeScpIHtcblxuICAgICAgICAgICAgbGV0IGRyb3BlbnRyaWVzID0gZW50cmllcy5maWx0ZXIoZW50cnkgPT4gKCFlbnRyeS5pc0ludGVyc2VjdGluZykpXG5cbiAgICAgICAgICAgIGlmIChkcm9wZW50cmllcy5sZW5ndGgpIHtcblxuICAgICAgICAgICAgICAgIGRyb3Bjb250ZW50UmVmLmN1cnJlbnQgPSBkcm9wZW50cmllc1xuICAgICAgICAgICAgICAgIC8vIGlzTW91bnRlZCgpICYmIHNhdmVTY3JvbGxTdGF0ZSgnZHJvcGNvbnRlbnQnKVxuICAgICAgICAgICAgICAgIGlzTW91bnRlZCgpICYmIHNhdmVEcm9wZW50cmllcyhkcm9wZW50cmllcylcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZHJvcGVudHJpZXMnLCBkcm9wZW50cmllcylcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFtdKVxuXG4gICAgLy8gZHJvcCBzY3JvbGwgY29udGVudFxuICAgIHVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAoZHJvcGVudHJpZXMgPT09IG51bGwpIHJldHVyblxuICAgICAgICAvLyBpZiAoc2Nyb2xsc3RhdGUgIT0gJ2Ryb3Bjb250ZW50JykgcmV0dXJuXG5cbiAgICAgICAgLy8gbGV0IGRyb3BlbnRyaWVzID0gZHJvcGNvbnRlbnRSZWYuY3VycmVudFxuICAgICAgICBkcm9wY29udGVudFJlZi5jdXJyZW50ID0gbnVsbFxuXG4gICAgICAgIGxldCBzYW1wbGVFbnRyeSA9IGRyb3BlbnRyaWVzWzBdXG5cbiAgICAgICAgbGV0IGNyYWRsZUVsZW1lbnQgPSBjcmFkbGVFbGVtZW50UmVmLmN1cnJlbnRcbiAgICAgICAgbGV0IHBhcmVudEVsZW1lbnQgPSBjcmFkbGVFbGVtZW50LnBhcmVudEVsZW1lbnRcbiAgICAgICAgbGV0IHZpZXdwb3J0RWxlbWVudCA9IHZpZXdwb3J0RGF0YS5lbGVtZW50cmVmLmN1cnJlbnRcblxuICAgICAgICBsZXQgc2Nyb2xsZm9yd2FyZFxuICAgICAgICBsZXQgbG9jYWxDb250ZW50TGlzdFxuXG4gICAgICAgIC8vIC0tIGlzb2xhdGUgZm9yd2FyZCBhbmQgYmFja3dhcmQgbGlzdHNcbiAgICAgICAgLy8gIHRoZW4gc2V0IHNjcm9sbGZvcndhcmRcbiAgICAgICAgbGV0IGZvcndhcmRjb3VudCA9IDAsIGJhY2t3YXJkY291bnQgPSAwXG4gICAgICAgIGZvciAobGV0IGRyb3ByZWNvcmRpbmRleCA9IDA7IGRyb3ByZWNvcmRpbmRleCA8ZHJvcGVudHJpZXMubGVuZ3RoOyBkcm9wcmVjb3JkaW5kZXgrKyApIHtcbiAgICAgICAgICAgIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2FtcGxlRW50cnkuYm91bmRpbmdDbGllbnRSZWN0LnkgLSBzYW1wbGVFbnRyeS5yb290Qm91bmRzLnkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcndhcmRjb3VudCsrXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja3dhcmRjb3VudCsrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHNhbXBsZUVudHJ5LmJvdW5kaW5nQ2xpZW50UmVjdC54IC0gc2FtcGxlRW50cnkucm9vdEJvdW5kcy54IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3J3YXJkY291bnQrK1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2t3YXJkY291bnQrK1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5ldHNoaWZ0ID0gZm9yd2FyZGNvdW50IC0gYmFja3dhcmRjb3VudFxuICAgICAgICBpZiAobmV0c2hpZnQgPT0gMCkge1xuICAgICAgICAgICAgLy8gc2F2ZVNjcm9sbFN0YXRlKCdyZWFkeScpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHNjcm9sbGZvcndhcmQgPSAoZm9yd2FyZGNvdW50ID4gYmFja3dhcmRjb3VudClcblxuICAgICAgICBuZXRzaGlmdCA9IE1hdGguYWJzKG5ldHNoaWZ0KVxuXG4gICAgICAgIC8vIHNldCBsb2NhbENvbnRlbnRMaXN0XG4gICAgICAgIGxldCBpbmRleG9mZnNldCA9IGNvbnRlbnRsaXN0UmVmLmN1cnJlbnRbMF0ucHJvcHMuaW5kZXhcbiAgICAgICAgbGV0IHBlbmRpbmdjb250ZW50b2Zmc2V0XG4gICAgICAgIGxldCBuZXdjb250ZW50Y291bnQgPSBNYXRoLmNlaWwobmV0c2hpZnQvY3Jvc3Njb3VudFJlZi5jdXJyZW50KSpjcm9zc2NvdW50UmVmLmN1cnJlbnRcbiAgICAgICAgbGV0IGhlYWRpbmRleGNvdW50LCB0YWlsaW5kZXhjb3VudFxuXG4gICAgICAgIGlmIChzY3JvbGxmb3J3YXJkKSB7XG4gICAgICAgICAgICBwZW5kaW5nY29udGVudG9mZnNldCA9IGluZGV4b2Zmc2V0ICsgbmV0c2hpZnRcbiAgICAgICAgICAgIGxldCBwcm9wb3NlZHRhaWxvZmZzZXQgPSBwZW5kaW5nY29udGVudG9mZnNldCArIG5ld2NvbnRlbnRjb3VudCArICgoY29udGVudGxpc3RSZWYuY3VycmVudC5sZW5ndGggLSBuZXRzaGlmdCApIC0gMSlcblxuICAgICAgICAgICAgaWYgKChwcm9wb3NlZHRhaWxvZmZzZXQpID4gKGxpc3RzaXplIC0xKSApIHtcbiAgICAgICAgICAgICAgICBuZXdjb250ZW50Y291bnQgLT0gKHByb3Bvc2VkdGFpbG9mZnNldCAtIChsaXN0c2l6ZSAtMSkpXG4gICAgICAgICAgICAgICAgaWYgKG5ld2NvbnRlbnRjb3VudCA8PTApIHsgLy8gZGVmZW5zaXZlXG4gICAgICAgICAgICAgICAgICAgIC8vIHNhdmVTY3JvbGxTdGF0ZSgncmVhZHknKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGhlYWRpbmRleGNvdW50ID0gLW5ldHNoaWZ0XG4gICAgICAgICAgICB0YWlsaW5kZXhjb3VudCA9IDBcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBwZW5kaW5nY29udGVudG9mZnNldCA9IGluZGV4b2Zmc2V0XG4gICAgICAgICAgICBsZXQgcHJvcG9zZWRpbmRleG9mZnNldCA9IHBlbmRpbmdjb250ZW50b2Zmc2V0IC0gbmV3Y29udGVudGNvdW50XG4gICAgICAgICAgICBpZiAocHJvcG9zZWRpbmRleG9mZnNldCA8IDApIHtcbiAgICAgICAgICAgICAgICBwcm9wb3NlZGluZGV4b2Zmc2V0ID0gLXByb3Bvc2VkaW5kZXhvZmZzZXRcbiAgICAgICAgICAgICAgICBuZXdjb250ZW50Y291bnQgPSBuZXdjb250ZW50Y291bnQgLSBwcm9wb3NlZGluZGV4b2Zmc2V0XG4gICAgICAgICAgICAgICAgaWYgKG5ld2NvbnRlbnRjb3VudCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNhdmVTY3JvbGxTdGF0ZSgncmVhZHknKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBoZWFkaW5kZXhjb3VudCA9IDBcbiAgICAgICAgICAgIHRhaWxpbmRleGNvdW50ID0gLW5ldHNoaWZ0XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsQ29udGVudExpc3QgPSBnZXRVSUNvbnRlbnRMaXN0KHtcblxuICAgICAgICAgICAgaW5kZXhvZmZzZXQsXG4gICAgICAgICAgICBsb2NhbENvbnRlbnRMaXN0OmNvbnRlbnRsaXN0UmVmLmN1cnJlbnQsXG4gICAgICAgICAgICBoZWFkaW5kZXhjb3VudCxcbiAgICAgICAgICAgIHRhaWxpbmRleGNvdW50LFxuICAgICAgICAgICAgY2FsbGJhY2tzUmVmLFxuXG4gICAgICAgIH0pXG5cbiAgICAgICAgbGV0IHN0eWxlcyA9IHNldENyYWRsZVN0eWxlUmV2aXNpb25zRm9yRHJvcCh7IFxuXG4gICAgICAgICAgICBjcmFkbGVFbGVtZW50LCBcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQsIFxuICAgICAgICAgICAgc2Nyb2xsZm9yd2FyZCwgXG4gICAgICAgICAgICBvcmllbnRhdGlvbiBcblxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdkcm9wIHN0eWxlcycsey4uLnN0eWxlc30pXG5cbiAgICAgICAgLy8gaW1tZWRpYXRlIGNoYW5nZSBmb3IgbW9kaWZpY2F0aW9uLCBidXQgYW4gYW50aS1wYXR0ZXJuXG4gICAgICAgIGxldCBlbGVtZW50c3R5bGUgPSBjcmFkbGVFbGVtZW50UmVmLmN1cnJlbnQuc3R5bGVcbiAgICAgICAgZWxlbWVudHN0eWxlLnRvcCA9IHN0eWxlcy50b3BcbiAgICAgICAgZWxlbWVudHN0eWxlLmJvdHRvbSA9IHN0eWxlcy5ib3R0b21cbiAgICAgICAgZWxlbWVudHN0eWxlLmxlZnQgPSBzdHlsZXMubGVmdFxuICAgICAgICBlbGVtZW50c3R5bGUucmlnaHQgPSBzdHlsZXMucmlnaHRcblxuICAgICAgICAvLyBjb25zb2xlLmxvZygnZHJvcCBzdHlsZXMnLHN0eWxlcylcblxuICAgICAgICBkaXZsaW5lclN0eWxlUmV2aXNpb25zUmVmLmN1cnJlbnQgPSBzdHlsZXMgXG5cbiAgICAgICAgY29udGVudGxpc3RSZWYuY3VycmVudCA9IGxvY2FsQ29udGVudExpc3RcbiAgICAgICAgLy8gZHJvcGNvbnRlbnRsaXN0UmVmLmN1cnJlbnQgPSBsb2NhbENvbnRlbnRMaXN0XG4gICAgICAgIC8vIGRyb3BzdHlsZXNSZWYuY3VycmVudCA9IHN0eWxlc1xuXG5cbiAgICAgICAgLy8gc2F2ZURyb3BlbnRyaWVzKG51bGwpXG4gICAgICAgIC8vIGFkZGNvbnRlbnRSZWYuY3VycmVudCA9IHtjb3VudDpuZXdjb250ZW50Y291bnQsc2Nyb2xsZm9yd2FyZCxjb250ZW50b2Zmc2V0OnBlbmRpbmdjb250ZW50b2Zmc2V0fVxuICAgICAgICBzYXZlQWRkZW50cmllcyh7Y291bnQ6bmV3Y29udGVudGNvdW50LHNjcm9sbGZvcndhcmQsY29udGVudG9mZnNldDpwZW5kaW5nY29udGVudG9mZnNldH0pXG4gICAgICAgIC8vIHNhdmVTY3JvbGxTdGF0ZSgnYWRkY29udGVudCcpIC8vIC0+IGFwcGx5ZHJvcGNvbnRlbnQgLT4gYWRkY29udGVudFxuXG5cbiAgICB9LFtkcm9wZW50cmllc10pXG5cbiAgICAvLyBhZGQgc2Nyb2xsIGNvbnRlbnRcbiAgICB1c2VFZmZlY3QoKCk9PntcbiAgICAgICAgLy8gc2F2ZUFkZGVudHJpZXMobnVsbClcbiAgICAgICAgLy8gcmV0dXJuXG4gICAgICAgIGlmIChhZGRlbnRyaWVzID09PSBudWxsKSByZXR1cm5cbiAgICAgICAgLy8gaWYgKHNjcm9sbHN0YXRlICE9ICdhZGRjb250ZW50JykgcmV0dXJuXG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0FERElORyBzY3JvbGwgY29udGVudCcpXG5cblxuICAgICAgICAvLyBsZXQgYWRkZW50cmllcyA9IGFkZGNvbnRlbnRSZWYuY3VycmVudFxuICAgICAgICBhZGRjb250ZW50UmVmLmN1cnJlbnQgPSBudWxsXG5cbiAgICAgICAgbGV0IGNyYWRsZUVsZW1lbnQgPSBjcmFkbGVFbGVtZW50UmVmLmN1cnJlbnRcbiAgICAgICAgbGV0IHBhcmVudEVsZW1lbnQgPSBjcmFkbGVFbGVtZW50LnBhcmVudEVsZW1lbnRcbiAgICAgICAgbGV0IHZpZXdwb3J0RWxlbWVudCA9IHZpZXdwb3J0RGF0YS5lbGVtZW50cmVmLmN1cnJlbnRcblxuICAgICAgICBsZXQgeyBzY3JvbGxmb3J3YXJkIH0gPSBhZGRlbnRyaWVzXG4gICAgICAgIGxldCBsb2NhbENvbnRlbnRMaXN0XG5cbiAgICAgICAgLy8gc2V0IGxvY2FsQ29udGVudExpc3RcbiAgICAgICAgbGV0IHsgY29udGVudG9mZnNldCwgY291bnQ6bmV3Y29udGVudGNvdW50IH0gPSBhZGRlbnRyaWVzXG5cbiAgICAgICAgbGV0IGhlYWRpbmRleGNvdW50LCB0YWlsaW5kZXhjb3VudFxuICAgICAgICBpZiAoc2Nyb2xsZm9yd2FyZCkge1xuXG4gICAgICAgICAgICBoZWFkaW5kZXhjb3VudCA9IDAsXG4gICAgICAgICAgICB0YWlsaW5kZXhjb3VudCA9ICBuZXdjb250ZW50Y291bnRcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBoZWFkaW5kZXhjb3VudCA9IG5ld2NvbnRlbnRjb3VudFxuICAgICAgICAgICAgdGFpbGluZGV4Y291bnQgPSAwXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsQ29udGVudExpc3QgPSBnZXRVSUNvbnRlbnRMaXN0KHtcblxuICAgICAgICAgICAgbG9jYWxDb250ZW50TGlzdDogY29udGVudGxpc3RSZWYuY3VycmVudCxcbiAgICAgICAgICAgIGhlYWRpbmRleGNvdW50LFxuICAgICAgICAgICAgdGFpbGluZGV4Y291bnQsXG4gICAgICAgICAgICBpbmRleG9mZnNldDogY29udGVudG9mZnNldCxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uLFxuICAgICAgICAgICAgY2VsbEhlaWdodCxcbiAgICAgICAgICAgIGNlbGxXaWR0aCxcbiAgICAgICAgICAgIG9ic2VydmVyOiBpdGVtb2JzZXJ2ZXJSZWYuY3VycmVudCxcbiAgICAgICAgICAgIGNyb3NzY291bnQsXG4gICAgICAgICAgICBjYWxsYmFja3NSZWYsXG4gICAgICAgICAgICBnZXRJdGVtLFxuICAgICAgICAgICAgbGlzdHNpemUsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcixcblxuICAgICAgICB9KVxuXG4gICAgICAgIGxldCBzdHlsZXMgPSBzZXRDcmFkbGVTdHlsZVJldmlzaW9uc0ZvckFkZCh7XG5cbiAgICAgICAgICAgIGNyYWRsZUVsZW1lbnQsXG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50LFxuICAgICAgICAgICAgc2Nyb2xsZm9yd2FyZCxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uLFxuXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2FkZCBzdHlsZXMnLHsuLi5zdHlsZXN9KVxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdzdHlsZXMsIGNyYWRsZSBvZmZzZXRIZWlnaHQsIG9mZnNldFRvcCcsc3R5bGVzLCBjcmFkbGVFbGVtZW50Lm9mZnNldEhlaWdodCwgY3JhZGxlRWxlbWVudC5vZmZzZXRUb3ApXG5cbiAgICAgICAgLy8gaW1tZWRpYXRlIGNoYW5nZSBmb3IgbW9kaWZpY2F0aW9uXG4gICAgICAgIGxldCBlbGVtZW50c3R5bGUgPSBjcmFkbGVFbGVtZW50UmVmLmN1cnJlbnQuc3R5bGVcbiAgICAgICAgZWxlbWVudHN0eWxlLnRvcCA9IHN0eWxlcy50b3BcbiAgICAgICAgZWxlbWVudHN0eWxlLmJvdHRvbSA9IHN0eWxlcy5ib3R0b21cbiAgICAgICAgZWxlbWVudHN0eWxlLmxlZnQgPSBzdHlsZXMubGVmdFxuICAgICAgICBlbGVtZW50c3R5bGUucmlnaHQgPSBzdHlsZXMucmlnaHRcblxuICAgICAgICAvLyBhZGRzdHlsZXNSZWYuY3VycmVudCA9IHN0eWxlc1xuICAgICAgICBkaXZsaW5lclN0eWxlUmV2aXNpb25zUmVmLmN1cnJlbnQgPSBzdHlsZXNcblxuICAgICAgICAvLyBhZGRjb250ZW50bGlzdFJlZi5jdXJyZW50ID0gbG9jYWxDb250ZW50TGlzdFxuICAgICAgICBjb250ZW50bGlzdFJlZi5jdXJyZW50ID0gbG9jYWxDb250ZW50TGlzdFxuXG4gICAgICAgIC8vIHNhdmVTY3JvbGxTdGF0ZSgnYXBwbHlhZGRzdHlsZXMnKSAvLyAtPiBhcHBseWFkZGNvbnRlbnQgLT4gcmVhZHlcblxuICAgICAgICAvLyBjb25zb2xlLmxvZygnYWRkZW50cmllcycsYWRkZW50cmllcylcbiAgICAgICAgLy8gc2F2ZVNjcm9sbFN0YXRlKCdyZWFkeScpXG4gICAgICAgIHNhdmVBZGRlbnRyaWVzKG51bGwpXG5cbiAgICB9LFthZGRlbnRyaWVzXSlcbiAgICAvLyBFbmQgb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgc3VwcG9ydFxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIEFzc2VtYmx5IG9mIGNvbnRlbnRdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBcbiAgICAvLyByZXNldCBjcmFkbGVcbiAgICBjb25zdCBzZXRDcmFkbGVDb250ZW50ID0gdXNlQ2FsbGJhY2soKGNyYWRsZVN0YXRlLCByZWZlcmVuY2VJbmRleERhdGEpID0+IHtcblxuICAgICAgICBsZXQgeyBpbmRleDogdmlzaWJsZXRhcmdldGluZGV4b2Zmc2V0LCBcbiAgICAgICAgICAgIHNjcm9sbG9mZnNldDogdmlzaWJsZXRhcmdldHNjcm9sbG9mZnNldCB9ID0gcmVmZXJlbmNlSW5kZXhEYXRhXG5cbiAgICAgICAgaWYgKGNyYWRsZVN0YXRlID09ICdyZXBvc2l0aW9uJykgdmlzaWJsZXRhcmdldHNjcm9sbG9mZnNldCA9IDBcblxuICAgICAgICBsZXQgbG9jYWxDb250ZW50TGlzdCA9IFtdIC8vIGFueSBkdXBsaWNhdGVkIGl0ZW1zIHdpbGwgYmUgcmUtdXNlZCBieSByZWFjdFxuXG4gICAgICAgIGxldCB7aW5kZXhvZmZzZXQsIHJlZmVyZW5jZW9mZnNldCwgY29udGVudENvdW50LCBzY3JvbGxibG9ja29mZnNldCwgY3JhZGxlb2Zmc2V0fSA9IFxuICAgICAgICAgICAgZ2V0Q29udGVudExpc3RSZXF1aXJlbWVudHMoe1xuICAgICAgICAgICAgICAgIGNlbGxIZWlnaHQsIFxuICAgICAgICAgICAgICAgIGNlbGxXaWR0aCwgXG4gICAgICAgICAgICAgICAgb3JpZW50YXRpb24sIFxuICAgICAgICAgICAgICAgIHZpZXdwb3J0aGVpZ2h0LCBcbiAgICAgICAgICAgICAgICB2aWV3cG9ydHdpZHRoLCBcbiAgICAgICAgICAgICAgICBydW53YXlsZW5ndGgsIFxuICAgICAgICAgICAgICAgIGdhcCxcbiAgICAgICAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgICAgICAgIHZpc2libGV0YXJnZXRpbmRleG9mZnNldCxcbiAgICAgICAgICAgICAgICB0YXJnZXRTY3JvbGxPZmZzZXQ6dmlzaWJsZXRhcmdldHNjcm9sbG9mZnNldCxcbiAgICAgICAgICAgICAgICBjcm9zc2NvdW50LFxuICAgICAgICAgICAgICAgIGxpc3RzaXplLFxuICAgICAgICAgICAgfSlcblxuICAgICAgICByZWZlcmVuY2VJbmRleERhdGFSZWYuY3VycmVudCA9IHtcbiAgICAgICAgICAgIGluZGV4OnJlZmVyZW5jZW9mZnNldCxcbiAgICAgICAgICAgIHNjcm9sbG9mZnNldDp2aXNpYmxldGFyZ2V0c2Nyb2xsb2Zmc2V0LFxuICAgICAgICB9XG5cbiAgICAgICAgcmVwb3J0UmVmZXJlbmNlSW5kZXhSZWYuY3VycmVudCAmJiByZXBvcnRSZWZlcmVuY2VJbmRleFJlZi5jdXJyZW50KHJlZmVyZW5jZUluZGV4RGF0YVJlZi5jdXJyZW50LmluZGV4KVxuXG4gICAgICAgIHNhdmVSZWZlcmVuY2VpbmRleChyZWZlcmVuY2VJbmRleERhdGFSZWYuY3VycmVudClcblxuICAgICAgICBsZXQgY2hpbGRsaXN0ID0gZ2V0VUlDb250ZW50TGlzdCh7XG4gICAgICAgICAgICBpbmRleG9mZnNldCwgXG4gICAgICAgICAgICBoZWFkaW5kZXhjb3VudDowLCBcbiAgICAgICAgICAgIHRhaWxpbmRleGNvdW50OmNvbnRlbnRDb3VudCwgXG4gICAgICAgICAgICBvcmllbnRhdGlvbiwgXG4gICAgICAgICAgICBjZWxsSGVpZ2h0LCBcbiAgICAgICAgICAgIGNlbGxXaWR0aCwgXG4gICAgICAgICAgICBsb2NhbENvbnRlbnRMaXN0LFxuICAgICAgICAgICAgb2JzZXJ2ZXI6aXRlbW9ic2VydmVyUmVmLmN1cnJlbnQsXG4gICAgICAgICAgICBjcm9zc2NvdW50LFxuICAgICAgICAgICAgY2FsbGJhY2tzUmVmLFxuICAgICAgICAgICAgZ2V0SXRlbSxcbiAgICAgICAgICAgIGxpc3RzaXplLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICAgIH0pXG5cbiAgICAgICAgY29udGVudERhdGFSZWYuY3VycmVudCA9IGNoaWxkbGlzdFxuXG4gICAgICAgIGxldCBlbGVtZW50c3R5bGUgPSBjcmFkbGVFbGVtZW50UmVmLmN1cnJlbnQuc3R5bGVcblxuICAgICAgICBsZXQgc3R5bGVzOlJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7fVxuXG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG5cbiAgICAgICAgICAgIHN0eWxlcy50b3AgPSBjcmFkbGVvZmZzZXQgKyAncHgnXG4gICAgICAgICAgICBzdHlsZXMuYm90dG9tID0gJ2F1dG8nXG4gICAgICAgICAgICBzdHlsZXMubGVmdCA9ICdhdXRvJ1xuICAgICAgICAgICAgc3R5bGVzLnJpZ2h0ID0gJ2F1dG8nXG5cbiAgICAgICAgICAgIHBvc2l0aW9uRGF0YVJlZi5jdXJyZW50ID0ge3Byb3BlcnR5OidzY3JvbGxUb3AnLHZhbHVlOnNjcm9sbGJsb2Nrb2Zmc2V0fVxuXG4gICAgICAgIH0gZWxzZSB7IC8vIG9yaWVudGF0aW9uID0gJ2hvcml6b250YWwnXG5cbiAgICAgICAgICAgIHN0eWxlcy50b3AgPSAnYXV0bydcbiAgICAgICAgICAgIHN0eWxlcy5ib3R0b20gPSBzdHlsZXMuYm90dG9tID0gJ2F1dG8nXG4gICAgICAgICAgICBzdHlsZXMubGVmdCA9IGNyYWRsZW9mZnNldCArICdweCdcbiAgICAgICAgICAgIHN0eWxlcy5yaWdodCA9ICdhdXRvJ1xuXG4gICAgICAgICAgICBwb3NpdGlvbkRhdGFSZWYuY3VycmVudCA9IHtwcm9wZXJ0eTonc2Nyb2xsTGVmdCcsdmFsdWU6c2Nyb2xsYmxvY2tvZmZzZXR9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGxheW91dERhdGFSZWYuY3VycmVudCA9IHN0eWxlc1xuXG4gICAgfSxbXG4gICAgICAgIGNlbGxIZWlnaHQsXG4gICAgICAgIGNlbGxXaWR0aCxcbiAgICAgICAgb3JpZW50YXRpb24sXG4gICAgICAgIHZpZXdwb3J0aGVpZ2h0LFxuICAgICAgICB2aWV3cG9ydHdpZHRoLFxuICAgICAgICBydW53YXlsZW5ndGgsXG4gICAgICAgIGdhcCxcbiAgICAgICAgcGFkZGluZyxcbiAgICAgICAgY3Jvc3Njb3VudCxcbiAgICAgIF1cbiAgICApXG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgc3RhdGUgbWFuYWdlbWVudCBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gY2FsbGJhY2sgZm9yIHNjcm9sbFxuICAgIGNvbnN0IG9uU2Nyb2xsID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuXG4gICAgICAgIGlmICghaXNTY3JvbGxpbmdSZWYuY3VycmVudCkgIHtcblxuICAgICAgICAgICAgaXNTY3JvbGxpbmdSZWYuY3VycmVudCA9IHRydWVcblxuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbFRpbWVyaWRSZWYuY3VycmVudClcbiAgICAgICAgc2Nyb2xsVGltZXJpZFJlZi5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgICAgIGlzU2Nyb2xsaW5nUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBjcmFkbGVTdGF0ZSA9IGNyYWRsZXN0YXRlUmVmLmN1cnJlbnRcbiAgICAgICAgICAgIGlmICgoIWlzUmVzaXppbmdSZWYuY3VycmVudCkgJiYgKCF2aWV3cG9ydERhdGFSZWYuY3VycmVudC5pc1Jlc2l6aW5nKSkge1xuXG4gICAgICAgICAgICAgICAgKGNyYWRsZVN0YXRlICE9ICdyZXBvc2l0aW9uaW5nJykgJiYgbm9ybWFsaXplQ3JhZGxlQW5jaG9ycyhjcmFkbGVFbGVtZW50UmVmLmN1cnJlbnQsIG9yaWVudGF0aW9uUmVmLmN1cnJlbnQpXG5cbiAgICAgICAgICAgICAgICBzYXZlUmVmZXJlbmNlaW5kZXgoey4uLnJlZmVyZW5jZUluZGV4RGF0YVJlZi5jdXJyZW50fSkgLy8gdHJpZ2dlciByZS1ydW4gdG8gY2FwdHVyZSBlbmQgb2Ygc2Nyb2xsIHNlc3Npb24gdmFsdWVzXG4gICAgICAgICAgICAgICAgbGFzdFJlZmVyZW5jZUluZGV4RGF0YVJlZi5jdXJyZW50ID0gey4uLnJlZmVyZW5jZUluZGV4RGF0YVJlZi5jdXJyZW50fVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGNyYWRsZVN0YXRlKSB7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdyZXBvc2l0aW9uaW5nJzoge1xuXG4gICAgICAgICAgICAgICAgICAgIHBhdXNlT2JzZXJ2ZXJzUmVmLmN1cnJlbnQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIGNhbGxpbmdSZWZlcmVuY2VJbmRleERhdGFSZWYuY3VycmVudCA9IHsuLi5yZWZlcmVuY2VJbmRleERhdGFSZWYuY3VycmVudH1cblxuICAgICAgICAgICAgICAgICAgICBzYXZlQ3JhZGxlU3RhdGUoJ3JlcG9zaXRpb24nKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFNDUk9MTF9USU1FT1VUX0ZPUl9PTkFGVEVSU0NST0xMKVxuXG4gICAgICAgIGlmICgoIWlzUmVzaXppbmdSZWYuY3VycmVudCkgJiYgKCF2aWV3cG9ydERhdGFSZWYuY3VycmVudC5pc1Jlc2l6aW5nKSkge1xuXG4gICAgICAgICAgICBsZXQgY3JhZGxlU3RhdGUgPSBjcmFkbGVzdGF0ZVJlZi5jdXJyZW50XG4gICAgICAgICAgICBpZiAoY3JhZGxlU3RhdGUgPT0gJ3JlYWR5JyB8fCBjcmFkbGVTdGF0ZSA9PSAncmVwb3NpdGlvbmluZycpIHtcblxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZUluZGV4RGF0YVJlZi5jdXJyZW50ID0gZ2V0UmVmZXJlbmNlSW5kZXhEYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb246b3JpZW50YXRpb25SZWYuY3VycmVudCxcbiAgICAgICAgICAgICAgICAgICAgdmlld3BvcnREYXRhOnZpZXdwb3J0RGF0YVJlZi5jdXJyZW50LFxuICAgICAgICAgICAgICAgICAgICBjZWxsU3BlY3NSZWYsXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzY291bnRSZWYsXG4gICAgICAgICAgICAgICAgICAgIGxpc3RzaXplOmxpc3RzaXplUmVmLmN1cnJlbnQsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXBvcnRSZWZlcmVuY2VJbmRleFJlZi5jdXJyZW50ICYmIHJlcG9ydFJlZmVyZW5jZUluZGV4UmVmLmN1cnJlbnQocmVmZXJlbmNlSW5kZXhEYXRhUmVmLmN1cnJlbnQuaW5kZXgpXG5cbiAgICAgICAgICAgICAgICBzYXZlUmVmZXJlbmNlaW5kZXgocmVmZXJlbmNlSW5kZXhEYXRhUmVmLmN1cnJlbnQpXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIWlzQ3JhZGxlSW5WaWV3UmVmLmN1cnJlbnQgJiYgXG4gICAgICAgICAgICAhcGF1c2VPYnNlcnZlcnNSZWYuY3VycmVudCAmJiBcbiAgICAgICAgICAgICFpc1Jlc2l6aW5nUmVmLmN1cnJlbnQgJiZcbiAgICAgICAgICAgICEoY3JhZGxlc3RhdGVSZWYuY3VycmVudCA9PSAncmVzaXplJykgJiZcbiAgICAgICAgICAgICEoY3JhZGxlc3RhdGVSZWYuY3VycmVudCA9PSAncmVwb3NpdGlvbmluZycpICYmIFxuICAgICAgICAgICAgIShjcmFkbGVzdGF0ZVJlZi5jdXJyZW50ID09ICdyZXBvc2l0aW9uJykpIHtcblxuICAgICAgICAgICAgbGV0IHJlY3QgPSB2aWV3cG9ydERhdGFSZWYuY3VycmVudC5lbGVtZW50cmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgICAgIGxldCB7dG9wLCByaWdodCwgYm90dG9tLCBsZWZ0fSA9IHJlY3RcbiAgICAgICAgICAgIGxldCB3aWR0aCA9IHJpZ2h0IC0gbGVmdCwgaGVpZ2h0ID0gYm90dG9tIC0gdG9wXG4gICAgICAgICAgICB2aWV3cG9ydERhdGFSZWYuY3VycmVudC52aWV3cG9ydERpbWVuc2lvbnMgPSB7dG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0fSAvLyB1cGRhdGUgZm9yIHNjcm9sbHRyYWNrZXJcblxuICAgICAgICAgICAgc2F2ZUNyYWRsZVN0YXRlKCdyZXBvc2l0aW9uaW5nJylcblxuICAgICAgICB9XG5cbiAgICB9LFtdKVxuXG4gICAgLy8gdHJpZ2dlciBwaXZvdCBvbiBjaGFuZ2UgaW4gb3JpZW50YXRpb25cbiAgICB1c2VFZmZlY3QoKCk9PiB7XG5cbiAgICAgICAgbGV0IHJvb3RNYXJnaW5cbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgcm9vdE1hcmdpbiA9IGAwcHggJHtydW53YXlsZW5ndGh9cHggMHB4ICR7cnVud2F5bGVuZ3RofXB4YFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm9vdE1hcmdpbiA9IGAke3J1bndheWxlbmd0aH1weCAwcHggJHtydW53YXlsZW5ndGh9cHggMHB4YFxuICAgICAgICB9XG4gICAgICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgICAgICAgcm9vdE1hcmdpbixcbiAgICAgICAgICAgIHRocmVzaG9sZDowXG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3Jvb3RNYXJnaW4nLG9wdGlvbnMpXG4gICAgICAgIGl0ZW1vYnNlcnZlclJlZi5jdXJyZW50ID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgICAgICAgICAgaXRlbW9ic2VydmVyY2FsbGJhY2ssXG4gICAgICAgICAgICB7cm9vdDp2aWV3cG9ydERhdGEuZWxlbWVudHJlZi5jdXJyZW50LCByb290TWFyZ2luLH0gXG4gICAgICAgIClcblxuICAgICAgICBjb250ZW50bGlzdFJlZi5jdXJyZW50ID0gW11cblxuICAgICAgICBpZiAoY3JhZGxlc3RhdGUgIT0gJ3NldHVwJykge1xuICAgICAgICAgICAgcGF1c2VPYnNlcnZlcnNSZWYuY3VycmVudCA9IHRydWVcbiAgICAgICAgICAgIGNhbGxpbmdSZWZlcmVuY2VJbmRleERhdGFSZWYuY3VycmVudCA9IHsuLi5sYXN0UmVmZXJlbmNlSW5kZXhEYXRhUmVmLmN1cnJlbnR9XG5cbiAgICAgICAgICAgIHNhdmVDcmFkbGVTdGF0ZSgncGl2b3QnKVxuICAgICAgICB9XG5cbiAgICB9LFtcbiAgICAgICAgb3JpZW50YXRpb24sXG4gICAgICAgIGxpc3RzaXplLFxuICAgICAgICBjZWxsSGVpZ2h0LFxuICAgICAgICBjZWxsV2lkdGgsXG4gICAgICAgIGdhcCxcbiAgICAgICAgcGFkZGluZyxcbiAgICBdKVxuXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpPT57XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdwcm9jZXNzaW5nIHNjcm9sbHN0YXRlJyxzY3JvbGxzdGF0ZSlcbiAgICAgICAgc3dpdGNoIChzY3JvbGxzdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSAnYXBwbHlkcm9wc3R5bGVzJzp7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0FQUExZSU5HIGRyb3Agc3R5bGVzJylcbiAgICAgICAgICAgICAgICBkaXZsaW5lclN0eWxlUmV2aXNpb25zUmVmLmN1cnJlbnQgPSBkcm9wc3R5bGVzUmVmLmN1cnJlbnRcbiAgICAgICAgICAgICAgICBzYXZlU2Nyb2xsU3RhdGUoJ2FwcGx5ZHJvcGNvbnRlbnQnKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdhcHBseWRyb3Bjb250ZW50Jzp7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0FQUExZSU5HIGRyb3AgY29udGVudCcpXG4gICAgICAgICAgICAgICAgY29udGVudGxpc3RSZWYuY3VycmVudCA9IGRyb3Bjb250ZW50bGlzdFJlZi5jdXJyZW50XG4gICAgICAgICAgICAgICAgc2F2ZVNjcm9sbFN0YXRlKCdhZGRjb250ZW50JylcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnYXBwbHlhZGRzdHlsZXMnOntcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQVBQTFlJTkcgYWRkIHN0eWxlcycpXG4gICAgICAgICAgICAgICAgZGl2bGluZXJTdHlsZVJldmlzaW9uc1JlZi5jdXJyZW50ID0gYWRkc3R5bGVzUmVmLmN1cnJlbnRcbiAgICAgICAgICAgICAgICBzYXZlU2Nyb2xsU3RhdGUoJ2FwcGx5YWRkY29udGVudCcpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2FwcGx5YWRkY29udGVudCc6IHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQVBQTFlJTkcgYWRkIGNvbnRlbnQnKVxuICAgICAgICAgICAgICAgIGNvbnRlbnRsaXN0UmVmLmN1cnJlbnQgPSBhZGRjb250ZW50bGlzdFJlZi5jdXJyZW50XG4gICAgICAgICAgICAgICAgc2F2ZVNjcm9sbFN0YXRlKCdyZWFkeScpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sW3Njcm9sbHN0YXRlXSlcblxuICAgIC8vIGRhdGEgZm9yIHN0YXRlIHByb2Nlc3NpbmdcbiAgICBjb25zdCBjYWxsaW5nQ3JhZGxlU3RhdGUgPSB1c2VSZWYoY3JhZGxlc3RhdGVSZWYuY3VycmVudClcbiAgICBjb25zdCBjYWxsaW5nUmVmZXJlbmNlSW5kZXhEYXRhUmVmID0gdXNlUmVmKHJlZmVyZW5jZUluZGV4RGF0YVJlZi5jdXJyZW50KVxuICAgIGNvbnN0IGxheW91dERhdGFSZWYgPSB1c2VSZWYobnVsbClcbiAgICBjb25zdCBwb3NpdGlvbkRhdGFSZWYgPSB1c2VSZWYobnVsbClcbiAgICBjb25zdCBjb250ZW50RGF0YVJlZiA9IHVzZVJlZihudWxsKVxuXG4gICAgLy8gdGhpcyBpcyB0aGUgY29yZSBzdGF0ZSBlbmdpbmVcbiAgICAvLyB1c2VMYXlvdXQgZm9yIHN1cHByZXNzaW5nIGZsYXNoZXNcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCk9PntcblxuICAgICAgICBzd2l0Y2ggKGNyYWRsZXN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdyZWxvYWQnOlxuICAgICAgICAgICAgICAgIGNvbnRlbnRsaXN0UmVmLmN1cnJlbnQgPSBbXVxuICAgICAgICAgICAgICAgIHNhdmVDcmFkbGVTdGF0ZSgncmVwb3NpdGlvbicpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwb3NpdGlvbic6IHtcblxuICAgICAgICAgICAgICAgIHZpZXdwb3J0RGF0YS5lbGVtZW50cmVmLmN1cnJlbnRbcG9zaXRpb25EYXRhUmVmLmN1cnJlbnQucHJvcGVydHldID1cbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25EYXRhUmVmLmN1cnJlbnQudmFsdWVcblxuICAgICAgICAgICAgICAgIHNhdmVDcmFkbGVTdGF0ZSgnbGF5b3V0JylcblxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdsYXlvdXQnOiB7XG5cbiAgICAgICAgICAgICAgICBkaXZsaW5lclN0eWxlUmV2aXNpb25zUmVmLmN1cnJlbnQgPSBsYXlvdXREYXRhUmVmLmN1cnJlbnRcblxuICAgICAgICAgICAgICAgIHNhdmVDcmFkbGVTdGF0ZSgnY29udGVudCcpXG5cbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnY29udGVudCc6IHtcbiAgICAgICAgICAgICAgICBjb250ZW50bGlzdFJlZi5jdXJyZW50ID0gY29udGVudERhdGFSZWYuY3VycmVudFxuICAgICAgICAgICAgICAgIHNhdmVDcmFkbGVTdGF0ZSgnbm9ybWFsaXplJylcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFtjcmFkbGVzdGF0ZV0pXG5cbiAgICAvLyBzdGFuZGFyZCBwcm9jZXNzaW5nIHN0YWdlc1xuICAgIHVzZUVmZmVjdCgoKT0+IHtcblxuICAgICAgICBzd2l0Y2ggKGNyYWRsZXN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdzZXR1cCc6IFxuICAgICAgICAgICAgY2FzZSAncmVzaXplJzpcbiAgICAgICAgICAgIGNhc2UgJ3Bpdm90JzpcbiAgICAgICAgICAgIGNhc2UgJ3JlcG9zaXRpb24nOlxuXG4gICAgICAgICAgICAgICAgY2FsbGluZ0NyYWRsZVN0YXRlLmN1cnJlbnQgPSBjcmFkbGVzdGF0ZVxuICAgICAgICAgICAgICAgIHNhdmVDcmFkbGVTdGF0ZSgnc2V0dGxlJylcblxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgIGNhc2UgJ3NldHRsZSc6IHtcblxuICAgICAgICAgICAgICAgIHNldENyYWRsZUNvbnRlbnQoY2FsbGluZ0NyYWRsZVN0YXRlLmN1cnJlbnQsIGNhbGxpbmdSZWZlcmVuY2VJbmRleERhdGFSZWYuY3VycmVudClcblxuICAgICAgICAgICAgICAgIHNhdmVDcmFkbGVTdGF0ZSgncG9zaXRpb24nKVxuXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ25vcm1hbGl6ZSc6IHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlZHVuZGFudCBzY3JvbGwgcG9zaXRpb24gdG8gYXZvaWQgYWNjaWRlbnRhbCBwb3NpdGlvbmluZyBhdCB0YWlsIGVuZCBvZiByZXBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmICh2aWV3cG9ydERhdGEuZWxlbWVudHJlZi5jdXJyZW50KSB7IC8vIGFscmVhZHkgdW5tb3VudGVkIGlmIGZhaWxzXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydERhdGEuZWxlbWVudHJlZi5jdXJyZW50W3Bvc2l0aW9uRGF0YVJlZi5jdXJyZW50LnByb3BlcnR5XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25EYXRhUmVmLmN1cnJlbnQudmFsdWVcblxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplQ3JhZGxlQW5jaG9ycyhjcmFkbGVFbGVtZW50UmVmLmN1cnJlbnQsIG9yaWVudGF0aW9uUmVmLmN1cnJlbnQpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RSZWZlcmVuY2VJbmRleERhdGFSZWYuY3VycmVudCA9IHsuLi5yZWZlcmVuY2VJbmRleERhdGFSZWYuY3VycmVudH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcGF1c2VPYnNlcnZlcnNSZWYuY3VycmVudCAgJiYgKHBhdXNlT2JzZXJ2ZXJzUmVmLmN1cnJlbnQgPSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSw2NilcbiAgICAgICAgICAgICAgICBzYXZlQ3JhZGxlU3RhdGUoJ3JlYWR5JylcbiAgICAgICAgICAgICAgICBicmVhayBcbiAgICAgICAgICAgIH0gICAgICAgICAgXG5cbiAgICAgICAgICAgIGNhc2UgJ3JlYWR5JzpcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgfSxbY3JhZGxlc3RhdGVdKVxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIGNhbGxiYWNrcyBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gb24gaG9zdCBkZW1hbmRcbiAgICBjb25zdCBnZXRWaXNpYmxlTGlzdCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcblxuICAgICAgICBsZXQgaXRlbWxpc3QgPSBBcnJheS5mcm9tKGl0ZW1FbGVtZW50c1JlZi5jdXJyZW50KVxuXG4gICAgICAgIHJldHVybiBjYWxjVmlzaWJsZUl0ZW1zKFxuICAgICAgICAgICAgaXRlbWxpc3Qsdmlld3BvcnREYXRhLmVsZW1lbnRyZWYuY3VycmVudCxjcmFkbGVFbGVtZW50UmVmLmN1cnJlbnQsIG9yaWVudGF0aW9uUmVmLmN1cnJlbnRcbiAgICAgICAgKVxuXG4gICAgfSxbXSlcblxuICAgIGNvbnN0IGdldENvbnRlbnRMaXN0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShpdGVtRWxlbWVudHNSZWYuY3VycmVudClcbiAgICB9LFtdKVxuXG4gICAgY29uc3QgcmVsb2FkID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBzYXZlQ3JhZGxlU3RhdGUoJ3JlbG9hZCcpXG4gICAgfSxbXSlcblxuICAgIGNvbnN0IHNjcm9sbFRvSXRlbSA9IHVzZUNhbGxiYWNrKChpbmRleCwgYWxpZ25tZW50ID0gJ25lYXJlc3QnKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZXF1ZXN0ZWQgc2Nyb2xsVG9JdGVtJyxpbmRleCwgYWxpZ25tZW50KVxuICAgICAgICBjYWxsaW5nUmVmZXJlbmNlSW5kZXhEYXRhUmVmLmN1cnJlbnQgPSB7aW5kZXg6MCwgc2Nyb2xsb2Zmc2V0OjB9XG4gICAgICAgIHNhdmVDcmFkbGVTdGF0ZSgncmVwb3NpdGlvbicpXG4gICAgfSxbXSlcblxuICAgIC8vIGNvbnRlbnQgaXRlbSByZWdpc3RyYXRpb25cbiAgICBjb25zdCBnZXRJdGVtRWxlbWVudERhdGEgPSB1c2VDYWxsYmFjaygoaXRlbUVsZW1lbnREYXRhLCByZXBvcnRUeXBlKSA9PiB7IC8vIGNhbmRpZGF0ZSB0byBleHBvcnRcblxuICAgICAgICBjb25zdCBbaW5kZXgsIHNoZWxscmVmXSA9IGl0ZW1FbGVtZW50RGF0YVxuXG4gICAgICAgIGlmIChyZXBvcnRUeXBlID09ICdyZWdpc3RlcicpIHtcblxuICAgICAgICAgICAgaXRlbUVsZW1lbnRzUmVmLmN1cnJlbnQuc2V0KGluZGV4LHNoZWxscmVmKVxuXG4gICAgICAgIH0gZWxzZSBpZiAocmVwb3J0VHlwZSA9PSAndW5yZWdpc3RlcicpIHtcblxuICAgICAgICAgICAgaXRlbUVsZW1lbnRzUmVmLmN1cnJlbnQuZGVsZXRlKGluZGV4KVxuXG4gICAgICAgIH1cblxuICAgIH0sW10pXG5cbiAgICBjb25zdCBjYWxsYmFja3NSZWYgPSB1c2VSZWYoe1xuICAgICAgICBnZXRFbGVtZW50RGF0YTpnZXRJdGVtRWxlbWVudERhdGFcbiAgICB9KVxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIHJlbmRlci4uLiBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgbGV0IGRpdmxpbmVyc3R5bGVzID0gZGl2bGluZXJTdHlsZXNSZWYuY3VycmVudFxuXG4gICAgcmV0dXJuIDw+XG5cbiAgICAgICAgeyBjcmFkbGVzdGF0ZVJlZi5jdXJyZW50ID09ICdyZXBvc2l0aW9uaW5nJ1xuICAgICAgICAgICAgPzxTY3JvbGxUcmFja2VyIFxuICAgICAgICAgICAgICAgIHRvcCA9IHt2aWV3cG9ydERpbWVuc2lvbnMudG9wICsgM30gXG4gICAgICAgICAgICAgICAgbGVmdCA9IHt2aWV3cG9ydERpbWVuc2lvbnMubGVmdCArIDN9IFxuICAgICAgICAgICAgICAgIG9mZnNldCA9IHtyZWZlcmVuY2VJbmRleERhdGFSZWYuY3VycmVudC5pbmRleH0gXG4gICAgICAgICAgICAgICAgbGlzdHNpemUgPSB7bGlzdHNpemV9XG4gICAgICAgICAgICAgICAgc3R5bGVzID0geyBzdHlsZXMgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDpudWxsfVxuXG4gICAgICAgIDxkaXYgXG4gICAgICAgIFxuICAgICAgICAgICAgcmVmID0ge2NyYWRsZUVsZW1lbnRSZWZ9IFxuICAgICAgICAgICAgc3R5bGUgPSB7ZGl2bGluZXJzdHlsZXN9XG4gICAgICAgIFxuICAgICAgICA+XG4gICAgICAgIFxuICAgICAgICAgICAgeyhjcmFkbGVzdGF0ZVJlZi5jdXJyZW50ICE9ICdzZXR1cCcpP2NvbnRlbnRsaXN0UmVmLmN1cnJlbnQ6bnVsbH1cbiAgICAgICAgXG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICA8Lz5cblxufSAvLyBDcmFkbGVcblxuXG5leHBvcnQgZGVmYXVsdCBDcmFkbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){"use strict";eval(" // cradlefunctions.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/******************************************************************************************\n ------------------------------------[ SUPPORTING FUNCTIONS ]------------------------------\n*******************************************************************************************/\n\nvar react_1 = __importDefault(__webpack_require__(0));\n\nvar itemshell_1 = __importDefault(__webpack_require__(8));\n\nexports.calcVisibleItems = function (itemsArray, viewportElement, cradleElement, orientation) {\n  var list = [];\n  var cradleTop = cradleElement.offsetTop,\n      cradleLeft = cradleElement.offsetLeft;\n  var scrollblockTopOffset = -viewportElement.scrollTop,\n      scrollblockLeftOffset = -viewportElement.scrollLeft,\n      viewportHeight = viewportElement.offsetHeight,\n      viewportWidth = viewportElement.offsetWidth,\n      viewportTopOffset = -scrollblockTopOffset,\n      viewportBottomOffset = -scrollblockTopOffset + viewportHeight;\n\n  for (var i = 0; i < itemsArray.length; i++) {\n    var _a = itemsArray[i],\n        index = _a[0],\n        elementRef = _a[1];\n    var element = elementRef.current;\n    var top_1 = element.offsetTop,\n        left = element.offsetLeft,\n        width = element.offsetWidth,\n        height = element.offsetHeight,\n        right = left + width,\n        bottom = top_1 + height;\n    var itemTopOffset = scrollblockTopOffset + cradleTop + top_1,\n        // offset from top of viewport\n    itemBottomOffset = scrollblockTopOffset + cradleTop + bottom,\n        // offset from top of viewport\n    itemLeftOffset = scrollblockLeftOffset + cradleLeft + left,\n        itemRightOffset = scrollblockLeftOffset + cradleLeft + right;\n    var isVisible = false; // default\n\n    var topPortion = void 0,\n        bottomPortion = void 0,\n        leftPortion = void 0,\n        rightPortion = void 0;\n\n    if (itemTopOffset < 0 && itemBottomOffset > 0) {\n      orientation == 'vertical' && (isVisible = true);\n      bottomPortion = itemBottomOffset;\n      topPortion = bottomPortion - height;\n    } else if (itemTopOffset >= 0 && itemBottomOffset < viewportHeight) {\n      orientation == 'vertical' && (isVisible = true);\n      topPortion = height;\n      bottomPortion = 0;\n    } else if (itemTopOffset > 0 && itemTopOffset - viewportHeight < 0) {\n      orientation == 'vertical' && (isVisible = true);\n      topPortion = viewportHeight - itemTopOffset;\n      bottomPortion = topPortion - height;\n    } else {\n      if (orientation == 'vertical') continue;\n    }\n\n    if (itemLeftOffset < 0 && itemRightOffset > 0) {\n      orientation == 'horizontal' && (isVisible = true);\n      rightPortion = itemRightOffset;\n      leftPortion = rightPortion - width;\n    } else if (itemLeftOffset >= 0 && itemRightOffset < viewportWidth) {\n      orientation == 'horizontal' && (isVisible = true);\n      leftPortion = width;\n      rightPortion = 0;\n    } else if (itemLeftOffset > 0 && itemLeftOffset - viewportWidth < 0) {\n      orientation == 'horizontal' && (isVisible = true);\n      leftPortion = viewportWidth - itemLeftOffset;\n      rightPortion = leftPortion - width;\n    } else {\n      if (orientation == 'horizontal') continue;\n    }\n\n    var verticalRatio = topPortion > 0 ? topPortion / height : bottomPortion / height,\n        horizontalRatio = leftPortion > 0 ? leftPortion / width : rightPortion / height;\n    var itemData = {\n      index: index,\n      isVisible: isVisible,\n      top: top_1,\n      right: right,\n      bottom: bottom,\n      left: left,\n      width: width,\n      height: height,\n      itemTopOffset: itemTopOffset,\n      itemBottomOffset: itemBottomOffset,\n      topPortion: topPortion,\n      bottomPortion: bottomPortion,\n      itemLeftOffset: itemLeftOffset,\n      itemRightOffset: itemRightOffset,\n      leftPortion: leftPortion,\n      rightPortion: rightPortion,\n      verticalRatio: verticalRatio,\n      horizontalRatio: horizontalRatio\n    };\n    list.push(itemData);\n  }\n\n  list.sort(function (a, b) {\n    return a.index - b.index;\n  });\n  return list;\n};\n\nexports.getReferenceIndexData = function (_a) {\n  var orientation = _a.orientation,\n      viewportData = _a.viewportData,\n      cellSpecsRef = _a.cellSpecsRef,\n      crosscountRef = _a.crosscountRef,\n      listsize = _a.listsize;\n  var cellSpecs = cellSpecsRef.current;\n  var viewportElement = viewportData.elementref.current;\n  var scrollPos, cellLength;\n\n  if (orientation == 'vertical') {\n    scrollPos = viewportElement.scrollTop;\n    cellLength = cellSpecs.cellHeight + cellSpecs.gap;\n  } else {\n    scrollPos = viewportElement.scrollLeft;\n    cellLength = cellSpecs.cellWidth + cellSpecs.gap;\n  }\n\n  var referencescrolloffset = cellLength - scrollPos % cellLength; // + cellSpecs.padding\n\n  if (referencescrolloffset == cellLength + cellSpecs.padding) referencescrolloffset = 0;\n  var referencerowindex = Math.ceil((scrollPos - cellSpecs.padding) / cellLength);\n  var referenceindex = referencerowindex * crosscountRef.current;\n  var referenceIndexData = {\n    index: Math.min(referenceindex, listsize - 1),\n    scrolloffset: referencescrolloffset\n  };\n  if (referenceIndexData.index == 0) referenceIndexData.scrolloffset = 0; // defensive\n\n  return referenceIndexData;\n}; // evaluate content for requirements\n\n\nexports.getContentListRequirements = function (_a) {\n  // -------------[ calc basic inputs: cellLength, contentCount. ]----------\n  var orientation = _a.orientation,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      viewportheight = _a.viewportheight,\n      viewportwidth = _a.viewportwidth,\n      runwaylength = _a.runwaylength,\n      gap = _a.gap,\n      padding = _a.padding,\n      visibletargetindexoffset = _a.visibletargetindexoffset,\n      targetScrollOffset = _a.targetScrollOffset,\n      crosscount = _a.crosscount,\n      listsize = _a.listsize;\n  var cradleContentLength, cellLength, viewportlength;\n\n  if (orientation == 'vertical') {\n    cellLength = cellHeight + gap;\n    viewportlength = viewportheight;\n  } else {\n    cellLength = cellWidth + gap;\n    viewportlength = viewportwidth;\n  }\n\n  cradleContentLength = viewportlength + runwaylength * 2;\n  var cradlerowcount = Math.ceil(cradleContentLength / cellLength);\n  var contentCount = cradlerowcount * crosscount;\n  if (contentCount > listsize) contentCount = listsize; // -----------------------[ calc leadingitemcount, referenceoffset ]-----------------------\n\n  var cradleleadingrowcount = Math.floor(runwaylength / cellLength);\n  var leadingitemcount = cradleleadingrowcount * crosscount;\n  var targetdiff = visibletargetindexoffset % crosscount;\n  var referenceoffset = visibletargetindexoffset - targetdiff; // part of return message\n\n  leadingitemcount += targetdiff;\n  leadingitemcount = Math.min(leadingitemcount, visibletargetindexoffset); // for list head\n  // -----------------------[ calc indexoffset ]------------------------\n  // leading edge\n\n  var indexoffset = visibletargetindexoffset - leadingitemcount;\n  var diff = indexoffset % crosscount;\n  indexoffset -= diff; // ------------[ adjust indexoffset and contentCount for listsize ]------------\n\n  diff = 0;\n  var shift = 0;\n\n  if (indexoffset + contentCount > listsize) {\n    diff = indexoffset + contentCount - listsize;\n    shift = diff % crosscount;\n  }\n\n  if (diff) {\n    indexoffset -= diff - shift;\n    contentCount -= shift;\n  } // --------------------[ calc css positioning ]-----------------------\n\n\n  var indexrowoffset = Math.floor(indexoffset / crosscount);\n  var cradleoffset = indexrowoffset * cellLength;\n  var targetrowoffset = Math.floor(visibletargetindexoffset / crosscount);\n  var rowscrollblockoffset = targetrowoffset * cellLength;\n  var scrollblockoffset = Math.max(0, rowscrollblockoffset - targetScrollOffset);\n  return {\n    indexoffset: indexoffset,\n    referenceoffset: referenceoffset,\n    contentCount: contentCount,\n    scrollblockoffset: scrollblockoffset,\n    cradleoffset: cradleoffset\n  }; // summarize requirements message\n}; // this makes ui resize less visually jarring\n\n\nexports.normalizeCradleAnchors = function (cradleElement, orientation) {\n  var styles = {};\n  var stylerevisions = {};\n\n  if (orientation == 'vertical') {\n    if (cradleElement.style.top == 'auto') {\n      styles.top = cradleElement.offsetTop + 'px';\n      styles.bottom = 'auto';\n      styles.left = 'auto';\n      styles.right = 'auto';\n    }\n  } else {\n    if (cradleElement.style.left == 'auto') {\n      styles.left = cradleElement.offsetLeft + 'px';\n      styles.right = 'auto';\n      styles.top = 'auto';\n      styles.bottom = 'auto';\n    }\n  }\n\n  for (var style in styles) {\n    cradleElement.style[style] = styles[style];\n  }\n}; // update content\n// adds itemshells at end of contentlist according to headindexcount and tailindescount,\n// or if indexcount values are <0 removes them.\n\n\nexports.getUIContentList = function (props) {\n  var indexoffset = props.indexoffset,\n      headindexcount = props.headindexcount,\n      tailindexcount = props.tailindexcount,\n      orientation = props.orientation,\n      cellHeight = props.cellHeight,\n      cellWidth = props.cellWidth,\n      contentlist = props.localContentList,\n      observer = props.observer,\n      crosscount = props.crosscount,\n      callbacksRef = props.callbacksRef,\n      getItem = props.getItem,\n      listsize = props.listsize,\n      placeholder = props.placeholder;\n\n  var localContentlist = __spreadArrays(contentlist);\n\n  var tailindexoffset = indexoffset + contentlist.length;\n  var returnContentlist;\n  var headContentlist = [];\n\n  if (headindexcount >= 0) {\n    for (var index = indexoffset - headindexcount; index < indexoffset; index++) {\n      headContentlist.push(emitItem({\n        index: index,\n        orientation: orientation,\n        cellHeight: cellHeight,\n        cellWidth: cellWidth,\n        observer: observer,\n        callbacksRef: callbacksRef,\n        getItem: getItem,\n        listsize: listsize,\n        placeholder: placeholder\n      }));\n    }\n  } else {\n    localContentlist.splice(0, -headindexcount);\n  }\n\n  var tailContentlist = [];\n\n  if (tailindexcount >= 0) {\n    for (var index = tailindexoffset; index < tailindexoffset + tailindexcount; index++) {\n      tailContentlist.push(emitItem({\n        index: index,\n        orientation: orientation,\n        cellHeight: cellHeight,\n        cellWidth: cellWidth,\n        observer: observer,\n        callbacksRef: callbacksRef,\n        getItem: getItem,\n        listsize: listsize,\n        placeholder: placeholder\n      }));\n    }\n  } else {\n    localContentlist.splice(tailindexcount, -tailindexcount);\n  }\n\n  returnContentlist = headContentlist.concat(localContentlist, tailContentlist);\n  return returnContentlist;\n};\n\nvar emitItem = function emitItem(_a) {\n  var index = _a.index,\n      orientation = _a.orientation,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      observer = _a.observer,\n      callbacksRef = _a.callbacksRef,\n      getItem = _a.getItem,\n      listsize = _a.listsize,\n      placeholder = _a.placeholder;\n  return react_1[\"default\"].createElement(itemshell_1[\"default\"], {\n    key: index,\n    orientation: orientation,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    index: index,\n    observer: observer,\n    callbacks: callbacksRef,\n    getItem: getItem,\n    listsize: listsize,\n    placeholder: placeholder\n  });\n}; // ========================================================================================\n// ------------------------------------[ styles ]------------------------------------------\n// ========================================================================================\n\n\nexports.setCradleStyles = function (_a) {\n  var orientation = _a.orientation,\n      stylesobject = _a.divlinerStyles,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      crosscount = _a.crosscount,\n      viewportheight = _a.viewportheight,\n      viewportwidth = _a.viewportwidth;\n  var styles = Object.assign({}, stylesobject);\n\n  if (orientation == 'horizontal') {\n    styles.width = 'auto';\n    styles.height = '100%';\n    styles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n    //     sets length of horiz cradle items in one line (row), not multi-row config\n\n    styles.gridTemplateRows = cellHeight ? \"repeat(\" + crosscount + \", minmax(\" + cellHeight + \"px, 1fr))\" : 'auto';\n    styles.gridTemplateColumns = 'none'; // styles.minWidth = viewportwidth + 'px'\n    // styles.minHeight = 0\n  } else if (orientation == 'vertical') {\n    styles.width = '100%';\n    styles.height = 'auto';\n    styles.gridAutoFlow = 'row';\n    styles.gridTemplateRows = 'none';\n    styles.gridTemplateColumns = cellWidth ? \"repeat(auto-fit, minmax(\" + cellWidth + \"px, 1fr))\" : 'auto'; // styles.minWidth = 0\n    // styles.minHeight = viewportheight + 'px'\n  }\n\n  return styles;\n};\n\nexports.setCradleStyleRevisionsForDrop = function (_a) {\n  var cradleElement = _a.cradleElement,\n      parentElement = _a.parentElement,\n      scrollforward = _a.scrollforward,\n      orientation = _a.orientation;\n  var styles = {};\n  var headpos, tailpos; // set styles revisions\n\n  if (orientation == 'vertical') {\n    // console.log('for DROP top, bottom',cradleElement.style.top,cradleElement.style.bottom)\n    var offsetHeight = cradleElement.offsetHeight;\n    var parentHeight = parentElement.offsetHeight;\n    var offsetTop = cradleElement.offsetTop; // let csstop = parseInt(cradleElement.style.top)\n    // let cssbottom = parseInt(cradleElement.style.bottom)\n    // let offsetTop\n    // if (isNaN(csstop)) {\n    //     offsetTop = (parentHeight - cssbottom) - offsetHeight \n    // } else {\n    //     offsetTop = csstop\n    // }\n    // let directoffsetTop = cradleElement.offsetTop\n    // console.log('DROP offsetHeight, parentHeight, csstop, cssbottom, calcoffsetTop, offsetTop',\n    //     offsetHeight, parentHeight, csstop, cssbottom, calcoffsetTop, offsetTop)\n\n    styles.left = 'auto';\n    styles.right = 'auto';\n\n    if (scrollforward) {\n      tailpos = offsetTop + offsetHeight;\n      styles.top = 'auto';\n      styles.bottom = parentHeight - tailpos + 'px';\n    } else {\n      headpos = offsetTop;\n      styles.top = headpos + 'px';\n      styles.bottom = 'auto';\n    }\n  } else {\n    var offsetLeft = cradleElement.offsetLeft;\n    var offsetWidth = cradleElement.offsetWidth;\n    var parentWidth = parentElement.offsetWidth;\n    var cssleft = parseInt(cradleElement.style.left);\n    var cssright = parseInt(cradleElement.style.bottom); // let offsetLeft\n    // if (isNaN(cssleft)) {\n    //     offsetLeft = cssright - parentWidth - offsetWidth\n    // } else {\n    //     offsetLeft = cssleft\n    // }\n\n    styles.top = 'auto';\n    styles.bottom = 'auto';\n\n    if (scrollforward) {\n      tailpos = offsetLeft + offsetWidth;\n      styles.left = 'auto';\n      styles.right = parentWidth - tailpos + 'px';\n    } else {\n      headpos = offsetLeft;\n      styles.left = headpos + 'px';\n      styles.right = 'auto';\n    }\n  }\n\n  return styles;\n};\n\nexports.setCradleStyleRevisionsForAdd = function (_a) {\n  var cradleElement = _a.cradleElement,\n      parentElement = _a.parentElement,\n      scrollforward = _a.scrollforward,\n      orientation = _a.orientation;\n  var styles = {};\n  var headpos, tailpos; // set style revisions\n\n  if (orientation == 'vertical') {\n    // console.log('for ADD top, bottom',cradleElement.style.top,cradleElement.style.bottom)\n    // let offsetTop\n    var offsetHeight = cradleElement.offsetHeight;\n    var parentHeight = parentElement.offsetHeight;\n    var csstop = parseInt(cradleElement.style.top);\n    var cssbottom = parseInt(cradleElement.style.bottom);\n    var offsetTop = cradleElement.offsetTop; // let offsetTop\n    // if (isNaN(csstop)) {\n    //     offsetTop = parentHeight - cssbottom  - offsetHeight\n    // } else {\n    //     offsetTop = csstop\n    // }\n    // console.log('ADD cssbottom, csstop, parentHeight, offsetHeight',\n    //     cssbottom,csstop, cradleElement.style.bottom, cradleElement.style.top, parentHeight, offsetHeight)\n    // let directoffsetTop = cradleElement.offsetTop\n    // console.log('ADD calcoffsetTop, offsetTop',calcoffsetTop,offsetTop)\n\n    styles.left = 'auto';\n    styles.right = 'auto';\n\n    if (scrollforward) {\n      headpos = offsetTop;\n      styles.top = headpos + 'px';\n      styles.bottom = 'auto';\n    } else {\n      // scroll backward\n      tailpos = offsetTop + offsetHeight;\n      styles.top = 'auto';\n      styles.bottom = parentHeight - tailpos + 'px';\n    }\n  } else {\n    var offsetLeft = cradleElement.offsetLeft;\n    var offsetWidth = cradleElement.offsetWidth;\n    var parentWidth = parentElement.offsetWidth;\n    var cssleft = parseInt(cradleElement.style.left);\n    var cssright = parseInt(cradleElement.style.bottom); // let offsetLeft\n    // if (isNaN(cssleft)) {\n    //     offsetLeft = cssright - parentWidth - offsetWidth\n    // } else {\n    //     offsetLeft = cssleft\n    // }\n\n    styles.top = 'auto';\n    styles.bottom = 'auto';\n\n    if (scrollforward) {\n      headpos = offsetLeft;\n      styles.left = headpos + 'px';\n      styles.right = 'auto';\n    } else {\n      // scroll backward\n      tailpos = offsetLeft + offsetWidth;\n      styles.left = 'auto';\n      styles.right = parentWidth - tailpos + 'px';\n    }\n  }\n\n  return styles;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")},function(module,exports,__webpack_require__){"use strict";eval(" // itemframe.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(0));\n\nvar requestidlecallback_1 = __webpack_require__(9);\n\nvar react_is_mounted_hook_1 = __importDefault(__webpack_require__(2));\n\nvar placeholder_1 = __importDefault(__webpack_require__(11));\n\nvar ItemShell = function ItemShell(props) {\n  var orientation = props.orientation,\n      cellHeight = props.cellHeight,\n      cellWidth = props.cellWidth,\n      index = props.index,\n      observer = props.observer,\n      callbacks = props.callbacks,\n      getItem = props.getItem,\n      listsize = props.listsize,\n      placeholder = props.placeholder;\n\n  var _a = react_1.useState(null),\n      content = _a[0],\n      saveContent = _a[1];\n\n  var _b = react_1.useState(null),\n      error = _b[0],\n      saveError = _b[1];\n\n  var _c = react_1.useState({\n    overflow: 'hidden'\n  }),\n      styles = _c[0],\n      saveStyles = _c[1];\n\n  var shellRef = react_1.useRef(null);\n  var isMounted = react_is_mounted_hook_1[\"default\"](); // initialize\n\n  react_1.useEffect(function () {\n    var itemrequest = {\n      current: null\n    };\n    var requestidlecallback = window['requestIdleCallback'] ? window['requestIdleCallback'] : requestidlecallback_1.requestIdleCallback;\n    var cancelidlecallback = window['cancelIdleCallback'] ? window['cancelIdleCallback'] : requestidlecallback_1.cancelIdleCallback;\n\n    if (getItem) {\n      itemrequest = requestidlecallback(function () {\n        var value = getItem(index);\n\n        if (value && value.then) {\n          value.then(function (value) {\n            if (isMounted()) {\n              saveContent(value);\n              saveError(null);\n            }\n          })[\"catch\"](function (e) {\n            saveContent(null);\n            saveError(e);\n          });\n        } else {\n          if (isMounted()) {\n            if (value) {\n              saveContent(value);\n              saveError(null);\n            } else {\n              saveError(true);\n              saveContent(null);\n            }\n          }\n        }\n      });\n    }\n\n    return function () {\n      var requesthandle = itemrequest.current;\n      cancelidlecallback(requesthandle);\n    };\n  }, []); // initialize\n\n  react_1.useEffect(function () {\n    var localcalls = callbacks.current;\n    localcalls.getElementData && localcalls.getElementData(getElementData(), 'register');\n    return function () {\n      localcalls.getElementData && localcalls.getElementData(getElementData(), 'unregister');\n    };\n  }, [callbacks]);\n  react_1.useEffect(function () {\n    observer.observe(shellRef.current);\n    return function () {\n      observer.unobserve(shellRef.current);\n    };\n  }, [observer]);\n  react_1.useEffect(function () {\n    var newStyles = getShellStyles(orientation, cellHeight, cellWidth, styles);\n\n    if (isMounted()) {\n      saveStyles(newStyles);\n    }\n  }, [orientation, cellHeight, cellWidth]); // cradle ondemand callback parameter value\n\n  var getElementData = react_1.useCallback(function () {\n    return [index, shellRef];\n  }, []); // placeholder handling\n\n  var customholderRef = react_1.useRef(placeholder ? react_1[\"default\"].createElement(placeholder, {\n    index: index,\n    listsize: listsize\n  }) : null);\n  return react_1[\"default\"].createElement(\"div\", {\n    ref: shellRef,\n    \"data-index\": index,\n    style: styles\n  }, styles.width ? content ? content : customholderRef.current ? customholderRef.current : react_1[\"default\"].createElement(placeholder_1[\"default\"], {\n    index: index,\n    listsize: listsize,\n    error: error\n  }) : null);\n}; // ItemShell\n\n\nvar getShellStyles = function getShellStyles(orientation, cellHeight, cellWidth, styles) {\n  var styleset = Object.assign({}, styles);\n\n  if (orientation == 'horizontal') {\n    styleset.width = cellWidth ? cellWidth + 'px' : 'auto';\n    styleset.height = 'auto';\n  } else if (orientation === 'vertical') {\n    styleset.width = 'auto';\n    styleset.height = cellHeight ? cellHeight + 'px' : 'auto';\n  }\n\n  return styleset;\n};\n\nexports[\"default\"] = ItemShell;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}(function(){\n\t'use strict';\n\tvar scheduleStart, throttleDelay, lazytimer, lazyraf;\n\tvar root = typeof window != 'undefined' ?\n\t\twindow :\n\t\ttypeof global != undefined ?\n\t\t\tglobal :\n\t\t\tthis || {};\n\tvar requestAnimationFrame = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;\n\tvar cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;\n\tvar tasks = [];\n\tvar runAttempts = 0;\n\tvar isRunning = false;\n\tvar remainingTime = 7;\n\tvar minThrottle = 35;\n\tvar throttle = 125;\n\tvar index = 0;\n\tvar taskStart = 0;\n\tvar tasklength = 0;\n\tvar IdleDeadline = {\n\t\tget didTimeout(){\n\t\t\treturn false;\n\t\t},\n\t\ttimeRemaining: function(){\n\t\t\tvar timeRemaining = remainingTime - (Date.now() - taskStart);\n\t\t\treturn timeRemaining < 0 ? 0 : timeRemaining;\n\t\t},\n\t};\n\tvar setInactive = debounce(function(){\n\t\tremainingTime = 22;\n\t\tthrottle = 66;\n\t\tminThrottle = 0;\n\t});\n\n\tfunction debounce(fn){\n\t\tvar id, timestamp;\n\t\tvar wait = 99;\n\t\tvar check = function(){\n\t\t\tvar last = (Date.now()) - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tid = setTimeout(check, wait - last);\n\t\t\t} else {\n\t\t\t\tid = null;\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\t\treturn function(){\n\t\t\ttimestamp = Date.now();\n\t\t\tif(!id){\n\t\t\t\tid = setTimeout(check, wait);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction abortRunning(){\n\t\tif(isRunning){\n\t\t\tif(lazyraf){\n\t\t\t\tcancelRequestAnimationFrame(lazyraf);\n\t\t\t}\n\t\t\tif(lazytimer){\n\t\t\t\tclearTimeout(lazytimer);\n\t\t\t}\n\t\t\tisRunning = false;\n\t\t}\n\t}\n\n\tfunction onInputorMutation(){\n\t\tif(throttle != 125){\n\t\t\tremainingTime = 7;\n\t\t\tthrottle = 125;\n\t\t\tminThrottle = 35;\n\n\t\t\tif(isRunning) {\n\t\t\t\tabortRunning();\n\t\t\t\tscheduleLazy();\n\t\t\t}\n\t\t}\n\t\tsetInactive();\n\t}\n\n\tfunction scheduleAfterRaf() {\n\t\tlazyraf = null;\n\t\tlazytimer = setTimeout(runTasks, 0);\n\t}\n\n\tfunction scheduleRaf(){\n\t\tlazytimer = null;\n\t\trequestAnimationFrame(scheduleAfterRaf);\n\t}\n\n\tfunction scheduleLazy(){\n\n\t\tif(isRunning){return;}\n\t\tthrottleDelay = throttle - (Date.now() - taskStart);\n\n\t\tscheduleStart = Date.now();\n\n\t\tisRunning = true;\n\n\t\tif(minThrottle && throttleDelay < minThrottle){\n\t\t\tthrottleDelay = minThrottle;\n\t\t}\n\n\t\tif(throttleDelay > 9){\n\t\t\tlazytimer = setTimeout(scheduleRaf, throttleDelay);\n\t\t} else {\n\t\t\tthrottleDelay = 0;\n\t\t\tscheduleRaf();\n\t\t}\n\t}\n\n\tfunction runTasks(){\n\t\tvar task, i, len;\n\t\tvar timeThreshold = remainingTime > 9 ?\n\t\t\t9 :\n\t\t\t1\n\t\t;\n\n\t\ttaskStart = Date.now();\n\t\tisRunning = false;\n\n\t\tlazytimer = null;\n\n\t\tif(runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart){\n\t\t\tfor(i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++){\n\t\t\t\ttask = tasks.shift();\n\t\t\t\ttasklength++;\n\t\t\t\tif(task){\n\t\t\t\t\ttask(IdleDeadline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(tasks.length){\n\t\t\tscheduleLazy();\n\t\t} else {\n\t\t\trunAttempts = 0;\n\t\t}\n\t}\n\n\tfunction requestIdleCallbackShim(task){\n\t\tindex++;\n\t\ttasks.push(task);\n\t\tscheduleLazy();\n\t\treturn index;\n\t}\n\n\tfunction cancelIdleCallbackShim(id){\n\t\tvar index = id - 1 - tasklength;\n\t\tif(tasks[index]){\n\t\t\ttasks[index] = null;\n\t\t}\n\t}\n\n\tif(!root.requestIdleCallback || !root.cancelIdleCallback){\n\t\troot.requestIdleCallback = requestIdleCallbackShim;\n\t\troot.cancelIdleCallback = cancelIdleCallbackShim;\n\n\t\tif(root.document && document.addEventListener){\n\t\t\troot.addEventListener('scroll', onInputorMutation, true);\n\t\t\troot.addEventListener('resize', onInputorMutation);\n\n\t\t\tdocument.addEventListener('focus', onInputorMutation, true);\n\t\t\tdocument.addEventListener('mouseover', onInputorMutation, true);\n\t\t\t['click', 'keypress', 'touchstart', 'mousedown'].forEach(function(name){\n\t\t\t\tdocument.addEventListener(name, onInputorMutation, {capture: true, passive: true});\n\t\t\t});\n\n\t\t\tif(root.MutationObserver){\n\t\t\t\tnew MutationObserver( onInputorMutation ).observe( document.documentElement, {childList: true, subtree: true, attributes: true} );\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\troot.requestIdleCallback(function(){}, {timeout: 0});\n\t\t} catch(e){\n\t\t\t(function(rIC){\n\t\t\t\tvar timeRemainingProto, timeRemaining;\n\t\t\t\troot.requestIdleCallback = function(fn, timeout){\n\t\t\t\t\tif(timeout && typeof timeout.timeout == 'number'){\n\t\t\t\t\t\treturn rIC(fn, timeout.timeout);\n\t\t\t\t\t}\n\t\t\t\t\treturn rIC(fn);\n\t\t\t\t};\n\t\t\t\tif(root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)){\n\t\t\t\t\ttimeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, 'timeRemaining');\n\t\t\t\t\tif(!timeRemaining || !timeRemaining.configurable || !timeRemaining.get){return;}\n\t\t\t\t\tObject.defineProperty(timeRemainingProto, 'timeRemaining', {\n\t\t\t\t\t\tvalue:  function(){\n\t\t\t\t\t\t\treturn timeRemaining.get.call(this);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(root.requestIdleCallback)\n\t\t}\n\t}\n\n\treturn {\n\t\trequest: requestIdleCallbackShim,\n\t\tcancel: cancelIdleCallbackShim,\n\t};\n}));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(10)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0aWRsZWNhbGxiYWNrL2luZGV4LmpzPzg3MTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxLQUFLLElBQTBDO0FBQy9DLEVBQUUsaUNBQU8sRUFBRSxvQ0FBRSxPQUFPO0FBQUE7QUFBQTtBQUFBLG9HQUFDO0FBQ3JCLEVBQUUsTUFBTSxFQUlOO0FBQ0YsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGdCQUFnQjtBQUNoQjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGlDQUFpQyx5REFBeUQ7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCw2QkFBNkI7QUFDckYsSUFBSTs7QUFFSjtBQUNBLGtGQUFrRixpREFBaUQ7QUFDbkk7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLHdDQUF3QyxHQUFHLFdBQVc7QUFDdEQsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFO0FBQzdFO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuaWRsZUNhbGxiYWNrU2hpbSA9IGZhY3RvcnkoKTtcblx0fVxufShmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdHZhciBzY2hlZHVsZVN0YXJ0LCB0aHJvdHRsZURlbGF5LCBsYXp5dGltZXIsIGxhenlyYWY7XG5cdHZhciByb290ID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/XG5cdFx0d2luZG93IDpcblx0XHR0eXBlb2YgZ2xvYmFsICE9IHVuZGVmaW5lZCA/XG5cdFx0XHRnbG9iYWwgOlxuXHRcdFx0dGhpcyB8fCB7fTtcblx0dmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHJvb3QuY2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lICYmIHJvb3QucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHNldFRpbWVvdXQ7XG5cdHZhciBjYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByb290LmNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBjbGVhclRpbWVvdXQ7XG5cdHZhciB0YXNrcyA9IFtdO1xuXHR2YXIgcnVuQXR0ZW1wdHMgPSAwO1xuXHR2YXIgaXNSdW5uaW5nID0gZmFsc2U7XG5cdHZhciByZW1haW5pbmdUaW1lID0gNztcblx0dmFyIG1pblRocm90dGxlID0gMzU7XG5cdHZhciB0aHJvdHRsZSA9IDEyNTtcblx0dmFyIGluZGV4ID0gMDtcblx0dmFyIHRhc2tTdGFydCA9IDA7XG5cdHZhciB0YXNrbGVuZ3RoID0gMDtcblx0dmFyIElkbGVEZWFkbGluZSA9IHtcblx0XHRnZXQgZGlkVGltZW91dCgpe1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dGltZVJlbWFpbmluZzogZnVuY3Rpb24oKXtcblx0XHRcdHZhciB0aW1lUmVtYWluaW5nID0gcmVtYWluaW5nVGltZSAtIChEYXRlLm5vdygpIC0gdGFza1N0YXJ0KTtcblx0XHRcdHJldHVybiB0aW1lUmVtYWluaW5nIDwgMCA/IDAgOiB0aW1lUmVtYWluaW5nO1xuXHRcdH0sXG5cdH07XG5cdHZhciBzZXRJbmFjdGl2ZSA9IGRlYm91bmNlKGZ1bmN0aW9uKCl7XG5cdFx0cmVtYWluaW5nVGltZSA9IDIyO1xuXHRcdHRocm90dGxlID0gNjY7XG5cdFx0bWluVGhyb3R0bGUgPSAwO1xuXHR9KTtcblxuXHRmdW5jdGlvbiBkZWJvdW5jZShmbil7XG5cdFx0dmFyIGlkLCB0aW1lc3RhbXA7XG5cdFx0dmFyIHdhaXQgPSA5OTtcblx0XHR2YXIgY2hlY2sgPSBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIGxhc3QgPSAoRGF0ZS5ub3coKSkgLSB0aW1lc3RhbXA7XG5cblx0XHRcdGlmIChsYXN0IDwgd2FpdCkge1xuXHRcdFx0XHRpZCA9IHNldFRpbWVvdXQoY2hlY2ssIHdhaXQgLSBsYXN0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlkID0gbnVsbDtcblx0XHRcdFx0Zm4oKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdHJldHVybiBmdW5jdGlvbigpe1xuXHRcdFx0dGltZXN0YW1wID0gRGF0ZS5ub3coKTtcblx0XHRcdGlmKCFpZCl7XG5cdFx0XHRcdGlkID0gc2V0VGltZW91dChjaGVjaywgd2FpdCk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFib3J0UnVubmluZygpe1xuXHRcdGlmKGlzUnVubmluZyl7XG5cdFx0XHRpZihsYXp5cmFmKXtcblx0XHRcdFx0Y2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxhenlyYWYpO1xuXHRcdFx0fVxuXHRcdFx0aWYobGF6eXRpbWVyKXtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KGxhenl0aW1lcik7XG5cdFx0XHR9XG5cdFx0XHRpc1J1bm5pbmcgPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBvbklucHV0b3JNdXRhdGlvbigpe1xuXHRcdGlmKHRocm90dGxlICE9IDEyNSl7XG5cdFx0XHRyZW1haW5pbmdUaW1lID0gNztcblx0XHRcdHRocm90dGxlID0gMTI1O1xuXHRcdFx0bWluVGhyb3R0bGUgPSAzNTtcblxuXHRcdFx0aWYoaXNSdW5uaW5nKSB7XG5cdFx0XHRcdGFib3J0UnVubmluZygpO1xuXHRcdFx0XHRzY2hlZHVsZUxhenkoKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0c2V0SW5hY3RpdmUoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNjaGVkdWxlQWZ0ZXJSYWYoKSB7XG5cdFx0bGF6eXJhZiA9IG51bGw7XG5cdFx0bGF6eXRpbWVyID0gc2V0VGltZW91dChydW5UYXNrcywgMCk7XG5cdH1cblxuXHRmdW5jdGlvbiBzY2hlZHVsZVJhZigpe1xuXHRcdGxhenl0aW1lciA9IG51bGw7XG5cdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKHNjaGVkdWxlQWZ0ZXJSYWYpO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2NoZWR1bGVMYXp5KCl7XG5cblx0XHRpZihpc1J1bm5pbmcpe3JldHVybjt9XG5cdFx0dGhyb3R0bGVEZWxheSA9IHRocm90dGxlIC0gKERhdGUubm93KCkgLSB0YXNrU3RhcnQpO1xuXG5cdFx0c2NoZWR1bGVTdGFydCA9IERhdGUubm93KCk7XG5cblx0XHRpc1J1bm5pbmcgPSB0cnVlO1xuXG5cdFx0aWYobWluVGhyb3R0bGUgJiYgdGhyb3R0bGVEZWxheSA8IG1pblRocm90dGxlKXtcblx0XHRcdHRocm90dGxlRGVsYXkgPSBtaW5UaHJvdHRsZTtcblx0XHR9XG5cblx0XHRpZih0aHJvdHRsZURlbGF5ID4gOSl7XG5cdFx0XHRsYXp5dGltZXIgPSBzZXRUaW1lb3V0KHNjaGVkdWxlUmFmLCB0aHJvdHRsZURlbGF5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3R0bGVEZWxheSA9IDA7XG5cdFx0XHRzY2hlZHVsZVJhZigpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHJ1blRhc2tzKCl7XG5cdFx0dmFyIHRhc2ssIGksIGxlbjtcblx0XHR2YXIgdGltZVRocmVzaG9sZCA9IHJlbWFpbmluZ1RpbWUgPiA5ID9cblx0XHRcdDkgOlxuXHRcdFx0MVxuXHRcdDtcblxuXHRcdHRhc2tTdGFydCA9IERhdGUubm93KCk7XG5cdFx0aXNSdW5uaW5nID0gZmFsc2U7XG5cblx0XHRsYXp5dGltZXIgPSBudWxsO1xuXG5cdFx0aWYocnVuQXR0ZW1wdHMgPiAyIHx8IHRhc2tTdGFydCAtIHRocm90dGxlRGVsYXkgLSA1MCA8IHNjaGVkdWxlU3RhcnQpe1xuXHRcdFx0Zm9yKGkgPSAwLCBsZW4gPSB0YXNrcy5sZW5ndGg7IGkgPCBsZW4gJiYgSWRsZURlYWRsaW5lLnRpbWVSZW1haW5pbmcoKSA+IHRpbWVUaHJlc2hvbGQ7IGkrKyl7XG5cdFx0XHRcdHRhc2sgPSB0YXNrcy5zaGlmdCgpO1xuXHRcdFx0XHR0YXNrbGVuZ3RoKys7XG5cdFx0XHRcdGlmKHRhc2spe1xuXHRcdFx0XHRcdHRhc2soSWRsZURlYWRsaW5lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKHRhc2tzLmxlbmd0aCl7XG5cdFx0XHRzY2hlZHVsZUxhenkoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cnVuQXR0ZW1wdHMgPSAwO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHJlcXVlc3RJZGxlQ2FsbGJhY2tTaGltKHRhc2spe1xuXHRcdGluZGV4Kys7XG5cdFx0dGFza3MucHVzaCh0YXNrKTtcblx0XHRzY2hlZHVsZUxhenkoKTtcblx0XHRyZXR1cm4gaW5kZXg7XG5cdH1cblxuXHRmdW5jdGlvbiBjYW5jZWxJZGxlQ2FsbGJhY2tTaGltKGlkKXtcblx0XHR2YXIgaW5kZXggPSBpZCAtIDEgLSB0YXNrbGVuZ3RoO1xuXHRcdGlmKHRhc2tzW2luZGV4XSl7XG5cdFx0XHR0YXNrc1tpbmRleF0gPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdGlmKCFyb290LnJlcXVlc3RJZGxlQ2FsbGJhY2sgfHwgIXJvb3QuY2FuY2VsSWRsZUNhbGxiYWNrKXtcblx0XHRyb290LnJlcXVlc3RJZGxlQ2FsbGJhY2sgPSByZXF1ZXN0SWRsZUNhbGxiYWNrU2hpbTtcblx0XHRyb290LmNhbmNlbElkbGVDYWxsYmFjayA9IGNhbmNlbElkbGVDYWxsYmFja1NoaW07XG5cblx0XHRpZihyb290LmRvY3VtZW50ICYmIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpe1xuXHRcdFx0cm9vdC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvbklucHV0b3JNdXRhdGlvbiwgdHJ1ZSk7XG5cdFx0XHRyb290LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uSW5wdXRvck11dGF0aW9uKTtcblxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBvbklucHV0b3JNdXRhdGlvbiwgdHJ1ZSk7XG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBvbklucHV0b3JNdXRhdGlvbiwgdHJ1ZSk7XG5cdFx0XHRbJ2NsaWNrJywgJ2tleXByZXNzJywgJ3RvdWNoc3RhcnQnLCAnbW91c2Vkb3duJ10uZm9yRWFjaChmdW5jdGlvbihuYW1lKXtcblx0XHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBvbklucHV0b3JNdXRhdGlvbiwge2NhcHR1cmU6IHRydWUsIHBhc3NpdmU6IHRydWV9KTtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZihyb290Lk11dGF0aW9uT2JzZXJ2ZXIpe1xuXHRcdFx0XHRuZXcgTXV0YXRpb25PYnNlcnZlciggb25JbnB1dG9yTXV0YXRpb24gKS5vYnNlcnZlKCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUsIGF0dHJpYnV0ZXM6IHRydWV9ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHRyeXtcblx0XHRcdHJvb3QucmVxdWVzdElkbGVDYWxsYmFjayhmdW5jdGlvbigpe30sIHt0aW1lb3V0OiAwfSk7XG5cdFx0fSBjYXRjaChlKXtcblx0XHRcdChmdW5jdGlvbihySUMpe1xuXHRcdFx0XHR2YXIgdGltZVJlbWFpbmluZ1Byb3RvLCB0aW1lUmVtYWluaW5nO1xuXHRcdFx0XHRyb290LnJlcXVlc3RJZGxlQ2FsbGJhY2sgPSBmdW5jdGlvbihmbiwgdGltZW91dCl7XG5cdFx0XHRcdFx0aWYodGltZW91dCAmJiB0eXBlb2YgdGltZW91dC50aW1lb3V0ID09ICdudW1iZXInKXtcblx0XHRcdFx0XHRcdHJldHVybiBySUMoZm4sIHRpbWVvdXQudGltZW91dCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBySUMoZm4pO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHRpZihyb290LklkbGVDYWxsYmFja0RlYWRsaW5lICYmICh0aW1lUmVtYWluaW5nUHJvdG8gPSBJZGxlQ2FsbGJhY2tEZWFkbGluZS5wcm90b3R5cGUpKXtcblx0XHRcdFx0XHR0aW1lUmVtYWluaW5nID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aW1lUmVtYWluaW5nUHJvdG8sICd0aW1lUmVtYWluaW5nJyk7XG5cdFx0XHRcdFx0aWYoIXRpbWVSZW1haW5pbmcgfHwgIXRpbWVSZW1haW5pbmcuY29uZmlndXJhYmxlIHx8ICF0aW1lUmVtYWluaW5nLmdldCl7cmV0dXJuO31cblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGltZVJlbWFpbmluZ1Byb3RvLCAndGltZVJlbWFpbmluZycsIHtcblx0XHRcdFx0XHRcdHZhbHVlOiAgZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRpbWVSZW1haW5pbmcuZ2V0LmNhbGwodGhpcyk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSkocm9vdC5yZXF1ZXN0SWRsZUNhbGxiYWNrKVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0cmVxdWVzdDogcmVxdWVzdElkbGVDYWxsYmFja1NoaW0sXG5cdFx0Y2FuY2VsOiBjYW5jZWxJZGxlQ2FsbGJhY2tTaGltLFxuXHR9O1xufSkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){"use strict";eval(" // placeholder.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(0));\n\nvar Placeholder = function Placeholder(_a) {\n  var index = _a.index,\n      listsize = _a.listsize,\n      error = _a.error;\n  var stylesRef = react_1.useRef({\n    position: 'relative',\n    boxSizing: 'border-box',\n    backgroundColor: 'cyan',\n    border: '2px solid black',\n    height: '100%',\n    width: '100%'\n  });\n  var itemStylesRef = react_1.useRef({\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: '3px',\n    opacity: .5,\n    borderRadius: '8px',\n    backgroundColor: 'white',\n    margin: '3px',\n    fontSize: 'smaller'\n  });\n  return react_1[\"default\"].createElement(\"div\", {\n    style: stylesRef.current\n  }, !error ? react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, index + 1, \"/\", listsize) : react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, \"item is not available at this time\"));\n};\n\nexports[\"default\"] = Placeholder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL3NyYy9wbGFjZWhvbGRlci50c3g/MTEzMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUEsSUFBTSxXQUFXLEdBQUcsU0FBZCxXQUFjLENBQUMsRUFBRCxFQUF5QjtNQUF2QixnQjtNQUFPLHNCO01BQVUsZ0I7QUFFbkMsTUFBTSxTQUFTLEdBQUcsZUFBTztBQUNyQixZQUFRLEVBQUMsVUFEWTtBQUVyQixhQUFTLEVBQUMsWUFGVztBQUdyQixtQkFBZSxFQUFDLE1BSEs7QUFJckIsVUFBTSxFQUFDLGlCQUpjO0FBS3JCLFVBQU0sRUFBQyxNQUxjO0FBTXJCLFNBQUssRUFBQztBQU5lLEdBQVAsQ0FBbEI7QUFRQSxNQUFNLGFBQWEsR0FBRyxlQUNsQjtBQUNJLFlBQVEsRUFBQyxVQURiO0FBRUksT0FBRyxFQUFDLENBRlI7QUFHSSxRQUFJLEVBQUMsQ0FIVDtBQUlJLFdBQU8sRUFBQyxLQUpaO0FBS0ksV0FBTyxFQUFDLEVBTFo7QUFNSSxnQkFBWSxFQUFDLEtBTmpCO0FBT0ksbUJBQWUsRUFBQyxPQVBwQjtBQVFJLFVBQU0sRUFBQyxLQVJYO0FBU0ksWUFBUSxFQUFDO0FBVGIsR0FEa0IsQ0FBdEI7QUFjQSxTQUFPO0FBQUssU0FBSyxFQUFJLFNBQVMsQ0FBQztBQUF4QixLQUNELENBQUMsS0FBRCxHQUNFO0FBQUssU0FBSyxFQUFJLGFBQWEsQ0FBQztBQUE1QixLQUFzQyxLQUFLLEdBQUcsQ0FBOUMsRSxHQUFBLEVBQWtELFFBQWxELENBREYsR0FFRTtBQUFLLFNBQUssRUFBSSxhQUFhLENBQUM7QUFBNUIsS0FBbUMsb0NBQW5DLENBSEQsQ0FBUDtBQU9ILENBL0JEOztBQWlDQSxxQkFBZSxXQUFmIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcGxhY2Vob2xkZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMjAgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuaW1wb3J0IFJlYWN0LCB7dXNlUmVmLCB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuXG5jb25zdCBQbGFjZWhvbGRlciA9ICh7aW5kZXgsIGxpc3RzaXplLCBlcnJvcn0pID0+IHtcblxuICAgIGNvbnN0IHN0eWxlc1JlZiA9IHVzZVJlZih7XG4gICAgICAgIHBvc2l0aW9uOidyZWxhdGl2ZScsXG4gICAgICAgIGJveFNpemluZzonYm9yZGVyLWJveCcsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjonY3lhbicsXG4gICAgICAgIGJvcmRlcjonMnB4IHNvbGlkIGJsYWNrJyxcbiAgICAgICAgaGVpZ2h0OicxMDAlJyxcbiAgICAgICAgd2lkdGg6JzEwMCUnXG4gICAgfSBhcyBSZWFjdC5DU1NQcm9wZXJ0aWVzKVxuICAgIGNvbnN0IGl0ZW1TdHlsZXNSZWYgPSB1c2VSZWYoXG4gICAgICAgIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOidhYnNvbHV0ZScsXG4gICAgICAgICAgICB0b3A6MCxcbiAgICAgICAgICAgIGxlZnQ6MCxcbiAgICAgICAgICAgIHBhZGRpbmc6JzNweCcsXG4gICAgICAgICAgICBvcGFjaXR5Oi41LFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOic4cHgnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOid3aGl0ZScsIFxuICAgICAgICAgICAgbWFyZ2luOiczcHgnLFxuICAgICAgICAgICAgZm9udFNpemU6J3NtYWxsZXInLFxuICAgICAgICB9IGFzIFJlYWN0LkNTU1Byb3BlcnRpZXNcbiAgICApXG5cbiAgICByZXR1cm4gPGRpdiBzdHlsZSA9IHtzdHlsZXNSZWYuY3VycmVudH0+XG4gICAgICAgIHsgIWVycm9yP1xuICAgICAgICAgICAgPGRpdiBzdHlsZSA9IHtpdGVtU3R5bGVzUmVmLmN1cnJlbnR9PntpbmRleCArIDF9L3tsaXN0c2l6ZX08L2Rpdj46XG4gICAgICAgICAgICA8ZGl2IHN0eWxlID0ge2l0ZW1TdHlsZXNSZWYuY3VycmVudH0+aXRlbSBpcyBub3QgYXZhaWxhYmxlIGF0IHRoaXMgdGltZTwvZGl2PlxuICAgICAgICB9XG4gICAgICAgIFxuICAgIDwvZGl2PlxufVxuXG5leHBvcnQgZGVmYXVsdCBQbGFjZWhvbGRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n")},function(module,exports,__webpack_require__){"use strict";eval(" // scrolltracker.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(0));\n\nvar ScrollTracker = function ScrollTracker(_a) {\n  var top = _a.top,\n      left = _a.left,\n      offset = _a.offset,\n      listsize = _a.listsize,\n      styles = _a.styles;\n  var trackdata = offset + 1 + \"/\" + listsize;\n  var styleRef = react_1.useRef(Object.assign({\n    top: top + 'px',\n    left: left + 'px',\n    position: 'fixed',\n    zIndex: 3,\n    backgroundColor: 'white',\n    border: '1px solid gray',\n    borderRadius: '10px',\n    fontSize: 'smaller',\n    padding: '3px'\n  }, styles === null || styles === void 0 ? void 0 : styles.scrolltracker));\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-name\": 'scrolltracker',\n    style: styleRef.current\n  }, trackdata);\n};\n\nexports[\"default\"] = ScrollTracker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL3NyYy9zY3JvbGx0cmFja2VyLnRzeD9mZjgxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQSxJQUFNLGFBQWEsR0FBRyxTQUFoQixhQUFnQixDQUFDLEVBQUQsRUFBd0M7TUFBckMsWTtNQUFLLGM7TUFBTSxrQjtNQUFRLHNCO01BQVUsa0I7QUFFbEQsTUFBSSxTQUFTLEdBQU0sTUFBTSxHQUFHLENBQVQsR0FBVSxHQUFWLEdBQWMsUUFBakM7QUFFQSxNQUFJLFFBQVEsR0FBRyxlQUFPLE1BQU0sQ0FBQyxNQUFQLENBQWM7QUFDaEMsT0FBRyxFQUFFLEdBQUcsR0FBRyxJQURxQjtBQUVoQyxRQUFJLEVBQUUsSUFBSSxHQUFHLElBRm1CO0FBR2hDLFlBQVEsRUFBQyxPQUh1QjtBQUloQyxVQUFNLEVBQUMsQ0FKeUI7QUFLaEMsbUJBQWUsRUFBQyxPQUxnQjtBQU1oQyxVQUFNLEVBQUUsZ0JBTndCO0FBT2hDLGdCQUFZLEVBQUMsTUFQbUI7QUFRaEMsWUFBUSxFQUFDLFNBUnVCO0FBU2hDLFdBQU8sRUFBQztBQVR3QixHQUFkLEVBVUcsTUFBTSxTQUFOLFVBQU0sV0FBTixHQUFNLE1BQU4sU0FBTSxDQUFFLGFBVlgsQ0FBUCxDQUFmO0FBWUEsU0FBTztBQUFBLGlCQUFpQixlQUFqQjtBQUFpQyxTQUFLLEVBQUksUUFBUSxDQUFDO0FBQW5ELEtBQThELFNBQTlELENBQVA7QUFDSCxDQWpCRDs7QUFtQkEscUJBQWUsYUFBZiIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNjcm9sbHRyYWNrZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMjAgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuaW1wb3J0IFJlYWN0LCB7dXNlUmVmfSBmcm9tICdyZWFjdCdcblxuY29uc3QgU2Nyb2xsVHJhY2tlciA9ICh7IHRvcCwgbGVmdCwgb2Zmc2V0LCBsaXN0c2l6ZSwgc3R5bGVzIH0pID0+IHtcblxuICAgIGxldCB0cmFja2RhdGEgPSBgJHtvZmZzZXQgKyAxfS8ke2xpc3RzaXplfWBcblxuICAgIGxldCBzdHlsZVJlZiA9IHVzZVJlZihPYmplY3QuYXNzaWduKHtcbiAgICAgICAgdG9wOiB0b3AgKyAncHgnLFxuICAgICAgICBsZWZ0OiBsZWZ0ICsgJ3B4JyxcbiAgICAgICAgcG9zaXRpb246J2ZpeGVkJyxcbiAgICAgICAgekluZGV4OjMsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjond2hpdGUnLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgZ3JheScsXG4gICAgICAgIGJvcmRlclJhZGl1czonMTBweCcsXG4gICAgICAgIGZvbnRTaXplOidzbWFsbGVyJyxcbiAgICAgICAgcGFkZGluZzonM3B4J1xuICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcyxzdHlsZXM/LnNjcm9sbHRyYWNrZXIpKVxuXG4gICAgcmV0dXJuIDxkaXYgZGF0YS1uYW1lID0gJ3Njcm9sbHRyYWNrZXInIHN0eWxlID0ge3N0eWxlUmVmLmN1cnJlbnR9ID57dHJhY2tkYXRhfTwvZGl2PlxufVxuXG5leHBvcnQgZGVmYXVsdCBTY3JvbGxUcmFja2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n")}])}));