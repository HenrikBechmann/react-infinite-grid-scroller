(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("React"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["React", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["Scroller"] = factory(require("React"), require("react-dom"));
	else
		root["Scroller"] = factory(root["React"], root["react-dom"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/infinitegridscroller.tsx");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/detect-browser/es/index.js":
/*!*************************************************!*\
  !*** ./node_modules/detect-browser/es/index.js ***!
  \*************************************************/
/*! exports provided: BrowserInfo, NodeInfo, SearchBotDeviceInfo, BotInfo, ReactNativeInfo, detect, browserName, parseUserAgent, detectOS, getNodeVersion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrowserInfo\", function() { return BrowserInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NodeInfo\", function() { return NodeInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SearchBotDeviceInfo\", function() { return SearchBotDeviceInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BotInfo\", function() { return BotInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ReactNativeInfo\", function() { return ReactNativeInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"detect\", function() { return detect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"browserName\", function() { return browserName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseUserAgent\", function() { return parseUserAgent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"detectOS\", function() { return detectOS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getNodeVersion\", function() { return getNodeVersion; });\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nvar BrowserInfo = /** @class */ (function () {\n    function BrowserInfo(name, version, os) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.type = 'browser';\n    }\n    return BrowserInfo;\n}());\n\nvar NodeInfo = /** @class */ (function () {\n    function NodeInfo(version) {\n        this.version = version;\n        this.type = 'node';\n        this.name = 'node';\n        this.os = process.platform;\n    }\n    return NodeInfo;\n}());\n\nvar SearchBotDeviceInfo = /** @class */ (function () {\n    function SearchBotDeviceInfo(name, version, os, bot) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.bot = bot;\n        this.type = 'bot-device';\n    }\n    return SearchBotDeviceInfo;\n}());\n\nvar BotInfo = /** @class */ (function () {\n    function BotInfo() {\n        this.type = 'bot';\n        this.bot = true; // NOTE: deprecated test name instead\n        this.name = 'bot';\n        this.version = null;\n        this.os = null;\n    }\n    return BotInfo;\n}());\n\nvar ReactNativeInfo = /** @class */ (function () {\n    function ReactNativeInfo() {\n        this.type = 'react-native';\n        this.name = 'react-native';\n        this.version = null;\n        this.os = null;\n    }\n    return ReactNativeInfo;\n}());\n\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [\n    ['aol', /AOLShield\\/([0-9\\._]+)/],\n    ['edge', /Edge\\/([0-9\\._]+)/],\n    ['edge-ios', /EdgiOS\\/([0-9\\._]+)/],\n    ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/],\n    ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/],\n    ['samsung', /SamsungBrowser\\/([0-9\\.]+)/],\n    ['silk', /\\bSilk\\/([0-9._-]+)\\b/],\n    ['miui', /MiuiBrowser\\/([0-9\\.]+)$/],\n    ['beaker', /BeakerBrowser\\/([0-9\\.]+)/],\n    ['edge-chromium', /EdgA?\\/([0-9\\.]+)/],\n    [\n        'chromium-webview',\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/,\n    ],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n    ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n    ['fxios', /FxiOS\\/([0-9\\.]+)/],\n    ['opera-mini', /Opera Mini.*Version\\/([0-9\\.]+)/],\n    ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)/],\n    ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n    ['android', /Android\\s([0-9\\.]+)/],\n    ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9\\._]+).*Safari/],\n    ['facebook', /FBAV\\/([0-9\\.]+)/],\n    ['instagram', /Instagram\\s([0-9\\.]+)/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/],\n    ['searchbot', SEARCHBOX_UA_REGEX],\n];\nvar operatingSystemRules = [\n    ['iOS', /iP(hone|od|ad)/],\n    ['Android OS', /Android/],\n    ['BlackBerry OS', /BlackBerry|BB10/],\n    ['Windows Mobile', /IEMobile/],\n    ['Amazon OS', /Kindle/],\n    ['Windows 3.11', /Win16/],\n    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],\n    ['Windows 98', /(Windows 98)|(Win98)/],\n    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],\n    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],\n    ['Windows Server 2003', /(Windows NT 5.2)/],\n    ['Windows Vista', /(Windows NT 6.0)/],\n    ['Windows 7', /(Windows NT 6.1)/],\n    ['Windows 8', /(Windows NT 6.2)/],\n    ['Windows 8.1', /(Windows NT 6.3)/],\n    ['Windows 10', /(Windows NT 10.0)/],\n    ['Windows ME', /Windows ME/],\n    ['Open BSD', /OpenBSD/],\n    ['Sun OS', /SunOS/],\n    ['Chrome OS', /CrOS/],\n    ['Linux', /(Linux)|(X11)/],\n    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],\n    ['QNX', /QNX/],\n    ['BeOS', /BeOS/],\n    ['OS/2', /OS\\/2/],\n];\nfunction detect(userAgent) {\n    if (!!userAgent) {\n        return parseUserAgent(userAgent);\n    }\n    if (typeof document === 'undefined' &&\n        typeof navigator !== 'undefined' &&\n        navigator.product === 'ReactNative') {\n        return new ReactNativeInfo();\n    }\n    if (typeof navigator !== 'undefined') {\n        return parseUserAgent(navigator.userAgent);\n    }\n    return getNodeVersion();\n}\nfunction matchUserAgent(ua) {\n    // opted for using reduce here rather than Array#first with a regex.test call\n    // this is primarily because using the reduce we only perform the regex\n    // execution once rather than once for the test and for the exec again below\n    // probably something that needs to be benchmarked though\n    return (ua !== '' &&\n        userAgentRules.reduce(function (matched, _a) {\n            var browser = _a[0], regex = _a[1];\n            if (matched) {\n                return matched;\n            }\n            var uaMatch = regex.exec(ua);\n            return !!uaMatch && [browser, uaMatch];\n        }, false));\n}\nfunction browserName(ua) {\n    var data = matchUserAgent(ua);\n    return data ? data[0] : null;\n}\nfunction parseUserAgent(ua) {\n    var matchedRule = matchUserAgent(ua);\n    if (!matchedRule) {\n        return null;\n    }\n    var name = matchedRule[0], match = matchedRule[1];\n    if (name === 'searchbot') {\n        return new BotInfo();\n    }\n    var versionParts = match[1] && match[1].split(/[._]/).slice(0, 3);\n    if (versionParts) {\n        if (versionParts.length < REQUIRED_VERSION_PARTS) {\n            versionParts = __spreadArrays(versionParts, createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length));\n        }\n    }\n    else {\n        versionParts = [];\n    }\n    var version = versionParts.join('.');\n    var os = detectOS(ua);\n    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n    if (searchBotMatch && searchBotMatch[1]) {\n        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n    }\n    return new BrowserInfo(name, version, os);\n}\nfunction detectOS(ua) {\n    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];\n        var match = regex.exec(ua);\n        if (match) {\n            return os;\n        }\n    }\n    return null;\n}\nfunction getNodeVersion() {\n    var isNode = typeof process !== 'undefined' && process.version;\n    return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nfunction createVersionParts(count) {\n    var output = [];\n    for (var ii = 0; ii < count; ii++) {\n        output.push('0');\n    }\n    return output;\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/detect-browser/es/index.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/react-is-mounted-hook/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-is-mounted-hook/lib/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar use_is_mounted_1 = __importDefault(__webpack_require__(/*! ./use-is-mounted */ \"./node_modules/react-is-mounted-hook/lib/use-is-mounted.js\"));\nexports.default = use_is_mounted_1.default;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy1tb3VudGVkLWhvb2svbGliL2luZGV4LmpzPzVjOGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRDQUE0QztBQUM1QztBQUNBLDhDQUE4QyxjQUFjO0FBQzVELHVDQUF1QyxtQkFBTyxDQUFDLG9GQUFrQjtBQUNqRTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzLW1vdW50ZWQtaG9vay9saWIvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB1c2VfaXNfbW91bnRlZF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3VzZS1pcy1tb3VudGVkXCIpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVzZV9pc19tb3VudGVkXzEuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-is-mounted-hook/lib/index.js\n");

/***/ }),

/***/ "./node_modules/react-is-mounted-hook/lib/use-is-mounted.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-is-mounted-hook/lib/use-is-mounted.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = __webpack_require__(/*! react */ \"react\");\nfunction useIsMounted() {\n    var ref = react_1.useRef(false);\n    react_1.useEffect(function () {\n        ref.current = true;\n        return function () {\n            ref.current = false;\n        };\n    }, []);\n    return function () { return ref.current; };\n}\nexports.default = useIsMounted;\n//# sourceMappingURL=use-is-mounted.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy1tb3VudGVkLWhvb2svbGliL3VzZS1pcy1tb3VudGVkLmpzPzkzMjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RCxjQUFjLG1CQUFPLENBQUMsb0JBQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsd0JBQXdCLG9CQUFvQjtBQUM1QztBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMtbW91bnRlZC1ob29rL2xpYi91c2UtaXMtbW91bnRlZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG5mdW5jdGlvbiB1c2VJc01vdW50ZWQoKSB7XG4gICAgdmFyIHJlZiA9IHJlYWN0XzEudXNlUmVmKGZhbHNlKTtcbiAgICByZWFjdF8xLnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiByZWYuY3VycmVudDsgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHVzZUlzTW91bnRlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1pcy1tb3VudGVkLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-is-mounted-hook/lib/use-is-mounted.js\n");

/***/ }),

/***/ "./node_modules/requestidlecallback/index.js":
/*!***************************************************!*\
  !*** ./node_modules/requestidlecallback/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}(function(){\n\t'use strict';\n\tvar scheduleStart, throttleDelay, lazytimer, lazyraf;\n\tvar root = typeof window != 'undefined' ?\n\t\twindow :\n\t\ttypeof global != undefined ?\n\t\t\tglobal :\n\t\t\tthis || {};\n\tvar requestAnimationFrame = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;\n\tvar cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;\n\tvar tasks = [];\n\tvar runAttempts = 0;\n\tvar isRunning = false;\n\tvar remainingTime = 7;\n\tvar minThrottle = 35;\n\tvar throttle = 125;\n\tvar index = 0;\n\tvar taskStart = 0;\n\tvar tasklength = 0;\n\tvar IdleDeadline = {\n\t\tget didTimeout(){\n\t\t\treturn false;\n\t\t},\n\t\ttimeRemaining: function(){\n\t\t\tvar timeRemaining = remainingTime - (Date.now() - taskStart);\n\t\t\treturn timeRemaining < 0 ? 0 : timeRemaining;\n\t\t},\n\t};\n\tvar setInactive = debounce(function(){\n\t\tremainingTime = 22;\n\t\tthrottle = 66;\n\t\tminThrottle = 0;\n\t});\n\n\tfunction debounce(fn){\n\t\tvar id, timestamp;\n\t\tvar wait = 99;\n\t\tvar check = function(){\n\t\t\tvar last = (Date.now()) - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tid = setTimeout(check, wait - last);\n\t\t\t} else {\n\t\t\t\tid = null;\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\t\treturn function(){\n\t\t\ttimestamp = Date.now();\n\t\t\tif(!id){\n\t\t\t\tid = setTimeout(check, wait);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction abortRunning(){\n\t\tif(isRunning){\n\t\t\tif(lazyraf){\n\t\t\t\tcancelRequestAnimationFrame(lazyraf);\n\t\t\t}\n\t\t\tif(lazytimer){\n\t\t\t\tclearTimeout(lazytimer);\n\t\t\t}\n\t\t\tisRunning = false;\n\t\t}\n\t}\n\n\tfunction onInputorMutation(){\n\t\tif(throttle != 125){\n\t\t\tremainingTime = 7;\n\t\t\tthrottle = 125;\n\t\t\tminThrottle = 35;\n\n\t\t\tif(isRunning) {\n\t\t\t\tabortRunning();\n\t\t\t\tscheduleLazy();\n\t\t\t}\n\t\t}\n\t\tsetInactive();\n\t}\n\n\tfunction scheduleAfterRaf() {\n\t\tlazyraf = null;\n\t\tlazytimer = setTimeout(runTasks, 0);\n\t}\n\n\tfunction scheduleRaf(){\n\t\tlazytimer = null;\n\t\trequestAnimationFrame(scheduleAfterRaf);\n\t}\n\n\tfunction scheduleLazy(){\n\n\t\tif(isRunning){return;}\n\t\tthrottleDelay = throttle - (Date.now() - taskStart);\n\n\t\tscheduleStart = Date.now();\n\n\t\tisRunning = true;\n\n\t\tif(minThrottle && throttleDelay < minThrottle){\n\t\t\tthrottleDelay = minThrottle;\n\t\t}\n\n\t\tif(throttleDelay > 9){\n\t\t\tlazytimer = setTimeout(scheduleRaf, throttleDelay);\n\t\t} else {\n\t\t\tthrottleDelay = 0;\n\t\t\tscheduleRaf();\n\t\t}\n\t}\n\n\tfunction runTasks(){\n\t\tvar task, i, len;\n\t\tvar timeThreshold = remainingTime > 9 ?\n\t\t\t9 :\n\t\t\t1\n\t\t;\n\n\t\ttaskStart = Date.now();\n\t\tisRunning = false;\n\n\t\tlazytimer = null;\n\n\t\tif(runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart){\n\t\t\tfor(i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++){\n\t\t\t\ttask = tasks.shift();\n\t\t\t\ttasklength++;\n\t\t\t\tif(task){\n\t\t\t\t\ttask(IdleDeadline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(tasks.length){\n\t\t\tscheduleLazy();\n\t\t} else {\n\t\t\trunAttempts = 0;\n\t\t}\n\t}\n\n\tfunction requestIdleCallbackShim(task){\n\t\tindex++;\n\t\ttasks.push(task);\n\t\tscheduleLazy();\n\t\treturn index;\n\t}\n\n\tfunction cancelIdleCallbackShim(id){\n\t\tvar index = id - 1 - tasklength;\n\t\tif(tasks[index]){\n\t\t\ttasks[index] = null;\n\t\t}\n\t}\n\n\tif(!root.requestIdleCallback || !root.cancelIdleCallback){\n\t\troot.requestIdleCallback = requestIdleCallbackShim;\n\t\troot.cancelIdleCallback = cancelIdleCallbackShim;\n\n\t\tif(root.document && document.addEventListener){\n\t\t\troot.addEventListener('scroll', onInputorMutation, true);\n\t\t\troot.addEventListener('resize', onInputorMutation);\n\n\t\t\tdocument.addEventListener('focus', onInputorMutation, true);\n\t\t\tdocument.addEventListener('mouseover', onInputorMutation, true);\n\t\t\t['click', 'keypress', 'touchstart', 'mousedown'].forEach(function(name){\n\t\t\t\tdocument.addEventListener(name, onInputorMutation, {capture: true, passive: true});\n\t\t\t});\n\n\t\t\tif(root.MutationObserver){\n\t\t\t\tnew MutationObserver( onInputorMutation ).observe( document.documentElement, {childList: true, subtree: true, attributes: true} );\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\troot.requestIdleCallback(function(){}, {timeout: 0});\n\t\t} catch(e){\n\t\t\t(function(rIC){\n\t\t\t\tvar timeRemainingProto, timeRemaining;\n\t\t\t\troot.requestIdleCallback = function(fn, timeout){\n\t\t\t\t\tif(timeout && typeof timeout.timeout == 'number'){\n\t\t\t\t\t\treturn rIC(fn, timeout.timeout);\n\t\t\t\t\t}\n\t\t\t\t\treturn rIC(fn);\n\t\t\t\t};\n\t\t\t\tif(root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)){\n\t\t\t\t\ttimeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, 'timeRemaining');\n\t\t\t\t\tif(!timeRemaining || !timeRemaining.configurable || !timeRemaining.get){return;}\n\t\t\t\t\tObject.defineProperty(timeRemainingProto, 'timeRemaining', {\n\t\t\t\t\t\tvalue:  function(){\n\t\t\t\t\t\t\treturn timeRemaining.get.call(this);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(root.requestIdleCallback)\n\t\t}\n\t}\n\n\treturn {\n\t\trequest: requestIdleCallbackShim,\n\t\tcancel: cancelIdleCallbackShim,\n\t};\n}));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/requestidlecallback/index.js\n");

/***/ }),

/***/ "./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js":
/*!*************************************************************************!*\
  !*** ./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\n/* eslint-disable require-jsdoc, valid-jsdoc */\r\nvar MapShim = (function () {\r\n    if (typeof Map !== 'undefined') {\r\n        return Map;\r\n    }\r\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\r\n    function getIndex(arr, key) {\r\n        var result = -1;\r\n        arr.some(function (entry, index) {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return result;\r\n    }\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            this.__entries__ = [];\r\n        }\r\n        Object.defineProperty(class_1.prototype, \"size\", {\r\n            /**\r\n             * @returns {boolean}\r\n             */\r\n            get: function () {\r\n                return this.__entries__.length;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\r\n        class_1.prototype.get = function (key) {\r\n            var index = getIndex(this.__entries__, key);\r\n            var entry = this.__entries__[index];\r\n            return entry && entry[1];\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.set = function (key, value) {\r\n            var index = getIndex(this.__entries__, key);\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            }\r\n            else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.delete = function (key) {\r\n            var entries = this.__entries__;\r\n            var index = getIndex(entries, key);\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.has = function (key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        };\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.clear = function () {\r\n            this.__entries__.splice(0);\r\n        };\r\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.forEach = function (callback, ctx) {\r\n            if (ctx === void 0) { ctx = null; }\r\n            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        };\r\n        return class_1;\r\n    }());\r\n})();\n\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\r\nvar global$1 = (function () {\r\n    if (typeof global !== 'undefined' && global.Math === Math) {\r\n        return global;\r\n    }\r\n    if (typeof self !== 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\n\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nvar requestAnimationFrame$1 = (function () {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        // It's required to use a bounded function because IE sometimes throws\r\n        // an \"Invalid calling object\" error if rAF is invoked without the global\r\n        // object on the left hand side.\r\n        return requestAnimationFrame.bind(global$1);\r\n    }\r\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n})();\n\n// Defines minimum timeout before adding a trailing call.\r\nvar trailingTimeout = 2;\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\r\nfunction throttle (callback, delay) {\r\n    var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function resolvePending() {\r\n        if (leadingCall) {\r\n            leadingCall = false;\r\n            callback();\r\n        }\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        requestAnimationFrame$1(resolvePending);\r\n    }\r\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        var timeStamp = Date.now();\r\n        if (leadingCall) {\r\n            // Reject immediately following calls.\r\n            if (timeStamp - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n            // Schedule new call to be in invoked when the pending one is resolved.\r\n            // This is important for \"transitions\" which never actually start\r\n            // immediately so there is a chance that we might miss one if change\r\n            // happens amids the pending invocation.\r\n            trailingCall = true;\r\n        }\r\n        else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n        lastCallTime = timeStamp;\r\n    }\r\n    return proxy;\r\n}\n\n// Minimum delay before invoking the update of observers.\r\nvar REFRESH_DELAY = 20;\r\n// A list of substrings of CSS properties used to find transition events that\r\n// might affect dimensions of observed elements.\r\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n// Check if MutationObserver is available.\r\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\r\nvar ResizeObserverController = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */\r\n    function ResizeObserverController() {\r\n        /**\r\n         * Indicates whether DOM listeners have been added.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.connected_ = false;\r\n        /**\r\n         * Tells that controller has subscribed for Mutation Events.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.mutationEventsAdded_ = false;\r\n        /**\r\n         * Keeps reference to the instance of MutationObserver.\r\n         *\r\n         * @private {MutationObserver}\r\n         */\r\n        this.mutationsObserver_ = null;\r\n        /**\r\n         * A list of connected observers.\r\n         *\r\n         * @private {Array<ResizeObserverSPI>}\r\n         */\r\n        this.observers_ = [];\r\n        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n    }\r\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.addObserver = function (observer) {\r\n        if (!~this.observers_.indexOf(observer)) {\r\n            this.observers_.push(observer);\r\n        }\r\n        // Add listeners if they haven't been added yet.\r\n        if (!this.connected_) {\r\n            this.connect_();\r\n        }\r\n    };\r\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.removeObserver = function (observer) {\r\n        var observers = this.observers_;\r\n        var index = observers.indexOf(observer);\r\n        // Remove observer if it's present in registry.\r\n        if (~index) {\r\n            observers.splice(index, 1);\r\n        }\r\n        // Remove listeners if controller has no connected observers.\r\n        if (!observers.length && this.connected_) {\r\n            this.disconnect_();\r\n        }\r\n    };\r\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.refresh = function () {\r\n        var changesDetected = this.updateObservers_();\r\n        // Continue running updates if changes have been detected as there might\r\n        // be future ones caused by CSS transitions.\r\n        if (changesDetected) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */\r\n    ResizeObserverController.prototype.updateObservers_ = function () {\r\n        // Collect observers that have active observations.\r\n        var activeObservers = this.observers_.filter(function (observer) {\r\n            return observer.gatherActive(), observer.hasActive();\r\n        });\r\n        // Deliver notifications in a separate cycle in order to avoid any\r\n        // collisions between observers, e.g. when multiple instances of\r\n        // ResizeObserver are tracking the same element and the callback of one\r\n        // of them changes content dimensions of the observed target. Sometimes\r\n        // this may result in notifications being blocked for the rest of observers.\r\n        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n        return activeObservers.length > 0;\r\n    };\r\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.connect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already added.\r\n        if (!isBrowser || this.connected_) {\r\n            return;\r\n        }\r\n        // Subscription to the \"Transitionend\" event is used as a workaround for\r\n        // delayed transitions. This way it's possible to capture at least the\r\n        // final state of an element.\r\n        document.addEventListener('transitionend', this.onTransitionEnd_);\r\n        window.addEventListener('resize', this.refresh);\r\n        if (mutationObserverSupported) {\r\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n            this.mutationsObserver_.observe(document, {\r\n                attributes: true,\r\n                childList: true,\r\n                characterData: true,\r\n                subtree: true\r\n            });\r\n        }\r\n        else {\r\n            document.addEventListener('DOMSubtreeModified', this.refresh);\r\n            this.mutationEventsAdded_ = true;\r\n        }\r\n        this.connected_ = true;\r\n    };\r\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.disconnect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already removed.\r\n        if (!isBrowser || !this.connected_) {\r\n            return;\r\n        }\r\n        document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n        window.removeEventListener('resize', this.refresh);\r\n        if (this.mutationsObserver_) {\r\n            this.mutationsObserver_.disconnect();\r\n        }\r\n        if (this.mutationEventsAdded_) {\r\n            document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n        }\r\n        this.mutationsObserver_ = null;\r\n        this.mutationEventsAdded_ = false;\r\n        this.connected_ = false;\r\n    };\r\n    /**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n        // Detect whether transition may affect dimensions of an element.\r\n        var isReflowProperty = transitionKeys.some(function (key) {\r\n            return !!~propertyName.indexOf(key);\r\n        });\r\n        if (isReflowProperty) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.getInstance = function () {\r\n        if (!this.instance_) {\r\n            this.instance_ = new ResizeObserverController();\r\n        }\r\n        return this.instance_;\r\n    };\r\n    /**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.instance_ = null;\r\n    return ResizeObserverController;\r\n}());\n\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nvar defineConfigurable = (function (target, props) {\r\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n    return target;\r\n});\n\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\r\nvar getWindowOf = (function (target) {\r\n    // Assume that the element is an instance of Node, which means that it\r\n    // has the \"ownerDocument\" property from which we can retrieve a\r\n    // corresponding global object.\r\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n    // Return the local global object if it's not possible extract one from\r\n    // provided element.\r\n    return ownerGlobal || global$1;\r\n});\n\n// Placeholder of an empty content rectangle.\r\nvar emptyRect = createRectInit(0, 0, 0, 0);\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles) {\r\n    var positions = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        positions[_i - 1] = arguments[_i];\r\n    }\r\n    return positions.reduce(function (size, position) {\r\n        var value = styles['border-' + position + '-width'];\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    var positions = ['top', 'right', 'bottom', 'left'];\r\n    var paddings = {};\r\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n        var position = positions_1[_i];\r\n        var value = styles['padding-' + position];\r\n        paddings[position] = toFloat(value);\r\n    }\r\n    return paddings;\r\n}\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    var bbox = target.getBBox();\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n    var styles = getWindowOf(target).getComputedStyle(target);\r\n    var paddings = getPaddings(styles);\r\n    var horizPad = paddings.left + paddings.right;\r\n    var vertPad = paddings.top + paddings.bottom;\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    var width = toFloat(styles.width), height = toFloat(styles.height);\r\n    // Width & height include paddings and borders when the 'border-box' box\r\n    // model is applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n    // Following steps can't be applied to the document's root element as its\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nvar isSVGGraphicsElement = (function () {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement !== 'undefined') {\r\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n    }\r\n    // If it's so, then check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n        typeof target.getBBox === 'function'); };\r\n})();\r\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === getWindowOf(target).document.documentElement;\r\n}\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getContentRect(target) {\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n    return getHTMLElementContentRect(target);\r\n}\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nfunction createReadOnlyRect(_a) {\r\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n    var rect = Object.create(Constr.prototype);\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x: x, y: y, width: width, height: height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n    return rect;\r\n}\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction createRectInit(x, y, width, height) {\r\n    return { x: x, y: y, width: width, height: height };\r\n}\n\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nvar ResizeObservation = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */\r\n    function ResizeObservation(target) {\r\n        /**\r\n         * Broadcasted width of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastWidth = 0;\r\n        /**\r\n         * Broadcasted height of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastHeight = 0;\r\n        /**\r\n         * Reference to the last observed content rectangle.\r\n         *\r\n         * @private {DOMRectInit}\r\n         */\r\n        this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n        this.target = target;\r\n    }\r\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObservation.prototype.isActive = function () {\r\n        var rect = getContentRect(this.target);\r\n        this.contentRect_ = rect;\r\n        return (rect.width !== this.broadcastWidth ||\r\n            rect.height !== this.broadcastHeight);\r\n    };\r\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */\r\n    ResizeObservation.prototype.broadcastRect = function () {\r\n        var rect = this.contentRect_;\r\n        this.broadcastWidth = rect.width;\r\n        this.broadcastHeight = rect.height;\r\n        return rect;\r\n    };\r\n    return ResizeObservation;\r\n}());\n\nvar ResizeObserverEntry = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */\r\n    function ResizeObserverEntry(target, rectInit) {\r\n        var contentRect = createReadOnlyRect(rectInit);\r\n        // According to the specification following properties are not writable\r\n        // and are also not enumerable in the native implementation.\r\n        //\r\n        // Property accessors are not being used as they'd require to define a\r\n        // private WeakMap storage which may cause memory leaks in browsers that\r\n        // don't support this type of collections.\r\n        defineConfigurable(this, { target: target, contentRect: contentRect });\r\n    }\r\n    return ResizeObserverEntry;\r\n}());\n\nvar ResizeObserverSPI = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */\r\n    function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n        /**\r\n         * Collection of resize observations that have detected changes in dimensions\r\n         * of elements.\r\n         *\r\n         * @private {Array<ResizeObservation>}\r\n         */\r\n        this.activeObservations_ = [];\r\n        /**\r\n         * Registry of the ResizeObservation instances.\r\n         *\r\n         * @private {Map<Element, ResizeObservation>}\r\n         */\r\n        this.observations_ = new MapShim();\r\n        if (typeof callback !== 'function') {\r\n            throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n        }\r\n        this.callback_ = callback;\r\n        this.controller_ = controller;\r\n        this.callbackCtx_ = callbackCtx;\r\n    }\r\n    /**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.observe = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is already being observed.\r\n        if (observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.set(target, new ResizeObservation(target));\r\n        this.controller_.addObserver(this);\r\n        // Force the update of observations.\r\n        this.controller_.refresh();\r\n    };\r\n    /**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.unobserve = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is not being observed.\r\n        if (!observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.delete(target);\r\n        if (!observations.size) {\r\n            this.controller_.removeObserver(this);\r\n        }\r\n    };\r\n    /**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.disconnect = function () {\r\n        this.clearActive();\r\n        this.observations_.clear();\r\n        this.controller_.removeObserver(this);\r\n    };\r\n    /**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.gatherActive = function () {\r\n        var _this = this;\r\n        this.clearActive();\r\n        this.observations_.forEach(function (observation) {\r\n            if (observation.isActive()) {\r\n                _this.activeObservations_.push(observation);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.broadcastActive = function () {\r\n        // Do nothing if observer doesn't have active observations.\r\n        if (!this.hasActive()) {\r\n            return;\r\n        }\r\n        var ctx = this.callbackCtx_;\r\n        // Create ResizeObserverEntry instance for every active observation.\r\n        var entries = this.activeObservations_.map(function (observation) {\r\n            return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n        });\r\n        this.callback_.call(ctx, entries, ctx);\r\n        this.clearActive();\r\n    };\r\n    /**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.clearActive = function () {\r\n        this.activeObservations_.splice(0);\r\n    };\r\n    /**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObserverSPI.prototype.hasActive = function () {\r\n        return this.activeObservations_.length > 0;\r\n    };\r\n    return ResizeObserverSPI;\r\n}());\n\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// for the Map collection as it has all required methods and because WeakMap\r\n// can't be fully polyfilled anyway.\r\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\r\nvar ResizeObserver = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */\r\n    function ResizeObserver(callback) {\r\n        if (!(this instanceof ResizeObserver)) {\r\n            throw new TypeError('Cannot call a class as a function.');\r\n        }\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        var controller = ResizeObserverController.getInstance();\r\n        var observer = new ResizeObserverSPI(callback, controller, this);\r\n        observers.set(this, observer);\r\n    }\r\n    return ResizeObserver;\r\n}());\r\n// Expose public methods of ResizeObserver.\r\n[\r\n    'observe',\r\n    'unobserve',\r\n    'disconnect'\r\n].forEach(function (method) {\r\n    ResizeObserver.prototype[method] = function () {\r\n        var _a;\r\n        return (_a = observers.get(this))[method].apply(_a, arguments);\r\n    };\r\n});\n\nvar index = (function () {\r\n    // Export existing implementation if available.\r\n    if (typeof global$1.ResizeObserver !== 'undefined') {\r\n        return global$1.ResizeObserver;\r\n    }\r\n    return ResizeObserver;\r\n})();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./src/contentmanager.tsx":
/*!********************************!*\
  !*** ./src/contentmanager.tsx ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // contentmanager.tsx\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContentContext = exports.PortalCache = exports.maincachetrigger = exports.portalCacheMap = void 0;\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar react_dom_1 = __importDefault(__webpack_require__(/*! react-dom */ \"react-dom\"));\n\nvar contentlists = new Map();\nexports.portalCacheMap = new Map();\nexports.maincachetrigger = true; // let contextTriggerFn = () => cacheGenerationCounter++\n\nvar cacheSetTrigger;\n\nvar PortalCache = function PortalCache() {\n  // const trigger = useContext(CacheContext)\n  var _a = react_1.useState(exports.maincachetrigger),\n      cachetoggle = _a[0],\n      setCachetoggle = _a[1]; // console.log('running PORTALCACHE', cachetoggle)\n  // trigger.contextTrigger()\n\n\n  var portalLists = [];\n  var portalkeys = [];\n  react_1.useEffect(function () {\n    cacheSetTrigger = setCachetoggle;\n  }, []);\n  exports.portalCacheMap.forEach(function (value, key) {\n    if (value.modified) {\n      value.portalList = Array.from(value.portals.values());\n      value.modified = false; // ++cacheGenerationCounter\n    }\n\n    portalLists.push(value.portalList);\n    portalkeys.push(key);\n  });\n  var index = 0;\n  var portalblocks = [];\n\n  for (var _i = 0, portalkeys_1 = portalkeys; _i < portalkeys_1.length; _i++) {\n    var key = portalkeys_1[_i];\n    portalblocks.push(react_1[\"default\"].createElement(\"div\", {\n      key: key\n    }, portalLists[index]));\n    index++;\n  }\n\n  return react_1[\"default\"].createElement(\"div\", null, portalblocks);\n};\n\nexports.PortalCache = PortalCache;\n\nvar getPortal = function getPortal(content, container, index) {\n  // console.log('returning from getPortal')\n  return react_dom_1[\"default\"].createPortal(content, container, index); // return <ItemPortal content = {content} container = {container}/>\n};\n\nvar ContentManager =\n/** @class */\nfunction () {\n  function ContentManager() {} // constructor() {}\n\n\n  ContentManager.prototype.setScrollerContentlist = function (scrollerID) {\n    if (!contentlists.has(scrollerID)) {\n      contentlists.set(scrollerID, new Map());\n    }\n\n    if (!exports.portalCacheMap.has(scrollerID)) {\n      exports.portalCacheMap.set(scrollerID, {\n        modified: false,\n        portals: new Map(),\n        portalList: []\n      });\n    }\n  };\n\n  ContentManager.prototype.clearScrollerContentlist = function (scrollerID) {\n    if (contentlists.has(scrollerID)) {\n      contentlists.get(scrollerID).clear();\n    }\n\n    if (exports.portalCacheMap.has(scrollerID)) {\n      exports.portalCacheMap[\"delete\"](scrollerID);\n    }\n  };\n\n  ContentManager.prototype.resetScrollerContentList = function (scrollerID) {\n    this.clearScrollerContentlist(scrollerID);\n    this.setScrollerContentlist(scrollerID);\n  };\n\n  ContentManager.prototype.deleteScrollerContentlist = function (scrollerID) {\n    contentlists[\"delete\"](scrollerID);\n  };\n\n  ContentManager.prototype.setContentlistItem = function (scrollerID, index, content) {\n    // console.log('setting item ScrollerID, index, content', scrollerID, index, content)\n    if (this.hasContentlistItem(scrollerID, index)) {\n      return this.getContentlistItem(scrollerID, index).portal;\n    }\n\n    var container = document.createElement('div');\n    container.style.top = '0px';\n    container.style.right = '0px';\n    container.style.left = '0px';\n    container.style.bottom = '0px';\n    container.style.position = 'absolute';\n    container.dataset.type = 'portalcontainer';\n    container.dataset.index = index;\n    container.dataset.scrollerid = scrollerID;\n    var portal = getPortal(content, container, index); // portalList.push(<div key = {index}>{portal}</div>)\n\n    var portalitem = exports.portalCacheMap.get(scrollerID);\n    portalitem.portals.set(index, portal);\n    portalitem.modified = true;\n    contentlists.get(scrollerID).set(index, {\n      content: content,\n      target: null,\n      container: container,\n      portal: portal,\n      reparenting: false,\n      indexid: index,\n      scrollerid: scrollerID\n    });\n    exports.maincachetrigger = !exports.maincachetrigger;\n    cacheSetTrigger(exports.maincachetrigger);\n  };\n\n  ContentManager.prototype.deleteContentlistItem = function (scrollerID, index) {\n    var itemdata = contentlists.get(scrollerID).get(index);\n    contentlists.get(scrollerID)[\"delete\"](index);\n    var portalitem = exports.portalCacheMap.get(scrollerID);\n    portalitem.portals[\"delete\"](index);\n    portalitem.modified = true;\n    exports.maincachetrigger = !exports.maincachetrigger;\n    cacheSetTrigger(exports.maincachetrigger);\n  };\n\n  ContentManager.prototype.attachContentlistItem = function (scrollerID, index, target) {\n    var item = contentlists.get(scrollerID).get(index); // console.log('item to be attached; scrollerID, index',item, scrollerID, index)\n\n    if (!item) return; // console.log('setting reparenting to true: scrollerID, index', scrollerID, index)\n\n    item.reparenting = true; // this.detachContentlistItem(scrollerID, index)\n\n    target.appendChild(item.container); // console.log('scrollerID, index, getBoundingClientRect',scrollerID, index, item.container.getBoundingClientRect())\n\n    item.target = target;\n    setTimeout(function () {\n      item.reparenting = false; // console.log('setting reparenting to false', scrollerID, index)\n    });\n  };\n\n  ContentManager.prototype.detachContentlistItem = function (scrollerID, index) {\n    var item = contentlists.get(scrollerID).get(index);\n\n    if (item) {\n      // console.log('detach child item scrollerID, index',item, scrollerID, index)\n      if (item.target && item.container) {\n        try {\n          item.target.removeChild(item.container);\n        } catch (e) {// noop\n        }\n      }\n    }\n  };\n\n  ContentManager.prototype.hasContentlistItem = function (scrollerID, index) {\n    return contentlists.get(scrollerID).has(index);\n  };\n\n  ContentManager.prototype.getContentlistItem = function (scrollerID, index) {\n    return contentlists.get(scrollerID).get(index);\n  };\n\n  return ContentManager;\n}();\n\nvar contentManager = new ContentManager(); // export const cacheContextData = {contextTrigger:() => ++cacheGenerationCounter}\n// export const CacheContext = React.createContext(null)\n\nexports.ContentContext = react_1[\"default\"].createContext(contentManager);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/contentmanager.tsx\n");

/***/ }),

/***/ "./src/cradle.tsx":
/*!************************!*\
  !*** ./src/cradle.tsx ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // cradle.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n    TODO:\n\n    add scroller name for debugging\n\n    fold shift only happens after delay\n\n    nested horizontal tail boundary is wrong - underlying structure; head bottom boundary is wrong\n\n    for resize, preserve cache for reload\n\n    can't mount error in nested lists\n\n    Debug scrollToItem callback (including setting scrollforward on first action).\n        motion takes place but gets close rather than exact. Position is off by runwaycount\n\n    Make sure item shell triggers are only fired at the leading, not trailing, edge\n\n    Inconsistency in viewportrows, sometimes Math.ceil, sometimes Math.floor\n\n    change height to 0px from auto for spine in vertical\n    \n    update scrollforward logic to take into account rapid opposite scrolling.\n    Use differences in scrollTop?\n\n    ==>> check getShift logic. !scrollforward should select next calculated index\n    to be above the fold if possible.\n\n    QA defend against butterfly getting intersections from opposite scroll direction\n        as the result of a short viewport\n\n    implement sessionid scheme for cell content\n\n    deal with spine being notified by bottom border rather than top\n\n    test ITEM_OBSERVER_THRESHOLD at various levels\n    think through management of items larger than viewport\n\n    Add ITEM_OBSERVER_THRESHOLD to test parameters\n\n    Add show fold to test parameters\n\n */\n\n/*\n    Description\n    -----------\n    The GridSroller provides the illusion of infinite scrolling through the use of a data 'cradle' inside a viewport.\n    The illusion is maintained by synchronizing changes in cradle content with cradle location inside a scrollblock, such\n    that as the scrollblock is moved, the cradle moves oppositely in the scrollblock (to stay visible within the viewport).\n    The scrollblock is sized to approximate the list being viewed, so as to have a scroll thumb size and position which\n    realistically reflects the size of the list being shown.\n\n    The position of the cradle is controlled by a 'spine' which is a 0px height/width (along the medial - ScrollBlock can be\n    verticsl or horizontal). The purpose of the spine is to act as a 'fold', above which cell content expands 'upwards', and\n    below which the cell content expands  'downwards'. GridScroller can be viewed vertically or horizontally. When horizontal,\n    the spine has a 0px width, so that the 'fold' is vertical, and cells expand to the left and right.\n\n    The spine is controlled to always be in the at the leading edge of the leading cellrow of the viewport. Thus\n    in vertical orientation, the spine 'top' css attribute is always equal to the 'scrollTop' position of the scrollblock,\n    plus an adjustment. The adjustment is the result of the alignment of the spine in relation to the top-(or left-)most cell\n    in the viewport (the 'reference' row). The spine can only be placed at the leading edge of the first visible\n    cell in the viewport. Therefore the spine offset from the leading edge of the viewport can be anywhere from minus to\n    plus the length of the leading row. The exact amount depends on where the 'breakpoint' of transition notification is set for\n    cells crossing the viewport threshold (and can be configured). The default of the breakpoint is .5 (half the length of the cell).\n\n    Technically, there are several reference points tracked by the GridScroller. These are:\n        - spineReferenceIndex (the virtual index of the item controlling the location of the spine)\n            The spineReferenceIndex is also used to allocate items above (lower index value) and below (same or higher index value)\n            the fold\n        - cradleReferenceIndex (the virtual index of the item defining the leading bound of the cradle content)\n        - spineOffset (pixels - plus or minus - that the spine is placed in relation to the viewport's leading edge)\n    \n    These reference points are applied to the following structures:\n        - the viewport\n        - the scrollblock\n        - the cradle, consisting of\n            - the spine (contains cradle head and tail)\n            - the head (contains leading items)\n            - the tail (contains trailing items)\n\n    Structure details:\n        the cradle content consists of\n        - the number of rows that are visible in the viewport (according to the default parameters)\n            - this typically includes one partially visible row\n        - the number of runway rows specified in the parameters, times 2 (one et for the head; one for the tail)\n        - the number of items is the number of rows times the 'crosscount' the lateral number of cells.\n        - the last row might consist of fewer items than crosscount, to match the maximum listsize\n        - the cradleRowcount (visible default rows + runwaycount * 2) and viewpointRowcount (visble rows;typicall one partial)\n\n    Item containers:\n        Client cell content is contained in ItemShell's, which are configured according to GridScroller's input parameters.\n        The ItemCell's are in turn contained in CSS grid structures. There are two grid structures - one in the cradle head,\n        and one in the cradle tail. Each grid structure is allowed uniform padding and gaps - identical between the two.\n\n    Overscroll handling:\n        Owing to the weight of the code, and potential rapidity of scrolling, there is an overscroll protocol.\n        if the overscroll is such that part of the cradle is still within the viewport boundaries, then the overscroll\n        is calculated as the number of cell rows that would fit (completely or partially) in the space between the edge of\n        the cradle that is receding from a viewport edge.\n\n        If the overshoot is such that the cradle has entirely passed out of the viewport, the GridScroller goes into 'Repositoining'\n        mode, meaning that it tracks relative location of the spine edge of the viewport, and repaints the cradle accroding to\n        this position when the scrolling stops.\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\");\n\nvar react_is_mounted_hook_1 = __importDefault(__webpack_require__(/*! react-is-mounted-hook */ \"./node_modules/react-is-mounted-hook/lib/index.js\"));\n\nvar resize_observer_polyfill_1 = __importDefault(__webpack_require__(/*! resize-observer-polyfill */ \"./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\"));\n\nvar contentmanager_1 = __webpack_require__(/*! ./contentmanager */ \"./src/contentmanager.tsx\");\n\nvar LocalResizeObserver = window['ResizeObserver'] || resize_observer_polyfill_1[\"default\"];\nvar ITEM_OBSERVER_THRESHOLD = 0;\n\nvar cradlefunctions_1 = __webpack_require__(/*! ./cradlefunctions */ \"./src/cradlefunctions.tsx\");\n\nvar scrolltracker_1 = __importDefault(__webpack_require__(/*! ./scrolltracker */ \"./src/scrolltracker.tsx\"));\n\nvar SCROLL_TIMEOUT_FOR_ONAFTERSCROLL = 200;\n\nvar Cradle = function Cradle(_a) {\n  var gap = _a.gap,\n      padding = _a.padding,\n      // runwaylength,\n  runwaycount = _a.runwaycount,\n      listsize = _a.listsize,\n      indexOffset = _a.indexOffset,\n      orientation = _a.orientation,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      getItem = _a.getItem,\n      placeholder = _a.placeholder,\n      functions = _a.functions,\n      styles = _a.styles,\n      scrollerName = _a.scrollerName,\n      scrollerID = _a.scrollerID; // functions and styles handled separately\n\n  var cradlePropsRef = react_1.useRef(null); // access by closures\n\n  cradlePropsRef.current = react_1.useMemo(function () {\n    return {\n      gap: gap,\n      padding: padding,\n      // runwaylength,\n      runwaycount: runwaycount,\n      listsize: listsize,\n      indexOffset: indexOffset,\n      orientation: orientation,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      getItem: getItem,\n      placeholder: placeholder,\n      scrollerName: scrollerName,\n      scrollerID: scrollerID\n    };\n  }, [gap, padding, // runwaylength,\n  runwaycount, listsize, indexOffset, orientation, cellHeight, cellWidth, getItem, placeholder]); // =============================================================================================\n  // --------------------------------------[ INITIALIZATION ]-------------------------------------\n  // =============================================================================================\n\n  var contentmanager = react_1.useContext(contentmanager_1.ContentContext); // -----------------------------------------------------------------------\n  // -----------------------------------[ utilites ]------------------------\n\n  var contentManager = react_1.useContext(contentmanager_1.ContentContext);\n  var isMounted = react_is_mounted_hook_1[\"default\"]();\n  var referenceIndexCallbackRef = react_1.useRef(functions === null || functions === void 0 ? void 0 : functions.referenceIndexCallback);\n  var itemObserverRef = react_1.useRef(null); // IntersectionObserver\n\n  var cradleIntersectionObserverRef = react_1.useRef(null);\n  var cradleResizeObserverRef = react_1.useRef(null); // -----------------------------------------------------------------------\n  // ---------------------------[ context data ]----------------------------\n\n  var viewportData = react_1.useContext(viewport_1.ViewportContext);\n  var viewportDataRef = react_1.useRef(null);\n  viewportDataRef.current = viewportData;\n\n  var _b = react_1.useState('setup'),\n      cradleState = _b[0],\n      saveCradleState = _b[1];\n\n  var cradleStateRef = react_1.useRef(null); // access by closures\n\n  cradleStateRef.current = cradleState; // console.log('scrollerID, cradleState', scrollerID, cradleState)\n  // -----------------------------------------------------------------------\n  // -------------------------[ control flags ]-----------------\n\n  var controlFlagsRef = react_1.useRef({\n    pauseItemObserver: true,\n    pauseCradleIntersectionObserver: true,\n    pauseCradleResizeObserver: true,\n    pauseScrollingEffects: true,\n    isTailCradleInView: true,\n    isHeadCradleInView: true,\n    isCradleInView: true\n  }); // ------------------------------------------------------------------------\n  // -----------------------[ initialization effects ]-----------------------\n  //initialize host functions properties\n\n  react_1.useEffect(function () {\n    if (functions === null || functions === void 0 ? void 0 : functions.hasOwnProperty('scrollToItem')) {\n      functions.scrollToItem = scrollToItem;\n    }\n\n    if (functions === null || functions === void 0 ? void 0 : functions.hasOwnProperty('getVisibleList')) {\n      functions.getVisibleList = getVisibleList;\n    }\n\n    if (functions === null || functions === void 0 ? void 0 : functions.hasOwnProperty('getContentList')) {\n      functions.getContentList = getContentList;\n    }\n\n    if (functions === null || functions === void 0 ? void 0 : functions.hasOwnProperty('reload')) {\n      functions.reload = reload;\n    }\n\n    referenceIndexCallbackRef.current = functions === null || functions === void 0 ? void 0 : functions.referenceIndexCallback;\n  }, [functions]); // initialize window scroll listener\n\n  react_1.useEffect(function () {\n    var viewportData = viewportDataRef.current;\n    viewportData.elementref.current.addEventListener('scroll', onScroll);\n    contentManager.setScrollerContentlist(cradlePropsRef.current.scrollerID);\n    return function () {\n      // console.log('unmounting cradle:scrollerName, portals',\n      //     scrollerName,cradleContentRef.current.portalData)\n      viewportData.elementref.current && viewportData.elementref.current.removeEventListener('scroll', onScroll);\n    };\n  }, []); // -----------------------------------------------------------------------\n  // -----------------------[ reconfiguration effects ]---------------------\n  // trigger resizing based on viewport state\n\n  react_1.useEffect(function () {\n    // console.log('viewportData.isResizing', viewportData.isResizing)\n    if (cradleStateRef.current == 'setup') return;\n\n    if (viewportData.isResizing) {\n      callingReferenceIndexDataRef.current = __assign({}, stableReferenceIndexDataRef.current); // console.log('calling resizing with', callingReferenceIndexDataRef.current)\n\n      controlFlagsRef.current.pauseItemObserver = true;\n      controlFlagsRef.current.pauseCradleIntersectionObserver = true;\n      controlFlagsRef.current.pauseCradleResizeObserver = true;\n      controlFlagsRef.current.pauseScrollingEffects = true;\n      saveCradleState('resizing');\n    } // complete resizing mode\n\n\n    if (!viewportData.isResizing && cradleStateRef.current == 'resizing') {\n      saveCradleState('resize');\n    }\n  }, [viewportData.isResizing]); // reload for changed parameters\n\n  react_1.useEffect(function () {\n    if (cradleStateRef.current == 'setup') return; // let spineoffset\n    // if (cradlePropsRef.current.orientation == 'vertical') {\n    //     spineoffset = spineCradleElementRef.current.offsetTop - viewportDataRef.current.elementref.current.scrollTop\n    // } else {\n    //     spineoffset = spineCradleElementRef.current.offsetLeft - viewportDataRef.current.elementref.current.scrollLeft\n    // }\n\n    callingReferenceIndexDataRef.current = __assign({}, stableReferenceIndexDataRef.current);\n    controlFlagsRef.current.pauseItemObserver = true; // pauseCradleIntersectionObserverRef.current = true\n\n    controlFlagsRef.current.pauseScrollingEffects = true;\n    saveCradleState('reload');\n  }, [listsize, cellHeight, cellWidth, gap, padding]); // trigger pivot on change in orientation\n\n  react_1.useEffect(function () {\n    if (cradleStateRef.current != 'setup') {\n      callingReferenceIndexDataRef.current = __assign({}, stableReferenceIndexDataRef.current); // let orientation = cradlePropsRef.current.orientation\n      // get previous ration\n\n      var previousCellPixelLength = orientation == 'vertical' ? cradlePropsRef.current.cellWidth : cradlePropsRef.current.cellHeight;\n      var previousSpineOffset = callingReferenceIndexDataRef.current.spineoffset;\n      var previousratio = previousSpineOffset / previousCellPixelLength;\n      var currentCellPixelLength = orientation == 'vertical' ? cradlePropsRef.current.cellHeight : cradlePropsRef.current.cellWidth;\n      var currentSpineOffset = previousratio * currentCellPixelLength; // scrollReferenceIndexDataRef.current.spineoffset = \n\n      callingReferenceIndexDataRef.current.spineoffset = Math.round(currentSpineOffset);\n      controlFlagsRef.current.pauseItemObserver = true; // pauseCradleIntersectionObserverRef.current = true\n\n      controlFlagsRef.current.pauseScrollingEffects = true;\n      saveCradleState('pivot');\n    }\n\n    var cradleContent = cradleContentRef.current;\n    cradleContent.headModel = [];\n    cradleContent.tailModel = [];\n    cradleContent.headView = [];\n    cradleContent.tailView = [];\n  }, [orientation]); // =======================================================================\n  // -------------------------[ OPERATION ]---------------------------------\n  // =======================================================================\n  // -----------------------------------------------------------------------\n  // ------------------------[ session data ]-------------------------------\n  // ------------------ current location -- first tail visible item -------------\n\n  var instanceIdCounterRef = react_1.useRef(0);\n  var instanceIdMapRef = react_1.useRef(new Map());\n  var scrollReferenceIndexDataRef = react_1.useRef({\n    index: Math.min(indexOffset, listsize - 1) || 0,\n    spineoffset: padding\n  }); // access by closures\n  // set by onScroll at the end of scroll sessions\n\n  var stableReferenceIndexDataRef = react_1.useRef(scrollReferenceIndexDataRef.current); // anticipate calling of operation which requires ReferenceIndex data\n\n  var callingReferenceIndexDataRef = react_1.useRef(stableReferenceIndexDataRef.current); // anticipate reposition\n  // -------------------------------[ cradle data ]-------------------------------------\n  // TODO: create a datamodel object for this?\n  // cradle butterfly html components\n\n  var headCradleElementRef = react_1.useRef(null);\n  var tailCradleElementRef = react_1.useRef(null);\n  var spineCradleElementRef = react_1.useRef(null);\n  var cradleElementsRef = react_1.useRef({\n    head: headCradleElementRef,\n    tail: tailCradleElementRef,\n    spine: spineCradleElementRef\n  });\n  react_1.useEffect(function () {\n    if (scrollerID == 0 || !spineCradleElementRef.current) return;\n    var parentscrollerid;\n    var parentindex;\n    var el = spineCradleElementRef.current;\n\n    while (el) {\n      // console.log('dataset',el.dataset, el)\n      if (el.dataset && el.dataset.type == 'portalcontainer') {\n        parentindex = parseInt(el.dataset.index);\n        parentscrollerid = parseInt(el.dataset.scrollerid);\n        break;\n      } else {\n        el = el.parentElement;\n      }\n    }\n\n    if (!el) {\n      console.log('ERROR: parent portalcontainer not found');\n      return;\n    }\n\n    portalRef.current = contentmanager.getContentlistItem(parentscrollerid, parentindex); // console.log('viewport of scrollerID has parentscrollerid and parentindex for portal', \n    //     scrollerID, parentscrollerid, parentindex,portalRef.current)\n    // portalIndexRef.current = el.dataset.index\n  }, [spineCradleElementRef.current]);\n  var cradleContentRef = react_1.useRef({\n    cradleModel: null,\n    headModel: null,\n    tailModel: null,\n    headView: [],\n    tailView: []\n  }); // item elements cache...\n\n  var itemElementsRef = react_1.useRef(new Map()); // items register their element\n  // ------------------------------[ cradle configuration ]---------------------------\n\n  var viewportDimensions = viewportData.viewportDimensions;\n  var viewportheight = viewportDimensions.height,\n      viewportwidth = viewportDimensions.width;\n  var crosscount = react_1.useMemo(function () {\n    var crosscount;\n    var size = orientation == 'horizontal' ? viewportheight : viewportwidth;\n    var crossLength = orientation == 'horizontal' ? cellHeight : cellWidth;\n    var lengthforcalc = size - padding * 2 + gap; // length of viewport\n\n    var tilelengthforcalc = crossLength + gap;\n    tilelengthforcalc = Math.min(tilelengthforcalc, lengthforcalc); // result cannot be less than 1\n\n    crosscount = Math.floor(lengthforcalc / tilelengthforcalc);\n    return crosscount;\n  }, [orientation, cellWidth, cellHeight, gap, padding, viewportheight, viewportwidth]); // const crosscountRef = useRef(crosscount) // for easy reference by observer\n  // crosscountRef.current = crosscount // available for observer closure\n\n  var _c = react_1.useMemo(function () {\n    var viewportLength, cellLength;\n\n    if (orientation == 'vertical') {\n      viewportLength = viewportheight;\n      cellLength = cellHeight;\n    } else {\n      viewportLength = viewportwidth;\n      cellLength = cellWidth;\n    }\n\n    cellLength += gap;\n    var viewportrowcount = Math.ceil(viewportLength / cellLength);\n    var cradleRowcount = viewportrowcount + runwaycount * 2;\n    var itemcount = cradleRowcount * crosscount;\n\n    if (itemcount > listsize) {\n      itemcount = listsize;\n      cradleRowcount = Math.ceil(itemcount / crosscount);\n    }\n\n    return [cradleRowcount, viewportrowcount];\n  }, [orientation, cellWidth, cellHeight, gap, listsize, // padding,\n  viewportheight, viewportwidth, runwaycount, crosscount]),\n      cradleRowcount = _c[0],\n      viewportRowcount = _c[1]; // const cradleRowcountRef = useRef(null)\n  // cradleRowcountRef.current = cradleRowcount\n  // const viewportRowcountRef = useRef(null)\n  // viewportRowcountRef.current = viewportRowcount\n\n\n  var cradleConfigRef = react_1.useRef({\n    crosscount: crosscount,\n    cradleRowcount: cradleRowcount,\n    viewportRowcount: viewportRowcount,\n    itemObserverThreshold: ITEM_OBSERVER_THRESHOLD,\n    listRowcount: Math.ceil(listsize / crosscount)\n  });\n  cradleConfigRef.current = {\n    crosscount: crosscount,\n    cradleRowcount: cradleRowcount,\n    viewportRowcount: viewportRowcount,\n    itemObserverThreshold: ITEM_OBSERVER_THRESHOLD,\n    listRowcount: Math.ceil(listsize / crosscount)\n  }; // ----------------------------------[ cradle default styles]----------------------------------\n  // base styles\n\n  var cradleHeadStyle = react_1.useMemo(function () {\n    var bottom, left, top, right;\n\n    if (orientation == 'vertical') {\n      bottom = 0;\n      left = 0;\n      right = 0;\n      top = 'auto';\n    } else {\n      bottom = 0;\n      left = 'auto';\n      right = 0;\n      top = 0;\n    }\n\n    return __assign(__assign({}, {\n      position: 'absolute',\n      backgroundColor: 'blue',\n      display: 'grid',\n      gridGap: gap + 'px',\n      padding: padding + 'px',\n      justifyContent: 'start',\n      alignContent: 'start',\n      boxSizing: 'border-box',\n      bottom: bottom,\n      left: left,\n      right: right,\n      top: top\n    }), styles === null || styles === void 0 ? void 0 : styles.cradle);\n  }, [gap, padding, styles, orientation]);\n  var cradleTailStyle = react_1.useMemo(function () {\n    var bottom, left, top, right;\n\n    if (orientation == 'vertical') {\n      bottom = 'auto';\n      left = 0;\n      right = 0;\n      top = 0;\n    } else {\n      bottom = 0;\n      left = 0;\n      right = 'auto';\n      top = 0;\n    }\n\n    return __assign(__assign({}, {\n      position: 'absolute',\n      backgroundColor: 'blue',\n      display: 'grid',\n      gridGap: gap + 'px',\n      padding: padding + 'px',\n      justifyContent: 'start',\n      alignContent: 'start',\n      boxSizing: 'border-box',\n      top: top,\n      left: left,\n      right: right,\n      bottom: bottom\n    }), styles === null || styles === void 0 ? void 0 : styles.cradle);\n  }, [gap, padding, styles, orientation]); // redundant\n\n  var cradleSpineStyle = react_1.useMemo(function () {\n    var styleobj = {\n      position: 'relative'\n    };\n    return styleobj;\n  }, [padding, orientation]); // enhanced styles for grid\n\n  var _d = react_1.useMemo(function () {\n    // merge base style and revisions (by observer)\n    var headCradleStyles = __assign({}, cradleHeadStyle);\n\n    var tailCradleStyles = __assign({}, cradleTailStyle);\n\n    var _a = cradlefunctions_1.setCradleGridStyles({\n      orientation: orientation,\n      headCradleStyles: headCradleStyles,\n      tailCradleStyles: tailCradleStyles,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding,\n      crosscount: crosscount,\n      viewportheight: viewportheight,\n      viewportwidth: viewportwidth\n    }),\n        headstyles = _a[0],\n        tailstyles = _a[1];\n\n    var top, left, width, height;\n\n    if (orientation == 'vertical') {\n      top = padding + 'px';\n      left = 'auto';\n      width = '100%';\n      height = 'auto';\n    } else {\n      top = 'auto';\n      left = padding + 'px';\n      width = 0;\n      height = '100%';\n    }\n\n    var spinestyle = {\n      position: 'relative',\n      top: top,\n      left: left,\n      width: width,\n      height: height\n    };\n    return [headstyles, tailstyles, spinestyle];\n  }, [orientation, cellHeight, cellWidth, gap, padding, viewportheight, viewportwidth, crosscount]),\n      headstyle = _d[0],\n      tailstyle = _d[1],\n      spinestyle = _d[2];\n\n  cradleHeadStyle = headstyle;\n  cradleTailStyle = tailstyle;\n  cradleSpineStyle = spinestyle; // =================================================================================\n  // -------------------------[ IntersectionObserver support]-------------------------\n  // =================================================================================\n\n  /*\n      There are two interection observers, one for the cradle, and another for itemShells;\n          both against the viewport.\n      There is also a resize observer for the cradle wings, to respond to size changes of\n          variable cells.\n  */\n  // --------------------------[ cradle observers ]-----------------------------------\n  // set up cradle resizeobserver\n\n  react_1.useEffect(function () {\n    // ResizeObserver\n    cradleResizeObserverRef.current = new LocalResizeObserver(cradleresizeobservercallback);\n    var cradleElements = cradleElementsRef.current;\n    cradleResizeObserverRef.current.observe(cradleElements.head.current);\n    cradleResizeObserverRef.current.observe(cradleElements.tail.current);\n    return function () {\n      cradleResizeObserverRef.current.disconnect();\n    };\n  }, []);\n  var cradleresizeobservercallback = react_1.useCallback(function (entries) {\n    if (controlFlagsRef.current.pauseCradleResizeObserver) return;\n  }, []); // this sets up an IntersectionObserver of the cradle against the viewport. When the\n  // cradle goes out of the observer scope, the \"repositioning\" cradle state is triggerd.\n\n  react_1.useEffect(function () {\n    var viewportData = viewportDataRef.current; // IntersectionObserver\n\n    cradleIntersectionObserverRef.current = new IntersectionObserver(cradleintersectionobservercallback, {\n      root: viewportData.elementref.current,\n      threshold: 0\n    });\n    var cradleElements = cradleElementsRef.current;\n    cradleIntersectionObserverRef.current.observe(cradleElements.head.current);\n    cradleIntersectionObserverRef.current.observe(cradleElements.tail.current);\n    return function () {\n      cradleIntersectionObserverRef.current.disconnect();\n    };\n  }, []);\n  var cradleintersectionobservercallback = react_1.useCallback(function (entries) {\n    var controlFlags = controlFlagsRef.current;\n    if (controlFlags.pauseCradleIntersectionObserver) return;\n\n    for (var i = 0; i < entries.length; i++) {\n      var entry = entries[i];\n\n      if (entry.target.dataset.name == 'head') {\n        controlFlags.isHeadCradleInView = entry.isIntersecting;\n      } else {\n        controlFlags.isTailCradleInView = entry.isIntersecting;\n      }\n    }\n\n    controlFlags.isCradleInView = controlFlags.isHeadCradleInView || controlFlags.isTailCradleInView;\n\n    if (!controlFlags.isCradleInView) {\n      // console.log('inside cradleintersectionobservercallback portalRef',portalRef)\n      var cradleState_1 = cradleStateRef.current;\n\n      if (!viewportDataRef.current.isResizing && !(cradleState_1 == 'resize') && !(cradleState_1 == 'repositioning') && !(cradleState_1 == 'reposition') && !(cradleState_1 == 'pivot') && !portalRef.current.reparenting) {\n        var rect = viewportDataRef.current.elementref.current.getBoundingClientRect();\n        var top_1 = rect.top,\n            right = rect.right,\n            bottom = rect.bottom,\n            left = rect.left;\n        var width = right - left,\n            height = bottom - top_1;\n        viewportDataRef.current.viewportDimensions = {\n          top: top_1,\n          right: right,\n          bottom: bottom,\n          left: left,\n          width: width,\n          height: height\n        }; // update for scrolltracker\n\n        controlFlags.pauseItemObserver = true; // pauseCradleIntersectionObserverRef.current = true\n        // console.log('REPOSITIONING scrollerID', scrollerID, portalRef.current)\n\n        var cradleContent_1 = cradleContentRef.current;\n        cradleContent_1.headModel = [];\n        cradleContent_1.tailModel = [];\n        cradleContent_1.headView = [];\n        cradleContent_1.tailView = [];\n        saveCradleState('repositioning');\n      }\n    }\n  }, []); // --------------------------[ item shell observer ]-----------------------------\n\n  /*\n      The cradle content is driven by notifications from the IntersectionObserver.\n      - as the user scrolls the cradle, which has a runwaycount at both the leading\n          and trailing edges, itemShells scroll into or out of the scope of the observer\n          (defined by the width/height of the viewport + the lengths of the runways). The observer\n          notifies the app (through itemobservercallback() below) at the crossings of the itemshells\n          of the defined observer cradle boundaries.\n           The no-longer-intersecting notifications trigger dropping of that number of affected items from\n          the cradle contentlist. The dropping of items from the trailing end of the content list\n          triggers the addition of an equal number of items at the leading edge of the cradle content.\n           Technically, the opposite end position spec is set (top or left depending on orientation),\n          and the matching end position spec is set to 'auto' when items are added. This causes items to be\n          \"squeezed\" into the leading or trailing ends of the ui content (out of view) as appropriate.\n           There are exceptions for setup and edge cases.\n  */\n  // change orientation\n\n  react_1.useEffect(function () {\n    if (itemObserverRef.current) itemObserverRef.current.disconnect();\n    itemObserverRef.current = new IntersectionObserver(itemobservercallback, {\n      root: viewportDataRef.current.elementref.current,\n      threshold: cradleConfigRef.current.itemObserverThreshold\n    });\n    return function () {\n      itemObserverRef.current.disconnect();\n    };\n  }, [orientation]); // the async callback from IntersectionObserver.\n\n  var itemobservercallback = react_1.useCallback(function (entries) {\n    var movedentries = [];\n\n    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n      var entry = entries_1[_i];\n\n      if (entry.target.dataset.initialized) {\n        movedentries.push(entry);\n      } else {\n        entry.target.dataset.initialized = true;\n      }\n    }\n\n    if (controlFlagsRef.current.pauseItemObserver) {\n      return;\n    }\n\n    isMounted() && updateCradleContent(movedentries);\n  }, []);\n  var previousScrollForwardRef = react_1.useRef(undefined);\n\n  var updateCradleContent = function updateCradleContent(entries, source) {\n    // console.log('updating cradle content: entries.length, source', entries.length, source)\n    if (source === void 0) {\n      source = 'notifications';\n    }\n\n    var viewportData = viewportDataRef.current;\n    var viewportElement = viewportData.elementref.current;\n    var cradleProps = cradlePropsRef.current;\n    var scrollOffset;\n\n    if (cradleProps.orientation == 'vertical') {\n      scrollOffset = viewportElement.scrollTop;\n    } else {\n      scrollOffset = viewportElement.scrollLeft;\n    }\n\n    if (scrollOffset < 0) {\n      // for Safari elastic bounce at top of scroll\n      return;\n    } // console.log('updateCradleContent scrollOffset', scrollOffset)\n    // ----------------------------[ 1. initialize ]----------------------------\n\n\n    var scrollPositions = scrollPositionsRef.current;\n    var scrollforward;\n\n    if (scrollPositions.current == scrollPositions.previous) {\n      // edge case \n      scrollforward = previousScrollForwardRef.current;\n    } else {\n      scrollforward = scrollPositions.current > scrollPositions.previous;\n      previousScrollForwardRef.current = scrollforward;\n    }\n\n    if (scrollforward === undefined) {\n      return; // init call\n    }\n\n    var cradleElements = cradleElementsRef.current;\n    var cradleContent = cradleContentRef.current;\n    var cradleConfig = cradleConfigRef.current;\n    var itemElements = itemElementsRef.current;\n    var modelcontentlist = cradleContent.cradleModel;\n    var cradleReferenceIndex = modelcontentlist[0].props.index; // let cradleConfig = cradleConfigRef.current\n    // --------------------[ 2. filter intersections list ]-----------------------\n    // filter out inapplicable intersection entries\n    // we're only interested in intersections proximal to the spine\n\n    var intersections = cradlefunctions_1.isolateRelevantIntersections({\n      scrollforward: scrollforward,\n      intersections: entries,\n      cradleContent: cradleContent,\n      itemObserverThreshold: cradleConfig.itemObserverThreshold\n    }); // console.log('intersections', intersections)\n    // --------------------------------[ 3. Calculate shifts ]-------------------------------\n\n    var _a = cradlefunctions_1.calcContentShifts({\n      cradleProps: cradleProps,\n      cradleConfig: cradleConfig,\n      cradleElements: cradleElements,\n      cradleContent: cradleContent,\n      viewportElement: viewportElement,\n      itemElements: itemElements,\n      intersections: intersections,\n      scrollforward: scrollforward\n    }),\n        cradleindex = _a[0],\n        cradleitemshift = _a[1],\n        spineReferenceIndex = _a[2],\n        referenceitemshift = _a[3],\n        spineOffset = _a[4],\n        contentCount = _a[5]; // console.log('in updateCradleContent: cradleindex, cradleitemshift, spineReferenceIndex, referenceitemshift, spineOffset, contentCount',\n    //     cradleindex, cradleitemshift, spineReferenceIndex, referenceitemshift, spineOffset, contentCount)\n\n\n    if (referenceitemshift == 0 && cradleitemshift == 0) return; // ------------------[ 4. calculate head and tail consolidated cradle content changes ]-----------------\n\n    var _b = cradlefunctions_1.calcHeadAndTailChanges({\n      cradleProps: cradleProps,\n      cradleConfig: cradleConfig,\n      cradleContent: cradleContent,\n      cradleshiftcount: cradleitemshift,\n      scrollforward: scrollforward,\n      cradleReferenceIndex: cradleReferenceIndex\n    }),\n        headchangecount = _b[0],\n        tailchangecount = _b[1]; // console.log('headchangecount,tailchangecount',headchangecount,tailchangecount)\n    // ----------------------------------[ 5. reconfigure cradle content ]--------------------------\n    // collect modified content\n\n\n    var localContentList;\n\n    if (headchangecount || tailchangecount) {\n      localContentList = cradlefunctions_1.getUIContentList({\n        cradleProps: cradleProps,\n        cradleConfig: cradleConfig,\n        contentCount: contentCount,\n        localContentList: modelcontentlist,\n        headchangecount: headchangecount,\n        tailchangecount: tailchangecount,\n        cradleReferenceIndex: cradleReferenceIndex,\n        observer: itemObserverRef.current,\n        callbacks: callbacksRef.current,\n        instanceIdCounterRef: instanceIdCounterRef\n      });\n    } else {\n      localContentList = modelcontentlist;\n    } // console.log('localContentList.length', localContentList.length)\n    // ----------------------------------[ 7. allocate cradle content ]--------------------------\n\n\n    var _c = cradlefunctions_1.allocateContentList({\n      contentlist: localContentList,\n      spineReferenceIndex: spineReferenceIndex\n    }),\n        headcontent = _c[0],\n        tailcontent = _c[1]; // console.log('headcontent.length, tailcontent.length',headcontent.length, tailcontent.length)\n\n\n    cradleContent.cradleModel = localContentList;\n    cradleContent.headView = cradleContent.headModel = headcontent;\n    cradleContent.tailView = cradleContent.tailModel = tailcontent; // -------------------------------[ 8. set css changes ]-------------------------\n\n    if (spineOffset !== undefined) {\n      var cradleElements_1 = cradleElementsRef.current;\n\n      if (cradleProps.orientation == 'vertical') {\n        scrollPositionDataRef.current = {\n          property: 'scrollTop',\n          value: viewportElement.scrollTop\n        };\n        cradleElements_1.spine.current.style.top = viewportElement.scrollTop + spineOffset + 'px';\n        cradleElements_1.spine.current.style.left = 'auto';\n        cradleElements_1.head.current.style.paddingBottom = headcontent.length ? cradleProps.gap + 'px' : 0;\n      } else {\n        scrollPositionDataRef.current = {\n          property: 'scrollLeft',\n          value: viewportElement.scrollLeft\n        };\n        cradleElements_1.spine.current.style.top = 'auto';\n        cradleElements_1.spine.current.style.left = viewportElement.scrollLeft + spineOffset + 'px';\n        cradleElements_1.head.current.style.paddingRight = headcontent.length ? cradleProps.gap + 'px' : 0;\n      }\n    }\n\n    scrollReferenceIndexDataRef.current = {\n      index: spineReferenceIndex,\n      spineoffset: spineOffset\n    };\n    saveCradleState('updatecontent');\n  }; // End of IntersectionObserver support\n  // ========================================================================================\n  // -------------------------------[ Assembly of content]-----------------------------------\n  // ========================================================================================\n  // reset cradle, including allocation between head and tail parts of the cradle\n\n\n  var setCradleContent = function setCradleContent(cradleState, referenceIndexData) {\n    // console.log('setCradleContent start: cradleState, referenceIndexData',cradleState, referenceIndexData)\n    var cradleProps = cradlePropsRef.current;\n    var visibletargetindexoffset = referenceIndexData.index,\n        visibletargetscrolloffset = referenceIndexData.spineoffset;\n    var cellHeight = cradleProps.cellHeight,\n        cellWidth = cradleProps.cellWidth,\n        orientation = cradleProps.orientation,\n        runwaycount = cradleProps.runwaycount,\n        gap = cradleProps.gap,\n        padding = cradleProps.padding,\n        listsize = cradleProps.listsize;\n    var cradleConfig = cradleConfigRef.current;\n    var cradleRowcount = cradleConfig.cradleRowcount,\n        crosscount = cradleConfig.crosscount,\n        viewportRowcount = cradleConfig.viewportRowcount;\n\n    if (cradleState == 'reposition') {\n      visibletargetscrolloffset = visibletargetindexoffset == 0 ? padding : gap;\n    }\n\n    var localContentList = [];\n    var cradleContent = cradleContentRef.current; // cradleContent.portalData.clear()\n\n    var _a = cradlefunctions_1.getContentListRequirements({\n      cradleProps: cradleProps,\n      cradleConfig: cradleConfig,\n      visibletargetindexoffset: visibletargetindexoffset,\n      targetViewportOffset: visibletargetscrolloffset,\n      viewportElement: viewportDataRef.current.elementref.current\n    }),\n        cradleReferenceIndex = _a.cradleReferenceIndex,\n        referenceoffset = _a.referenceoffset,\n        contentCount = _a.contentCount,\n        scrollblockoffset = _a.scrollblockoffset,\n        spineOffset = _a.spineOffset,\n        spineadjustment = _a.spineadjustment; // console.log('setCradleContent getContentListRequirements: cradleReferenceIndex, referenceoffset, contentCount, scrollblockoffset, spineOffset, spineadjustment',\n    //     cradleReferenceIndex, referenceoffset, contentCount, scrollblockoffset, spineOffset, spineadjustment)\n    // returns content constrained by cradleRowcount\n\n\n    var childlist = cradlefunctions_1.getUIContentList({\n      cradleProps: cradleProps,\n      cradleConfig: cradleConfig,\n      contentCount: contentCount,\n      cradleReferenceIndex: cradleReferenceIndex,\n      headchangecount: 0,\n      tailchangecount: contentCount,\n      localContentList: localContentList,\n      callbacks: callbacksRef.current,\n      observer: itemObserverRef.current,\n      instanceIdCounterRef: instanceIdCounterRef\n    }); // console.log('childlist.length, contentCount, rows from setContent', childlist.length, contentCount, Math.ceil(contentCount/crosscount))\n\n    var _b = cradlefunctions_1.allocateContentList({\n      contentlist: childlist,\n      spineReferenceIndex: referenceoffset\n    }),\n        headcontentlist = _b[0],\n        tailcontentlist = _b[1]; // console.log('headcontentlist.length, tailcontentlist.length',headcontentlist.length, tailcontentlist.length)\n\n\n    if (headcontentlist.length == 0) {\n      spineOffset = padding;\n    }\n\n    cradleContent.cradleModel = childlist;\n    cradleContent.headModel = headcontentlist;\n    cradleContent.tailModel = tailcontentlist;\n    scrollReferenceIndexDataRef.current = stableReferenceIndexDataRef.current = {\n      index: referenceoffset,\n      spineoffset: spineOffset\n    }; // console.log('setting referenceindexdata in setCradleContent',stableReferenceIndexDataRef.current)\n\n    if (referenceIndexCallbackRef.current) {\n      var cstate = cradleState;\n      if (cstate == 'setreload') cstate = 'reload';\n      referenceIndexCallbackRef.current(stableReferenceIndexDataRef.current.index, 'setCradleContent', cstate);\n    } // console.log('scrollblockoffset, spineOffset, spineadjustment, headcontentlist.length',\n    //     scrollblockoffset, spineOffset, spineadjustment, headcontentlist.length)\n\n\n    var cradleElements = cradleElementsRef.current;\n\n    if (orientation == 'vertical') {\n      scrollPositionDataRef.current = {\n        property: 'scrollTop',\n        value: scrollblockoffset - spineOffset\n      };\n      cradleElements.spine.current.style.top = scrollblockoffset + spineadjustment + 'px';\n      cradleElements.spine.current.style.left = 'auto';\n      cradleElements.head.current.style.paddingBottom = headcontentlist.length ? cradleProps.gap + 'px' : 0; // console.log('CSS adjustments: scrollTop, scrollblockoffset, spineOffset, top, spineadjustment, headcontentlist.length','\\n',\n      //     scrollblockoffset  - spineOffset, scrollblockoffset, spineOffset, \n      //     scrollblockoffset + spineadjustment, spineadjustment, headcontentlist.length )\n    } else {\n      // orientation = 'horizontal'\n      scrollPositionDataRef.current = {\n        property: 'scrollLeft',\n        value: scrollblockoffset - spineOffset\n      };\n      cradleElements.spine.current.style.top = 'auto';\n      cradleElements.spine.current.style.left = scrollblockoffset + spineadjustment + 'px';\n      cradleElements.head.current.style.paddingRight = headcontentlist.length ? cradleProps.gap + 'px' : 0;\n    }\n  }; // =====================================================================================\n  // ----------------------------------[ state management ]-------------------------------\n  // =====================================================================================\n\n\n  var scrollTimeridRef = react_1.useRef(null);\n  var scrollPositionsRef = react_1.useRef({\n    current: 0,\n    previous: 0\n  }); // callback for scrolling\n\n  var onScroll = react_1.useCallback(function (e) {\n    var _a;\n\n    if (controlFlagsRef.current.pauseScrollingEffects) {\n      // console.log('returning from onScroll with pauseScrollingEffects true', \n      //     viewportDataRef.current.elementref.current.scrollTop)\n      return;\n    }\n\n    var viewportElement = viewportDataRef.current.elementref.current;\n    var scrollPositions = scrollPositionsRef.current;\n    var scrollPositioncurrent = cradlePropsRef.current.orientation == 'vertical' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n\n    if (scrollPositioncurrent < 0) {\n      // for Safari\n      return;\n    }\n\n    scrollPositions.previous = scrollPositions.current;\n    scrollPositions.current = //scrollPositioncurrent\n    cradlePropsRef.current.orientation == 'vertical' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n    clearTimeout(scrollTimeridRef.current);\n    var cradleState = cradleStateRef.current;\n    var cradleContent = cradleContentRef.current;\n\n    if (!viewportDataRef.current.isResizing) {\n      if (cradleState == 'ready' || cradleState == 'repositioning') {\n        if (cradleState == 'ready') {\n          var itemindex = (_a = cradleContent.tailModel[0]) === null || _a === void 0 ? void 0 : _a.props.index;\n\n          if (itemindex === undefined) {\n            console.log('ERROR: scroll encountered undefined tailcontent lead');\n          }\n\n          var spineoffset = void 0;\n          var cradleElements = cradleElementsRef.current;\n\n          if (cradlePropsRef.current.orientation == 'vertical') {\n            spineoffset = cradleElements.spine.current.offsetTop - viewportDataRef.current.elementref.current.scrollTop;\n          } else {\n            spineoffset = cradleElements.spine.current.offsetLeft - viewportDataRef.current.elementref.current.scrollLeft;\n          }\n\n          scrollReferenceIndexDataRef.current = {\n            index: itemindex,\n            spineoffset: spineoffset\n          };\n        } else {\n          scrollReferenceIndexDataRef.current = cradlefunctions_1.getScrollReferenceIndexData({\n            viewportData: viewportDataRef.current,\n            cradleProps: cradlePropsRef.current,\n            cradleConfig: cradleConfigRef.current\n          });\n          saveCradleState('updatereposition');\n        }\n\n        referenceIndexCallbackRef.current && referenceIndexCallbackRef.current(scrollReferenceIndexDataRef.current.index, 'scrolling', cradleState);\n      }\n    }\n\n    scrollTimeridRef.current = setTimeout(function () {\n      if (!isMounted()) return; // console.log('scrollerName, portalData after SCROLL:',scrollerName, cradleContentRef.current.portalData)\n\n      var spineoffset;\n      var cradleElements = cradleElementsRef.current;\n\n      if (cradlePropsRef.current.orientation == 'vertical') {\n        spineoffset = cradleElements.spine.current.offsetTop - viewportDataRef.current.elementref.current.scrollTop;\n      } else {\n        spineoffset = cradleElements.spine.current.offsetLeft - viewportDataRef.current.elementref.current.scrollLeft;\n      }\n\n      scrollReferenceIndexDataRef.current.spineoffset = spineoffset;\n      var cradleState = cradleStateRef.current;\n\n      if (!viewportDataRef.current.isResizing) {\n        var localrefdata = __assign({}, scrollReferenceIndexDataRef.current);\n\n        stableReferenceIndexDataRef.current = localrefdata;\n      }\n\n      switch (cradleState) {\n        case 'repositioning':\n          {\n            callingReferenceIndexDataRef.current = __assign({}, stableReferenceIndexDataRef.current);\n            saveCradleState('reposition');\n            break;\n          }\n\n        default:\n          {\n            // console.log('------- [ calling endofscroll ]-----------')\n            updateCradleContent([], 'endofscroll'); // for Safari to compensate for overscroll\n          }\n      }\n    }, SCROLL_TIMEOUT_FOR_ONAFTERSCROLL);\n  }, []); // data for state processing\n\n  var callingCradleState = react_1.useRef(cradleStateRef.current);\n  var headlayoutDataRef = react_1.useRef(null);\n  var scrollPositionDataRef = react_1.useRef(null); // this is the core state engine\n  // useLayout for suppressing flashes\n\n  react_1.useLayoutEffect(function () {\n    var viewportData = viewportDataRef.current;\n    var cradleContent = cradleContentRef.current;\n\n    switch (cradleState) {\n      case 'reload':\n        // cradleContent.portalData.clear()\n        saveCradleState('setreload');\n        break;\n\n      case 'updatereposition':\n        saveCradleState('repositioning');\n\n      case 'repositioning':\n        break;\n\n      case 'setscrolloffset':\n        {\n          viewportData.elementref.current[scrollPositionDataRef.current.property] = scrollPositionDataRef.current.value;\n          saveCradleState('normalize');\n          break;\n        }\n\n      case 'updatecontent':\n        {\n          // scroll\n          saveCradleState('ready');\n          break;\n        }\n\n      case 'content':\n        {\n          var cradleContent_2 = cradleContentRef.current;\n          cradleContent_2.headView = cradleContent_2.headModel;\n          cradleContent_2.tailView = cradleContent_2.tailModel;\n          saveCradleState('setscrolloffset'); //'normalize')\n\n          break;\n        }\n    }\n  }, [cradleState]); // standard processing stages\n\n  react_1.useEffect(function () {\n    var viewportData = viewportDataRef.current;\n\n    switch (cradleState) {\n      case 'setup':\n      case 'resize':\n      case 'pivot':\n      case 'setreload':\n      case 'reposition':\n        callingCradleState.current = cradleState;\n        saveCradleState('settle');\n        break;\n\n      case 'settle':\n        {\n          // console.log('settle (setCradleContent): state, refIndex',callingCradleState.current, callingReferenceIndexDataRef.current)\n          cradleContent.headModel = [];\n          cradleContent.tailModel = [];\n          cradleContent.headView = [];\n          cradleContent.tailView = [];\n          contentManager.resetScrollerContentList(scrollerID);\n          setCradleContent(callingCradleState.current, callingReferenceIndexDataRef.current);\n          saveCradleState('content'); //'setscrolloffset')\n\n          break;\n        }\n\n      case 'normalize':\n        {\n          setTimeout(function () {\n            if (!isMounted()) return; // console.log('inside normalize: viewportData.isResizing', viewportData.isResizing)\n\n            if (!viewportData.isResizing) {\n              // redundant scroll position to avoid accidental positioning at tail end of reposition\n              if (viewportData.elementref.current) {\n                // already unmounted if fails\n                var controlFlags = controlFlagsRef.current; // console.log('clearing control Flags', controlFlags)\n\n                controlFlags.pauseItemObserver && (controlFlags.pauseItemObserver = false);\n                controlFlags.pauseScrollingEffects && (controlFlags.pauseScrollingEffects = false);\n                controlFlags.pauseCradleIntersectionObserver && (controlFlags.pauseCradleIntersectionObserver = false);\n                controlFlags.pauseCradleResizeObserver && (controlFlags.pauseCradleResizeObserver = false);\n              }\n\n              if (controlFlagsRef.current.isCradleInView) {\n                saveCradleState('ready');\n              } else {\n                saveCradleState('repositioning');\n              }\n            } else {\n              saveCradleState('resizing');\n            } // console.log('portalData after set, scrollerName',cradleContentRef.current.portalData, scrollerName)\n\n          }, 100);\n          break;\n        }\n\n      case 'ready':\n        break;\n    }\n  }, [cradleState]); // =============================================================================\n  // ------------------------------[ callbacks ]----------------------------------\n  // =============================================================================\n  // on host demand\n\n  var getVisibleList = react_1.useCallback(function () {\n    // let cradleElements = cradleElementsRef.current\n    var cradleContent = cradleContentRef.current;\n    return cradlefunctions_1.calcVisibleItems({\n      itemElementMap: itemElementsRef.current,\n      viewportElement: viewportDataRef.current.elementref.current,\n      cradleElements: cradleElementsRef.current,\n      // tailElement:cradlePropsRef.current.orientation,\n      // spineElement:cradleElements.spine.current,\n      cradleProps: cradlePropsRef.current,\n      // orientation:cradlePropsRef.current.orientation,\n      cradleContent: cradleContentRef.current\n    });\n  }, []);\n  var getContentList = react_1.useCallback(function () {\n    var contentlist = Array.from(itemElementsRef.current);\n    contentlist.sort(function (a, b) {\n      return a[0] < b[0] ? -1 : 1;\n    });\n    return contentlist;\n  }, []);\n  var reload = react_1.useCallback(function () {\n    controlFlagsRef.current.pauseItemObserver = true;\n    controlFlagsRef.current.pauseScrollingEffects = true;\n    var spineoffset;\n    var cradleElements = cradleElementsRef.current;\n\n    if (cradlePropsRef.current.orientation == 'vertical') {\n      spineoffset = cradleElements.spine.current.offsetTop - viewportDataRef.current.elementref.current.scrollTop;\n    } else {\n      spineoffset = cradleElements.spine.current.offsetLeft - viewportDataRef.current.elementref.current.scrollLeft;\n    }\n\n    callingReferenceIndexDataRef.current = __assign({}, stableReferenceIndexDataRef.current);\n    saveCradleState('reload');\n  }, []);\n  var portalRef = react_1.useRef(null); // content item registration callback; called from item\n\n  var getItemElementData = react_1.useCallback(function (itemElementData, reportType) {\n    var index = itemElementData[0],\n        shellref = itemElementData[1],\n        portalDataRef = itemElementData[2]; // console.log('getItemElementData: index, shellref, portalDataRef', index, shellref, portalDataRef)\n    // portalRef.current = portalDataRef\n\n    if (reportType == 'register') {\n      itemElementsRef.current.set(index, shellref); // cradleContentRef.current.portalData.set(index,portalDataRef)\n    } else if (reportType == 'unregister') {\n      itemElementsRef.current[\"delete\"](index);\n    }\n  }, []);\n  var scrollToItem = react_1.useCallback(function (index) {\n    controlFlagsRef.current.pauseItemObserver = true;\n    controlFlagsRef.current.pauseScrollingEffects = true;\n    callingReferenceIndexDataRef.current = {\n      index: index,\n      spineoffset: 0\n    };\n    saveCradleState('reposition');\n  }, []);\n  var callbacksRef = react_1.useRef({\n    getElementData: getItemElementData\n  }); // =============================================================================\n  // ------------------------------[ RENDER... ]----------------------------------\n  // =============================================================================\n\n  var scrollTrackerArgs = react_1.useMemo(function () {\n    return {\n      top: viewportDimensions.top + 3,\n      left: viewportDimensions.left + 3,\n      indexOffset: scrollReferenceIndexDataRef.current.index,\n      listsize: cradlePropsRef.current.listsize,\n      styles: cradlePropsRef.current.styles\n    };\n  }, [viewportDimensions, scrollReferenceIndexDataRef.current, cradlePropsRef]);\n  var cradleContent = cradleContentRef.current;\n  return react_1[\"default\"].createElement(react_1[\"default\"].Fragment, null, cradleStateRef.current == 'updatereposition' || cradleStateRef.current == 'repositioning' ? react_1[\"default\"].createElement(scrolltracker_1[\"default\"], {\n    top: scrollTrackerArgs.top,\n    left: scrollTrackerArgs.left,\n    offset: scrollTrackerArgs.indexOffset,\n    listsize: scrollTrackerArgs.listsize,\n    styles: scrollTrackerArgs.styles\n  }) : null, react_1[\"default\"].createElement(\"div\", {\n    style: cradleSpineStyle,\n    ref: spineCradleElementRef,\n    \"data-name\": 'spine'\n  }, true ? react_1[\"default\"].createElement(\"div\", {\n    style: {\n      zIndex: 1,\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      boxShadow: '0 0 5px 3px red'\n    }\n  }) : undefined, react_1[\"default\"].createElement(\"div\", {\n    \"data-name\": 'head',\n    ref: headCradleElementRef,\n    style: cradleHeadStyle\n  }, cradleStateRef.current != 'setup' ? cradleContent.headView : null), react_1[\"default\"].createElement(\"div\", {\n    \"data-name\": 'tail',\n    ref: tailCradleElementRef,\n    style: cradleTailStyle\n  }, cradleStateRef.current != 'setup' ? cradleContent.tailView : null)));\n}; // Cradle\n\n\nexports[\"default\"] = Cradle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle.tsx\n");

/***/ }),

/***/ "./src/cradlefunctions.tsx":
/*!*********************************!*\
  !*** ./src/cradlefunctions.tsx ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // cradlefunctions.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setCradleGridStyles = exports.allocateContentList = exports.getUIContentList = exports.calcHeadAndTailChanges = exports.calcContentShifts = exports.isolateRelevantIntersections = exports.getContentListRequirements = exports.getScrollReferenceIndexData = exports.calcVisibleItems = void 0;\n/******************************************************************************************\n ------------------------------------[ SUPPORTING FUNCTIONS ]------------------------------\n*******************************************************************************************/\n\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar itemshell_1 = __importDefault(__webpack_require__(/*! ./itemshell */ \"./src/itemshell.tsx\"));\n\nvar detect_browser_1 = __webpack_require__(/*! detect-browser */ \"./node_modules/detect-browser/es/index.js\");\n\nvar browser = detect_browser_1.detect();\n\nvar calcVisibleItems = function calcVisibleItems(_a) {\n  var itemElementMap = _a.itemElementMap,\n      viewportElement = _a.viewportElement,\n      cradleElements = _a.cradleElements,\n      cradleProps = _a.cradleProps,\n      cradleContent = _a.cradleContent;\n  var headElement = cradleElements.head.current;\n  var spineElement = cradleElements.spine.current;\n  var orientation = cradleProps.orientation;\n  var headlist = cradleContent.headView;\n  var itemlistindexes = Array.from(itemElementMap.keys());\n  itemlistindexes.sort(function (a, b) {\n    return a < b ? -1 : 1;\n  });\n  var headlistindexes = [];\n\n  for (var _i = 0, headlist_1 = headlist; _i < headlist_1.length; _i++) {\n    var item = headlist_1[_i];\n    headlistindexes.push(parseInt(item.props.index));\n  }\n\n  var list = [];\n  var cradleTop = headElement.offsetTop + spineElement.offsetTop,\n      cradleLeft = headElement.offsetLeft + spineElement.offsetLeft;\n  var scrollblockTopOffset = -viewportElement.scrollTop,\n      scrollblockLeftOffset = -viewportElement.scrollLeft,\n      viewportHeight = viewportElement.offsetHeight,\n      viewportWidth = viewportElement.offsetWidth,\n      viewportTopOffset = -scrollblockTopOffset,\n      viewportBottomOffset = -scrollblockTopOffset + viewportHeight;\n\n  for (var _b = 0, itemlistindexes_1 = itemlistindexes; _b < itemlistindexes_1.length; _b++) {\n    var index = itemlistindexes_1[_b];\n    var element = itemElementMap.get(index).current;\n    var inheadlist = headlistindexes.includes(index);\n    var top_1 = inheadlist ? element.offsetTop : (orientation == 'vertical' ? headElement.offsetHeight : 0) + element.offsetTop,\n        left = inheadlist ? element.offsetLeft : (orientation == 'horizontal' ? headElement.offsetWidth : 0) + element.offsetLeft,\n        width = element.offsetWidth,\n        height = element.offsetHeight,\n        right = left + width,\n        bottom = top_1 + height;\n    var itemTopOffset = scrollblockTopOffset + cradleTop + top_1,\n        // offset from top of viewport\n    itemBottomOffset = scrollblockTopOffset + cradleTop + bottom,\n        // offset from top of viewport\n    itemLeftOffset = scrollblockLeftOffset + cradleLeft + left,\n        itemRightOffset = scrollblockLeftOffset + cradleLeft + right;\n    var isVisible = false; // default\n\n    var topPortion = void 0,\n        bottomPortion = void 0,\n        leftPortion = void 0,\n        rightPortion = void 0;\n\n    if (itemTopOffset < 0 && itemBottomOffset > 0) {\n      orientation == 'vertical' && (isVisible = true);\n      bottomPortion = itemBottomOffset;\n      topPortion = bottomPortion - height;\n    } else if (itemTopOffset >= 0 && itemBottomOffset < viewportHeight) {\n      orientation == 'vertical' && (isVisible = true);\n      topPortion = height;\n      bottomPortion = 0;\n    } else if (itemTopOffset > 0 && itemTopOffset - viewportHeight < 0) {\n      orientation == 'vertical' && (isVisible = true);\n      topPortion = viewportHeight - itemTopOffset;\n      bottomPortion = topPortion - height;\n    } else {\n      if (orientation == 'vertical') continue;\n    }\n\n    if (itemLeftOffset < 0 && itemRightOffset > 0) {\n      orientation == 'horizontal' && (isVisible = true);\n      rightPortion = itemRightOffset;\n      leftPortion = rightPortion - width;\n    } else if (itemLeftOffset >= 0 && itemRightOffset < viewportWidth) {\n      orientation == 'horizontal' && (isVisible = true);\n      leftPortion = width;\n      rightPortion = 0;\n    } else if (itemLeftOffset > 0 && itemLeftOffset - viewportWidth < 0) {\n      orientation == 'horizontal' && (isVisible = true);\n      leftPortion = viewportWidth - itemLeftOffset;\n      rightPortion = leftPortion - width;\n    } else {\n      if (orientation == 'horizontal') continue;\n    }\n\n    var verticalRatio = topPortion > 0 ? topPortion / height : bottomPortion / height,\n        horizontalRatio = leftPortion > 0 ? leftPortion / width : rightPortion / height;\n    var itemData = {\n      index: index,\n      isVisible: isVisible,\n      top: top_1,\n      right: right,\n      bottom: bottom,\n      left: left,\n      width: width,\n      height: height,\n      itemTopOffset: itemTopOffset,\n      itemBottomOffset: itemBottomOffset,\n      topPortion: topPortion,\n      bottomPortion: bottomPortion,\n      itemLeftOffset: itemLeftOffset,\n      itemRightOffset: itemRightOffset,\n      leftPortion: leftPortion,\n      rightPortion: rightPortion,\n      verticalRatio: verticalRatio,\n      horizontalRatio: horizontalRatio\n    };\n    list.push(itemData);\n  }\n\n  return list;\n};\n\nexports.calcVisibleItems = calcVisibleItems;\n\nvar getScrollReferenceIndexData = function getScrollReferenceIndexData(_a) {\n  var viewportData = _a.viewportData,\n      cradleProps = _a.cradleProps,\n      cradleConfig = _a.cradleConfig;\n  var crosscount = cradleConfig.crosscount;\n  var viewportElement = viewportData.elementref.current;\n  var orientation = cradleProps.orientation,\n      listsize = cradleProps.listsize;\n  var scrollPos, cellLength;\n\n  if (orientation == 'vertical') {\n    scrollPos = viewportElement.scrollTop;\n    cellLength = cradleProps.cellHeight + cradleProps.gap;\n  } else {\n    scrollPos = viewportElement.scrollLeft;\n    cellLength = cradleProps.cellWidth + cradleProps.gap;\n  }\n\n  var referencescrolloffset = cellLength - scrollPos % cellLength;\n\n  if (referencescrolloffset == cellLength + cradleProps.padding) {\n    referencescrolloffset = 0;\n  }\n\n  var referencerowindex = Math.ceil((scrollPos - cradleProps.padding) / cellLength);\n  var spineReferenceIndex = referencerowindex * crosscount;\n  spineReferenceIndex = Math.min(spineReferenceIndex, listsize - 1);\n  var diff = spineReferenceIndex % crosscount;\n  spineReferenceIndex -= diff;\n  var referenceIndexData = {\n    index: spineReferenceIndex,\n    spineoffset: referencescrolloffset\n  };\n  if (referenceIndexData.index == 0) referenceIndexData.spineoffset = 0; // defensive\n\n  return referenceIndexData;\n};\n\nexports.getScrollReferenceIndexData = getScrollReferenceIndexData;\n\nvar getContentListRequirements = function getContentListRequirements(_a) {\n  var _b;\n\n  var // called from setCradleContent only\n  cradleProps = _a.cradleProps,\n      cradleConfig = _a.cradleConfig,\n      referenceoffset = _a.visibletargetindexoffset,\n      targetViewportOffset = _a.targetViewportOffset,\n      viewportElement = _a.viewportElement;\n  var orientation = cradleProps.orientation,\n      cellHeight = cradleProps.cellHeight,\n      cellWidth = cradleProps.cellWidth,\n      runwaycount = cradleProps.runwaycount,\n      gap = cradleProps.gap,\n      padding = cradleProps.padding,\n      listsize = cradleProps.listsize;\n  var crosscount = cradleConfig.crosscount,\n      cradleRowcount = cradleConfig.cradleRowcount,\n      viewportRowcount = cradleConfig.viewportRowcount; // reconcile spineReferenceIndex to crosscount context\n\n  var diff = referenceoffset % crosscount;\n  referenceoffset -= diff; // -------------[ calc basic inputs: cellLength, contentCount. ]----------\n\n  var cellLength, viewportlength;\n\n  if (orientation == 'vertical') {\n    cellLength = cellHeight + gap;\n    viewportlength = viewportElement.offsetHeight;\n  } else {\n    cellLength = cellWidth + gap;\n    viewportlength = viewportElement.offsetWidth;\n  } // let viewportrows = Math.floor(viewportlength / cellLength)\n\n\n  var viewportrows = viewportRowcount;\n  var contentCount = cradleRowcount * crosscount; // -----------------------[ calc leadingitemcount, referenceoffset ]-----------------------\n\n  var runwayitemcount = runwaycount * crosscount;\n  runwayitemcount = Math.min(runwayitemcount, referenceoffset); // for list head\n  // -----------------------[ calc cradleReferenceIndex ]------------------------\n  // leading edge\n\n  var cradleReferenceIndex = referenceoffset - runwayitemcount; // ------------[ adjust cradleReferenceIndex for underflow ]------------\n\n  diff = 0; // reset\n\n  var indexshift = 0; // adjustment if overshoot head\n\n  if (cradleReferenceIndex < 0) {\n    diff = cradleReferenceIndex;\n    indexshift = Math.floor(cradleReferenceIndex / crosscount) * crosscount;\n    cradleReferenceIndex += indexshift;\n  } // ------------[ adjust cradleReferenceIndex and contentCount for listsize overflow ]------------\n\n\n  var spineOffset = targetViewportOffset % cellLength; // if (spineOffset < 0) { // TODO: this shouldn't happen - reproduce from wide botton to narrow\n  //     spineOffset += (orientation == 'vertical'?cellHeight:cellWidth)\n  //     referenceoffset += crosscount\n  //     cradleReferenceIndex += crosscount\n  // }\n  // --------------------[ calc css positioning ]-----------------------\n\n  var targetrowoffset = Math.ceil(referenceoffset / crosscount);\n  var scrollblockoffset = targetrowoffset * cellLength + padding; // gap\n\n  var spineadjustment;\n\n  if (targetrowoffset == 0) {\n    scrollblockoffset = 0;\n    spineOffset = 0; // padding\n\n    spineadjustment = padding;\n  } else {\n    spineadjustment = 0; //gap;\n\n    _b = adjustSpineOffsetForMaxRefindex({\n      referenceoffset: referenceoffset,\n      spineOffset: spineOffset,\n      scrollblockoffset: scrollblockoffset,\n      targetrowoffset: targetrowoffset,\n      viewportlength: viewportlength,\n      listsize: listsize,\n      viewportrows: viewportrows,\n      crosscount: crosscount,\n      cellLength: cellLength,\n      padding: padding,\n      gap: gap,\n      cradleReferenceIndex: cradleReferenceIndex,\n      contentCount: contentCount\n    }), cradleReferenceIndex = _b[0], contentCount = _b[1], referenceoffset = _b[2], scrollblockoffset = _b[3], spineOffset = _b[4];\n  } // debugger\n  // console.log('cradleReferenceIndex, referenceoffset, contentCount, scrollblockoffset, spineOffset, spineadjustment',\n  //     cradleReferenceIndex, referenceoffset, contentCount, scrollblockoffset, spineOffset, spineadjustment)\n\n\n  return {\n    cradleReferenceIndex: cradleReferenceIndex,\n    referenceoffset: referenceoffset,\n    contentCount: contentCount,\n    scrollblockoffset: scrollblockoffset,\n    spineOffset: spineOffset,\n    spineadjustment: spineadjustment\n  }; // summarize requirements message\n};\n\nexports.getContentListRequirements = getContentListRequirements;\n\nvar adjustSpineOffsetForMaxRefindex = function adjustSpineOffsetForMaxRefindex(_a) {\n  // debugger\n  var listsize = _a.listsize,\n      crosscount = _a.crosscount,\n      contentCount = _a.contentCount,\n      cradleReferenceIndex = _a.cradleReferenceIndex,\n      referenceoffset = _a.referenceoffset,\n      targetrowoffset = _a.targetrowoffset,\n      scrollblockoffset = _a.scrollblockoffset,\n      spineOffset = _a.spineOffset,\n      viewportlength = _a.viewportlength,\n      viewportrows = _a.viewportrows,\n      cellLength = _a.cellLength,\n      padding = _a.padding,\n      gap = _a.gap;\n  var activelistitemcount = cradleReferenceIndex + contentCount;\n  var activelistrowcount = Math.ceil(activelistitemcount / crosscount);\n  var listRowcount = Math.ceil(listsize / crosscount); // memos\n  // let originalcradleoffset = cradleReferenceIndex\n  // let originalreferenceoffset = referenceoffset\n  // let originalspineOffset = spineOffset\n\n  if (activelistrowcount > listRowcount) {\n    var diffrows = activelistrowcount - listRowcount;\n    var diff = diffrows * crosscount;\n    cradleReferenceIndex -= diff;\n    activelistrowcount -= diffrows; // console.log('adjusting cradleReferemcicradlereference original, adjustment, rows, items, result', \n    //     originalcradleoffset, diff, diffrows, cradleReferenceIndex)\n  } // let testlistrowcount = Math.ceil((cradleReferenceIndex + contentCount + 1)/crosscount)\n\n\n  if (activelistrowcount == listRowcount) {\n    var diff = listsize % crosscount;\n\n    if (diff) {\n      contentCount -= crosscount - diff;\n    } // console.log('final row adjustment through activelistrowcount, listRowcount, listsize, contentCount, crosscount, diff',\n    // activelistrowcount, listRowcount, listsize, contentCount, crosscount, diff)\n\n  }\n\n  var maxrefindexrowoffset = Math.ceil(listsize / crosscount) - viewportrows + 1; // console.log('targetrowoffset, maxrefindexrowoffset', targetrowoffset, maxrefindexrowoffset)\n\n  if (targetrowoffset > maxrefindexrowoffset) {\n    var diff = targetrowoffset - maxrefindexrowoffset;\n    targetrowoffset -= diff; // maxrefindexrowoffset\n    // cradleReferenceIndex -= (diff * crosscount)\n\n    referenceoffset = targetrowoffset * crosscount;\n    scrollblockoffset = targetrowoffset * cellLength + padding;\n    spineOffset = viewportlength - (viewportrows - 1) * cellLength - gap; // console.log('targetrow adjustment: targetrowoffset, cradleReferenceIndex, referenceoffset, scrollblockoffset, spineOffset',\n    //     targetrowoffset, cradleReferenceIndex, referenceoffset, scrollblockoffset, spineOffset)\n  } // debugger\n\n\n  return [cradleReferenceIndex, contentCount, referenceoffset, scrollblockoffset, spineOffset];\n}; // filter out items that not proximate to the spine\n\n\nvar isolateRelevantIntersections = function isolateRelevantIntersections(_a) {\n  var intersections = _a.intersections,\n      cradleContent = _a.cradleContent,\n      itemObserverThreshold = _a.itemObserverThreshold,\n      scrollforward = _a.scrollforward;\n  var headcontent = cradleContent.headModel;\n  var tailcontent = cradleContent.tailModel;\n  var headindexes = [],\n      tailindexes = [],\n      headintersectionindexes = [],\n      headintersections = [],\n      tailintersectionindexes = [],\n      tailintersections = [],\n      intersecting = {},\n      filteredintersections = []; // collect lists of indexes...\n  // headindexes, tailindexes\n\n  for (var _i = 0, headcontent_1 = headcontent; _i < headcontent_1.length; _i++) {\n    var component = headcontent_1[_i];\n    headindexes.push(component.props.index);\n  }\n\n  for (var _b = 0, tailcontent_1 = tailcontent; _b < tailcontent_1.length; _b++) {\n    var component = tailcontent_1[_b];\n    tailindexes.push(component.props.index);\n  }\n\n  var duplicates = {};\n  var intersectionsptr = 0;\n\n  for (var _c = 0, intersections_1 = intersections; _c < intersections_1.length; _c++) {\n    var entry = intersections_1[_c];\n    var index = parseInt(entry.target.dataset.index);\n    var headptr_1 = void 0,\n        tailptr_1 = void 0;\n\n    if (tailindexes.includes(index)) {\n      tailintersectionindexes.push(index);\n      tailintersections.push(entry);\n      tailptr_1 = tailintersections.length - 1; // used for duplicate resolution\n    } else if (headindexes.includes(index)) {\n      headintersectionindexes.push(index);\n      headintersections.push(entry);\n      headptr_1 = headintersections.length - 1; // used for duplicate resolution\n    } else {\n      console.log('error: unknown intersection element, aborting isolateRelevantIntersections', entry);\n      return; // shouldn't happen; give up\n    }\n\n    var ratio = void 0;\n\n    if (browser && browser.name == 'safari') {\n      ratio = entry.intersectionRatio;\n    } else {\n      ratio = Math.round(entry.intersectionRatio * 1000) / 1000;\n    }\n\n    var calcintersecting = ratio >= itemObserverThreshold;\n    var iobj = {\n      index: index,\n      intersecting: calcintersecting,\n      isIntersecting: entry.isIntersecting,\n      ratio: ratio,\n      originalratio: entry.intersectionRatio,\n      time: entry.time,\n      headptr: headptr_1,\n      tailptr: tailptr_1,\n      intersectionsptr: intersectionsptr\n    };\n\n    if (!intersecting[index]) {\n      // new item\n      intersecting[index] = iobj;\n    } else {\n      // duplicate item\n      if (!Array.isArray(intersecting[index])) {\n        var arr = [intersecting[index]];\n        intersecting[index] = arr;\n      }\n\n      intersecting[index].push(iobj);\n\n      if (!duplicates[index]) {\n        duplicates[index] = [];\n        duplicates[index].push(intersecting[index][0]);\n      }\n\n      duplicates[index].push(iobj);\n    }\n\n    intersectionsptr++;\n  } // resolve duplicates. For uneven number, keep the most recent\n  // otherwise delete them, they cancel each other out.\n\n\n  var duplicateslength = Object.keys(duplicates).length;\n\n  if (duplicateslength > 0) {\n    // console.log('DUPLICATES found', duplicateslength, duplicates)\n    var headintersectionsdelete_1 = [],\n        tailintersectionsdelete_1 = [];\n\n    for (var duplicateindex in duplicates) {\n      var duplicate = duplicates[duplicateindex];\n\n      if (duplicate.length % 2) {\n        duplicate.sort(duplicatecompare);\n        var entry = duplicate.slice(duplicate.length - 1, 1);\n        intersecting[entry.index] = entry;\n      } else {\n        delete intersecting[duplicate[0].index]; // intersectingdelete.push(duplicate[0].index)\n      }\n\n      for (var _d = 0, duplicate_1 = duplicate; _d < duplicate_1.length; _d++) {\n        var entryobj = duplicate_1[_d];\n        var headptr_2 = entryobj.headptr;\n        var tailptr_2 = entryobj.tailptr;\n\n        if (headptr_2 !== undefined) {\n          headintersectionsdelete_1.push(headptr_2);\n        }\n\n        if (tailptr_2 !== undefined) {\n          tailintersectionsdelete_1.push(tailptr_2);\n        }\n      }\n    }\n\n    if (headintersectionsdelete_1.length) {\n      headintersectionindexes = headintersectionindexes.filter(function (value, index) {\n        return !headintersectionsdelete_1.includes(index);\n      });\n      headintersections = headintersections.filter(function (value, index) {\n        return !headintersectionsdelete_1.includes(index);\n      });\n    }\n\n    if (tailintersectionsdelete_1.length) {\n      tailintersectionindexes = tailintersectionindexes.filter(function (value, index) {\n        return !tailintersectionsdelete_1.includes(index);\n      });\n      tailintersections = tailintersections.filter(function (value, index) {\n        return !tailintersectionsdelete_1.includes(index);\n      });\n    }\n  }\n\n  headintersectionindexes.sort(indexcompare);\n  tailintersectionindexes.sort(indexcompare);\n  headintersections.sort(entrycompare);\n  tailintersections.sort(entrycompare); // set reference points in relation to the spine\n\n  var headindex = headindexes[headindexes.length - 1];\n  var tailindex = tailindexes[0];\n  var headptr = headintersectionindexes.indexOf(headindex);\n  var tailptr = tailintersectionindexes.indexOf(tailindex); // filter out items that register only because they have just been moved\n\n  if (headptr !== headintersectionindexes.length - 1) {\n    headptr = -1;\n  }\n\n  if (tailptr !== 0) {\n    tailptr = -1;\n  }\n\n  if (headptr > -1 && tailptr > -1) {\n    // edge case\n    if (scrollforward) {\n      headptr = -1;\n    } else {\n      tailptr = -1;\n    }\n  } // collect notifications to main thread (filtered intersections)\n  // for scrollbackward\n\n\n  var headrefindex, tailrefindex; // for return\n\n  if (!scrollforward && headptr >= 0) {\n    headrefindex = headintersectionindexes[headptr];\n    var refindex = headrefindex + 1;\n    var refintersecting = intersecting[refindex - 1].intersecting;\n\n    for (var ptr = headptr; ptr >= 0; ptr--) {\n      var index = headintersectionindexes[ptr]; // test for continuity and consistency\n\n      if (index + 1 == refindex && intersecting[index].intersecting == refintersecting) {\n        filteredintersections.push(headintersections[ptr]);\n      } else {\n        break;\n      }\n\n      refindex = index;\n      refintersecting = intersecting[refindex].intersecting;\n    }\n  } // for scrollforward\n\n\n  if (scrollforward && tailptr >= 0) {\n    tailrefindex = tailintersectionindexes[tailptr];\n    var refindex = tailrefindex - 1;\n    var refintersecting = intersecting[refindex + 1].intersecting;\n\n    for (var ptr = tailptr; ptr < tailintersectionindexes.length; ptr++) {\n      var index = tailintersectionindexes[ptr]; // test for continuity and consistency\n\n      if (index - 1 == refindex && intersecting[index].intersecting == refintersecting) {\n        filteredintersections.push(tailintersections[ptr]);\n      } else {\n        break;\n      }\n\n      refindex = index;\n      refintersecting = intersecting[index].intersecting;\n    }\n  }\n\n  filteredintersections.sort(entrycompare); // TODO this should be integrated into the code above\n\n  return filteredintersections;\n};\n\nexports.isolateRelevantIntersections = isolateRelevantIntersections;\n\nvar indexcompare = function indexcompare(a, b) {\n  var retval = a < b ? -1 : 1;\n  return retval;\n};\n\nvar entrycompare = function entrycompare(a, b) {\n  var retval = parseInt(a.target.dataset.index) < parseInt(b.target.dataset.index) ? -1 : 1;\n  return retval;\n};\n\nvar duplicatecompare = function duplicatecompare(a, b) {\n  var retval = a.time < b.time ? -1 : 1;\n};\n\nvar calcContentShifts = function calcContentShifts(_a) {\n  // ------------------------[ initialize ]--------------\n  var // called only from updateCradleContent\n  cradleProps = _a.cradleProps,\n      cradleElements = _a.cradleElements,\n      cradleContent = _a.cradleContent,\n      cradleConfig = _a.cradleConfig,\n      viewportElement = _a.viewportElement,\n      itemElements = _a.itemElements,\n      intersections = _a.intersections,\n      scrollforward = _a.scrollforward;\n  var gap = cradleProps.gap,\n      orientation = cradleProps.orientation,\n      cellHeight = cradleProps.cellHeight,\n      cellWidth = cradleProps.cellWidth,\n      listsize = cradleProps.listsize,\n      padding = cradleProps.padding,\n      runwaycount = cradleProps.runwaycount;\n  var spineElement = cradleElements.spine.current;\n  var headElement = cradleElements.head.current;\n  var tailElement = cradleElements.tail.current;\n  var cradlecontentlist = cradleContent.cradleModel;\n  var headcontentlist = cradleContent.headModel;\n  var tailcontentlist = cradleContent.tailModel;\n  var crosscount = cradleConfig.crosscount,\n      cradleRowcount = cradleConfig.cradleRowcount,\n      listRowcount = cradleConfig.listRowcount,\n      viewportRowcount = cradleConfig.viewportRowcount,\n      itemObserverThreshold = cradleConfig.itemObserverThreshold;\n  var BOD = false,\n      EOD = false; // beginning-of-data, end-of-data\n  // -------[ 1. calculate head overshoot row count, if any ]-------\n\n  var startingspineoffset, headblockoffset, tailblockoffset, viewportlength;\n  var viewportvisiblegaplength = 0;\n  var cellLength = orientation == 'vertical' ? cellHeight + gap : cellWidth + gap;\n\n  if (orientation == 'vertical') {\n    startingspineoffset = spineElement.offsetTop - viewportElement.scrollTop;\n    viewportlength = viewportElement.offsetHeight; // measure any gap between the cradle and the top viewport boundary\n\n    if (!scrollforward) {\n      // if startingspineoffset is below the top by more than the height of the headElment then a gap will be visible\n      viewportvisiblegaplength = startingspineoffset - headElement.offsetHeight;\n    }\n  } else {\n    // horizontal\n    startingspineoffset = spineElement.offsetLeft - viewportElement.scrollLeft;\n    viewportlength = viewportElement.offsetWidth;\n\n    if (!scrollforward) {\n      viewportvisiblegaplength = startingspineoffset - headElement.offsetWidth;\n    }\n  }\n\n  if (viewportvisiblegaplength < 0 || viewportvisiblegaplength > viewportlength) viewportvisiblegaplength = 0; // no visible gap, or reposition should have kicked in\n  // viewportvisiblegaplength is always positive\n\n  var overshootrowcount = viewportvisiblegaplength == 0 ? 0 : Math.ceil(viewportvisiblegaplength / cellLength); // rows to fill viewport\n  // extra rows for runway\n\n  if (overshootrowcount) {\n    overshootrowcount += runwaycount;\n  }\n\n  var overshootitemcount = overshootrowcount * crosscount;\n\n  if (overshootitemcount) {\n    // (!scrollforward && overshootitemcount) { // negation of values for scroll backward\n    overshootitemcount = -overshootitemcount;\n    overshootrowcount = -overshootrowcount;\n  } // ----------------------[ 2. calculate itemshiftcount includng overshoot ]------------------------\n  // shift item count is the number of items the virtual cradle shifts, according to observer notices\n\n\n  var forwardcount = 0,\n      backwardcount = 0;\n\n  if (scrollforward) {\n    backwardcount = intersections.length;\n  } else {\n    forwardcount = intersections.length;\n  }\n\n  var cradleshiftcount = backwardcount - forwardcount + overshootitemcount;\n  var referenceshiftcount = cradleshiftcount;\n  var cradlerowshift = Math.ceil(cradleshiftcount / crosscount);\n  var referencerowshift = cradlerowshift; // --------------------------[ 3. calc cradleindex and referenceindex ]--------------------------\n\n  var previouscradleindex = cradlecontentlist[0].props.index;\n  var previouscradlerowoffset = previouscradleindex / crosscount;\n  var previousreferenceindex = tailcontentlist[0].props.index;\n  var previousreferencerowoffset = previousreferenceindex / crosscount;\n  var diff;\n\n  if (scrollforward) {\n    if (previouscradlerowoffset + cradleRowcount + cradlerowshift >= listRowcount) {\n      EOD = true;\n    }\n\n    diff = previouscradlerowoffset + cradleRowcount + cradlerowshift - listRowcount;\n\n    if (diff > 0) {\n      cradlerowshift -= diff;\n      cradleshiftcount -= diff * crosscount;\n    }\n  } else {\n    if (previouscradlerowoffset + cradlerowshift <= 0) {\n      BOD = true;\n    }\n\n    diff = previouscradlerowoffset + cradlerowshift;\n\n    if (diff < 0) {\n      cradlerowshift -= diff;\n      cradleshiftcount -= diff * crosscount;\n    }\n  }\n\n  var newcradleindex = previouscradleindex + cradleshiftcount;\n  var newreferenceindex = previousreferenceindex + referenceshiftcount;\n\n  if (newreferenceindex < 0) {\n    referenceshiftcount += newreferenceindex;\n    newreferenceindex = 0;\n  } // -------------[ 4. calculate spineAdjustment and spineOffset ]------------------\n\n\n  var referenceitemshiftcount = newreferenceindex - previousreferenceindex;\n  var cradleitemshiftcount = newcradleindex - previouscradleindex;\n  referencerowshift = referenceitemshiftcount / crosscount;\n  var referencepixelshift = referencerowshift * cellLength;\n  var spineOffset = startingspineoffset + referencepixelshift;\n  var spineOffsetTarget = spineOffset;\n  var spineAdjustment = 0;\n\n  if (Math.abs(spineOffset) > cellLength) {\n    spineOffsetTarget = spineOffset % cellLength;\n    spineAdjustment = -(Math.ceil((spineOffset - spineOffsetTarget) / cellLength) * crosscount);\n  }\n\n  if (spineOffsetTarget < 0) {\n    spineOffsetTarget += cellLength;\n    spineAdjustment += crosscount;\n  }\n\n  if (spineAdjustment && (BOD || EOD)) {\n    newreferenceindex += spineAdjustment;\n    referenceitemshiftcount += spineAdjustment;\n    spineOffset = spineOffsetTarget;\n  } else if (spineAdjustment) {\n    newcradleindex += spineAdjustment;\n    cradleitemshiftcount += spineAdjustment;\n    newreferenceindex += spineAdjustment;\n    referenceitemshiftcount += spineAdjustment;\n    spineOffset = spineOffsetTarget;\n  }\n\n  spineOffset = spineOffsetTarget; // ---------------------[ 5. return required values ]-------------------\n\n  var cradleitemcount = cradleRowcount * crosscount;\n  return [newcradleindex, cradleitemshiftcount, newreferenceindex, referenceitemshiftcount, spineOffset, cradleitemcount];\n};\n\nexports.calcContentShifts = calcContentShifts;\n\nvar calcHeadAndTailChanges = function calcHeadAndTailChanges(_a) {\n  var cradleProps = _a.cradleProps,\n      cradleConfig = _a.cradleConfig,\n      cradleContent = _a.cradleContent,\n      cradleshiftcount = _a.cradleshiftcount,\n      scrollforward = _a.scrollforward,\n      cradleReferenceIndex = _a.cradleReferenceIndex;\n  var listsize = cradleProps.listsize;\n  var headcontent = cradleContent.headModel;\n  var tailcontent = cradleContent.tailModel;\n  var crosscount = cradleConfig.crosscount,\n      cradleRowcount = cradleConfig.cradleRowcount;\n  cradleshiftcount = Math.abs(cradleshiftcount);\n  var rowshiftcount = Math.ceil(cradleshiftcount / crosscount); //+ boundaryrowcount\n\n  var headrowcount, tailrowcount;\n  headrowcount = Math.ceil(headcontent.length / crosscount);\n  tailrowcount = Math.ceil(tailcontent.length / crosscount);\n  var pendingcontentoffset; // lookahead to new cradleReferenceIndex\n\n  var headchangecount, tailchangecount; // the output instructions for getUIContentList\n  // anticipaate add to one end, clip from the other        \n\n  var additemcount = 0;\n  var cliprowcount = 0,\n      clipitemcount = 0;\n\n  if (scrollforward) {\n    // clip from head; add to tail; scroll forward head is direction of scroll\n    // adjust clipitemcount\n    if (headrowcount + rowshiftcount > cradleProps.runwaycount) {\n      var rowdiff = headrowcount + rowshiftcount - cradleProps.runwaycount;\n      cliprowcount = rowdiff;\n      clipitemcount = cliprowcount * crosscount;\n    }\n\n    additemcount = clipitemcount; // maintain constant cradle count\n\n    pendingcontentoffset = cradleReferenceIndex + clipitemcount; // after clip\n\n    var proposedtailindex = pendingcontentoffset + cradleRowcount * crosscount - 1; // modelcontentlist.length - 1\n    // adkjust changes for list boundaries\n\n    if (proposedtailindex > listsize - 1) {\n      var diffitemcount = proposedtailindex - (listsize - 1); // items outside range\n\n      additemcount -= diffitemcount; // adjust the addcontent accordingly\n\n      var diffrows = Math.floor(diffitemcount / crosscount); // number of full rows to leave in place\n\n      var diffrowitems = diffrows * crosscount; // derived number of items to leave in place\n\n      clipitemcount -= diffrowitems; // apply adjustment to netshift\n\n      if (additemcount <= 0) {\n        // nothing to do\n        additemcount = 0;\n      }\n\n      if (clipitemcount <= 0) {\n        clipitemcount = 0;\n      }\n    }\n\n    headchangecount = -clipitemcount;\n    tailchangecount = additemcount;\n  } else {\n    // scroll backward, in direction of tail; clip from tail, add to head\n    var intersectionindexes = []; // headcount will be less than minimum (runwaycount), so a shift can be accomplished[]\n\n    if (headrowcount - rowshiftcount < cradleProps.runwaycount) {\n      // calculate clip for tail\n      var rowshortfall = cradleProps.runwaycount - (headrowcount - rowshiftcount);\n      cliprowcount = rowshortfall;\n      var tailrowitemcount = tailcontent.length % crosscount;\n      if (tailrowitemcount == 0) tailrowitemcount = crosscount;\n      clipitemcount = tailrowitemcount;\n\n      if (tailrowcount > 1) {\n        if (cliprowcount > tailrowcount) {\n          cliprowcount = tailrowcount;\n        }\n\n        if (cliprowcount > 1) {\n          clipitemcount += (cliprowcount - 1) * crosscount;\n        }\n      } // compenstate with additemcount\n\n\n      additemcount = cliprowcount * crosscount;\n    }\n\n    var proposedindexoffset = cradleReferenceIndex - additemcount;\n\n    if (proposedindexoffset < 0) {\n      var diffitemcount = -proposedindexoffset;\n      var diffrows = Math.ceil(diffitemcount / crosscount); // number of full rows to leave in place\n\n      var diffrowitems = diffrows * crosscount;\n      additemcount -= diffitemcount;\n      clipitemcount -= diffrowitems;\n\n      if (additemcount <= 0) {\n        additemcount = 0;\n      }\n\n      if (clipitemcount <= 0) {\n        clipitemcount = 0;\n      }\n    }\n\n    headchangecount = additemcount;\n    tailchangecount = -clipitemcount;\n  }\n\n  return [headchangecount, tailchangecount];\n};\n\nexports.calcHeadAndTailChanges = calcHeadAndTailChanges; // update content\n// adds itemshells at end of contentlist according to headindexcount and tailindescount,\n// or if indexcount values are <0 removes them.\n\nvar getUIContentList = function getUIContentList(_a) {\n  var cradleProps = _a.cradleProps,\n      cradleConfig = _a.cradleConfig,\n      contentCount = _a.contentCount,\n      cradleReferenceIndex = _a.cradleReferenceIndex,\n      headchangecount = _a.headchangecount,\n      tailchangecount = _a.tailchangecount,\n      contentlist = _a.localContentList,\n      callbacks = _a.callbacks,\n      observer = _a.observer,\n      instanceIdCounterRef = _a.instanceIdCounterRef;\n  var crosscount = cradleConfig.crosscount,\n      cradleRowcount = cradleConfig.cradleRowcount;\n\n  var localContentlist = __spreadArrays(contentlist);\n\n  var tailindexoffset = cradleReferenceIndex + contentlist.length; // let headindexoffset = cradleReferenceIndex\n\n  var returnContentlist;\n  var headContentlist = [];\n  var topconstraint = cradleReferenceIndex - headchangecount,\n      bottomconstraint = cradleReferenceIndex - headchangecount + (contentCount + 1); // TODO: validate \"+1\"\n  // console.log('topconstraint, bottomconstraint, cradleReferenceIndex, contentCount, headchangecount, tailchangecount', \n  //     topconstraint, bottomconstraint, cradleReferenceIndex, contentCount, headchangecount, tailchangecount)\n\n  if (headchangecount >= 0) {\n    for (var index = cradleReferenceIndex - headchangecount; index < cradleReferenceIndex; index++) {\n      if (!(index >= topconstraint && index <= bottomconstraint)) {\n        continue;\n      }\n\n      headContentlist.push(acquireItem({\n        index: index,\n        cradleProps: cradleProps,\n        observer: observer,\n        callbacks: callbacks,\n        instanceIdCounterRef: instanceIdCounterRef\n      }));\n    }\n  } else {\n    localContentlist.splice(0, -headchangecount);\n  }\n\n  var tailContentlist = [];\n\n  if (tailchangecount >= 0) {\n    for (var index = tailindexoffset; index < tailindexoffset + tailchangecount; index++) {\n      if (!(index >= topconstraint && index <= bottomconstraint)) {\n        continue;\n      }\n\n      tailContentlist.push(acquireItem({\n        index: index,\n        cradleProps: cradleProps,\n        observer: observer,\n        callbacks: callbacks,\n        instanceIdCounterRef: instanceIdCounterRef\n      }));\n    }\n  } else {\n    localContentlist.splice(tailchangecount, -tailchangecount);\n  }\n\n  returnContentlist = headContentlist.concat(localContentlist, tailContentlist); // console.log('components of getcontentlist: returnContentList, headContentlist, localContentlist, tailContentlist', \n  //     returnContentlist, headContentlist, localContentlist, tailContentlist)\n\n  return returnContentlist;\n};\n\nexports.getUIContentList = getUIContentList; // butterfly model. Leading (head) all or partially hidden; tail, visible plus following hidden\n\nvar allocateContentList = function allocateContentList(_a) {\n  var contentlist = _a.contentlist,\n      // of cradle, in items (React components)\n  spineReferenceIndex = _a.spineReferenceIndex;\n  var offsetindex = contentlist[0].props.index;\n  var headitemcount;\n  headitemcount = spineReferenceIndex - offsetindex;\n  var headlist = contentlist.slice(0, headitemcount);\n  var taillist = contentlist.slice(headitemcount);\n  return [headlist, taillist];\n};\n\nexports.allocateContentList = allocateContentList;\n\nvar acquireItem = function acquireItem(_a) {\n  var index = _a.index,\n      cradleProps = _a.cradleProps,\n      observer = _a.observer,\n      callbacks = _a.callbacks,\n      instanceIdCounterRef = _a.instanceIdCounterRef;\n  var instanceID = instanceIdCounterRef.current++;\n  return emitItem({\n    index: index,\n    cradleProps: cradleProps,\n    observer: observer,\n    callbacks: callbacks,\n    instanceID: instanceID\n  });\n};\n\nvar emitItem = function emitItem(_a) {\n  var index = _a.index,\n      cradleProps = _a.cradleProps,\n      observer = _a.observer,\n      callbacks = _a.callbacks,\n      instanceID = _a.instanceID;\n  var orientation = cradleProps.orientation,\n      cellHeight = cradleProps.cellHeight,\n      cellWidth = cradleProps.cellWidth,\n      getItem = cradleProps.getItem,\n      placeholder = cradleProps.placeholder,\n      listsize = cradleProps.listsize,\n      scrollerName = cradleProps.scrollerName,\n      scrollerID = cradleProps.scrollerID;\n  return react_1[\"default\"].createElement(itemshell_1[\"default\"], {\n    key: index,\n    orientation: orientation,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    index: index,\n    observer: observer,\n    callbacks: callbacks,\n    getItem: getItem,\n    listsize: listsize,\n    placeholder: placeholder,\n    instanceID: instanceID,\n    scrollerName: scrollerName,\n    scrollerID: scrollerID\n  });\n}; // ========================================================================================\n// ------------------------------------[ styles ]------------------------------------------\n// ========================================================================================\n\n\nvar setCradleGridStyles = function setCradleGridStyles(_a) {\n  var orientation = _a.orientation,\n      headstylesobject = _a.headCradleStyles,\n      tailstylesobject = _a.tailCradleStyles,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      padding = _a.padding,\n      crosscount = _a.crosscount,\n      viewportheight = _a.viewportheight,\n      viewportwidth = _a.viewportwidth;\n\n  var headstyles = __assign({}, headstylesobject);\n\n  var tailstyles = __assign({}, tailstylesobject);\n\n  headstyles.gridGap = gap + 'px';\n  tailstyles.gridGap = gap + 'px';\n\n  if (orientation == 'horizontal') {\n    headstyles.padding = padding + \"px 0 \" + padding + \"px \" + padding + \"px\";\n    headstyles.width = 'auto';\n    headstyles.height = '100%';\n    headstyles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n    //     sets length of horiz cradle items in one line (row), not multi-row config\n\n    headstyles.gridTemplateRows = cellHeight ? \"repeat(\" + crosscount + \", minmax(\" + cellHeight + \"px, 1fr))\" : 'auto';\n    headstyles.gridTemplateColumns = 'none';\n    tailstyles.padding = padding + \"px \" + padding + \"px \" + padding + \"px 0\";\n    tailstyles.width = 'auto';\n    tailstyles.height = '100%';\n    tailstyles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n    //     sets length of horiz cradle items in one line (row), not multi-row config\n\n    tailstyles.gridTemplateRows = cellHeight ? \"repeat(\" + crosscount + \", minmax(\" + cellHeight + \"px, 1fr))\" : 'auto';\n    tailstyles.gridTemplateColumns = 'none';\n  } else if (orientation == 'vertical') {\n    headstyles.padding = padding + \"px \" + padding + \"px 0 \" + padding + \"px\";\n    headstyles.width = '100%';\n    headstyles.height = 'auto';\n    headstyles.gridAutoFlow = 'row';\n    headstyles.gridTemplateRows = 'none';\n    headstyles.gridTemplateColumns = cellWidth ? \"repeat(auto-fit, minmax(\" + cellWidth + \"px, 1fr))\" : 'auto';\n    tailstyles.padding = \"0 \" + padding + \"px \" + padding + \"px \" + padding + \"px\";\n    tailstyles.width = '100%';\n    tailstyles.height = 'auto';\n    tailstyles.gridAutoFlow = 'row';\n    tailstyles.gridTemplateRows = 'none';\n    tailstyles.gridTemplateColumns = cellWidth ? \"repeat(auto-fit, minmax(\" + cellWidth + \"px, 1fr))\" : 'auto';\n  }\n\n  return [headstyles, tailstyles];\n};\n\nexports.setCradleGridStyles = setCradleGridStyles;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradlefunctions.tsx\n");

/***/ }),

/***/ "./src/infinitegridscroller.tsx":
/*!**************************************!*\
  !*** ./src/infinitegridscroller.tsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // infinitegridscroller.tsx\n// copyright (c) 2019 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __importDefault(__webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\"));\n\nvar scrollblock_1 = __importDefault(__webpack_require__(/*! ./scrollblock */ \"./src/scrollblock.tsx\"));\n\nvar cradle_1 = __importDefault(__webpack_require__(/*! ./cradle */ \"./src/cradle.tsx\"));\n\nvar contentmanager_1 = __webpack_require__(/*! ./contentmanager */ \"./src/contentmanager.tsx\");\n\nvar scrollerID = 0;\n\nvar getScrollerID = function getScrollerID() {\n  // console.log('fetching scrollerID', scrollerID)\n  return scrollerID++;\n};\n/*\n    BACKLOG:\n    - cache: none/preload/keepload\n*/\n// ===================================[ INITIALIZE ]===========================\n\n/*\n    The job of InfiniteGridScroller is to pass parameters to dependents.\n    Viewport contains the scrollblock, which in turn contains the cradle\n        - a component that contains displayed (or nearly displayed) items.\n    The items are skeletons which contain the host content components.\n\n    Scrollblock virtually represents the entirety of the list, and of course scrolls\n    Cradle contains the list items, and is 'virtualiized' -- it appears as\n      though it is the full scrollblock, but in fact it is only slightly larger than\n      the viewport.\n    - individual items are framed by ItemShell, managed by Cradle\n\n    Overall the infinitegridscroller manages the often asynchronous interactions of the\n    components of the mechanism\n*/\n\n\nvar InfiniteGridScroller = function InfiniteGridScroller(props) {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  var orientation = props.orientation,\n      // vertical or horizontal\n  gap = props.gap,\n      // space between grid cells, not including the leading and trailing edges\n  padding = props.padding,\n      // the space between the items and the viewport, applied to the cradle\n  cellHeight = props.cellHeight,\n      // the outer pixel height - literal for vertical; approximate for horizontal\n  cellWidth = props.cellWidth,\n      // the outer pixel width - literal for horizontal; approximate for vertical\n  runway = props.runway,\n      // the number of items outside the view of each side of the viewport \n  // -- gives time to assemble before display\n  listsize = props.listsize,\n      // the exact number of the size of the virtual list\n  indexOffset = props.indexOffset,\n      // the 0-based starting index of the list, when first loaded\n  getItem = props.getItem,\n      // function provided by host - parameter is index number, set by system; return value is \n  // host-selected component or promise of a component\n  functions = props.functions,\n      // properties with direct access to some component utilites, optional\n  placeholder = props.placeholder,\n      // a sparse component to stand in for content until the content arrives; \n  // optional, replaces default\n  styles = props.styles,\n      // passive style over-rides (eg. color, opacity) for viewport, scrollblock, cradle, or scrolltracker\n  // to come...\n  // cache = \"preload\", \"keepload\", \"none\"\n  // dense, // boolean (only with preload)\n  layout = props.layout,\n      // uniform, variable\n  scrollerName = props.scrollerName;\n  var globalScrollerID = react_1.useMemo(function () {\n    return getScrollerID();\n  }, []);\n  var scrollerIDRef = react_1.useRef(globalScrollerID); // console.log('scrollerIDRef, scrollerID',scrollerIDRef, scrollerID)\n  // defaults\n\n  (_a = functions) !== null && _a !== void 0 ? _a : functions = {};\n  (_b = gap) !== null && _b !== void 0 ? _b : gap = 0;\n  (_c = padding) !== null && _c !== void 0 ? _c : padding = 0;\n  (_d = runway) !== null && _d !== void 0 ? _d : runway = 3;\n  (_e = indexOffset) !== null && _e !== void 0 ? _e : indexOffset = 0;\n  (_f = listsize) !== null && _f !== void 0 ? _f : listsize = 0;\n  (_g = layout) !== null && _g !== void 0 ? _g : layout = 'uniform'; // constraints\n\n  indexOffset = Math.max(0, indexOffset); // non-negative\n\n  indexOffset = Math.min(listsize, indexOffset); // not larger than list\n\n  if (!['horizontal', 'vertical'].includes(orientation)) {\n    orientation = 'vertical';\n  }\n\n  return react_1[\"default\"].createElement(react_1[\"default\"].Fragment, null, scrollerIDRef.current == 0 ? react_1[\"default\"].createElement(contentmanager_1.PortalCache, null) : null, react_1[\"default\"].createElement(viewport_1[\"default\"], {\n    orientation: orientation,\n    cellWidth: cellHeight,\n    cellHeight: cellHeight,\n    gap: gap,\n    padding: padding,\n    functions: functions,\n    styles: styles,\n    scrollerID: scrollerIDRef.current\n  }, react_1[\"default\"].createElement(scrollblock_1[\"default\"], {\n    listsize: listsize,\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    gap: gap,\n    padding: padding,\n    orientation: orientation,\n    functions: functions,\n    styles: styles\n  }, react_1[\"default\"].createElement(cradle_1[\"default\"], {\n    gap: gap,\n    padding: padding,\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    listsize: listsize,\n    indexOffset: indexOffset,\n    orientation: orientation,\n    // runwaylength = { runwaylength } \n    getItem: getItem,\n    functions: functions,\n    placeholder: placeholder,\n    styles: styles,\n    runwaycount: runway,\n    scrollerName: scrollerName,\n    scrollerID: scrollerIDRef.current\n  }))));\n};\n\nexports[\"default\"] = InfiniteGridScroller;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/infinitegridscroller.tsx\n");

/***/ }),

/***/ "./src/itemshell.tsx":
/*!***************************!*\
  !*** ./src/itemshell.tsx ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // itemframe.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar requestidlecallback_1 = __webpack_require__(/*! requestidlecallback */ \"./node_modules/requestidlecallback/index.js\");\n\nvar react_is_mounted_hook_1 = __importDefault(__webpack_require__(/*! react-is-mounted-hook */ \"./node_modules/react-is-mounted-hook/lib/index.js\"));\n\nvar placeholder_1 = __importDefault(__webpack_require__(/*! ./placeholder */ \"./src/placeholder.tsx\"));\n\nvar contentmanager_1 = __webpack_require__(/*! ./contentmanager */ \"./src/contentmanager.tsx\");\n\nvar ItemShell = function ItemShell(_a) {\n  var orientation = _a.orientation,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      index = _a.index,\n      observer = _a.observer,\n      callbacks = _a.callbacks,\n      getItem = _a.getItem,\n      listsize = _a.listsize,\n      placeholder = _a.placeholder,\n      instanceID = _a.instanceID,\n      scrollerName = _a.scrollerName,\n      scrollerID = _a.scrollerID;\n  var contentManager = react_1.useContext(contentmanager_1.ContentContext); // const linkedContentRef = useRef(false)\n  // const portalRef = useRef(null)\n\n  var _b = react_1.useState(null),\n      error = _b[0],\n      saveError = _b[1];\n\n  var _c = react_1.useState({\n    overflow: 'hidden'\n  }),\n      styles = _c[0],\n      saveStyles = _c[1];\n\n  var _d = react_1.useState('setup'),\n      itemstate = _d[0],\n      setItemstate = _d[1];\n\n  var shellRef = react_1.useRef(undefined);\n  var instanceIDRef = react_1.useRef(instanceID);\n  var isMounted = react_is_mounted_hook_1[\"default\"]();\n  var itemrequestRef = react_1.useRef(null); // // const portalDataRef = useRef(portalData.get(index)?portalData.get(index).current:{\n  //     container:null,\n  //     content:null,\n  //     placeholder:null,\n  //     portal:null,\n  // })\n\n  var _e = react_1.useState(null),\n      content = _e[0],\n      saveContent = _e[1]; // console.log('index itemstate', index, itemstate)\n  // initialize\n\n\n  react_1.useEffect(function () {\n    // if (portalDataRef.current.content) {\n    //     return\n    // }\n    // console.log('fetching item index, scrollerName',index, scrollerName)\n    var requestidlecallback = window['requestIdleCallback'] ? window['requestIdleCallback'] : requestidlecallback_1.requestIdleCallback;\n    var cancelidlecallback = window['cancelIdleCallback'] ? window['cancelIdleCallback'] : requestidlecallback_1.cancelIdleCallback;\n\n    if (contentManager.hasContentlistItem(scrollerID, index)) {\n      // console.log('content cache available for scrollerID, index',scrollerID, index)\n      var contentitem = contentManager.getContentlistItem(scrollerID, index); // console.log('cache contentitem',contentitem)\n\n      saveContent(contentitem.content);\n      return;\n    }\n\n    if (getItem) {\n      // console.log('fetching item index',index)\n      itemrequestRef.current = requestidlecallback(function () {\n        var value = getItem(index);\n\n        if (value && value.then) {\n          value.then(function (content) {\n            if (isMounted()) {\n              saveContent(content);\n              contentManager.setContentlistItem(scrollerID, index, content);\n              saveError(null);\n            }\n          })[\"catch\"](function (e) {\n            if (isMounted()) {\n              saveContent(null);\n              saveError(e);\n            }\n          });\n        } else {\n          if (isMounted()) {\n            if (value) {\n              saveContent(value);\n              contentManager.setContentlistItem(scrollerID, index, value);\n              saveError(null);\n            } else {\n              saveError(true);\n              saveContent(null);\n            }\n          }\n        }\n      }, {\n        timeout: 200\n      });\n    }\n\n    return function () {\n      var requesthandle = itemrequestRef.current;\n      cancelidlecallback(requesthandle);\n    };\n  }, []);\n  react_1.useEffect(function () {\n    if (itemstate == 'setup') {\n      setItemstate('ready');\n    }\n  }, [itemstate]); // initialize\n\n  react_1.useEffect(function () {\n    var localcalls = callbacks;\n    localcalls.getElementData && localcalls.getElementData(getElementData(), 'register');\n    return function () {\n      localcalls.getElementData && localcalls.getElementData(getElementData(), 'unregister');\n    };\n  }, [callbacks]);\n  react_1.useEffect(function () {\n    // if (!shellRef.current) return\n    console.log('shellRef.current', shellRef.current);\n    observer.observe(shellRef.current);\n    return function () {\n      console.log('unobserving', shellRef.current); // if (!shellRef.current) return // TODO: memory leak?\n      // console.log('unobserve',shellRef.current)\n\n      observer.unobserve(shellRef.current);\n    };\n  }, [observer]);\n  react_1.useEffect(function () {\n    var newStyles = getShellStyles(orientation, cellHeight, cellWidth, styles);\n\n    if (isMounted()) {\n      saveStyles(newStyles);\n    }\n  }, [orientation, cellHeight, cellWidth]); // cradle ondemand callback parameter value\n\n  var getElementData = react_1.useCallback(function () {\n    return [index, shellRef];\n  }, []); // placeholder handling\n\n  var customplaceholderRef = react_1.useRef(placeholder ? react_1[\"default\"].createElement(placeholder, {\n    index: index,\n    listsize: listsize\n  }) : null);\n  react_1.useEffect(function () {\n    if (!shellRef.current) return; // console.log('linking scrollerID, index, shellRef.current, content; ',scrollerID, index, shellRef.current,content)\n\n    if (content) {\n      contentManager.attachContentlistItem(scrollerID, index, shellRef.current); // console.log('scrollerID, setting linkedContentRef', scrollerID)\n      // linkedContentRef.current = true\n\n      return function () {\n        contentManager.detachContentlistItem(scrollerID, index);\n      };\n    }\n  }, [shellRef.current, content]);\n  var child = react_1.useMemo(function () {\n    var child = customplaceholderRef.current ? customplaceholderRef.current : react_1[\"default\"].createElement(placeholder_1[\"default\"], {\n      index: index,\n      listsize: listsize,\n      error: error\n    });\n    return child;\n  }, [index, content, customplaceholderRef.current, listsize, error]); // console.log('scrollerID, linkedContentRef.current',scrollerID, linkedContentRef.current)\n\n  return react_1[\"default\"].createElement(\"div\", {\n    ref: shellRef,\n    \"data-index\": index,\n    \"data-instanceid\": instanceID,\n    style: styles\n  }, !content ? child : null);\n}; // ItemShell\n// TODO: memoize this\n\n\nvar getShellStyles = function getShellStyles(orientation, cellHeight, cellWidth, styles) {\n  var styleset = Object.assign({\n    position: 'relative'\n  }, styles);\n\n  if (orientation == 'horizontal') {\n    styleset.width = cellWidth ? cellWidth + 'px' : 'auto';\n    styleset.height = 'auto';\n  } else if (orientation === 'vertical') {\n    styleset.width = 'auto';\n    styleset.height = cellHeight ? cellHeight + 'px' : 'auto';\n  }\n\n  return styleset;\n};\n\nexports[\"default\"] = ItemShell;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/itemshell.tsx\n");

/***/ }),

/***/ "./src/placeholder.tsx":
/*!*****************************!*\
  !*** ./src/placeholder.tsx ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // placeholder.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar Placeholder = function Placeholder(_a) {\n  var index = _a.index,\n      listsize = _a.listsize,\n      error = _a.error;\n  var stylesRef = react_1.useRef({\n    position: 'relative',\n    boxSizing: 'border-box',\n    backgroundColor: 'cyan',\n    border: '2px solid black',\n    height: '100%',\n    width: '100%'\n  });\n  var itemStylesRef = react_1.useRef({\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: '3px',\n    opacity: .5,\n    borderRadius: '8px',\n    backgroundColor: 'white',\n    margin: '3px',\n    fontSize: 'smaller'\n  });\n  return react_1[\"default\"].createElement(\"div\", {\n    style: stylesRef.current\n  }, !error ? react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, index + 1, \"/\", listsize) : react_1[\"default\"].createElement(\"div\", {\n    style: itemStylesRef.current\n  }, \"item is not available at this time\"));\n};\n\nexports[\"default\"] = Placeholder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL3NyYy9wbGFjZWhvbGRlci50c3g/MTEzMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUEsSUFBTSxXQUFXLEdBQUcsU0FBZCxXQUFjLENBQUMsRUFBRCxFQUF5QjtNQUF2QixLQUFLLFc7TUFBRSxRQUFRLGM7TUFBRSxLQUFLLFc7QUFFeEMsTUFBTSxTQUFTLEdBQUcsZUFBTztBQUNyQixZQUFRLEVBQUMsVUFEWTtBQUVyQixhQUFTLEVBQUMsWUFGVztBQUdyQixtQkFBZSxFQUFDLE1BSEs7QUFJckIsVUFBTSxFQUFDLGlCQUpjO0FBS3JCLFVBQU0sRUFBQyxNQUxjO0FBTXJCLFNBQUssRUFBQztBQU5lLEdBQVAsQ0FBbEI7QUFRQSxNQUFNLGFBQWEsR0FBRyxlQUNsQjtBQUNJLFlBQVEsRUFBQyxVQURiO0FBRUksT0FBRyxFQUFDLENBRlI7QUFHSSxRQUFJLEVBQUMsQ0FIVDtBQUlJLFdBQU8sRUFBQyxLQUpaO0FBS0ksV0FBTyxFQUFDLEVBTFo7QUFNSSxnQkFBWSxFQUFDLEtBTmpCO0FBT0ksbUJBQWUsRUFBQyxPQVBwQjtBQVFJLFVBQU0sRUFBQyxLQVJYO0FBU0ksWUFBUSxFQUFDO0FBVGIsR0FEa0IsQ0FBdEI7QUFjQSxTQUFPO0FBQUssU0FBSyxFQUFJLFNBQVMsQ0FBQztBQUF4QixLQUNELENBQUMsS0FBRCxHQUNFO0FBQUssU0FBSyxFQUFJLGFBQWEsQ0FBQztBQUE1QixLQUFzQyxLQUFLLEdBQUcsQ0FBOUMsRSxHQUFBLEVBQWtELFFBQWxELENBREYsR0FFRTtBQUFLLFNBQUssRUFBSSxhQUFhLENBQUM7QUFBNUIsS0FBbUMsb0NBQW5DLENBSEQsQ0FBUDtBQU9ILENBL0JEOztBQWlDQSxxQkFBZSxXQUFmIiwiZmlsZSI6Ii4vc3JjL3BsYWNlaG9sZGVyLnRzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHBsYWNlaG9sZGVyLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDIwIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbmltcG9ydCBSZWFjdCwge3VzZVJlZiwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcblxuY29uc3QgUGxhY2Vob2xkZXIgPSAoe2luZGV4LCBsaXN0c2l6ZSwgZXJyb3J9KSA9PiB7XG5cbiAgICBjb25zdCBzdHlsZXNSZWYgPSB1c2VSZWYoe1xuICAgICAgICBwb3NpdGlvbjoncmVsYXRpdmUnLFxuICAgICAgICBib3hTaXppbmc6J2JvcmRlci1ib3gnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6J2N5YW4nLFxuICAgICAgICBib3JkZXI6JzJweCBzb2xpZCBibGFjaycsXG4gICAgICAgIGhlaWdodDonMTAwJScsXG4gICAgICAgIHdpZHRoOicxMDAlJ1xuICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllcylcbiAgICBjb25zdCBpdGVtU3R5bGVzUmVmID0gdXNlUmVmKFxuICAgICAgICB7XG4gICAgICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOjAsXG4gICAgICAgICAgICBsZWZ0OjAsXG4gICAgICAgICAgICBwYWRkaW5nOiczcHgnLFxuICAgICAgICAgICAgb3BhY2l0eTouNSxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czonOHB4JyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjond2hpdGUnLCBcbiAgICAgICAgICAgIG1hcmdpbjonM3B4JyxcbiAgICAgICAgICAgIGZvbnRTaXplOidzbWFsbGVyJyxcbiAgICAgICAgfSBhcyBSZWFjdC5DU1NQcm9wZXJ0aWVzXG4gICAgKVxuXG4gICAgcmV0dXJuIDxkaXYgc3R5bGUgPSB7c3R5bGVzUmVmLmN1cnJlbnR9PlxuICAgICAgICB7ICFlcnJvcj9cbiAgICAgICAgICAgIDxkaXYgc3R5bGUgPSB7aXRlbVN0eWxlc1JlZi5jdXJyZW50fT57aW5kZXggKyAxfS97bGlzdHNpemV9PC9kaXY+OlxuICAgICAgICAgICAgPGRpdiBzdHlsZSA9IHtpdGVtU3R5bGVzUmVmLmN1cnJlbnR9Pml0ZW0gaXMgbm90IGF2YWlsYWJsZSBhdCB0aGlzIHRpbWU8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICA8L2Rpdj5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGxhY2Vob2xkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/placeholder.tsx\n");

/***/ }),

/***/ "./src/scrollblock.tsx":
/*!*****************************!*\
  !*** ./src/scrollblock.tsx ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // scrollblock.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar viewport_1 = __webpack_require__(/*! ./viewport */ \"./src/viewport.tsx\");\n\nvar Scrollblock = function Scrollblock(_a) {\n  var children = _a.children,\n      listsize = _a.listsize,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      padding = _a.padding,\n      orientation = _a.orientation,\n      functions = _a.functions,\n      styles = _a.styles; // -------------------------[ context and state ]-------------------------\n\n  var viewportData = react_1.useContext(viewport_1.ViewportContext);\n\n  var _b = react_1.useState('prepare'),\n      blockstate = _b[0],\n      setBlockState = _b[1]; // -----------------------------------[ data heap ]-------------------------\n\n\n  var scrollBlockLengthRef = react_1.useRef(null);\n  var scrollblockRef = react_1.useRef(null);\n  var divlinerstyleRef = react_1.useRef(Object.assign({\n    backgroundColor: 'white',\n    position: 'relative'\n  }, styles === null || styles === void 0 ? void 0 : styles.cradle));\n\n  var _c = react_1.useState(divlinerstyleRef.current),\n      divlinerstyle = _c[0],\n      saveDivlinerstyle = _c[1]; // to trigger render\n\n\n  var viewportDimensions = viewportData.viewportDimensions,\n      itemobserver = viewportData.itemobserver,\n      isResizing = viewportData.isResizing;\n  var top = viewportDimensions.top,\n      right = viewportDimensions.right,\n      bottom = viewportDimensions.bottom,\n      left = viewportDimensions.left,\n      width = viewportDimensions.width,\n      height = viewportDimensions.height; // state engine\n\n  react_1.useEffect(function () {\n    switch (blockstate) {\n      case 'prepare':\n        {\n          setBlockState('render');\n          break;\n        }\n    }\n  }, [blockstate]);\n  react_1.useLayoutEffect(function () {\n    updateBlockLength();\n    divlinerstyleRef.current = updateScrollblockStyles(orientation, divlinerstyleRef, scrollBlockLengthRef);\n    saveDivlinerstyle(divlinerstyleRef.current);\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]);\n  var updateBlockLength = react_1.useCallback(function () {\n    var scrollblocklength = calcScrollblockLength({\n      listsize: listsize,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding,\n      orientation: orientation,\n      viewportheight: height,\n      viewportwidth: width\n    });\n    scrollBlockLengthRef.current = scrollblocklength;\n  }, [listsize, cellHeight, cellWidth, gap, padding, orientation, height, width]);\n  return blockstate != 'prepare' ? react_1[\"default\"].createElement(\"div\", {\n    ref: scrollblockRef,\n    style: divlinerstyleRef.current\n  }, children) : null;\n}; // Scrollblock\n// all the parameters affect the length\n\n\nvar calcScrollblockLength = function calcScrollblockLength(_a) {\n  var listsize = _a.listsize,\n      cellHeight = _a.cellHeight,\n      cellWidth = _a.cellWidth,\n      gap = _a.gap,\n      padding = _a.padding,\n      orientation = _a.orientation,\n      viewportheight = _a.viewportheight,\n      viewportwidth = _a.viewportwidth; // dependents of orientation\n\n  var crosslength;\n  var cellLength;\n  var viewportcrosslength;\n\n  if (orientation == 'vertical') {\n    crosslength = cellWidth + gap;\n    cellLength = cellHeight + gap;\n    viewportcrosslength = viewportwidth;\n  } else {\n    crosslength = cellHeight + gap;\n    cellLength = cellWidth + gap;\n    viewportcrosslength = viewportheight;\n  } // adjustments to viewportcrosslength\n\n\n  viewportcrosslength -= padding * 2;\n  viewportcrosslength += gap;\n  if (viewportcrosslength < crosslength) viewportcrosslength = crosslength; // must be at least one\n\n  var crosscount = Math.floor(viewportcrosslength / crosslength);\n  var listlength = Math.ceil(listsize / crosscount);\n  var straightlength = listlength * cellLength - (listlength > 0 ? gap : 0) + padding * 2;\n  return straightlength;\n};\n\nvar updateScrollblockStyles = function updateScrollblockStyles(orientation, stylesRef, scrollblocklengthRef) {\n  var localstyles = Object.assign({}, stylesRef.current);\n  var height;\n  var width;\n\n  if (orientation == 'horizontal') {\n    height = '100%';\n    width = scrollblocklengthRef.current + 'px';\n  } else if (orientation == 'vertical') {\n    height = scrollblocklengthRef.current + 'px';\n    width = '100%';\n  }\n\n  localstyles.height = height;\n  localstyles.width = width;\n  return localstyles;\n};\n\nexports[\"default\"] = Scrollblock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scrollblock.tsx\n");

/***/ }),

/***/ "./src/scrolltracker.tsx":
/*!*******************************!*\
  !*** ./src/scrolltracker.tsx ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // scrolltracker.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar ScrollTracker = function ScrollTracker(_a) {\n  var top = _a.top,\n      left = _a.left,\n      offset = _a.offset,\n      listsize = _a.listsize,\n      styles = _a.styles;\n  var trackdata = offset + 1 + \"/\" + listsize;\n  var styleRef = react_1.useRef(Object.assign({\n    top: top + 'px',\n    left: left + 'px',\n    position: 'fixed',\n    zIndex: 3,\n    backgroundColor: 'white',\n    border: '1px solid gray',\n    borderRadius: '10px',\n    fontSize: 'smaller',\n    padding: '3px'\n  }, styles === null || styles === void 0 ? void 0 : styles.scrolltracker));\n  return react_1[\"default\"].createElement(\"div\", {\n    \"data-name\": 'scrolltracker',\n    style: styleRef.current\n  }, trackdata);\n};\n\nexports[\"default\"] = ScrollTracker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci8uL3NyYy9zY3JvbGx0cmFja2VyLnRzeD9mZjgxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQSxJQUFNLGFBQWEsR0FBRyxTQUFoQixhQUFnQixDQUFDLEVBQUQsRUFBd0M7TUFBckMsR0FBRyxTO01BQUUsSUFBSSxVO01BQUUsTUFBTSxZO01BQUUsUUFBUSxjO01BQUUsTUFBTSxZO0FBRXhELE1BQUksU0FBUyxHQUFNLE1BQU0sR0FBRyxDQUFULEdBQVUsR0FBVixHQUFjLFFBQWpDO0FBRUEsTUFBSSxRQUFRLEdBQUcsZUFBTyxNQUFNLENBQUMsTUFBUCxDQUFjO0FBQ2hDLE9BQUcsRUFBRSxHQUFHLEdBQUcsSUFEcUI7QUFFaEMsUUFBSSxFQUFFLElBQUksR0FBRyxJQUZtQjtBQUdoQyxZQUFRLEVBQUMsT0FIdUI7QUFJaEMsVUFBTSxFQUFDLENBSnlCO0FBS2hDLG1CQUFlLEVBQUMsT0FMZ0I7QUFNaEMsVUFBTSxFQUFFLGdCQU53QjtBQU9oQyxnQkFBWSxFQUFDLE1BUG1CO0FBUWhDLFlBQVEsRUFBQyxTQVJ1QjtBQVNoQyxXQUFPLEVBQUM7QUFUd0IsR0FBZCxFQVVHLE1BQU0sU0FBTixVQUFNLFdBQU4sR0FBTSxNQUFOLFNBQU0sQ0FBRSxhQVZYLENBQVAsQ0FBZjtBQVlBLFNBQU87QUFBQSxpQkFBaUIsZUFBakI7QUFBaUMsU0FBSyxFQUFJLFFBQVEsQ0FBQztBQUFuRCxLQUE4RCxTQUE5RCxDQUFQO0FBQ0gsQ0FqQkQ7O0FBbUJBLHFCQUFlLGFBQWYiLCJmaWxlIjoiLi9zcmMvc2Nyb2xsdHJhY2tlci50c3guanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzY3JvbGx0cmFja2VyLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDIwIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbmltcG9ydCBSZWFjdCwge3VzZVJlZn0gZnJvbSAncmVhY3QnXG5cbmNvbnN0IFNjcm9sbFRyYWNrZXIgPSAoeyB0b3AsIGxlZnQsIG9mZnNldCwgbGlzdHNpemUsIHN0eWxlcyB9KSA9PiB7XG5cbiAgICBsZXQgdHJhY2tkYXRhID0gYCR7b2Zmc2V0ICsgMX0vJHtsaXN0c2l6ZX1gXG5cbiAgICBsZXQgc3R5bGVSZWYgPSB1c2VSZWYoT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIHRvcDogdG9wICsgJ3B4JyxcbiAgICAgICAgbGVmdDogbGVmdCArICdweCcsXG4gICAgICAgIHBvc2l0aW9uOidmaXhlZCcsXG4gICAgICAgIHpJbmRleDozLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6J3doaXRlJyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGdyYXknLFxuICAgICAgICBib3JkZXJSYWRpdXM6JzEwcHgnLFxuICAgICAgICBmb250U2l6ZTonc21hbGxlcicsXG4gICAgICAgIHBhZGRpbmc6JzNweCdcbiAgICB9IGFzIFJlYWN0LkNTU1Byb3BlcnRpZXMsc3R5bGVzPy5zY3JvbGx0cmFja2VyKSlcblxuICAgIHJldHVybiA8ZGl2IGRhdGEtbmFtZSA9ICdzY3JvbGx0cmFja2VyJyBzdHlsZSA9IHtzdHlsZVJlZi5jdXJyZW50fSA+e3RyYWNrZGF0YX08L2Rpdj5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsVHJhY2tlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scrolltracker.tsx\n");

/***/ }),

/***/ "./src/viewport.tsx":
/*!**************************!*\
  !*** ./src/viewport.tsx ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // viewport.tsx\n// copyright (c) 2020 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ViewportContext = void 0;\n/*\n    The role of viewport is to provide data to its children (scrollblock and cradle),\n    and act as the visible portal of the list being shown\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nexports.ViewportContext = react_1[\"default\"].createContext(null);\n\nvar react_is_mounted_hook_1 = __importDefault(__webpack_require__(/*! react-is-mounted-hook */ \"./node_modules/react-is-mounted-hook/lib/index.js\"));\n\nvar resize_observer_polyfill_1 = __importDefault(__webpack_require__(/*! resize-observer-polyfill */ \"./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\"));\n\nvar contentmanager_1 = __webpack_require__(/*! ./contentmanager */ \"./src/contentmanager.tsx\");\n\nvar LocalResizeObserver = window['ResizeObserver'] || resize_observer_polyfill_1[\"default\"]; // control constant\n\nvar RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE = 250;\n\nvar Viewport = function Viewport(_a) {\n  // -----------------------[ initialize ]------------------\n  var children = _a.children,\n      orientation = _a.orientation,\n      cellWidth = _a.cellWidth,\n      cellHeight = _a.cellHeight,\n      gap = _a.gap,\n      padding = _a.padding,\n      functions = _a.functions,\n      styles = _a.styles,\n      scrollerID = _a.scrollerID; // processing state\n\n  var contentmanager = react_1.useContext(contentmanager_1.ContentContext);\n\n  var _b = react_1.useState('prepare'),\n      portstate = _b[0],\n      setPortState = _b[1];\n\n  var portstateRef = react_1.useRef(null);\n  portstateRef.current = portstate;\n  var isMounted = react_is_mounted_hook_1[\"default\"](); // data heap\n\n  var timeoutidRef = react_1.useRef(null);\n  var viewportdivRef = react_1.useRef(undefined);\n  var divlinerstyleRef = react_1.useRef(Object.assign({\n    position: 'absolute',\n    // height:'100%',\n    // width:'100%',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    overflow: 'auto',\n    // WebkitOverflowScrolling:'touch',\n    backgroundColor: 'red'\n  }, styles === null || styles === void 0 ? void 0 : styles.viewport));\n  var resizeTimeridRef = react_1.useRef(null);\n  var isResizingRef = react_1.useRef(false);\n  var viewportDataRef = react_1.useRef(null);\n  var resizeObserverRef = react_1.useRef(null);\n  var portalRef = react_1.useRef(null); // initialize\n\n  react_1.useEffect(function () {\n    resizeObserverRef.current = new LocalResizeObserver(resizeCallback);\n    resizeObserverRef.current.observe(viewportdivRef.current);\n    return function () {\n      resizeObserverRef.current.disconnect();\n    };\n  }, []);\n  react_1.useEffect(function () {\n    if (scrollerID == 0 || !viewportdivRef.current) return;\n    var parentscrollerid;\n    var parentindex;\n    var el = viewportdivRef.current;\n\n    while (el) {\n      // console.log('dataset',el.dataset, el)\n      if (el.dataset && el.dataset.type == 'portalcontainer') {\n        parentindex = parseInt(el.dataset.index);\n        parentscrollerid = parseInt(el.dataset.scrollerid);\n        break;\n      } else {\n        el = el.parentElement;\n      }\n    }\n\n    if (!el) {\n      console.log('ERROR: parent portalcontainer not found');\n      return;\n    }\n\n    portalRef.current = contentmanager.getContentlistItem(parentscrollerid, parentindex); // console.log('viewport of scrollerID has parentscrollerid and parentindex for portal', \n    //     scrollerID, parentscrollerid, parentindex,portalRef.current)\n    // portalIndexRef.current = el.dataset.index\n  }, [viewportdivRef.current]);\n  var resizeCallback = react_1.useCallback(function (entries) {\n    if (portstateRef.current == 'prepare') return; // console.log('checking portal reparenting',portalRef.current)\n\n    if (portalRef.current && portalRef.current.reparenting) {\n      // console.log('returning from viewport resizeCallback')\n      return;\n    }\n\n    var target = entries[0].target;\n\n    if (!target.dataset.initialized) {\n      target.dataset.initialized = true;\n      return;\n    }\n\n    if (!isResizingRef.current) {\n      isResizingRef.current = true; // below is a realtime message to cradle.onScroll\n      // to stop updating the referenceIndexData, and to the item observer to stop\n      // triggering responses (anticipating reset of cradle content based on resize)\n\n      viewportDataRef.current.isResizing = true;\n      if (isMounted()) setPortState('resizing');\n    }\n\n    clearTimeout(resizeTimeridRef.current);\n    resizeTimeridRef.current = setTimeout(function () {\n      isResizingRef.current = false;\n      if (isMounted()) setPortState('resize');\n    }, RESIZE_TIMEOUT_FOR_ONAFTERSRESIZE);\n  }, []); // ----------------------------------[ calculate ]--------------------------------\n  // calculated values\n\n  divlinerstyleRef.current = react_1.useMemo(function () {\n    var mincrosslength = calcMinViewportCrossLength(orientation, cellWidth, cellHeight, padding);\n\n    var styles = __assign({}, divlinerstyleRef.current);\n\n    if (orientation == 'vertical') {\n      styles.minWidth = mincrosslength + 'px';\n      styles.minHeight = 'auto';\n    } else {\n      styles.minWidth = 'auto';\n      styles.minHeight = mincrosslength + 'px';\n    }\n\n    return styles;\n  }, [orientation, cellWidth, cellHeight, padding]); // TODO: gap?\n\n  var viewportClientRect;\n\n  if (viewportdivRef.current) {\n    viewportClientRect = viewportdivRef.current.getBoundingClientRect();\n  } else {\n    viewportClientRect = {};\n  }\n\n  var top = viewportClientRect.top,\n      right = viewportClientRect.right,\n      bottom = viewportClientRect.bottom,\n      left = viewportClientRect.left; // set context data for children\n\n  viewportDataRef.current = react_1.useMemo(function () {\n    var width, height, localViewportData;\n\n    if (!(top === undefined)) {\n      //proxy\n      width = right - left;\n      height = bottom - top;\n      localViewportData = {\n        viewportDimensions: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left,\n          width: width,\n          height: height\n        },\n        elementref: viewportdivRef,\n        isResizing: isResizingRef.current\n      };\n    }\n\n    return localViewportData;\n  }, [orientation, top, right, bottom, left, isResizingRef.current]); // --------------------[ state processing ]---------------------------\n\n  react_1.useEffect(function () {\n    switch (portstate) {\n      case 'prepare':\n      case 'resize':\n        {\n          setPortState('render');\n          break;\n        }\n    }\n  }, [portstate]); // ----------------------[ render ]--------------------------------\n  // console.log('scrollerID, viewportDataRef.current',scrollerID, viewportDataRef.current)\n\n  return react_1[\"default\"].createElement(exports.ViewportContext.Provider, {\n    value: viewportDataRef.current\n  }, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'viewport',\n    \"data-masterscrollerid\": scrollerID,\n    style: divlinerstyleRef.current,\n    ref: viewportdivRef\n  }, portstate != 'prepare' ? children : null));\n}; // Viewport\n// establish minimum width/height for the viewport -- approximately one item\n\n\nvar calcMinViewportCrossLength = function calcMinViewportCrossLength(orientation, cellWidth, cellHeight, padding) {\n  var crosslength, cellLength;\n\n  if (orientation == 'vertical') {\n    cellLength = cellWidth;\n  } else {\n    cellLength = cellHeight;\n  }\n\n  crosslength = cellLength + padding * 2;\n  return crosslength;\n};\n\nexports[\"default\"] = Viewport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/viewport.tsx\n");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_react__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci9leHRlcm5hbCBcIlJlYWN0XCI/YzQ4MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJyZWFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///react\n");

/***/ }),

/***/ "react-dom":
/*!****************************!*\
  !*** external "react-dom" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TY3JvbGxlci9leHRlcm5hbCBcInJlYWN0LWRvbVwiPzVlOWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoicmVhY3QtZG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3JlYWN0X2RvbV9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///react-dom\n");

/***/ })

/******/ });
});