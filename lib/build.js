/*! For license information please see build.js.LICENSE.txt */
!function(e,I){"object"==typeof exports&&"object"==typeof module?module.exports=I(require("react"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","react-dom"],I):"object"==typeof exports?exports["react-infinite-grid-scroller"]=I(require("react"),require("react-dom")):e["react-infinite-grid-scroller"]=I(e.react,e["react-dom"])}(self,((__WEBPACK_EXTERNAL_MODULE_react__,__WEBPACK_EXTERNAL_MODULE_react_dom__)=>(()=>{var __webpack_modules__={"./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "DOMRectReadOnly": () => (/* binding */ DOMRectReadOnly)\n/* harmony export */ });\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/freeze */ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js");\n\nvar DOMRectReadOnly = (function () {\n    function DOMRectReadOnly(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.top = this.y;\n        this.left = this.x;\n        this.bottom = this.top + this.height;\n        this.right = this.left + this.width;\n        return (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_0__.freeze)(this);\n    }\n    DOMRectReadOnly.prototype.toJSON = function () {\n        var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n        return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };\n    };\n    DOMRectReadOnly.fromRect = function (rectangle) {\n        return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n    };\n    return DOMRectReadOnly;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL0RPTVJlY3RSZWFkT25seS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscURBQU07QUFDckI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQzBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvRE9NUmVjdFJlYWRPbmx5LmpzP2ZkZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJlZXplIH0gZnJvbSAnLi91dGlscy9mcmVlemUnO1xudmFyIERPTVJlY3RSZWFkT25seSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRE9NUmVjdFJlYWRPbmx5KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy50b3AgPSB0aGlzLnk7XG4gICAgICAgIHRoaXMubGVmdCA9IHRoaXMueDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLnRvcCArIHRoaXMuaGVpZ2h0O1xuICAgICAgICB0aGlzLnJpZ2h0ID0gdGhpcy5sZWZ0ICsgdGhpcy53aWR0aDtcbiAgICAgICAgcmV0dXJuIGZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgRE9NUmVjdFJlYWRPbmx5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHggPSBfYS54LCB5ID0gX2EueSwgdG9wID0gX2EudG9wLCByaWdodCA9IF9hLnJpZ2h0LCBib3R0b20gPSBfYS5ib3R0b20sIGxlZnQgPSBfYS5sZWZ0LCB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XG4gICAgICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHRvcDogdG9wLCByaWdodDogcmlnaHQsIGJvdHRvbTogYm90dG9tLCBsZWZ0OiBsZWZ0LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG4gICAgfTtcbiAgICBET01SZWN0UmVhZE9ubHkuZnJvbVJlY3QgPSBmdW5jdGlvbiAocmVjdGFuZ2xlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRE9NUmVjdFJlYWRPbmx5KHJlY3RhbmdsZS54LCByZWN0YW5nbGUueSwgcmVjdGFuZ2xlLndpZHRoLCByZWN0YW5nbGUuaGVpZ2h0KTtcbiAgICB9O1xuICAgIHJldHVybiBET01SZWN0UmVhZE9ubHk7XG59KCkpO1xuZXhwb3J0IHsgRE9NUmVjdFJlYWRPbmx5IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js\n')},"./node_modules/@juggle/resize-observer/lib/ResizeObservation.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ResizeObservation": () => (/* binding */ ResizeObservation)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResizeObserverBoxOptions */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js");\n/* harmony import */ var _algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./algorithms/calculateBoxSize */ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/element */ "./node_modules/@juggle/resize-observer/lib/utils/element.js");\n\n\n\nvar skipNotifyOnElement = function (target) {\n    return !(0,_utils_element__WEBPACK_IMPORTED_MODULE_2__.isSVG)(target)\n        && !(0,_utils_element__WEBPACK_IMPORTED_MODULE_2__.isReplacedElement)(target)\n        && getComputedStyle(target).display === \'inline\';\n};\nvar ResizeObservation = (function () {\n    function ResizeObservation(target, observedBox) {\n        this.target = target;\n        this.observedBox = observedBox || _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.CONTENT_BOX;\n        this.lastReportedSize = {\n            inlineSize: 0,\n            blockSize: 0\n        };\n    }\n    ResizeObservation.prototype.isActive = function () {\n        var size = (0,_algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_1__.calculateBoxSize)(this.target, this.observedBox, true);\n        if (skipNotifyOnElement(this.target)) {\n            this.lastReportedSize = size;\n        }\n        if (this.lastReportedSize.inlineSize !== size.inlineSize\n            || this.lastReportedSize.blockSize !== size.blockSize) {\n            return true;\n        }\n        return false;\n    };\n    return ResizeObservation;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmF0aW9uLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0U7QUFDTDtBQUNOO0FBQzNEO0FBQ0EsWUFBWSxxREFBSztBQUNqQixZQUFZLGlFQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDJGQUFvQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOEVBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUM0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmF0aW9uLmpzPzQ0YzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zIH0gZnJvbSAnLi9SZXNpemVPYnNlcnZlckJveE9wdGlvbnMnO1xuaW1wb3J0IHsgY2FsY3VsYXRlQm94U2l6ZSB9IGZyb20gJy4vYWxnb3JpdGhtcy9jYWxjdWxhdGVCb3hTaXplJztcbmltcG9ydCB7IGlzU1ZHLCBpc1JlcGxhY2VkRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvZWxlbWVudCc7XG52YXIgc2tpcE5vdGlmeU9uRWxlbWVudCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICByZXR1cm4gIWlzU1ZHKHRhcmdldClcbiAgICAgICAgJiYgIWlzUmVwbGFjZWRFbGVtZW50KHRhcmdldClcbiAgICAgICAgJiYgZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmRpc3BsYXkgPT09ICdpbmxpbmUnO1xufTtcbnZhciBSZXNpemVPYnNlcnZhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0LCBvYnNlcnZlZEJveCkge1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5vYnNlcnZlZEJveCA9IG9ic2VydmVkQm94IHx8IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5DT05URU5UX0JPWDtcbiAgICAgICAgdGhpcy5sYXN0UmVwb3J0ZWRTaXplID0ge1xuICAgICAgICAgICAgaW5saW5lU2l6ZTogMCxcbiAgICAgICAgICAgIGJsb2NrU2l6ZTogMFxuICAgICAgICB9O1xuICAgIH1cbiAgICBSZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuaXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzaXplID0gY2FsY3VsYXRlQm94U2l6ZSh0aGlzLnRhcmdldCwgdGhpcy5vYnNlcnZlZEJveCwgdHJ1ZSk7XG4gICAgICAgIGlmIChza2lwTm90aWZ5T25FbGVtZW50KHRoaXMudGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0UmVwb3J0ZWRTaXplID0gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYXN0UmVwb3J0ZWRTaXplLmlubGluZVNpemUgIT09IHNpemUuaW5saW5lU2l6ZVxuICAgICAgICAgICAgfHwgdGhpcy5sYXN0UmVwb3J0ZWRTaXplLmJsb2NrU2l6ZSAhPT0gc2l6ZS5ibG9ja1NpemUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBSZXNpemVPYnNlcnZhdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZhdGlvbiB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObservation.js\n')},"./node_modules/@juggle/resize-observer/lib/ResizeObserver.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ResizeObserver\": () => (/* binding */ ResizeObserver)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ResizeObserverController */ \"./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js\");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/element */ \"./node_modules/@juggle/resize-observer/lib/utils/element.js\");\n\n\nvar ResizeObserver = (function () {\n    function ResizeObserver(callback) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (typeof callback !== 'function') {\n            throw new TypeError(\"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.connect(this, callback);\n    }\n    ResizeObserver.prototype.observe = function (target, options) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (!(0,_utils_element__WEBPACK_IMPORTED_MODULE_1__.isElement)(target)) {\n            throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.observe(this, target, options);\n    };\n    ResizeObserver.prototype.unobserve = function (target) {\n        if (arguments.length === 0) {\n            throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        }\n        if (!(0,_utils_element__WEBPACK_IMPORTED_MODULE_1__.isElement)(target)) {\n            throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        }\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.unobserve(this, target);\n    };\n    ResizeObserver.prototype.disconnect = function () {\n        _ResizeObserverController__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverController.disconnect(this);\n    };\n    ResizeObserver.toString = function () {\n        return 'function ResizeObserver () { [polyfill code] }';\n    };\n    return ResizeObserver;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRTtBQUMxQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1RkFBZ0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEseURBQVM7QUFDdEI7QUFDQTtBQUNBLFFBQVEsdUZBQWdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlEQUFTO0FBQ3RCO0FBQ0E7QUFDQSxRQUFRLHlGQUFrQztBQUMxQztBQUNBO0FBQ0EsUUFBUSwwRkFBbUM7QUFDM0M7QUFDQTtBQUNBLDZDQUE2QyxpQkFBaUI7QUFDOUQ7QUFDQTtBQUNBLENBQUM7QUFDeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9SZXNpemVPYnNlcnZlci5qcz9kMDIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlciB9IGZyb20gJy4vUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyJztcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gJy4vdXRpbHMvZWxlbWVudCc7XG52YXIgUmVzaXplT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUmVzaXplT2JzZXJ2ZXInOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdSZXNpemVPYnNlcnZlcic6IFRoZSBjYWxsYmFjayBwcm92aWRlZCBhcyBwYXJhbWV0ZXIgMSBpcyBub3QgYSBmdW5jdGlvbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmNvbm5lY3QodGhpcywgY2FsbGJhY2spO1xuICAgIH1cbiAgICBSZXNpemVPYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnb2JzZXJ2ZScgb24gJ1Jlc2l6ZU9ic2VydmVyJzogMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ29ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IHBhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlICdFbGVtZW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5vYnNlcnZlKHRoaXMsIHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBSZXNpemVPYnNlcnZlci5wcm90b3R5cGUudW5vYnNlcnZlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd1bm9ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd1bm9ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IHBhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlICdFbGVtZW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci51bm9ic2VydmUodGhpcywgdGFyZ2V0KTtcbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuZGlzY29ubmVjdCh0aGlzKTtcbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ2Z1bmN0aW9uIFJlc2l6ZU9ic2VydmVyICgpIHsgW3BvbHlmaWxsIGNvZGVdIH0nO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyO1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserver.js\n")},"./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ResizeObserverBoxOptions": () => (/* binding */ ResizeObserverBoxOptions)\n/* harmony export */ });\nvar ResizeObserverBoxOptions;\n(function (ResizeObserverBoxOptions) {\n    ResizeObserverBoxOptions["BORDER_BOX"] = "border-box";\n    ResizeObserverBoxOptions["CONTENT_BOX"] = "content-box";\n    ResizeObserverBoxOptions["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";\n})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNERBQTREO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zLmpzP2U1NTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucztcbihmdW5jdGlvbiAoUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zKSB7XG4gICAgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zW1wiQk9SREVSX0JPWFwiXSA9IFwiYm9yZGVyLWJveFwiO1xuICAgIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9uc1tcIkNPTlRFTlRfQk9YXCJdID0gXCJjb250ZW50LWJveFwiO1xuICAgIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9uc1tcIkRFVklDRV9QSVhFTF9DT05URU5UX0JPWFwiXSA9IFwiZGV2aWNlLXBpeGVsLWNvbnRlbnQtYm94XCI7XG59KShSZXNpemVPYnNlcnZlckJveE9wdGlvbnMgfHwgKFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyA9IHt9KSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js\n')},"./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ResizeObserverController": () => (/* binding */ ResizeObserverController)\n/* harmony export */ });\n/* harmony import */ var _utils_scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/scheduler */ "./node_modules/@juggle/resize-observer/lib/utils/scheduler.js");\n/* harmony import */ var _ResizeObservation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ResizeObservation */ "./node_modules/@juggle/resize-observer/lib/ResizeObservation.js");\n/* harmony import */ var _ResizeObserverDetail__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ResizeObserverDetail */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js");\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/resizeObservers */ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js");\n\n\n\n\nvar observerMap = new WeakMap();\nvar getObservationIndex = function (observationTargets, target) {\n    for (var i = 0; i < observationTargets.length; i += 1) {\n        if (observationTargets[i].target === target) {\n            return i;\n        }\n    }\n    return -1;\n};\nvar ResizeObserverController = (function () {\n    function ResizeObserverController() {\n    }\n    ResizeObserverController.connect = function (resizeObserver, callback) {\n        var detail = new _ResizeObserverDetail__WEBPACK_IMPORTED_MODULE_2__.ResizeObserverDetail(resizeObserver, callback);\n        observerMap.set(resizeObserver, detail);\n    };\n    ResizeObserverController.observe = function (resizeObserver, target, options) {\n        var detail = observerMap.get(resizeObserver);\n        var firstObservation = detail.observationTargets.length === 0;\n        if (getObservationIndex(detail.observationTargets, target) < 0) {\n            firstObservation && _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.push(detail);\n            detail.observationTargets.push(new _ResizeObservation__WEBPACK_IMPORTED_MODULE_1__.ResizeObservation(target, options && options.box));\n            (0,_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.updateCount)(1);\n            _utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.scheduler.schedule();\n        }\n    };\n    ResizeObserverController.unobserve = function (resizeObserver, target) {\n        var detail = observerMap.get(resizeObserver);\n        var index = getObservationIndex(detail.observationTargets, target);\n        var lastObservation = detail.observationTargets.length === 1;\n        if (index >= 0) {\n            lastObservation && _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.splice(_utils_resizeObservers__WEBPACK_IMPORTED_MODULE_3__.resizeObservers.indexOf(detail), 1);\n            detail.observationTargets.splice(index, 1);\n            (0,_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__.updateCount)(-1);\n        }\n    };\n    ResizeObserverController.disconnect = function (resizeObserver) {\n        var _this = this;\n        var detail = observerMap.get(resizeObserver);\n        detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });\n        detail.activeTargets.splice(0, detail.activeTargets.length);\n    };\n    return ResizeObserverController;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRDtBQUNIO0FBQ007QUFDSjtBQUMxRDtBQUNBO0FBQ0Esb0JBQW9CLCtCQUErQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1RUFBb0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdFQUFvQjtBQUNwRCwrQ0FBK0MsaUVBQWlCO0FBQ2hFLFlBQVksNkRBQVc7QUFDdkIsWUFBWSxnRUFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMEVBQXNCLENBQUMsMkVBQXVCO0FBQzdFO0FBQ0EsWUFBWSw2REFBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLG9EQUFvRDtBQUN0SDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ21DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmpzP2YzNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NoZWR1bGVyLCB1cGRhdGVDb3VudCB9IGZyb20gJy4vdXRpbHMvc2NoZWR1bGVyJztcbmltcG9ydCB7IFJlc2l6ZU9ic2VydmF0aW9uIH0gZnJvbSAnLi9SZXNpemVPYnNlcnZhdGlvbic7XG5pbXBvcnQgeyBSZXNpemVPYnNlcnZlckRldGFpbCB9IGZyb20gJy4vUmVzaXplT2JzZXJ2ZXJEZXRhaWwnO1xuaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi91dGlscy9yZXNpemVPYnNlcnZlcnMnO1xudmFyIG9ic2VydmVyTWFwID0gbmV3IFdlYWtNYXAoKTtcbnZhciBnZXRPYnNlcnZhdGlvbkluZGV4ID0gZnVuY3Rpb24gKG9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYnNlcnZhdGlvblRhcmdldHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKG9ic2VydmF0aW9uVGFyZ2V0c1tpXS50YXJnZXQgPT09IHRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufTtcbnZhciBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcigpIHtcbiAgICB9XG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmNvbm5lY3QgPSBmdW5jdGlvbiAocmVzaXplT2JzZXJ2ZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkZXRhaWwgPSBuZXcgUmVzaXplT2JzZXJ2ZXJEZXRhaWwocmVzaXplT2JzZXJ2ZXIsIGNhbGxiYWNrKTtcbiAgICAgICAgb2JzZXJ2ZXJNYXAuc2V0KHJlc2l6ZU9ic2VydmVyLCBkZXRhaWwpO1xuICAgIH07XG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLm9ic2VydmUgPSBmdW5jdGlvbiAocmVzaXplT2JzZXJ2ZXIsIHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgZGV0YWlsID0gb2JzZXJ2ZXJNYXAuZ2V0KHJlc2l6ZU9ic2VydmVyKTtcbiAgICAgICAgdmFyIGZpcnN0T2JzZXJ2YXRpb24gPSBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgaWYgKGdldE9ic2VydmF0aW9uSW5kZXgoZGV0YWlsLm9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KSA8IDApIHtcbiAgICAgICAgICAgIGZpcnN0T2JzZXJ2YXRpb24gJiYgcmVzaXplT2JzZXJ2ZXJzLnB1c2goZGV0YWlsKTtcbiAgICAgICAgICAgIGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMucHVzaChuZXcgUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0LCBvcHRpb25zICYmIG9wdGlvbnMuYm94KSk7XG4gICAgICAgICAgICB1cGRhdGVDb3VudCgxKTtcbiAgICAgICAgICAgIHNjaGVkdWxlci5zY2hlZHVsZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIudW5vYnNlcnZlID0gZnVuY3Rpb24gKHJlc2l6ZU9ic2VydmVyLCB0YXJnZXQpIHtcbiAgICAgICAgdmFyIGRldGFpbCA9IG9ic2VydmVyTWFwLmdldChyZXNpemVPYnNlcnZlcik7XG4gICAgICAgIHZhciBpbmRleCA9IGdldE9ic2VydmF0aW9uSW5kZXgoZGV0YWlsLm9ic2VydmF0aW9uVGFyZ2V0cywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGxhc3RPYnNlcnZhdGlvbiA9IGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMubGVuZ3RoID09PSAxO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgbGFzdE9ic2VydmF0aW9uICYmIHJlc2l6ZU9ic2VydmVycy5zcGxpY2UocmVzaXplT2JzZXJ2ZXJzLmluZGV4T2YoZGV0YWlsKSwgMSk7XG4gICAgICAgICAgICBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB1cGRhdGVDb3VudCgtMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKHJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBkZXRhaWwgPSBvYnNlcnZlck1hcC5nZXQocmVzaXplT2JzZXJ2ZXIpO1xuICAgICAgICBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAob3QpIHsgcmV0dXJuIF90aGlzLnVub2JzZXJ2ZShyZXNpemVPYnNlcnZlciwgb3QudGFyZ2V0KTsgfSk7XG4gICAgICAgIGRldGFpbC5hY3RpdmVUYXJnZXRzLnNwbGljZSgwLCBkZXRhaWwuYWN0aXZlVGFyZ2V0cy5sZW5ndGgpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcjtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverController.js\n')},"./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ResizeObserverDetail": () => (/* binding */ ResizeObserverDetail)\n/* harmony export */ });\nvar ResizeObserverDetail = (function () {\n    function ResizeObserverDetail(resizeObserver, callback) {\n        this.activeTargets = [];\n        this.skippedTargets = [];\n        this.observationTargets = [];\n        this.observer = resizeObserver;\n        this.callback = callback;\n    }\n    return ResizeObserverDetail;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRGV0YWlsLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQytCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvUmVzaXplT2JzZXJ2ZXJEZXRhaWwuanM/NzgxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUmVzaXplT2JzZXJ2ZXJEZXRhaWwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyRGV0YWlsKHJlc2l6ZU9ic2VydmVyLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmFjdGl2ZVRhcmdldHMgPSBbXTtcbiAgICAgICAgdGhpcy5za2lwcGVkVGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLm9ic2VydmF0aW9uVGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLm9ic2VydmVyID0gcmVzaXplT2JzZXJ2ZXI7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyRGV0YWlsO1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyRGV0YWlsIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js\n')},"./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ResizeObserverEntry": () => (/* binding */ ResizeObserverEntry)\n/* harmony export */ });\n/* harmony import */ var _algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/calculateBoxSize */ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js");\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/freeze */ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js");\n\n\nvar ResizeObserverEntry = (function () {\n    function ResizeObserverEntry(target) {\n        var boxes = (0,_algorithms_calculateBoxSize__WEBPACK_IMPORTED_MODULE_0__.calculateBoxSizes)(target);\n        this.target = target;\n        this.contentRect = boxes.contentRect;\n        this.borderBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.borderBoxSize]);\n        this.contentBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.contentBoxSize]);\n        this.devicePixelContentBoxSize = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_1__.freeze)([boxes.devicePixelContentBoxSize]);\n    }\n    return ResizeObserverEntry;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRW50cnkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtFO0FBQzFCO0FBQ3hDO0FBQ0E7QUFDQSxvQkFBb0IsK0VBQWlCO0FBQ3JDO0FBQ0E7QUFDQSw2QkFBNkIscURBQU07QUFDbkMsOEJBQThCLHFEQUFNO0FBQ3BDLHlDQUF5QyxxREFBTTtBQUMvQztBQUNBO0FBQ0EsQ0FBQztBQUM4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyRW50cnkuanM/NDFlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxjdWxhdGVCb3hTaXplcyB9IGZyb20gJy4vYWxnb3JpdGhtcy9jYWxjdWxhdGVCb3hTaXplJztcbmltcG9ydCB7IGZyZWV6ZSB9IGZyb20gJy4vdXRpbHMvZnJlZXplJztcbnZhciBSZXNpemVPYnNlcnZlckVudHJ5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlckVudHJ5KHRhcmdldCkge1xuICAgICAgICB2YXIgYm94ZXMgPSBjYWxjdWxhdGVCb3hTaXplcyh0YXJnZXQpO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5jb250ZW50UmVjdCA9IGJveGVzLmNvbnRlbnRSZWN0O1xuICAgICAgICB0aGlzLmJvcmRlckJveFNpemUgPSBmcmVlemUoW2JveGVzLmJvcmRlckJveFNpemVdKTtcbiAgICAgICAgdGhpcy5jb250ZW50Qm94U2l6ZSA9IGZyZWV6ZShbYm94ZXMuY29udGVudEJveFNpemVdKTtcbiAgICAgICAgdGhpcy5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplID0gZnJlZXplKFtib3hlcy5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplXSk7XG4gICAgfVxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlckVudHJ5O1xufSgpKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyRW50cnkgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js\n')},"./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ResizeObserverSize": () => (/* binding */ ResizeObserverSize)\n/* harmony export */ });\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/freeze */ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js");\n\nvar ResizeObserverSize = (function () {\n    function ResizeObserverSize(inlineSize, blockSize) {\n        this.inlineSize = inlineSize;\n        this.blockSize = blockSize;\n        (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_0__.freeze)(this);\n    }\n    return ResizeObserverSize;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyU2l6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEscURBQU07QUFDZDtBQUNBO0FBQ0EsQ0FBQztBQUM2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL1Jlc2l6ZU9ic2VydmVyU2l6ZS5qcz9jNjU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyZWV6ZSB9IGZyb20gJy4vdXRpbHMvZnJlZXplJztcbnZhciBSZXNpemVPYnNlcnZlclNpemUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyU2l6ZShpbmxpbmVTaXplLCBibG9ja1NpemUpIHtcbiAgICAgICAgdGhpcy5pbmxpbmVTaXplID0gaW5saW5lU2l6ZTtcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSBibG9ja1NpemU7XG4gICAgICAgIGZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyU2l6ZTtcbn0oKSk7XG5leHBvcnQgeyBSZXNpemVPYnNlcnZlclNpemUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js\n')},"./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "broadcastActiveObservations": () => (/* binding */ broadcastActiveObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js");\n/* harmony import */ var _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverEntry */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js");\n/* harmony import */ var _calculateDepthForNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculateDepthForNode */ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js");\n/* harmony import */ var _calculateBoxSize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./calculateBoxSize */ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js");\n\n\n\n\nvar broadcastActiveObservations = function () {\n    var shallowestDepth = Infinity;\n    var callbacks = [];\n    _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.forEach(function processObserver(ro) {\n        if (ro.activeTargets.length === 0) {\n            return;\n        }\n        var entries = [];\n        ro.activeTargets.forEach(function processTarget(ot) {\n            var entry = new _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverEntry(ot.target);\n            var targetDepth = (0,_calculateDepthForNode__WEBPACK_IMPORTED_MODULE_2__.calculateDepthForNode)(ot.target);\n            entries.push(entry);\n            ot.lastReportedSize = (0,_calculateBoxSize__WEBPACK_IMPORTED_MODULE_3__.calculateBoxSize)(ot.target, ot.observedBox);\n            if (targetDepth < shallowestDepth) {\n                shallowestDepth = targetDepth;\n            }\n        });\n        callbacks.push(function resizeObserverCallback() {\n            ro.callback.call(ro.observer, entries, ro.observer);\n        });\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n    });\n    for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n        var callback = callbacks_1[_i];\n        callback();\n    }\n    return shallowestDepth;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJEO0FBQ0U7QUFDRztBQUNWO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLElBQUksMkVBQXVCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIscUVBQW1CO0FBQy9DLDhCQUE4Qiw2RUFBcUI7QUFDbkQ7QUFDQSxrQ0FBa0MsbUVBQWdCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLDhDQUE4Qyx5QkFBeUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zLmpzP2NhYjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbmltcG9ydCB7IFJlc2l6ZU9ic2VydmVyRW50cnkgfSBmcm9tICcuLi9SZXNpemVPYnNlcnZlckVudHJ5JztcbmltcG9ydCB7IGNhbGN1bGF0ZURlcHRoRm9yTm9kZSB9IGZyb20gJy4vY2FsY3VsYXRlRGVwdGhGb3JOb2RlJztcbmltcG9ydCB7IGNhbGN1bGF0ZUJveFNpemUgfSBmcm9tICcuL2NhbGN1bGF0ZUJveFNpemUnO1xudmFyIGJyb2FkY2FzdEFjdGl2ZU9ic2VydmF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2hhbGxvd2VzdERlcHRoID0gSW5maW5pdHk7XG4gICAgdmFyIGNhbGxiYWNrcyA9IFtdO1xuICAgIHJlc2l6ZU9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIHByb2Nlc3NPYnNlcnZlcihybykge1xuICAgICAgICBpZiAocm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgICAgICByby5hY3RpdmVUYXJnZXRzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc1RhcmdldChvdCkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob3QudGFyZ2V0KTtcbiAgICAgICAgICAgIHZhciB0YXJnZXREZXB0aCA9IGNhbGN1bGF0ZURlcHRoRm9yTm9kZShvdC50YXJnZXQpO1xuICAgICAgICAgICAgZW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIG90Lmxhc3RSZXBvcnRlZFNpemUgPSBjYWxjdWxhdGVCb3hTaXplKG90LnRhcmdldCwgb3Qub2JzZXJ2ZWRCb3gpO1xuICAgICAgICAgICAgaWYgKHRhcmdldERlcHRoIDwgc2hhbGxvd2VzdERlcHRoKSB7XG4gICAgICAgICAgICAgICAgc2hhbGxvd2VzdERlcHRoID0gdGFyZ2V0RGVwdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiByZXNpemVPYnNlcnZlckNhbGxiYWNrKCkge1xuICAgICAgICAgICAgcm8uY2FsbGJhY2suY2FsbChyby5vYnNlcnZlciwgZW50cmllcywgcm8ub2JzZXJ2ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcm8uYWN0aXZlVGFyZ2V0cy5zcGxpY2UoMCwgcm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGgpO1xuICAgIH0pO1xuICAgIGZvciAodmFyIF9pID0gMCwgY2FsbGJhY2tzXzEgPSBjYWxsYmFja3M7IF9pIDwgY2FsbGJhY2tzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc18xW19pXTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYWxsb3dlc3REZXB0aDtcbn07XG5leHBvcnQgeyBicm9hZGNhc3RBY3RpdmVPYnNlcnZhdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js\n')},"./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "calculateBoxSize": () => (/* binding */ calculateBoxSize),\n/* harmony export */   "calculateBoxSizes": () => (/* binding */ calculateBoxSizes)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ResizeObserverBoxOptions */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js");\n/* harmony import */ var _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverSize */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js");\n/* harmony import */ var _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../DOMRectReadOnly */ "./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js");\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/element */ "./node_modules/@juggle/resize-observer/lib/utils/element.js");\n/* harmony import */ var _utils_freeze__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/freeze */ "./node_modules/@juggle/resize-observer/lib/utils/freeze.js");\n/* harmony import */ var _utils_global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/global */ "./node_modules/@juggle/resize-observer/lib/utils/global.js");\n\n\n\n\n\n\nvar cache = new WeakMap();\nvar scrollRegexp = /auto|scroll/;\nvar verticalRegexp = /^tb|vertical/;\nvar IE = (/msie|trident/i).test(_utils_global__WEBPACK_IMPORTED_MODULE_5__.global.navigator && _utils_global__WEBPACK_IMPORTED_MODULE_5__.global.navigator.userAgent);\nvar parseDimension = function (pixel) { return parseFloat(pixel || \'0\'); };\nvar size = function (inlineSize, blockSize, switchSizes) {\n    if (inlineSize === void 0) { inlineSize = 0; }\n    if (blockSize === void 0) { blockSize = 0; }\n    if (switchSizes === void 0) { switchSizes = false; }\n    return new _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);\n};\nvar zeroBoxes = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_4__.freeze)({\n    devicePixelContentBoxSize: size(),\n    borderBoxSize: size(),\n    contentBoxSize: size(),\n    contentRect: new _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__.DOMRectReadOnly(0, 0, 0, 0)\n});\nvar calculateBoxSizes = function (target, forceRecalculation) {\n    if (forceRecalculation === void 0) { forceRecalculation = false; }\n    if (cache.has(target) && !forceRecalculation) {\n        return cache.get(target);\n    }\n    if ((0,_utils_element__WEBPACK_IMPORTED_MODULE_3__.isHidden)(target)) {\n        cache.set(target, zeroBoxes);\n        return zeroBoxes;\n    }\n    var cs = getComputedStyle(target);\n    var svg = (0,_utils_element__WEBPACK_IMPORTED_MODULE_3__.isSVG)(target) && target.ownerSVGElement && target.getBBox();\n    var removePadding = !IE && cs.boxSizing === \'border-box\';\n    var switchSizes = verticalRegexp.test(cs.writingMode || \'\');\n    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || \'\');\n    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || \'\');\n    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n    var horizontalPadding = paddingLeft + paddingRight;\n    var verticalPadding = paddingTop + paddingBottom;\n    var horizontalBorderArea = borderLeft + borderRight;\n    var verticalBorderArea = borderTop + borderBottom;\n    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n    var boxes = (0,_utils_freeze__WEBPACK_IMPORTED_MODULE_4__.freeze)({\n        devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),\n        borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n        contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n        contentRect: new _DOMRectReadOnly__WEBPACK_IMPORTED_MODULE_2__.DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n    });\n    cache.set(target, boxes);\n    return boxes;\n};\nvar calculateBoxSize = function (target, observedBox, forceRecalculation) {\n    var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;\n    switch (observedBox) {\n        case _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:\n            return devicePixelContentBoxSize;\n        case _ResizeObserverBoxOptions__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverBoxOptions.BORDER_BOX:\n            return borderBoxSize;\n        default:\n            return contentBoxSize;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlQm94U2l6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF1RTtBQUNaO0FBQ047QUFDRjtBQUNWO0FBQ0E7QUFDekM7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDJEQUFnQixJQUFJLHFFQUEwQjtBQUM5RSx3Q0FBd0M7QUFDeEM7QUFDQSxpQ0FBaUM7QUFDakMsZ0NBQWdDO0FBQ2hDLGtDQUFrQztBQUNsQyxlQUFlLG1FQUFrQjtBQUNqQztBQUNBLGdCQUFnQixxREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkRBQWU7QUFDcEMsQ0FBQztBQUNEO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0RBQVE7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHFEQUFLO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNkRBQWU7QUFDeEMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsd0dBQWlEO0FBQzlEO0FBQ0EsYUFBYSwwRkFBbUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlQm94U2l6ZS5qcz8xMDZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyB9IGZyb20gJy4uL1Jlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyc7XG5pbXBvcnQgeyBSZXNpemVPYnNlcnZlclNpemUgfSBmcm9tICcuLi9SZXNpemVPYnNlcnZlclNpemUnO1xuaW1wb3J0IHsgRE9NUmVjdFJlYWRPbmx5IH0gZnJvbSAnLi4vRE9NUmVjdFJlYWRPbmx5JztcbmltcG9ydCB7IGlzU1ZHLCBpc0hpZGRlbiB9IGZyb20gJy4uL3V0aWxzL2VsZW1lbnQnO1xuaW1wb3J0IHsgZnJlZXplIH0gZnJvbSAnLi4vdXRpbHMvZnJlZXplJztcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gJy4uL3V0aWxzL2dsb2JhbCc7XG52YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xudmFyIHNjcm9sbFJlZ2V4cCA9IC9hdXRvfHNjcm9sbC87XG52YXIgdmVydGljYWxSZWdleHAgPSAvXnRifHZlcnRpY2FsLztcbnZhciBJRSA9ICgvbXNpZXx0cmlkZW50L2kpLnRlc3QoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG52YXIgcGFyc2VEaW1lbnNpb24gPSBmdW5jdGlvbiAocGl4ZWwpIHsgcmV0dXJuIHBhcnNlRmxvYXQocGl4ZWwgfHwgJzAnKTsgfTtcbnZhciBzaXplID0gZnVuY3Rpb24gKGlubGluZVNpemUsIGJsb2NrU2l6ZSwgc3dpdGNoU2l6ZXMpIHtcbiAgICBpZiAoaW5saW5lU2l6ZSA9PT0gdm9pZCAwKSB7IGlubGluZVNpemUgPSAwOyB9XG4gICAgaWYgKGJsb2NrU2l6ZSA9PT0gdm9pZCAwKSB7IGJsb2NrU2l6ZSA9IDA7IH1cbiAgICBpZiAoc3dpdGNoU2l6ZXMgPT09IHZvaWQgMCkgeyBzd2l0Y2hTaXplcyA9IGZhbHNlOyB9XG4gICAgcmV0dXJuIG5ldyBSZXNpemVPYnNlcnZlclNpemUoKHN3aXRjaFNpemVzID8gYmxvY2tTaXplIDogaW5saW5lU2l6ZSkgfHwgMCwgKHN3aXRjaFNpemVzID8gaW5saW5lU2l6ZSA6IGJsb2NrU2l6ZSkgfHwgMCk7XG59O1xudmFyIHplcm9Cb3hlcyA9IGZyZWV6ZSh7XG4gICAgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTogc2l6ZSgpLFxuICAgIGJvcmRlckJveFNpemU6IHNpemUoKSxcbiAgICBjb250ZW50Qm94U2l6ZTogc2l6ZSgpLFxuICAgIGNvbnRlbnRSZWN0OiBuZXcgRE9NUmVjdFJlYWRPbmx5KDAsIDAsIDAsIDApXG59KTtcbnZhciBjYWxjdWxhdGVCb3hTaXplcyA9IGZ1bmN0aW9uICh0YXJnZXQsIGZvcmNlUmVjYWxjdWxhdGlvbikge1xuICAgIGlmIChmb3JjZVJlY2FsY3VsYXRpb24gPT09IHZvaWQgMCkgeyBmb3JjZVJlY2FsY3VsYXRpb24gPSBmYWxzZTsgfVxuICAgIGlmIChjYWNoZS5oYXModGFyZ2V0KSAmJiAhZm9yY2VSZWNhbGN1bGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5nZXQodGFyZ2V0KTtcbiAgICB9XG4gICAgaWYgKGlzSGlkZGVuKHRhcmdldCkpIHtcbiAgICAgICAgY2FjaGUuc2V0KHRhcmdldCwgemVyb0JveGVzKTtcbiAgICAgICAgcmV0dXJuIHplcm9Cb3hlcztcbiAgICB9XG4gICAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICAgIHZhciBzdmcgPSBpc1NWRyh0YXJnZXQpICYmIHRhcmdldC5vd25lclNWR0VsZW1lbnQgJiYgdGFyZ2V0LmdldEJCb3goKTtcbiAgICB2YXIgcmVtb3ZlUGFkZGluZyA9ICFJRSAmJiBjcy5ib3hTaXppbmcgPT09ICdib3JkZXItYm94JztcbiAgICB2YXIgc3dpdGNoU2l6ZXMgPSB2ZXJ0aWNhbFJlZ2V4cC50ZXN0KGNzLndyaXRpbmdNb2RlIHx8ICcnKTtcbiAgICB2YXIgY2FuU2Nyb2xsVmVydGljYWxseSA9ICFzdmcgJiYgc2Nyb2xsUmVnZXhwLnRlc3QoY3Mub3ZlcmZsb3dZIHx8ICcnKTtcbiAgICB2YXIgY2FuU2Nyb2xsSG9yaXpvbnRhbGx5ID0gIXN2ZyAmJiBzY3JvbGxSZWdleHAudGVzdChjcy5vdmVyZmxvd1ggfHwgJycpO1xuICAgIHZhciBwYWRkaW5nVG9wID0gc3ZnID8gMCA6IHBhcnNlRGltZW5zaW9uKGNzLnBhZGRpbmdUb3ApO1xuICAgIHZhciBwYWRkaW5nUmlnaHQgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ1JpZ2h0KTtcbiAgICB2YXIgcGFkZGluZ0JvdHRvbSA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5wYWRkaW5nQm90dG9tKTtcbiAgICB2YXIgcGFkZGluZ0xlZnQgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ0xlZnQpO1xuICAgIHZhciBib3JkZXJUb3AgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MuYm9yZGVyVG9wV2lkdGgpO1xuICAgIHZhciBib3JkZXJSaWdodCA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5ib3JkZXJSaWdodFdpZHRoKTtcbiAgICB2YXIgYm9yZGVyQm90dG9tID0gc3ZnID8gMCA6IHBhcnNlRGltZW5zaW9uKGNzLmJvcmRlckJvdHRvbVdpZHRoKTtcbiAgICB2YXIgYm9yZGVyTGVmdCA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5ib3JkZXJMZWZ0V2lkdGgpO1xuICAgIHZhciBob3Jpem9udGFsUGFkZGluZyA9IHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0O1xuICAgIHZhciB2ZXJ0aWNhbFBhZGRpbmcgPSBwYWRkaW5nVG9wICsgcGFkZGluZ0JvdHRvbTtcbiAgICB2YXIgaG9yaXpvbnRhbEJvcmRlckFyZWEgPSBib3JkZXJMZWZ0ICsgYm9yZGVyUmlnaHQ7XG4gICAgdmFyIHZlcnRpY2FsQm9yZGVyQXJlYSA9IGJvcmRlclRvcCArIGJvcmRlckJvdHRvbTtcbiAgICB2YXIgaG9yaXpvbnRhbFNjcm9sbGJhclRoaWNrbmVzcyA9ICFjYW5TY3JvbGxIb3Jpem9udGFsbHkgPyAwIDogdGFyZ2V0Lm9mZnNldEhlaWdodCAtIHZlcnRpY2FsQm9yZGVyQXJlYSAtIHRhcmdldC5jbGllbnRIZWlnaHQ7XG4gICAgdmFyIHZlcnRpY2FsU2Nyb2xsYmFyVGhpY2tuZXNzID0gIWNhblNjcm9sbFZlcnRpY2FsbHkgPyAwIDogdGFyZ2V0Lm9mZnNldFdpZHRoIC0gaG9yaXpvbnRhbEJvcmRlckFyZWEgLSB0YXJnZXQuY2xpZW50V2lkdGg7XG4gICAgdmFyIHdpZHRoUmVkdWN0aW9uID0gcmVtb3ZlUGFkZGluZyA/IGhvcml6b250YWxQYWRkaW5nICsgaG9yaXpvbnRhbEJvcmRlckFyZWEgOiAwO1xuICAgIHZhciBoZWlnaHRSZWR1Y3Rpb24gPSByZW1vdmVQYWRkaW5nID8gdmVydGljYWxQYWRkaW5nICsgdmVydGljYWxCb3JkZXJBcmVhIDogMDtcbiAgICB2YXIgY29udGVudFdpZHRoID0gc3ZnID8gc3ZnLndpZHRoIDogcGFyc2VEaW1lbnNpb24oY3Mud2lkdGgpIC0gd2lkdGhSZWR1Y3Rpb24gLSB2ZXJ0aWNhbFNjcm9sbGJhclRoaWNrbmVzcztcbiAgICB2YXIgY29udGVudEhlaWdodCA9IHN2ZyA/IHN2Zy5oZWlnaHQgOiBwYXJzZURpbWVuc2lvbihjcy5oZWlnaHQpIC0gaGVpZ2h0UmVkdWN0aW9uIC0gaG9yaXpvbnRhbFNjcm9sbGJhclRoaWNrbmVzcztcbiAgICB2YXIgYm9yZGVyQm94V2lkdGggPSBjb250ZW50V2lkdGggKyBob3Jpem9udGFsUGFkZGluZyArIHZlcnRpY2FsU2Nyb2xsYmFyVGhpY2tuZXNzICsgaG9yaXpvbnRhbEJvcmRlckFyZWE7XG4gICAgdmFyIGJvcmRlckJveEhlaWdodCA9IGNvbnRlbnRIZWlnaHQgKyB2ZXJ0aWNhbFBhZGRpbmcgKyBob3Jpem9udGFsU2Nyb2xsYmFyVGhpY2tuZXNzICsgdmVydGljYWxCb3JkZXJBcmVhO1xuICAgIHZhciBib3hlcyA9IGZyZWV6ZSh7XG4gICAgICAgIGRldmljZVBpeGVsQ29udGVudEJveFNpemU6IHNpemUoTWF0aC5yb3VuZChjb250ZW50V2lkdGggKiBkZXZpY2VQaXhlbFJhdGlvKSwgTWF0aC5yb3VuZChjb250ZW50SGVpZ2h0ICogZGV2aWNlUGl4ZWxSYXRpbyksIHN3aXRjaFNpemVzKSxcbiAgICAgICAgYm9yZGVyQm94U2l6ZTogc2l6ZShib3JkZXJCb3hXaWR0aCwgYm9yZGVyQm94SGVpZ2h0LCBzd2l0Y2hTaXplcyksXG4gICAgICAgIGNvbnRlbnRCb3hTaXplOiBzaXplKGNvbnRlbnRXaWR0aCwgY29udGVudEhlaWdodCwgc3dpdGNoU2l6ZXMpLFxuICAgICAgICBjb250ZW50UmVjdDogbmV3IERPTVJlY3RSZWFkT25seShwYWRkaW5nTGVmdCwgcGFkZGluZ1RvcCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0KVxuICAgIH0pO1xuICAgIGNhY2hlLnNldCh0YXJnZXQsIGJveGVzKTtcbiAgICByZXR1cm4gYm94ZXM7XG59O1xudmFyIGNhbGN1bGF0ZUJveFNpemUgPSBmdW5jdGlvbiAodGFyZ2V0LCBvYnNlcnZlZEJveCwgZm9yY2VSZWNhbGN1bGF0aW9uKSB7XG4gICAgdmFyIF9hID0gY2FsY3VsYXRlQm94U2l6ZXModGFyZ2V0LCBmb3JjZVJlY2FsY3VsYXRpb24pLCBib3JkZXJCb3hTaXplID0gX2EuYm9yZGVyQm94U2l6ZSwgY29udGVudEJveFNpemUgPSBfYS5jb250ZW50Qm94U2l6ZSwgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZSA9IF9hLmRldmljZVBpeGVsQ29udGVudEJveFNpemU7XG4gICAgc3dpdGNoIChvYnNlcnZlZEJveCkge1xuICAgICAgICBjYXNlIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucy5ERVZJQ0VfUElYRUxfQ09OVEVOVF9CT1g6XG4gICAgICAgICAgICByZXR1cm4gZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTtcbiAgICAgICAgY2FzZSBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMuQk9SREVSX0JPWDpcbiAgICAgICAgICAgIHJldHVybiBib3JkZXJCb3hTaXplO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRCb3hTaXplO1xuICAgIH1cbn07XG5leHBvcnQgeyBjYWxjdWxhdGVCb3hTaXplLCBjYWxjdWxhdGVCb3hTaXplcyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js\n')},"./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "calculateDepthForNode": () => (/* binding */ calculateDepthForNode)\n/* harmony export */ });\n/* harmony import */ var _utils_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/element */ "./node_modules/@juggle/resize-observer/lib/utils/element.js");\n\nvar calculateDepthForNode = function (node) {\n    if ((0,_utils_element__WEBPACK_IMPORTED_MODULE_0__.isHidden)(node)) {\n        return Infinity;\n    }\n    var depth = 0;\n    var parent = node.parentNode;\n    while (parent) {\n        depth += 1;\n        parent = parent.parentNode;\n    }\n    return depth;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlRGVwdGhGb3JOb2RlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDO0FBQ0EsUUFBUSx3REFBUTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvY2FsY3VsYXRlRGVwdGhGb3JOb2RlLmpzP2M5MzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNIaWRkZW4gfSBmcm9tICcuLi91dGlscy9lbGVtZW50JztcbnZhciBjYWxjdWxhdGVEZXB0aEZvck5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChpc0hpZGRlbihub2RlKSkge1xuICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIGRlcHRoICs9IDE7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZGVwdGg7XG59O1xuZXhwb3J0IHsgY2FsY3VsYXRlRGVwdGhGb3JOb2RlIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js\n')},"./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deliverResizeLoopError\": () => (/* binding */ deliverResizeLoopError)\n/* harmony export */ });\nvar msg = 'ResizeObserver loop completed with undelivered notifications.';\nvar deliverResizeLoopError = function () {\n    var event;\n    if (typeof ErrorEvent === 'function') {\n        event = new ErrorEvent('error', {\n            message: msg\n        });\n    }\n    else {\n        event = document.createEvent('Event');\n        event.initEvent('error', false, false);\n        event.message = msg;\n    }\n    window.dispatchEvent(event);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvZGVsaXZlclJlc2l6ZUxvb3BFcnJvci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9hbGdvcml0aG1zL2RlbGl2ZXJSZXNpemVMb29wRXJyb3IuanM/YzJlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbXNnID0gJ1Jlc2l6ZU9ic2VydmVyIGxvb3AgY29tcGxldGVkIHdpdGggdW5kZWxpdmVyZWQgbm90aWZpY2F0aW9ucy4nO1xudmFyIGRlbGl2ZXJSZXNpemVMb29wRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV2ZW50O1xuICAgIGlmICh0eXBlb2YgRXJyb3JFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBldmVudCA9IG5ldyBFcnJvckV2ZW50KCdlcnJvcicsIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1zZ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICAgIGV2ZW50LmluaXRFdmVudCgnZXJyb3InLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBldmVudC5tZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG59O1xuZXhwb3J0IHsgZGVsaXZlclJlc2l6ZUxvb3BFcnJvciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js\n")},"./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "gatherActiveObservationsAtDepth": () => (/* binding */ gatherActiveObservationsAtDepth)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js");\n/* harmony import */ var _calculateDepthForNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calculateDepthForNode */ "./node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js");\n\n\nvar gatherActiveObservationsAtDepth = function (depth) {\n    _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.forEach(function processObserver(ro) {\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n        ro.skippedTargets.splice(0, ro.skippedTargets.length);\n        ro.observationTargets.forEach(function processTarget(ot) {\n            if (ot.isActive()) {\n                if ((0,_calculateDepthForNode__WEBPACK_IMPORTED_MODULE_1__.calculateDepthForNode)(ot.target) > depth) {\n                    ro.activeTargets.push(ot);\n                }\n                else {\n                    ro.skippedTargets.push(ot);\n                }\n            }\n        });\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkQ7QUFDSztBQUNoRTtBQUNBLElBQUksMkVBQXVCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDZFQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQzJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvYWxnb3JpdGhtcy9nYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoLmpzPzQ1YjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbmltcG9ydCB7IGNhbGN1bGF0ZURlcHRoRm9yTm9kZSB9IGZyb20gJy4vY2FsY3VsYXRlRGVwdGhGb3JOb2RlJztcbnZhciBnYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoID0gZnVuY3Rpb24gKGRlcHRoKSB7XG4gICAgcmVzaXplT2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc09ic2VydmVyKHJvKSB7XG4gICAgICAgIHJvLmFjdGl2ZVRhcmdldHMuc3BsaWNlKDAsIHJvLmFjdGl2ZVRhcmdldHMubGVuZ3RoKTtcbiAgICAgICAgcm8uc2tpcHBlZFRhcmdldHMuc3BsaWNlKDAsIHJvLnNraXBwZWRUYXJnZXRzLmxlbmd0aCk7XG4gICAgICAgIHJvLm9ic2VydmF0aW9uVGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uIHByb2Nlc3NUYXJnZXQob3QpIHtcbiAgICAgICAgICAgIGlmIChvdC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGN1bGF0ZURlcHRoRm9yTm9kZShvdC50YXJnZXQpID4gZGVwdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcm8uYWN0aXZlVGFyZ2V0cy5wdXNoKG90KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJvLnNraXBwZWRUYXJnZXRzLnB1c2gob3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0IHsgZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js\n')},"./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "hasActiveObservations": () => (/* binding */ hasActiveObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js");\n\nvar hasActiveObservations = function () {\n    return _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzQWN0aXZlT2JzZXJ2YXRpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJEO0FBQzNEO0FBQ0EsV0FBVyx3RUFBb0IsaUJBQWlCLHFDQUFxQztBQUNyRjtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzQWN0aXZlT2JzZXJ2YXRpb25zLmpzP2RkYTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzaXplT2JzZXJ2ZXJzIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplT2JzZXJ2ZXJzJztcbnZhciBoYXNBY3RpdmVPYnNlcnZhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlc2l6ZU9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChybykgeyByZXR1cm4gcm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGggPiAwOyB9KTtcbn07XG5leHBvcnQgeyBoYXNBY3RpdmVPYnNlcnZhdGlvbnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js\n')},"./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "hasSkippedObservations": () => (/* binding */ hasSkippedObservations)\n/* harmony export */ });\n/* harmony import */ var _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/resizeObservers */ "./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js");\n\nvar hasSkippedObservations = function () {\n    return _utils_resizeObservers__WEBPACK_IMPORTED_MODULE_0__.resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2FsZ29yaXRobXMvaGFzU2tpcHBlZE9ic2VydmF0aW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyRDtBQUMzRDtBQUNBLFdBQVcsd0VBQW9CLGlCQUFpQixzQ0FBc0M7QUFDdEY7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9hbGdvcml0aG1zL2hhc1NraXBwZWRPYnNlcnZhdGlvbnMuanM/YzEwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNpemVPYnNlcnZlcnMgfSBmcm9tICcuLi91dGlscy9yZXNpemVPYnNlcnZlcnMnO1xudmFyIGhhc1NraXBwZWRPYnNlcnZhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlc2l6ZU9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChybykgeyByZXR1cm4gcm8uc2tpcHBlZFRhcmdldHMubGVuZ3RoID4gMDsgfSk7XG59O1xuZXhwb3J0IHsgaGFzU2tpcHBlZE9ic2VydmF0aW9ucyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js\n')},"./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ResizeObserver": () => (/* reexport safe */ _ResizeObserver__WEBPACK_IMPORTED_MODULE_0__.ResizeObserver),\n/* harmony export */   "ResizeObserverEntry": () => (/* reexport safe */ _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__.ResizeObserverEntry),\n/* harmony export */   "ResizeObserverSize": () => (/* reexport safe */ _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_2__.ResizeObserverSize)\n/* harmony export */ });\n/* harmony import */ var _ResizeObserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ResizeObserver */ "./node_modules/@juggle/resize-observer/lib/ResizeObserver.js");\n/* harmony import */ var _ResizeObserverEntry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ResizeObserverEntry */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js");\n/* harmony import */ var _ResizeObserverSize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ResizeObserverSize */ "./node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL2V4cG9ydHMvcmVzaXplLW9ic2VydmVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFtRDtBQUNVO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi9leHBvcnRzL3Jlc2l6ZS1vYnNlcnZlci5qcz8xZDFmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyIH0gZnJvbSAnLi4vUmVzaXplT2JzZXJ2ZXInO1xuZXhwb3J0IHsgUmVzaXplT2JzZXJ2ZXJFbnRyeSB9IGZyb20gJy4uL1Jlc2l6ZU9ic2VydmVyRW50cnknO1xuZXhwb3J0IHsgUmVzaXplT2JzZXJ2ZXJTaXplIH0gZnJvbSAnLi4vUmVzaXplT2JzZXJ2ZXJTaXplJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\n')},"./node_modules/@juggle/resize-observer/lib/utils/element.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isElement\": () => (/* binding */ isElement),\n/* harmony export */   \"isHidden\": () => (/* binding */ isHidden),\n/* harmony export */   \"isReplacedElement\": () => (/* binding */ isReplacedElement),\n/* harmony export */   \"isSVG\": () => (/* binding */ isSVG)\n/* harmony export */ });\nvar isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };\nvar isHidden = function (target) {\n    if (isSVG(target)) {\n        var _a = target.getBBox(), width = _a.width, height = _a.height;\n        return !width && !height;\n    }\n    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;\n    return !(offsetWidth || offsetHeight || target.getClientRects().length);\n};\nvar isElement = function (obj) {\n    var _a;\n    if (obj instanceof Element) {\n        return true;\n    }\n    var scope = (_a = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;\n    return !!(scope && obj instanceof scope.Element);\n};\nvar isReplacedElement = function (target) {\n    switch (target.tagName) {\n        case 'INPUT':\n            if (target.type !== 'image') {\n                break;\n            }\n        case 'VIDEO':\n        case 'AUDIO':\n        case 'EMBED':\n        case 'OBJECT':\n        case 'CANVAS':\n        case 'IFRAME':\n        case 'IMG':\n            return true;\n    }\n    return false;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2VsZW1lbnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDeUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9lbGVtZW50LmpzPzNjZDUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzU1ZHID0gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCAmJiAnZ2V0QkJveCcgaW4gdGFyZ2V0OyB9O1xudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGlmIChpc1NWRyh0YXJnZXQpKSB7XG4gICAgICAgIHZhciBfYSA9IHRhcmdldC5nZXRCQm94KCksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcbiAgICAgICAgcmV0dXJuICF3aWR0aCAmJiAhaGVpZ2h0O1xuICAgIH1cbiAgICB2YXIgX2IgPSB0YXJnZXQsIG9mZnNldFdpZHRoID0gX2Iub2Zmc2V0V2lkdGgsIG9mZnNldEhlaWdodCA9IF9iLm9mZnNldEhlaWdodDtcbiAgICByZXR1cm4gIShvZmZzZXRXaWR0aCB8fCBvZmZzZXRIZWlnaHQgfHwgdGFyZ2V0LmdldENsaWVudFJlY3RzKCkubGVuZ3RoKTtcbn07XG52YXIgaXNFbGVtZW50ID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBfYTtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIHNjb3BlID0gKF9hID0gb2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLm93bmVyRG9jdW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZWZhdWx0VmlldztcbiAgICByZXR1cm4gISEoc2NvcGUgJiYgb2JqIGluc3RhbmNlb2Ygc2NvcGUuRWxlbWVudCk7XG59O1xudmFyIGlzUmVwbGFjZWRFbGVtZW50ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHN3aXRjaCAodGFyZ2V0LnRhZ05hbWUpIHtcbiAgICAgICAgY2FzZSAnSU5QVVQnOlxuICAgICAgICAgICAgaWYgKHRhcmdldC50eXBlICE9PSAnaW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1ZJREVPJzpcbiAgICAgICAgY2FzZSAnQVVESU8nOlxuICAgICAgICBjYXNlICdFTUJFRCc6XG4gICAgICAgIGNhc2UgJ09CSkVDVCc6XG4gICAgICAgIGNhc2UgJ0NBTlZBUyc6XG4gICAgICAgIGNhc2UgJ0lGUkFNRSc6XG4gICAgICAgIGNhc2UgJ0lNRyc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydCB7IGlzU1ZHLCBpc0hpZGRlbiwgaXNFbGVtZW50LCBpc1JlcGxhY2VkRWxlbWVudCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/element.js\n")},"./node_modules/@juggle/resize-observer/lib/utils/freeze.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "freeze": () => (/* binding */ freeze)\n/* harmony export */ });\nvar freeze = function (obj) { return Object.freeze(obj); };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2ZyZWV6ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvZnJlZXplLmpzP2ZjZjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBmcmVlemUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBPYmplY3QuZnJlZXplKG9iaik7IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/freeze.js\n')},"./node_modules/@juggle/resize-observer/lib/utils/global.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"global\": () => (/* binding */ global)\n/* harmony export */ });\nvar global = typeof window !== 'undefined' ? window : {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL2dsb2JhbC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9nbG9iYWwuanM/Y2I3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIGdsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/global.js\n")},"./node_modules/@juggle/resize-observer/lib/utils/process.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "process": () => (/* binding */ process)\n/* harmony export */ });\n/* harmony import */ var _algorithms_hasActiveObservations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../algorithms/hasActiveObservations */ "./node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js");\n/* harmony import */ var _algorithms_hasSkippedObservations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../algorithms/hasSkippedObservations */ "./node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js");\n/* harmony import */ var _algorithms_deliverResizeLoopError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../algorithms/deliverResizeLoopError */ "./node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js");\n/* harmony import */ var _algorithms_broadcastActiveObservations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../algorithms/broadcastActiveObservations */ "./node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js");\n/* harmony import */ var _algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../algorithms/gatherActiveObservationsAtDepth */ "./node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js");\n\n\n\n\n\nvar process = function () {\n    var depth = 0;\n    (0,_algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__.gatherActiveObservationsAtDepth)(depth);\n    while ((0,_algorithms_hasActiveObservations__WEBPACK_IMPORTED_MODULE_0__.hasActiveObservations)()) {\n        depth = (0,_algorithms_broadcastActiveObservations__WEBPACK_IMPORTED_MODULE_3__.broadcastActiveObservations)();\n        (0,_algorithms_gatherActiveObservationsAtDepth__WEBPACK_IMPORTED_MODULE_4__.gatherActiveObservationsAtDepth)(depth);\n    }\n    if ((0,_algorithms_hasSkippedObservations__WEBPACK_IMPORTED_MODULE_1__.hasSkippedObservations)()) {\n        (0,_algorithms_deliverResizeLoopError__WEBPACK_IMPORTED_MODULE_2__.deliverResizeLoopError)();\n    }\n    return depth > 0;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3Byb2Nlc3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTRFO0FBQ0U7QUFDQTtBQUNVO0FBQ1E7QUFDaEc7QUFDQTtBQUNBLElBQUksNEdBQStCO0FBQ25DLFdBQVcsd0ZBQXFCO0FBQ2hDLGdCQUFnQixvR0FBMkI7QUFDM0MsUUFBUSw0R0FBK0I7QUFDdkM7QUFDQSxRQUFRLDBGQUFzQjtBQUM5QixRQUFRLDBGQUFzQjtBQUM5QjtBQUNBO0FBQ0E7QUFDbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9wcm9jZXNzLmpzP2Q0YzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzQWN0aXZlT2JzZXJ2YXRpb25zIH0gZnJvbSAnLi4vYWxnb3JpdGhtcy9oYXNBY3RpdmVPYnNlcnZhdGlvbnMnO1xuaW1wb3J0IHsgaGFzU2tpcHBlZE9ic2VydmF0aW9ucyB9IGZyb20gJy4uL2FsZ29yaXRobXMvaGFzU2tpcHBlZE9ic2VydmF0aW9ucyc7XG5pbXBvcnQgeyBkZWxpdmVyUmVzaXplTG9vcEVycm9yIH0gZnJvbSAnLi4vYWxnb3JpdGhtcy9kZWxpdmVyUmVzaXplTG9vcEVycm9yJztcbmltcG9ydCB7IGJyb2FkY2FzdEFjdGl2ZU9ic2VydmF0aW9ucyB9IGZyb20gJy4uL2FsZ29yaXRobXMvYnJvYWRjYXN0QWN0aXZlT2JzZXJ2YXRpb25zJztcbmltcG9ydCB7IGdhdGhlckFjdGl2ZU9ic2VydmF0aW9uc0F0RGVwdGggfSBmcm9tICcuLi9hbGdvcml0aG1zL2dhdGhlckFjdGl2ZU9ic2VydmF0aW9uc0F0RGVwdGgnO1xudmFyIHByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlcHRoID0gMDtcbiAgICBnYXRoZXJBY3RpdmVPYnNlcnZhdGlvbnNBdERlcHRoKGRlcHRoKTtcbiAgICB3aGlsZSAoaGFzQWN0aXZlT2JzZXJ2YXRpb25zKCkpIHtcbiAgICAgICAgZGVwdGggPSBicm9hZGNhc3RBY3RpdmVPYnNlcnZhdGlvbnMoKTtcbiAgICAgICAgZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aChkZXB0aCk7XG4gICAgfVxuICAgIGlmIChoYXNTa2lwcGVkT2JzZXJ2YXRpb25zKCkpIHtcbiAgICAgICAgZGVsaXZlclJlc2l6ZUxvb3BFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gZGVwdGggPiAwO1xufTtcbmV4cG9ydCB7IHByb2Nlc3MgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/process.js\n')},"./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "queueMicroTask": () => (/* binding */ queueMicroTask)\n/* harmony export */ });\nvar trigger;\nvar callbacks = [];\nvar notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };\nvar queueMicroTask = function (callback) {\n    if (!trigger) {\n        var toggle_1 = 0;\n        var el_1 = document.createTextNode(\'\');\n        var config = { characterData: true };\n        new MutationObserver(function () { return notify(); }).observe(el_1, config);\n        trigger = function () { el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++); };\n    }\n    callbacks.push(callback);\n    trigger();\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3F1ZXVlTWljcm9UYXNrLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsMkJBQTJCLG1EQUFtRCxjQUFjO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLDJDQUEyQyxrQkFBa0I7QUFDN0QsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQzBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvcXVldWVNaWNyb1Rhc2suanM/YTk5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdHJpZ2dlcjtcbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFja3Muc3BsaWNlKDApLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IHJldHVybiBjYigpOyB9KTsgfTtcbnZhciBxdWV1ZU1pY3JvVGFzayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGlmICghdHJpZ2dlcikge1xuICAgICAgICB2YXIgdG9nZ2xlXzEgPSAwO1xuICAgICAgICB2YXIgZWxfMSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgdmFyIGNvbmZpZyA9IHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9O1xuICAgICAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7IHJldHVybiBub3RpZnkoKTsgfSkub2JzZXJ2ZShlbF8xLCBjb25maWcpO1xuICAgICAgICB0cmlnZ2VyID0gZnVuY3Rpb24gKCkgeyBlbF8xLnRleHRDb250ZW50ID0gXCJcIi5jb25jYXQodG9nZ2xlXzEgPyB0b2dnbGVfMS0tIDogdG9nZ2xlXzErKyk7IH07XG4gICAgfVxuICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB0cmlnZ2VyKCk7XG59O1xuZXhwb3J0IHsgcXVldWVNaWNyb1Rhc2sgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js\n')},"./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "queueResizeObserver": () => (/* binding */ queueResizeObserver)\n/* harmony export */ });\n/* harmony import */ var _queueMicroTask__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queueMicroTask */ "./node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js");\n\nvar queueResizeObserver = function (cb) {\n    (0,_queueMicroTask__WEBPACK_IMPORTED_MODULE_0__.queueMicroTask)(function ResizeObserver() {\n        requestAnimationFrame(cb);\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3F1ZXVlUmVzaXplT2JzZXJ2ZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0Q7QUFDbEQ7QUFDQSxJQUFJLCtEQUFjO0FBQ2xCO0FBQ0EsS0FBSztBQUNMO0FBQytCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci8uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvdXRpbHMvcXVldWVSZXNpemVPYnNlcnZlci5qcz9hMzY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHF1ZXVlTWljcm9UYXNrIH0gZnJvbSAnLi9xdWV1ZU1pY3JvVGFzayc7XG52YXIgcXVldWVSZXNpemVPYnNlcnZlciA9IGZ1bmN0aW9uIChjYikge1xuICAgIHF1ZXVlTWljcm9UYXNrKGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpO1xuICAgIH0pO1xufTtcbmV4cG9ydCB7IHF1ZXVlUmVzaXplT2JzZXJ2ZXIgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js\n')},"./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "resizeObservers": () => (/* binding */ resizeObservers)\n/* harmony export */ });\nvar resizeObservers = [];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3Jlc2l6ZU9ic2VydmVycy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9yZXNpemVPYnNlcnZlcnMuanM/YThlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVzaXplT2JzZXJ2ZXJzID0gW107XG5leHBvcnQgeyByZXNpemVPYnNlcnZlcnMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js\n')},"./node_modules/@juggle/resize-observer/lib/utils/scheduler.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"scheduler\": () => (/* binding */ scheduler),\n/* harmony export */   \"updateCount\": () => (/* binding */ updateCount)\n/* harmony export */ });\n/* harmony import */ var _process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process */ \"./node_modules/@juggle/resize-observer/lib/utils/process.js\");\n/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ \"./node_modules/@juggle/resize-observer/lib/utils/global.js\");\n/* harmony import */ var _queueResizeObserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queueResizeObserver */ \"./node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js\");\n\n\n\nvar watching = 0;\nvar isWatching = function () { return !!watching; };\nvar CATCH_PERIOD = 250;\nvar observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\nvar events = [\n    'resize',\n    'load',\n    'transitionend',\n    'animationend',\n    'animationstart',\n    'animationiteration',\n    'keyup',\n    'keydown',\n    'mouseup',\n    'mousedown',\n    'mouseover',\n    'mouseout',\n    'blur',\n    'focus'\n];\nvar time = function (timeout) {\n    if (timeout === void 0) { timeout = 0; }\n    return Date.now() + timeout;\n};\nvar scheduled = false;\nvar Scheduler = (function () {\n    function Scheduler() {\n        var _this = this;\n        this.stopped = true;\n        this.listener = function () { return _this.schedule(); };\n    }\n    Scheduler.prototype.run = function (timeout) {\n        var _this = this;\n        if (timeout === void 0) { timeout = CATCH_PERIOD; }\n        if (scheduled) {\n            return;\n        }\n        scheduled = true;\n        var until = time(timeout);\n        (0,_queueResizeObserver__WEBPACK_IMPORTED_MODULE_2__.queueResizeObserver)(function () {\n            var elementsHaveResized = false;\n            try {\n                elementsHaveResized = (0,_process__WEBPACK_IMPORTED_MODULE_0__.process)();\n            }\n            finally {\n                scheduled = false;\n                timeout = until - time();\n                if (!isWatching()) {\n                    return;\n                }\n                if (elementsHaveResized) {\n                    _this.run(1000);\n                }\n                else if (timeout > 0) {\n                    _this.run(timeout);\n                }\n                else {\n                    _this.start();\n                }\n            }\n        });\n    };\n    Scheduler.prototype.schedule = function () {\n        this.stop();\n        this.run();\n    };\n    Scheduler.prototype.observe = function () {\n        var _this = this;\n        var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };\n        document.body ? cb() : _global__WEBPACK_IMPORTED_MODULE_1__.global.addEventListener('DOMContentLoaded', cb);\n    };\n    Scheduler.prototype.start = function () {\n        var _this = this;\n        if (this.stopped) {\n            this.stopped = false;\n            this.observer = new MutationObserver(this.listener);\n            this.observe();\n            events.forEach(function (name) { return _global__WEBPACK_IMPORTED_MODULE_1__.global.addEventListener(name, _this.listener, true); });\n        }\n    };\n    Scheduler.prototype.stop = function () {\n        var _this = this;\n        if (!this.stopped) {\n            this.observer && this.observer.disconnect();\n            events.forEach(function (name) { return _global__WEBPACK_IMPORTED_MODULE_1__.global.removeEventListener(name, _this.listener, true); });\n            this.stopped = true;\n        }\n    };\n    return Scheduler;\n}());\nvar scheduler = new Scheduler();\nvar updateCount = function (n) {\n    !watching && n > 0 && scheduler.start();\n    watching += n;\n    !watching && scheduler.stop();\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXIvbGliL3V0aWxzL3NjaGVkdWxlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvQztBQUNGO0FBQzBCO0FBQzVEO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlFQUFtQjtBQUMzQjtBQUNBO0FBQ0Esc0NBQXNDLGlEQUFPO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsK0JBQStCLDREQUF1QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxPQUFPLDREQUF1QiwrQkFBK0I7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLE9BQU8sK0RBQTBCLCtCQUErQjtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vbm9kZV9tb2R1bGVzL0BqdWdnbGUvcmVzaXplLW9ic2VydmVyL2xpYi91dGlscy9zY2hlZHVsZXIuanM/YjAwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9jZXNzIH0gZnJvbSAnLi9wcm9jZXNzJztcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gJy4vZ2xvYmFsJztcbmltcG9ydCB7IHF1ZXVlUmVzaXplT2JzZXJ2ZXIgfSBmcm9tICcuL3F1ZXVlUmVzaXplT2JzZXJ2ZXInO1xudmFyIHdhdGNoaW5nID0gMDtcbnZhciBpc1dhdGNoaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gISF3YXRjaGluZzsgfTtcbnZhciBDQVRDSF9QRVJJT0QgPSAyNTA7XG52YXIgb2JzZXJ2ZXJDb25maWcgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoYXJhY3RlckRhdGE6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9O1xudmFyIGV2ZW50cyA9IFtcbiAgICAncmVzaXplJyxcbiAgICAnbG9hZCcsXG4gICAgJ3RyYW5zaXRpb25lbmQnLFxuICAgICdhbmltYXRpb25lbmQnLFxuICAgICdhbmltYXRpb25zdGFydCcsXG4gICAgJ2FuaW1hdGlvbml0ZXJhdGlvbicsXG4gICAgJ2tleXVwJyxcbiAgICAna2V5ZG93bicsXG4gICAgJ21vdXNldXAnLFxuICAgICdtb3VzZWRvd24nLFxuICAgICdtb3VzZW92ZXInLFxuICAgICdtb3VzZW91dCcsXG4gICAgJ2JsdXInLFxuICAgICdmb2N1cydcbl07XG52YXIgdGltZSA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgaWYgKHRpbWVvdXQgPT09IHZvaWQgMCkgeyB0aW1lb3V0ID0gMDsgfVxuICAgIHJldHVybiBEYXRlLm5vdygpICsgdGltZW91dDtcbn07XG52YXIgc2NoZWR1bGVkID0gZmFsc2U7XG52YXIgU2NoZWR1bGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zY2hlZHVsZSgpOyB9O1xuICAgIH1cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aW1lb3V0ID09PSB2b2lkIDApIHsgdGltZW91dCA9IENBVENIX1BFUklPRDsgfVxuICAgICAgICBpZiAoc2NoZWR1bGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHVudGlsID0gdGltZSh0aW1lb3V0KTtcbiAgICAgICAgcXVldWVSZXNpemVPYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHNIYXZlUmVzaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0hhdmVSZXNpemVkID0gcHJvY2VzcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IHVudGlsIC0gdGltZSgpO1xuICAgICAgICAgICAgICAgIGlmICghaXNXYXRjaGluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzSGF2ZVJlc2l6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucnVuKDEwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW4odGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdGFydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgdGhpcy5ydW4oKTtcbiAgICB9O1xuICAgIFNjaGVkdWxlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNiID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMub2JzZXJ2ZXIgJiYgX3RoaXMub2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCBvYnNlcnZlckNvbmZpZyk7IH07XG4gICAgICAgIGRvY3VtZW50LmJvZHkgPyBjYigpIDogZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYik7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5zdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZSgpO1xuICAgICAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIF90aGlzLmxpc3RlbmVyLCB0cnVlKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLnN0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgJiYgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgX3RoaXMubGlzdGVuZXIsIHRydWUpOyB9KTtcbiAgICAgICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTY2hlZHVsZXI7XG59KCkpO1xudmFyIHNjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIoKTtcbnZhciB1cGRhdGVDb3VudCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgIXdhdGNoaW5nICYmIG4gPiAwICYmIHNjaGVkdWxlci5zdGFydCgpO1xuICAgIHdhdGNoaW5nICs9IG47XG4gICAgIXdhdGNoaW5nICYmIHNjaGVkdWxlci5zdG9wKCk7XG59O1xuZXhwb3J0IHsgc2NoZWR1bGVyLCB1cGRhdGVDb3VudCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@juggle/resize-observer/lib/utils/scheduler.js\n")},"./src/CellFrame.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval(' // CellFrame.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'throw\' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    The role of CellFrame is to fetch user content from the cache, or from the host (using getItem).\n    While an item is being fetched, CellFrame presents a placeholder (either the default or an\n    imported custom version). If there is an error in fetching content then the placeholder is used\n    to present the error to the user. If a new itemID is set by the parent (to synchronize with an altered\n    cache), then CellFrame replaces the old item with the new item.\n\n    getItem (which is a function provided by the host) can return one of several values:\n        - a React component\n        - a promise of a component\n        - null\n        - undefined\n        - anything else is treated as an error\n    if a promise is returned, then the promise returns a React component, null or undefined.\n\n    If a valid react component is returned, then it is instantiated in the cache, and rendered in the\n    CellFrame. If null is returned, then CellFrame sends a message to its parent that the host has\n    indicated the the item being fetched instead represents the end of the list, and the listsize should\n    be adjusted accordingly. Any other value that is returned is treated as an error, and presented\n    as such to the user through the placeholder component.\n\n    getItem sends the index (logical position in the list) and session itemID to the host, so that\n    the host can sync its own tracking with the scroller.\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\n\nvar requestidlecallback_1 = __webpack_require__(/*! requestidlecallback */ "./node_modules/requestidlecallback/index.js"); // polyfill if needed\n\n\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ "./node_modules/react-reverse-portal/dist/web/index.js"); // fetch from cache\n\n\nvar Placeholder_1 = __importDefault(__webpack_require__(/*! ./cellframe/Placeholder */ "./src/cellframe/Placeholder.tsx")); // default\n\n\nvar Cradle_1 = __webpack_require__(/*! ./Cradle */ "./src/Cradle.tsx");\n\nvar CellFrame = function CellFrame(_ref) {\n  var orientation = _ref.orientation,\n      cellHeight = _ref.cellHeight,\n      cellWidth = _ref.cellWidth,\n      layout = _ref.layout,\n      getItem = _ref.getItem,\n      listsize = _ref.listsize,\n      placeholder = _ref.placeholder,\n      itemID = _ref.itemID,\n      index = _ref.index,\n      instanceID = _ref.instanceID,\n      scrollerID = _ref.scrollerID,\n      isTriggercell = _ref.isTriggercell,\n      placeholderFrameStyles = _ref.placeholderFrameStyles,\n      placeholderContentStyles = _ref.placeholderContentStyles;\n  // ----------------------[ setup ]----------------------\n  var cradleContext = (0, react_1.useContext)(Cradle_1.CradleContext);\n  var cacheHandler = cradleContext.cacheHandler,\n      scrollerPassthroughPropertiesRef = cradleContext.scrollerPassthroughPropertiesRef,\n      nullItemSetMaxListsize = cradleContext.nullItemSetMaxListsize,\n      itemExceptionsCallback = cradleContext.itemExceptionsCallback,\n      IDLECALLBACK_TIMEOUT = cradleContext.IDLECALLBACK_TIMEOUT,\n      triggercellTriggerlinesRef = cradleContext.triggercellTriggerlinesRef; // style change generates state refresh\n\n  var _ref2 = (0, react_1.useState)({\n    overflow: \'visible\'\n  }),\n      _ref3 = _slicedToArray(_ref2, 2),\n      styles = _ref3[0],\n      saveStyles = _ref3[1]; // processing state\n\n\n  var _ref4 = (0, react_1.useState)(\'setup\'),\n      _ref5 = _slicedToArray(_ref4, 2),\n      frameState = _ref5[0],\n      setFrameState = _ref5[1];\n\n  var frameStateRef = (0, react_1.useRef)(null);\n  frameStateRef.current = frameState; // DOM ref\n\n  var frameRef = (0, react_1.useRef)(null); // to track unmount interrupt\n\n  var isMountedRef = (0, react_1.useRef)(true); // cache data\n\n  var portalMetadataRef = (0, react_1.useRef)(null); // the placeholder to use\n\n  var placeholderRef = (0, react_1.useRef)(null); // the session itemID to use; could be updated by parent\n\n  var itemIDRef = (0, react_1.useRef)(null);\n  itemIDRef.current = itemID; // fetch error\n\n  var errorRef = (0, react_1.useRef)(false); // placeholder message\n\n  var messageRef = (0, react_1.useRef)(null); // for unmount\n\n  (0, react_1.useEffect)(function () {\n    return function () {\n      isMountedRef.current = false;\n      cancelidlecallback(requestIdleCallbackIdRef.current);\n      cacheHandler.removeRequestedPortal(index);\n    };\n  }, []); // refresh content if itemID changes\n\n  (0, react_1.useEffect)(function () {\n    if (isMountedRef.current) setFrameState(\'getusercontent\');\n  }, [itemID]); // ----------------- [ placeholder definition ] -------------------------\n\n  var customplaceholder = (0, react_1.useMemo)(function () {\n    return placeholder ? react_1["default"].createElement(placeholder, {\n      index: index,\n      listsize: listsize,\n      message: messageRef.current,\n      error: errorRef.current\n    }) : null;\n  }, [index, placeholder, listsize, errorRef.current]);\n  placeholderRef.current = (0, react_1.useMemo)(function () {\n    var placeholder = customplaceholder ? customplaceholder : react_1["default"].createElement(Placeholder_1["default"], {\n      index: index,\n      listsize: listsize,\n      message: messageRef.current,\n      error: errorRef.current,\n      userFrameStyles: placeholderFrameStyles,\n      userContentStyles: placeholderContentStyles\n    });\n    return placeholder;\n  }, [index, customplaceholder, listsize, messageRef.current, errorRef.current]); // ---------------- [ requestidlecallback config ] ------------------------\n\n  var requestidlecallback = window[\'requestIdleCallback\'] ? window[\'requestIdleCallback\'] : requestidlecallback_1.requestIdleCallback;\n  var cancelidlecallback = window[\'cancelIdleCallback\'] ? window[\'cancelIdleCallback\'] : requestidlecallback_1.cancelIdleCallback;\n  var requestIdleCallbackIdRef = (0, react_1.useRef)(null); // --------------------[ processing ]-----------------\n  // set styles\n\n  (0, react_1.useEffect)(function () {\n    var newStyles = getFrameStyles(orientation, cellHeight, cellWidth, layout, styles);\n\n    if (isMountedRef.current) {\n      saveStyles(newStyles);\n    }\n  }, [orientation, cellHeight, cellWidth]);\n  var portalNodeRef = (0, react_1.useRef)(null);\n  var isReparentingRef = (0, react_1.useRef)(false);\n  (0, react_1.useLayoutEffect)(function () {\n    switch (frameState) {\n      case \'setup\':\n        // no-op\n        break;\n\n      case \'inserting\':\n        {\n          setFrameState(\'ready\');\n          break;\n        }\n\n      case \'getusercontent\':\n        {\n          var _itemID = itemIDRef.current;\n          var cached = cacheHandler.hasPortal(_itemID);\n\n          if (cached) {\n            messageRef.current = \'(retrieving from cache)\';\n\n            if (isMountedRef.current) {\n              // get cache data\n              portalMetadataRef.current = cacheHandler.getPortal(_itemID); // get OutPortal node\n\n              portalNodeRef.current = portalMetadataRef.current.portalNode; // notify fetched component that reparenting is underway\n\n              portalMetadataRef.current.isReparentingRef.current = true;\n              setFrameState(\'inserting\');\n            }\n          } else {\n            messageRef.current = \'(loading...)\';\n            setFrameState(\'waiting\'); // reserve space in the cache\n\n            cacheHandler.registerRequestedPortal(index); // enqueue the fetch\n\n            requestIdleCallbackIdRef.current = requestidlecallback(function () {\n              return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                var _a, returnvalue, usercontent, error, content, scrollerProperties;\n\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        _context.next = 3;\n                        return getItem(index, _itemID);\n\n                      case 3:\n                        usercontent = _context.sent;\n                        if (usercontent === null) returnvalue = usercontent;\n\n                        if (usercontent === undefined) {\n                          error = new Error(\'host returned "undefined"\');\n                        }\n\n                        _context.next = 12;\n                        break;\n\n                      case 8:\n                        _context.prev = 8;\n                        _context.t0 = _context["catch"](0);\n                        returnvalue = usercontent = undefined;\n                        error = _context.t0;\n\n                      case 12:\n                        // process the return value\n                        if (usercontent !== null && usercontent !== undefined) {\n                          if (!react_1["default"].isValidElement(usercontent)) {\n                            returnvalue = usercontent;\n                            usercontent = undefined;\n                            error = new Error(\'invalid React element\');\n                          }\n                        }\n\n                        if (isMountedRef.current) {\n                          // prepare the content\n                          if (usercontent !== null && usercontent !== undefined) {\n                            // if usercontent is otherwise disallowed, let error handling deal with it.\n                            scrollerProperties = {\n                              isReparentingRef: null,\n                              scrollerPassthroughPropertiesRef: scrollerPassthroughPropertiesRef\n                            };\n\n                            if ((_a = usercontent.props) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(\'scrollerProperties\')) {\n                              content = react_1["default"].cloneElement(usercontent, {\n                                scrollerProperties: scrollerProperties\n                              });\n                            } else {\n                              content = usercontent;\n                            }\n\n                            portalMetadataRef.current = cacheHandler.createPortal(content, index, _itemID);\n                            portalNodeRef.current = portalMetadataRef.current.portalNode; // make available to user content\n\n                            scrollerProperties.isReparentingRef = portalMetadataRef.current.isReparentingRef;\n                            isMountedRef.current && setFrameState(\'inserting\');\n                          } else {\n                            // null or undefined; handle non-component value\n                            if (usercontent === null) {\n                              // truncate listsize at this index\n                              itemExceptionsCallback && itemExceptionsCallback(index, _itemID, returnvalue, \'cellFrame\', new Error(\'end of list\'));\n                              nullItemSetMaxListsize(index);\n                            } else {\n                              // usercontent === undefined, meaning an error has occurred\n                              // change placeholder message to error message\n                              errorRef.current = error; // notify the host\n\n                              itemExceptionsCallback && itemExceptionsCallback(index, _itemID, returnvalue, \'cellFrame\', error);\n                              isMountedRef.current && setFrameState(\'error\');\n                            }\n                          }\n                        }\n\n                      case 14:\n                      case "end":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[0, 8]]);\n              }));\n            }, {\n              timeout: IDLECALLBACK_TIMEOUT\n            });\n          }\n\n          break;\n        }\n\n      case \'waiting\':\n        {\n          break;\n        }\n    }\n  }, [frameState]);\n  (0, react_1.useEffect)(function () {\n    switch (frameState) {\n      case \'ready\':\n        {\n          // no-op\n          break;\n        }\n    }\n  }, [frameState]); // with \'inserting\' the content is still in cache\n  // the content re-renders with \'ready\' when the height/width have returned to normal after-cache\n  // React re-renders on diff between the two (virtual vs real DOM)\n  // this gives the content component a chance to respond to uncaching\n\n  return react_1["default"].createElement("div", {\n    ref: frameRef,\n    "data-type": \'cellframe\',\n    "data-scrollerid": scrollerID,\n    "data-index": index,\n    "data-instanceid": instanceID,\n    style: styles\n  }, ![\'inserting\', \'ready\'].includes(frameState) ? placeholderRef.current : react_1["default"].createElement(react_reverse_portal_1.OutPortal, {\n    node: portalNodeRef.current\n  }), isTriggercell ? triggercellTriggerlinesRef.current : null);\n}; // CellFrame\n// utility\n\n\nvar getFrameStyles = function getFrameStyles(orientation, cellHeight, cellWidth, layout, styles) {\n  var styleset = Object.assign(Object.assign({}, styles), {\n    position: \'relative\'\n  });\n\n  if (orientation == \'horizontal\') {\n    styleset.width = layout == \'uniform\' ? cellWidth + \'px\' : \'auto\';\n    styleset.height = \'auto\';\n  } else if (orientation === \'vertical\') {\n    styleset.width = \'auto\';\n    styleset.height = layout == \'uniform\' ? cellHeight + \'px\' : \'auto\';\n  }\n\n  return styleset;\n};\n\nexports["default"] = CellFrame;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/CellFrame.tsx\n')},"./src/Cradle.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval(" // Cradle.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CradleContext = void 0;\n/*\n    The Cradle does the bulk of the work for the infinite grid scroller. It does so with the help of\n    eight process handlers, and one main sub-component - the CellFrame.\n\n    Cradle's main responsibility is to manage the state change flows of the content.\n\n    The illusion of infinite content is maintained by synchronizing changes in cradle content with the\n    Cradle location inside the Scrollblock, such that as the Scrollblock is moved, the cradle moves\n    oppositely to stay visible within the viewport.\n\n    The Scrollblock is sized to approximate the list being viewed, so as to have a scroll thumb size\n    and position which realistically reflects the size of the list being shown.\n\n    The position of the cradle is controlled by an 'axis' which is a 0px height/width div\n    (along the medial - ScrollBlock can be verticsl or horizontal). The purpose of the axis is to\n    act as a 'fold', above which cradle content expands 'upwards' in the Cradle, and below which the\n    cradle content expands 'downwards'. The Cradle content is held in two CSS grids (children of the axis):\n    one above, and one below the position of the axis.\n\n    The axis is always kept near the leading (headward) edge of the visible cellrows of the viewport\n    (there are some edge-case exceptions).\n\n    Technically, there are several key reference points tracked by the Cradle. These are:\n        - axisReferenceIndex is the virtual index of the item controlling the location of the axis.\n            The axisReferenceIndex is also used to allocate items above (lower index value) and below\n            (same or higher index value) the axis fold. The axisRefernceIndex is the first item in the\n            tail section of the Cradle.\n        - (cradleReferenceIndex is inferred from the axisReferenceIndex, and is the virtual index of\n            the item defining the leading bound of the cradle content. The cradleReferenceIndex is the\n            fist item in the head section of the Cradle)\n        - axisPixelOffset (pixels that place the axis in relation to the viewport's leading edge)\n        - the blockScrollPos, which is the amount of scroll of the ScrollBlock\n    \n    Overscroll handling:\n        Owing to the potential rapidity of scrolling, which in the case of large lists and heavy content\n        can be too fast for the system to keep up, there is an overscroll protocol called 'repositioning'.\n\n        If the overscroll is such that the cradle has entirely passed out of the viewport, then the Cradle\n        is replaced by a ScrollTracker (or by null if the host takes responsibility for feedback).\n        The ScrollTracker shows the relative location in the virtual list at the edge of the viewport\n        during repositioning. When the scrolling stops Cradle recreates the cradle content, according to\n        the final position of the repositioning process.\n\n    Cradle is activated by interrupts:\n    - scrolling\n    - resizing of the viewport\n    - observer callbacks:\n        - cradle/viewport intersection for repositioning when the cradle races out of scope\n        - two 'triggerline'/viewport intersections which trigger rolling of content\n            - rolling content triggers re-allocation of content between cradle head and tail grids\n        - cradle grid resizing responding to variable cell length changes (in 'variable' layout mode)\n            which triggers reconfiguration\n    - pivot - change of orientation\n    - host changes of configuration specs through property changes or direct service calls\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\n\nvar Viewport_1 = __webpack_require__(/*! ./Viewport */ \"./src/Viewport.tsx\"); // popup position tracker for repositioning\n\n\nvar ScrollTracker_1 = __importDefault(__webpack_require__(/*! ./cradle/ScrollTracker */ \"./src/cradle/ScrollTracker.tsx\")); // support code; process handlers\n\n\nvar scrollhandler_1 = __importDefault(__webpack_require__(/*! ./cradle/scrollhandler */ \"./src/cradle/scrollhandler.tsx\"));\n\nvar statehandler_1 = __importDefault(__webpack_require__(/*! ./cradle/statehandler */ \"./src/cradle/statehandler.tsx\"));\n\nvar contenthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/contenthandler */ \"./src/cradle/contenthandler.tsx\"));\n\nvar layouthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/layouthandler */ \"./src/cradle/layouthandler.tsx\"));\n\nvar interrupthandler_1 = __importDefault(__webpack_require__(/*! ./cradle/interrupthandler */ \"./src/cradle/interrupthandler.tsx\"));\n\nvar servicehandler_1 = __importDefault(__webpack_require__(/*! ./cradle/servicehandler */ \"./src/cradle/servicehandler.tsx\"));\n\nvar styleshandler_1 = __importDefault(__webpack_require__(/*! ./cradle/styleshandler */ \"./src/cradle/styleshandler.tsx\")); // cacheHandler is imported as a property; instantiated at the root\n// for children\n\n\nexports.CradleContext = react_1[\"default\"].createContext(null); // component\n\nvar Cradle = function Cradle(_ref) {\n  var gridSpecs = _ref.gridSpecs,\n      runwaySize = _ref.runwaySize,\n      listsize = _ref.listsize,\n      startingIndex = _ref.startingIndex,\n      getItem = _ref.getItem,\n      placeholder = _ref.placeholder,\n      userCallbacks = _ref.userCallbacks,\n      styles = _ref.styles,\n      triggerlineOffset = _ref.triggerlineOffset,\n      cache = _ref.cache,\n      cacheMax = _ref.cacheMax,\n      scrollerID = _ref.scrollerID,\n      cacheHandler = _ref.cacheHandler,\n      useScrollTracker = _ref.useScrollTracker,\n      showAxis = _ref.showAxis,\n      SCROLL_TIMEOUT_FOR_ONAFTERSCROLL = _ref.SCROLL_TIMEOUT_FOR_ONAFTERSCROLL,\n      IDLECALLBACK_TIMEOUT = _ref.IDLECALLBACK_TIMEOUT,\n      MAX_CACHE_OVER_RUN = _ref.MAX_CACHE_OVER_RUN;\n\n  var _a, _b;\n\n  if (listsize == 0) return null; // nothing to do\n  // ========================[ DATA SETUP ]========================\n  // unpack gridSpecs\n\n  var orientation = gridSpecs.orientation,\n      gap = gridSpecs.gap,\n      padding = gridSpecs.padding,\n      cellHeight = gridSpecs.cellHeight,\n      cellWidth = gridSpecs.cellWidth,\n      layout = gridSpecs.layout; // get viewport context\n\n  var viewportInterruptProperties = (0, react_1.useContext)(Viewport_1.ViewportInterrupt);\n  var viewportInterruptPropertiesRef = (0, react_1.useRef)(null);\n  viewportInterruptPropertiesRef.current = viewportInterruptProperties; // for closures\n\n  var viewportDimensions = viewportInterruptProperties.viewportDimensions;\n  var viewportheight = viewportDimensions.height,\n      viewportwidth = viewportDimensions.width; // state\n\n  var _ref2 = (0, react_1.useState)('setup'),\n      _ref3 = _slicedToArray(_ref2, 2),\n      cradleState = _ref3[0],\n      setCradleState = _ref3[1];\n\n  var cradleStateRef = (0, react_1.useRef)(null); // access by closures\n\n  cradleStateRef.current = cradleState;\n\n  var _ref4 = (0, react_1.useState)('resizeready'),\n      _ref5 = _slicedToArray(_ref4, 2),\n      cradleResizeState = _ref5[0],\n      setCradleResizeState = _ref5[1];\n\n  var cradleResizeStateRef = (0, react_1.useRef)(null); // access by closures\n\n  cradleResizeStateRef.current = cradleResizeState; // console.log('==> cradleState','-'+scrollerID+'-',cradleState)\n  // flags\n\n  var isMountedRef = (0, react_1.useRef)(true);\n  var isCachedRef = (0, react_1.useRef)(false);\n  var wasCachedRef = (0, react_1.useRef)(false);\n  var parentingTransitionRequiredRef = (0, react_1.useRef)(false);\n  var hasBeenRenderedRef = (0, react_1.useRef)(false); // cradle scaffold element refs\n\n  var headCradleElementRef = (0, react_1.useRef)(null);\n  var tailCradleElementRef = (0, react_1.useRef)(null);\n  var axisCradleElementRef = (0, react_1.useRef)(null); // const axisTriggerlineCradleElementRef = useRef(null)\n  // const headTriggerlineCradleElementRef = useRef(null)\n\n  var triggercellTriggerlineHeadElementRef = (0, react_1.useRef)(null);\n  var triggercellTriggerlineTailElementRef = (0, react_1.useRef)(null); // layout bundle\n\n  var cradleElementsRef = (0, react_1.useRef)({\n    headRef: headCradleElementRef,\n    tailRef: tailCradleElementRef,\n    axisRef: axisCradleElementRef,\n    // axisTriggerlineRef:axisTriggerlineCradleElementRef,\n    // headTriggerlineRef:headTriggerlineCradleElementRef,\n    triggercellTriggerlineHeadRef: triggercellTriggerlineHeadElementRef,\n    triggercellTriggerlineTailRef: triggercellTriggerlineTailElementRef\n  }); // ------------------------[ calculated properties ]------------------------\n  // configuration calculations\n  // crosscount (also calculated by Scrollblock for deriving Scrollblock length)\n\n  var crosscount = (0, react_1.useMemo)(function () {\n    // console.log('recalculating crosscount')\n    var viewportcrosslength = orientation == 'horizontal' ? viewportheight : viewportwidth;\n\n    if (viewportcrosslength == 0) {\n      return 0;\n    } // cross length of viewport (gap to match crossLength)\n\n\n    var viewportcrosslengthforcalc = viewportcrosslength - padding * 2 + gap;\n    var cellcrosslength = orientation == 'horizontal' ? cellHeight + gap : cellWidth + gap;\n    var cellcrosslengthforcalc = Math.min(cellcrosslength, viewportcrosslengthforcalc); // result cannot be less than 1\n\n    var crosscount = Math.floor(viewportcrosslengthforcalc / cellcrosslengthforcalc);\n    return crosscount;\n  }, [orientation, gap, padding, cellWidth, cellHeight, viewportheight, viewportwidth]); // various row counts\n\n  var _ref6 = (0, react_1.useMemo)(function () {\n    // console.log('recalculating row counts')\n    var viewportLength, baseRowLength;\n\n    if (orientation == 'vertical') {\n      viewportLength = viewportheight;\n      baseRowLength = cellHeight;\n    } else {\n      viewportLength = viewportwidth;\n      baseRowLength = cellWidth;\n    }\n\n    baseRowLength += gap;\n    var viewportRowcount = Math.ceil(viewportLength / baseRowLength);\n    var viewportVisibleRowcount = Math.floor(viewportLength / baseRowLength);\n    var listRowcount = Math.ceil(listsize / crosscount);\n    var calculatedCradleRowcount = viewportRowcount + runwaySize * 2;\n    var cradleRowcount = Math.min(listRowcount, calculatedCradleRowcount);\n    var runwayRowcount;\n\n    if (calculatedCradleRowcount >= cradleRowcount) {\n      runwayRowcount = runwaySize;\n    } else {\n      var diff = cradleRowcount - calculatedCradleRowcount;\n      runwayRowcount -= Math.floor(diff / 2);\n      runwayRowcount = Math.max(0, runwayRowcount);\n    }\n\n    var itemcount = cradleRowcount * crosscount;\n\n    if (itemcount > listsize) {\n      itemcount = listsize;\n      cradleRowcount = Math.ceil(itemcount / crosscount);\n    }\n\n    return [cradleRowcount, viewportRowcount, viewportVisibleRowcount, listRowcount, runwayRowcount];\n  }, [orientation, gap, // padding,\n  cellWidth, cellHeight, viewportheight, viewportwidth, listsize, runwaySize, crosscount]),\n      _ref7 = _slicedToArray(_ref6, 5),\n      cradleRowcount = _ref7[0],\n      viewportRowcount = _ref7[1],\n      viewportVisibleRowcount = _ref7[2],\n      // max number of rows completely visible at once\n  listRowcount = _ref7[3],\n      runwayRowcount = _ref7[4]; // ----------------------[ callbacks ]----------------------------\n  // host callbacks, upacked by serviceHandler\n\n\n  var externalCallbacksRef = (0, react_1.useRef)({\n    referenceIndexCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.referenceIndexCallback,\n    repositioningFlagCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.repositioningFlagCallback,\n    preloadIndexCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.preloadIndexCallback,\n    deleteListCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.deleteListCallback,\n    changeListsizeCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.changeListsizeCallback,\n    itemExceptionsCallback: userCallbacks === null || userCallbacks === void 0 ? void 0 : userCallbacks.itemExceptionsCallback\n  }); // -----------------[ bundle properties for handlers ]-------------------\n  // bundle all cradle props to pass to handlers - ultimately cradleParametersRef\n\n  var cradleInheritedPropertiesRef = (0, react_1.useRef)(null); // access by closures and support callbacks\n  // up to date values\n\n  cradleInheritedPropertiesRef.current = {\n    // gridSpecs\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    layout: layout,\n    // ...rest\n    cache: cache,\n    cacheMax: cacheMax,\n    startingIndex: startingIndex,\n    getItem: getItem,\n    placeholder: placeholder,\n    triggerlineOffset: triggerlineOffset,\n    scrollerID: scrollerID,\n    // objects\n    userCallbacks: userCallbacks,\n    styles: styles,\n    cacheHandler: cacheHandler,\n    SCROLL_TIMEOUT_FOR_ONAFTERSCROLL: SCROLL_TIMEOUT_FOR_ONAFTERSCROLL,\n    MAX_CACHE_OVER_RUN: MAX_CACHE_OVER_RUN\n  };\n  var scrollerPassthroughPropertiesRef = (0, react_1.useRef)(null); // passed to cellFrame content (user content) if requested\n\n  scrollerPassthroughPropertiesRef.current = {\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    layout: layout,\n    runwayRowcount: runwayRowcount,\n    cache: cache,\n    cacheMax: cacheMax,\n    startingIndex: startingIndex,\n    triggerlineOffset: triggerlineOffset\n  }; // configuration properties to share with handlers\n\n  var cradleInternalPropertiesRef = (0, react_1.useRef)(null);\n  cradleInternalPropertiesRef.current = {\n    // updated values\n    crosscount: crosscount,\n    cradleRowcount: cradleRowcount,\n    viewportRowcount: viewportRowcount,\n    viewportVisibleRowcount: viewportVisibleRowcount,\n    listRowcount: listRowcount,\n    listsize: listsize,\n    runwayRowcount: runwayRowcount,\n    // the following values are maintained elsewhere\n    isMountedRef: isMountedRef,\n    cradleElementsRef: cradleElementsRef,\n    isCachedRef: isCachedRef,\n    wasCachedRef: wasCachedRef,\n    // for stateHandler\n    cradleStateRef: cradleStateRef,\n    setCradleState: setCradleState,\n    cradleResizeStateRef: cradleResizeStateRef,\n    setCradleResizeState: setCradleResizeState\n  }; // placeholder in cradleParameters to make available individual handlers\n\n  var handlersRef = (0, react_1.useRef)(null); // cradle parameters MASTER BUNDLE\n\n  var cradleParameters = {\n    handlersRef: handlersRef,\n    viewportInterruptPropertiesRef: viewportInterruptPropertiesRef,\n    cradleInheritedPropertiesRef: cradleInheritedPropertiesRef,\n    scrollerPassthroughPropertiesRef: scrollerPassthroughPropertiesRef,\n    cradleInternalPropertiesRef: cradleInternalPropertiesRef,\n    externalCallbacksRef: externalCallbacksRef\n  };\n  var cradleParametersRef = (0, react_1.useRef)(null);\n  cradleParametersRef.current = cradleParameters; // ongoing source of handlers - note all Handlers are given all parameters (cradleParameters)\n\n  if (!handlersRef.current) {\n    handlersRef.current = getCradleHandlers(cradleParameters);\n  } // make handlers directly available to cradle code below\n\n\n  var _handlersRef$current = handlersRef.current,\n      interruptHandler = _handlersRef$current.interruptHandler,\n      scrollHandler = _handlersRef$current.scrollHandler,\n      stateHandler = _handlersRef$current.stateHandler,\n      contentHandler = _handlersRef$current.contentHandler,\n      layoutHandler = _handlersRef$current.layoutHandler,\n      serviceHandler = _handlersRef$current.serviceHandler,\n      stylesHandler = _handlersRef$current.stylesHandler; // =======================[ INTERCEPT CACHING STATE CHANGE ]=========================\n\n  /*\n      Intercept change in caching status:\n      when a portal is cached, including the transition of being moved from one cellFrame to another,\n      (and the infinitegridscroller can be a component that is cached),\n      the scrollPos (scrollLeft or scrollTop) is reset to 0 (zero). When the scroller is\n      moved to a cellFrame, this code triggers restoration the scrollPos (see case 'parentingtransition'\n      in the state management section below).\n      The restore action must be the first priority to hide the scrollPos changes from the user\n  */\n  // zero width and height means the component must be in portal (cache) state\n\n  var isInPortal = viewportwidth == 0 && viewportheight == 0;\n  var isCacheChange = isInPortal != isCachedRef.current;\n\n  if (isCacheChange) {\n    wasCachedRef.current = isCachedRef.current;\n    isCachedRef.current = isInPortal;\n  }\n\n  var isCachingUnderway = isCachedRef.current || wasCachedRef.current;\n\n  if (isCacheChange || ((_a = viewportInterruptProperties.isReparentingRef) === null || _a === void 0 ? void 0 : _a.current) || viewportInterruptProperties.isResizing && isCachingUnderway) {\n    if ((_b = viewportInterruptProperties.isReparentingRef) === null || _b === void 0 ? void 0 : _b.current) {\n      viewportInterruptProperties.isReparentingRef.current = false; // no longer needed\n\n      parentingTransitionRequiredRef.current = true;\n    }\n\n    if (viewportInterruptProperties.isResizing) {\n      // caching op is underway, so cancel\n      viewportInterruptProperties.isResizing = false;\n    }\n\n    if (isCacheChange) {\n      // into or out of caching\n      if (isCachedRef.current && !wasCachedRef.current) {\n        // change into cache\n        interruptHandler.pauseInterrupts();\n      }\n    }\n  } // generate state for restoring scrollPos\n\n\n  (0, react_1.useEffect)(function () {\n    // if is cached, then the next effect (for entering or leaving cache) has another turn\n    if (parentingTransitionRequiredRef.current && !isCachedRef.current) {\n      parentingTransitionRequiredRef.current = false;\n      setCradleState('parentingtransition');\n    }\n  }, [parentingTransitionRequiredRef.current]); // change state for entering or leaving cache\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return; // nothing to do\n\n    if (isCachedRef.current && !wasCachedRef.current) {\n      // into cache\n      setCradleState('cached'); // replaces 'ready' as steady state\n    } else if (!isCachedRef.current && wasCachedRef.current) {\n      // out of cache\n      wasCachedRef.current = false;\n\n      if (parentingTransitionRequiredRef.current) {\n        parentingTransitionRequiredRef.current = false;\n        setCradleState('parentingtransition');\n      } else {\n        if (hasBeenRenderedRef.current) {\n          setCradleState('rerenderfromcache');\n        } else {\n          setCradleState('firstrenderfromcache');\n        }\n      }\n    }\n  }, [isCachedRef.current, wasCachedRef.current]); // ===================[ INITIALIZATION effects ]=========================\n  // initialization effects are independent of caching\n  // clear mounted flag on unmount\n\n  (0, react_1.useEffect)(function () {\n    // unmount\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []); //send call-in functions to host\n\n  (0, react_1.useEffect)(function () {\n    if (!userCallbacks.getFunctions) return;\n    var scrollToItem = serviceHandler.scrollToItem,\n        reload = serviceHandler.reload,\n        setListsize = serviceHandler.setListsize,\n        clearCache = serviceHandler.clearCache,\n        getCacheIndexMap = serviceHandler.getCacheIndexMap,\n        getCacheItemMap = serviceHandler.getCacheItemMap,\n        getCradleIndexMap = serviceHandler.getCradleIndexMap,\n        remapIndexes = serviceHandler.remapIndexes,\n        moveIndex = serviceHandler.moveIndex,\n        insertIndex = serviceHandler.insertIndex,\n        removeIndex = serviceHandler.removeIndex;\n    var functions = {\n      scrollToItem: scrollToItem,\n      reload: reload,\n      setListsize: setListsize,\n      clearCache: clearCache,\n      getCacheIndexMap: getCacheIndexMap,\n      getCacheItemMap: getCacheItemMap,\n      getCradleIndexMap: getCradleIndexMap,\n      remapIndexes: remapIndexes,\n      moveIndex: moveIndex,\n      insertIndex: insertIndex,\n      removeIndex: removeIndex\n    };\n    userCallbacks.getFunctions(functions);\n  }, []); // initialize window scroll listener\n\n  (0, react_1.useEffect)(function () {\n    var viewportdata = viewportInterruptPropertiesRef.current;\n    viewportdata.elementRef.current.addEventListener('scroll', scrollHandler.onScroll);\n    return function () {\n      viewportdata.elementRef.current && viewportdata.elementRef.current.removeEventListener('scroll', scrollHandler.onScroll);\n    };\n  }, []); // observer support\n\n  /*\n      There are two interection observers: one for the cradle wings, and another for triggerlines;\n          both against the viewport.\n      There is also a resize observer for the cradle wings, to generate responses to size changes of\n          variable cells.\n  */\n\n  (0, react_1.useEffect)(function () {\n    // intersection observer for cradle body\n    // this sets up an IntersectionObserver of the cradle against the viewport. When the\n    // cradle goes out of the observer scope, the 'repositioningRender' cradle state is triggered.\n    var cradleintersectobserver = interruptHandler.cradleIntersect.createObserver();\n    interruptHandler.cradleIntersect.connectElements(); // triggerobserver tiggers cradle content updates \n    //     when triggerlines pass the edge of the viewport\n    // defer connectElements until triggercell triggerlines have been assigned\n\n    var triggerobserver = interruptHandler.triggerlinesIntersect.createObserver(); // interruptHandler.triggerlinesIntersect.connectElements()\n    // resize observer generates compensation for changes in cell sizes for variable layout modes\n\n    var cradleresizeobserver = interruptHandler.cradleResize.createObserver();\n    interruptHandler.cradleResize.connectElements();\n    return function () {\n      cradleintersectobserver.disconnect();\n      triggerobserver.disconnect();\n      cradleresizeobserver.disconnect();\n    };\n  }, []); // =====================[ RECONFIGURATION effects ]======================\n  // change listsize, caching, resize (UI resize of the viewport), reconfigure, or pivot\n  // callback: the new list size will always be less than current listsize\n  // invoked if getItem returns null\n\n  var nullItemSetMaxListsize = (0, react_1.useCallback)(function (maxListsize) {\n    var listsize = cradleInternalPropertiesRef.current.listsize;\n\n    if (maxListsize < listsize) {\n      var _serviceHandler$callb = serviceHandler.callbacks,\n          deleteListCallback = _serviceHandler$callb.deleteListCallback,\n          changeListsizeCallback = _serviceHandler$callb.changeListsizeCallback;\n      var dListCallback;\n\n      if (deleteListCallback) {\n        dListCallback = function dListCallback(deleteList) {\n          deleteListCallback('getItem returned null', deleteList);\n        };\n      }\n\n      cacheHandler.changeListsize(maxListsize, dListCallback, changeListsizeCallback);\n    }\n  }, []); // caching change\n\n  (0, react_1.useEffect)(function () {\n    if (cache == 'preload') {\n      setCradleState('startpreload');\n      return;\n    }\n\n    if (cradleStateRef.current == 'setup') return;\n\n    switch (cache) {\n      case 'keepload':\n        {\n          var modelIndexList = contentHandler.getModelIndexList();\n          var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n          var dListCallback;\n\n          if (deleteListCallback) {\n            dListCallback = function dListCallback(deleteList) {\n              deleteListCallback('pare cache to cacheMax', deleteList);\n            };\n          }\n\n          var _cacheMax = cradleParameters.cradleInheritedPropertiesRef.current.cacheMax;\n\n          if (cacheHandler.pareCacheToMax(_cacheMax, modelIndexList, dListCallback, scrollerID)) {\n            cacheHandler.cacheProps.modified = true;\n            cacheHandler.renderPortalList();\n          }\n\n          setCradleState('changecaching');\n          break;\n        }\n\n      case 'cradle':\n        {\n          var _modelIndexList = contentHandler.getModelIndexList();\n\n          var _deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n\n          var _dListCallback;\n\n          if (_deleteListCallback) {\n            _dListCallback = function _dListCallback(deleteList) {\n              _deleteListCallback('match cache to cradle', deleteList);\n            };\n          }\n\n          if (cacheHandler.matchCacheToCradle(_modelIndexList, _dListCallback)) {\n            cacheHandler.cacheProps.modified = true;\n            cacheHandler.renderPortalList();\n          }\n\n          setCradleState('changecaching');\n          break;\n        }\n    }\n  }, [cache, cacheMax]); // trigger viewportresizing response based on viewport state\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return; // console.log('isResizing useEffect: cradleState, isResizing, isCached, wasCached',\n    //     cradleStateRef.current,viewportInterruptPropertiesRef.current.isResizing,\n    //     isCachedRef.current, wasCachedRef.current)\n    // movement to and from cache is independent of ui viewportresizing\n\n    if (isCachedRef.current || wasCachedRef.current) {\n      // console.log('returning from resize effect for caching state')\n      return;\n    }\n\n    if (viewportInterruptPropertiesRef.current.isResizing && cradleStateRef.current != 'viewportresizing') {\n      interruptHandler.pauseInterrupts();\n      setCradleState('viewportresizing');\n    } // complete viewportresizing mode\n\n\n    if (!viewportInterruptPropertiesRef.current.isResizing && cradleStateRef.current == 'viewportresizing') {\n      setCradleState('finishviewportresize');\n    }\n  }, [viewportInterruptPropertiesRef.current.isResizing]); // reconfigure for changed size parameters\n\n  (0, react_1.useEffect)(function () {\n    if (cradleStateRef.current == 'setup') return;\n    if (isCachedRef.current) return;\n    interruptHandler.pauseInterrupts();\n    setCradleState('reconfigure');\n  }, [listsize, cellHeight, cellWidth, gap, padding, triggerlineOffset]); // pivot triggered on change of orientation\n\n  (0, react_1.useEffect)(function () {\n    layoutHandler.cradlePositionData.blockScrollProperty = orientation == \"vertical\" ? \"scrollTop\" : \"scrollLeft\";\n\n    if (cradleStateRef.current == 'setup') {\n      layoutHandler.cradlePositionData.blockScrollPos = 0;\n      return;\n    }\n\n    if (isCachedRef.current) {\n      hasBeenRenderedRef.current = false;\n      return;\n    }\n\n    var _cradleInheritedPrope = cradleInheritedPropertiesRef.current,\n        cellWidth = _cradleInheritedPrope.cellWidth,\n        cellHeight = _cradleInheritedPrope.cellHeight,\n        gap = _cradleInheritedPrope.gap; // get previous ratio\n\n    var previousCellPixelLength = (orientation == 'vertical' ? cellWidth : cellHeight) + gap;\n    var previousAxisOffset = layoutHandler.cradlePositionData.targetAxisViewportPixelOffset;\n    var previousratio = previousAxisOffset / previousCellPixelLength;\n    var pivotCellPixelLength = (orientation == 'vertical' ? cellHeight : cellWidth) + gap;\n    var pivotAxisOffset = previousratio * pivotCellPixelLength;\n    layoutHandler.cradlePositionData.targetAxisViewportPixelOffset = Math.round(pivotAxisOffset);\n    interruptHandler.pauseInterrupts();\n    setCradleState('pivot');\n  }, [orientation]); // =====================[ STYLES ]===========================\n  // styles for the six scaffold components\n\n  var _ref8 = (0, react_1.useMemo)(function () {\n    return stylesHandler.getCradleStyles({\n      orientation: orientation,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding,\n      viewportheight: viewportheight,\n      viewportwidth: viewportwidth,\n      crosscount: crosscount,\n      userstyles: styles,\n      triggerlineOffset: triggerlineOffset\n    });\n  }, [orientation, cellHeight, cellWidth, gap, padding, viewportheight, viewportwidth, crosscount, styles, triggerlineOffset]),\n      _ref9 = _slicedToArray(_ref8, 6),\n      cradleHeadStyle = _ref9[0],\n      cradleTailStyle = _ref9[1],\n      cradleAxisStyle = _ref9[2],\n      // triggerlineAxisStyle,\n  // triggerlineHeadStyle,\n  cradleDividerStyle = _ref9[3],\n      triggercellTriggerlineHeadStyle = _ref9[4],\n      triggercellTriggerlineTailStyle = _ref9[5]; // =====================[ STATE MANAGEMENT ]==========================\n  // this is the core state engine (19 states), using named states\n  // useLayoutEffect for suppressing flashes\n\n\n  (0, react_1.useLayoutEffect)(function () {\n    switch (cradleState) {\n      // --------------[ precursors to setCradleContent ]---------------\n      // these are all workflow related, but\n      // resize could be asynchronous when rotating phone during scroll intertia\n      case 'setup':\n        {\n          // cycle to allow for ref assignments\n          if (cradleInheritedPropertiesRef.current.cache != 'preload') {\n            if (isCachedRef.current) {\n              setCradleState('cached');\n            } else {\n              setCradleState('firstrender'); // load grid\n            }\n          }\n\n          break;\n        }\n\n      case 'viewportresizing':\n        {\n          // no-op, wait for resizing to end\n          break;\n        }\n\n      case 'startpreload':\n        {\n          var finalCallback = function finalCallback() {\n            var modelIndexList = contentHandler.getModelIndexList();\n            var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n            var dListCallback;\n\n            if (deleteListCallback) {\n              dListCallback = function dListCallback(deleteList) {\n                deleteListCallback('pare cache to cacheMax', deleteList);\n              };\n            }\n\n            if (cacheHandler.pareCacheToMax(cacheMax, modelIndexList, dListCallback, scrollerID)) {\n              cacheHandler.cacheProps.modified = true;\n              cacheHandler.renderPortalList();\n            }\n\n            if (!isCachedRef.current) {\n              setCradleState('finishpreload');\n            } else {\n              setCradleState('cached');\n            }\n          };\n\n          cacheHandler.preload(cradleParametersRef.current, finalCallback, nullItemSetMaxListsize, scrollerID);\n          break;\n        }\n\n      case 'cached':\n        {\n          if (!wasCachedRef.current && !isCachedRef.current) {\n            if (hasBeenRenderedRef.current) {\n              setCradleState('rerenderfromcache');\n            } else {\n              setCradleState('firstrenderfromcache');\n            }\n          } // else wait for reparenting\n\n\n          break;\n        }\n      // moving out of cache into visible DOM tree (cellFrame)\n      // resets scrollPos (scrollLeft/scrollTop) to last UI value\n\n      case 'parentingtransition':\n        {\n          var cradlePositionData = layoutHandler.cradlePositionData; // reset scroll position to previous value\n\n          if (cradlePositionData.blockScrollPos !== null) {\n            var viewportElement = viewportInterruptPropertiesRef.current.elementRef.current;\n            viewportElement[cradlePositionData.blockScrollProperty] = cradlePositionData.blockScrollPos;\n          }\n\n          setCradleState('finishparenting');\n          break;\n        }\n\n      case 'finishparenting':\n        {\n          interruptHandler.restoreInterrupts();\n\n          if (hasBeenRenderedRef.current) {\n            setCradleState('ready'); // setCradleState('restoreinterrupts')\n          } else {\n            setCradleState('firstrenderfromcache');\n          }\n\n          break;\n        }\n\n      case 'startreposition':\n        {\n          var signals = interruptHandler.signals;\n          signals.pauseTriggerlinesObserver = true; // avoid recursive cradle intersection interrupts\n\n          signals.pauseCradleIntersectionObserver = true;\n          signals.repositioningRequired = false; // because now underway\n\n          setCradleState('repositioningRender'); // toggles with repositioningContinuation\n\n          break;\n        }\n      // -------------------[ setCradleContent ]------------------\n\n      /*\n          the following 11 cradle states all resolve with\n          a chain starting with setCradleContent,\n          continuing with 'preparerender', and ending with\n          'restoreinterrupts'\n      */\n\n      case 'firstrender':\n      case 'firstrenderfromcache':\n      case 'rerenderfromcache':\n      case 'scrollto':\n      case 'changecaching':\n      case 'finishpreload':\n      case 'finishreposition':\n      case 'finishviewportresize':\n      case 'pivot':\n      case 'reconfigure':\n      case 'reload':\n        {\n          var _cradleContent = contentHandler.content;\n          _cradleContent.headModelComponents = [];\n          _cradleContent.tailModelComponents = []; // register new array id for Object.is to trigger react re-processing\n\n          _cradleContent.headDisplayComponents = [];\n          _cradleContent.tailDisplayComponents = [];\n\n          if (cradleState == 'reload') {\n            cacheHandler.clearCache();\n          } // set data\n\n\n          contentHandler.setCradleContent(cradleState);\n\n          if (cradleState != 'finishpreload') {\n            hasBeenRenderedRef.current = true;\n          } // synchronize cache if necessary\n\n\n          var _cache = cradleInheritedPropertiesRef.current.cache;\n\n          if (_cache == 'cradle') {\n            var modelIndexList = contentHandler.getModelIndexList();\n            var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n            var dListCallback;\n\n            if (deleteListCallback) {\n              dListCallback = function dListCallback(deleteList) {\n                deleteListCallback('match cache to cradle', deleteList);\n              };\n            }\n\n            if (cacheHandler.matchCacheToCradle(modelIndexList, dListCallback)) {\n              cacheHandler.renderPortalList();\n            }\n          } // prepare the cycle for preparerender\n\n\n          _cradleContent.headDisplayComponents = _cradleContent.headModelComponents;\n          _cradleContent.tailDisplayComponents = _cradleContent.tailModelComponents; // update virtual DOM\n\n          setCradleState('preparerender');\n          break;\n        }\n      // case 'resetaftervariablescroll': {\n      //     // const viewportElement = viewportInterruptPropertiesRef.current.elementRef.current\n      //     // const scrollblockElement = viewportElement.firstChild\n      //     // const top = scrollblockElement.offsetTop\n      //     // scrollblockElement.style.top = (top + 5) + 'px'\n      //     // contentHandler.resetScrollPosition()\n      //     setCradleState('ready')\n      //     break\n      // }\n\n      case 'preparerender':\n        {\n          // cycle for DOM update\n          // triggerlines will have been assigned to a new triggerCell by now.\n          // connectElements delayed for a cycle to render triggercell triggerlines\n          interruptHandler.triggerlinesIntersect.connectElements();\n          interruptHandler.cradleIntersect.connectElements(); // this can be pre-empted by reparenting, which itself restores interrupts\n\n          setCradleState('restoreinterrupts'); // to restore interrupts\n\n          break;\n        }\n\n      case 'restoreinterrupts':\n        {\n          // normalize or resume cycling\n          interruptHandler.restoreInterrupts();\n          setCradleState('ready');\n          break;\n        }\n      // ----------------------[ followup from updateCradleContent ]------------\n      // scroll effects\n      // renderupdatedcontent is called from updateCradleContent. \n      // it is required to integrate changed DOM configurations before 'ready' is displayed\n\n      case 'renderupdatedcontent':\n        {\n          // cycle for DOM update\n          cradleContent.headDisplayComponents = cradleContent.headModelComponents;\n          cradleContent.tailDisplayComponents = cradleContent.tailModelComponents; // update virtual DOM\n\n          setCradleState('finishupdatedcontent');\n          break;\n        }\n\n      case 'finishupdatedcontent':\n        {\n          // cycle for DOM update\n          // re-activate triggers; triggerlines will have been assigned to a new triggerCell by now.\n          interruptHandler.triggerlinesIntersect.connectElements();\n          interruptHandler.signals.pauseTriggerlinesObserver = false; // synchronize cache\n\n          var _cache2 = cradleInternalPropertiesRef.current.cache;\n\n          if (_cache2 == 'keepload') {\n            contentHandler.guardAgainstRunawayCaching();\n          }\n\n          cacheHandler.renderPortalList();\n          setCradleState('updateDOMforvariability');\n          break;\n        }\n\n      case 'updateDOMforvariability':\n        {\n          setCradleState('adjustforvariability');\n          break;\n        }\n\n      case 'adjustforvariability':\n        {\n          contentHandler.adjustScrollblockForVariability();\n          setCradleState('ready');\n        }\n      // ----------------[ user requests ]-------------\n      // support for various host service requests; syncs cradle content with cache changes\n\n      case 'applycellframechanges':\n        {\n          // user intervention\n          cradleContent.headDisplayComponents = cradleContent.headModelComponents;\n          cradleContent.tailDisplayComponents = cradleContent.tailModelComponents;\n          var portalHoldList = cacheHandler.portalHoldList;\n          var portalMap = cacheHandler.cacheProps.portalMap;\n\n          if (portalHoldList && portalHoldList.length) {\n            var _iterator = _createForOfIteratorHelper(portalHoldList),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var itemID = _step.value;\n                portalMap[\"delete\"](itemID);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n\n          setCradleState('ready');\n          break;\n        }\n\n      case 'clearcache':\n        {\n          contentHandler.clearCradle();\n          cradleContent.headDisplayComponents = [];\n          cradleContent.tailDisplayComponents = [];\n          cacheHandler.clearCache();\n          setCradleState('ready');\n          break;\n        }\n    }\n  }, [cradleState]); // for cradle resize events; these are asynchronous\n\n  (0, react_1.useLayoutEffect)(function () {\n    switch (cradleResizeState) {\n      case 'resizeready':\n        break;\n\n      case 'resizecradle':\n        setCradleResizeState('resizeready');\n        break;\n    }\n  }, [cradleResizeState]); // standard rendering states (3 states)\n\n  (0, react_1.useEffect)(function () {\n    switch (cradleState) {\n      // repositioningRender and repositioningContinuation are toggled to generate continuous \n      // repositioning renders\n      case 'repositioningRender':\n        // no-op\n        break;\n\n      case 'repositioningContinuation':\n        // set from onScroll\n        setCradleState('repositioningRender');\n        break;\n\n      case 'ready':\n        // no-op\n        break;\n    }\n  }, [cradleState]); // ==========================[ RENDER ]===========================\n\n  var scrollAxisReferenceIndex = layoutHandler.cradlePositionData.targetAxisReferenceIndex;\n  var scrollTrackerArgs = (0, react_1.useMemo)(function () {\n    if (!useScrollTracker) return null;\n\n    if (!['repositioningContinuation', 'repositioningRender'].includes(cradleState)) {\n      return null;\n    }\n\n    var trackerargs = {\n      top: viewportDimensions.top + 3,\n      left: viewportDimensions.left + 3,\n      scrollAxisReferenceIndex: scrollAxisReferenceIndex,\n      listsize: listsize,\n      styles: styles\n    };\n    return trackerargs;\n  }, [cradleState, viewportDimensions, scrollAxisReferenceIndex, listsize, styles]);\n  var cradleContent = contentHandler.content;\n  var triggercellTriggerlinesRef = (0, react_1.useRef)(null);\n  triggercellTriggerlinesRef.current = (0, react_1.useMemo)(function () {\n    // console.log('generating triggercell triggerlines')\n    return [react_1[\"default\"].createElement(\"div\", {\n      key: 'head',\n      \"data-type\": 'triggercell-triggerline-head',\n      \"data-direction\": 'backward',\n      style: triggercellTriggerlineHeadStyle,\n      ref: triggercellTriggerlineHeadElementRef\n    }), react_1[\"default\"].createElement(\"div\", {\n      key: 'tail',\n      \"data-type\": 'triggercell-triggerline-tail',\n      \"data-direction\": 'forward',\n      style: triggercellTriggerlineTailStyle,\n      ref: triggercellTriggerlineTailElementRef\n    })];\n  }, [triggercellTriggerlineHeadStyle, triggercellTriggerlineTailStyle]);\n  var contextvalueRef = (0, react_1.useRef)({\n    scrollerPassthroughPropertiesRef: scrollerPassthroughPropertiesRef,\n    cacheHandler: cacheHandler,\n    nullItemSetMaxListsize: nullItemSetMaxListsize,\n    itemExceptionsCallback: serviceHandler.callbacks.itemExceptionsCallback,\n    IDLECALLBACK_TIMEOUT: IDLECALLBACK_TIMEOUT,\n    triggercellTriggerlinesRef: triggercellTriggerlinesRef\n  }); // display the cradle components, the ScrollTracker, or null\n\n  return react_1[\"default\"].createElement(exports.CradleContext.Provider, {\n    value: contextvalueRef.current\n  }, ['repositioningContinuation', 'repositioningRender'].includes(cradleState) ? useScrollTracker ? react_1[\"default\"].createElement(ScrollTracker_1[\"default\"], {\n    top: scrollTrackerArgs.top,\n    left: scrollTrackerArgs.left,\n    offset: scrollTrackerArgs.scrollAxisReferenceIndex,\n    listsize: scrollTrackerArgs.listsize,\n    styles: scrollTrackerArgs.styles\n  }) : null : react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-axis',\n    style: cradleAxisStyle,\n    ref: axisCradleElementRef\n  }, showAxis ? // for debug\n  react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'cradle-divider',\n    style: cradleDividerStyle\n  }) : null, react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'head',\n    ref: headCradleElementRef,\n    style: cradleHeadStyle\n  }, cradleState != 'setup' ? cradleContent.headDisplayComponents : null), react_1[\"default\"].createElement(\"div\", {\n    \"data-type\": 'tail',\n    ref: tailCradleElementRef,\n    style: cradleTailStyle\n  }, cradleState != 'setup' ? cradleContent.tailDisplayComponents : null)));\n}; // Cradle\n// { false? <div\n//     data-type = 'triggerline-head'\n//     data-direction = 'backward'\n//     style = {triggerlineHeadStyle}\n//     ref = {axisTriggerlineCradleElementRef}\n// >\n// </div>:null }\n// { false? <div\n//     data-type = 'triggerline-axis'\n//     data-direction = 'forward'\n//     style = {triggerlineAxisStyle}\n//     ref = {headTriggerlineCradleElementRef}\n// >\n// </div>:null }\n\n\nexports[\"default\"] = Cradle; // utility\n\nvar getCradleHandlers = function getCradleHandlers(cradleParameters) {\n  var createHandler = function createHandler(handler) {\n    return new handler(cradleParameters);\n  };\n\n  var cacheHandler = cradleParameters.cradleInheritedPropertiesRef.current.cacheHandler;\n  cacheHandler.cradleParameters = cradleParameters;\n  return {\n    cacheHandler: cacheHandler,\n    interruptHandler: createHandler(interrupthandler_1[\"default\"]),\n    scrollHandler: createHandler(scrollhandler_1[\"default\"]),\n    stateHandler: createHandler(statehandler_1[\"default\"]),\n    contentHandler: createHandler(contenthandler_1[\"default\"]),\n    layoutHandler: createHandler(layouthandler_1[\"default\"]),\n    serviceHandler: createHandler(servicehandler_1[\"default\"]),\n    stylesHandler: createHandler(styleshandler_1[\"default\"])\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Cradle.tsx\n")},"./src/Scrollblock.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval(' // Scrollblock.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n\n    The scrollblock provides the scrollable element of the infinite grid scroller.\n    It is sized according to the given cell size and row counts, adjusted for variable cradle content.\n    Its only state change is change of styles.\n\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\n\nvar Viewport_1 = __webpack_require__(/*! ./Viewport */ "./src/Viewport.tsx");\n\nvar Scrollblock = function Scrollblock(_ref) {\n  var children = _ref.children,\n      listsize = _ref.listsize,\n      gridSpecs = _ref.gridSpecs,\n      styles = _ref.styles,\n      scrollerID = _ref.scrollerID;\n  var orientation = gridSpecs.orientation,\n      gap = gridSpecs.gap,\n      padding = gridSpecs.padding,\n      cellHeight = gridSpecs.cellHeight,\n      cellWidth = gridSpecs.cellWidth,\n      layout = gridSpecs.layout; // -------------------------[ context and state ]-------------------------\n\n  var viewportInterruptProperties = (0, react_1.useContext)(Viewport_1.ViewportInterrupt); // -----------------------------------[ data heap ]-------------------------\n\n  var baseScrollBlockLengthRef = (0, react_1.useRef)(null); // just for init\n\n  var linerStyle = (0, react_1.useMemo)(function () {\n    return Object.assign(Object.assign({}, styles.scrollblock), {\n      position: \'relative\'\n    });\n  }, []);\n  var divlinerstyleRef = (0, react_1.useRef)(linerStyle);\n\n  var _ref2 = (0, react_1.useState)(divlinerstyleRef.current),\n      _ref3 = _slicedToArray(_ref2, 2),\n      divlinerstyle = _ref3[0],\n      saveDivlinerstyle = _ref3[1]; // to trigger render\n\n\n  var _viewportInterruptPro = viewportInterruptProperties.viewportDimensions,\n      width = _viewportInterruptPro.width,\n      height = _viewportInterruptPro.height; // reconfigure\n\n  (0, react_1.useLayoutEffect)(function () {\n    updateBaseBlockLength({\n      orientation: orientation,\n      viewportheight: height,\n      viewportwidth: width,\n      listsize: listsize,\n      cellHeight: cellHeight,\n      cellWidth: cellWidth,\n      gap: gap,\n      padding: padding\n    });\n    divlinerstyleRef.current = updateScrollblockStyles(orientation, divlinerstyleRef, baseScrollBlockLengthRef);\n    saveDivlinerstyle(divlinerstyleRef.current);\n  }, [orientation, height, width, listsize, cellHeight, cellWidth, gap, padding]);\n  var updateBaseBlockLength = (0, react_1.useCallback)(function (layoutspecs) {\n    var basescrollblocklength = calcBaseScrollblockLength(layoutspecs);\n    baseScrollBlockLengthRef.current = basescrollblocklength;\n  }, []);\n  return react_1["default"].createElement("div", {\n    "data-type": \'scrollblock\',\n    style: divlinerstyleRef.current\n  }, children);\n}; // Scrollblock\n\n\nexports["default"] = Scrollblock; // any of the parameters can affect the length\n\nvar calcBaseScrollblockLength = function calcBaseScrollblockLength(_ref4) {\n  var orientation = _ref4.orientation,\n      viewportheight = _ref4.viewportheight,\n      viewportwidth = _ref4.viewportwidth,\n      listsize = _ref4.listsize,\n      cellHeight = _ref4.cellHeight,\n      cellWidth = _ref4.cellWidth,\n      gap = _ref4.gap,\n      padding = _ref4.padding;\n  // ---------------[ calculate crosscount ]------------------\n  //crosscount is also calculated by Cradle\n  var crosslength;\n  var cellLength;\n  var viewportcrosslength;\n\n  if (orientation == \'vertical\') {\n    crosslength = cellWidth + gap;\n    cellLength = cellHeight + gap;\n    viewportcrosslength = viewportwidth;\n  } else {\n    // \'horizontal\'\n    crosslength = cellHeight + gap;\n    cellLength = cellWidth + gap;\n    viewportcrosslength = viewportheight;\n  } // adjustments to viewportcrosslength\n\n\n  viewportcrosslength -= padding * 2;\n  viewportcrosslength += gap; // to match crossLength\n\n  if (viewportcrosslength < crosslength) viewportcrosslength = crosslength; // must be at least one\n\n  var crosscount = Math.floor(viewportcrosslength / crosslength); // -------------------[ calculate scrollblock length ]-----------------\n\n  var listrowcount = Math.ceil(listsize / crosscount);\n  var baselength = listrowcount * cellLength - (listrowcount > 0 ? gap : // final cell has no trailing gap\n  0) + padding * 2; // leading and trailing padding\n\n  return baselength;\n};\n\nvar updateScrollblockStyles = function updateScrollblockStyles(orientation, stylesRef, baseScrollblocklengthRef) {\n  var localstyles = Object.assign({}, stylesRef.current); // new object\n\n  var height;\n  var width;\n\n  if (orientation == \'horizontal\') {\n    height = \'100%\';\n    width = baseScrollblocklengthRef.current + \'px\';\n  } else if (orientation == \'vertical\') {\n    height = baseScrollblocklengthRef.current + \'px\';\n    width = \'100%\';\n  }\n\n  localstyles.height = height;\n  localstyles.width = width;\n  return localstyles;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Scrollblock.tsx\n')},"./src/Viewport.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval(' // Viewport.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ViewportInterrupt = void 0;\n/*\n    The role of viewport is to provide data to its children (scrollblock and cradle),\n    and act as the visible screen portal of the list being shown.\n    If it is resized, it notifies the Cradle to reconfigure.\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\n\nexports.ViewportInterrupt = react_1["default"].createContext(null); // for children\n\nvar resize_observer_1 = __webpack_require__(/*! @juggle/resize-observer */ "./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js");\n\nvar ResizeObserver = window[\'ResizeObserver\'] || resize_observer_1.ResizeObserver;\n\nvar Viewport = function Viewport(_ref) {\n  var children = _ref.children,\n      gridSpecs = _ref.gridSpecs,\n      styles = _ref.styles,\n      scrollerID = _ref.scrollerID,\n      scrollerProperties = _ref.scrollerProperties,\n      VIEWPORT_RESIZE_TIMEOUT = _ref.VIEWPORT_RESIZE_TIMEOUT;\n  // -----------------------[ initialize ]------------------\n  var orientation = gridSpecs.orientation,\n      gap = gridSpecs.gap,\n      padding = gridSpecs.padding,\n      cellHeight = gridSpecs.cellHeight,\n      cellWidth = gridSpecs.cellWidth,\n      layout = gridSpecs.layout;\n\n  var _ref2 = (0, react_1.useState)(\'setup\'),\n      _ref3 = _slicedToArray(_ref2, 2),\n      viewportState = _ref3[0],\n      setViewportState = _ref3[1]; // setup, resizing, resized, ready\n\n\n  var viewportStateRef = (0, react_1.useRef)(null); // for useCallback -> resizeCallback scope\n\n  viewportStateRef.current = viewportState;\n  var isMountedRef = (0, react_1.useRef)(true); // monitor for unmounted\n\n  var viewportElementRef = (0, react_1.useRef)(null); // viewportInterruptPropertiesRef is passed as a resizing interrupt (through context) to children\n  // initialize\n\n  var viewportInterruptPropertiesRef = (0, react_1.useRef)({\n    isReparentingRef: scrollerProperties === null || scrollerProperties === void 0 ? void 0 : scrollerProperties.isReparentingRef,\n    isResizing: false,\n    viewportDimensions: null,\n    elementRef: null\n  }); // mark as unmounted\n\n  (0, react_1.useEffect)(function () {\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []); // --------------------[ viewport resizer interrupt ]-----------------------\n\n  var resizeTimeridRef = (0, react_1.useRef)(null);\n  var isResizingRef = (0, react_1.useRef)(false);\n  var resizeObserverRef = (0, react_1.useRef)(null); // set up resizeObserver\n\n  (0, react_1.useEffect)(function () {\n    // initialize\n    resizeObserverRef.current = new ResizeObserver(resizeCallback);\n    resizeObserverRef.current.observe(viewportElementRef.current); // unmount\n\n    return function () {\n      resizeObserverRef.current.disconnect();\n    };\n  }, []); // used by resizeObserver; generates interrupt\n\n  var resizeCallback = (0, react_1.useCallback)(function (entries) {\n    // console.log(\'Viewport: resizeCallback\')\n    // if ((!isMountedRef.current) || (!viewportElementRef.current)) return\n    if (viewportStateRef.current == \'setup\') return;\n    var target = entries[0].target; // no need to trigger interrupt on first resize notification\n\n    if (!target.dataset.initialized) {\n      target.dataset.initialized = \'true\';\n      return;\n    } // generate interrupt response, if initiating resize\n\n\n    if (!isResizingRef.current) {\n      viewportInterruptPropertiesRef.current.isResizing = isResizingRef.current = true; // new object creation triggers a realtime interrupt message to cradle through context\n\n      viewportInterruptPropertiesRef.current = Object.assign({}, viewportInterruptPropertiesRef.current);\n      if (isMountedRef.current) setViewportState(\'resizing\');\n    } // finalize resizing after timeout\n\n\n    clearTimeout(resizeTimeridRef.current);\n    resizeTimeridRef.current = setTimeout(function () {\n      isResizingRef.current = false;\n\n      if (isMountedRef.current) {\n        setViewportState(\'resized\');\n      }\n    }, VIEWPORT_RESIZE_TIMEOUT);\n  }, []); // ----------------------------------[ calculate config values ]--------------------------------\n  // styles\n\n  var divlinerstyleRef = (0, react_1.useRef)(null); // initialize with inherited styles\n\n  divlinerstyleRef.current = (0, react_1.useMemo)(function () {\n    return Object.assign(Object.assign({}, styles.viewport), {\n      position: \'absolute\',\n      inset: 0,\n      overflow: \'auto\'\n    });\n  }, [styles.viewport]); // update viewportInterruptPropertiesRef; add viewport dimensions\n\n  viewportInterruptPropertiesRef.current = (0, react_1.useMemo)(function () {\n    if (viewportState == \'setup\') return viewportInterruptPropertiesRef.current;\n\n    var _viewportElementRef$c = viewportElementRef.current.getBoundingClientRect(),\n        top = _viewportElementRef$c.top,\n        right = _viewportElementRef$c.right,\n        bottom = _viewportElementRef$c.bottom,\n        left = _viewportElementRef$c.left;\n\n    var width = right - left;\n    var height = bottom - top; // this is a dimension update procedure for resize. \n    // See also interrupthandler.tsx cradleIntersectionObserverCallback for cradle intersection update\n\n    var localViewportData = {\n      viewportDimensions: {\n        top: top,\n        right: right,\n        bottom: bottom,\n        left: left,\n        width: width,\n        height: height\n      },\n      elementRef: viewportElementRef,\n      isResizing: isResizingRef.current\n    }; // trigger context change with new object\n\n    var viewportdataobject = Object.assign(Object.assign({}, viewportInterruptPropertiesRef.current), localViewportData);\n    return viewportdataobject;\n  }, [orientation, isResizingRef.current, viewportState]); // --------------------[ state processing ]---------------------------\n\n  (0, react_1.useLayoutEffect)(function () {\n    switch (viewportState) {\n      case \'resized\':\n      case \'setup\':\n        {\n          setViewportState(\'ready\');\n          break;\n        }\n    }\n  }, [viewportState]); // ----------------------[ render ]--------------------------------\n\n  return react_1["default"].createElement(exports.ViewportInterrupt.Provider, {\n    value: viewportInterruptPropertiesRef.current\n  }, react_1["default"].createElement("div", {\n    "data-type": \'viewport\',\n    "data-scrollerid": scrollerID,\n    style: divlinerstyleRef.current,\n    ref: viewportElementRef\n  }, viewportState != \'setup\' && children));\n}; // Viewport\n\n\nexports["default"] = Viewport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Viewport.tsx\n')},"./src/cellframe/Placeholder.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval(' // Placeholder.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    The role of the default PlaceHolder is to hold the content display until the host content\n    is received. The placeholder presents a waiting message, or an error message if the load\n    of the host content failed.\n\n    The default placeholder can be replaced by a placeholder provided by the host.\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\n\nvar Placeholder = function Placeholder(_ref) {\n  var index = _ref.index,\n      listsize = _ref.listsize,\n      message = _ref.message,\n      error = _ref.error,\n      userFrameStyles = _ref.userFrameStyles,\n      userContentStyles = _ref.userContentStyles;\n  var frameStylesRef = (0, react_1.useRef)(Object.assign(Object.assign({\n    border: \'2px solid black\',\n    backgroundColor: \'cyan\'\n  }, userFrameStyles), {\n    position: \'relative\',\n    boxSizing: \'border-box\',\n    height: \'100%\',\n    width: \'100%\'\n  }));\n  var contentStylesRef = (0, react_1.useRef)(Object.assign({\n    position: \'absolute\',\n    top: 0,\n    left: 0,\n    padding: \'3px\',\n    opacity: .5,\n    borderRadius: \'8px\',\n    backgroundColor: \'white\',\n    margin: \'3px\',\n    fontSize: \'smaller\'\n  }, userContentStyles));\n  message = message !== null && message !== void 0 ? message : \'(loading...)\';\n  return react_1["default"].createElement("div", {\n    style: frameStylesRef.current\n  }, !error ? react_1["default"].createElement("div", {\n    style: contentStylesRef.current\n  }, index + 1, "/", listsize, " ", message) : react_1["default"].createElement("div", {\n    style: contentStylesRef.current\n  }, "item is not available (", error.message, ")"));\n};\n\nexports["default"] = Placeholder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY2VsbGZyYW1lL1BsYWNlaG9sZGVyLnRzeC5qcyIsIm1hcHBpbmdzIjoiQ0FBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7Ozs7Ozs7QUFRQTs7QUFFQSxJQUFNQSxXQUFXLEdBQUcsU0FBZEEsV0FBYyxPQUEwRTtFQUFBLElBQXhFQyxLQUF3RSxRQUF4RUEsS0FBd0U7RUFBQSxJQUFqRUMsUUFBaUUsUUFBakVBLFFBQWlFO0VBQUEsSUFBdkRDLE9BQXVELFFBQXZEQSxPQUF1RDtFQUFBLElBQTlDQyxLQUE4QyxRQUE5Q0EsS0FBOEM7RUFBQSxJQUF2Q0MsZUFBdUMsUUFBdkNBLGVBQXVDO0VBQUEsSUFBdEJDLGlCQUFzQixRQUF0QkEsaUJBQXNCO0VBRTFGLElBQU1DLGNBQWMsR0FBRyxvQkFBTUM7SUFDekJDLE1BQU0sRUFBQyxpQkFEa0I7SUFFekJDLGVBQWUsRUFBQztFQUZTLEdBR3RCTCxlQUhzQixHQUdQO0lBQ2xCTSxRQUFRLEVBQUMsVUFEUztJQUVsQkMsU0FBUyxFQUFDLFlBRlE7SUFHbEJDLE1BQU0sRUFBQyxNQUhXO0lBSWxCQyxLQUFLLEVBQUM7RUFKWSxDQUhPLENBQU4sQ0FBdkI7RUFTQSxJQUFNQyxnQkFBZ0IsR0FBRyxvQkFBTVA7SUFDM0JHLFFBQVEsRUFBQyxVQURrQjtJQUUzQkssR0FBRyxFQUFDLENBRnVCO0lBRzNCQyxJQUFJLEVBQUMsQ0FIc0I7SUFJM0JDLE9BQU8sRUFBQyxLQUptQjtJQUszQkMsT0FBTyxFQUFDLEVBTG1CO0lBTTNCQyxZQUFZLEVBQUMsS0FOYztJQU8zQlYsZUFBZSxFQUFDLE9BUFc7SUFRM0JXLE1BQU0sRUFBQyxLQVJvQjtJQVMzQkMsUUFBUSxFQUFDO0VBVGtCLEdBVXhCaEIsaUJBVndCLENBQU4sQ0FBekI7RUFhQUgsT0FBTyxHQUFHQSxPQUFPLFNBQVAsV0FBTyxXQUFQLGFBQVcsY0FBckI7RUFFQSxPQUFPb0I7SUFBS0MsS0FBSyxFQUFJakIsY0FBYyxDQUFDa0I7RUFBN0IsR0FDRCxDQUFDckIsS0FBRCxHQUNFbUI7SUFBS0MsS0FBSyxFQUFLVCxnQkFBZ0IsQ0FBQ1U7RUFBaEMsR0FBMkN4QixLQUFLLEdBQUcsQ0FBbkQsT0FBdURDLFFBQXZELE9BQWtFQyxPQUFsRSxDQURGLEdBRUVvQjtJQUFLQyxLQUFLLEVBQUtULGdCQUFnQixDQUFDVTtFQUFoQyw4QkFBa0VyQixLQUFLLENBQUNELE9BQXhFLE1BSEQsQ0FBUDtBQU9ILENBakNEOztBQW1DQXVCLGtCQUFBQSxHQUFlMUIsV0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvY2VsbGZyYW1lL1BsYWNlaG9sZGVyLnRzeD9iYjM0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFBsYWNlaG9sZGVyLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDE5LTIwMjIgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuLypcbiAgICBUaGUgcm9sZSBvZiB0aGUgZGVmYXVsdCBQbGFjZUhvbGRlciBpcyB0byBob2xkIHRoZSBjb250ZW50IGRpc3BsYXkgdW50aWwgdGhlIGhvc3QgY29udGVudFxuICAgIGlzIHJlY2VpdmVkLiBUaGUgcGxhY2Vob2xkZXIgcHJlc2VudHMgYSB3YWl0aW5nIG1lc3NhZ2UsIG9yIGFuIGVycm9yIG1lc3NhZ2UgaWYgdGhlIGxvYWRcbiAgICBvZiB0aGUgaG9zdCBjb250ZW50IGZhaWxlZC5cblxuICAgIFRoZSBkZWZhdWx0IHBsYWNlaG9sZGVyIGNhbiBiZSByZXBsYWNlZCBieSBhIHBsYWNlaG9sZGVyIHByb3ZpZGVkIGJ5IHRoZSBob3N0LlxuKi9cblxuaW1wb3J0IFJlYWN0LCB7dXNlUmVmIH0gZnJvbSAncmVhY3QnXG5cbmNvbnN0IFBsYWNlaG9sZGVyID0gKHtpbmRleCwgbGlzdHNpemUsIG1lc3NhZ2UsIGVycm9yLCB1c2VyRnJhbWVTdHlsZXMsIHVzZXJDb250ZW50U3R5bGVzfSkgPT4ge1xuXG4gICAgY29uc3QgZnJhbWVTdHlsZXNSZWYgPSB1c2VSZWYoe1xuICAgICAgICBib3JkZXI6JzJweCBzb2xpZCBibGFjaycsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjonY3lhbicsXG4gICAgICAgIC4uLnVzZXJGcmFtZVN0eWxlcyxcbiAgICAgICAgcG9zaXRpb246J3JlbGF0aXZlJyxcbiAgICAgICAgYm94U2l6aW5nOidib3JkZXItYm94JyxcbiAgICAgICAgaGVpZ2h0OicxMDAlJyxcbiAgICAgICAgd2lkdGg6JzEwMCUnLFxuICAgIH0pXG4gICAgY29uc3QgY29udGVudFN0eWxlc1JlZiA9IHVzZVJlZih7XG4gICAgICAgIHBvc2l0aW9uOidhYnNvbHV0ZScsXG4gICAgICAgIHRvcDowLFxuICAgICAgICBsZWZ0OjAsXG4gICAgICAgIHBhZGRpbmc6JzNweCcsXG4gICAgICAgIG9wYWNpdHk6LjUsXG4gICAgICAgIGJvcmRlclJhZGl1czonOHB4JyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOid3aGl0ZScsIFxuICAgICAgICBtYXJnaW46JzNweCcsXG4gICAgICAgIGZvbnRTaXplOidzbWFsbGVyJyxcbiAgICAgICAgLi4udXNlckNvbnRlbnRTdHlsZXMsXG4gICAgfSlcblxuICAgIG1lc3NhZ2UgPSBtZXNzYWdlID8/ICcobG9hZGluZy4uLiknXG5cbiAgICByZXR1cm4gPGRpdiBzdHlsZSA9IHtmcmFtZVN0eWxlc1JlZi5jdXJyZW50fT5cbiAgICAgICAgeyAhZXJyb3I/XG4gICAgICAgICAgICA8ZGl2IHN0eWxlID0geyBjb250ZW50U3R5bGVzUmVmLmN1cnJlbnQgfT57aW5kZXggKyAxfS97bGlzdHNpemV9IHttZXNzYWdlfTwvZGl2PjpcbiAgICAgICAgICAgIDxkaXYgc3R5bGUgPSB7IGNvbnRlbnRTdHlsZXNSZWYuY3VycmVudCB9Pml0ZW0gaXMgbm90IGF2YWlsYWJsZSAoe2Vycm9yLm1lc3NhZ2V9KTwvZGl2PlxuICAgICAgICB9XG4gICAgICAgIFxuICAgIDwvZGl2PlxufVxuXG5leHBvcnQgZGVmYXVsdCBQbGFjZWhvbGRlciJdLCJuYW1lcyI6WyJQbGFjZWhvbGRlciIsImluZGV4IiwibGlzdHNpemUiLCJtZXNzYWdlIiwiZXJyb3IiLCJ1c2VyRnJhbWVTdHlsZXMiLCJ1c2VyQ29udGVudFN0eWxlcyIsImZyYW1lU3R5bGVzUmVmIiwiT2JqZWN0IiwiYm9yZGVyIiwiYmFja2dyb3VuZENvbG9yIiwicG9zaXRpb24iLCJib3hTaXppbmciLCJoZWlnaHQiLCJ3aWR0aCIsImNvbnRlbnRTdHlsZXNSZWYiLCJ0b3AiLCJsZWZ0IiwicGFkZGluZyIsIm9wYWNpdHkiLCJib3JkZXJSYWRpdXMiLCJtYXJnaW4iLCJmb250U2l6ZSIsInJlYWN0XzEiLCJzdHlsZSIsImN1cnJlbnQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cellframe/Placeholder.tsx\n')},"./src/cradle/ScrollTracker.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval(' // scrolltracker.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    The role of ScrollTracker is to provide feedback to the user of the relative position in the\n    virtual list during repositiong.\n\n    ScrollTracker can be suppressed by the host (in favour of the host\'s own location feedback)\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\n\nvar ScrollTracker = function ScrollTracker(_ref) {\n  var top = _ref.top,\n      left = _ref.left,\n      offset = _ref.offset,\n      listsize = _ref.listsize,\n      styles = _ref.styles;\n  var trackdata = "".concat(offset + 1, "/").concat(listsize);\n  var styleRef = (0, react_1.useRef)(Object.assign({\n    top: top + \'px\',\n    left: left + \'px\',\n    position: \'fixed\',\n    zIndex: 3,\n    backgroundColor: \'white\',\n    border: \'1px solid gray\',\n    borderRadius: \'10px\',\n    fontSize: \'smaller\',\n    padding: \'3px\'\n  }, styles.scrolltracker));\n  return react_1["default"].createElement("div", {\n    "data-name": \'scrolltracker\',\n    style: styleRef.current\n  }, trackdata);\n};\n\nexports["default"] = ScrollTracker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL1Njcm9sbFRyYWNrZXIudHN4LmpzIiwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOzs7Ozs7O0FBT0E7O0FBRUEsSUFBTUEsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixPQUE0QztFQUFBLElBQXpDQyxHQUF5QyxRQUF6Q0EsR0FBeUM7RUFBQSxJQUFwQ0MsSUFBb0MsUUFBcENBLElBQW9DO0VBQUEsSUFBOUJDLE1BQThCLFFBQTlCQSxNQUE4QjtFQUFBLElBQXRCQyxRQUFzQixRQUF0QkEsUUFBc0I7RUFBQSxJQUFaQyxNQUFZLFFBQVpBLE1BQVk7RUFFOUQsSUFBSUMsU0FBUyxhQUFNSCxNQUFNLEdBQUcsQ0FBZixjQUFvQkMsUUFBcEIsQ0FBYjtFQUVBLElBQUlHLFFBQVEsR0FBRyxvQkFBTUM7SUFDakJQLEdBQUcsRUFBRUEsR0FBRyxHQUFHLElBRE07SUFFakJDLElBQUksRUFBRUEsSUFBSSxHQUFHLElBRkk7SUFHakJPLFFBQVEsRUFBQyxPQUhRO0lBSWpCQyxNQUFNLEVBQUMsQ0FKVTtJQUtqQkMsZUFBZSxFQUFDLE9BTEM7SUFNakJDLE1BQU0sRUFBRSxnQkFOUztJQU9qQkMsWUFBWSxFQUFDLE1BUEk7SUFRakJDLFFBQVEsRUFBQyxTQVJRO0lBU2pCQyxPQUFPLEVBQUM7RUFUUyxHQVVkVixNQUFNLENBQUNXLGFBVk8sQ0FBTixDQUFmO0VBYUEsT0FBT0M7SUFBQSxhQUFpQixlQUFqQjtJQUFpQ0MsS0FBSyxFQUFJWCxRQUFRLENBQUNZO0VBQW5ELEdBQThEYixTQUE5RCxDQUFQO0FBQ0gsQ0FsQkQ7O0FBb0JBYyxrQkFBQUEsR0FBZXBCLGFBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vc3JjL2NyYWRsZS9TY3JvbGxUcmFja2VyLnRzeD8wYjNjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNjcm9sbHRyYWNrZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMTktMjAyMiBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG4vKlxuICAgIFRoZSByb2xlIG9mIFNjcm9sbFRyYWNrZXIgaXMgdG8gcHJvdmlkZSBmZWVkYmFjayB0byB0aGUgdXNlciBvZiB0aGUgcmVsYXRpdmUgcG9zaXRpb24gaW4gdGhlXG4gICAgdmlydHVhbCBsaXN0IGR1cmluZyByZXBvc2l0aW9uZy5cblxuICAgIFNjcm9sbFRyYWNrZXIgY2FuIGJlIHN1cHByZXNzZWQgYnkgdGhlIGhvc3QgKGluIGZhdm91ciBvZiB0aGUgaG9zdCdzIG93biBsb2NhdGlvbiBmZWVkYmFjaylcbiovXG5cbmltcG9ydCBSZWFjdCwge3VzZVJlZn0gZnJvbSAncmVhY3QnXG5cbmNvbnN0IFNjcm9sbFRyYWNrZXIgPSAoeyB0b3AsIGxlZnQsIG9mZnNldCwgbGlzdHNpemUsIHN0eWxlcyB9KSA9PiB7XG5cbiAgICBsZXQgdHJhY2tkYXRhID0gYCR7b2Zmc2V0ICsgMX0vJHtsaXN0c2l6ZX1gXG5cbiAgICBsZXQgc3R5bGVSZWYgPSB1c2VSZWYoe1xuICAgICAgICB0b3A6IHRvcCArICdweCcsXG4gICAgICAgIGxlZnQ6IGxlZnQgKyAncHgnLFxuICAgICAgICBwb3NpdGlvbjonZml4ZWQnLFxuICAgICAgICB6SW5kZXg6MyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOid3aGl0ZScsXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCBncmF5JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOicxMHB4JyxcbiAgICAgICAgZm9udFNpemU6J3NtYWxsZXInLFxuICAgICAgICBwYWRkaW5nOiczcHgnLFxuICAgICAgICAuLi5zdHlsZXMuc2Nyb2xsdHJhY2tlclxuICAgIH0pXG5cbiAgICByZXR1cm4gPGRpdiBkYXRhLW5hbWUgPSAnc2Nyb2xsdHJhY2tlcicgc3R5bGUgPSB7c3R5bGVSZWYuY3VycmVudH0gPnt0cmFja2RhdGF9PC9kaXY+XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbFRyYWNrZXIiXSwibmFtZXMiOlsiU2Nyb2xsVHJhY2tlciIsInRvcCIsImxlZnQiLCJvZmZzZXQiLCJsaXN0c2l6ZSIsInN0eWxlcyIsInRyYWNrZGF0YSIsInN0eWxlUmVmIiwiT2JqZWN0IiwicG9zaXRpb24iLCJ6SW5kZXgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXIiLCJib3JkZXJSYWRpdXMiLCJmb250U2l6ZSIsInBhZGRpbmciLCJzY3JvbGx0cmFja2VyIiwicmVhY3RfMSIsInN0eWxlIiwiY3VycmVudCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/cradle/ScrollTracker.tsx\n')},"./src/cradle/cachehandler.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval(' // cachehandler.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'throw\' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.PortalList = exports.CacheHandler = void 0;\n/*\n    This module manages the InfiniteGridScroller limited (sparse) cache. It also provides support for\n    services which allow the host to actively manage many aspects of the cache. See documentation\n    about the user getFunctions callback for details. Note that large caches of complex components\n    can impair performance. This can be optimized with the cacheMax property.\n\n    The infinite grid scroller stores user cell content (components) in a central hidden portal cache\n    for each InfiniteGridScroller root, from whence the components are pulled into the relevant CellFrames\n    for display. The user components are stored in React portals, with each portal instantiated in\n    a container div (\'portalwrapper\'). These container divs are included in a standard React component\n    list in the real DOM. The contained portals themselves are not part of the real DOM, but are part of\n    React\'s virtual DOM.\n\n    See https://reactjs.org/docs/portals.html for general information about React portals.\n    See https://www.npmjs.com/package/react-reverse-portal for the utility that InfiniteGridScroller\n    uses to manage portals.\n\n    This caching has many advantages, notably the ability to move cells back and forth between the\n    head and tail grids of the Cradle, and the ability to maintain state for complex components\n    which move beyond the scope of the content of the Cradle. But there is an important side effect.\n    Instantiated components which are removed from the real DOM (into the portal of the virtual DOM)\n    have their scroll positions, width, and height set to zero. Therefore if components rely on these\n    values for configuration, they must have a way of storing values in state (notably the\n    Scroll Pos - scrollLeft or scrollTop), recognizing when the component comes out of the portal cache\n    into the real DOM (width and height are typically no longer both 0), and responding to change in\n    cache state appropriately.\n\n    Tips:\n        - your component is in cache when both width and height = 0\n        - your component is out of cache when both width and height are back to normal\n        - if you create an empty \'scrollerProperties\' property for your component, CellFrame will\n            set it to an object containing isReparentingRef and scrollerPassthroughPropertiesRef\n        - isReparentingRef.current provides an up-to-date boolean indicating whether the component is\n            currently being \'reparented\' into the real DOM. Set the value back to false once you\'ve\n            detected it. After reparenting (after the width and height are back to normal) is when\n            you should restore scrollPos (scrollTop or scrollLeft) to what it was.\n        - if your component does not scroll, there should be no issues.\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react"));\n\nvar react_reverse_portal_1 = __webpack_require__(/*! react-reverse-portal */ "./node_modules/react-reverse-portal/dist/web/index.js");\n\nvar globalItemID = 0; // global scroller data, organized by session scrollerID\n// the cache itself is maintained in the root infinitegridscroller component\n\nvar CacheHandler = /*#__PURE__*/function () {\n  function CacheHandler(scrollerID, setListsize, listsizeRef) {\n    var _this = this;\n\n    _classCallCheck(this, CacheHandler);\n\n    this.cacheProps = {\n      setListState: null,\n      modified: false,\n      metadataMap: new Map(),\n      // some portals may have been requested by requestidlecallback, not yet created\n      requestedSet: new Set(),\n      portalMap: new Map(),\n      indexToItemIDMap: new Map(),\n      portalList: null,\n      scrollerID: null\n    }; //===========================[ REPOSITORY AND LIST MANAGEMENT ]==================================\n    // ----------------------------[ basic operations ]--------------------------\n\n    this.changeListsize = function (newlistsize, deleteListCallback, changeListsizeCallback) {\n      _this.setListsize(newlistsize); // match cache to newlistsize\n\n\n      var portalIndexMap = _this.cacheProps.indexToItemIDMap;\n      var mapkeysList = Array.from(portalIndexMap.keys());\n      mapkeysList.sort(function (a, b) {\n        return a - b;\n      });\n      var highestindex = mapkeysList.at(-1);\n\n      if (highestindex > newlistsize - 1) {\n        // pare the cache\n        var parelist = mapkeysList.filter(function (index) {\n          return index > newlistsize - 1;\n        });\n\n        _this.deletePortal(parelist, deleteListCallback);\n      }\n\n      changeListsizeCallback && changeListsizeCallback(newlistsize);\n    };\n\n    this.clearCache = function () {\n      // keep the setListState callback\n      _this.cacheProps.portalMap.clear();\n\n      _this.cacheProps.metadataMap.clear();\n\n      _this.cacheProps.indexToItemIDMap.clear();\n\n      _this.cacheProps.requestedSet.clear();\n\n      _this.cacheProps.portalList = null;\n      _this.cacheProps.modified = true;\n\n      _this.renderPortalList(); // trigger display update\n\n    }; // set state of the PortalList component of the scroller to trigger render\n\n\n    this.renderPortalList = function () {\n      if (_this.cacheProps.modified) {\n        _this.cacheProps.portalList = Array.from(_this.cacheProps.portalMap.values());\n        _this.cacheProps.modified = false;\n      }\n\n      _this.cacheProps.setListState(); // trigger display update\n\n    }; // ----------------------[ cache size limit enforceent ]------------------\n\n\n    this.matchCacheToCradle = function (cradleIndexList, deleteListCallback) {\n      var mapkeys = Array.from(_this.cacheProps.indexToItemIDMap.keys());\n      var delkeys = mapkeys.filter(function (key) {\n        return !cradleIndexList.includes(key);\n      });\n\n      if (delkeys.length) {\n        _this.deletePortal(delkeys, deleteListCallback);\n\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.pareCacheToMax = function (cacheMax, cradleIndexList, deleteListCallback) {\n      var scrollerID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n      var modelLength = cradleIndexList.length; // determine need for paring\n\n      if (!cacheMax || !modelLength) return false;\n      var max = Math.max(modelLength, cacheMax);\n      var portalIndexList = _this.cacheProps.indexToItemIDMap;\n      var requestedSet = _this.cacheProps.requestedSet;\n      if (portalIndexList.size + requestedSet.size <= max) return false; // sort the map keys\n\n      var mapkeyslist = Array.from(portalIndexList.keys());\n      var requestedkeys = Array.from(requestedSet.keys());\n      var mapkeys = [].concat(mapkeyslist, requestedkeys);\n      mapkeys.sort(function (a, b) {\n        return a - b;\n      }); // get number to pare\n\n      var mapLength = mapkeys.length;\n      var parecount = mapLength - max; // distribute paring proportionally at front and back\n\n      var headindex = cradleIndexList[0];\n      var tailindex = cradleIndexList[modelLength - 1];\n      var headpos = mapkeys.indexOf(headindex);\n      var tailpos = mapkeys.indexOf(tailindex);\n      var headroom = headpos;\n      var tailroom = mapLength - (tailpos + 1);\n      var pareroom = headroom + tailroom;\n      var headparecount = Math.floor(headroom / pareroom * parecount);\n      var tailparecount = parecount - headparecount; // collect indexes to pare\n\n      var headlist = mapkeys.slice(0, headparecount);\n      var taillist = mapkeys.slice(mapLength - tailparecount);\n      var delList = [].concat(_toConsumableArray(headlist), _toConsumableArray(taillist));\n\n      _this.deletePortal(delList, deleteListCallback);\n\n      return true;\n    };\n\n    this.guardAgainstRunawayCaching = function (cacheMax, cradleListLength, MAX_CACHE_OVER_RUN) {\n      if (!cacheMax) return false;\n      var portalMap = _this.cacheProps.portalMap;\n      var requestedSet = _this.cacheProps.requestedSet;\n      var max = Math.max(cradleListLength, cacheMax);\n\n      if (portalMap.size + requestedSet.size <= max * MAX_CACHE_OVER_RUN) {\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    this.cacheProps.scrollerID = scrollerID;\n    this.setListsize = setListsize; // passed from infinitegridscroller setListsize(listsize)\n\n    this.listsizeRef = listsizeRef;\n  } // --------------------------------[ preload ]--------------------------------\n\n\n  _createClass(CacheHandler, [{\n    key: "preload",\n    value: function preload(cradleParameters, finalCallback, nullItemSetMaxListsize, scrollerID) {\n      var _this2 = this;\n\n      var scrollerPassthroughPropertiesRef = cradleParameters.scrollerPassthroughPropertiesRef;\n      var _cradleParameters$han = cradleParameters.handlersRef.current,\n          stateHandler = _cradleParameters$han.stateHandler,\n          serviceHandler = _cradleParameters$han.serviceHandler;\n      var cradleInheritedProperties = cradleParameters.cradleInheritedPropertiesRef.current;\n      var cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n      var getItem = cradleInheritedProperties.getItem,\n          cacheMax = cradleInheritedProperties.cacheMax;\n      var listsize = cradleInternalProperties.listsize;\n      var promises = [];\n      var cacheSize = cacheMax !== null && cacheMax !== void 0 ? cacheMax : 0;\n      cacheSize = Math.min(cacheSize, listsize);\n      var preloadsize = cacheSize ? cacheSize : listsize;\n      var breakloop = {\n        current: false\n      };\n\n      var maxListsizeInterrupt = function maxListsizeInterrupt(index) {\n        breakloop.current = true;\n        nullItemSetMaxListsize(index);\n      }; // serviceHandler.callbacks.preloadIndexCallback\n\n\n      if (stateHandler.isMountedRef.current) {\n        var indexToItemIDMap = this.cacheProps.indexToItemIDMap;\n        var _serviceHandler$callb = serviceHandler.callbacks,\n            preloadIndexCallback = _serviceHandler$callb.preloadIndexCallback,\n            itemExceptionsCallback = _serviceHandler$callb.itemExceptionsCallback;\n\n        for (var index = 0; index < preloadsize; index++) {\n          preloadIndexCallback && preloadIndexCallback(index);\n\n          if (!indexToItemIDMap.has(index)) {\n            var promise = this.preloadItem(index, getItem, scrollerPassthroughPropertiesRef, itemExceptionsCallback, maxListsizeInterrupt, scrollerID);\n            promises.push(promise);\n          }\n\n          if (breakloop.current) break;\n        }\n      }\n\n      Promise.allSettled(promises).then(function () {\n        _this2.cacheProps.modified = true;\n\n        _this2.renderPortalList();\n\n        finalCallback();\n      });\n    } // =========================[ SNAPSHOTS ]=========================\n\n  }, {\n    key: "getCacheIndexMap",\n    value: function getCacheIndexMap() {\n      return new Map(this.cacheProps.indexToItemIDMap);\n    }\n  }, {\n    key: "getCradleIndexMap",\n    value: function getCradleIndexMap(cradleIndexList) {\n      var cradleMap = new Map();\n      var indexToItemIDMap = this.cacheProps.indexToItemIDMap;\n\n      var _iterator = _createForOfIteratorHelper(cradleIndexList),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var index = _step.value;\n          cradleMap.set(index, indexToItemIDMap.get(index));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return cradleMap;\n    }\n  }, {\n    key: "getCacheItemMap",\n    value: function getCacheItemMap() {\n      var cachelist = new Map();\n\n      var _iterator2 = _createForOfIteratorHelper(this.cacheProps.metadataMap),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              key = _step2$value[0],\n              value = _step2$value[1];\n\n          var index = value.index,\n              component = value.component;\n          cachelist.set(key, {\n            index: index,\n            component: component\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return cachelist;\n    } // ==========================[ SERVICE SUPPORT ]=========================\n    // move is coerced by servicehandler to be within current list bounds\n\n  }, {\n    key: "moveIndex",\n    value: function moveIndex(toindex, fromindex, fromhighindex) {\n      var _this$cacheProps = this.cacheProps,\n          indexToItemIDMap = _this$cacheProps.indexToItemIDMap,\n          metadataMap = _this$cacheProps.metadataMap; // ----------- define parameters ---------------\n\n      var rangeabsoluteincrement = fromhighindex - fromindex + 1;\n      var movedirectionalincrement = toindex - fromindex;\n      var tohighindex = toindex + (rangeabsoluteincrement - 1);\n      var shiftdirection = movedirectionalincrement > 0 ? // move up in list\n      -1 : // shift down, make room for shiftingindex above\n      1; // shift up, make room for shiftingindex below\n\n      var orderedindexlist = Array.from(indexToItemIDMap.keys());\n      orderedindexlist.sort(function (a, b) {\n        return a - b;\n      });\n      var toindexptr = orderedindexlist.findIndex(function (value) {\n        return value >= toindex;\n      });\n      var tohighindexptr = orderedindexlist.findIndex(function (value) {\n        return value >= tohighindex;\n      });\n      var fromindexptr = orderedindexlist.findIndex(function (value) {\n        return value >= fromindex;\n      });\n      var fromhighindexptr = orderedindexlist.findIndex(function (value) {\n        return value >= fromhighindex;\n      }); // ---------------- capture index data to move ----------------\n\n      var processtomoveList;\n\n      if (fromindexptr == -1 && fromhighindexptr == -1) {\n        // scope is out of view\n        processtomoveList = [];\n      } else if (fromhighindexptr == -1) {\n        // scope is partially in view\n        processtomoveList = orderedindexlist.slice(fromindexptr);\n      } else {\n        // scope is entirely in view\n        processtomoveList = orderedindexlist.slice(fromindexptr, fromhighindexptr + 1);\n      }\n\n      var processtomoveMap = new Map();\n\n      var capturemoveindex = function capturemoveindex(index) {\n        processtomoveMap.set(index, indexToItemIDMap.get(index));\n      };\n\n      processtomoveList.forEach(capturemoveindex); // ------------- get list of indexes to shift out of the way ---------------\n\n      var processtoshiftList;\n\n      if (shiftdirection == 1) {\n        // block is moving down, shift is up; toindex < fromindex\n        if (toindexptr == -1 && fromindexptr == -1) {\n          processtoshiftList = [];\n        } else if (fromindexptr == -1) {\n          processtoshiftList = orderedindexlist.slice(toindexptr);\n        } else {\n          processtoshiftList = orderedindexlist.slice(toindexptr, fromindexptr);\n        }\n      } else {\n        // shiftdirection == -1; block is moving up, shift is down; fromindex < toindex\n        if (tohighindexptr == -1 && fromhighindexptr == -1) {\n          processtoshiftList = [];\n        } else if (tohighindexptr == -1) {\n          processtoshiftList = orderedindexlist.slice(fromhighindexptr + 1);\n        } else {\n          processtoshiftList = orderedindexlist.slice(fromhighindexptr + 1, tohighindexptr + 1);\n        }\n      }\n\n      if (shiftdirection == 1) processtoshiftList.reverse(); // -------------- move indexes out of the way --------------\n\n      var processedshiftList = [];\n\n      var processshiftindex = function processshiftindex(index) {\n        var itemID = indexToItemIDMap.get(index);\n        var newIndex = shiftdirection == -1 ? index - rangeabsoluteincrement : index + rangeabsoluteincrement;\n        indexToItemIDMap.set(newIndex, itemID);\n        metadataMap.get(itemID).index = newIndex;\n        processedshiftList.push(newIndex);\n      };\n\n      processtoshiftList.forEach(processshiftindex); // ------------ replace shifted index space with moved indexes ----------\n\n      var processedmoveList = [];\n\n      var processmoveindex = function processmoveindex(itemID, index) {\n        var newIndex = index + movedirectionalincrement; // swap\n\n        indexToItemIDMap.set(newIndex, itemID);\n        metadataMap.get(itemID).index = newIndex;\n        processedmoveList.push(newIndex);\n      };\n\n      processtomoveMap.forEach(processmoveindex); // -----------return list of processed indexes to caller --------\n      // for synchrnization with cradle cellFrames\n\n      var processedIndexes = [].concat(processedshiftList, processedmoveList);\n      return processedIndexes;\n    } // insert or remove indexes: much of this deals with the fact that the cache is sparse.\n\n  }, {\n    key: "insertRemoveIndex",\n    value: function insertRemoveIndex(index, highrange, increment, listsize) {\n      var _this$cacheProps2 = this.cacheProps,\n          indexToItemIDMap = _this$cacheProps2.indexToItemIDMap,\n          metadataMap = _this$cacheProps2.metadataMap,\n          portalMap = _this$cacheProps2.portalMap; // ---------- define range parameters ---------------\n      // high range is the highest index number of the insert/remove operation\n\n      var highrangeindex = highrange !== null && highrange !== void 0 ? highrange : 0;\n      highrangeindex = highrangeindex > index ? highrangeindex : index;\n      var emptyreturn = [[], [], 0];\n\n      if (increment == -1) {\n        // removal must be entirely within scope of the list\n        if (highrangeindex > listsize - 1) return emptyreturn;\n      } else {\n        // addition can at most start at the next index above the current list\n        if (index > listsize) return emptyreturn;\n      } // rangecount is the absolute number in the insert/remove range - contiguous\n\n\n      var rangecount = highrangeindex - index + 1; // range increment adds sign to rangecount to indicate add/remove\n\n      var rangeincrement = rangecount * increment; // highPtr, lowPtr, shrinktoPtr within orderedIndexList.\n\n      var orderedIndexList = Array.from(indexToItemIDMap.keys());\n      orderedIndexList.sort(function (a, b) {\n        return a - b;\n      }); // ---------- define boundaries within ordered cache index list ------------\n      // Ptr = index into array, as opposed to index of virtual list\n      // shrinkptr is the location of the bottom of the shrink range for removals\n\n      var shrinktoIndex = null;\n      var shrinktoPtr = -1;\n\n      if (increment == -1) {\n        shrinktoIndex = orderedIndexList.at(-1) + rangeincrement;\n        shrinktoIndex = Math.max(highrangeindex + rangeincrement, shrinktoIndex);\n        shrinktoIndex = Math.min(listsize - 1, shrinktoIndex);\n        shrinktoPtr = orderedIndexList.findIndex(function (value) {\n          return value >= shrinktoIndex;\n        });\n      } // lowPtr and highPtr must be within low and high range\n\n\n      var lowPtr = orderedIndexList.findIndex(function (value) {\n        return value >= index && value <= highrangeindex;\n      });\n      var reverseIndexList = Array.from(orderedIndexList);\n      reverseIndexList.reverse();\n      var highPtr = reverseIndexList.findIndex(function (value) {\n        return value <= highrangeindex;\n      });\n\n      if (highPtr != -1) {\n        highPtr = orderedIndexList.length - 1 - highPtr;\n        if (highPtr < lowPtr) highPtr = -1;\n      } // ----------- list indexes to process, replace, and remove, and items to remove --------\n\n\n      var indexesToProcessList,\n          // for either insert or remove\n      indexesToReplaceList = [],\n          // for insert the range being inserted\n      indexesToRemoveList = [],\n          // for remove - end of list; the list is shrinking\n      indexesOfItemsToRemoveList = [],\n          // for remove - within the range of indexes being removed\n      itemsToRemoveList = []; // for remove, derived from the previous\n      // get indexesToProcessList\n\n      if (lowPtr == -1 && highPtr == -1) {\n        // core scope is out of view\n        indexesToProcessList = [];\n      } else {\n        // core scope is partially or fully in view; lowPtr is available\n        if (increment == 1) {\n          indexesToProcessList = orderedIndexList.slice(lowPtr);\n        } else if (highPtr == -1) {\n          // increment == -1; lowPtr is available\n          indexesToProcessList = [];\n        } else {\n          // increment == -1; lowPtr and highPtr are available\n          indexesToProcessList = orderedIndexList.slice(highPtr + 1);\n        }\n      }\n\n      var portalHoldList = []; // hold portals for deletion until after after cradle synch\n\n      if (increment == 1) {\n        // get indexesToReplaceList\n        if (lowPtr == -1 && highPtr == -1) {\n          // core scope is out of view\n          indexesToReplaceList = [];\n        } else if (highPtr == -1) {\n          indexesToReplaceList = orderedIndexList.slice(lowPtr);\n        } else {\n          indexesToReplaceList = orderedIndexList.slice(lowPtr, highPtr + 1);\n        }\n      } else {\n        // get indexesToRemoveList\n        if (shrinktoPtr == -1) {\n          // core scope is out of view\n          indexesToRemoveList = [];\n        } else {\n          indexesToRemoveList = orderedIndexList.slice(shrinktoPtr + 1);\n        } // get indexesOfItemsToRemoveList\n\n\n        if (lowPtr == -1 && highPtr == -1) {\n          // core scope is out of view\n          indexesOfItemsToRemoveList = [];\n        } else if (highPtr == -1) {\n          indexesOfItemsToRemoveList = orderedIndexList.slice(lowPtr);\n        } else {\n          indexesOfItemsToRemoveList = orderedIndexList.slice(lowPtr, highPtr + 1);\n        } // get itemsToRemoveList\n\n\n        var _iterator3 = _createForOfIteratorHelper(indexesOfItemsToRemoveList),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _index = _step3.value;\n            itemsToRemoveList.push(indexToItemIDMap.get(_index));\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } // ----------- conduct cache operations ----------\n      // increment higher from top of list to preserve lower values for subsequent increment\n\n\n      if (increment == 1) indexesToProcessList.reverse();\n      var indexesModifiedList = []; // modify index-to-itemid map, and metadata map\n\n      var processIndex = function processIndex(index) {\n        var itemID = indexToItemIDMap.get(index);\n        var newIndex = index + rangeincrement;\n        indexToItemIDMap.set(newIndex, itemID);\n        metadataMap.get(itemID).index = newIndex;\n        indexesModifiedList.push(newIndex);\n      };\n\n      indexesToProcessList.forEach(processIndex); // delete remaining indexes and items now duplicates\n\n      if (increment == 1) {\n        var _iterator4 = _createForOfIteratorHelper(indexesToReplaceList),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _index2 = _step4.value;\n            indexToItemIDMap["delete"](_index2);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      } else {\n        var _iterator5 = _createForOfIteratorHelper(indexesToRemoveList),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _index3 = _step5.value;\n            indexToItemIDMap["delete"](_index3);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        var _iterator6 = _createForOfIteratorHelper(itemsToRemoveList),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var itemID = _step6.value;\n            metadataMap["delete"](itemID);\n            portalHoldList.push(itemID);\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      } // --------------- returns ---------------\n      // return values for caller to send to contenthandler for cradle synchronization\n\n\n      return [indexesModifiedList, indexesToReplaceList, rangeincrement, portalHoldList];\n    } // ==========================[ INDIVIDUAL PORTAL MANAGEMENT ]============================\n    // used for size calculation in pareCacheToMax\n    // registers indexes when requested but before retrieved and entered into cache\n\n  }, {\n    key: "registerRequestedPortal",\n    value: function registerRequestedPortal(index) {\n      this.cacheProps.requestedSet.add(index);\n    }\n  }, {\n    key: "removeRequestedPortal",\n    value: function removeRequestedPortal(index) {\n      this.cacheProps.requestedSet["delete"](index);\n    }\n  }, {\n    key: "getNewItemID",\n    value: function getNewItemID() {\n      return globalItemID++;\n    } // get new or existing itemID for contentfunctions.createCellFrame\n\n  }, {\n    key: "getNewOrExistingItemID",\n    value: function getNewOrExistingItemID(index) {\n      var indexToItemIDMap = this.cacheProps.indexToItemIDMap;\n      var itemID = indexToItemIDMap.has(index) ? indexToItemIDMap.get(index) : this.getNewItemID();\n      return itemID;\n    } // create new portal\n\n  }, {\n    key: "createPortal",\n    value: function createPortal(component, index, itemID) {\n      var isPreload = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      this.removeRequestedPortal(index);\n      var layout = this.cradleParameters.cradleInheritedPropertiesRef.current.layout;\n      var portalNode = createPortalNode(index, itemID, layout); // div wrapper to avoid memory leak\n\n      this.cacheProps.portalMap.set(itemID, react_1["default"].createElement("div", {\n        "data-type": \'portalwrapper\',\n        key: itemID,\n        "data-itemid": itemID,\n        "data-index": index\n      }, react_1["default"].createElement(react_reverse_portal_1.InPortal, {\n        key: itemID,\n        node: portalNode\n      }, " ", component, " ")));\n      this.cacheProps.modified = true;\n      var portalMetadata = {\n        portalNode: portalNode,\n        isReparentingRef: {\n          current: false\n        },\n        index: index,\n        itemID: itemID,\n        component: component\n      };\n      this.cacheProps.metadataMap.set(itemID, portalMetadata);\n      this.cacheProps.indexToItemIDMap.set(index, itemID);\n      if (!isPreload) this.renderPortalList();\n      return portalMetadata;\n    } // used for preloading new item\n\n  }, {\n    key: "preloadItem",\n    value: function preloadItem(index, getItem, scrollerPassthroughPropertiesRef, itemExceptionsCallback, maxListsizeInterrupt, scrollerID) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var itemID, returnvalue, usercontent, error, content, scrollerProperties, portalData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                itemID = this.getNewItemID();\n                _context.prev = 1;\n                _context.next = 4;\n                return getItem(index, itemID);\n\n              case 4:\n                usercontent = _context.sent;\n                if (usercontent === null) returnvalue = usercontent;\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context["catch"](1);\n                returnvalue = usercontent = undefined;\n                error = _context.t0;\n\n              case 12:\n                if (usercontent !== null && usercontent !== undefined) {\n                  if (!react_1["default"].isValidElement(usercontent)) {\n                    returnvalue = usercontent;\n                    usercontent = undefined;\n                    error = new Error(\'invalid React element\');\n                  }\n                }\n\n                if (usercontent !== null && usercontent !== undefined) {\n                  scrollerProperties = {\n                    isReparentingRef: null,\n                    scrollerPassthroughPropertiesRef: scrollerPassthroughPropertiesRef\n                  };\n\n                  if (usercontent.props.hasOwnProperty(\'scrollerProperties\')) {\n                    content = react_1["default"].cloneElement(usercontent, {\n                      scrollerProperties: scrollerProperties\n                    });\n                  } else {\n                    content = usercontent;\n                  }\n\n                  portalData = this.createPortal(content, index, itemID, true); // true = isPreload\n                  // make available to user content\n\n                  scrollerProperties.isReparentingRef = portalData.isReparentingRef;\n                } else {\n                  if (usercontent === undefined) {\n                    itemExceptionsCallback && itemExceptionsCallback(index, itemID, returnvalue, \'preload\', error);\n                  } else {\n                    // usercontent === null; last item in list\n                    itemExceptionsCallback && itemExceptionsCallback(index, itemID, returnvalue, \'preload\', new Error(\'end of list\'));\n                    maxListsizeInterrupt(index);\n                  }\n                }\n\n              case 14:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8]]);\n      }));\n    } // delete a portal list item\n    // accepts an array of indexes\n\n  }, {\n    key: "deletePortal",\n    value: function deletePortal(index, deleteListCallback) {\n      var indexArray = !Array.isArray(index) ? [index] : index;\n      var _this$cacheProps3 = this.cacheProps,\n          metadataMap = _this$cacheProps3.metadataMap,\n          portalMap = _this$cacheProps3.portalMap,\n          indexToItemIDMap = _this$cacheProps3.indexToItemIDMap;\n      var deleteList = [];\n\n      var _iterator7 = _createForOfIteratorHelper(indexArray),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var i = _step7.value;\n          var itemID = indexToItemIDMap.get(i);\n          deleteList.push({\n            index: i,\n            itemID: itemID\n          });\n          metadataMap["delete"](itemID);\n          portalMap["delete"](itemID);\n          indexToItemIDMap["delete"](i);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      this.cacheProps.modified = true;\n      deleteListCallback && deleteListCallback(deleteList);\n    } // query existence of a portal list item\n\n  }, {\n    key: "hasPortal",\n    value: function hasPortal(itemID) {\n      return this.cacheProps.metadataMap.has(itemID);\n    }\n  }, {\n    key: "getPortal",\n    value: function getPortal(itemID) {\n      if (this.hasPortal(itemID)) {\n        return this.cacheProps.metadataMap.get(itemID);\n      }\n    }\n  }]);\n\n  return CacheHandler;\n}();\n\nexports.CacheHandler = CacheHandler; // ==========================[ Utility function ]============================\n// get a react-reverse-portal InPortal component, with its metadata\n// with user content and container\n\nvar createPortalNode = function createPortalNode(index, itemID, layout) {\n  var portalNode = (0, react_reverse_portal_1.createHtmlPortalNode)();\n  var container = portalNode.element;\n  container.style.overflow = \'hidden\';\n\n  if (layout == \'uniform\') {\n    container.style.inset = \'0px\';\n    container.style.position = \'absolute\';\n  }\n\n  container.dataset.type = \'contentenvelope\';\n  container.dataset.index = index;\n  container.dataset.cacheitemid = itemID;\n  return portalNode;\n}; // ========================[ Utility component ]==============================\n// portal list component for rapid relisting of updates, using external callback for set state\n\n\nvar PortalList = function PortalList(_ref) {\n  var cacheProps = _ref.cacheProps;\n\n  var _ref2 = (0, react_1.useState)(0),\n      _ref3 = _slicedToArray(_ref2, 2),\n      portalListCounter = _ref3[0],\n      setPortalListCounter = _ref3[1];\n\n  var counterRef = (0, react_1.useRef)(null);\n  counterRef.current = portalListCounter;\n  var isMountedRef = (0, react_1.useRef)(true);\n  var portalArrayRef = (0, react_1.useRef)(null); // const cachedivRef = useRef(null)\n\n  (0, react_1.useEffect)(function () {\n    cacheProps.setListState = function () {\n      portalArrayRef.current = cacheProps.portalList;\n      isMountedRef.current && setPortalListCounter(++counterRef.current); // force render\n    };\n\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  return portalArrayRef.current;\n};\n\nexports.PortalList = PortalList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/cachehandler.tsx\n')},"./src/cradle/contentfunctions.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval(" // contentfunctions.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.deletePortals = exports.allocateContentList = exports.getCellFrameComponentList = exports.getGridRowSpans = exports.getGridRowLengths = exports.calcContentShift = exports.getShiftInstruction = exports.getContentListRequirements = void 0;\n/*\n    This module supports the contenthandler module. The functions in this module perform\n    the detailed calculations and processes required by the contenthandler.\n\n    getContentListRequirements is called by the contenthandler's setCradleContent function.\n\n    getShiftInstruction and calcContentShift are called by contentHandler's updateCradleContent\n    function.\n    \n    getCellFrameComponentList, allocateContentList, and deletePortals functions are shared by both.\n\n    createCellFrame is called internally by getCellFrameComponentList as needed.\n*/\n\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar CellFrame_1 = __importDefault(__webpack_require__(/*! ../CellFrame */ \"./src/CellFrame.tsx\")); // ======================[ for setCradleContent ]===========================\n\n\nvar getContentListRequirements = function getContentListRequirements(_ref) {\n  var baseRowLength = _ref.baseRowLength,\n      cradleInheritedProperties = _ref.cradleInheritedProperties,\n      cradleInternalProperties = _ref.cradleInternalProperties,\n      targetAxisReferenceIndex = _ref.targetAxisReferenceIndex,\n      targetAxisViewportPixelOffset = _ref.targetAxisViewportPixelOffset;\n  var orientation = cradleInheritedProperties.orientation,\n      cellHeight = cradleInheritedProperties.cellHeight,\n      cellWidth = cradleInheritedProperties.cellWidth,\n      gap = cradleInheritedProperties.gap,\n      padding = cradleInheritedProperties.padding;\n  var crosscount = cradleInternalProperties.crosscount,\n      cradleRowcount = cradleInternalProperties.cradleRowcount,\n      runwayRowcount = cradleInternalProperties.runwayRowcount,\n      listRowcount = cradleInternalProperties.listRowcount,\n      listsize = cradleInternalProperties.listsize,\n      viewportVisibleRowcount = cradleInternalProperties.viewportVisibleRowcount; // align axis reference to first row item\n\n  targetAxisReferenceIndex = Math.min(targetAxisReferenceIndex, listsize - 1);\n  targetAxisReferenceIndex -= targetAxisReferenceIndex % crosscount; // derive target row\n\n  var targetAxisRowOffset = Math.ceil(targetAxisReferenceIndex / crosscount);\n  var maxAxisRowOffset = Math.max(0, listRowcount - viewportVisibleRowcount);\n\n  if (targetAxisRowOffset > maxAxisRowOffset) {\n    targetAxisRowOffset = maxAxisRowOffset;\n    targetAxisReferenceIndex = targetAxisRowOffset * crosscount;\n  } // -----------------------[ calc cradleReferenceRow & Index ]------------------------\n  // leading edge\n\n\n  var targetCradleRowOffset = Math.max(0, targetAxisRowOffset - runwayRowcount); // trailing edge\n\n  var targetCradleEndRowOffset = targetCradleRowOffset + (cradleRowcount - 1);\n  var listEndRowOffset = listRowcount - 1;\n\n  if (targetCradleEndRowOffset > listEndRowOffset) {\n    var diff = targetCradleEndRowOffset - listEndRowOffset;\n    targetCradleRowOffset -= diff;\n    targetCradleEndRowOffset -= diff;\n  }\n\n  var targetCradleReferenceIndex = targetCradleRowOffset * crosscount; // ---------------------[ calc cradle content count ]---------------------\n\n  var newCradleContentCount = cradleRowcount * crosscount;\n\n  if (targetCradleEndRowOffset == listEndRowOffset) {\n    var endRowRemainderCount = listsize % crosscount;\n\n    if (endRowRemainderCount) {\n      newCradleContentCount -= crosscount - endRowRemainderCount;\n    }\n  } // --------------------[ calc css positioning ]-----------------------\n\n\n  var targetScrollblockViewportPixelOffset = targetAxisRowOffset * baseRowLength + padding - targetAxisViewportPixelOffset; // ----------------------[ return required values ]---------------------\n\n  return {\n    targetCradleReferenceIndex: targetCradleReferenceIndex,\n    targetAxisReferenceIndex: targetAxisReferenceIndex,\n    targetScrollblockViewportPixelOffset: targetScrollblockViewportPixelOffset,\n    newCradleContentCount: newCradleContentCount\n  };\n};\n\nexports.getContentListRequirements = getContentListRequirements; // ======================[ for updateCradleContent ]===========================\n\n/*\n    - If the top of the cell row moves beyond the viewport boundary, then the\n        content should push the cell boundary up\n    - If the top of the cell row moves into the viewport boundary, then the\n        content should push the cell boundary down\n*/\n// -1 = shift row to head. 1 = shift row to tail. 0 = do not shift a row.\n\nvar getShiftInstruction = function getShiftInstruction(_ref2) {\n  var isViewportScrollingForward = _ref2.isViewportScrollingForward,\n      orientation = _ref2.orientation,\n      triggerlineEntries = _ref2.triggerlineEntries,\n      triggerlineSpan = _ref2.triggerlineSpan,\n      scrollerID = _ref2.scrollerID,\n      oldAxisReferenceIndex = _ref2.oldAxisReferenceIndex,\n      viewportVisibleRowcount = _ref2.viewportVisibleRowcount,\n      crosscount = _ref2.crosscount,\n      listsize = _ref2.listsize,\n      reverseDirection = _ref2.reverseDirection;\n  // console.log('getShiftInstruction: reverseDirection, isViewportScrollingForward, triggerlineEntries', \n  //     reverseDirection, isViewportScrollingForward, triggerlineEntries)\n  var direction = isViewportScrollingForward ? 'forward' : 'backward';\n  var entries = triggerlineEntries.filter(function (entry) {\n    // const isIntersecting = entry.isIntersecting\n    var triggerlinename = entry.target.dataset.type;\n    entry.triggerlinename = triggerlinename; // memo for processing and console\n\n    var triggerlinedirection = entry.target.dataset.direction;\n    entry.triggerlinedirection = triggerlinedirection;\n    entry.scrollingforward = isViewportScrollingForward; // memo for console\n\n    var rootpos = orientation == 'vertical' ? entry.rootBounds.y : entry.rootBounds.x;\n    var entrypos = orientation == 'vertical' ? entry.boundingClientRect.y : entry.boundingClientRect.x;\n    var viewportoffset = entrypos - rootpos;\n    entry.viewportoffset = viewportoffset; // console.log('triggerlinename, triggerlinedirection, direction, viewportoffset',\n    //     triggerlinename, triggerlinedirection, direction, viewportoffset)\n    // axis needs to be moved if:\n\n    return (// - axis triggerline goes out of scope, or...\n      direction == 'forward' && (reverseDirection ? triggerlinedirection == 'backward' : triggerlinedirection == 'forward') && viewportoffset <= 0 || // - head triggerline comes into scope\n      direction == 'backward' && (reverseDirection ? triggerlinedirection == 'forward' : triggerlinedirection == 'backward') && viewportoffset >= 0\n    );\n  }); // console.log('filtered entries', entries)\n\n  var retval; // the triggerline might have passed through the viewport completely without the\n  // change being triggered, eg. not intersecting, passing through viewport, then\n  //    not intersecting again before being intercepted\n  // in this case we rely on the counter entry to provide information\n\n  if (entries.length == 0) {\n    // short-circuit the evaluation\n    var counterdirection = !isViewportScrollingForward ? 'backward' : 'forward';\n    var counterentries = triggerlineEntries.filter(function (entry) {\n      return entry.triggerdirection == counterdirection;\n    });\n\n    if (counterentries.length != 0) {\n      // check for implied trigger - trigger can be bypassed with heavy components\n      var counterentry = counterentries.pop();\n      var countertriggerlinedirection = counterentry.triggerlinedirection;\n      var impliedoffset;\n\n      if (countertriggerlinedirection == 'backward' && (reverseDirection ? direction == 'forward' : direction == 'backward')) {\n        impliedoffset = counterentry.viewportoffsethead + triggerlineSpan;\n\n        if (impliedoffset <= 0) {\n          retval = -1;\n        }\n      } else {\n        impliedoffset = counterentry.viewportoffsethead - triggerlineSpan;\n\n        if (impliedoffset >= 0) {\n          retval = 1;\n        }\n      }\n    }\n\n    retval = 0;\n  } else {\n    // complete the evaluation\n    var entry = entries[0]; // assume one record gets filtered; only paired above on reconnect\n\n    if (direction == 'backward') {\n      retval = 1; // shift row to tail\n    } else {\n      retval = -1; // shift row to head\n    }\n  } // check for last oversize row\n\n\n  if (retval != 0 && isViewportScrollingForward && viewportVisibleRowcount == 0) {\n    if (listsize - crosscount <= oldAxisReferenceIndex) {\n      retval = 0;\n    }\n  } // console.log('returning shift instruction', retval)\n\n\n  return retval;\n};\n\nexports.getShiftInstruction = getShiftInstruction; // A negative shift instruction is movement into the head, a positive shift is movement into the tail.\n// called only from updateCradleContent\n\nvar calcContentShift = function calcContentShift(_ref3) {\n  var shiftinstruction = _ref3.shiftinstruction,\n      cradleInheritedProperties = _ref3.cradleInheritedProperties,\n      cradleInternalProperties = _ref3.cradleInternalProperties,\n      cradleContent = _ref3.cradleContent,\n      cradleElements = _ref3.cradleElements,\n      scrollPos = _ref3.scrollPos,\n      viewportElement = _ref3.viewportElement;\n\n  // ------------------------[ 1. initialize ]-----------------------\n  var _a, _b;\n\n  var isScrollingViewportForward = shiftinstruction < 0;\n  var gap = cradleInheritedProperties.gap,\n      orientation = cradleInheritedProperties.orientation,\n      cellHeight = cradleInheritedProperties.cellHeight,\n      cellWidth = cradleInheritedProperties.cellWidth,\n      triggerlineOffset = cradleInheritedProperties.triggerlineOffset;\n  var axisElement = cradleElements.axisRef.current;\n  var cradlecontentlist = cradleContent.cradleModelComponents,\n      tailcontentlist = cradleContent.tailModelComponents;\n  var crosscount = cradleInternalProperties.crosscount,\n      cradleRowcount = cradleInternalProperties.cradleRowcount,\n      listsize = cradleInternalProperties.listsize,\n      listRowcount = cradleInternalProperties.listRowcount,\n      viewportRowcount = cradleInternalProperties.viewportRowcount,\n      runwayRowcount = cradleInternalProperties.runwayRowcount;\n\n  var _getRowLengths = getRowLengths(isScrollingViewportForward, cradleElements, crosscount, orientation, gap),\n      _getRowLengths2 = _slicedToArray(_getRowLengths, 2),\n      rowLengths = _getRowLengths2[0],\n      rowSpans = _getRowLengths2[1];\n\n  var firstRowLength = rowLengths[0];\n  var baseRowLength = (orientation == 'vertical' ? cellHeight : cellWidth) + gap; // -----------[ 2. calculate axis reference row shift ]-------------------\n  // extra gaps can be caused by rapid scrolling\n\n  var cradleAxisOffset = orientation == 'vertical' ? axisElement.offsetTop : axisElement.offsetLeft;\n  var scrollblockElement = viewportElement.firstChild;\n  var scrollblockOffset = // to capture current adjustment for variable layout\n  orientation == 'vertical' ? scrollblockElement.offsetTop : scrollblockElement.offsetLeft; // viewportAxisOffset will be negative for scroll forward and positive for scroll backward\n\n  var viewportAxisOffset = // the pixel distance between the viewport frame and the axis, toward the head\n  cradleAxisOffset + scrollblockOffset - scrollPos;\n  console.log('calcContentShift:viewportAxisOffset', viewportAxisOffset);\n  var triggerAxisOffset = isScrollingViewportForward ? // scroll forward engages the tail triggerline which is below the axis\n  // the tail triggerline must be placed to intersect to re-trigger\n  viewportAxisOffset + triggerlineOffset : // scrollbackward engages the head triggerline which is above the axis\n  // the head triggerline muse be placed not to intersect to retrigger\n  viewportAxisOffset - (baseRowLength - triggerlineOffset);\n  var triggerPos = isScrollingViewportForward ? viewportAxisOffset + triggerlineOffset : firstRowLength === undefined ? viewportAxisOffset + triggerlineOffset : viewportAxisOffset - (firstRowLength - triggerlineOffset);\n  var spanRowPtr = isScrollingViewportForward ? rowSpans.findIndex(function (span) {\n    return -(span - triggerlineOffset) < triggerPos;\n  }) : rowSpans.findIndex(function (span) {\n    return span - triggerlineOffset > triggerPos;\n  });\n  var spanPtr, // used to calc spanRowShift below\n  spanAxisPixelShift; // used to calc newAxisPixelOffset below\n\n  if (spanRowPtr == -1) {\n    // overshoot of instantiated rows; continue with virtual rows\n    if (rowSpans.length == 0) {\n      spanPtr = -1;\n      spanAxisPixelShift = 0;\n    } else {\n      spanPtr = rowSpans.length - 1;\n      var overshootPixelShift = // set base of working total\n      isScrollingViewportForward ? -(rowSpans.at(-1) - triggerlineOffset) : // positive value\n      rowSpans.at(-1) - triggerlineOffset; // negative value\n\n      if (isScrollingViewportForward) {\n        while (overshootPixelShift > triggerPos) {\n          overshootPixelShift -= baseRowLength;\n          ++spanPtr;\n        }\n\n        spanAxisPixelShift = overshootPixelShift + triggerlineOffset;\n      } else {\n        while (overshootPixelShift < triggerPos) {\n          overshootPixelShift += baseRowLength;\n          ++spanPtr;\n        }\n\n        spanAxisPixelShift = overshootPixelShift - triggerlineOffset;\n      }\n    }\n  } else {\n    // final values found in instantiated rows\n    spanPtr = spanRowPtr;\n    spanAxisPixelShift = isScrollingViewportForward ? rowSpans[spanPtr] : -rowSpans[spanPtr];\n  }\n\n  var spanRowShift = // pick up row shift with or without overshoot\n  isScrollingViewportForward ? spanPtr + 1 : -(spanPtr + 1); // the following two values, and no other calcs, are carried forward.\n  // for axisReferenceRowshift:\n  // negative for moving rows out of head into tail;\n  // positive for moving rows out of tail into head\n\n  var axisReferenceRowshift = spanRowShift;\n  var axisPixelShift = spanAxisPixelShift; // ------------[ 5. calc new cradle and axis reference row offsets ]-------------\n  // base value for cradle reference shift; may change if beyond list bounds\n\n  var cradleReferenceRowshift = axisReferenceRowshift;\n  var previousCradleReferenceIndex = ((_a = cradlecontentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index) || 0;\n  var previousCradleRowOffset = Math.ceil(previousCradleReferenceIndex / crosscount);\n  var previousAxisReferenceIndex = ((_b = tailcontentlist[0]) === null || _b === void 0 ? void 0 : _b.props.index) || 0;\n  var previousAxisRowOffset = Math.ceil(previousAxisReferenceIndex / crosscount); // base values\n\n  var newCradleReferenceRowOffset = previousCradleRowOffset + cradleReferenceRowshift;\n  var newAxisReferenceRowOffset = previousAxisRowOffset + axisReferenceRowshift; // sections 6 and 7 deal entirely with row calculations; no pixels\n  // --------[ 6. adjust cradle contents for start and end of list ]-------\n  // ...to maintain constant number of cradle rows\n\n  var listEndrowOffset = listRowcount - 1;\n\n  if (isScrollingViewportForward) {\n    // a. if scrolling forward near the start of the list, new cradle row offset and\n    // cradle row shift count has to be adjusted to accommodate the leading runway\n    // b. if scrolling forward (toward tail of list), as the cradle last row offset approaches \n    // listrow new cradle offset and cradle row shift have to be adjusted to prevent shortening \n    // of cradle content.\n    var targetCradleReferenceRowOffset = Math.max(0, newAxisReferenceRowOffset - runwayRowcount - 1);\n    var headrowDiff = newCradleReferenceRowOffset - targetCradleReferenceRowOffset;\n\n    if (headrowDiff > 0) {\n      newCradleReferenceRowOffset -= headrowDiff;\n      cradleReferenceRowshift -= headrowDiff;\n    } // case of being in bounds of trailing runway (end of list)\n\n\n    var targetCradleEndrowOffset = newCradleReferenceRowOffset + (cradleRowcount - 1);\n    var tailrowdiff = Math.max(0, targetCradleEndrowOffset - listEndrowOffset);\n\n    if (tailrowdiff > 0) {\n      newCradleReferenceRowOffset -= tailrowdiff;\n      cradleReferenceRowshift -= tailrowdiff;\n    }\n  } else {\n    // !isScrollingViewportForward = scroll backward\n    // c. if scrolling backward (toward head of list), as the cradlerowoffset hits 0, cradle changes have\n    // to be adjusted to prevent shortening of cradle content\n    // d. if scrolling backward near the start of the list, cradle changes have to be adjusted to accomodate\n    // the trailing runway\n    if (newCradleReferenceRowOffset < 0) {\n      cradleReferenceRowshift -= newCradleReferenceRowOffset;\n      newCradleReferenceRowOffset = 0;\n    } // case of in bounds of trailing runway (end of list)\n\n\n    var computedNextCradleEndrowOffset = previousCradleRowOffset + (cradleRowcount - 1) + cradleReferenceRowshift;\n    var targetcradleEndrowoffset = Math.min(listEndrowOffset, newAxisReferenceRowOffset + (viewportRowcount - 1) + (runwayRowcount - 1));\n\n    var _tailrowdiff = Math.max(0, targetcradleEndrowoffset - computedNextCradleEndrowOffset);\n\n    if (_tailrowdiff > 0) {\n      cradleReferenceRowshift += _tailrowdiff;\n      newCradleReferenceRowOffset += _tailrowdiff;\n    }\n  } // ----------------------[ 7. map rows to item references ]----------------------\n\n\n  var newCradleReferenceIndex = newCradleReferenceRowOffset * crosscount;\n  var cradleReferenceItemShift = cradleReferenceRowshift * crosscount;\n  var newAxisReferenceIndex = newAxisReferenceRowOffset * crosscount;\n  var axisReferenceItemShift = axisReferenceRowshift * crosscount;\n  var newCradleContentCount = cradleRowcount * crosscount; // base count\n\n  var includesLastRow = newCradleReferenceRowOffset + cradleRowcount >= listRowcount;\n\n  if (includesLastRow) {\n    var partialspaces = listsize % crosscount;\n    var itemsShortfall = partialspaces == 0 ? 0 : crosscount - partialspaces;\n    newCradleContentCount -= itemsShortfall;\n  } // create head and tail change counts\n\n\n  var changeOfCradleContentCount = cradlecontentlist.length - newCradleContentCount;\n  var listStartChangeCount = -cradleReferenceItemShift;\n  var listEndChangeCount = -listStartChangeCount - changeOfCradleContentCount; // -------------[ 8. calculate new axis pixel position ]------------------\n\n  var newAxisPixelOffset = viewportAxisOffset + axisPixelShift; // ---------------------[ 9. return required values ]-------------------\n\n  return {\n    newCradleReferenceIndex: newCradleReferenceIndex,\n    cradleReferenceItemShift: cradleReferenceItemShift,\n    newAxisReferenceIndex: newAxisReferenceIndex,\n    axisReferenceItemShift: axisReferenceItemShift,\n    newAxisPixelOffset: newAxisPixelOffset,\n    newCradleContentCount: newCradleContentCount,\n    listStartChangeCount: listStartChangeCount,\n    listEndChangeCount: listEndChangeCount\n  };\n};\n\nexports.calcContentShift = calcContentShift; // called by calcContentShifts above\n\nvar getRowLengths = function getRowLengths(isScrollingViewportForward, cradleElements, crosscount, orientation, gap) {\n  var gridElement = isScrollingViewportForward ? cradleElements.tailRef.current : cradleElements.headRef.current;\n  var rowLengths = (0, exports.getGridRowLengths)(gridElement, orientation, crosscount, gap);\n\n  if (!isScrollingViewportForward) {\n    rowLengths.reverse();\n  }\n\n  var rowSpans = (0, exports.getGridRowSpans)(rowLengths);\n  return [rowLengths, rowSpans];\n};\n\nvar getGridRowLengths = function getGridRowLengths(grid, orientation, crosscount, gap) {\n  var rowLengths = [];\n  var elementList = grid.childNodes;\n  var elementPtr = 0;\n  var element = elementList[elementPtr];\n  var span = 0;\n\n  while (element) {\n    var rowlength = (orientation == 'vertical' ? element.offsetHeight : element.offsetWidth) + gap;\n    rowLengths.push(rowlength);\n    elementPtr += crosscount;\n    element = elementList[elementPtr];\n  }\n\n  return rowLengths;\n};\n\nexports.getGridRowLengths = getGridRowLengths;\n\nvar getGridRowSpans = function getGridRowSpans(rowLengths) {\n  var rowSpans = [];\n  var span = 0;\n  rowLengths.forEach(function (value) {\n    span += value;\n    rowSpans.push(span);\n  });\n  return rowSpans;\n};\n\nexports.getGridRowSpans = getGridRowSpans; // =====================[ shared by both setCradleContent and updateCradleContent ]====================\n// update content\n// adds itemshells at end of contentlist according to headindexcount and tailindescount,\n// or if indexcount values are <0 removes them.\n\nvar getCellFrameComponentList = function getCellFrameComponentList(_ref4) {\n  var cradleInheritedProperties = _ref4.cradleInheritedProperties,\n      cradleInternalProperties = _ref4.cradleInternalProperties,\n      cacheHandler = _ref4.cacheHandler,\n      cradleContentCount = _ref4.cradleContentCount,\n      cradleReferenceIndex = _ref4.cradleReferenceIndex,\n      listStartChangeCount = _ref4.listStartChangeCount,\n      listEndChangeCount = _ref4.listEndChangeCount,\n      contentlist = _ref4.workingContentList,\n      instanceIdCounterRef = _ref4.instanceIdCounterRef,\n      styles = _ref4.styles;\n\n  var localContentlist = _toConsumableArray(contentlist);\n\n  var lastindexoffset = cradleReferenceIndex + localContentlist.length - 1;\n  var headContentlist = [],\n      tailContentlist = [];\n  var deletedtailitems = [],\n      deletedheaditems = [];\n\n  if (listStartChangeCount >= 0) {\n    // acquire new items\n    for (var newindex = cradleReferenceIndex - listStartChangeCount; newindex < cradleReferenceIndex; newindex++) {\n      headContentlist.push(createCellFrame({\n        index: newindex,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        instanceIdCounterRef: instanceIdCounterRef,\n        cacheHandler: cacheHandler,\n        placeholderFrameStyles: styles.placeholderframe,\n        placeholderContentStyles: styles.placeholdercontent\n      }));\n    }\n  } else {\n    deletedheaditems = localContentlist.splice(0, -listStartChangeCount);\n  }\n\n  if (listEndChangeCount >= 0) {\n    // acquire new items\n    for (var _newindex = lastindexoffset + 1; _newindex < lastindexoffset + 1 + listEndChangeCount; _newindex++) {\n      tailContentlist.push(createCellFrame({\n        index: _newindex,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        instanceIdCounterRef: instanceIdCounterRef,\n        cacheHandler: cacheHandler,\n        placeholderFrameStyles: styles.placeholderframe,\n        placeholderContentStyles: styles.placeholdercontent\n      }));\n    }\n  } else {\n    deletedtailitems = localContentlist.splice(listEndChangeCount, -listEndChangeCount);\n  }\n\n  var deletedItems = [].concat(_toConsumableArray(deletedheaditems), _toConsumableArray(deletedtailitems));\n  var componentList = [].concat(headContentlist, _toConsumableArray(localContentlist), tailContentlist);\n  return [componentList, deletedItems];\n};\n\nexports.getCellFrameComponentList = getCellFrameComponentList; // butterfly model. Leading (head) all or partially hidden; tail, visible plus following hidden\n\nvar allocateContentList = function allocateContentList(_ref5) {\n  var contentlist = _ref5.contentlist,\n      axisReferenceIndex = _ref5.axisReferenceIndex,\n      layoutHandler = _ref5.layoutHandler;\n\n  var _a;\n\n  var triggercellIndex = layoutHandler.triggercellIndex;\n  var offsetindex = (_a = contentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index;\n  var highindex = offsetindex + contentlist.length;\n  var headitemcount = axisReferenceIndex - offsetindex;\n  var targetTriggercellIndex = headitemcount == 0 ? axisReferenceIndex : axisReferenceIndex - 1;\n  layoutHandler.triggercellIsInTail = headitemcount == 0 ? true : false;\n\n  if (triggercellIndex !== undefined && offsetindex !== undefined && triggercellIndex != targetTriggercellIndex) {\n    if (triggercellIndex >= offsetindex && triggercellIndex <= highindex) {\n      var _triggercellPtr = triggercellIndex - offsetindex;\n\n      var _triggercellComponent = contentlist[_triggercellPtr];\n\n      if (_triggercellComponent) {\n        // otherwise has been asynchronously cleared\n        contentlist[_triggercellPtr] = react_1[\"default\"].cloneElement(_triggercellComponent, {\n          isTriggercell: false\n        });\n      }\n    }\n  }\n\n  var triggercellPtr = targetTriggercellIndex - offsetindex;\n  var triggercellComponent = contentlist[triggercellPtr]; // if !triggercellComponent, is temporarily out of scope; will recycle\n\n  if (triggercellComponent && (triggercellIndex === undefined || triggercellIndex != targetTriggercellIndex || !triggercellComponent.props.isTriggecell)) {\n    contentlist[triggercellPtr] = react_1[\"default\"].cloneElement(triggercellComponent, {\n      isTriggercell: true\n    });\n    layoutHandler.triggercellIndex = targetTriggercellIndex;\n  }\n\n  var headlist = contentlist.slice(0, headitemcount);\n  var taillist = contentlist.slice(headitemcount);\n  return [headlist, taillist];\n};\n\nexports.allocateContentList = allocateContentList;\n\nvar deletePortals = function deletePortals(cacheHandler, deleteList, deleteListCallback) {\n  var dlist = deleteList.map(function (item) {\n    return item.props.index;\n  });\n  cacheHandler.deletePortal(dlist, deleteListCallback);\n};\n\nexports.deletePortals = deletePortals; // =====================[ internal, acquire item ]======================\n\nvar createCellFrame = function createCellFrame(_ref6) {\n  var index = _ref6.index,\n      cradleInheritedProperties = _ref6.cradleInheritedProperties,\n      cradleInternalProperties = _ref6.cradleInternalProperties,\n      instanceIdCounterRef = _ref6.instanceIdCounterRef,\n      cacheHandler = _ref6.cacheHandler,\n      placeholderFrameStyles = _ref6.placeholderFrameStyles,\n      placeholderContentStyles = _ref6.placeholderContentStyles;\n  var instanceID = instanceIdCounterRef.current++;\n  var orientation = cradleInheritedProperties.orientation,\n      cellHeight = cradleInheritedProperties.cellHeight,\n      cellWidth = cradleInheritedProperties.cellWidth,\n      getItem = cradleInheritedProperties.getItem,\n      placeholder = cradleInheritedProperties.placeholder,\n      scrollerID = cradleInheritedProperties.scrollerID,\n      layout = cradleInheritedProperties.layout;\n  var listsize = cradleInternalProperties.listsize; // get new or existing itemID\n\n  var itemID = cacheHandler.getNewOrExistingItemID(index);\n  return react_1[\"default\"].createElement(CellFrame_1[\"default\"], {\n    key: instanceID,\n    orientation: orientation,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    layout: layout,\n    index: index,\n    getItem: getItem,\n    listsize: listsize,\n    placeholder: placeholder,\n    itemID: itemID,\n    instanceID: instanceID,\n    scrollerID: scrollerID,\n    isTriggercell: false,\n    placeholderFrameStyles: placeholderFrameStyles,\n    placeholderContentStyles: placeholderContentStyles\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contentfunctions.tsx\n")},"./src/cradle/contenthandler.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval(" // contenthandler.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    This module supports the setup and rollover of content in the Cradle. There are two key functions\n    in this module: setCradleContent, and updateCradleContent. There are also a few functions which\n    support synchronization of Cradle content with cache content (see internal and external services\n    below).\n\n    setCradleContent is called directly from Cradle (in the state manager), and instantiates new Cradle\n    content in response to the scroller setup, or changes to its configuration. setCradleContent\n    creates a list of Cradle content CellFrames, and allocates those to the two Cradle grids. This\n    process occurs in response to many state changes, such as finishreposition, pivot, a host scrollto\n    request, and more.\n\n    updateCradleContent rolls over the Cradle content in response to user scrolling. When scrolling\n    forward, content is removed from the Cradle head and added to the Cradle tail. When scrolling\n    backward, the reverse occurs.\n\n    The Cradle (through the contentfunctions module) delegates fetching content items to the CellFrame.\n\n    This module is supported primarily by the contentfunctions module.\n*/\n\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar contentfunctions_1 = __webpack_require__(/*! ./contentfunctions */ \"./src/cradle/contentfunctions.tsx\");\n\nvar ContentHandler = /*#__PURE__*/function () {\n  function ContentHandler(cradleParameters) {\n    var _this = this;\n\n    _classCallCheck(this, ContentHandler);\n\n    this.content = {\n      cradleModelComponents: null,\n      headModelComponents: null,\n      tailModelComponents: null,\n      // the following two only used in cradle for render\n      headDisplayComponents: [],\n      tailDisplayComponents: []\n    };\n    this.instanceIdCounterRef = {\n      current: 0\n    }; // Two main public methods - setCradleContent and updateCradleContent\n    // ==========================[ SET CONTENT ]===========================\n    // reset the cradle with new content, including allocation between head and tail parts of the cradle\n    // - called only from the Cradle state handler\n\n    this.setCradleContent = function (cradleState) {\n      // ------------------------------[ 1. initialize ]---------------------------\n      var cradleParameters = _this.cradleParameters;\n      var viewportInterruptProperties = cradleParameters.viewportInterruptPropertiesRef.current;\n      var cradleInheritedProperties = cradleParameters.cradleInheritedPropertiesRef.current;\n      var cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n      var cradleHandlers = cradleParameters.handlersRef.current;\n      var cacheHandler = cradleHandlers.cacheHandler,\n          layoutHandler = cradleHandlers.layoutHandler,\n          serviceHandler = cradleHandlers.serviceHandler,\n          interruptHandler = cradleHandlers.interruptHandler,\n          scrollHandler = cradleHandlers.scrollHandler; // the triggerlines and cradle grids will be moved, so disconnect them from their observers.\n      // they are reconnected with 'renderupdatedcontent' state in cradle.tsx\n      // console.log('disconnecting triggers in setCradleContent')\n\n      interruptHandler.triggerlinesIntersect.observer.disconnect();\n      interruptHandler.cradleIntersect.observer.disconnect();\n      var cradlePositionData = layoutHandler.cradlePositionData;\n      var viewportElement = viewportInterruptProperties.elementRef.current;\n      var requestedAxisReferenceIndex = cradlePositionData.targetAxisReferenceIndex;\n      var targetAxisViewportPixelOffset = cradlePositionData.targetAxisViewportPixelOffset;\n      var orientation = cradleInheritedProperties.orientation,\n          gap = cradleInheritedProperties.gap,\n          padding = cradleInheritedProperties.padding,\n          cellHeight = cradleInheritedProperties.cellHeight,\n          cellWidth = cradleInheritedProperties.cellWidth,\n          cache = cradleInheritedProperties.cache,\n          scrollerID = cradleInheritedProperties.scrollerID,\n          styles = cradleInheritedProperties.styles;\n      var crosscount = cradleInternalProperties.crosscount,\n          listsize = cradleInternalProperties.listsize;\n      var workingRequestAxisReferenceIndex = Math.min(requestedAxisReferenceIndex, listsize - 1);\n      workingRequestAxisReferenceIndex -= workingRequestAxisReferenceIndex % crosscount; // console.log('workingRequestAxisReferenceIndex', workingRequestAxisReferenceIndex)\n      // reposition at row boundary\n\n      if (['firstrender', 'firstrenderfromcache', 'finishreposition', 'reconfigure', 'scrollto'].includes(cradleState)) {\n        targetAxisViewportPixelOffset = workingRequestAxisReferenceIndex == 0 ? padding : gap; // default\n      }\n\n      var workingContentList = [];\n      var cradleContent = _this.content; // ----------------------[ 2. get content requirements ]----------------------\n\n      var baseRowLength = orientation == 'vertical' ? cellHeight + gap : cellWidth + gap; // console.log('setCradleContent: workingRequestAxisReferenceIndex',workingRequestAxisReferenceIndex)\n      // note that targetAxisReferenceIndex replaces requestedAxisReferenceIndex here\n\n      var _ref = (0, contentfunctions_1.getContentListRequirements)({\n        baseRowLength: baseRowLength,\n        targetAxisReferenceIndex: workingRequestAxisReferenceIndex,\n        targetAxisViewportPixelOffset: targetAxisViewportPixelOffset,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties\n      }),\n          targetCradleReferenceIndex = _ref.targetCradleReferenceIndex,\n          targetAxisReferenceIndex = _ref.targetAxisReferenceIndex,\n          cradleContentCount = _ref.newCradleContentCount,\n          scrollblockViewportPixelOffset = _ref.targetScrollblockViewportPixelOffset; //         console.log(`setCradleContent: \n      // targetCradleReferenceIndex, \n      // targetAxisReferenceIndex,\n      // cradleContentCount, \n      // scrollblockViewportPixelOffset`,\n      //             targetCradleReferenceIndex, \n      //             targetAxisReferenceIndex,\n      //             cradleContentCount, \n      //             scrollblockViewportPixelOffset\n      //         )\n\n\n      var axisViewportPixelOffset = targetAxisViewportPixelOffset; // semantics\n      // ----------------------[ 3. get and config content ]----------------------\n      // returns content constrained by cradleRowcount\n\n      var _ref2 = (0, contentfunctions_1.getCellFrameComponentList)({\n        cacheHandler: cacheHandler,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        cradleContentCount: cradleContentCount,\n        cradleReferenceIndex: targetCradleReferenceIndex,\n        listStartChangeCount: 0,\n        listEndChangeCount: cradleContentCount,\n        workingContentList: workingContentList,\n        instanceIdCounterRef: _this.instanceIdCounterRef,\n        styles: styles\n      }),\n          _ref3 = _slicedToArray(_ref2, 2),\n          newcontentlist = _ref3[0],\n          deleteditems = _ref3[1];\n\n      var _ref4 = (0, contentfunctions_1.allocateContentList)({\n        contentlist: newcontentlist,\n        axisReferenceIndex: targetAxisReferenceIndex,\n        layoutHandler: layoutHandler\n      }),\n          _ref5 = _slicedToArray(_ref4, 2),\n          headcontentlist = _ref5[0],\n          tailcontentlist = _ref5[1]; // console.log('setCradleContent: allocateContentList - headcontentlist, tailcontentlist', headcontentlist, tailcontentlist)\n\n\n      cradleContent.cradleModelComponents = newcontentlist;\n      cradleContent.headModelComponents = headcontentlist;\n      cradleContent.tailModelComponents = tailcontentlist;\n      cradlePositionData.targetAxisReferenceIndex = targetAxisReferenceIndex; // console.log('setCradleContent: setting targetAxisViewportPixelOffset', axisViewportPixelOffset)\n\n      cradlePositionData.targetAxisViewportPixelOffset = axisViewportPixelOffset;\n\n      if (serviceHandler.callbacks.referenceIndexCallback) {\n        var cstate = cradleState;\n        serviceHandler.callbacks.referenceIndexCallback(cradlePositionData.targetAxisReferenceIndex, 'setCradleContent', cstate);\n      } //  ----------------------[ 4. set CSS ]-----------------------\n\n\n      cradlePositionData.blockScrollPos = scrollblockViewportPixelOffset; // avoid bogus call to updateCradleContent\n\n      scrollHandler.resetScrollData(scrollblockViewportPixelOffset);\n      viewportElement[cradlePositionData.blockScrollProperty] = cradlePositionData.blockScrollPos;\n      var cradleElements = layoutHandler.elements;\n      var axisElement = cradleElements.axisRef.current;\n      var headElement = cradleElements.headRef.current;\n      var axisScrollblockPixelOffset = scrollblockViewportPixelOffset + axisViewportPixelOffset; // console.log('setCradleContent: AxisScrollblockPixelOffset, scrollblockViewportPixelOffset, \\\n      //     axisViewportPixelOffset',AxisScrollblockPixelOffset, scrollblockViewportPixelOffset,\n      //     axisViewportPixelOffset)\n\n      if (orientation == 'vertical') {\n        var top = axisScrollblockPixelOffset;\n        axisElement.style.top = top + 'px';\n        axisElement.style.left = 'auto';\n        headElement.style.paddingBottom = headcontentlist.length ? gap + 'px' : 0;\n      } else {\n        // orientation = 'horizontal'\n        var left = axisScrollblockPixelOffset;\n        axisElement.style.top = 'auto';\n        axisElement.style.left = left + 'px';\n        headElement.style.paddingRight = headcontentlist.length ? gap + 'px' : 0;\n      }\n    }; // ==================[ UPDATE CONTENT through scroll ]========================\n    // updateCradleContent does not touch the viewport element's scroll position for the scrollblock\n    // instead it reconfigures elements within the cradle. It is called solely from\n    // axisTriggerlinesObserverCallback of interruptHandler\n\n\n    this.updateCradleContent = function (isViewportScrollingForward, triggerlineEntries) {\n      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'notifications';\n\n      // ----------------------[ 1. initialize ]-------------------------\n      var _a, _b; // handler support\n\n\n      var _this$cradleParameter = _this.cradleParameters.handlersRef.current,\n          cacheHandler = _this$cradleParameter.cacheHandler,\n          scrollHandler = _this$cradleParameter.scrollHandler,\n          layoutHandler = _this$cradleParameter.layoutHandler,\n          stateHandler = _this$cradleParameter.stateHandler,\n          interruptHandler = _this$cradleParameter.interruptHandler,\n          serviceHandler = _this$cradleParameter.serviceHandler; // scroll data\n\n      var scrollData = scrollHandler.scrollData;\n      var scrollPos = scrollData.currentupdate; // first abandon option/3; nothing to do\n\n      if (scrollPos < 0) {\n        // for Safari, FF elastic bounce at top of scroll\n        return;\n      } // cradle scaffold and user cells\n\n\n      var cradleElements = layoutHandler.elements;\n      var cradleContent = _this.content;\n      var modelcontentlist = cradleContent.cradleModelComponents || [];\n      var oldCradleReferenceIndex = ((_a = modelcontentlist[0]) === null || _a === void 0 ? void 0 : _a.props.index) || 0;\n      var oldAxisReferenceIndex = ((_b = cradleContent.tailModelComponents[0]) === null || _b === void 0 ? void 0 : _b.props.index) || 0; // --------------------[ 2. get shift instruction ]-----------------------\n\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var cradleInternalProperties = _this.cradleParameters.cradleInternalPropertiesRef.current;\n      var orientation = cradleInheritedProperties.orientation,\n          cache = cradleInheritedProperties.cache,\n          styles = cradleInheritedProperties.styles;\n      var viewportVisibleRowcount = cradleInternalProperties.viewportVisibleRowcount,\n          crosscount = cradleInternalProperties.crosscount,\n          listsize = cradleInternalProperties.listsize; // -1 is move a row up to the head, +1 is move a row down to the tail, 0 is no shift\n\n      var shiftinstruction = (0, contentfunctions_1.getShiftInstruction)({\n        scrollerID: cradleInheritedProperties.scrollerID,\n        isViewportScrollingForward: isViewportScrollingForward,\n        orientation: orientation,\n        triggerlineEntries: triggerlineEntries,\n        triggerlineSpan: layoutHandler.triggerlineSpan,\n        // for oversized (overflow) cells\n        oldAxisReferenceIndex: oldAxisReferenceIndex,\n        viewportVisibleRowcount: viewportVisibleRowcount,\n        crosscount: crosscount,\n        listsize: listsize,\n        reverseDirection: layoutHandler.triggercellIsInTail\n      }); // second abandon option/3; nothing to do\n\n      if (shiftinstruction == 0) {\n        return;\n      } // console.log('updateCradleContent: shiftinstruction',shiftinstruction)\n      // --------------------------------[ 3. Calculate shifts ]-------------------------------\n      // cradle properties\n      // const cradleInheritedProperties = this.cradleParameters.cradleInheritedPropertiesRef.current\n\n\n      var viewportElement = _this.cradleParameters.viewportInterruptPropertiesRef.current.elementRef.current;\n\n      var _ref6 = (0, contentfunctions_1.calcContentShift)({\n        shiftinstruction: shiftinstruction,\n        cradleInheritedProperties: cradleInheritedProperties,\n        cradleInternalProperties: cradleInternalProperties,\n        cradleContent: cradleContent,\n        cradleElements: cradleElements,\n        scrollPos: scrollPos,\n        viewportElement: viewportElement\n      }),\n          newCradleReferenceIndex = _ref6.newCradleReferenceIndex,\n          cradleItemShift = _ref6.cradleReferenceItemShift,\n          axisReferenceIndex = _ref6.newAxisReferenceIndex,\n          axisItemShift = _ref6.axisReferenceItemShift,\n          axisPixelOffset = _ref6.newAxisPixelOffset,\n          cradleContentCount = _ref6.newCradleContentCount,\n          listStartChangeCount = _ref6.listStartChangeCount,\n          listEndChangeCount = _ref6.listEndChangeCount; // console.log('updateCradleContent: axisItemShift, cradleItemShift',axisItemShift, cradleItemShift)\n\n\n      console.log('updateCradleContent: axisPixelOffset', axisPixelOffset); // third abandon option/3; nothing to do\n\n      if (axisItemShift == 0 && cradleItemShift == 0) {\n        // defensive\n        return;\n      } // the triggerlines will be moved, so disconnect them from their observer.\n      // they are reconnected with 'renderupdatedcontent' state in cradle.tsx\n      // console.log('disconnecting triggers in updateCradleContent')\n\n\n      interruptHandler.triggerlinesIntersect.observer.disconnect();\n      interruptHandler.signals.pauseTriggerlinesObserver = true; // ----------------------------------[ 4. reconfigure cradle content ]--------------------------\n      // collect modified content\n\n      var updatedContentList,\n          deletedContentItems = [];\n\n      if (listStartChangeCount || listEndChangeCount) {\n        // if either is non-0 then modify content\n        var _ref7 = (0, contentfunctions_1.getCellFrameComponentList)({\n          cacheHandler: cacheHandler,\n          cradleInheritedProperties: cradleInheritedProperties,\n          cradleInternalProperties: cradleInternalProperties,\n          cradleContentCount: cradleContentCount,\n          workingContentList: modelcontentlist,\n          listStartChangeCount: listStartChangeCount,\n          listEndChangeCount: listEndChangeCount,\n          cradleReferenceIndex: oldCradleReferenceIndex,\n          instanceIdCounterRef: _this.instanceIdCounterRef,\n          styles: styles\n        });\n\n        var _ref8 = _slicedToArray(_ref7, 2);\n\n        updatedContentList = _ref8[0];\n        deletedContentItems = _ref8[1];\n      } else {\n        updatedContentList = modelcontentlist;\n      }\n\n      if (deletedContentItems.length && cache == 'cradle') {\n        var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n        var dListCallback;\n\n        if (deleteListCallback) {\n          dListCallback = function dListCallback(deleteList) {\n            deleteListCallback('pare cache to cradle', deleteList);\n          };\n        }\n\n        (0, contentfunctions_1.deletePortals)(cacheHandler, deletedContentItems, dListCallback);\n      } // ----------------------------------[ 5. allocate cradle content ]--------------------------\n\n\n      var _ref9 = (0, contentfunctions_1.allocateContentList)({\n        contentlist: updatedContentList,\n        axisReferenceIndex: axisReferenceIndex,\n        layoutHandler: layoutHandler\n      }),\n          _ref10 = _slicedToArray(_ref9, 2),\n          headcontent = _ref10[0],\n          tailcontent = _ref10[1];\n\n      cradleContent.cradleModelComponents = updatedContentList;\n      cradleContent.headModelComponents = headcontent;\n      cradleContent.tailModelComponents = tailcontent;\n\n      if (serviceHandler.callbacks.referenceIndexCallback) {\n        var cstate = stateHandler.cradleStateRef.current;\n        serviceHandler.callbacks.referenceIndexCallback(axisReferenceIndex, 'updateCradleContent', cstate);\n      } // -------------------------------[ 6. set css changes ]-------------------------\n\n\n      var axisElement = cradleElements.axisRef.current;\n      var headElement = cradleElements.headRef.current;\n\n      if (cradleInheritedProperties.orientation == 'vertical') {\n        var topPos = scrollPos + axisPixelOffset;\n        axisElement.style.top = topPos + 'px';\n        axisElement.style.left = 'auto';\n        headElement.style.paddingBottom = headcontent.length ? cradleInheritedProperties.gap + 'px' : 0;\n      } else {\n        // 'horizontal'\n        var leftPos = scrollPos + axisPixelOffset;\n        axisElement.style.top = 'auto';\n        axisElement.style.left = leftPos + 'px';\n        headElement.style.paddingRight = headcontent.length ? cradleInheritedProperties.gap + 'px' : 0;\n      }\n\n      var cradlePositionData = layoutHandler.cradlePositionData;\n      cradlePositionData.targetAxisReferenceIndex = axisReferenceIndex; // console.log('updateCradleContent setting targetAxisViewportPixelOffset', axisPixelOffset)\n\n      cradlePositionData.targetAxisViewportPixelOffset = axisPixelOffset; // interruptHandler.triggerlinesIntersect.connectElements()\n      // interruptHandler.signals.pauseTriggerlinesObserver = false\n\n      stateHandler.setCradleState('renderupdatedcontent');\n    }; // ==============================[ RESPOSITION VARIABLE CONTENT ]==========================\n\n\n    this.adjustScrollblockForVariability = function () {\n      // ----------------------[ setup ]------------------------\n      var cradleParameters = _this.cradleParameters;\n      var cradleHandlers = cradleParameters.handlersRef.current;\n      var viewportInterruptProperties = cradleParameters.viewportInterruptPropertiesRef.current;\n      var cradleInheritedProperties = cradleParameters.cradleInheritedPropertiesRef.current;\n      var cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n      var layoutHandler = cradleHandlers.layoutHandler;\n      var cradleElements = layoutHandler.elements;\n      var headGrid = cradleElements.headRef.current;\n      var tailGrid = cradleElements.tailRef.current;\n      var axisElement = cradleElements.axisRef.current;\n      var viewportElement = viewportInterruptProperties.elementRef.current;\n      var scrollblockElement = viewportElement.firstChild;\n      var orientation = cradleInheritedProperties.orientation,\n          gap = cradleInheritedProperties.gap,\n          padding = cradleInheritedProperties.padding,\n          cellHeight = cradleInheritedProperties.cellHeight,\n          cellWidth = cradleInheritedProperties.cellWidth;\n      var crosscount = cradleInternalProperties.crosscount,\n          listsize = cradleInternalProperties.listsize;\n      var cradlePositionData = layoutHandler.cradlePositionData; // ------------------------[ calculations ]------------------------\n\n      var headRowCount = Math.ceil(headGrid.childNodes.length / crosscount);\n      var tailRowCount = Math.ceil(tailGrid.childNodes.length / crosscount);\n      var cellLength = (orientation == 'vertical' ? cellHeight : cellWidth) + gap;\n      var baseHeadLength = headRowCount * cellLength + padding;\n      var baseTailLength = tailRowCount * cellLength + padding - gap;\n      var axisViewportOffset = cradlePositionData.targetAxisViewportPixelOffset;\n      var blockScrollPos = cradlePositionData.blockScrollPos;\n      console.log('axisViewportOffset,blockScrollPos', axisViewportOffset, blockScrollPos);\n      var measuredHeadLength, measuredTailLength;\n\n      if (orientation == 'vertical') {\n        measuredHeadLength = headGrid.offsetHeight;\n        measuredTailLength = tailGrid.offsetHeight;\n      } else {\n        measuredHeadLength = headGrid.offsetWidth;\n        measuredTailLength = tailGrid.offsetWidth;\n      }\n\n      console.log('headRowCount, baseHeadLength, measuredHeadLength', headRowCount, baseHeadLength, measuredHeadLength);\n      console.log('tailRowCount, baseTailLength, measuredTailLength', tailRowCount, baseTailLength, measuredTailLength);\n      var headDelta = baseHeadLength - measuredHeadLength;\n      var tailDelta = baseTailLength - measuredTailLength;\n      console.log('headDiff, tailDiff', headDelta, tailDelta); // -----------------------[ application ]-------------------------\n\n      var listrowcount = Math.ceil(listsize / crosscount);\n      var baseblocklength = listrowcount * cellLength - gap + padding * 2; // leading and trailing padding\n\n      if (orientation == 'vertical') {\n        // the scrollblock top is moved to compensate for the headDelta\n        scrollblockElement.style.top = -headDelta + 'px'; // the axis is moved in the opposite direction to maintain viewport position\n\n        axisElement.style.top = blockScrollPos + axisViewportOffset + headDelta + 'px'; // the height is adjusted by both deltas, as it controls the scroll length\n\n        scrollblockElement.style.height = baseblocklength - headDelta - tailDelta + 'px';\n      } else {\n        scrollblockElement.style.left = -headDelta + 'px';\n        axisElement.style.left = blockScrollPos + axisViewportOffset + headDelta + 'px';\n        scrollblockElement.style.width = baseblocklength - headDelta - tailDelta + 'px';\n      }\n\n      console.log('baseblocklength, headDiff, tailDiff', baseblocklength, headDelta, tailDelta);\n    }; // public resetScrollPosition = () => {\n    //     // ------------------------[ setup ]-----------------------\n    //     const { cradleParameters } = this\n    //     const cradleHandlers = cradleParameters.handlersRef.current\n    //     const viewportInterruptProperties = cradleParameters.viewportInterruptPropertiesRef.current\n    //     const cradleInheritedProperties = cradleParameters.cradleInheritedPropertiesRef.current\n    //     const cradleInternalProperties = cradleParameters.cradleInternalPropertiesRef.current\n    //     const { layoutHandler, scrollHandler } = cradleHandlers\n    //     const { cradlePositionData } = layoutHandler\n    //     const cradleElements = layoutHandler.elements\n    //     const { content } = this\n    //     const axisElement = cradleElements.axisRef.current\n    //     const headGrid = cradleElements.headRef.current\n    //     const tailGrid = cradleElements.tailRef.current\n    //     const headList = content.headModelComponents\n    //     const tailList = content.tailModelComponents\n    //     const axisReferenceIndex = cradlePositionData.targetAxisReferenceIndex\n    //     const axisViewportPixelOffset = cradlePositionData.targetAxisViewportPixelOffset\n    //     const viewportElement = viewportInterruptProperties.elementRef.current\n    //     const scrollblockElement = viewportElement.firstChild\n    //     const {\n    //         orientation, \n    //         gap, \n    //         padding, \n    //         cellHeight,\n    //         cellWidth,\n    //     } = cradleInheritedProperties\n    //     const { crosscount, listsize } = cradleInternalProperties\n    //     // -------------------------[ calculations ]------------------\n    //     const baseRowLength = \n    //         (orientation == 'vertical')?\n    //             (cellHeight + gap):\n    //             (cellWidth + gap)\n    //     const targetAxisRowOffset = Math.ceil(axisReferenceIndex/crosscount)\n    //     let scrollblockViewportPixelOffset = \n    //         (targetAxisRowOffset * baseRowLength) + padding - axisViewportPixelOffset\n    //     let axisScrollblockPixelOffset = \n    //         scrollblockViewportPixelOffset + axisViewportPixelOffset\n    //     // adjustments for start and end of list\n    //     const headGridLength = \n    //         ( orientation == 'vertical')?\n    //             headGrid.offsetHeight:\n    //             headGrid.offsetWidth\n    //     const tailGridLength = \n    //         ( orientation == 'vertical')?\n    //             tailGrid.offsetHeight:\n    //             tailGrid.offsetWidth\n    //     const scrollblockLength = \n    //         ( orientation == 'vertical' )?\n    //             scrollblockElement.offsetHeight:\n    //             scrollblockElement.offsetWidth\n    //     const headGridScrollBlockOffset = axisScrollblockPixelOffset - headGridLength\n    //     const tailGridScrollBlockOffset = scrollblockLength - (axisScrollblockPixelOffset + tailGridLength)\n    //     // console.log('axisScrollblockPixelOffset, headGridScrollBlockOffset, tailGridScrollBlockOffset',\n    //     //     axisScrollblockPixelOffset, headGridScrollBlockOffset, tailGridScrollBlockOffset)\n    //     if (headGridScrollBlockOffset < 0) {\n    //         scrollblockViewportPixelOffset -= headGridScrollBlockOffset\n    //         axisScrollblockPixelOffset -= headGridScrollBlockOffset\n    //     } else if (tailGridScrollBlockOffset < 0) {\n    //         scrollblockViewportPixelOffset += tailGridScrollBlockOffset\n    //         axisScrollblockPixelOffset += tailGridScrollBlockOffset\n    //     }\n    //     // TODO: add adjustment where grids at list start/end do not contain first/last item\n    //     // ---------------------[ application ]--------------------------\n    //     cradlePositionData.blockScrollPos = scrollblockViewportPixelOffset\n    //     // avoid bogus call to updateCradleContent\n    //     scrollHandler.resetScrollData(scrollblockViewportPixelOffset) \n    //     viewportElement[cradlePositionData.blockScrollProperty] =\n    //         cradlePositionData.blockScrollPos\n    //     if (orientation == 'vertical') {\n    //         const top = axisScrollblockPixelOffset \n    //         axisElement.style.top = top + 'px'\n    //         axisElement.style.left = 'auto'\n    //     } else { // orientation = 'horizontal'\n    //         const left = axisScrollblockPixelOffset\n    //         axisElement.style.top = 'auto'\n    //         axisElement.style.left = left + 'px'\n    //     }\n    // }\n    // ========================= [ INTERNAL CONTENT MANAGEMENT SERVICES ]=====================\n\n\n    this.guardAgainstRunawayCaching = function () {\n      var _this$cradleParameter2 = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n          cacheMax = _this$cradleParameter2.cacheMax,\n          MAX_CACHE_OVER_RUN = _this$cradleParameter2.MAX_CACHE_OVER_RUN;\n      var cacheHandler = _this.cradleParameters.handlersRef.current.cacheHandler;\n      var modelComponentList = _this.content.cradleModelComponents;\n\n      if (cacheHandler.guardAgainstRunawayCaching(cacheMax, modelComponentList.length, MAX_CACHE_OVER_RUN)) {\n        _this.pareCacheToMax();\n      }\n    };\n\n    this.pareCacheToMax = function () {\n      var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n      var cache = cradleInheritedProperties.cache,\n          scrollerID = cradleInheritedProperties.scrollerID;\n\n      if (cache == 'keepload') {\n        var cradleHandlers = _this.cradleParameters.handlersRef.current;\n        var cacheHandler = cradleHandlers.cacheHandler,\n            serviceHandler = cradleHandlers.serviceHandler;\n\n        var modelIndexList = _this.getModelIndexList();\n\n        var deleteListCallback = serviceHandler.callbacks.deleteListCallback;\n        var dListCallback;\n\n        if (deleteListCallback) {\n          dListCallback = function dListCallback(deleteList) {\n            deleteListCallback('pare cache to cacheMax', deleteList);\n          };\n        }\n\n        if (cacheHandler.pareCacheToMax(cradleInheritedProperties.cacheMax, modelIndexList, dListCallback, scrollerID)) {\n          cacheHandler.cacheProps.modified = true;\n          cacheHandler.renderPortalList();\n        }\n      }\n    }; // ==========================[ EXTERNAL SERVICE SUPPORT ]=======================\n    // supports clearCache\n\n\n    this.clearCradle = function () {\n      var cradleContent = _this.content;\n      var cacheHandler = _this.cradleParameters.handlersRef.current.cacheHandler;\n      cradleContent.cradleModelComponents = [];\n      cradleContent.headModelComponents = [];\n      cradleContent.tailModelComponents = [];\n    };\n\n    this.cradleParameters = cradleParameters;\n  } // called from serviceHandler getCradleIndexMap\n  // also supports pareCacheToMax, matchCacheToCradle\n\n\n  _createClass(ContentHandler, [{\n    key: \"getModelIndexList\",\n    value: function getModelIndexList() {\n      var cradleModelComponents = this.content.cradleModelComponents;\n\n      if (!cradleModelComponents) {\n        return [];\n      } else {\n        return cradleModelComponents.map(function (item) {\n          return item.props.index;\n        });\n      }\n    } // called from service handler's remapIndexes, as last step\n\n  }, {\n    key: \"reconcileCellFrames\",\n    value: function reconcileCellFrames(modifiedIndexesList) {\n      if (!modifiedIndexesList.length) return;\n      var cradleModelComponents = this.content.cradleModelComponents;\n      var cacheHandler = this.cradleParameters.handlersRef.current.cacheHandler;\n      var indexToItemIDMap = cacheHandler.cacheProps.indexToItemIDMap;\n\n      function processComponent(component, i, array) {\n        var _component$props = component.props,\n            index = _component$props.index,\n            itemID = _component$props.itemID;\n\n        if (modifiedIndexesList.includes(index)) {\n          var newItemID = indexToItemIDMap.has(index) ? indexToItemIDMap.get(index) : cacheHandler.getNewItemID();\n\n          if (newItemID != itemID) {\n            // defensive; shouldn't happen\n            array[i] = react_1[\"default\"].cloneElement(component, {\n              itemID: newItemID\n            });\n          }\n        }\n      }\n\n      cradleModelComponents.forEach(processComponent);\n      this.content.headModelComponents = cradleModelComponents.slice(0, this.content.headModelComponents.length);\n      this.content.tailModelComponents = cradleModelComponents.slice(this.content.headModelComponents.length);\n    } // supports moveIndex and insertRemoveIndex\n\n  }, {\n    key: \"changeCradleItemIDs\",\n    value: function changeCradleItemIDs(changeList) {\n      if (changeList.length == 0) return;\n      var cacheHandler = this.cradleParameters.handlersRef.current.cacheHandler;\n      var _cacheHandler$cachePr = cacheHandler.cacheProps,\n          indexToItemIDMap = _cacheHandler$cachePr.indexToItemIDMap,\n          metadataMap = _cacheHandler$cachePr.metadataMap;\n      var cradleModelComponents = this.content.cradleModelComponents;\n\n      function processcomponent(component, i, array) {\n        var index = component.props.index;\n        var ptr = changeList.indexOf(index);\n\n        if (ptr != -1) {\n          var itemID = indexToItemIDMap.get(index);\n          array[i] = react_1[\"default\"].cloneElement(component, {\n            itemID: itemID\n          });\n        }\n      }\n\n      cradleModelComponents.forEach(processcomponent);\n      this.content.headModelComponents = cradleModelComponents.slice(0, this.content.headModelComponents.length);\n      this.content.tailModelComponents = cradleModelComponents.slice(this.content.headModelComponents.length);\n    } // supports insertRemoveIndex\n\n  }, {\n    key: \"createNewItemIDs\",\n    value: function createNewItemIDs(newList) {\n      var cacheHandler = this.cradleParameters.handlersRef.current.cacheHandler;\n      var cradleModelComponents = this.content.cradleModelComponents;\n\n      function processcomponent(component, i, array) {\n        var index = component.props.index;\n        var ptr = newList.indexOf(index);\n\n        if (ptr != -1) {\n          var newItemID = cacheHandler.getNewItemID();\n          array[i] = react_1[\"default\"].cloneElement(component, {\n            itemID: newItemID\n          });\n        }\n      }\n\n      cradleModelComponents.forEach(processcomponent);\n      this.content.headModelComponents = cradleModelComponents.slice(0, this.content.headModelComponents.length);\n      this.content.tailModelComponents = cradleModelComponents.slice(this.content.headModelComponents.length);\n    }\n  }]);\n\n  return ContentHandler;\n}();\n\nexports[\"default\"] = ContentHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/contenthandler.tsx\n")},"./src/cradle/interrupthandler.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval(" // interrupthandler.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    This module holds the callbacks for the Cradle structure listeners:\n    - cradleResizeObserverCallback // responds to resize of the two cradle grids\n        when the cradle is in variable layout\n    - cradleIntersectionObserverCallback // responds to move of both cradle grids outside viewport\n        this initiates the repositioning protocol\n    - axisTriggerlinesObserverCallback // responds to crossing of forward and backward triggerlines\n        in relation to the viewport, and triggers rollover and re-allocation of cradle content\n\n    viewportResizing is handled by viewport\n    scrolling interrupts handled by scrollHandler\n*/\n\nvar resize_observer_1 = __webpack_require__(/*! @juggle/resize-observer */ \"./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n\nvar ResizeObserver = window['ResizeObserver'] || resize_observer_1.ResizeObserver;\n\nvar InterruptHandler = /*#__PURE__*/_createClass(function InterruptHandler(cradleParameters) {\n  var _this = this;\n\n  _classCallCheck(this, InterruptHandler);\n\n  this.isTailCradleInView = false;\n  this.isHeadCradleInView = false; // TODO: stub\n\n  this.cradleResizeObserverCallback = function (entries) {\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler; // stateHandler.setCradleResizeState('resizecradle')\n\n    if (_this.signals.pauseCradleResizeObserver) return;\n  };\n\n  this.axisTriggerlinesObserverCallback = function (entries) {\n    // console.log('interruptHandler triggerlinecallback', entries)\n    if (_this.signals.pauseTriggerlinesObserver) {\n      return;\n    }\n\n    var testrootbounds = entries[0].rootBounds;\n\n    if (testrootbounds.width == 0 && testrootbounds.height == 0) {\n      // reparenting\n      return;\n    }\n\n    var _this$cradleParameter = _this.cradleParameters.handlersRef.current,\n        contentHandler = _this$cradleParameter.contentHandler,\n        stateHandler = _this$cradleParameter.stateHandler,\n        scrollHandler = _this$cradleParameter.scrollHandler,\n        layoutHandler = _this$cradleParameter.layoutHandler;\n\n    if (stateHandler.isMountedRef.current) {\n      var scrollData = scrollHandler.scrollData;\n\n      if (scrollData.start != scrollData.current || scrollData.current != scrollData.previous) {\n        scrollData.previousupdate = scrollData.currentupdate;\n        scrollData.currentupdate = scrollData.current;\n        var isViewportScrollingForward = scrollData.previous < scrollData.current;\n        contentHandler.updateCradleContent(isViewportScrollingForward, entries, 'triggerlinesObserver');\n      }\n    }\n  };\n\n  this.cradleIntersectionObserverCallback = function (entries) {\n    var _a;\n\n    var signals = _this.signals;\n    var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n        stateHandler = _this$cradleParameter2.stateHandler,\n        serviceHandler = _this$cradleParameter2.serviceHandler;\n\n    if (signals.pauseCradleIntersectionObserver) {\n      return;\n    }\n\n    for (var i = 0; i < entries.length; i++) {\n      var entry = entries[i];\n\n      if (entry.target.dataset.type == 'head') {\n        _this.isHeadCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n        ;\n      } else {\n        _this.isTailCradleInView = entry.isIntersecting || entry.rootBounds.width == 0 && entry.rootBounds.height == 0 // reparenting\n        ;\n      }\n    }\n\n    _this.signals.repositioningRequired = !_this.isHeadCradleInView && !_this.isTailCradleInView;\n    var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n\n    if (_this.signals.repositioningRequired) // start reposition if no other interrupts are underway\n      {\n        var cradleState = stateHandler.cradleStateRef.current;\n\n        if (!((_a = viewportInterruptProperties.isReparentingRef) === null || _a === void 0 ? void 0 : _a.current) && !(cradleState == 'repositioningRender') && !(cradleState == 'repositioningContinuation') && !(cradleState == 'finishreposition') && !(cradleState == 'renderupdatedcontent') && !(cradleState == 'finishupdatedcontent') && !viewportInterruptProperties.isResizing && !(cradleState == 'finishviewportresize')) {\n          var viewportelement = viewportInterruptProperties.elementRef.current;\n          var scrollerID = _this.cradleParameters.cradleInheritedPropertiesRef.current.scrollerID;\n\n          if (!viewportelement) {\n            console.log('SYSTEM: viewport element not set in cradleIntersectionObserverCallback', scrollerID, viewportInterruptProperties);\n            return;\n          } // update dimensions with cradle intersection. See also dimension update in viewport.tsx for resize\n\n\n          var rect = viewportelement.getBoundingClientRect();\n          var top = rect.top,\n              right = rect.right,\n              bottom = rect.bottom,\n              left = rect.left;\n          var width = right - left,\n              height = bottom - top; // update for scrolltracker\n\n          viewportInterruptProperties.viewportDimensions = {\n            top: top,\n            right: right,\n            bottom: bottom,\n            left: left,\n            width: width,\n            height: height\n          };\n          var repositioningFlagCallback = serviceHandler.callbacks.repositioningFlagCallback;\n          repositioningFlagCallback && repositioningFlagCallback(true);\n          if (stateHandler.isMountedRef.current) stateHandler.setCradleState('startreposition');\n        }\n      }\n  }; // for adjusting to content re-sizing\n\n\n  this.cradleResize = {\n    observer: null,\n    callback: this.cradleResizeObserverCallback,\n    connectElements: function connectElements() {\n      var observer = _this.cradleResize.observer;\n      var cradleElements = _this.cradleParameters.handlersRef.current.layoutHandler.elements;\n      observer.observe(cradleElements.headRef.current);\n      observer.observe(cradleElements.tailRef.current);\n    },\n    createObserver: function createObserver() {\n      _this.cradleResize.observer = new ResizeObserver(_this.cradleResize.callback);\n      return _this.cradleResize.observer;\n    }\n  };\n  this.cradleIntersect = {\n    observer: null,\n    callback: this.cradleIntersectionObserverCallback,\n    connectElements: function connectElements() {\n      var observer = _this.cradleIntersect.observer;\n      var cradleElements = _this.cradleParameters.handlersRef.current.layoutHandler.elements;\n      observer.observe(cradleElements.headRef.current);\n      observer.observe(cradleElements.tailRef.current);\n    },\n    createObserver: function createObserver() {\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      _this.cradleIntersect.observer = new IntersectionObserver(_this.cradleIntersect.callback, {\n        root: viewportInterruptProperties.elementRef.current,\n        threshold: 0\n      });\n      return _this.cradleIntersect.observer;\n    }\n  };\n  this.triggerlinesIntersect = {\n    observer: null,\n    callback: this.axisTriggerlinesObserverCallback,\n    connectElements: function connectElements() {\n      var observer = _this.triggerlinesIntersect.observer;\n      var cradleElements = _this.cradleParameters.handlersRef.current.layoutHandler.elements;\n\n      if (cradleElements.triggercellTriggerlineHeadRef.current && cradleElements.triggercellTriggerlineTailRef.current) {\n        observer.observe(cradleElements.triggercellTriggerlineHeadRef.current);\n        observer.observe(cradleElements.triggercellTriggerlineTailRef.current);\n      }\n    },\n    createObserver: function createObserver() {\n      var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n      _this.triggerlinesIntersect.observer = new IntersectionObserver(_this.triggerlinesIntersect.callback, {\n        root: viewportInterruptProperties.elementRef.current,\n        threshold: 0\n      });\n      return _this.triggerlinesIntersect.observer;\n    }\n  };\n  this.signals = {\n    repositioningRequired: false,\n    pauseTriggerlinesObserver: false,\n    pauseCradleIntersectionObserver: false,\n    pauseCradleResizeObserver: false,\n    pauseScrollingEffects: false\n  };\n  /*\n      invoked for\n      cradle:\n      - change into cache\n      - trigger cradleresizing\n      - trigger reconfiguration\n      - trigger pivot\n      servicehandler:\n      - call reload\n  */\n\n  this.pauseInterrupts = function () {\n    var signals = _this.signals;\n    signals.pauseTriggerlinesObserver = true;\n    signals.pauseCradleIntersectionObserver = true;\n    signals.pauseCradleResizeObserver = true;\n    signals.pauseScrollingEffects = true;\n  };\n  /*\n      invoked for\n      cradle:\n      - restoreinterrupts\n  */\n\n\n  this.restoreInterrupts = function () {\n    var signals = _this.signals;\n    signals.pauseTriggerlinesObserver = false;\n    signals.pauseCradleIntersectionObserver = false;\n    signals.pauseCradleResizeObserver = false;\n    signals.pauseScrollingEffects = false;\n  };\n\n  this.cradleParameters = cradleParameters;\n});\n\nexports[\"default\"] = InterruptHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/interrupthandler.tsx\n")},"./src/cradle/layouthandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval(' // layouthandler.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    This module holds references to\n    - the structural elements of the cradle\n    - the key control values of the cradle\n\n    The structural elements are the axis, head (grid), tail (grid),\n        and the forward and backward triggerlines\n    The key control values are the blockScrollPos (scrollTop or scrollLeft), the block scroll\n        property ("scrollTop" or "scrollLeft"), the targetAxisReferenceIndex (first index of the\n        tail block), and the targetAxisViewportPixelOffset (pixels offset from the edge of the\n        viewport)\n*/\n\nvar LayoutHandler = /*#__PURE__*/function () {\n  function LayoutHandler(cradleParameters) {\n    _classCallCheck(this, LayoutHandler);\n\n    this.triggercellIsInTail = false; // cradlePositionData controls the relative positions of the scaffold elements\n\n    this.cradlePositionData = {\n      /*\n          "block" = cradleblock, which is the element that is scrolled\n               blockScrollPos is set by scrollHandler during and after scrolling,\n          and by setCradleContent in contentHandler, which repositions the cradle.\n               blockScrollPos is used by\n              - cradle initialization in response to reparenting interrupt\n              - setCradleContent\n           */\n      blockScrollPos: null,\n\n      /*\n          values can be "scrollTop" or "scrollLeft" (of the viewport element) depending on orientation\n               blockScrollProperty is set by the orientation reconfiguration effect in cradle module.\n               it is used where blockScrollPos is used above.\n      */\n      blockScrollProperty: null,\n\n      /*\n          targetAxisReferenceIndex is set by\n              - setCradleContent\n              - updateCradleContent\n              - layoutHandler (initialization)\n              - scrollHandler (during and after scroll)\n              - host scrollToItem call\n               targetAxisReferenceIndex is used by\n              - scrollTrackerArgs in cradle module\n              - requestedAxisReferenceIndex in setCradleContent\n      */\n      targetAxisReferenceIndex: null,\n\n      /*\n          targetAxisViewportPixelOffset is set by\n              - setCradleContent\n              - updateCradleContent\n              - layoutHandler (initialization)\n              - scrollHandler (during and after scroll)\n              - pivot effect (change of orientation) in cradle module\n               targetAxisViewportPixelOffset is used by\n              - previousAxisOffset in pivot effect\n              - setCradleContent\n           */\n      targetAxisViewportPixelOffset: null // into the viewport\n\n    };\n    this.cradleParameters = cradleParameters;\n    var _cradleParameters$cra = cradleParameters.cradleInternalPropertiesRef.current.cradleElementsRef.current,\n        axisRef = _cradleParameters$cra.axisRef,\n        headRef = _cradleParameters$cra.headRef,\n        tailRef = _cradleParameters$cra.tailRef,\n        triggercellTriggerlineHeadRef = _cradleParameters$cra.triggercellTriggerlineHeadRef,\n        triggercellTriggerlineTailRef = _cradleParameters$cra.triggercellTriggerlineTailRef;\n    this.elements = {\n      axisRef: axisRef,\n      headRef: headRef,\n      tailRef: tailRef,\n      triggercellTriggerlineHeadRef: triggercellTriggerlineHeadRef,\n      triggercellTriggerlineTailRef: triggercellTriggerlineTailRef\n    };\n    var startingIndex = this.cradleParameters.cradleInheritedPropertiesRef.current.startingIndex;\n    var listsize = this.cradleParameters.cradleInternalPropertiesRef.current.listsize; // progression of references: implied->target\n\n    this.cradlePositionData.targetAxisReferenceIndex = Math.min(startingIndex, listsize - 1) || 0;\n    this.cradlePositionData.targetAxisViewportPixelOffset = 0;\n  }\n\n  _createClass(LayoutHandler, [{\n    key: "triggerlineSpan",\n    get: function get() {\n      var orientation = this.cradleParameters.cradleInheritedPropertiesRef.current.orientation;\n      return orientation == \'vertical\' ? this.elements.triggercellTriggerlineTailRef.current.offsetTop - this.elements.triggercellTriggerlineHeadRef.current.offsetTop : // horizontal\n      this.elements.triggercellTriggerlineTailRef.current.offsetLeft - this.elements.triggercellTriggerlineHeadRef.current.offsetLeft;\n    }\n  }]);\n\n  return LayoutHandler;\n}();\n\nexports["default"] = LayoutHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/layouthandler.tsx\n')},"./src/cradle/scrollhandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval(" // scrollhandler.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    This module holds the response to scrolling. It also triggers an onAfterScroll event (after a timeout)\n    It's main job is to maintain records of scrollPos, targetAxisReferenceIndex, and\n        targetAxisViewportPixelOffset\n*/\n\nvar ScrollHandler = /*#__PURE__*/_createClass(function ScrollHandler(cradleParameters) {\n  var _this = this;\n\n  _classCallCheck(this, ScrollHandler);\n\n  this.scrollData = {\n    start: 0,\n    current: 0,\n    previous: 0,\n    previousupdate: 0,\n    currentupdate: 0\n  };\n  this._scrolltimerid = null;\n  this.isScrolling = false;\n\n  this.resetScrollData = function (scrollPosition) {\n    var scrollData = _this.scrollData;\n    scrollData.start = scrollData.current = scrollData.previous = scrollData.previousupdate = scrollData.currentupdate = scrollPosition;\n  };\n\n  this.onScroll = function (e) {\n    var _this$cradleParameter = _this.cradleParameters.cradleInheritedPropertiesRef.current,\n        scrollerID = _this$cradleParameter.scrollerID,\n        SCROLL_TIMEOUT_FOR_ONAFTERSCROLL = _this$cradleParameter.SCROLL_TIMEOUT_FOR_ONAFTERSCROLL;\n    var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n    var viewportElement = viewportInterruptProperties.elementRef.current; // const scrollblockElement = viewportElement.firstChild\n    // const top = scrollblockElement.offsetTop\n    // scrollblockElement.style.top = (top + 5) + 'px'\n\n    var scrollPositionCurrent = _this.cradleParameters.cradleInheritedPropertiesRef.current.orientation == 'vertical' ? viewportElement.scrollTop : viewportElement.scrollLeft;\n    clearTimeout(_this._scrolltimerid);\n\n    if (viewportElement.clientWidth == 0 && viewportElement.clientHeight == 0) {\n      // in cache\n      return;\n    }\n\n    if (scrollPositionCurrent < 0) {\n      // for Safari\n      return;\n    }\n\n    var signals = _this.cradleParameters.handlersRef.current.interruptHandler.signals;\n\n    if (signals.pauseScrollingEffects) {\n      return;\n    }\n\n    if (!_this.isScrolling) {\n      _this.isScrolling = true;\n      _this.scrollData.start = scrollPositionCurrent;\n      _this.scrollData.currentupdate = scrollPositionCurrent;\n    }\n\n    var layoutHandler = _this.cradleParameters.handlersRef.current.layoutHandler;\n    var cradlePositionData = layoutHandler.cradlePositionData; // keep up to date in case of reparenting interrupt\n\n    cradlePositionData.blockScrollPos = scrollPositionCurrent;\n    _this.scrollData.previous = _this.scrollData.current;\n    _this.scrollData.current = scrollPositionCurrent;\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler;\n    var cradleState = stateHandler.cradleStateRef.current;\n    var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n        contentHandler = _this$cradleParameter2.contentHandler,\n        serviceHandler = _this$cradleParameter2.serviceHandler;\n\n    if (!viewportInterruptProperties.isResizing) {\n      if (cradleState == 'repositioningRender' || cradleState == 'repositioningContinuation') {\n        _this.calcImpliedRepositioningData();\n\n        if (cradleState == 'repositioningRender') stateHandler.setCradleState('repositioningContinuation');\n      }\n    }\n\n    _this._scrolltimerid = setTimeout(function () {\n      _this.onAfterScroll();\n    }, SCROLL_TIMEOUT_FOR_ONAFTERSCROLL);\n    return false;\n  };\n\n  this.onAfterScroll = function () {\n    _this.isScrolling = false;\n    var _this$cradleParameter3 = _this.cradleParameters.handlersRef.current,\n        stateHandler = _this$cradleParameter3.stateHandler,\n        contentHandler = _this$cradleParameter3.contentHandler,\n        serviceHandler = _this$cradleParameter3.serviceHandler;\n    var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n    var cradleInheritedProperties = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    var cradleState = stateHandler.cradleStateRef.current;\n\n    switch (cradleState) {\n      case 'repositioningRender':\n      case 'repositioningContinuation':\n        {\n          _this.updateBlockScrollPos();\n\n          var repositioningFlagCallback = serviceHandler.callbacks.repositioningFlagCallback;\n          repositioningFlagCallback && repositioningFlagCallback(false);\n          stateHandler.setCradleState('finishreposition');\n          break;\n        }\n\n      default:\n        {\n          if (_this.scrollData.start != _this.scrollData.current || _this.scrollData.current != _this.scrollData.previous) {\n            if (stateHandler.isMountedRef.current) {\n              _this.updateReferenceData();\n            }\n          }\n        }\n    }\n\n    var cache = cradleInheritedProperties.cache,\n        layout = cradleInheritedProperties.layout;\n\n    if (cache == 'keepload') {\n      contentHandler.pareCacheToMax();\n    } // if (!['repositioningRender','repositioningContinuation'].includes(cradleState) &&\n    //     (layout == 'variable')) {\n    //     if ((this.scrollData.start != this.scrollData.current) || \n    //         (this.scrollData.current != this.scrollData.previous)) {\n    //         stateHandler.setCradleState('resetaftervariablescroll')\n    //     }\n    // }\n\n  }; // after scroll, but not after repositioning\n\n\n  this.updateReferenceData = function () {\n    var _this$cradleParameter4 = _this.cradleParameters.handlersRef.current,\n        stateHandler = _this$cradleParameter4.stateHandler,\n        layoutHandler = _this$cradleParameter4.layoutHandler;\n    var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n    if (!stateHandler.isMountedRef.current) return;\n    var axisVisiblePixelOffset;\n    var cradleElements = layoutHandler.elements;\n    var axisElement = cradleElements.axisRef.current;\n    var viewportElement = viewportInterruptProperties.elementRef.current;\n\n    if (cradleProps.orientation == 'vertical') {\n      axisVisiblePixelOffset = axisElement.offsetTop - viewportElement.scrollTop; // console.log('scrollHandler: updating targetAxisViewportPixelOffset, axisElement.offsetTop, viewportElement.scrollTop', \n      //     axisVisiblePixelOffset, axisElement.offsetTop, viewportElement.scrollTop)\n    } else {\n      axisVisiblePixelOffset = axisElement.offsetLeft - viewportElement.scrollLeft;\n    }\n\n    var cradlePositionData = layoutHandler.cradlePositionData;\n    cradlePositionData.targetAxisViewportPixelOffset = axisVisiblePixelOffset;\n\n    if (!viewportInterruptProperties.isResizing) {\n      _this.updateBlockScrollPos();\n    }\n  }; // called from finishreposition state change call above\n  // called from updateReferenceData\n\n\n  this.updateBlockScrollPos = function () {\n    var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n    var layoutHandler = _this.cradleParameters.handlersRef.current.layoutHandler;\n    var cradlePositionData = layoutHandler.cradlePositionData;\n    var viewportElement = viewportInterruptProperties.elementRef.current;\n\n    if (!(viewportElement.clientWidth == 0 && viewportElement.clientHeight == 0)) {\n      // in cache\n      if (cradleProps.orientation == 'vertical') {\n        cradlePositionData.blockScrollPos = viewportElement.scrollTop;\n      } else {\n        cradlePositionData.blockScrollPos = viewportElement.scrollLeft;\n      }\n    }\n  };\n\n  this.calcImpliedRepositioningData = function () {\n    var viewportInterruptProperties = _this.cradleParameters.viewportInterruptPropertiesRef.current;\n    var cradleProps = _this.cradleParameters.cradleInheritedPropertiesRef.current;\n    var cradleConfig = _this.cradleParameters.cradleInternalPropertiesRef.current;\n    var crosscount = cradleConfig.crosscount,\n        listsize = cradleConfig.listsize;\n    var viewportElement = viewportInterruptProperties.elementRef.current;\n    var orientation = cradleProps.orientation;\n    var scrollPos, cellLength;\n\n    if (orientation == 'vertical') {\n      scrollPos = viewportElement.scrollTop;\n      cellLength = cradleProps.cellHeight + cradleProps.gap;\n    } else {\n      scrollPos = viewportElement.scrollLeft;\n      cellLength = cradleProps.cellWidth + cradleProps.gap;\n    }\n\n    var axisPixelOffset = cellLength - scrollPos % cellLength;\n\n    if (axisPixelOffset == cellLength + cradleProps.padding) {\n      axisPixelOffset = 0;\n    }\n\n    var axisRowIndex = Math.ceil((scrollPos - cradleProps.padding) / cellLength);\n    var axisReferenceIndex = axisRowIndex * crosscount;\n    axisReferenceIndex = Math.min(axisReferenceIndex, listsize - 1);\n    var diff = axisReferenceIndex % crosscount;\n    axisReferenceIndex -= diff;\n    if (axisReferenceIndex == 0) axisPixelOffset = 0; // defensive\n\n    var cradlePositionData = _this.cradleParameters.handlersRef.current.layoutHandler.cradlePositionData;\n    cradlePositionData.targetAxisReferenceIndex = axisReferenceIndex; // console.log('scrollHandler.calcImpliedRepositioningData setting targetAxisViewportPixelOffset',\n    //     axisPixelOffset)\n\n    cradlePositionData.targetAxisViewportPixelOffset = axisPixelOffset;\n    var repositioningIndexCallback = _this.cradleParameters.handlersRef.current.serviceHandler.callbacks.repositioningIndexCallback;\n    repositioningIndexCallback && repositioningIndexCallback(axisReferenceIndex);\n  };\n\n  this.cradleParameters = cradleParameters;\n});\n\nexports[\"default\"] = ScrollHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/scrollhandler.tsx\n")},"./src/cradle/servicehandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval(' // servicehandler.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    This module fields service requests from the host. There are two forms\n    - streaming from the scroller to the host\n    - function calls from the user to the scroller\n\n    For the list of data streas, see the constructor.\n\n    The function calls avaiable to the host are:\n        scrollToItem,\n        reload,\n        setListsize,\n        clearCache,\n\n        getCacheIndexMap,\n        getCacheItemMap,\n        getCradleIndexMap,\n        remapIndexes,\n        moveIndex,\n        insertIndex,\n        removeIndex,\n    \n    The functions listed are defined in this module.\n\n    There are important supporting functions in cacheHandler and contentHandler. stateHandler is\n    often invoked to change state upon servicing requests.\n*/\n\nvar ServiceHandler = /*#__PURE__*/_createClass(function ServiceHandler(cradleParameters) {\n  var _this = this;\n\n  _classCallCheck(this, ServiceHandler);\n\n  // ========================[ GENERAL ]============================\n  this.reload = function () {\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler;\n    var interruptHandler = _this.cradleParameters.handlersRef.current.interruptHandler;\n    interruptHandler.pauseInterrupts();\n    stateHandler.setCradleState(\'reload\');\n  };\n\n  this.scrollToItem = function (index) {\n    index = Math.max(0, index);\n    var signals = _this.cradleParameters.handlersRef.current.interruptHandler.signals;\n    var _this$cradleParameter = _this.cradleParameters.handlersRef.current,\n        layoutHandler = _this$cradleParameter.layoutHandler,\n        stateHandler = _this$cradleParameter.stateHandler;\n    signals.pauseScrollingEffects = true;\n    layoutHandler.cradlePositionData.targetAxisReferenceIndex = index;\n    stateHandler.setCradleState(\'scrollto\');\n  };\n\n  this.setListsize = function (newlistsize) {\n    newlistsize = Math.max(0, newlistsize);\n    var _this$cradleParameter2 = _this.cradleParameters.handlersRef.current,\n        cacheHandler = _this$cradleParameter2.cacheHandler,\n        stateHandler = _this$cradleParameter2.stateHandler;\n    var _this$callbacks = _this.callbacks,\n        deleteListCallback = _this$callbacks.deleteListCallback,\n        changeListsizeCallback = _this$callbacks.changeListsizeCallback;\n    var currentlistsize = _this.cradleParameters.cradleInternalPropertiesRef.current.listsize;\n    var cache = _this.cradleParameters.cradleInheritedPropertiesRef.current.cache;\n    var dListCallback;\n\n    if (deleteListCallback) {\n      dListCallback = function dListCallback(deleteList) {\n        deleteListCallback(\'change list size intervention\', deleteList);\n      };\n    }\n\n    cacheHandler.changeListsize(newlistsize, dListCallback, changeListsizeCallback);\n\n    if (cache == \'preload\' && newlistsize > currentlistsize) {\n      stateHandler.setCradleState(\'startpreload\');\n    }\n  }; // ======================[ GET SNAPSHOTS ]========================\n\n\n  this.getCacheIndexMap = function () {\n    var cacheHandler = _this.cradleParameters.handlersRef.current.cacheHandler;\n    return cacheHandler.getCacheIndexMap();\n  };\n\n  this.getCacheItemMap = function () {\n    var cacheHandler = _this.cradleParameters.handlersRef.current.cacheHandler;\n    return cacheHandler.getCacheItemMap();\n  };\n\n  this.getCradleIndexMap = function () {\n    var _this$cradleParameter3 = _this.cradleParameters.handlersRef.current,\n        cacheHandler = _this$cradleParameter3.cacheHandler,\n        contentHandler = _this$cradleParameter3.contentHandler;\n    var modelIndexList = contentHandler.getModelIndexList();\n    return cacheHandler.getCradleIndexMap(modelIndexList);\n  }; // =================[ CACHE MANAGEMENT REQUESTS ]==================\n\n\n  this.clearCache = function () {\n    var stateHandler = _this.cradleParameters.handlersRef.current.stateHandler;\n    stateHandler.setCradleState(\'clearcache\');\n    return true;\n  };\n\n  this.remapIndexes = function (changeMap) {\n    if (changeMap.size == 0) return []; // nothing to do\n\n    var _this$cradleParameter4 = _this.cradleParameters.handlersRef.current,\n        cacheHandler = _this$cradleParameter4.cacheHandler,\n        contentHandler = _this$cradleParameter4.contentHandler,\n        stateHandler = _this$cradleParameter4.stateHandler;\n    var _cacheHandler$cachePr = cacheHandler.cacheProps,\n        metadataMap = _cacheHandler$cachePr.metadataMap,\n        portalMap = _cacheHandler$cachePr.portalMap,\n        indexToItemIDMap = _cacheHandler$cachePr.indexToItemIDMap;\n    var indexesToDeleteList = [];\n    var changeIndexToItemIDMap = new Map();\n    var errorEntriesMap = new Map(); // =====================[ PREPARATION ]======================\n    // ------------ filter out inoperable indexes and itemIDs ------------\n\n    changeMap.forEach(function (itemID, index) {\n      if (itemID === null || itemID === undefined) {\n        indexesToDeleteList.push(index);\n      } else {\n        if (typeof itemID == \'string\') {\n          errorEntriesMap.set(index, \'itemID is a string\');\n        } else if (!Number.isInteger(itemID)) {\n          errorEntriesMap.set(index, \'itemID is not an integer\');\n        } else if (!indexToItemIDMap.has(index)) {\n          errorEntriesMap.set(index, \'index not in cache\');\n        } else if (indexToItemIDMap.get(index) == itemID) {\n          errorEntriesMap.set(index, "target itemID ".concat(itemID, " has not changed"));\n        } else if (!metadataMap.has(itemID)) {\n          errorEntriesMap.set(index, "target itemID ".concat(itemID, " not in cache"));\n        } else {\n          changeIndexToItemIDMap.set(index, itemID);\n        }\n      }\n    }); // -------------- filter out duplicate itemIDs ------------\n\n    var mapsize = changeIndexToItemIDMap.size;\n    var itemIDSet = new Set(changeIndexToItemIDMap.values());\n    var itemsetsize = itemIDSet.size;\n\n    if (mapsize != itemsetsize) {\n      // there must be duplicate itemIDs\n      var itemIDCountMap = new Map();\n      changeIndexToItemIDMap.forEach(function (itemID, index) {\n        if (!itemIDCountMap.has(itemID)) {\n          itemIDCountMap.set(itemID, 1);\n        } else {\n          var count = itemIDCountMap.get(itemID);\n          itemIDCountMap.set(itemID, ++count);\n        }\n      });\n      var duplicateItemsMap = new Map();\n      itemIDCountMap.forEach(function (count, itemID) {\n        if (count > 1) {\n          duplicateItemsMap.set(itemID, count);\n        }\n      });\n      var duplicatesToRemoveList = [];\n      changeIndexToItemIDMap.forEach(function (itemID, index) {\n        if (duplicateItemsMap.has(itemID)) {\n          duplicatesToRemoveList.push(index);\n        }\n      });\n      duplicatesToRemoveList.forEach(function (index) {\n        var itemID = changeIndexToItemIDMap.get(index);\n        var count = duplicateItemsMap.get(itemID);\n        errorEntriesMap.set(index, "target itemID ".concat(itemID, " has duplicates (").concat(count, ")"));\n        changeIndexToItemIDMap["delete"](index);\n      });\n    } // ------------ capture map before changes ----------\n    // ... this map is used later to identify orphaned item and index cache records for deletion\n    // from the list of changes\n    // both sides of change map...\n\n\n    var originalMap = new Map(); // index => itemID; before change\n\n    changeIndexToItemIDMap.forEach(function (itemID, index) {\n      originalMap.set(index, indexToItemIDMap.get(index)); // index to be mapped\n\n      originalMap.set(metadataMap.get(itemID).index, itemID); // target itemID\n    }); // ... and from the list of indexes to be deleted\n\n    indexesToDeleteList.forEach(function (index) {\n      originalMap.set(index, indexToItemIDMap.get(index));\n    }); // ======================[ CACHE OPERATIONS ]================\n    // --------------- delete listed indexes ---------\n    // for indexes set to null or undefined\n    // associated itemID\'s will be orphaned, but could be remapped.\n    // orphans are resolved below\n\n    if (indexesToDeleteList.length) {\n      indexesToDeleteList.forEach(function (index) {\n        indexToItemIDMap["delete"](index);\n      });\n    } // ----------- apply filtered changes to cache index map and itemID map ----------\n    // at this point every remaining index listed will change its mapping\n    // const processedMap = new Map() // index => itemID; change has been applied\n\n\n    var processedIndexList = []; // make changes\n\n    changeIndexToItemIDMap.forEach(function (itemID, index) {\n      indexToItemIDMap.set(index, itemID); // modiication applied, part 1\n\n      var itemdata = metadataMap.get(itemID);\n      itemdata.index = index; // modification applied, part 2\n      // processedMap.set(index,itemID)\n\n      processedIndexList.push(index);\n    }); // -------------- look for and delete item and index orphans --------------------\n    // if the original item\'s index has not changed, then it has not been remapped, \n    //     it is orphaned, and the item is deleted\n    // if the item\'s index has changed, but the original item index map still points to the item,\n    //     then the index is orphaned (duplicate), and deleted\n\n    var deletedItemIDToIndexMap = new Map(); // index => itemID; orphaned index\n\n    var deletedIndexToItemIDMap = new Map();\n    var portalHoldList = []; // hold deleted portals for deletion until after cradle synch\n\n    originalMap.forEach(function (originalItemID, originalItemIDIndex) {\n      var finalItemIDIndex = metadataMap.get(originalItemID).index;\n\n      if (originalItemIDIndex == finalItemIDIndex) {\n        // not remapped, therefore orphaned\n        deletedItemIDToIndexMap.set(originalItemID, originalItemIDIndex);\n        metadataMap["delete"](originalItemID);\n        portalHoldList.push(originalItemID);\n      } else {\n        // remapped, check for orphaned index\n        if (indexToItemIDMap.has(originalItemIDIndex)) {\n          var finalItemID = indexToItemIDMap.get(originalItemIDIndex);\n\n          if (finalItemID == originalItemID) {\n            // the index has not been remapped, therefore orphaned\n            deletedIndexToItemIDMap.set(originalItemIDIndex, originalItemID);\n            indexToItemIDMap["delete"](originalItemIDIndex);\n          }\n        }\n      }\n    }); // refresh the modified cache\n\n    cacheHandler.cacheProps.modified = true;\n    cacheHandler.renderPortalList(); // ------------- apply changes to extant cellFrames ------------\n    // these are used to reconcile cradle cellFrames, and also for return information\n    // const processedIndexList = Array.from(processedMap.keys())\n\n    var deletedOrphanedItemIndexList = Array.from(deletedItemIDToIndexMap.values());\n    var deletedOrphanedIndexList = Array.from(deletedIndexToItemIDMap.keys()); // for return information...\n\n    var deletedOrphanedItemIDList = Array.from(deletedItemIDToIndexMap.keys());\n    var modifiedIndexList = [].concat(processedIndexList, indexesToDeleteList, deletedOrphanedItemIndexList, deletedOrphanedIndexList);\n    modifiedIndexList = Array.from(new Set(modifiedIndexList.values())); // remove duplicates\n\n    contentHandler.reconcileCellFrames(modifiedIndexList);\n    cacheHandler.portalHoldList = portalHoldList;\n    stateHandler.setCradleState(\'applycellframechanges\'); // ---------- returns for user information --------------------\n\n    return [modifiedIndexList, processedIndexList, indexesToDeleteList, deletedOrphanedItemIDList, deletedOrphanedIndexList, errorEntriesMap, changeMap];\n  }; // move must be entirely within list bounds\n  // returns list of processed indexes\n\n\n  this.moveIndex = function (toindex, fromindex) {\n    var highrange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    // ------------- define parameters ---------------\n    var listsize = _this.cradleParameters.cradleInternalPropertiesRef.current.listsize; // remove nulls\n\n    toindex = toindex !== null && toindex !== void 0 ? toindex : 0;\n    fromindex = fromindex !== null && fromindex !== void 0 ? fromindex : 0;\n    highrange = highrange !== null && highrange !== void 0 ? highrange : fromindex;\n    toindex = Math.max(0, toindex);\n    fromindex = Math.max(0, fromindex);\n    highrange = Math.max(0, highrange); // keep within current list size\n\n    var listbound = listsize - 1;\n    toindex = toindex > listbound ? listbound : toindex;\n    fromindex = fromindex > listbound ? listbound : fromindex;\n    highrange = highrange > listbound ? listbound : highrange; // highrange must be >= fromindex\n\n    highrange = highrange >= fromindex ? highrange : fromindex;\n    var rangeincrement = highrange - fromindex + 1;\n    var moveincrement = toindex - fromindex; // ---------- constrain parameters --------------\n\n    if (fromindex == toindex) return []; // nothing to do\n    // move must be in list bounds\n\n    if (moveincrement > 0) {\n      // move up\n      var targettop = toindex + (rangeincrement - 1);\n      if (targettop > listbound) return []; // out of bounds\n    } // ----------- perform cache and cradle operations -----------\n\n\n    var _this$cradleParameter5 = _this.cradleParameters.handlersRef.current,\n        cacheHandler = _this$cradleParameter5.cacheHandler,\n        contentHandler = _this$cradleParameter5.contentHandler,\n        stateHandler = _this$cradleParameter5.stateHandler;\n    var processedIndexList = cacheHandler.moveIndex(toindex, fromindex, highrange);\n\n    if (processedIndexList.length) {\n      cacheHandler.cacheProps.modified = true;\n      cacheHandler.renderPortalList();\n      contentHandler.changeCradleItemIDs(processedIndexList);\n      stateHandler.setCradleState(\'applycellframechanges\');\n    }\n\n    return processedIndexList;\n  };\n\n  this.insertIndex = function (index) {\n    var rangehighindex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _this.insertRemoveIndex(index, rangehighindex, +1);\n  };\n\n  this.removeIndex = function (index) {\n    var rangehighindex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _this.insertRemoveIndex(index, rangehighindex, -1);\n  }; // shared logic. Returns lists of items changed, and items replaced (new items for insert)\n  // this operation changes the listsize\n\n\n  this.insertRemoveIndex = function (index, rangehighindex, increment) {\n    index = index !== null && index !== void 0 ? index : 0;\n    rangehighindex = rangehighindex !== null && rangehighindex !== void 0 ? rangehighindex : index;\n    index = Math.max(0, index);\n    rangehighindex = Math.max(rangehighindex, index);\n    var _this$cradleParameter6 = _this.cradleParameters.handlersRef.current,\n        cacheHandler = _this$cradleParameter6.cacheHandler,\n        contentHandler = _this$cradleParameter6.contentHandler,\n        stateHandler = _this$cradleParameter6.stateHandler;\n    var listsize = _this.cradleParameters.cradleInternalPropertiesRef.current.listsize;\n\n    var _cacheHandler$insertR = cacheHandler.insertRemoveIndex(index, rangehighindex, increment, listsize),\n        _cacheHandler$insertR2 = _slicedToArray(_cacheHandler$insertR, 4),\n        changeList = _cacheHandler$insertR2[0],\n        replaceList = _cacheHandler$insertR2[1],\n        rangeincrement = _cacheHandler$insertR2[2],\n        portalHoldList = _cacheHandler$insertR2[3];\n\n    cacheHandler.cacheProps.modified = true;\n    cacheHandler.renderPortalList();\n    cacheHandler.portalHoldList = portalHoldList;\n    contentHandler.changeCradleItemIDs(changeList);\n    if (increment == +1) contentHandler.createNewItemIDs(replaceList);\n    var content = contentHandler.content;\n    stateHandler.setCradleState(\'applycellframechanges\');\n    var changecount = rangeincrement; // semantics\n\n    var newlistsize = listsize + changecount;\n\n    _this.setListsize(newlistsize);\n\n    return [changeList, replaceList];\n  };\n\n  this.cradleParameters = cradleParameters; // doing this explicitly here for documentation\n\n  var _cradleParameters$ext = cradleParameters.externalCallbacksRef.current,\n      referenceIndexCallback = _cradleParameters$ext.referenceIndexCallback,\n      preloadIndexCallback = _cradleParameters$ext.preloadIndexCallback,\n      deleteListCallback = _cradleParameters$ext.deleteListCallback,\n      changeListsizeCallback = _cradleParameters$ext.changeListsizeCallback,\n      itemExceptionsCallback = _cradleParameters$ext.itemExceptionsCallback,\n      repositioningFlagCallback = _cradleParameters$ext.repositioningFlagCallback;\n  var callbacks = {\n    referenceIndexCallback: referenceIndexCallback,\n    preloadIndexCallback: preloadIndexCallback,\n    deleteListCallback: deleteListCallback,\n    changeListsizeCallback: changeListsizeCallback,\n    itemExceptionsCallback: itemExceptionsCallback,\n    repositioningFlagCallback: repositioningFlagCallback\n  };\n  this.callbacks = callbacks;\n});\n\nexports["default"] = ServiceHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/cradle/servicehandler.tsx\n')},"./src/cradle/statehandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval(' // statehandler.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n   This module provides access to cradle states (cradleState and cradleResizeState) and stateSetting\n   functions (setCradleState and setCradleResizeState) for other handlers.\n   It alos provides access to the isMountedRef reference.\n*/\n\nvar StateHandler = /*#__PURE__*/_createClass(function StateHandler(cradleParameters) {\n  _classCallCheck(this, StateHandler);\n\n  this.cradleParameters = cradleParameters;\n  var internalProperties = cradleParameters.cradleInternalPropertiesRef.current;\n  this.setCradleState = internalProperties.setCradleState;\n  this.cradleStateRef = internalProperties.cradleStateRef;\n  this.setCradleResizeState = internalProperties.setCradleResizeState;\n  this.cradleResizeStateRef = internalProperties.cradleResizeStateRef;\n  this.isMountedRef = internalProperties.isMountedRef;\n});\n\nexports["default"] = StateHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3N0YXRlaGFuZGxlci50c3guanMiLCJtYXBwaW5ncyI6IkNBQUE7QUFDQTs7Ozs7Ozs7Ozs7QUFFQTs7Ozs7O0lBTXFCQSxZLDZCQUVqQixzQkFBWUMsZ0JBQVosRUFBNEI7RUFBQTs7RUFFekIsS0FBS0EsZ0JBQUwsR0FBd0JBLGdCQUF4QjtFQUVBLElBQU1DLGtCQUFrQixHQUFHRCxnQkFBZ0IsQ0FBQ0UsMkJBQWpCLENBQTZDQyxPQUF4RTtFQUVBLEtBQUtDLGNBQUwsR0FBc0JILGtCQUFrQixDQUFDRyxjQUF6QztFQUNBLEtBQUtDLGNBQUwsR0FBc0JKLGtCQUFrQixDQUFDSSxjQUF6QztFQUNBLEtBQUtDLG9CQUFMLEdBQTRCTCxrQkFBa0IsQ0FBQ0ssb0JBQS9DO0VBQ0EsS0FBS0Msb0JBQUwsR0FBNEJOLGtCQUFrQixDQUFDTSxvQkFBL0M7RUFDQSxLQUFLQyxZQUFMLEdBQW9CUCxrQkFBa0IsQ0FBQ08sWUFBdkM7QUFFRixDOztBQWRMQyxrQkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1pbmZpbml0ZS1ncmlkLXNjcm9sbGVyLy4vc3JjL2NyYWRsZS9zdGF0ZWhhbmRsZXIudHN4PzYzOTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3RhdGVoYW5kbGVyLnRzeFxuLy8gY29weXJpZ2h0IChjKSAyMDE5LTIwMjIgSGVucmlrIEJlY2htYW5uLCBUb3JvbnRvLCBMaWNlbmNlOiBNSVRcblxuLypcbiAgIFRoaXMgbW9kdWxlIHByb3ZpZGVzIGFjY2VzcyB0byBjcmFkbGUgc3RhdGVzIChjcmFkbGVTdGF0ZSBhbmQgY3JhZGxlUmVzaXplU3RhdGUpIGFuZCBzdGF0ZVNldHRpbmcgXG4gICBmdW5jdGlvbnMgKHNldENyYWRsZVN0YXRlIGFuZCBzZXRDcmFkbGVSZXNpemVTdGF0ZSkgZm9yIG90aGVyIGhhbmRsZXJzLlxuICAgSXQgYWxvcyBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGlzTW91bnRlZFJlZiByZWZlcmVuY2UuXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZUhhbmRsZXIge1xuXG4gICAgY29uc3RydWN0b3IoY3JhZGxlUGFyYW1ldGVycykge1xuXG4gICAgICAgdGhpcy5jcmFkbGVQYXJhbWV0ZXJzID0gY3JhZGxlUGFyYW1ldGVyc1xuXG4gICAgICAgY29uc3QgaW50ZXJuYWxQcm9wZXJ0aWVzID0gY3JhZGxlUGFyYW1ldGVycy5jcmFkbGVJbnRlcm5hbFByb3BlcnRpZXNSZWYuY3VycmVudFxuXG4gICAgICAgdGhpcy5zZXRDcmFkbGVTdGF0ZSA9IGludGVybmFsUHJvcGVydGllcy5zZXRDcmFkbGVTdGF0ZVxuICAgICAgIHRoaXMuY3JhZGxlU3RhdGVSZWYgPSBpbnRlcm5hbFByb3BlcnRpZXMuY3JhZGxlU3RhdGVSZWZcbiAgICAgICB0aGlzLnNldENyYWRsZVJlc2l6ZVN0YXRlID0gaW50ZXJuYWxQcm9wZXJ0aWVzLnNldENyYWRsZVJlc2l6ZVN0YXRlXG4gICAgICAgdGhpcy5jcmFkbGVSZXNpemVTdGF0ZVJlZiA9IGludGVybmFsUHJvcGVydGllcy5jcmFkbGVSZXNpemVTdGF0ZVJlZlxuICAgICAgIHRoaXMuaXNNb3VudGVkUmVmID0gaW50ZXJuYWxQcm9wZXJ0aWVzLmlzTW91bnRlZFJlZlxuICAgICAgIFxuICAgIH1cblxuICAgIHByaXZhdGUgY3JhZGxlUGFyYW1ldGVyc1xuXG4gICAgcHVibGljIGNyYWRsZVN0YXRlUmVmXG4gICAgcHVibGljIHNldENyYWRsZVN0YXRlXG4gICAgcHVibGljIGNyYWRsZVJlc2l6ZVN0YXRlUmVmXG4gICAgcHVibGljIHNldENyYWRsZVJlc2l6ZVN0YXRlXG4gICAgcHVibGljIGlzTW91bnRlZFJlZlxuXG59XG4iXSwibmFtZXMiOlsiU3RhdGVIYW5kbGVyIiwiY3JhZGxlUGFyYW1ldGVycyIsImludGVybmFsUHJvcGVydGllcyIsImNyYWRsZUludGVybmFsUHJvcGVydGllc1JlZiIsImN1cnJlbnQiLCJzZXRDcmFkbGVTdGF0ZSIsImNyYWRsZVN0YXRlUmVmIiwic2V0Q3JhZGxlUmVzaXplU3RhdGUiLCJjcmFkbGVSZXNpemVTdGF0ZVJlZiIsImlzTW91bnRlZFJlZiIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/cradle/statehandler.tsx\n')},"./src/cradle/styleshandler.tsx":(__unused_webpack_module,exports)=>{"use strict";eval(" // styleshandler.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/*\n    This module provides the Cradle component with one key function: getCradleStyles.\n    It returns an array of style objects for\n        headstyles,\n        tailstyles,\n        axisstyles,\n        triggerlineaxisstyles,\n        triggerlineheadstyles,\n        cradledividerstyles\n*/\n\nvar StylesHandler = /*#__PURE__*/_createClass(function StylesHandler(cradleParameters) {\n  var _this = this;\n\n  _classCallCheck(this, StylesHandler);\n\n  this.getCradleStyles = function (_ref) {\n    var orientation = _ref.orientation,\n        cellHeight = _ref.cellHeight,\n        cellWidth = _ref.cellWidth,\n        gap = _ref.gap,\n        padding = _ref.padding,\n        crosscount = _ref.crosscount,\n        viewportheight = _ref.viewportheight,\n        viewportwidth = _ref.viewportwidth,\n        userstyles = _ref.userstyles,\n        triggerlineOffset = _ref.triggerlineOffset;\n\n    var headstyles = _this.getHeadStyles(gap, padding, orientation, userstyles.cradle);\n\n    var tailstyles = _this.getTailStyles(gap, padding, orientation, userstyles.cradle);\n\n    var axisstyles = _this.getAxisStyles(gap, padding, orientation, userstyles.axis);\n\n    var triggercelltriggerlineheadstyles = _this.getTriggercellTriggerlineHeadStyles(orientation, cellHeight, cellWidth, triggerlineOffset, gap);\n\n    var triggercelltriggerlinetailstyles = _this.getTriggercellTriggerlineTailStyles(orientation, cellHeight, cellWidth, triggerlineOffset, gap); // layoutHandler.triggerlineSpan = this.axisTriggerlineOffset - this.headTriggerlineOffset\n\n\n    var cradledividerstyles = {\n      zIndex: 1,\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      boxShadow: '0 0 5px 3px red'\n    };\n    headstyles.gridGap = gap + 'px';\n    tailstyles.gridGap = gap + 'px';\n\n    if (orientation == 'horizontal') {\n      headstyles.padding = \"\".concat(padding, \"px 0 \").concat(padding, \"px \").concat(padding, \"px\");\n      headstyles.width = 'auto';\n      headstyles.height = '100%';\n      headstyles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n      //     sets length of horiz cradle items in one line (row), not multi-row config\n\n      headstyles.gridTemplateRows = cellHeight ? \"repeat(\".concat(crosscount, \", minmax(\").concat(cellHeight, \"px, 1fr))\") : 'auto';\n      headstyles.gridTemplateColumns = 'none';\n      tailstyles.padding = \"\".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px 0\");\n      tailstyles.width = 'auto';\n      tailstyles.height = '100%';\n      tailstyles.gridAutoFlow = 'column'; // explict crosscount next line as workaround for FF problem - \n      //     sets length of horiz cradle items in one line (row), not multi-row config\n\n      tailstyles.gridTemplateRows = cellHeight ? \"repeat(\".concat(crosscount, \", minmax(\").concat(cellHeight, \"px, 1fr))\") : 'auto';\n      tailstyles.gridTemplateColumns = 'none';\n    } else if (orientation == 'vertical') {\n      headstyles.padding = \"\".concat(padding, \"px \").concat(padding, \"px 0 \").concat(padding, \"px\");\n      headstyles.width = '100%';\n      headstyles.height = 'auto';\n      headstyles.gridAutoFlow = 'row';\n      headstyles.gridTemplateRows = 'none';\n      headstyles.gridTemplateColumns = cellWidth ? \"repeat(auto-fill, minmax(\".concat(cellWidth, \"px, 1fr))\") : 'auto';\n      tailstyles.padding = \"0 \".concat(padding, \"px \").concat(padding, \"px \").concat(padding, \"px\");\n      tailstyles.width = '100%';\n      tailstyles.height = 'auto';\n      tailstyles.gridAutoFlow = 'row';\n      tailstyles.gridTemplateRows = 'none';\n      tailstyles.gridTemplateColumns = cellWidth ? \"repeat(auto-fill, minmax(\".concat(cellWidth, \"px, 1fr))\") : 'auto';\n    }\n\n    return [headstyles, tailstyles, axisstyles, cradledividerstyles, triggercelltriggerlineheadstyles, triggercelltriggerlinetailstyles];\n  };\n\n  this.getHeadStyles = function (gap, padding, orientation, userheadstyles) {\n    var bottom, left, top, right;\n\n    if (orientation == 'vertical') {\n      bottom = 0;\n      left = 0;\n      right = 0;\n      top = 'auto';\n    } else {\n      bottom = 0;\n      left = 'auto';\n      right = 0;\n      top = 0;\n    }\n\n    return Object.assign(Object.assign({}, userheadstyles), {\n      position: 'absolute',\n      display: 'grid',\n      gridGap: gap + 'px',\n      padding: padding + 'px',\n      justifyContent: 'start',\n      alignContent: 'start',\n      boxSizing: 'border-box',\n      bottom: bottom,\n      left: left,\n      right: right,\n      top: top\n    });\n  };\n\n  this.getTailStyles = function (gap, padding, orientation, usertailstyles) {\n    var bottom, left, top, right;\n\n    if (orientation == 'vertical') {\n      bottom = 'auto';\n      left = 0;\n      right = 0;\n      top = 0;\n    } else {\n      bottom = 0;\n      left = 0;\n      right = 'auto';\n      top = 0;\n    }\n\n    return Object.assign(Object.assign({}, usertailstyles), {\n      position: 'absolute',\n      // backgroundColor: 'blue',\n      display: 'grid',\n      gridGap: gap + 'px',\n      padding: padding + 'px',\n      justifyContent: 'start',\n      alignContent: 'start',\n      boxSizing: 'border-box',\n      top: top,\n      left: left,\n      right: right,\n      bottom: bottom\n    });\n  };\n\n  this.getAxisStyles = function (gap, padding, orientation, useraxisstyles) {\n    var top, left, width, height; // for axis\n\n    if (orientation == 'vertical') {\n      top = padding + 'px';\n      left = 'auto';\n      width = '100%';\n      height = 'auto';\n    } else {\n      top = 'auto';\n      left = padding + 'px';\n      width = 0;\n      height = '100%';\n    }\n\n    return Object.assign(Object.assign({}, useraxisstyles), {\n      position: 'relative',\n      top: top,\n      left: left,\n      width: width,\n      height: height\n    });\n  };\n\n  this.getTriggercellTriggerlineHeadStyles = function (orientation, cellHeight, cellWidth, triggerlineOffset, gap) {\n    var position = 'absolute';\n    var width, height, top, left;\n\n    if (orientation == 'horizontal') {\n      height = '100%';\n      width = '0px';\n      left = triggerlineOffset + 'px';\n      top = 'auto';\n    } else {\n      height = '0px';\n      width = '100%';\n      left = 'auto';\n      top = triggerlineOffset + 'px';\n    }\n\n    return {\n      position: position,\n      width: width,\n      height: height,\n      top: top,\n      left: left\n    };\n  };\n\n  this.getTriggercellTriggerlineTailStyles = function (orientation, cellHeight, cellWidth, triggerlineOffset, gap) {\n    var position = 'absolute';\n    var width, height, bottom, right;\n\n    if (orientation == 'horizontal') {\n      height = '100%';\n      width = '0px';\n      bottom = 'auto';\n      right = -(triggerlineOffset + gap) + 'px';\n    } else {\n      height = '0px';\n      width = '100%';\n      bottom = -(triggerlineOffset + gap) + 'px';\n      right = 'auto';\n    }\n\n    return {\n      position: position,\n      width: width,\n      height: height,\n      bottom: bottom,\n      right: right\n    };\n  };\n\n  this.cradleParameters = cradleParameters;\n});\n\nexports[\"default\"] = StylesHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JhZGxlL3N0eWxlc2hhbmRsZXIudHN4LmpzIiwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7Ozs7Ozs7Ozs7O0FBRUE7Ozs7Ozs7Ozs7O0lBV3FCQSxhLDZCQUVsQix1QkFBWUMsZ0JBQVosRUFBNEI7RUFBQTs7RUFBQTs7RUFRcEIsdUJBQWtCLGdCQWFwQjtJQUFBLElBWERDLFdBV0MsUUFYREEsV0FXQztJQUFBLElBVkRDLFVBVUMsUUFWREEsVUFVQztJQUFBLElBVERDLFNBU0MsUUFUREEsU0FTQztJQUFBLElBUkRDLEdBUUMsUUFSREEsR0FRQztJQUFBLElBUERDLE9BT0MsUUFQREEsT0FPQztJQUFBLElBTkRDLFVBTUMsUUFOREEsVUFNQztJQUFBLElBTERDLGNBS0MsUUFMREEsY0FLQztJQUFBLElBSkRDLGFBSUMsUUFKREEsYUFJQztJQUFBLElBSERDLFVBR0MsUUFIREEsVUFHQztJQUFBLElBRkRDLGlCQUVDLFFBRkRBLGlCQUVDOztJQUVELElBQU1DLFVBQVUsR0FBRyxLQUFJLENBQUNDLGFBQUwsQ0FBbUJSLEdBQW5CLEVBQXdCQyxPQUF4QixFQUFpQ0osV0FBakMsRUFBOENRLFVBQVUsQ0FBQ0ksTUFBekQsQ0FBbkI7O0lBQ0EsSUFBTUMsVUFBVSxHQUFHLEtBQUksQ0FBQ0MsYUFBTCxDQUFtQlgsR0FBbkIsRUFBd0JDLE9BQXhCLEVBQWlDSixXQUFqQyxFQUE4Q1EsVUFBVSxDQUFDSSxNQUF6RCxDQUFuQjs7SUFDQSxJQUFNRyxVQUFVLEdBQUcsS0FBSSxDQUFDQyxhQUFMLENBQW1CYixHQUFuQixFQUF3QkMsT0FBeEIsRUFBaUNKLFdBQWpDLEVBQThDUSxVQUFVLENBQUNTLElBQXpELENBQW5COztJQUVBLElBQU1DLGdDQUFnQyxHQUNsQyxLQUFJLENBQUNDLG1DQUFMLENBQXlDbkIsV0FBekMsRUFBcURDLFVBQXJELEVBQWlFQyxTQUFqRSxFQUE0RU8saUJBQTVFLEVBQStGTixHQUEvRixDQURKOztJQUVBLElBQU1pQixnQ0FBZ0MsR0FDbEMsS0FBSSxDQUFDQyxtQ0FBTCxDQUF5Q3JCLFdBQXpDLEVBQXFEQyxVQUFyRCxFQUFpRUMsU0FBakUsRUFBNEVPLGlCQUE1RSxFQUErRk4sR0FBL0YsQ0FESixDQVJDLENBWUQ7OztJQUVBLElBQU1tQixtQkFBbUIsR0FDckI7TUFDSUMsTUFBTSxFQUFDLENBRFg7TUFFSUMsUUFBUSxFQUFDLFVBRmI7TUFHSUMsS0FBSyxFQUFDLE1BSFY7TUFJSUMsTUFBTSxFQUFDLE1BSlg7TUFLSUMsU0FBUyxFQUFDO0lBTGQsQ0FESjtJQVNBakIsVUFBVSxDQUFDa0IsT0FBWCxHQUFxQnpCLEdBQUcsR0FBRyxJQUEzQjtJQUVBVSxVQUFVLENBQUNlLE9BQVgsR0FBcUJ6QixHQUFHLEdBQUcsSUFBM0I7O0lBRUEsSUFBSUgsV0FBVyxJQUFJLFlBQW5CLEVBQWlDO01BRTdCVSxVQUFVLENBQUNOLE9BQVgsYUFBd0JBLE9BQXhCLGtCQUF1Q0EsT0FBdkMsZ0JBQW9EQSxPQUFwRDtNQUVBTSxVQUFVLENBQUNlLEtBQVgsR0FBbUIsTUFBbkI7TUFDQWYsVUFBVSxDQUFDZ0IsTUFBWCxHQUFvQixNQUFwQjtNQUNBaEIsVUFBVSxDQUFDbUIsWUFBWCxHQUEwQixRQUExQixDQU42QixDQU83QjtNQUNBOztNQUNBbkIsVUFBVSxDQUFDb0IsZ0JBQVgsR0FDSTdCLFVBQVUsb0JBQ0lJLFVBREosc0JBQzBCSixVQUQxQixpQkFFTixNQUhSO01BSUFTLFVBQVUsQ0FBQ3FCLG1CQUFYLEdBQWlDLE1BQWpDO01BRUFsQixVQUFVLENBQUNULE9BQVgsYUFBd0JBLE9BQXhCLGdCQUFxQ0EsT0FBckMsZ0JBQWtEQSxPQUFsRDtNQUVBUyxVQUFVLENBQUNZLEtBQVgsR0FBbUIsTUFBbkI7TUFDQVosVUFBVSxDQUFDYSxNQUFYLEdBQW9CLE1BQXBCO01BQ0FiLFVBQVUsQ0FBQ2dCLFlBQVgsR0FBMEIsUUFBMUIsQ0FuQjZCLENBb0I3QjtNQUNBOztNQUNBaEIsVUFBVSxDQUFDaUIsZ0JBQVgsR0FDSTdCLFVBQVUsb0JBQ0lJLFVBREosc0JBQzBCSixVQUQxQixpQkFFTixNQUhSO01BSUFZLFVBQVUsQ0FBQ2tCLG1CQUFYLEdBQWlDLE1BQWpDO0lBRUgsQ0E1QkQsTUE0Qk8sSUFBSS9CLFdBQVcsSUFBSSxVQUFuQixFQUErQjtNQUVsQ1UsVUFBVSxDQUFDTixPQUFYLGFBQXdCQSxPQUF4QixnQkFBcUNBLE9BQXJDLGtCQUFvREEsT0FBcEQ7TUFFQU0sVUFBVSxDQUFDZSxLQUFYLEdBQW1CLE1BQW5CO01BQ0FmLFVBQVUsQ0FBQ2dCLE1BQVgsR0FBb0IsTUFBcEI7TUFDQWhCLFVBQVUsQ0FBQ21CLFlBQVgsR0FBMEIsS0FBMUI7TUFFQW5CLFVBQVUsQ0FBQ29CLGdCQUFYLEdBQThCLE1BQTlCO01BQ0FwQixVQUFVLENBQUNxQixtQkFBWCxHQUNJN0IsU0FBUyxzQ0FDdUJBLFNBRHZCLGlCQUVMLE1BSFI7TUFLQVcsVUFBVSxDQUFDVCxPQUFYLGVBQTBCQSxPQUExQixnQkFBdUNBLE9BQXZDLGdCQUFvREEsT0FBcEQ7TUFFQVMsVUFBVSxDQUFDWSxLQUFYLEdBQW1CLE1BQW5CO01BQ0FaLFVBQVUsQ0FBQ2EsTUFBWCxHQUFvQixNQUFwQjtNQUNBYixVQUFVLENBQUNnQixZQUFYLEdBQTBCLEtBQTFCO01BRUFoQixVQUFVLENBQUNpQixnQkFBWCxHQUE4QixNQUE5QjtNQUNBakIsVUFBVSxDQUFDa0IsbUJBQVgsR0FDSTdCLFNBQVMsc0NBQ3VCQSxTQUR2QixpQkFFTCxNQUhSO0lBS0g7O0lBRUQsT0FBTyxDQUNIUSxVQURHLEVBRUhHLFVBRkcsRUFHSEUsVUFIRyxFQUlITyxtQkFKRyxFQUtISixnQ0FMRyxFQU1IRSxnQ0FORyxDQUFQO0VBU0gsQ0F6R007O0VBMkdDLHFCQUFnQixVQUFDakIsR0FBRCxFQUFLQyxPQUFMLEVBQWFKLFdBQWIsRUFBeUJnQyxjQUF6QixFQUEyQztJQUUvRCxJQUFJQyxNQUFKLEVBQVlDLElBQVosRUFBa0JDLEdBQWxCLEVBQXVCQyxLQUF2Qjs7SUFFQSxJQUFJcEMsV0FBVyxJQUFJLFVBQW5CLEVBQStCO01BQzNCaUMsTUFBTSxHQUFHLENBQVQ7TUFDQUMsSUFBSSxHQUFHLENBQVA7TUFDQUUsS0FBSyxHQUFHLENBQVI7TUFDQUQsR0FBRyxHQUFHLE1BQU47SUFDSCxDQUxELE1BS087TUFDSEYsTUFBTSxHQUFHLENBQVQ7TUFDQUMsSUFBSSxHQUFHLE1BQVA7TUFDQUUsS0FBSyxHQUFHLENBQVI7TUFDQUQsR0FBRyxHQUFHLENBQU47SUFDSDs7SUFFRCx1Q0FDT0gsY0FEUCxHQUNxQjtNQUNqQlIsUUFBUSxFQUFFLFVBRE87TUFFakJhLE9BQU8sRUFBRSxNQUZRO01BR2pCVCxPQUFPLEVBQUV6QixHQUFHLEdBQUcsSUFIRTtNQUlqQkMsT0FBTyxFQUFFQSxPQUFPLEdBQUcsSUFKRjtNQUtqQmtDLGNBQWMsRUFBQyxPQUxFO01BTWpCQyxZQUFZLEVBQUMsT0FOSTtNQU9qQkMsU0FBUyxFQUFDLFlBUE87TUFRakJQLE1BQU0sRUFBTkEsTUFSaUI7TUFTakJDLElBQUksRUFBSkEsSUFUaUI7TUFVakJFLEtBQUssRUFBTEEsS0FWaUI7TUFXakJELEdBQUcsRUFBSEE7SUFYaUIsQ0FEckI7RUFjSCxDQTlCTzs7RUFnQ0EscUJBQWdCLFVBQUNoQyxHQUFELEVBQUtDLE9BQUwsRUFBYUosV0FBYixFQUF5QnlDLGNBQXpCLEVBQTJDO0lBRS9ELElBQUlSLE1BQUosRUFBWUMsSUFBWixFQUFrQkMsR0FBbEIsRUFBdUJDLEtBQXZCOztJQUVBLElBQUlwQyxXQUFXLElBQUksVUFBbkIsRUFBK0I7TUFDM0JpQyxNQUFNLEdBQUcsTUFBVDtNQUNBQyxJQUFJLEdBQUcsQ0FBUDtNQUNBRSxLQUFLLEdBQUcsQ0FBUjtNQUNBRCxHQUFHLEdBQUcsQ0FBTjtJQUNILENBTEQsTUFLTztNQUNIRixNQUFNLEdBQUcsQ0FBVDtNQUNBQyxJQUFJLEdBQUcsQ0FBUDtNQUNBRSxLQUFLLEdBQUcsTUFBUjtNQUNBRCxHQUFHLEdBQUcsQ0FBTjtJQUNIOztJQUVELHVDQUNPTSxjQURQLEdBQ3FCO01BQ2pCakIsUUFBUSxFQUFFLFVBRE87TUFFakI7TUFDQWEsT0FBTyxFQUFFLE1BSFE7TUFJakJULE9BQU8sRUFBRXpCLEdBQUcsR0FBRyxJQUpFO01BS2pCQyxPQUFPLEVBQUVBLE9BQU8sR0FBRyxJQUxGO01BTWpCa0MsY0FBYyxFQUFDLE9BTkU7TUFPakJDLFlBQVksRUFBQyxPQVBJO01BUWpCQyxTQUFTLEVBQUMsWUFSTztNQVNqQkwsR0FBRyxFQUFIQSxHQVRpQjtNQVVqQkQsSUFBSSxFQUFKQSxJQVZpQjtNQVdqQkUsS0FBSyxFQUFMQSxLQVhpQjtNQVlqQkgsTUFBTSxFQUFOQTtJQVppQixDQURyQjtFQWVILENBL0JPOztFQWlDQSxxQkFBZ0IsVUFBQzlCLEdBQUQsRUFBTUMsT0FBTixFQUFlSixXQUFmLEVBQTRCMEMsY0FBNUIsRUFBOEM7SUFDbEUsSUFBSVAsR0FBSixFQUFTRCxJQUFULEVBQWVULEtBQWYsRUFBc0JDLE1BQXRCLENBRGtFLENBQ3JDOztJQUU3QixJQUFJMUIsV0FBVyxJQUFJLFVBQW5CLEVBQStCO01BQzNCbUMsR0FBRyxHQUFHL0IsT0FBTyxHQUFHLElBQWhCO01BQ0E4QixJQUFJLEdBQUcsTUFBUDtNQUNBVCxLQUFLLEdBQUcsTUFBUjtNQUNBQyxNQUFNLEdBQUcsTUFBVDtJQUNILENBTEQsTUFLTztNQUNIUyxHQUFHLEdBQUcsTUFBTjtNQUNBRCxJQUFJLEdBQUc5QixPQUFPLEdBQUcsSUFBakI7TUFDQXFCLEtBQUssR0FBRyxDQUFSO01BQ0FDLE1BQU0sR0FBRyxNQUFUO0lBQ0g7O0lBRUQsdUNBQ09nQixjQURQLEdBQ3FCO01BQ2pCbEIsUUFBUSxFQUFFLFVBRE87TUFFakJXLEdBQUcsRUFBSEEsR0FGaUI7TUFHakJELElBQUksRUFBSkEsSUFIaUI7TUFJakJULEtBQUssRUFBTEEsS0FKaUI7TUFLakJDLE1BQU0sRUFBTkE7SUFMaUIsQ0FEckI7RUFVSCxDQXpCTzs7RUEyQkEsMkNBQXNDLFVBQUMxQixXQUFELEVBQWNDLFVBQWQsRUFBMEJDLFNBQTFCLEVBQXFDTyxpQkFBckMsRUFBd0ROLEdBQXhELEVBQStEO0lBRXpHLElBQU1xQixRQUFRLEdBQUcsVUFBakI7SUFFQSxJQUFJQyxLQUFKLEVBQVdDLE1BQVgsRUFBbUJTLEdBQW5CLEVBQXdCRCxJQUF4Qjs7SUFDQSxJQUFJbEMsV0FBVyxJQUFJLFlBQW5CLEVBQWlDO01BRTdCMEIsTUFBTSxHQUFHLE1BQVQ7TUFDQUQsS0FBSyxHQUFHLEtBQVI7TUFDQVMsSUFBSSxHQUFHekIsaUJBQWlCLEdBQUcsSUFBM0I7TUFDQTBCLEdBQUcsR0FBRyxNQUFOO0lBRUgsQ0FQRCxNQU9PO01BQ0hULE1BQU0sR0FBRyxLQUFUO01BQ0FELEtBQUssR0FBRyxNQUFSO01BQ0FTLElBQUksR0FBRyxNQUFQO01BQ0FDLEdBQUcsR0FBRzFCLGlCQUFpQixHQUFHLElBQTFCO0lBQ0g7O0lBRUQsT0FBTztNQUNIZSxRQUFRLEVBQVJBLFFBREc7TUFFSEMsS0FBSyxFQUFMQSxLQUZHO01BR0hDLE1BQU0sRUFBTkEsTUFIRztNQUlIUyxHQUFHLEVBQUhBLEdBSkc7TUFLSEQsSUFBSSxFQUFKQTtJQUxHLENBQVA7RUFPSCxDQTFCTzs7RUEyQkEsMkNBQXNDLFVBQUNsQyxXQUFELEVBQWNDLFVBQWQsRUFBMEJDLFNBQTFCLEVBQXFDTyxpQkFBckMsRUFBd0ROLEdBQXhELEVBQStEO0lBRXpHLElBQU1xQixRQUFRLEdBQUcsVUFBakI7SUFFQSxJQUFJQyxLQUFKLEVBQVdDLE1BQVgsRUFBbUJPLE1BQW5CLEVBQTJCRyxLQUEzQjs7SUFDQSxJQUFJcEMsV0FBVyxJQUFJLFlBQW5CLEVBQWlDO01BRTdCMEIsTUFBTSxHQUFHLE1BQVQ7TUFDQUQsS0FBSyxHQUFHLEtBQVI7TUFDQVEsTUFBTSxHQUFHLE1BQVQ7TUFDQUcsS0FBSyxHQUFHLEVBQUUzQixpQkFBaUIsR0FBR04sR0FBdEIsSUFBNkIsSUFBckM7SUFFSCxDQVBELE1BT087TUFDSHVCLE1BQU0sR0FBRyxLQUFUO01BQ0FELEtBQUssR0FBRyxNQUFSO01BQ0FRLE1BQU0sR0FBRyxFQUFFeEIsaUJBQWlCLEdBQUdOLEdBQXRCLElBQTZCLElBQXRDO01BQ0FpQyxLQUFLLEdBQUcsTUFBUjtJQUNIOztJQUVELE9BQU87TUFDSFosUUFBUSxFQUFSQSxRQURHO01BRUhDLEtBQUssRUFBTEEsS0FGRztNQUdIQyxNQUFNLEVBQU5BLE1BSEc7TUFJSE8sTUFBTSxFQUFOQSxNQUpHO01BS0hHLEtBQUssRUFBTEE7SUFMRyxDQUFQO0VBT0gsQ0ExQk87O0VBeE9OLEtBQUtyQyxnQkFBTCxHQUF3QkEsZ0JBQXhCO0FBRUQsQzs7QUFOTDRDLGtCQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvY3JhZGxlL3N0eWxlc2hhbmRsZXIudHN4PzQ1ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGVzaGFuZGxlci50c3hcbi8vIGNvcHlyaWdodCAoYykgMjAxOS0yMDIyIEhlbnJpayBCZWNobWFubiwgVG9yb250bywgTGljZW5jZTogTUlUXG5cbi8qXG4gICAgVGhpcyBtb2R1bGUgcHJvdmlkZXMgdGhlIENyYWRsZSBjb21wb25lbnQgd2l0aCBvbmUga2V5IGZ1bmN0aW9uOiBnZXRDcmFkbGVTdHlsZXMuXG4gICAgSXQgcmV0dXJucyBhbiBhcnJheSBvZiBzdHlsZSBvYmplY3RzIGZvclxuICAgICAgICBoZWFkc3R5bGVzLFxuICAgICAgICB0YWlsc3R5bGVzLFxuICAgICAgICBheGlzc3R5bGVzLFxuICAgICAgICB0cmlnZ2VybGluZWF4aXNzdHlsZXMsXG4gICAgICAgIHRyaWdnZXJsaW5laGVhZHN0eWxlcyxcbiAgICAgICAgY3JhZGxlZGl2aWRlcnN0eWxlc1xuKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3R5bGVzSGFuZGxlciB7IFxuXG4gICBjb25zdHJ1Y3RvcihjcmFkbGVQYXJhbWV0ZXJzKSB7XG5cbiAgICAgIHRoaXMuY3JhZGxlUGFyYW1ldGVycyA9IGNyYWRsZVBhcmFtZXRlcnNcblxuICAgIH1cblxuICAgIHByaXZhdGUgY3JhZGxlUGFyYW1ldGVyc1xuXG4gICAgcHVibGljIGdldENyYWRsZVN0eWxlcyA9ICh7XG5cbiAgICAgICAgb3JpZW50YXRpb24sIFxuICAgICAgICBjZWxsSGVpZ2h0LCBcbiAgICAgICAgY2VsbFdpZHRoLCBcbiAgICAgICAgZ2FwLFxuICAgICAgICBwYWRkaW5nLCBcbiAgICAgICAgY3Jvc3Njb3VudCwgXG4gICAgICAgIHZpZXdwb3J0aGVpZ2h0LCBcbiAgICAgICAgdmlld3BvcnR3aWR0aCxcbiAgICAgICAgdXNlcnN0eWxlcyxcbiAgICAgICAgdHJpZ2dlcmxpbmVPZmZzZXQsXG5cbiAgICB9KSA9PiB7XG5cbiAgICAgICAgY29uc3QgaGVhZHN0eWxlcyA9IHRoaXMuZ2V0SGVhZFN0eWxlcyhnYXAsIHBhZGRpbmcsIG9yaWVudGF0aW9uLCB1c2Vyc3R5bGVzLmNyYWRsZSlcbiAgICAgICAgY29uc3QgdGFpbHN0eWxlcyA9IHRoaXMuZ2V0VGFpbFN0eWxlcyhnYXAsIHBhZGRpbmcsIG9yaWVudGF0aW9uLCB1c2Vyc3R5bGVzLmNyYWRsZSlcbiAgICAgICAgY29uc3QgYXhpc3N0eWxlcyA9IHRoaXMuZ2V0QXhpc1N0eWxlcyhnYXAsIHBhZGRpbmcsIG9yaWVudGF0aW9uLCB1c2Vyc3R5bGVzLmF4aXMpXG5cbiAgICAgICAgY29uc3QgdHJpZ2dlcmNlbGx0cmlnZ2VybGluZWhlYWRzdHlsZXMgPVxuICAgICAgICAgICAgdGhpcy5nZXRUcmlnZ2VyY2VsbFRyaWdnZXJsaW5lSGVhZFN0eWxlcyhvcmllbnRhdGlvbixjZWxsSGVpZ2h0LCBjZWxsV2lkdGgsIHRyaWdnZXJsaW5lT2Zmc2V0LCBnYXApXG4gICAgICAgIGNvbnN0IHRyaWdnZXJjZWxsdHJpZ2dlcmxpbmV0YWlsc3R5bGVzID0gXG4gICAgICAgICAgICB0aGlzLmdldFRyaWdnZXJjZWxsVHJpZ2dlcmxpbmVUYWlsU3R5bGVzKG9yaWVudGF0aW9uLGNlbGxIZWlnaHQsIGNlbGxXaWR0aCwgdHJpZ2dlcmxpbmVPZmZzZXQsIGdhcClcblxuXG4gICAgICAgIC8vIGxheW91dEhhbmRsZXIudHJpZ2dlcmxpbmVTcGFuID0gdGhpcy5heGlzVHJpZ2dlcmxpbmVPZmZzZXQgLSB0aGlzLmhlYWRUcmlnZ2VybGluZU9mZnNldFxuXG4gICAgICAgIGNvbnN0IGNyYWRsZWRpdmlkZXJzdHlsZXMgPSBcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB6SW5kZXg6MSwgXG4gICAgICAgICAgICAgICAgcG9zaXRpb246J2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICB3aWR0aDonMTAwJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OicxMDAlJyxcbiAgICAgICAgICAgICAgICBib3hTaGFkb3c6JzAgMCA1cHggM3B4IHJlZCdcbiAgICAgICAgICAgIH1cblxuICAgICAgICBoZWFkc3R5bGVzLmdyaWRHYXAgPSBnYXAgKyAncHgnXG5cbiAgICAgICAgdGFpbHN0eWxlcy5ncmlkR2FwID0gZ2FwICsgJ3B4J1xuXG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PSAnaG9yaXpvbnRhbCcpIHtcblxuICAgICAgICAgICAgaGVhZHN0eWxlcy5wYWRkaW5nID0gYCR7cGFkZGluZ31weCAwICR7cGFkZGluZ31weCAke3BhZGRpbmd9cHhgXG5cbiAgICAgICAgICAgIGhlYWRzdHlsZXMud2lkdGggPSAnYXV0bydcbiAgICAgICAgICAgIGhlYWRzdHlsZXMuaGVpZ2h0ID0gJzEwMCUnXG4gICAgICAgICAgICBoZWFkc3R5bGVzLmdyaWRBdXRvRmxvdyA9ICdjb2x1bW4nXG4gICAgICAgICAgICAvLyBleHBsaWN0IGNyb3NzY291bnQgbmV4dCBsaW5lIGFzIHdvcmthcm91bmQgZm9yIEZGIHByb2JsZW0gLSBcbiAgICAgICAgICAgIC8vICAgICBzZXRzIGxlbmd0aCBvZiBob3JpeiBjcmFkbGUgaXRlbXMgaW4gb25lIGxpbmUgKHJvdyksIG5vdCBtdWx0aS1yb3cgY29uZmlnXG4gICAgICAgICAgICBoZWFkc3R5bGVzLmdyaWRUZW1wbGF0ZVJvd3MgPSBcbiAgICAgICAgICAgICAgICBjZWxsSGVpZ2h0P1xuICAgICAgICAgICAgICAgICAgICBgcmVwZWF0KCR7Y3Jvc3Njb3VudH0sIG1pbm1heCgke2NlbGxIZWlnaHR9cHgsIDFmcikpYDpcbiAgICAgICAgICAgICAgICAgICAgJ2F1dG8nXG4gICAgICAgICAgICBoZWFkc3R5bGVzLmdyaWRUZW1wbGF0ZUNvbHVtbnMgPSAnbm9uZSdcblxuICAgICAgICAgICAgdGFpbHN0eWxlcy5wYWRkaW5nID0gYCR7cGFkZGluZ31weCAke3BhZGRpbmd9cHggJHtwYWRkaW5nfXB4IDBgXG5cbiAgICAgICAgICAgIHRhaWxzdHlsZXMud2lkdGggPSAnYXV0bydcbiAgICAgICAgICAgIHRhaWxzdHlsZXMuaGVpZ2h0ID0gJzEwMCUnXG4gICAgICAgICAgICB0YWlsc3R5bGVzLmdyaWRBdXRvRmxvdyA9ICdjb2x1bW4nXG4gICAgICAgICAgICAvLyBleHBsaWN0IGNyb3NzY291bnQgbmV4dCBsaW5lIGFzIHdvcmthcm91bmQgZm9yIEZGIHByb2JsZW0gLSBcbiAgICAgICAgICAgIC8vICAgICBzZXRzIGxlbmd0aCBvZiBob3JpeiBjcmFkbGUgaXRlbXMgaW4gb25lIGxpbmUgKHJvdyksIG5vdCBtdWx0aS1yb3cgY29uZmlnXG4gICAgICAgICAgICB0YWlsc3R5bGVzLmdyaWRUZW1wbGF0ZVJvd3MgPSBcbiAgICAgICAgICAgICAgICBjZWxsSGVpZ2h0P1xuICAgICAgICAgICAgICAgICAgICBgcmVwZWF0KCR7Y3Jvc3Njb3VudH0sIG1pbm1heCgke2NlbGxIZWlnaHR9cHgsIDFmcikpYDpcbiAgICAgICAgICAgICAgICAgICAgJ2F1dG8nXG4gICAgICAgICAgICB0YWlsc3R5bGVzLmdyaWRUZW1wbGF0ZUNvbHVtbnMgPSAnbm9uZSdcblxuICAgICAgICB9IGVsc2UgaWYgKG9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpIHtcblxuICAgICAgICAgICAgaGVhZHN0eWxlcy5wYWRkaW5nID0gYCR7cGFkZGluZ31weCAke3BhZGRpbmd9cHggMCAke3BhZGRpbmd9cHhgXG5cbiAgICAgICAgICAgIGhlYWRzdHlsZXMud2lkdGggPSAnMTAwJSdcbiAgICAgICAgICAgIGhlYWRzdHlsZXMuaGVpZ2h0ID0gJ2F1dG8nXG4gICAgICAgICAgICBoZWFkc3R5bGVzLmdyaWRBdXRvRmxvdyA9ICdyb3cnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGhlYWRzdHlsZXMuZ3JpZFRlbXBsYXRlUm93cyA9ICdub25lJ1xuICAgICAgICAgICAgaGVhZHN0eWxlcy5ncmlkVGVtcGxhdGVDb2x1bW5zID0gXG4gICAgICAgICAgICAgICAgY2VsbFdpZHRoP1xuICAgICAgICAgICAgICAgICAgICBgcmVwZWF0KGF1dG8tZmlsbCwgbWlubWF4KCR7Y2VsbFdpZHRofXB4LCAxZnIpKWA6XG4gICAgICAgICAgICAgICAgICAgICdhdXRvJ1xuXG4gICAgICAgICAgICB0YWlsc3R5bGVzLnBhZGRpbmcgPSBgMCAke3BhZGRpbmd9cHggJHtwYWRkaW5nfXB4ICR7cGFkZGluZ31weGBcblxuICAgICAgICAgICAgdGFpbHN0eWxlcy53aWR0aCA9ICcxMDAlJ1xuICAgICAgICAgICAgdGFpbHN0eWxlcy5oZWlnaHQgPSAnYXV0bydcbiAgICAgICAgICAgIHRhaWxzdHlsZXMuZ3JpZEF1dG9GbG93ID0gJ3JvdydcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGFpbHN0eWxlcy5ncmlkVGVtcGxhdGVSb3dzID0gJ25vbmUnXG4gICAgICAgICAgICB0YWlsc3R5bGVzLmdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBcbiAgICAgICAgICAgICAgICBjZWxsV2lkdGg/XG4gICAgICAgICAgICAgICAgICAgIGByZXBlYXQoYXV0by1maWxsLCBtaW5tYXgoJHtjZWxsV2lkdGh9cHgsIDFmcikpYDpcbiAgICAgICAgICAgICAgICAgICAgJ2F1dG8nXG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBoZWFkc3R5bGVzLFxuICAgICAgICAgICAgdGFpbHN0eWxlcyxcbiAgICAgICAgICAgIGF4aXNzdHlsZXMsXG4gICAgICAgICAgICBjcmFkbGVkaXZpZGVyc3R5bGVzLFxuICAgICAgICAgICAgdHJpZ2dlcmNlbGx0cmlnZ2VybGluZWhlYWRzdHlsZXMsXG4gICAgICAgICAgICB0cmlnZ2VyY2VsbHRyaWdnZXJsaW5ldGFpbHN0eWxlcyxcbiAgICAgICAgXVxuICAgICAgICBcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEhlYWRTdHlsZXMgPSAoZ2FwLHBhZGRpbmcsb3JpZW50YXRpb24sdXNlcmhlYWRzdHlsZXMpID0+IHtcblxuICAgICAgICBsZXQgYm90dG9tLCBsZWZ0LCB0b3AsIHJpZ2h0XG5cbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIGJvdHRvbSA9IDBcbiAgICAgICAgICAgIGxlZnQgPSAwXG4gICAgICAgICAgICByaWdodCA9IDBcbiAgICAgICAgICAgIHRvcCA9ICdhdXRvJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm90dG9tID0gMFxuICAgICAgICAgICAgbGVmdCA9ICdhdXRvJ1xuICAgICAgICAgICAgcmlnaHQgPSAwXG4gICAgICAgICAgICB0b3AgPSAwXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4udXNlcmhlYWRzdHlsZXMsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICAgICAgICAgIGdyaWRHYXA6IGdhcCArICdweCcsXG4gICAgICAgICAgICBwYWRkaW5nOiBwYWRkaW5nICsgJ3B4JyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OidzdGFydCcsXG4gICAgICAgICAgICBhbGlnbkNvbnRlbnQ6J3N0YXJ0JyxcbiAgICAgICAgICAgIGJveFNpemluZzonYm9yZGVyLWJveCcsXG4gICAgICAgICAgICBib3R0b20sXG4gICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgcmlnaHQsXG4gICAgICAgICAgICB0b3AsXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFRhaWxTdHlsZXMgPSAoZ2FwLHBhZGRpbmcsb3JpZW50YXRpb24sdXNlcnRhaWxzdHlsZXMpID0+IHtcblxuICAgICAgICBsZXQgYm90dG9tLCBsZWZ0LCB0b3AsIHJpZ2h0XG5cbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIGJvdHRvbSA9ICdhdXRvJ1xuICAgICAgICAgICAgbGVmdCA9IDBcbiAgICAgICAgICAgIHJpZ2h0ID0gMFxuICAgICAgICAgICAgdG9wID0gMFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm90dG9tID0gMFxuICAgICAgICAgICAgbGVmdCA9IDBcbiAgICAgICAgICAgIHJpZ2h0ID0gJ2F1dG8nXG4gICAgICAgICAgICB0b3AgPSAwXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4udXNlcnRhaWxzdHlsZXMsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIC8vIGJhY2tncm91bmRDb2xvcjogJ2JsdWUnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2dyaWQnLFxuICAgICAgICAgICAgZ3JpZEdhcDogZ2FwICsgJ3B4JyxcbiAgICAgICAgICAgIHBhZGRpbmc6IHBhZGRpbmcgKyAncHgnLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6J3N0YXJ0JyxcbiAgICAgICAgICAgIGFsaWduQ29udGVudDonc3RhcnQnLFxuICAgICAgICAgICAgYm94U2l6aW5nOidib3JkZXItYm94JyxcbiAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICByaWdodCxcbiAgICAgICAgICAgIGJvdHRvbSxcbiAgICAgICAgfSBcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEF4aXNTdHlsZXMgPSAoZ2FwLCBwYWRkaW5nLCBvcmllbnRhdGlvbiwgdXNlcmF4aXNzdHlsZXMpID0+IHtcbiAgICAgICAgbGV0IHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCAvLyBmb3IgYXhpc1xuXG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICB0b3AgPSBwYWRkaW5nICsgJ3B4J1xuICAgICAgICAgICAgbGVmdCA9ICdhdXRvJ1xuICAgICAgICAgICAgd2lkdGggPSAnMTAwJSdcbiAgICAgICAgICAgIGhlaWdodCA9ICdhdXRvJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9wID0gJ2F1dG8nXG4gICAgICAgICAgICBsZWZ0ID0gcGFkZGluZyArICdweCdcbiAgICAgICAgICAgIHdpZHRoID0gMFxuICAgICAgICAgICAgaGVpZ2h0ID0gJzEwMCUnXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4udXNlcmF4aXNzdHlsZXMsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodCxcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFRyaWdnZXJjZWxsVHJpZ2dlcmxpbmVIZWFkU3R5bGVzID0gKG9yaWVudGF0aW9uLCBjZWxsSGVpZ2h0LCBjZWxsV2lkdGgsIHRyaWdnZXJsaW5lT2Zmc2V0LCBnYXApID0+IHtcblxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9ICdhYnNvbHV0ZSdcblxuICAgICAgICBsZXQgd2lkdGgsIGhlaWdodCwgdG9wLCBsZWZ0XG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PSAnaG9yaXpvbnRhbCcpIHtcblxuICAgICAgICAgICAgaGVpZ2h0ID0gJzEwMCUnXG4gICAgICAgICAgICB3aWR0aCA9ICcwcHgnXG4gICAgICAgICAgICBsZWZ0ID0gdHJpZ2dlcmxpbmVPZmZzZXQgKyAncHgnXG4gICAgICAgICAgICB0b3AgPSAnYXV0bydcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVpZ2h0ID0gJzBweCdcbiAgICAgICAgICAgIHdpZHRoID0gJzEwMCUnXG4gICAgICAgICAgICBsZWZ0ID0gJ2F1dG8nXG4gICAgICAgICAgICB0b3AgPSB0cmlnZ2VybGluZU9mZnNldCArICdweCdcbiAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSBnZXRUcmlnZ2VyY2VsbFRyaWdnZXJsaW5lVGFpbFN0eWxlcyA9IChvcmllbnRhdGlvbiwgY2VsbEhlaWdodCwgY2VsbFdpZHRoLCB0cmlnZ2VybGluZU9mZnNldCwgZ2FwKSA9PiB7XG5cbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSAnYWJzb2x1dGUnXG5cbiAgICAgICAgbGV0IHdpZHRoLCBoZWlnaHQsIGJvdHRvbSwgcmlnaHRcbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09ICdob3Jpem9udGFsJykge1xuXG4gICAgICAgICAgICBoZWlnaHQgPSAnMTAwJSdcbiAgICAgICAgICAgIHdpZHRoID0gJzBweCdcbiAgICAgICAgICAgIGJvdHRvbSA9ICdhdXRvJ1xuICAgICAgICAgICAgcmlnaHQgPSAtKHRyaWdnZXJsaW5lT2Zmc2V0ICsgZ2FwKSArICdweCdcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVpZ2h0ID0gJzBweCdcbiAgICAgICAgICAgIHdpZHRoID0gJzEwMCUnXG4gICAgICAgICAgICBib3R0b20gPSAtKHRyaWdnZXJsaW5lT2Zmc2V0ICsgZ2FwKSArICdweCdcbiAgICAgICAgICAgIHJpZ2h0ID0gJ2F1dG8nXG4gICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvc2l0aW9uLFxuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICBib3R0b20sXG4gICAgICAgICAgICByaWdodCxcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJTdHlsZXNIYW5kbGVyIiwiY3JhZGxlUGFyYW1ldGVycyIsIm9yaWVudGF0aW9uIiwiY2VsbEhlaWdodCIsImNlbGxXaWR0aCIsImdhcCIsInBhZGRpbmciLCJjcm9zc2NvdW50Iiwidmlld3BvcnRoZWlnaHQiLCJ2aWV3cG9ydHdpZHRoIiwidXNlcnN0eWxlcyIsInRyaWdnZXJsaW5lT2Zmc2V0IiwiaGVhZHN0eWxlcyIsImdldEhlYWRTdHlsZXMiLCJjcmFkbGUiLCJ0YWlsc3R5bGVzIiwiZ2V0VGFpbFN0eWxlcyIsImF4aXNzdHlsZXMiLCJnZXRBeGlzU3R5bGVzIiwiYXhpcyIsInRyaWdnZXJjZWxsdHJpZ2dlcmxpbmVoZWFkc3R5bGVzIiwiZ2V0VHJpZ2dlcmNlbGxUcmlnZ2VybGluZUhlYWRTdHlsZXMiLCJ0cmlnZ2VyY2VsbHRyaWdnZXJsaW5ldGFpbHN0eWxlcyIsImdldFRyaWdnZXJjZWxsVHJpZ2dlcmxpbmVUYWlsU3R5bGVzIiwiY3JhZGxlZGl2aWRlcnN0eWxlcyIsInpJbmRleCIsInBvc2l0aW9uIiwid2lkdGgiLCJoZWlnaHQiLCJib3hTaGFkb3ciLCJncmlkR2FwIiwiZ3JpZEF1dG9GbG93IiwiZ3JpZFRlbXBsYXRlUm93cyIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJ1c2VyaGVhZHN0eWxlcyIsImJvdHRvbSIsImxlZnQiLCJ0b3AiLCJyaWdodCIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduQ29udGVudCIsImJveFNpemluZyIsInVzZXJ0YWlsc3R5bGVzIiwidXNlcmF4aXNzdHlsZXMiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cradle/styleshandler.tsx\n")},"./src/infinitegridscroller.tsx":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval(' // InfiniteGridScroller.tsx\n// copyright (c) 2019-2022 Henrik Bechmann, Toronto, Licence: MIT\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, "default", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o["default"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    "default": mod\n  };\n};\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n/*\n    ROADMAP:\n\n        layout: uniform, variable\n\n        cross-browser testing; smartphone testing\n\n        release to npm\n\n        create demo site - github pages\n\n    BUGS:\n\n        - pivot is broken\n        - FF sets axis to past last item on variable layout\n        - Edge fails to set scrollPos so at bottom so that last item is at end of scrollblock\n        - bottom of list adjustments are broken\n        - reposition is broken\n\n    TODO:\n\n        - try changing scrollblock length/top during scroll\n        - review all code where variable mode changes positioning calculations\n        - use cradleResize to capture async variable cell updates between state cycles\n        - change scroll bounce behaviour if supported on all browsers\n        - set CellFrame max to cellWidth/cellHeight for variable layout\n\n        re-test for memory leaks window.performance.memory\n        retest concat replacements\n        integrate cradleParameters object availability into cachehandler\n        test phone rotation for resize during scroll intertia\n        require variable settings: min/max for height/width (?)\n        ----------------\n        (after layout...)\n        \n        - prioritize fetch cells for visible cells\n\n        - create random loading delays in test ui\n        - provide way to attempt reload of a single cell (change instanceID)\n        - test for two root portals\n        - calc minwidth by form factor\n        - review scroller-frame for appropriate dimensions - s/b inset:0;position:absolute\n        - add grid-template-rows: max-content to parent for safari issue grid-auto-flow: column not filling column\n*/\n\n/*\n    react-infinite-grid-scroller = RIGS\n\n    The job of InfiniteGridScroller is to pass parameters to dependents.\n    Viewport contains the scrollblock, fullsize for adjusted cell height/width, which in turn contains the cradle\n        - a component that contains CellFrames (which contain displayed items or transitional placeholders.\n    The CellFrames are skeletons which contain the host content components.\n\n    Host content is instantiated in a portal cache (via PortalHandler)\n    and then portal\'d to its host CellFrame. The cach can be configured to hold many more items\n    than cradle, allowing a range of host content to maintain state.\n\n    Scrollblock by size represents the entirety of the list, and is the scroller\n\n    Cradle contains the list items, and is \'virtualized\' -- it appears as\n      though it is the full scrollblock, but in fact it is only slightly larger than\n      the viewport.\n    - individual host items are framed by CellFrame, managed by Cradle\n\n    Overall the infinitegridscroller as a package manages the often asynchronous interactions of the\n    components of the mechanism. Most of the work occurs in the Cradle component.\n*/\n\nvar react_1 = __importStar(__webpack_require__(/*! react */ "react")); // defensive\n\n\nvar react_error_boundary_1 = __webpack_require__(/*! react-error-boundary */ "./node_modules/react-error-boundary/dist/react-error-boundary.umd.js"); // www.npmjs.com/package/react-error-boundary\n// based on module template\n\n\nfunction ErrorFallback(_ref) {\n  var error = _ref.error,\n      resetErrorBoundary = _ref.resetErrorBoundary;\n  return react_1["default"].createElement("div", {\n    role: "alert"\n  }, react_1["default"].createElement("p", null, "Oops! Something went wrong inside react-infinite-grid-scroller."), react_1["default"].createElement("p", null, "Click to cancel the error and continue."), react_1["default"].createElement("button", {\n    onClick: resetErrorBoundary\n  }, "Cancel error"), react_1["default"].createElement("pre", null, error));\n} // scroller components\n\n\nvar Viewport_1 = __importDefault(__webpack_require__(/*! ./Viewport */ "./src/Viewport.tsx"));\n\nvar Scrollblock_1 = __importDefault(__webpack_require__(/*! ./Scrollblock */ "./src/Scrollblock.tsx"));\n\nvar Cradle_1 = __importDefault(__webpack_require__(/*! ./Cradle */ "./src/Cradle.tsx")); // loaded here to minimize redundant renders in Cradle\n\n\nvar cachehandler_1 = __webpack_require__(/*! ./cradle/cachehandler */ "./src/cradle/cachehandler.tsx"); // -------------------[ global session ID generator ]----------------\n\n\nvar globalScrollerID = 0; // ===================================[ INITIALIZE ]===========================\n\nvar InfiniteGridScroller = function InfiniteGridScroller(props) {\n  // ------------------[ normalize properties ]--------------------\n  var _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? \'vertical\' : _props$orientation,\n      _props$gap = props.gap,\n      gap = _props$gap === void 0 ? 0 : _props$gap,\n      _props$padding = props.padding,\n      padding = _props$padding === void 0 ? 0 : _props$padding,\n      cellHeight = props.cellHeight,\n      cellWidth = props.cellWidth,\n      _props$layout = props.layout,\n      layout = _props$layout === void 0 ? \'uniform\' : _props$layout,\n      _props$estimatedListS = props.estimatedListSize,\n      estimatedListSize = _props$estimatedListS === void 0 ? 0 : _props$estimatedListS,\n      _props$runwaySize = props.runwaySize,\n      runwaySize = _props$runwaySize === void 0 ? 3 : _props$runwaySize,\n      _props$startingIndex = props.startingIndex,\n      startingIndex = _props$startingIndex === void 0 ? 0 : _props$startingIndex,\n      getItem = props.getItem,\n      placeholder = props.placeholder,\n      _props$styles = props.styles,\n      styles = _props$styles === void 0 ? {} : _props$styles,\n      _props$useScrollTrack = props.useScrollTracker,\n      useScrollTracker = _props$useScrollTrack === void 0 ? true : _props$useScrollTrack,\n      _props$cache = props.cache,\n      cache = _props$cache === void 0 ? \'cradle\' : _props$cache,\n      _props$cacheMax = props.cacheMax,\n      cacheMax = _props$cacheMax === void 0 ? null : _props$cacheMax,\n      _props$triggerlineOff = props.triggerlineOffset,\n      triggerlineOffset = _props$triggerlineOff === void 0 ? 10 : _props$triggerlineOff,\n      _props$callbacks = props.callbacks,\n      callbacks = _props$callbacks === void 0 ? {} : _props$callbacks,\n      _props$advanced = props.advanced,\n      advanced = _props$advanced === void 0 ? {} : _props$advanced,\n      scrollerProperties = props.scrollerProperties; // ---------------------[ Data setup ]----------------------\n  // avoid null/undefined\n\n  styles = styles !== null && styles !== void 0 ? styles : {};\n  callbacks = callbacks !== null && callbacks !== void 0 ? callbacks : {};\n  advanced = advanced !== null && advanced !== void 0 ? advanced : {};\n  startingIndex = startingIndex !== null && startingIndex !== void 0 ? startingIndex : 0;\n  estimatedListSize = estimatedListSize !== null && estimatedListSize !== void 0 ? estimatedListSize : 0;\n  runwaySize = runwaySize !== null && runwaySize !== void 0 ? runwaySize : 3;\n  useScrollTracker = useScrollTracker !== null && useScrollTracker !== void 0 ? useScrollTracker : true; // prop constraints - non-negative values\n\n  runwaySize = Math.max(1, runwaySize); // runwaysize must be at least 1\n\n  estimatedListSize = Math.max(0, estimatedListSize);\n  startingIndex = Math.max(0, startingIndex); // enums\n\n  if (![\'horizontal\', \'vertical\'].includes(orientation)) {\n    orientation = \'vertical\';\n  }\n\n  if (![\'preload\', \'keepload\', \'cradle\'].includes(cache)) {\n    cache = \'cradle\';\n  }\n\n  if (![\'uniform\', \'variable\'].includes(layout)) {\n    layout = \'uniform\';\n  } // package\n\n\n  var gridSpecs = {\n    orientation: orientation,\n    gap: gap,\n    padding: padding,\n    cellHeight: cellHeight,\n    cellWidth: cellWidth,\n    layout: layout\n  };\n  var gridSpecsRef = (0, react_1.useRef)(gridSpecs); // state\n\n  var _ref2 = (0, react_1.useState)(\'setup\'),\n      _ref3 = _slicedToArray(_ref2, 2),\n      scrollerState = _ref3[0],\n      setScrollerState = _ref3[1]; // setup, setlistsize, ready\n  // system\n\n\n  var stylesRef = (0, react_1.useRef)(styles);\n  var callbacksRef = (0, react_1.useRef)(callbacks);\n  var _advanced = advanced,\n      showAxis = _advanced.showAxis,\n      VIEWPORT_RESIZE_TIMEOUT = _advanced.VIEWPORT_RESIZE_TIMEOUT,\n      SCROLL_TIMEOUT_FOR_ONAFTERSCROLL = _advanced.SCROLL_TIMEOUT_FOR_ONAFTERSCROLL,\n      IDLECALLBACK_TIMEOUT = _advanced.IDLECALLBACK_TIMEOUT,\n      MAX_CACHE_OVER_RUN = _advanced.MAX_CACHE_OVER_RUN;\n  VIEWPORT_RESIZE_TIMEOUT = VIEWPORT_RESIZE_TIMEOUT !== null && VIEWPORT_RESIZE_TIMEOUT !== void 0 ? VIEWPORT_RESIZE_TIMEOUT : 250;\n  SCROLL_TIMEOUT_FOR_ONAFTERSCROLL = SCROLL_TIMEOUT_FOR_ONAFTERSCROLL !== null && SCROLL_TIMEOUT_FOR_ONAFTERSCROLL !== void 0 ? SCROLL_TIMEOUT_FOR_ONAFTERSCROLL : 100;\n  IDLECALLBACK_TIMEOUT = IDLECALLBACK_TIMEOUT !== null && IDLECALLBACK_TIMEOUT !== void 0 ? IDLECALLBACK_TIMEOUT : 4000;\n  MAX_CACHE_OVER_RUN = MAX_CACHE_OVER_RUN !== null && MAX_CACHE_OVER_RUN !== void 0 ? MAX_CACHE_OVER_RUN : 1.5;\n  if (typeof showAxis != \'boolean\') showAxis = false;\n  if (typeof useScrollTracker != \'boolean\') useScrollTracker = true; // for mount version\n\n  var scrollerSessionIDRef = (0, react_1.useRef)(null);\n  var scrollerID = scrollerSessionIDRef.current; // for children\n\n  var cacheHandlerRef = (0, react_1.useRef)(null);\n  var listsizeRef = (0, react_1.useRef)(estimatedListSize);\n  var listsize = listsizeRef.current; // test React Object.is for attributes; avoid re-renders with no change\n\n  if (!compareProps(gridSpecs, gridSpecsRef.current)) {\n    gridSpecsRef.current = gridSpecs;\n  }\n\n  if (!compareProps(styles, stylesRef.current)) {\n    stylesRef.current = styles;\n  }\n\n  if (!compareProps(callbacks, callbacksRef.current)) {\n    callbacksRef.current = callbacks;\n  } // -------------------------[ Initialization ]-------------------------------\n\n\n  (0, react_1.useEffect)(function () {\n    scrollerSessionIDRef.current = globalScrollerID++;\n    cacheHandlerRef.current = new cachehandler_1.CacheHandler(scrollerSessionIDRef.current, setListsize, listsizeRef);\n  }, []); // called when getItem returns null, or direct call from user (see servicehandler)\n\n  var setListsize = (0, react_1.useCallback)(function (listsize) {\n    if (listsize == listsizeRef.current) return;\n    listsizeRef.current = listsize; // inform the user\n\n    callbacksRef.current.newListsize && callbacksRef.current.newListsize(listsize);\n    setScrollerState(\'setlistsize\');\n  }, []); // ---------------------[ State handling ]------------------------\n\n  (0, react_1.useEffect)(function () {\n    switch (scrollerState) {\n      case \'setup\':\n      case \'setlistsize\':\n        setScrollerState(\'ready\');\n    }\n  }, [scrollerState]); // --------------------[ Render ]---------------------\n  // component calls are deferred by scrollerState to give cacheHandler a chance to initialize\n\n  return react_1["default"].createElement(react_1["default"].StrictMode, null, react_1["default"].createElement(react_error_boundary_1.ErrorBoundary, {\n    FallbackComponent: ErrorFallback,\n    onReset: function onReset() {// response tbd; there may not need to be one\n    },\n    onError: function onError(error, info) {\n      console.log(\'react-infinite-grid-scroller captured error\', error);\n    }\n  }, scrollerState != \'setup\' && react_1["default"].createElement(Viewport_1["default"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    scrollerProperties: scrollerProperties,\n    scrollerID: scrollerID,\n    VIEWPORT_RESIZE_TIMEOUT: VIEWPORT_RESIZE_TIMEOUT\n  }, react_1["default"].createElement(Scrollblock_1["default"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    listsize: listsize,\n    scrollerID: scrollerID\n  }, react_1["default"].createElement(Cradle_1["default"], {\n    gridSpecs: gridSpecsRef.current,\n    styles: stylesRef.current,\n    listsize: listsize,\n    cache: cache,\n    cacheMax: cacheMax,\n    userCallbacks: callbacksRef.current,\n    startingIndex: startingIndex,\n    getItem: getItem,\n    placeholder: placeholder,\n    runwaySize: runwaySize,\n    triggerlineOffset: triggerlineOffset,\n    cacheHandler: cacheHandlerRef.current,\n    useScrollTracker: useScrollTracker,\n    showAxis: showAxis,\n    SCROLL_TIMEOUT_FOR_ONAFTERSCROLL: SCROLL_TIMEOUT_FOR_ONAFTERSCROLL,\n    IDLECALLBACK_TIMEOUT: IDLECALLBACK_TIMEOUT,\n    MAX_CACHE_OVER_RUN: MAX_CACHE_OVER_RUN,\n    scrollerID: scrollerID\n  }))), scrollerState != \'setup\' && react_1["default"].createElement("div", {\n    "data-type": \'cacheroot\',\n    style: cacherootstyle\n  }, react_1["default"].createElement(cachehandler_1.PortalList, {\n    cacheProps: cacheHandlerRef.current.cacheProps\n  }))));\n};\n\nexports["default"] = InfiniteGridScroller; // ----------------------------[ Support ]------------------------------\n\nvar cacherootstyle = {\n  display: \'none\'\n}; // as React.CSSProperties // static, out of view \n// utilities\n\nfunction compareProps(obj1, obj2) {\n  var keys = Object.keys(obj1);\n  var same;\n\n  for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {\n    var key = _keys[_i2];\n\n    if (!Object.is(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5maW5pdGVncmlkc2Nyb2xsZXIudHN4LmpzIiwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2Q0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBLHNFLENBRUE7OztBQUNBLHFKLENBQXFEO0FBRXJEOzs7QUFDQSxTQUFTQSxhQUFULE9BQWtEO0VBQUEsSUFBMUJDLEtBQTBCLFFBQTFCQSxLQUEwQjtFQUFBLElBQW5CQyxrQkFBbUIsUUFBbkJBLGtCQUFtQjtFQUNoRCxPQUNFQztJQUFLQyxJQUFJLEVBQUM7RUFBVixHQUNFRCw4R0FERixFQUVFQSxzRkFGRixFQUdFQTtJQUFRRSxPQUFPLEVBQUdIO0VBQWxCLEdBQW9DLGNBQXBDLENBSEYsRUFJRUMsOENBQU1GLEtBQU4sQ0FKRixDQURGO0FBUUQsQyxDQUVEOzs7QUFDQTs7QUFDQTs7QUFDQSx3RixDQUVBOzs7QUFDQSx1RyxDQUVBOzs7QUFFQSxJQUFJSyxnQkFBZ0IsR0FBRyxDQUF2QixDLENBRUE7O0FBRUEsSUFBTUMsb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUF1QixDQUFDQyxLQUFELEVBQVU7RUFFbkM7RUFFQSx5QkFtQ0lBLEtBbkNKLENBR0lDLFdBSEo7RUFBQSxJQUdJQSxXQUhKLG1DQUdrQixVQUhsQjtFQUFBLGlCQW1DSUQsS0FuQ0osQ0FJSUUsR0FKSjtFQUFBLElBSUlBLEdBSkosMkJBSVUsQ0FKVjtFQUFBLHFCQW1DSUYsS0FuQ0osQ0FLSUcsT0FMSjtFQUFBLElBS0lBLE9BTEosK0JBS2MsQ0FMZDtFQUFBLElBTUlDLFVBTkosR0FtQ0lKLEtBbkNKLENBTUlJLFVBTko7RUFBQSxJQVFJQyxTQVJKLEdBbUNJTCxLQW5DSixDQVFJSyxTQVJKO0VBQUEsb0JBbUNJTCxLQW5DSixDQVVJTSxNQVZKO0VBQUEsSUFVSUEsTUFWSiw4QkFVYSxTQVZiO0VBQUEsNEJBbUNJTixLQW5DSixDQWFJTyxpQkFiSjtFQUFBLElBYUlBLGlCQWJKLHNDQWF3QixDQWJ4QjtFQUFBLHdCQW1DSVAsS0FuQ0osQ0FjSVEsVUFkSjtFQUFBLElBY0lBLFVBZEosa0NBY2lCLENBZGpCO0VBQUEsMkJBbUNJUixLQW5DSixDQWdCSVMsYUFoQko7RUFBQSxJQWdCSUEsYUFoQkoscUNBZ0JvQixDQWhCcEI7RUFBQSxJQWlCSUMsT0FqQkosR0FtQ0lWLEtBbkNKLENBaUJJVSxPQWpCSjtFQUFBLElBb0JJQyxXQXBCSixHQW1DSVgsS0FuQ0osQ0FvQklXLFdBcEJKO0VBQUEsb0JBbUNJWCxLQW5DSixDQXNCSVksTUF0Qko7RUFBQSxJQXNCSUEsTUF0QkosOEJBc0JhLEVBdEJiO0VBQUEsNEJBbUNJWixLQW5DSixDQTJCSWEsZ0JBM0JKO0VBQUEsSUEyQklBLGdCQTNCSixzQ0EyQnVCLElBM0J2QjtFQUFBLG1CQW1DSWIsS0FuQ0osQ0E0QkljLEtBNUJKO0VBQUEsSUE0QklBLEtBNUJKLDZCQTRCWSxRQTVCWjtFQUFBLHNCQW1DSWQsS0FuQ0osQ0E2QkllLFFBN0JKO0VBQUEsSUE2QklBLFFBN0JKLGdDQTZCZSxJQTdCZjtFQUFBLDRCQW1DSWYsS0FuQ0osQ0E4QklnQixpQkE5Qko7RUFBQSxJQThCSUEsaUJBOUJKLHNDQThCd0IsRUE5QnhCO0VBQUEsdUJBbUNJaEIsS0FuQ0osQ0ErQklpQixTQS9CSjtFQUFBLElBK0JJQSxTQS9CSixpQ0ErQmdCLEVBL0JoQjtFQUFBLHNCQW1DSWpCLEtBbkNKLENBaUNJa0IsUUFqQ0o7RUFBQSxJQWlDSUEsUUFqQ0osZ0NBaUNlLEVBakNmO0VBQUEsSUFrQ0lDLGtCQWxDSixHQW1DSW5CLEtBbkNKLENBa0NJbUIsa0JBbENKLENBSm1DLENBeUNuQztFQUVBOztFQUNBUCxNQUFNLEdBQUdBLE1BQU0sU0FBTixVQUFNLFdBQU4sWUFBVSxFQUFuQjtFQUNBSyxTQUFTLEdBQUdBLFNBQVMsU0FBVCxhQUFTLFdBQVQsZUFBYSxFQUF6QjtFQUNBQyxRQUFRLEdBQUdBLFFBQVEsU0FBUixZQUFRLFdBQVIsY0FBWSxFQUF2QjtFQUNBVCxhQUFhLEdBQUdBLGFBQWEsU0FBYixpQkFBYSxXQUFiLG1CQUFpQixDQUFqQztFQUNBRixpQkFBaUIsR0FBR0EsaUJBQWlCLFNBQWpCLHFCQUFpQixXQUFqQix1QkFBcUIsQ0FBekM7RUFDQUMsVUFBVSxHQUFHQSxVQUFVLFNBQVYsY0FBVSxXQUFWLGdCQUFjLENBQTNCO0VBQ0FLLGdCQUFnQixHQUFHQSxnQkFBZ0IsU0FBaEIsb0JBQWdCLFdBQWhCLHNCQUFvQixJQUF2QyxDQWxEbUMsQ0FvRG5DOztFQUNBTCxVQUFVLEdBQUdZLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBV2IsVUFBWCxDQUFiLENBckRtQyxDQXFEQzs7RUFDcENELGlCQUFpQixHQUFHYSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULEVBQVdkLGlCQUFYLENBQXBCO0VBQ0FFLGFBQWEsR0FBR1csSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFXWixhQUFYLENBQWhCLENBdkRtQyxDQXlEbkM7O0VBQ0EsSUFBSSxDQUFDLENBQUMsWUFBRCxFQUFjLFVBQWQsRUFBMEJhLFFBQTFCLENBQW1DckIsV0FBbkMsQ0FBTCxFQUFzRDtJQUNsREEsV0FBVyxHQUFHLFVBQWQ7RUFDSDs7RUFDRCxJQUFJLENBQUMsQ0FBQyxTQUFELEVBQVcsVUFBWCxFQUFzQixRQUF0QixFQUFnQ3FCLFFBQWhDLENBQXlDUixLQUF6QyxDQUFMLEVBQXNEO0lBQ2xEQSxLQUFLLEdBQUcsUUFBUjtFQUNIOztFQUNELElBQUksQ0FBQyxDQUFDLFNBQUQsRUFBWSxVQUFaLEVBQXdCUSxRQUF4QixDQUFpQ2hCLE1BQWpDLENBQUwsRUFBK0M7SUFDM0NBLE1BQU0sR0FBRyxTQUFUO0VBQ0gsQ0FsRWtDLENBb0VuQzs7O0VBQ0EsSUFBTWlCLFNBQVMsR0FBRztJQUNkdEIsV0FBVyxFQUFYQSxXQURjO0lBRWRDLEdBQUcsRUFBSEEsR0FGYztJQUdkQyxPQUFPLEVBQVBBLE9BSGM7SUFJZEMsVUFBVSxFQUFWQSxVQUpjO0lBS2RDLFNBQVMsRUFBVEEsU0FMYztJQU1kQyxNQUFNLEVBQU5BO0VBTmMsQ0FBbEI7RUFTQSxJQUFNa0IsWUFBWSxHQUFHLG9CQUFPRCxTQUFQLENBQXJCLENBOUVtQyxDQWdGbkM7O0VBQ0EsWUFBMEMsc0JBQVMsT0FBVCxDQUExQztFQUFBO0VBQUEsSUFBT0UsYUFBUDtFQUFBLElBQXNCQyxnQkFBdEIsWUFqRm1DLENBaUZ5QjtFQUU1RDs7O0VBQ0EsSUFBTUMsU0FBUyxHQUFHLG9CQUFPZixNQUFQLENBQWxCO0VBQ0EsSUFBTWdCLFlBQVksR0FBRyxvQkFBT1gsU0FBUCxDQUFyQjtFQUVBLGdCQVFJQyxRQVJKO0VBQUEsSUFFSVcsUUFGSixhQUVJQSxRQUZKO0VBQUEsSUFHSUMsdUJBSEosYUFHSUEsdUJBSEo7RUFBQSxJQUlJQyxnQ0FKSixhQUlJQSxnQ0FKSjtFQUFBLElBS0lDLG9CQUxKLGFBS0lBLG9CQUxKO0VBQUEsSUFNSUMsa0JBTkosYUFNSUEsa0JBTko7RUFVQUgsdUJBQXVCLEdBQUdBLHVCQUF1QixTQUF2QiwyQkFBdUIsV0FBdkIsNkJBQTJCLEdBQXJEO0VBQ0FDLGdDQUFnQyxHQUFHQSxnQ0FBZ0MsU0FBaEMsb0NBQWdDLFdBQWhDLHNDQUFvQyxHQUF2RTtFQUNBQyxvQkFBb0IsR0FBR0Esb0JBQW9CLFNBQXBCLHdCQUFvQixXQUFwQiwwQkFBd0IsSUFBL0M7RUFDQUMsa0JBQWtCLEdBQUdBLGtCQUFrQixTQUFsQixzQkFBa0IsV0FBbEIsd0JBQXNCLEdBQTNDO0VBRUEsSUFBSSxPQUFPSixRQUFQLElBQW1CLFNBQXZCLEVBQWtDQSxRQUFRLEdBQUcsS0FBWDtFQUVsQyxJQUFJLE9BQU9oQixnQkFBUCxJQUEyQixTQUEvQixFQUEwQ0EsZ0JBQWdCLEdBQUcsSUFBbkIsQ0F4R1AsQ0EwR25DOztFQUNBLElBQU1xQixvQkFBb0IsR0FBRyxvQkFBTyxJQUFQLENBQTdCO0VBQ0EsSUFBTUMsVUFBVSxHQUFHRCxvQkFBb0IsQ0FBQ0UsT0FBeEMsQ0E1R21DLENBOEduQzs7RUFDQSxJQUFNQyxlQUFlLEdBQUcsb0JBQU8sSUFBUCxDQUF4QjtFQUVBLElBQU1DLFdBQVcsR0FBRyxvQkFBTy9CLGlCQUFQLENBQXBCO0VBRUEsSUFBTWdDLFFBQVEsR0FBR0QsV0FBVyxDQUFDRixPQUE3QixDQW5IbUMsQ0FxSG5DOztFQUNBLElBQUksQ0FBQ0ksWUFBWSxDQUFDakIsU0FBRCxFQUFZQyxZQUFZLENBQUNZLE9BQXpCLENBQWpCLEVBQW9EO0lBQ2hEWixZQUFZLENBQUNZLE9BQWIsR0FBdUJiLFNBQXZCO0VBQ0g7O0VBRUQsSUFBSSxDQUFDaUIsWUFBWSxDQUFDNUIsTUFBRCxFQUFTZSxTQUFTLENBQUNTLE9BQW5CLENBQWpCLEVBQThDO0lBQzFDVCxTQUFTLENBQUNTLE9BQVYsR0FBb0J4QixNQUFwQjtFQUNIOztFQUNELElBQUksQ0FBQzRCLFlBQVksQ0FBQ3ZCLFNBQUQsRUFBWVcsWUFBWSxDQUFDUSxPQUF6QixDQUFqQixFQUFvRDtJQUNoRFIsWUFBWSxDQUFDUSxPQUFiLEdBQXVCbkIsU0FBdkI7RUFDSCxDQS9Ia0MsQ0FpSW5DOzs7RUFFQSx1QkFBVyxZQUFLO0lBRVppQixvQkFBb0IsQ0FBQ0UsT0FBckIsR0FBK0J0QyxnQkFBZ0IsRUFBL0M7SUFDQXVDLGVBQWUsQ0FBQ0QsT0FBaEIsR0FBMEIsSUFBSUssMkJBQUosQ0FBaUJQLG9CQUFvQixDQUFDRSxPQUF0QyxFQUErQ00sV0FBL0MsRUFBNERKLFdBQTVELENBQTFCO0VBRUgsQ0FMRCxFQUtFLEVBTEYsRUFuSW1DLENBMEluQzs7RUFDQSxJQUFNSSxXQUFXLEdBQUcseUJBQVksVUFBQ0gsUUFBRCxFQUFhO0lBRXpDLElBQUlBLFFBQVEsSUFBSUQsV0FBVyxDQUFDRixPQUE1QixFQUFxQztJQUVyQ0UsV0FBVyxDQUFDRixPQUFaLEdBQXNCRyxRQUF0QixDQUp5QyxDQU16Qzs7SUFDQVgsWUFBWSxDQUFDUSxPQUFiLENBQXFCTyxXQUFyQixJQUFvQ2YsWUFBWSxDQUFDUSxPQUFiLENBQXFCTyxXQUFyQixDQUFpQ0osUUFBakMsQ0FBcEM7SUFFQWIsZ0JBQWdCLENBQUMsYUFBRCxDQUFoQjtFQUVILENBWG1CLEVBV2xCLEVBWGtCLENBQXBCLENBM0ltQyxDQXdKbkM7O0VBRUEsdUJBQVUsWUFBSztJQUVYLFFBQVFELGFBQVI7TUFDSSxLQUFLLE9BQUw7TUFDQSxLQUFLLGFBQUw7UUFDSUMsZ0JBQWdCLENBQUMsT0FBRCxDQUFoQjtJQUhSO0VBTUgsQ0FSRCxFQVFFLENBQUNELGFBQUQsQ0FSRixFQTFKbUMsQ0FvS25DO0VBRUE7O0VBQ0EsT0FBTzlCLGlDQUFDQSxtQkFBTWlELFVBQVAsRUFBaUIsSUFBakIsRUFDSGpELGlDQUFDa0Qsb0NBQUQsRUFBYztJQUNkQyxpQkFBaUIsRUFBSXRELGFBRFA7SUFFZHVELE9BQU8sRUFBSSxtQkFBSyxDQUNkO0lBQ0QsQ0FKYTtJQUtkQyxPQUFPLEVBQUksaUJBQUN2RCxLQUFELEVBQWV3RCxJQUFmLEVBQWlEO01BQ3hEQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSw2Q0FBWixFQUEyRDFELEtBQTNEO0lBQ0g7RUFQYSxDQUFkLEVBVUVnQyxhQUFhLElBQUksT0FBbEIsSUFBOEI5QixpQ0FBQ3lELHFCQUFELEVBQVM7SUFFcEM3QixTQUFTLEVBQUtDLFlBQVksQ0FBQ1ksT0FGUztJQUdwQ3hCLE1BQU0sRUFBS2UsU0FBUyxDQUFDUyxPQUhlO0lBSXBDakIsa0JBQWtCLEVBQUlBLGtCQUpjO0lBS3BDZ0IsVUFBVSxFQUFLQSxVQUxxQjtJQU1wQ0wsdUJBQXVCLEVBQUtBO0VBTlEsQ0FBVCxFQVUzQm5DLGlDQUFDMEQsd0JBQUQsRUFBWTtJQUVSOUIsU0FBUyxFQUFLQyxZQUFZLENBQUNZLE9BRm5CO0lBR1J4QixNQUFNLEVBQUtlLFNBQVMsQ0FBQ1MsT0FIYjtJQUlSRyxRQUFRLEVBQUtBLFFBSkw7SUFLUkosVUFBVSxFQUFLQTtFQUxQLENBQVosRUFRSXhDLGlDQUFDMkQsbUJBQUQsRUFBTztJQUVIL0IsU0FBUyxFQUFLQyxZQUFZLENBQUNZLE9BRnhCO0lBR0h4QixNQUFNLEVBQUtlLFNBQVMsQ0FBQ1MsT0FIbEI7SUFJSEcsUUFBUSxFQUFLQSxRQUpWO0lBS0h6QixLQUFLLEVBQUtBLEtBTFA7SUFNSEMsUUFBUSxFQUFLQSxRQU5WO0lBT0h3QyxhQUFhLEVBQUszQixZQUFZLENBQUNRLE9BUDVCO0lBUUgzQixhQUFhLEVBQUtBLGFBUmY7SUFTSEMsT0FBTyxFQUFLQSxPQVRUO0lBVUhDLFdBQVcsRUFBS0EsV0FWYjtJQVdISCxVQUFVLEVBQUtBLFVBWFo7SUFZSFEsaUJBQWlCLEVBQUtBLGlCQVpuQjtJQWNId0MsWUFBWSxFQUFJbkIsZUFBZSxDQUFDRCxPQWQ3QjtJQWVIdkIsZ0JBQWdCLEVBQUlBLGdCQWZqQjtJQWdCSGdCLFFBQVEsRUFBS0EsUUFoQlY7SUFpQkhFLGdDQUFnQyxFQUFLQSxnQ0FqQmxDO0lBa0JIQyxvQkFBb0IsRUFBS0Esb0JBbEJ0QjtJQW1CSEMsa0JBQWtCLEVBQUtBLGtCQW5CcEI7SUFvQkhFLFVBQVUsRUFBS0E7RUFwQlosQ0FBUCxDQVJKLENBVjJCLENBVi9CLEVBcURFVixhQUFhLElBQUksT0FBbEIsSUFBOEI5QjtJQUFBLGFBQWlCLFdBQWpCO0lBQTZCOEQsS0FBSyxFQUFLQztFQUF2QyxHQUMzQi9ELGlDQUFDOEMseUJBQUQsRUFBVztJQUFDa0IsVUFBVSxFQUFLdEIsZUFBZSxDQUFDRCxPQUFoQixDQUF3QnVCO0VBQXhDLENBQVgsQ0FEMkIsQ0FyRC9CLENBREcsQ0FBUDtBQTJESCxDQWxPRDs7QUFvT0FDLGtCQUFBQSxHQUFlN0Qsb0JBQWYsQyxDQUVBOztBQUVBLElBQU0yRCxjQUFjLEdBQUc7RUFBQ0csT0FBTyxFQUFDO0FBQVQsQ0FBdkIsQyxDQUF1QztBQUV2Qzs7QUFDQSxTQUFTckIsWUFBVCxDQUF1QnNCLElBQXZCLEVBQTRCQyxJQUE1QixFQUFnQztFQUM1QixJQUFNQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0QsSUFBUCxDQUFZRixJQUFaLENBQWI7RUFDQSxJQUFJSSxJQUFKOztFQUNBLDBCQUFnQkYsSUFBaEIsNkJBQXNCO0lBQWpCLElBQUlHLEdBQUcsYUFBUDs7SUFDRCxJQUFJLENBQUNGLE1BQU0sQ0FBQ0csRUFBUCxDQUFVTixJQUFJLENBQUNLLEdBQUQsQ0FBZCxFQUFvQkosSUFBSSxDQUFDSSxHQUFELENBQXhCLENBQUwsRUFBcUM7TUFDakMsT0FBTyxLQUFQO0lBQ0g7RUFDSjs7RUFDRCxPQUFPLElBQVA7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWluZmluaXRlLWdyaWQtc2Nyb2xsZXIvLi9zcmMvaW5maW5pdGVncmlkc2Nyb2xsZXIudHN4PzYzZTAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW5maW5pdGVHcmlkU2Nyb2xsZXIudHN4XG4vLyBjb3B5cmlnaHQgKGMpIDIwMTktMjAyMiBIZW5yaWsgQmVjaG1hbm4sIFRvcm9udG8sIExpY2VuY2U6IE1JVFxuXG4vKlxuICAgIFJPQURNQVA6XG5cbiAgICAgICAgbGF5b3V0OiB1bmlmb3JtLCB2YXJpYWJsZVxuXG4gICAgICAgIGNyb3NzLWJyb3dzZXIgdGVzdGluZzsgc21hcnRwaG9uZSB0ZXN0aW5nXG5cbiAgICAgICAgcmVsZWFzZSB0byBucG1cblxuICAgICAgICBjcmVhdGUgZGVtbyBzaXRlIC0gZ2l0aHViIHBhZ2VzXG5cbiAgICBCVUdTOiBcblxuICAgICAgICAtIHBpdm90IGlzIGJyb2tlblxuICAgICAgICAtIEZGIHNldHMgYXhpcyB0byBwYXN0IGxhc3QgaXRlbSBvbiB2YXJpYWJsZSBsYXlvdXRcbiAgICAgICAgLSBFZGdlIGZhaWxzIHRvIHNldCBzY3JvbGxQb3Mgc28gYXQgYm90dG9tIHNvIHRoYXQgbGFzdCBpdGVtIGlzIGF0IGVuZCBvZiBzY3JvbGxibG9ja1xuICAgICAgICAtIGJvdHRvbSBvZiBsaXN0IGFkanVzdG1lbnRzIGFyZSBicm9rZW5cbiAgICAgICAgLSByZXBvc2l0aW9uIGlzIGJyb2tlblxuXG4gICAgVE9ETzpcblxuICAgICAgICAtIHRyeSBjaGFuZ2luZyBzY3JvbGxibG9jayBsZW5ndGgvdG9wIGR1cmluZyBzY3JvbGxcbiAgICAgICAgLSByZXZpZXcgYWxsIGNvZGUgd2hlcmUgdmFyaWFibGUgbW9kZSBjaGFuZ2VzIHBvc2l0aW9uaW5nIGNhbGN1bGF0aW9uc1xuICAgICAgICAtIHVzZSBjcmFkbGVSZXNpemUgdG8gY2FwdHVyZSBhc3luYyB2YXJpYWJsZSBjZWxsIHVwZGF0ZXMgYmV0d2VlbiBzdGF0ZSBjeWNsZXNcbiAgICAgICAgLSBjaGFuZ2Ugc2Nyb2xsIGJvdW5jZSBiZWhhdmlvdXIgaWYgc3VwcG9ydGVkIG9uIGFsbCBicm93c2Vyc1xuICAgICAgICAtIHNldCBDZWxsRnJhbWUgbWF4IHRvIGNlbGxXaWR0aC9jZWxsSGVpZ2h0IGZvciB2YXJpYWJsZSBsYXlvdXRcblxuICAgICAgICByZS10ZXN0IGZvciBtZW1vcnkgbGVha3Mgd2luZG93LnBlcmZvcm1hbmNlLm1lbW9yeVxuICAgICAgICByZXRlc3QgY29uY2F0IHJlcGxhY2VtZW50c1xuICAgICAgICBpbnRlZ3JhdGUgY3JhZGxlUGFyYW1ldGVycyBvYmplY3QgYXZhaWxhYmlsaXR5IGludG8gY2FjaGVoYW5kbGVyXG4gICAgICAgIHRlc3QgcGhvbmUgcm90YXRpb24gZm9yIHJlc2l6ZSBkdXJpbmcgc2Nyb2xsIGludGVydGlhXG4gICAgICAgIHJlcXVpcmUgdmFyaWFibGUgc2V0dGluZ3M6IG1pbi9tYXggZm9yIGhlaWdodC93aWR0aCAoPylcbiAgICAgICAgLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAoYWZ0ZXIgbGF5b3V0Li4uKVxuICAgICAgICBcbiAgICAgICAgLSBwcmlvcml0aXplIGZldGNoIGNlbGxzIGZvciB2aXNpYmxlIGNlbGxzXG5cbiAgICAgICAgLSBjcmVhdGUgcmFuZG9tIGxvYWRpbmcgZGVsYXlzIGluIHRlc3QgdWlcbiAgICAgICAgLSBwcm92aWRlIHdheSB0byBhdHRlbXB0IHJlbG9hZCBvZiBhIHNpbmdsZSBjZWxsIChjaGFuZ2UgaW5zdGFuY2VJRClcbiAgICAgICAgLSB0ZXN0IGZvciB0d28gcm9vdCBwb3J0YWxzXG4gICAgICAgIC0gY2FsYyBtaW53aWR0aCBieSBmb3JtIGZhY3RvclxuICAgICAgICAtIHJldmlldyBzY3JvbGxlci1mcmFtZSBmb3IgYXBwcm9wcmlhdGUgZGltZW5zaW9ucyAtIHMvYiBpbnNldDowO3Bvc2l0aW9uOmFic29sdXRlXG4gICAgICAgIC0gYWRkIGdyaWQtdGVtcGxhdGUtcm93czogbWF4LWNvbnRlbnQgdG8gcGFyZW50IGZvciBzYWZhcmkgaXNzdWUgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbiBub3QgZmlsbGluZyBjb2x1bW5cbiovXG5cbi8qXG4gICAgcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlciA9IFJJR1NcblxuICAgIFRoZSBqb2Igb2YgSW5maW5pdGVHcmlkU2Nyb2xsZXIgaXMgdG8gcGFzcyBwYXJhbWV0ZXJzIHRvIGRlcGVuZGVudHMuXG4gICAgVmlld3BvcnQgY29udGFpbnMgdGhlIHNjcm9sbGJsb2NrLCBmdWxsc2l6ZSBmb3IgYWRqdXN0ZWQgY2VsbCBoZWlnaHQvd2lkdGgsIHdoaWNoIGluIHR1cm4gY29udGFpbnMgdGhlIGNyYWRsZSBcbiAgICAgICAgLSBhIGNvbXBvbmVudCB0aGF0IGNvbnRhaW5zIENlbGxGcmFtZXMgKHdoaWNoIGNvbnRhaW4gZGlzcGxheWVkIGl0ZW1zIG9yIHRyYW5zaXRpb25hbCBwbGFjZWhvbGRlcnMuIFxuICAgIFRoZSBDZWxsRnJhbWVzIGFyZSBza2VsZXRvbnMgd2hpY2ggY29udGFpbiB0aGUgaG9zdCBjb250ZW50IGNvbXBvbmVudHMuXG5cbiAgICBIb3N0IGNvbnRlbnQgaXMgaW5zdGFudGlhdGVkIGluIGEgcG9ydGFsIGNhY2hlICh2aWEgUG9ydGFsSGFuZGxlcikgXG4gICAgYW5kIHRoZW4gcG9ydGFsJ2QgdG8gaXRzIGhvc3QgQ2VsbEZyYW1lLiBUaGUgY2FjaCBjYW4gYmUgY29uZmlndXJlZCB0byBob2xkIG1hbnkgbW9yZSBpdGVtc1xuICAgIHRoYW4gY3JhZGxlLCBhbGxvd2luZyBhIHJhbmdlIG9mIGhvc3QgY29udGVudCB0byBtYWludGFpbiBzdGF0ZS5cblxuICAgIFNjcm9sbGJsb2NrIGJ5IHNpemUgcmVwcmVzZW50cyB0aGUgZW50aXJldHkgb2YgdGhlIGxpc3QsIGFuZCBpcyB0aGUgc2Nyb2xsZXJcblxuICAgIENyYWRsZSBjb250YWlucyB0aGUgbGlzdCBpdGVtcywgYW5kIGlzICd2aXJ0dWFsaXplZCcgLS0gaXQgYXBwZWFycyBhc1xuICAgICAgdGhvdWdoIGl0IGlzIHRoZSBmdWxsIHNjcm9sbGJsb2NrLCBidXQgaW4gZmFjdCBpdCBpcyBvbmx5IHNsaWdodGx5IGxhcmdlciB0aGFuXG4gICAgICB0aGUgdmlld3BvcnQuXG4gICAgLSBpbmRpdmlkdWFsIGhvc3QgaXRlbXMgYXJlIGZyYW1lZCBieSBDZWxsRnJhbWUsIG1hbmFnZWQgYnkgQ3JhZGxlXG5cbiAgICBPdmVyYWxsIHRoZSBpbmZpbml0ZWdyaWRzY3JvbGxlciBhcyBhIHBhY2thZ2UgbWFuYWdlcyB0aGUgb2Z0ZW4gYXN5bmNocm9ub3VzIGludGVyYWN0aW9ucyBvZiB0aGUgXG4gICAgY29tcG9uZW50cyBvZiB0aGUgbWVjaGFuaXNtLiBNb3N0IG9mIHRoZSB3b3JrIG9jY3VycyBpbiB0aGUgQ3JhZGxlIGNvbXBvbmVudC5cbiovXG5cbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnXG5cbi8vIGRlZmVuc2l2ZVxuaW1wb3J0IHsgRXJyb3JCb3VuZGFyeSB9IGZyb20gJ3JlYWN0LWVycm9yLWJvdW5kYXJ5JyAvLyB3d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtZXJyb3ItYm91bmRhcnlcblxuLy8gYmFzZWQgb24gbW9kdWxlIHRlbXBsYXRlXG5mdW5jdGlvbiBFcnJvckZhbGxiYWNrKHtlcnJvciwgcmVzZXRFcnJvckJvdW5kYXJ5fSkge1xuICByZXR1cm4gKFxuICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICA8cD5Pb3BzISBTb21ldGhpbmcgd2VudCB3cm9uZyBpbnNpZGUgcmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlci48L3A+XG4gICAgICA8cD5DbGljayB0byBjYW5jZWwgdGhlIGVycm9yIGFuZCBjb250aW51ZS48L3A+XG4gICAgICA8YnV0dG9uIG9uQ2xpY2s9eyByZXNldEVycm9yQm91bmRhcnkgfT5DYW5jZWwgZXJyb3I8L2J1dHRvbj5cbiAgICAgIDxwcmU+e2Vycm9yfTwvcHJlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbi8vIHNjcm9sbGVyIGNvbXBvbmVudHNcbmltcG9ydCBWaWV3cG9ydCBmcm9tICcuL1ZpZXdwb3J0J1xuaW1wb3J0IFNjcm9sbGJsb2NrIGZyb20gJy4vU2Nyb2xsYmxvY2snXG5pbXBvcnQgQ3JhZGxlIGZyb20gJy4vQ3JhZGxlJ1xuXG4vLyBsb2FkZWQgaGVyZSB0byBtaW5pbWl6ZSByZWR1bmRhbnQgcmVuZGVycyBpbiBDcmFkbGVcbmltcG9ydCB7IENhY2hlSGFuZGxlciwgUG9ydGFsTGlzdCB9IGZyb20gJy4vY3JhZGxlL2NhY2hlaGFuZGxlcidcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVsgZ2xvYmFsIHNlc3Npb24gSUQgZ2VuZXJhdG9yIF0tLS0tLS0tLS0tLS0tLS0tXG5cbmxldCBnbG9iYWxTY3JvbGxlcklEID0gMFxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVsgSU5JVElBTElaRSBdPT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmNvbnN0IEluZmluaXRlR3JpZFNjcm9sbGVyID0gKHByb3BzKSA9PiB7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1bIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzIF0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgbGV0IHsgXG5cbiAgICAgICAgLy8gKiogZ3JpZCBzcGVjczpcbiAgICAgICAgb3JpZW50YXRpb24gPSAndmVydGljYWwnLCAvLyB2ZXJ0aWNhbCBvciBob3Jpem9udGFsXG4gICAgICAgIGdhcCA9IDAsIC8vIHNwYWNlIGJldHdlZW4gZ3JpZCBjZWxscywgbm90IGluY2x1ZGluZyB0aGUgbGVhZGluZyBhbmQgdHJhaWxpbmcgcGFkZGluZ1xuICAgICAgICBwYWRkaW5nID0gMCwgLy8gdGhlIGJvcmRlciBzcGFjZSBiZXR3ZWVuIHRoZSBpdGVtcyBhbmQgdGhlIHZpZXdwb3J0LCBhcHBsaWVkIHRvIHRoZSBjcmFkbGVcbiAgICAgICAgY2VsbEhlaWdodCwgLy8gcmVxdWlyZWQuIHRoZSBvdXRlciBwaXhlbCBoZWlnaHQgLSBsaXRlcmFsIGZvciB2ZXJ0aWNhbDsgYXBwcm94aW1hdGUgZm9yIGhvcml6b250YWxcbiAgICAgICAgICAgIC8vIGJhc2UgZm9yIHZhcmlhYmxlIGxheW91dFxuICAgICAgICBjZWxsV2lkdGgsIC8vIHJlcXVpcmVkLiB0aGUgb3V0ZXIgcGl4ZWwgd2lkdGggLSBsaXRlcmFsIGZvciBob3Jpem9udGFsOyBhcHByb3hpbWF0ZSBmb3IgdmVydGljYWxcbiAgICAgICAgICAgIC8vIGJhc2UgZm9yIHZhcmlhYmxlIGxheW91dFxuICAgICAgICBsYXlvdXQgPSAndW5pZm9ybScsIC8vIHVuaWZvcm0sIHZhcmlhYmxlXG5cbiAgICAgICAgLy8gKiogc2Nyb2xsZXIgc3BlY3M6XG4gICAgICAgIGVzdGltYXRlZExpc3RTaXplID0gMCwgLy8gdGhlIGV4YWN0IG51bWJlciBvZiB0aGUgc2l6ZSBvZiB0aGUgdmlydHVhbCBsaXN0LiBjYW4gYmUgbW9kaWZpZWRcbiAgICAgICAgcnVud2F5U2l6ZSA9IDMsIC8vIHRoZSBudW1iZXIgb2YgaXRlbXMgb3V0c2lkZSB0aGUgdmlldyBvZiBlYWNoIHNpZGUgb2YgdGhlIHZpZXdwb3J0IFxuICAgICAgICAgICAgLy8gLS0gZ2l2ZXMgdGltZSB0byBhc3NlbWJsZSBjZWxsRnJhbWVzIGJlZm9yZSBkaXNwbGF5XG4gICAgICAgIHN0YXJ0aW5nSW5kZXggPSAwLCAvLyB0aGUgMC1iYXNlZCBzdGFydGluZyBpbmRleCBvZiB0aGUgbGlzdCwgd2hlbiBmaXJzdCBsb2FkZWRcbiAgICAgICAgZ2V0SXRlbSwgLy8gcmVxdWlyZWQuIGZ1bmN0aW9uIHByb3ZpZGVkIGJ5IGhvc3QgLSBwYXJhbWV0ZXJzIGFyZSBpbmRleCBudW1iZXIsIHNldCBieSBzeXN0ZW0sXG4gICAgICAgICAgICAvLyBhbmQgc2Vzc2lvbiBpdGVtSUQgZm9yIHRyYWNraW5nIGFuZCBtYXRjaGluZzsgXG4gICAgICAgICAgICAvLyByZXR1cm4gdmFsdWUgaXMgaG9zdC1zZWxlY3RlZCBjb21wb25lbnQgb3IgcHJvbWlzZSBvZiBhIGNvbXBvbmVudCwgb3IgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgcGxhY2Vob2xkZXIsIC8vIG9wdGlvbmFsLiBhIHNwYXJzZSBjb21wb25lbnQgdG8gc3RhbmQgaW4gZm9yIGNvbnRlbnQgdW50aWwgdGhlIGNvbnRlbnQgYXJyaXZlczsgXG4gICAgICAgICAgICAvLyByZXBsYWNlcyBkZWZhdWx0IHBsYWNlaG9sZGVyIGlmIHByZXNlbnRcbiAgICAgICAgc3R5bGVzID0ge30sIC8vIG9wdGlvbmFsLiBwYXNzaXZlIHN0eWxlIG92ZXItcmlkZXMgKGVnLiBjb2xvciwgb3BhY2l0eSk7IGhhcyBcbiAgICAgICAgICAgIC8vIHByb3BlcnRpZXMgdmlld3BvcnQsIHNjcm9sbGJsb2NrLCBjcmFkbGUsIHNjcm9sbHRyYWNrZXIsIHBsYWNlaG9sZGVyZnJhbWUsIG9yXG4gICAgICAgICAgICAvLyBwbGFjZWhvbGRlcmNvbnRlbnQuIERvIG5vdCBtYWtlIHN0cnVjdHVyYWwgY2hhbmdlcyFcblxuICAgICAgICAvLyAqKiBzeXN0ZW0gc3BlY3M6XG4gICAgICAgIHVzZVNjcm9sbFRyYWNrZXIgPSB0cnVlLCAvLyB0aGUgaW50ZXJuYWwgdXNlIGZlZWRiYWNrIGZvciByZXBvc2l0aW9uaW5nXG4gICAgICAgIGNhY2hlID0gJ2NyYWRsZScsIC8vIFwicHJlbG9hZFwiLCBcImtlZXBsb2FkXCIgb3IgXCJjcmFkbGVcIlxuICAgICAgICBjYWNoZU1heCA9IG51bGwsIC8vIGFsd2F5cyBtaW5pbXVtIGNyYWRsZTsgbnVsbCBtZWFucyBsaW1pdGVkIGJ5IGxpc3RzaXplXG4gICAgICAgIHRyaWdnZXJsaW5lT2Zmc2V0ID0gMTAsIC8vIGRpc3RhbmNlIGZyb20gY2VsbCBoZWFkIG9yIHRhaWwgZm9yIGNvbnRlbnQgc2hpZnRzIGFib3ZlL2JlbG93IGF4aXNcbiAgICAgICAgY2FsbGJhY2tzID0ge30sIC8vIG9wdGlvbmFsLiBjbG9zdXJlcyB0byBnZXQgZGlyZWN0IGluZm9ybWF0aW9uIHN0cmVhbXMgb2Ygc29tZSBjb21wb25lbnQgdXRpbGl0ZXNcbiAgICAgICAgICAgIC8vIGNhbiBjb250YWluIGdldEZ1bmN0aW9ucywgd2hpY2ggcHJvdmlkZXMgYWNjZXNzIHRvIGludGVybmFsIHNjcm9sbGVyIGZ1bmN0aW9ucyAobW9zdGx5IGNhY2hlIG1hbmFnZW1lbnQpXG4gICAgICAgIGFkdmFuY2VkID0ge30sIC8vIG9wdGlvbmFsLiB0ZWNobmljYWwgc2V0dGluZ3MgbGlrZSBWSUVXUE9SVF9SRVNJWkVfVElNRU9VVFxuICAgICAgICBzY3JvbGxlclByb3BlcnRpZXMsIC8vIHJlcXVpcmVkIGZvciBlbWJlZGRlZCBzY3JvbGxlcjsgc2hhcmVzIHNjcm9sbGVyIHNldHRpbmdzIHdpdGggY29udGVudFxuICAgIH0gPSBwcm9wc1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBEYXRhIHNldHVwIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyBhdm9pZCBudWxsL3VuZGVmaW5lZFxuICAgIHN0eWxlcyA9IHN0eWxlcyA/PyB7fVxuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcyA/PyB7fVxuICAgIGFkdmFuY2VkID0gYWR2YW5jZWQgPz8ge31cbiAgICBzdGFydGluZ0luZGV4ID0gc3RhcnRpbmdJbmRleCA/PyAwXG4gICAgZXN0aW1hdGVkTGlzdFNpemUgPSBlc3RpbWF0ZWRMaXN0U2l6ZSA/PyAwXG4gICAgcnVud2F5U2l6ZSA9IHJ1bndheVNpemUgPz8gM1xuICAgIHVzZVNjcm9sbFRyYWNrZXIgPSB1c2VTY3JvbGxUcmFja2VyID8/IHRydWVcblxuICAgIC8vIHByb3AgY29uc3RyYWludHMgLSBub24tbmVnYXRpdmUgdmFsdWVzXG4gICAgcnVud2F5U2l6ZSA9IE1hdGgubWF4KDEscnVud2F5U2l6ZSkgLy8gcnVud2F5c2l6ZSBtdXN0IGJlIGF0IGxlYXN0IDFcbiAgICBlc3RpbWF0ZWRMaXN0U2l6ZSA9IE1hdGgubWF4KDAsZXN0aW1hdGVkTGlzdFNpemUpXG4gICAgc3RhcnRpbmdJbmRleCA9IE1hdGgubWF4KDAsc3RhcnRpbmdJbmRleClcblxuICAgIC8vIGVudW1zXG4gICAgaWYgKCFbJ2hvcml6b250YWwnLCd2ZXJ0aWNhbCddLmluY2x1ZGVzKG9yaWVudGF0aW9uKSkgeyBcbiAgICAgICAgb3JpZW50YXRpb24gPSAndmVydGljYWwnXG4gICAgfVxuICAgIGlmICghWydwcmVsb2FkJywna2VlcGxvYWQnLCdjcmFkbGUnXS5pbmNsdWRlcyhjYWNoZSkpIHtcbiAgICAgICAgY2FjaGUgPSAnY3JhZGxlJ1xuICAgIH1cbiAgICBpZiAoIVsndW5pZm9ybScsICd2YXJpYWJsZSddLmluY2x1ZGVzKGxheW91dCkpIHtcbiAgICAgICAgbGF5b3V0ID0gJ3VuaWZvcm0nXG4gICAgfVxuXG4gICAgLy8gcGFja2FnZVxuICAgIGNvbnN0IGdyaWRTcGVjcyA9IHtcbiAgICAgICAgb3JpZW50YXRpb24sXG4gICAgICAgIGdhcCxcbiAgICAgICAgcGFkZGluZyxcbiAgICAgICAgY2VsbEhlaWdodCxcbiAgICAgICAgY2VsbFdpZHRoLFxuICAgICAgICBsYXlvdXQsXG4gICAgfVxuXG4gICAgY29uc3QgZ3JpZFNwZWNzUmVmID0gdXNlUmVmKGdyaWRTcGVjcylcblxuICAgIC8vIHN0YXRlXG4gICAgY29uc3QgW3Njcm9sbGVyU3RhdGUsIHNldFNjcm9sbGVyU3RhdGVdID0gdXNlU3RhdGUoJ3NldHVwJykgLy8gc2V0dXAsIHNldGxpc3RzaXplLCByZWFkeVxuXG4gICAgLy8gc3lzdGVtXG4gICAgY29uc3Qgc3R5bGVzUmVmID0gdXNlUmVmKHN0eWxlcylcbiAgICBjb25zdCBjYWxsYmFja3NSZWYgPSB1c2VSZWYoY2FsbGJhY2tzKVxuXG4gICAgbGV0IHtcblxuICAgICAgICBzaG93QXhpcywgLy8gZm9yIGRlYnVnXG4gICAgICAgIFZJRVdQT1JUX1JFU0laRV9USU1FT1VULFxuICAgICAgICBTQ1JPTExfVElNRU9VVF9GT1JfT05BRlRFUlNDUk9MTCxcbiAgICAgICAgSURMRUNBTExCQUNLX1RJTUVPVVQsXG4gICAgICAgIE1BWF9DQUNIRV9PVkVSX1JVTixcblxuICAgIH0gPSBhZHZhbmNlZFxuXG4gICAgVklFV1BPUlRfUkVTSVpFX1RJTUVPVVQgPSBWSUVXUE9SVF9SRVNJWkVfVElNRU9VVCA/PyAyNTBcbiAgICBTQ1JPTExfVElNRU9VVF9GT1JfT05BRlRFUlNDUk9MTCA9IFNDUk9MTF9USU1FT1VUX0ZPUl9PTkFGVEVSU0NST0xMID8/IDEwMFxuICAgIElETEVDQUxMQkFDS19USU1FT1VUID0gSURMRUNBTExCQUNLX1RJTUVPVVQgPz8gNDAwMFxuICAgIE1BWF9DQUNIRV9PVkVSX1JVTiA9IE1BWF9DQUNIRV9PVkVSX1JVTiA/PyAxLjVcblxuICAgIGlmICh0eXBlb2Ygc2hvd0F4aXMgIT0gJ2Jvb2xlYW4nKSBzaG93QXhpcyA9IGZhbHNlXG5cbiAgICBpZiAodHlwZW9mIHVzZVNjcm9sbFRyYWNrZXIgIT0gJ2Jvb2xlYW4nKSB1c2VTY3JvbGxUcmFja2VyID0gdHJ1ZVxuXG4gICAgLy8gZm9yIG1vdW50IHZlcnNpb25cbiAgICBjb25zdCBzY3JvbGxlclNlc3Npb25JRFJlZiA9IHVzZVJlZihudWxsKVxuICAgIGNvbnN0IHNjcm9sbGVySUQgPSBzY3JvbGxlclNlc3Npb25JRFJlZi5jdXJyZW50XG5cbiAgICAvLyBmb3IgY2hpbGRyZW5cbiAgICBjb25zdCBjYWNoZUhhbmRsZXJSZWYgPSB1c2VSZWYobnVsbClcblxuICAgIGNvbnN0IGxpc3RzaXplUmVmID0gdXNlUmVmKGVzdGltYXRlZExpc3RTaXplKVxuXG4gICAgY29uc3QgbGlzdHNpemUgPSBsaXN0c2l6ZVJlZi5jdXJyZW50XG5cbiAgICAvLyB0ZXN0IFJlYWN0IE9iamVjdC5pcyBmb3IgYXR0cmlidXRlczsgYXZvaWQgcmUtcmVuZGVycyB3aXRoIG5vIGNoYW5nZVxuICAgIGlmICghY29tcGFyZVByb3BzKGdyaWRTcGVjcywgZ3JpZFNwZWNzUmVmLmN1cnJlbnQpKSB7XG4gICAgICAgIGdyaWRTcGVjc1JlZi5jdXJyZW50ID0gZ3JpZFNwZWNzXG4gICAgfVxuXG4gICAgaWYgKCFjb21wYXJlUHJvcHMoc3R5bGVzLCBzdHlsZXNSZWYuY3VycmVudCkpIHtcbiAgICAgICAgc3R5bGVzUmVmLmN1cnJlbnQgPSBzdHlsZXNcbiAgICB9XG4gICAgaWYgKCFjb21wYXJlUHJvcHMoY2FsbGJhY2tzLCBjYWxsYmFja3NSZWYuY3VycmVudCkpIHtcbiAgICAgICAgY2FsbGJhY2tzUmVmLmN1cnJlbnQgPSBjYWxsYmFja3NcbiAgICB9XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBJbml0aWFsaXphdGlvbiBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgdXNlRWZmZWN0ICgoKSA9PiB7XG5cbiAgICAgICAgc2Nyb2xsZXJTZXNzaW9uSURSZWYuY3VycmVudCA9IGdsb2JhbFNjcm9sbGVySUQrK1xuICAgICAgICBjYWNoZUhhbmRsZXJSZWYuY3VycmVudCA9IG5ldyBDYWNoZUhhbmRsZXIoc2Nyb2xsZXJTZXNzaW9uSURSZWYuY3VycmVudCwgc2V0TGlzdHNpemUsIGxpc3RzaXplUmVmKVxuXG4gICAgfSxbXSlcblxuICAgIC8vIGNhbGxlZCB3aGVuIGdldEl0ZW0gcmV0dXJucyBudWxsLCBvciBkaXJlY3QgY2FsbCBmcm9tIHVzZXIgKHNlZSBzZXJ2aWNlaGFuZGxlcilcbiAgICBjb25zdCBzZXRMaXN0c2l6ZSA9IHVzZUNhbGxiYWNrKChsaXN0c2l6ZSkgPT57XG5cbiAgICAgICAgaWYgKGxpc3RzaXplID09IGxpc3RzaXplUmVmLmN1cnJlbnQpIHJldHVyblxuXG4gICAgICAgIGxpc3RzaXplUmVmLmN1cnJlbnQgPSBsaXN0c2l6ZVxuXG4gICAgICAgIC8vIGluZm9ybSB0aGUgdXNlclxuICAgICAgICBjYWxsYmFja3NSZWYuY3VycmVudC5uZXdMaXN0c2l6ZSAmJiBjYWxsYmFja3NSZWYuY3VycmVudC5uZXdMaXN0c2l6ZShsaXN0c2l6ZSlcblxuICAgICAgICBzZXRTY3JvbGxlclN0YXRlKCdzZXRsaXN0c2l6ZScpXG5cbiAgICB9LFtdKVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBTdGF0ZSBoYW5kbGluZyBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuXG4gICAgICAgIHN3aXRjaCAoc2Nyb2xsZXJTdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSAnc2V0dXAnOlxuICAgICAgICAgICAgY2FzZSAnc2V0bGlzdHNpemUnOlxuICAgICAgICAgICAgICAgIHNldFNjcm9sbGVyU3RhdGUoJ3JlYWR5JylcbiAgICAgICAgfVxuXG4gICAgfSxbc2Nyb2xsZXJTdGF0ZV0pXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVsgUmVuZGVyIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8vIGNvbXBvbmVudCBjYWxscyBhcmUgZGVmZXJyZWQgYnkgc2Nyb2xsZXJTdGF0ZSB0byBnaXZlIGNhY2hlSGFuZGxlciBhIGNoYW5jZSB0byBpbml0aWFsaXplXG4gICAgcmV0dXJuIDxSZWFjdC5TdHJpY3RNb2RlPlxuICAgICAgICA8RXJyb3JCb3VuZGFyeVxuICAgICAgICBGYWxsYmFja0NvbXBvbmVudD0geyBFcnJvckZhbGxiYWNrIH1cbiAgICAgICAgb25SZXNldD0geyAoKSA9PiB7XG4gICAgICAgICAgLy8gcmVzcG9uc2UgdGJkOyB0aGVyZSBtYXkgbm90IG5lZWQgdG8gYmUgb25lXG4gICAgICAgIH19XG4gICAgICAgIG9uRXJyb3IgPSB7KGVycm9yOiBFcnJvciwgaW5mbzoge2NvbXBvbmVudFN0YWNrOiBzdHJpbmd9KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygncmVhY3QtaW5maW5pdGUtZ3JpZC1zY3JvbGxlciBjYXB0dXJlZCBlcnJvcicsIGVycm9yKVxuICAgICAgICB9fVxuICAgID5cblxuICAgICAgICB7KHNjcm9sbGVyU3RhdGUgIT0gJ3NldHVwJykgJiYgPFZpZXdwb3J0XG5cbiAgICAgICAgICAgIGdyaWRTcGVjcyA9IHsgZ3JpZFNwZWNzUmVmLmN1cnJlbnQgfVxuICAgICAgICAgICAgc3R5bGVzID0geyBzdHlsZXNSZWYuY3VycmVudCB9XG4gICAgICAgICAgICBzY3JvbGxlclByb3BlcnRpZXMgPSB7c2Nyb2xsZXJQcm9wZXJ0aWVzfVxuICAgICAgICAgICAgc2Nyb2xsZXJJRCA9IHsgc2Nyb2xsZXJJRCB9XG4gICAgICAgICAgICBWSUVXUE9SVF9SRVNJWkVfVElNRU9VVCA9IHsgVklFV1BPUlRfUkVTSVpFX1RJTUVPVVQgfVxuXG4gICAgICAgID5cbiAgICAgICAgXG4gICAgICAgICAgICA8U2Nyb2xsYmxvY2tcblxuICAgICAgICAgICAgICAgIGdyaWRTcGVjcyA9IHsgZ3JpZFNwZWNzUmVmLmN1cnJlbnQgfVxuICAgICAgICAgICAgICAgIHN0eWxlcyA9IHsgc3R5bGVzUmVmLmN1cnJlbnQgfVxuICAgICAgICAgICAgICAgIGxpc3RzaXplID0geyBsaXN0c2l6ZSB9XG4gICAgICAgICAgICAgICAgc2Nyb2xsZXJJRCA9IHsgc2Nyb2xsZXJJRCB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPENyYWRsZSBcblxuICAgICAgICAgICAgICAgICAgICBncmlkU3BlY3MgPSB7IGdyaWRTcGVjc1JlZi5jdXJyZW50IH1cbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzID0geyBzdHlsZXNSZWYuY3VycmVudCB9XG4gICAgICAgICAgICAgICAgICAgIGxpc3RzaXplID0geyBsaXN0c2l6ZSB9XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlID0geyBjYWNoZSB9XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlTWF4ID0geyBjYWNoZU1heCB9XG4gICAgICAgICAgICAgICAgICAgIHVzZXJDYWxsYmFja3MgPSB7IGNhbGxiYWNrc1JlZi5jdXJyZW50IH1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRpbmdJbmRleCA9IHsgc3RhcnRpbmdJbmRleCB9XG4gICAgICAgICAgICAgICAgICAgIGdldEl0ZW0gPSB7IGdldEl0ZW0gfVxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlciA9IHsgcGxhY2Vob2xkZXIgfVxuICAgICAgICAgICAgICAgICAgICBydW53YXlTaXplID0geyBydW53YXlTaXplIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcmxpbmVPZmZzZXQgPSB7IHRyaWdnZXJsaW5lT2Zmc2V0IH1cblxuICAgICAgICAgICAgICAgICAgICBjYWNoZUhhbmRsZXIgPSB7Y2FjaGVIYW5kbGVyUmVmLmN1cnJlbnR9XG4gICAgICAgICAgICAgICAgICAgIHVzZVNjcm9sbFRyYWNrZXIgPSB7dXNlU2Nyb2xsVHJhY2tlcn1cbiAgICAgICAgICAgICAgICAgICAgc2hvd0F4aXMgPSB7IHNob3dBeGlzIH1cbiAgICAgICAgICAgICAgICAgICAgU0NST0xMX1RJTUVPVVRfRk9SX09OQUZURVJTQ1JPTEwgPSB7IFNDUk9MTF9USU1FT1VUX0ZPUl9PTkFGVEVSU0NST0xMIH1cbiAgICAgICAgICAgICAgICAgICAgSURMRUNBTExCQUNLX1RJTUVPVVQgPSB7IElETEVDQUxMQkFDS19USU1FT1VUIH1cbiAgICAgICAgICAgICAgICAgICAgTUFYX0NBQ0hFX09WRVJfUlVOID0geyBNQVhfQ0FDSEVfT1ZFUl9SVU4gfVxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxlcklEID0geyBzY3JvbGxlcklEIH1cblxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L1Njcm9sbGJsb2NrPlxuICAgICAgICA8L1ZpZXdwb3J0Pn1cbiAgICAgICAgeyhzY3JvbGxlclN0YXRlICE9ICdzZXR1cCcpICYmIDxkaXYgZGF0YS10eXBlID0gJ2NhY2hlcm9vdCcgc3R5bGUgPSB7IGNhY2hlcm9vdHN0eWxlIH0+XG4gICAgICAgICAgICA8UG9ydGFsTGlzdCBjYWNoZVByb3BzID0geyBjYWNoZUhhbmRsZXJSZWYuY3VycmVudC5jYWNoZVByb3BzIH0vPlxuICAgICAgICA8L2Rpdj59XG4gICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgIDwvUmVhY3QuU3RyaWN0TW9kZT5cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5maW5pdGVHcmlkU2Nyb2xsZXJcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgU3VwcG9ydCBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGNhY2hlcm9vdHN0eWxlID0ge2Rpc3BsYXk6J25vbmUnfS8vIGFzIFJlYWN0LkNTU1Byb3BlcnRpZXMgLy8gc3RhdGljLCBvdXQgb2YgdmlldyBcblxuLy8gdXRpbGl0aWVzXG5mdW5jdGlvbiBjb21wYXJlUHJvcHMgKG9iajEsb2JqMikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmoxKVxuICAgIGxldCBzYW1lXG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcbiAgICAgICAgaWYgKCFPYmplY3QuaXMob2JqMVtrZXldLG9iajJba2V5XSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG59XG4iXSwibmFtZXMiOlsiRXJyb3JGYWxsYmFjayIsImVycm9yIiwicmVzZXRFcnJvckJvdW5kYXJ5IiwicmVhY3RfMSIsInJvbGUiLCJvbkNsaWNrIiwiZ2xvYmFsU2Nyb2xsZXJJRCIsIkluZmluaXRlR3JpZFNjcm9sbGVyIiwicHJvcHMiLCJvcmllbnRhdGlvbiIsImdhcCIsInBhZGRpbmciLCJjZWxsSGVpZ2h0IiwiY2VsbFdpZHRoIiwibGF5b3V0IiwiZXN0aW1hdGVkTGlzdFNpemUiLCJydW53YXlTaXplIiwic3RhcnRpbmdJbmRleCIsImdldEl0ZW0iLCJwbGFjZWhvbGRlciIsInN0eWxlcyIsInVzZVNjcm9sbFRyYWNrZXIiLCJjYWNoZSIsImNhY2hlTWF4IiwidHJpZ2dlcmxpbmVPZmZzZXQiLCJjYWxsYmFja3MiLCJhZHZhbmNlZCIsInNjcm9sbGVyUHJvcGVydGllcyIsIk1hdGgiLCJtYXgiLCJpbmNsdWRlcyIsImdyaWRTcGVjcyIsImdyaWRTcGVjc1JlZiIsInNjcm9sbGVyU3RhdGUiLCJzZXRTY3JvbGxlclN0YXRlIiwic3R5bGVzUmVmIiwiY2FsbGJhY2tzUmVmIiwic2hvd0F4aXMiLCJWSUVXUE9SVF9SRVNJWkVfVElNRU9VVCIsIlNDUk9MTF9USU1FT1VUX0ZPUl9PTkFGVEVSU0NST0xMIiwiSURMRUNBTExCQUNLX1RJTUVPVVQiLCJNQVhfQ0FDSEVfT1ZFUl9SVU4iLCJzY3JvbGxlclNlc3Npb25JRFJlZiIsInNjcm9sbGVySUQiLCJjdXJyZW50IiwiY2FjaGVIYW5kbGVyUmVmIiwibGlzdHNpemVSZWYiLCJsaXN0c2l6ZSIsImNvbXBhcmVQcm9wcyIsImNhY2hlaGFuZGxlcl8xIiwic2V0TGlzdHNpemUiLCJuZXdMaXN0c2l6ZSIsIlN0cmljdE1vZGUiLCJyZWFjdF9lcnJvcl9ib3VuZGFyeV8xIiwiRmFsbGJhY2tDb21wb25lbnQiLCJvblJlc2V0Iiwib25FcnJvciIsImluZm8iLCJjb25zb2xlIiwibG9nIiwiVmlld3BvcnRfMSIsIlNjcm9sbGJsb2NrXzEiLCJDcmFkbGVfMSIsInVzZXJDYWxsYmFja3MiLCJjYWNoZUhhbmRsZXIiLCJzdHlsZSIsImNhY2hlcm9vdHN0eWxlIiwiY2FjaGVQcm9wcyIsImV4cG9ydHMiLCJkaXNwbGF5Iiwib2JqMSIsIm9iajIiLCJrZXlzIiwiT2JqZWN0Iiwic2FtZSIsImtleSIsImlzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/infinitegridscroller.tsx\n')},"./node_modules/react-error-boundary/dist/react-error-boundary.umd.js":function(__unused_webpack_module,exports,__webpack_require__){eval("(function (global, factory) {\n   true ? factory(exports, __webpack_require__(/*! react */ \"react\")) :\n  0;\n})(this, (function (exports, React) { 'use strict';\n\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n      Object.keys(e).forEach(function (k) {\n        if (k !== 'default') {\n          var d = Object.getOwnPropertyDescriptor(e, k);\n          Object.defineProperty(n, k, d.get ? d : {\n            enumerable: true,\n            get: function () { return e[k]; }\n          });\n        }\n      });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n  }\n\n  var React__namespace = /*#__PURE__*/_interopNamespace(React);\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    _setPrototypeOf(subClass, superClass);\n  }\n\n  var changedArray = function changedArray(a, b) {\n    if (a === void 0) {\n      a = [];\n    }\n\n    if (b === void 0) {\n      b = [];\n    }\n\n    return a.length !== b.length || a.some(function (item, index) {\n      return !Object.is(item, b[index]);\n    });\n  };\n\n  var initialState = {\n    error: null\n  };\n\n  var ErrorBoundary = /*#__PURE__*/function (_React$Component) {\n    _inheritsLoose(ErrorBoundary, _React$Component);\n\n    function ErrorBoundary() {\n      var _this;\n\n      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n        _args[_key] = arguments[_key];\n      }\n\n      _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n      _this.state = initialState;\n\n      _this.resetErrorBoundary = function () {\n        var _this$props;\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);\n\n        _this.reset();\n      };\n\n      return _this;\n    }\n\n    ErrorBoundary.getDerivedStateFromError = function getDerivedStateFromError(error) {\n      return {\n        error: error\n      };\n    };\n\n    var _proto = ErrorBoundary.prototype;\n\n    _proto.reset = function reset() {\n      this.setState(initialState);\n    };\n\n    _proto.componentDidCatch = function componentDidCatch(error, info) {\n      var _this$props$onError, _this$props2;\n\n      (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      var error = this.state.error;\n      var resetKeys = this.props.resetKeys; // There's an edge case where if the thing that triggered the error\n      // happens to *also* be in the resetKeys array, we'd end up resetting\n      // the error boundary immediately. This would likely trigger a second\n      // error to be thrown.\n      // So we make sure that we don't check the resetKeys on the first call\n      // of cDU after the error is set\n\n      if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {\n        var _this$props$onResetKe, _this$props3;\n\n        (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);\n        this.reset();\n      }\n    };\n\n    _proto.render = function render() {\n      var error = this.state.error;\n      var _this$props4 = this.props,\n          fallbackRender = _this$props4.fallbackRender,\n          FallbackComponent = _this$props4.FallbackComponent,\n          fallback = _this$props4.fallback;\n\n      if (error !== null) {\n        var _props = {\n          error: error,\n          resetErrorBoundary: this.resetErrorBoundary\n        };\n\n        if ( /*#__PURE__*/React__namespace.isValidElement(fallback)) {\n          return fallback;\n        } else if (typeof fallbackRender === 'function') {\n          return fallbackRender(_props);\n        } else if (FallbackComponent) {\n          return /*#__PURE__*/React__namespace.createElement(FallbackComponent, _props);\n        } else {\n          throw new Error('react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop');\n        }\n      }\n\n      return this.props.children;\n    };\n\n    return ErrorBoundary;\n  }(React__namespace.Component);\n\n  function withErrorBoundary(Component, errorBoundaryProps) {\n    var Wrapped = function Wrapped(props) {\n      return /*#__PURE__*/React__namespace.createElement(ErrorBoundary, errorBoundaryProps, /*#__PURE__*/React__namespace.createElement(Component, props));\n    }; // Format for display in DevTools\n\n\n    var name = Component.displayName || Component.name || 'Unknown';\n    Wrapped.displayName = \"withErrorBoundary(\" + name + \")\";\n    return Wrapped;\n  }\n\n  function useErrorHandler(givenError) {\n    var _React$useState = React__namespace.useState(null),\n        error = _React$useState[0],\n        setError = _React$useState[1];\n\n    if (givenError != null) throw givenError;\n    if (error != null) throw error;\n    return setError;\n  }\n  /*\n  eslint\n    @typescript-eslint/sort-type-union-intersection-members: \"off\",\n    @typescript-eslint/no-throw-literal: \"off\",\n    @typescript-eslint/prefer-nullish-coalescing: \"off\"\n  */\n\n  exports.ErrorBoundary = ErrorBoundary;\n  exports.useErrorHandler = useErrorHandler;\n  exports.withErrorBoundary = withErrorBoundary;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=react-error-boundary.umd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-error-boundary/dist/react-error-boundary.umd.js\n")},"./node_modules/react-reverse-portal/dist/web/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "InPortal": () => (/* binding */ InPortal),\n/* harmony export */   "OutPortal": () => (/* binding */ OutPortal),\n/* harmony export */   "createHtmlPortalNode": () => (/* binding */ createHtmlPortalNode),\n/* harmony export */   "createSvgPortalNode": () => (/* binding */ createSvgPortalNode)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "react-dom");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n// Internally, the portalNode must be for either HTML or SVG elements\nvar ELEMENT_TYPE_HTML = \'html\';\nvar ELEMENT_TYPE_SVG = \'svg\';\n// ReactDOM can handle several different namespaces, but they\'re not exported publicly\n// https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/DOMNamespaces.js#L8-L10\nvar SVG_NAMESPACE = \'http://www.w3.org/2000/svg\';\nvar validateElementType = function (domElement, elementType) {\n    if (elementType === ELEMENT_TYPE_HTML) {\n        return domElement instanceof HTMLElement;\n    }\n    if (elementType === ELEMENT_TYPE_SVG) {\n        return domElement instanceof SVGElement;\n    }\n    throw new Error("Unrecognized element type \\"" + elementType + "\\" for validateElementType.");\n};\n// This is the internal implementation: the public entry points set elementType to an appropriate value\nvar createPortalNode = function (elementType, options) {\n    var initialProps = {};\n    var parent;\n    var lastPlaceholder;\n    var element;\n    if (elementType === ELEMENT_TYPE_HTML) {\n        element = document.createElement(\'div\');\n    }\n    else if (elementType === ELEMENT_TYPE_SVG) {\n        element = document.createElementNS(SVG_NAMESPACE, \'g\');\n    }\n    else {\n        throw new Error("Invalid element type \\"" + elementType + "\\" for createPortalNode: must be \\"html\\" or \\"svg\\".");\n    }\n    if (options && typeof options === "object") {\n        for (var _i = 0, _a = Object.entries(options.attributes); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            element.setAttribute(key, value);\n        }\n    }\n    var portalNode = {\n        element: element,\n        elementType: elementType,\n        setPortalProps: function (props) {\n            initialProps = props;\n        },\n        getInitialPortalProps: function () {\n            return initialProps;\n        },\n        mount: function (newParent, newPlaceholder) {\n            if (newPlaceholder === lastPlaceholder) {\n                // Already mounted - noop.\n                return;\n            }\n            portalNode.unmount();\n            // To support SVG and other non-html elements, the portalNode\'s elementType needs to match\n            // the elementType it\'s being rendered into\n            if (newParent !== parent) {\n                if (!validateElementType(newParent, elementType)) {\n                    throw new Error("Invalid element type for portal: \\"" + elementType + "\\" portalNodes must be used with " + elementType + " elements, but OutPortal is within <" + newParent.tagName + ">.");\n                }\n            }\n            newParent.replaceChild(portalNode.element, newPlaceholder);\n            parent = newParent;\n            lastPlaceholder = newPlaceholder;\n        },\n        unmount: function (expectedPlaceholder) {\n            if (expectedPlaceholder && expectedPlaceholder !== lastPlaceholder) {\n                // Skip unmounts for placeholders that aren\'t currently mounted\n                // They will have been automatically unmounted already by a subsequent mount()\n                return;\n            }\n            if (parent && lastPlaceholder) {\n                parent.replaceChild(lastPlaceholder, portalNode.element);\n                parent = undefined;\n                lastPlaceholder = undefined;\n            }\n        }\n    };\n    return portalNode;\n};\nvar InPortal = /** @class */ (function (_super) {\n    __extends(InPortal, _super);\n    function InPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.addPropsChannel = function () {\n            Object.assign(_this.props.node, {\n                setPortalProps: function (props) {\n                    // Rerender the child node here if/when the out portal props change\n                    _this.setState({ nodeProps: props });\n                }\n            });\n        };\n        _this.state = {\n            nodeProps: _this.props.node.getInitialPortalProps(),\n        };\n        return _this;\n    }\n    InPortal.prototype.componentDidMount = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.componentDidUpdate = function () {\n        this.addPropsChannel();\n    };\n    InPortal.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, children = _a.children, node = _a.node;\n        return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, function (child) {\n            if (!react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child))\n                return child;\n            return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, _this.state.nodeProps);\n        }), node.element);\n    };\n    return InPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar OutPortal = /** @class */ (function (_super) {\n    __extends(OutPortal, _super);\n    function OutPortal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.placeholderNode = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        _this.passPropsThroughPortal();\n        return _this;\n    }\n    OutPortal.prototype.passPropsThroughPortal = function () {\n        var propsForTarget = Object.assign({}, this.props, { node: undefined });\n        this.props.node.setPortalProps(propsForTarget);\n    };\n    OutPortal.prototype.componentDidMount = function () {\n        var node = this.props.node;\n        this.currentPortalNode = node;\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentDidUpdate = function () {\n        // We re-mount on update, just in case we were unmounted (e.g. by\n        // a second OutPortal, which has now been removed)\n        var node = this.props.node;\n        // If we\'re switching portal nodes, we need to clean up the current one first.\n        if (this.currentPortalNode && node !== this.currentPortalNode) {\n            this.currentPortalNode.unmount(this.placeholderNode.current);\n            this.currentPortalNode.setPortalProps({});\n            this.currentPortalNode = node;\n        }\n        var placeholder = this.placeholderNode.current;\n        var parent = placeholder.parentNode;\n        node.mount(parent, placeholder);\n        this.passPropsThroughPortal();\n    };\n    OutPortal.prototype.componentWillUnmount = function () {\n        var node = this.props.node;\n        node.unmount(this.placeholderNode.current);\n        node.setPortalProps({});\n    };\n    OutPortal.prototype.render = function () {\n        // Render a placeholder to the DOM, so we can get a reference into\n        // our location in the DOM, and swap it out for the portaled node.\n        // A <div> placeholder works fine even for SVG.\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { ref: this.placeholderNode });\n    };\n    return OutPortal;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\nvar createHtmlPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_HTML);\nvar createSvgPortalNode = createPortalNode.bind(null, ELEMENT_TYPE_SVG);\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-reverse-portal/dist/web/index.js\n')},"./node_modules/requestidlecallback/index.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}(function(){\n\t'use strict';\n\tvar scheduleStart, throttleDelay, lazytimer, lazyraf;\n\tvar root = typeof window != 'undefined' ?\n\t\twindow :\n\t\ttypeof __webpack_require__.g != undefined ?\n\t\t\t__webpack_require__.g :\n\t\t\tthis || {};\n\tvar requestAnimationFrame = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;\n\tvar cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;\n\tvar tasks = [];\n\tvar runAttempts = 0;\n\tvar isRunning = false;\n\tvar remainingTime = 7;\n\tvar minThrottle = 35;\n\tvar throttle = 125;\n\tvar index = 0;\n\tvar taskStart = 0;\n\tvar tasklength = 0;\n\tvar IdleDeadline = {\n\t\tget didTimeout(){\n\t\t\treturn false;\n\t\t},\n\t\ttimeRemaining: function(){\n\t\t\tvar timeRemaining = remainingTime - (Date.now() - taskStart);\n\t\t\treturn timeRemaining < 0 ? 0 : timeRemaining;\n\t\t},\n\t};\n\tvar setInactive = debounce(function(){\n\t\tremainingTime = 22;\n\t\tthrottle = 66;\n\t\tminThrottle = 0;\n\t});\n\n\tfunction debounce(fn){\n\t\tvar id, timestamp;\n\t\tvar wait = 99;\n\t\tvar check = function(){\n\t\t\tvar last = (Date.now()) - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tid = setTimeout(check, wait - last);\n\t\t\t} else {\n\t\t\t\tid = null;\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\t\treturn function(){\n\t\t\ttimestamp = Date.now();\n\t\t\tif(!id){\n\t\t\t\tid = setTimeout(check, wait);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction abortRunning(){\n\t\tif(isRunning){\n\t\t\tif(lazyraf){\n\t\t\t\tcancelRequestAnimationFrame(lazyraf);\n\t\t\t}\n\t\t\tif(lazytimer){\n\t\t\t\tclearTimeout(lazytimer);\n\t\t\t}\n\t\t\tisRunning = false;\n\t\t}\n\t}\n\n\tfunction onInputorMutation(){\n\t\tif(throttle != 125){\n\t\t\tremainingTime = 7;\n\t\t\tthrottle = 125;\n\t\t\tminThrottle = 35;\n\n\t\t\tif(isRunning) {\n\t\t\t\tabortRunning();\n\t\t\t\tscheduleLazy();\n\t\t\t}\n\t\t}\n\t\tsetInactive();\n\t}\n\n\tfunction scheduleAfterRaf() {\n\t\tlazyraf = null;\n\t\tlazytimer = setTimeout(runTasks, 0);\n\t}\n\n\tfunction scheduleRaf(){\n\t\tlazytimer = null;\n\t\trequestAnimationFrame(scheduleAfterRaf);\n\t}\n\n\tfunction scheduleLazy(){\n\n\t\tif(isRunning){return;}\n\t\tthrottleDelay = throttle - (Date.now() - taskStart);\n\n\t\tscheduleStart = Date.now();\n\n\t\tisRunning = true;\n\n\t\tif(minThrottle && throttleDelay < minThrottle){\n\t\t\tthrottleDelay = minThrottle;\n\t\t}\n\n\t\tif(throttleDelay > 9){\n\t\t\tlazytimer = setTimeout(scheduleRaf, throttleDelay);\n\t\t} else {\n\t\t\tthrottleDelay = 0;\n\t\t\tscheduleRaf();\n\t\t}\n\t}\n\n\tfunction runTasks(){\n\t\tvar task, i, len;\n\t\tvar timeThreshold = remainingTime > 9 ?\n\t\t\t9 :\n\t\t\t1\n\t\t;\n\n\t\ttaskStart = Date.now();\n\t\tisRunning = false;\n\n\t\tlazytimer = null;\n\n\t\tif(runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart){\n\t\t\tfor(i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++){\n\t\t\t\ttask = tasks.shift();\n\t\t\t\ttasklength++;\n\t\t\t\tif(task){\n\t\t\t\t\ttask(IdleDeadline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(tasks.length){\n\t\t\tscheduleLazy();\n\t\t} else {\n\t\t\trunAttempts = 0;\n\t\t}\n\t}\n\n\tfunction requestIdleCallbackShim(task){\n\t\tindex++;\n\t\ttasks.push(task);\n\t\tscheduleLazy();\n\t\treturn index;\n\t}\n\n\tfunction cancelIdleCallbackShim(id){\n\t\tvar index = id - 1 - tasklength;\n\t\tif(tasks[index]){\n\t\t\ttasks[index] = null;\n\t\t}\n\t}\n\n\tif(!root.requestIdleCallback || !root.cancelIdleCallback){\n\t\troot.requestIdleCallback = requestIdleCallbackShim;\n\t\troot.cancelIdleCallback = cancelIdleCallbackShim;\n\n\t\tif(root.document && document.addEventListener){\n\t\t\troot.addEventListener('scroll', onInputorMutation, true);\n\t\t\troot.addEventListener('resize', onInputorMutation);\n\n\t\t\tdocument.addEventListener('focus', onInputorMutation, true);\n\t\t\tdocument.addEventListener('mouseover', onInputorMutation, true);\n\t\t\t['click', 'keypress', 'touchstart', 'mousedown'].forEach(function(name){\n\t\t\t\tdocument.addEventListener(name, onInputorMutation, {capture: true, passive: true});\n\t\t\t});\n\n\t\t\tif(root.MutationObserver){\n\t\t\t\tnew MutationObserver( onInputorMutation ).observe( document.documentElement, {childList: true, subtree: true, attributes: true} );\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\troot.requestIdleCallback(function(){}, {timeout: 0});\n\t\t} catch(e){\n\t\t\t(function(rIC){\n\t\t\t\tvar timeRemainingProto, timeRemaining;\n\t\t\t\troot.requestIdleCallback = function(fn, timeout){\n\t\t\t\t\tif(timeout && typeof timeout.timeout == 'number'){\n\t\t\t\t\t\treturn rIC(fn, timeout.timeout);\n\t\t\t\t\t}\n\t\t\t\t\treturn rIC(fn);\n\t\t\t\t};\n\t\t\t\tif(root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)){\n\t\t\t\t\ttimeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, 'timeRemaining');\n\t\t\t\t\tif(!timeRemaining || !timeRemaining.configurable || !timeRemaining.get){return;}\n\t\t\t\t\tObject.defineProperty(timeRemainingProto, 'timeRemaining', {\n\t\t\t\t\t\tvalue:  function(){\n\t\t\t\t\t\t\treturn timeRemaining.get.call(this);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(root.requestIdleCallback)\n\t\t}\n\t}\n\n\treturn {\n\t\trequest: requestIdleCallbackShim,\n\t\tcancel: cancelIdleCallbackShim,\n\t};\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/requestidlecallback/index.js\n")},react:e=>{"use strict";e.exports=__WEBPACK_EXTERNAL_MODULE_react__},"react-dom":e=>{"use strict";e.exports=__WEBPACK_EXTERNAL_MODULE_react_dom__}},__webpack_module_cache__={};function __webpack_require__(e){var I=__webpack_module_cache__[e];if(void 0!==I)return I.exports;var l=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(l.exports,l,l.exports,__webpack_require__),l.exports}__webpack_require__.n=e=>{var I=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(I,{a:I}),I},__webpack_require__.d=(e,I)=>{for(var l in I)__webpack_require__.o(I,l)&&!__webpack_require__.o(e,l)&&Object.defineProperty(e,l,{enumerable:!0,get:I[l]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,I)=>Object.prototype.hasOwnProperty.call(e,I),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/infinitegridscroller.tsx");return __webpack_exports__})()));